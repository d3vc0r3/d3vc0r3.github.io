<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>DEVCORE 戴夫寇爾</title>
 <link href="http://devco.re/" rel="self"/>
 <link href="http://devco.re"/>
 <updated>2014-03-10T16:01:10+08:00</updated>
 <id>http://devco.re</id>
 <author>
   <name>DEVCORE</name>
   <email>contact [at] devco.re</email>
 </author>

 
 <entry>
   <title>HTTP Headers 的資安議題 (1)</title>
   <link href="http://devco.re/blog/2014/03/10/security-issues-of-http-headers-1/"/>
   <updated>2014-03-10T00:00:00+08:00</updated>
   <id>http://devco.re/blog/2014/03/10/security-issues-of-http-headers-1</id>
   <content type="html">&lt;h3 id=&quot;&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;隨著駭客攻擊事件日益漸增，原本經常被大眾所忽視的網站資安問題，現在已經逐漸受到重視。但是，許多企業主或開發人員雖然很想強化網站的安全性，卻不知道該如何從何著手。&lt;/p&gt;

&lt;p&gt;企業主通常想到的改善方案是添購資安設備，希望可以一勞永逸。我們姑且先不談「&lt;strong&gt;資訊界沒有永遠的安全&lt;/strong&gt;」這件事，企業光是要買到有效的資安設備就是一件令人頭痛的事情，不但要花許多時間聽取廠商的簡報，耗費大筆的經費採購，購買之後還要請員工或原廠技術人員協助調校、設定或教學，否則買了等於沒買。&lt;/p&gt;

&lt;p&gt;而對於技術人員來說，若要強化網站安全性，必須先了解駭客如何攻擊，才知道如何建立根本性的防禦機制。但是企業主通常捨不得送員工去參加專業的教育訓練，台灣員工拿的 22k 低薪也低得常常令人捨不得花錢去上課。&lt;/p&gt;

&lt;p&gt;如果有一種方式可以增強網站的基本安全性，而且不需要花大錢，又可以讓開發人員不用大幅度變更程式，應該是個皆大歡喜的方案？&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h3 id=&quot;_2&quot;&gt;究竟有沒有低成本的簡易防禦方法？&lt;/h3&gt;

&lt;p&gt;有的！目前各家瀏覽器 (Google Chrome、Firefox、Safari、IE) 其實已經支援許多種資安相關的 HTTP headers。開發人員若在伺服器設定加入某些 headers，瀏覽器收到 response 時就會執行相對應的防禦機制，如此一來可直接提升網頁應用程式的基本安全性。這些 HTTP headers 通常也已被許多常見的 framework 納入爲基本功能，即使開發人員不清楚如何修改伺服器相關設定，也可以依靠 framework 提供的方式來使用這些 headers。因此使用這些 headers 來提升網站安全性就成爲頗具 CP 值的方式。&lt;/p&gt;

&lt;p&gt;目前最常見的資安相關 HTTP headers 可參考 &lt;a href=&quot;https://www.owasp.org/index.php/List_of_useful_HTTP_headers&quot;&gt;OWASP 網站&lt;/a&gt; 所條列的內容：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Content-Security-Policy (X-Content-Security-Policy、X-Webkit-CSP 都是同一系列)&lt;/li&gt;

&lt;li&gt;Strict-Transport-Security&lt;/li&gt;

&lt;li&gt;X-Content-Type-Options&lt;/li&gt;

&lt;li&gt;X-Frame-Options&lt;/li&gt;

&lt;li&gt;X-XSS-Protection&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;還有一些其他的資安相關 HTTP headers 也值得注意：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Access-Control-Allow-Origin&lt;/li&gt;

&lt;li&gt;X-Download-Options&lt;/li&gt;

&lt;li&gt;X-Permitted-Cross-Domain-Policies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最後有一項比較特別的是 Cookie 的安全設定，由於 Cookie 也是 HTTP headers 的一部份，因此本文也將其列出：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set-Cookie: HttpOnly&lt;/li&gt;

&lt;li&gt;Set-Cookie: Secure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上述 headers 的數量是不是稍微超過你的想像？其實這些技術早已被很多大公司採用，像是 Google、Facebook、Twitter 等常見的網路服務都可看到這些 headers 的蹤影。下面這張圖片使用 Chrome 的 Inspector 來觀察 Twitter 的 HTTP response 內容：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh6.googleusercontent.com/-6dyPHEZZ6RU/UxlujAnSihI/AAAAAAAAAIg/Yq2xC_M4dV8/w1138-h954-no/http-headers-twitter.jpg&quot;&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-6dyPHEZZ6RU/UxlujAnSihI/AAAAAAAAAIg/Yq2xC_M4dV8/w1138-h954-no/http-headers-twitter.jpg&quot; alt=&quot;HTTP headers of Twitter&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;從畫紅線的部分我們可看到 Twitter 在 Cookie 設定了 Secure 與 HttpOnly 這兩個屬性，並且採用了 Strict-Transport-Security、X-Content-Type-Options、X-Frame-Options、X-XSS-Protection 這幾種 headers。&lt;/p&gt;

&lt;p&gt;如果覺得用圖形界面太麻煩，也可以使用 command line 的工具來觀察。下面這張圖片使用 curl 來觀察 Facebook 的 HTTP response 內容：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh4.googleusercontent.com/-wKFIH6kIZDk/UxybqPYO60I/AAAAAAAAAI4/t12_TyJz3cA/w1096-h370-no/http-headers-facebook.jpg&quot;&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-wKFIH6kIZDk/UxybqPYO60I/AAAAAAAAAI4/t12_TyJz3cA/w1096-h370-no/http-headers-facebook.jpg&quot; alt=&quot;HTTP headers of Facebook&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;_headers_&quot;&gt;上述資安相關的 headers 想解決哪些問題？&lt;/h3&gt;

&lt;p&gt;目前這些資安相關的 HTTP headers 想解決的問題主要可分為以下五大類：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;防禦 XSS (Cross Site Scripting)：
&lt;ul&gt;
&lt;li&gt;Content-Security-Policy&lt;/li&gt;

&lt;li&gt;Set-Cookie: HttpOnly&lt;/li&gt;

&lt;li&gt;X-XSS-Protection&lt;/li&gt;

&lt;li&gt;X-Download-Options&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;防禦 Clickjacking：
&lt;ul&gt;
&lt;li&gt;X-Frame-Options&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;強化 HTTPS 機制：
&lt;ul&gt;
&lt;li&gt;Set-Cookie: Secure&lt;/li&gt;

&lt;li&gt;Strict-Transport-Security&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;避免瀏覽器誤判文件形態：
&lt;ul&gt;
&lt;li&gt;X-Content-Type-Options&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;保護網站資源別被任意存取：
&lt;ul&gt;
&lt;li&gt;Access-Control-Allow-Origin（此 header 若設定錯誤會適得其反！）&lt;/li&gt;

&lt;li&gt;X-Permitted-Cross-Domain-Policies&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其中 &lt;a href=&#39;https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)&#39;&gt;XSS&lt;/a&gt; 與 &lt;a href=&quot;https://www.owasp.org/index.php/Clickjacking&quot;&gt;Clickjacking&lt;/a&gt; 是目前常見的攻擊手法，尤其 XSS 目前仍高居 &lt;a href=&quot;https://www.owasp.org/index.php/Top_10_2013-Top_10&quot;&gt;OWASP Top 10 2013 的第三名&lt;/a&gt;，其嚴重性可見一斑。而在我們執行過的許多&lt;a href=&quot;http://devco.re/services/penetration-test&quot;&gt;滲透測試&lt;/a&gt;案之中，被我們找出 XSS 弱點的網站高達九成！實在是不能輕忽這些問題。若能降低這些手法攻擊成功的機率，企業的利益就能有更多的安全保障，客戶對企業的信賴亦會更加穩固。&lt;/p&gt;

&lt;h3 id=&quot;_headers__2&quot;&gt;目前這些 headers 的使用狀況？&lt;/h3&gt;

&lt;p&gt;這麼簡便的基本防禦方式，理當廣為企業所採用，因此我們針對 &lt;a href=&quot;http://www.alexa.com/topsites/countries/TW&quot;&gt;Alexa Taiwan Top 525&lt;/a&gt; 中挑出 513 個可正常使用的網站（咦？一般不是 Top 500 嗎？我沒騙你，&lt;a href=&quot;http://www.alexa.com/topsites/countries;20/TW&quot;&gt;真的有 525&lt;/a&gt;），調查這些網站是否使用某些常見的 HTTP headers。結果相當令人失望，許多網站都未採用這些 headers。統計數據如下圖：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh3.googleusercontent.com/-EGrtPA75hno/Uxy4jyFD9PI/AAAAAAAAAJc/QDhb3lIDtHw/w369-h201-no/http-headers-statistic-alexa-taiwan.png&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-EGrtPA75hno/Uxy4jyFD9PI/AAAAAAAAAJc/QDhb3lIDtHw/w369-h201-no/http-headers-statistic-alexa-taiwan.png&quot; alt=&quot;HTTP headers statistic of Alexa Taiwan Top 513&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;從統計結果中可發現最多人使用的 HttpOnly 只有 21.25%，排名第二的 X-Frame-Options 也只有 7.80%。而且這些數據尚未將 Google、Twitter 等大公司排除，若將前述國際公司排除後，這些比率恐怕會更低。&lt;/p&gt;

&lt;p&gt;不過在上述網站中有不少入口網站、漫畫網站、色情網站，或是公司並非台灣企業，無法反應台灣的使用狀況。恰好在 2012 年 10 月台灣有許多網路服務公司一同成立了 &lt;a href=&quot;http://www.tieataiwan.org/index.php&quot;&gt;TIEA 台灣網路暨電子商務產業發展協會&lt;/a&gt;，目前網站上的&lt;a href=&quot;http://www.tieataiwan.org/member.php&quot;&gt;會員名單&lt;/a&gt;中有 116 個會員，其中不少頗具代表性，正好可觀察這些公司營運的網站是否有採用這些 headers。統計數據如下圖：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh6.googleusercontent.com/-iG4K8bQRP-U/Uxy4vfPsqPI/AAAAAAAAAJo/x66oSzmqwoM/w369-h201-no/http-headers-statistic-tiea.png&quot;&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-iG4K8bQRP-U/Uxy4vfPsqPI/AAAAAAAAAJo/x66oSzmqwoM/w369-h201-no/http-headers-statistic-tiea.png&quot; alt=&quot;HTTP headers statistic of TIEA&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;很可惜地，所有 headers 的採用率比起上一份數據都還要低。除非公司網站僅使用靜態頁面，網站上沒有任何商業邏輯、帳號、個資，否則應該都要使用合適的 headers 為你的資安防禦工事多築一道牆。&lt;/p&gt;

&lt;p&gt;而且由於 meeya 目前沒有正式官網，是直接使用 facebook 粉絲頁作為官網，因此 Content-Security-Policy、Set-Cookie Secure、Strict-Transport-Security、X-Content-Type-Options、X-Frame-Options、X-XSS-Protection 等六項 headers 的統計數量都還要再減一，頓時 Content-Security-Policy 與 Strict-Transport-Security 的總數量皆降至 0 個。此狀況顯示出，即使是在一些台灣主流的網站中，相關營運人員在資安領域仍有許多努力與學習的空間。&lt;/p&gt;

&lt;p&gt;許多台灣企業經常顧著衝業績、開發新功能、趕著讓新服務上線，卻忽略了非常重要的基礎資安建設，往往是在遭到攻擊後才大呼損失慘重，甚至是已被滲透了而不自知，其企業利益與民眾個資的保障皆相當令人擔憂。&lt;/p&gt;

&lt;h3 id=&quot;_3&quot;&gt;下集預告&lt;/h3&gt;

&lt;p&gt;接下來本文的續作我們會分幾個篇章詳談各種 headers 的使用方式並介紹實際案例，下一篇將會探討專門防禦 XSS 的 HTTP headers，敬請期待！等不及的朋友們就請先用上面的一些關鍵字自行上網查詢囉！&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>奇優廣告 Qiyou 廣告手法剖析</title>
   <link href="http://devco.re/blog/2014/03/06/qiyou-ads-hijacking/"/>
   <updated>2014-03-06T00:00:00+08:00</updated>
   <id>http://devco.re/blog/2014/03/06/qiyou-ads-hijacking</id>
   <content type="html">&lt;p&gt;歡迎來到我們的技術文章專欄！&lt;/p&gt;

&lt;p&gt;今天我們來談談「廣告顯示手法」。不少廣告商為了要增加廣告的曝光以及點擊率，會使用各種手法強迫使用者顯示廣告。例如彈出式視窗、內嵌廣告、強制跳轉等等。但這樣的手法有什麼好提的呢？今天有一個很特別的案例，讓我們來看看一個網站「&lt;a href=&quot;http://1kkk.com&quot;&gt;1kkk.com 極速漫畫&lt;/a&gt;」。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/4pevslM2QNBVcXug76t7MCziPk5ms9U1gK76fXqLyQ=w839-h634-no&quot; alt=&quot;奇優廣告 Qiyou 廣告手法剖析 - 1kkk.com&quot; /&gt; 這是一個常見的網路漫畫網站，接著點擊進去漫畫頁面。 &lt;!-- more --&gt; &lt;img src=&quot;https://lh6.googleusercontent.com/-Q9pSLJQc0Ak/Uxf8YrS0tNI/AAAAAAAAAHQ/lZNQcky2r8k/w839-h634-no/blog_qiyou_hijack_03.png&quot; alt=&quot;奇優廣告 Qiyou 廣告手法剖析 - 1kkk.com 漫畫頁面&quot; /&gt; 網站中充斥著煩人的廣告，並且突然一閃而過 Safari 的「閱讀列表」動畫。怎麼會突然這樣呢？讓我們打開「閱讀列表」一探究竟。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-4s9QKuK9ANs/Uxf8ZVeIr-I/AAAAAAAAAHE/C06SoY1VyMI/w262-h525-no/blog_qiyou_hijack_04.png&quot; alt=&quot;奇優廣告 Qiyou 廣告手法剖析 - Safari 顯示閱讀側邊欄&quot; /&gt; &lt;img src=&quot;https://lh6.googleusercontent.com/-gWdJCWw41dY/Uxf8ZtMwpuI/AAAAAAAAAHM/m9WbSBbnJSM/w839-h634-no/blog_qiyou_hijack_05.png&quot; alt=&quot;奇優廣告 Qiyou 廣告手法剖析 - Safari 閱讀列表被放置廣告 URL&quot; /&gt;&lt;/p&gt;

&lt;p&gt;打開閱讀列表之後，我們赫然發現裡面被加了非常多廣告的頁面！&lt;/p&gt;

&lt;p&gt;可以看以下影片示範：&lt;/p&gt;
&lt;center&gt;&lt;iframe frameborder=&#39;0&#39; height=&#39;420&#39; src=&#39;http://www.youtube.com/embed/E-BGf1MwecU&#39; width=&#39;560&#39;&gt; &lt;/iframe&gt;&lt;/center&gt;
&lt;p&gt;這是怎麼做到的呢？就是一種利用 JavaScript 控制滑鼠點擊的變形應用。點選「網頁檢閱器」或是「開發者工具」，會看到一段奇怪的 JavaScript 控制滑鼠的點擊行為。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-Ngnx2PsIyNw/Uxf8ZtZtfSI/AAAAAAAAAHU/NEvZLh6a09M/w795-h634-no/blog_qiyou_hijack_06.png&quot; alt=&quot;奇優廣告 Qiyou 廣告手法剖析 - 廣告 JavaScript&quot; /&gt;&lt;/p&gt;

&lt;p&gt;分析節錄後的 code 如下：&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;html&#39;&gt;&lt;span class=&#39;cp&#39;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&#39;nt&#39;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&#39;nt&#39;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&#39;nt&#39;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&#39;kd&#39;&gt;var&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;force_add_url_to_readinglist&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;kd&#39;&gt;function&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;target_url&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
      &lt;span class=&#39;k&#39;&gt;try&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;kd&#39;&gt;var&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;fake_element&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;document&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;createElement&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s1&#39;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
        &lt;span class=&#39;nx&#39;&gt;fake_element&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;setAttribute&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s1&#39;&gt;&amp;#39;href&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;target_url&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
        &lt;span class=&#39;nx&#39;&gt;fake_element&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;setAttribute&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s1&#39;&gt;&amp;#39;style&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;display:none;&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;

        &lt;span class=&#39;c1&#39;&gt;// https://developer.mozilla.org/en-US/docs/Web/API/event.initMouseEvent&lt;/span&gt;
        &lt;span class=&#39;kd&#39;&gt;var&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;fake_event&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;document&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;createEvent&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s1&#39;&gt;&amp;#39;MouseEvents&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
        &lt;span class=&#39;nx&#39;&gt;fake_event&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;initMouseEvent&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s1&#39;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kc&#39;&gt;false&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kc&#39;&gt;false&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;window&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kc&#39;&gt;false&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kc&#39;&gt;false&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kc&#39;&gt;true&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kc&#39;&gt;false&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kc&#39;&gt;null&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
        &lt;span class=&#39;nx&#39;&gt;fake_element&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;dispatchEvent&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;fake_event&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;

      &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;catch&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;error&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;c1&#39;&gt;// nothing.&lt;/span&gt;
      &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;};&lt;/span&gt;

    &lt;span class=&#39;kd&#39;&gt;var&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;url&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;http://google.com/?&amp;#39;&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;Math&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;random&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;().&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;toString&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;().&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;substr&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
    &lt;span class=&#39;nx&#39;&gt;force_add_url_to_readinglist&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;url&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
  &lt;span class=&#39;nt&#39;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&#39;nt&#39;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&#39;nt&#39;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

  &lt;span class=&#39;nt&#39;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Test: FORCE_ADD_URL_TO_READINGLIST&lt;span class=&#39;nt&#39;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class=&#39;nt&#39;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&#39;nt&#39;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;利用「&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/event.initMouseEvent&quot;&gt;initMouseEvent&lt;/a&gt;」模擬滑鼠的點擊，在 URL 上按下 Shift 鍵點擊。在一般瀏覽器中是「開啟新視窗」，在 Safari 中則是「加入閱讀清單」了，因此形成廣告視窗不斷加入閱讀清單的現象。廣告商利用這種手法增加廣告的點擊率，只要瀏覽器沒有安裝阻擋廣告的套件或者是阻擋「彈出式視窗」，你就會成為流量的貢獻者。&lt;/p&gt;

&lt;p&gt;經過我們的測試，Internet Explorer、Mozilla Firefox 不會受這類攻擊影響，Google Chrome、Opera 則會被內建的 Pop-up 視窗阻擋功能擋下。但若是直接模擬點擊，則全數瀏覽器都會受影響導向至 URL。雖然這種類型的攻擊不會造成實質上的損失跟危害，但若是結合其他惡意手法將可以造成攻擊。例如透過網站掛碼將使用者導向至惡意網站等等。&lt;/p&gt;

&lt;p&gt;若要避免此類型攻擊，有以下幾個建議方案：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;安裝 NoScript 類型套件，僅允許可信賴的網站執行 JavaScript&lt;/li&gt;

&lt;li&gt;開啟「彈出式視窗」阻擋功能，並將網站安全性等級提高。&lt;/li&gt;

&lt;li&gt;安裝 AdBlock 等廣告阻擋套件（但會影響網站營收）&lt;/li&gt;

&lt;li&gt;使用最新版本瀏覽器以策安全&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;網頁型的攻擊越來越多樣化，除了依賴瀏覽器本身的保護並輔以第三方安全套件之外，更需要使用者本身的安全意識，才能安心暢快的瀏覽網路！&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>DEVCORE 新網站上線！</title>
   <link href="http://devco.re/blog/2014/02/27/devcore-new-website/"/>
   <updated>2014-02-27T00:00:00+08:00</updated>
   <id>http://devco.re/blog/2014/02/27/devcore-new-website</id>
   <content type="html">&lt;p&gt;DEVCORE 的新網站上線了！&lt;br /&gt; 非常感謝專業的 &lt;a href=&quot;http://evendesign.tw/&quot;&gt;EVENDESIGN&lt;/a&gt; 幫我們設計精美的網站！&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;我們目前主要服務項目為滲透測試、資安教育訓練、資安事件處理、資安顧問服務，&lt;br /&gt; 各項服務的詳細內容可參考 &lt;a href=&quot;http://devco.re/services/penetration-test&quot;&gt;Services&lt;/a&gt; 頁面。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;同時，在官網中我們將會不定期提供最新的資安新知及技術文章，&lt;br /&gt; 希望藉由我們的力量讓大眾更清楚資訊安全的重要。&lt;br /&gt; 並且透過站內的教學文獻，讓開發者、管理者進一步了解駭客的思維、攻防的手法，&lt;br /&gt; 知己知彼，才能百戰不怠。瞭解如何攻擊，更能知道如何防禦。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;若對我們的網站內容或服務有任何建議，歡迎您隨時與我們聯繫。&lt;br /&gt; 希望我們能為您的企業資訊安全最佳把關者！&lt;br /&gt; 歡迎隨時聯絡我們！ &lt;code&gt;contact [at] devco.re&lt;/code&gt;&lt;/p&gt;</content>
 </entry>
 
 
</feed>